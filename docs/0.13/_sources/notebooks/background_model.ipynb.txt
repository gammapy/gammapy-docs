{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.13?urlpath=lab/tree/background_model.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[background_model.ipynb](../_static/notebooks/background_model.ipynb) |\n",
    "[background_model.py](../_static/notebooks/background_model.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make template background model\n",
    "\n",
    "## Introduction \n",
    "\n",
    "In this tutorial, we will create a template background model from scratch. Often, background models are pre-computed and provided for analysis, but it's educational to see how the sausage is made.\n",
    "\n",
    "We will use the \"off observations\", i.e. those without significant gamma-ray emission sources in the field of view from the [H.E.S.S. first public test data release](https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/). This model could then be used in the analysis of sources from that dataset (not done here).\n",
    "\n",
    "We will make a background model that is radially symmetric in the field of view, i.e. only depends on field of view offset angle and energy. At the end, we will save the model in the `BKG_2D` as defined in the [spec](https://gamma-astro-data-formats.readthedocs.io/en/latest/irfs/full_enclosure/bkg/index.html).\n",
    "\n",
    "Note that this is just a quick and dirty example. Actual background model production is done with more sophistication usually using 100s or 1000s of off runs, e.g. concerning non-radial symmetries, binning and smoothing of the distributions, and treating other dependencies such as zenith angle, telescope configuration or optical efficiency. Another aspect not shown here is how to use AGN observations to make background models, by cutting out the part of the field of view that contains gamma-rays from the AGN.\n",
    "\n",
    "We will mainly be using the following classes:\n",
    "        \n",
    "* [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the runs to use to build the bkg model.\n",
    "* [gammapy.irf.Background2D](..\/api/gammapy.irf.Background2D.rst) to represent and write the background model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As always, we start the notebook with some setup and imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from copy import deepcopy\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.io import fits\n",
    "from astropy.table import Table, vstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from gammapy.utils.nddata import sqrt_space\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.irf import Background2D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select off data\n",
    "\n",
    "We start by selecting the observations used to estimate the background model.\n",
    "\n",
    "In this case, we just take all \"off runs\" as defined in the observation table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations: 45\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")\n",
    "# Select just the off data runs\n",
    "obs_table = data_store.obs_table\n",
    "obs_table = obs_table[obs_table[\"TARGET_NAME\"] == \"Off data\"]\n",
    "observations = data_store.get_observations(obs_table[\"OBS_ID\"])\n",
    "print(\"Number of observations:\", len(observations))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background model\n",
    "\n",
    "The background model we will estimate is a differential background rate model in unit `s-1 MeV-1 sr-1` as a function of reconstructed energy and field of fiew offset.\n",
    "\n",
    "We estimate it by histogramming off data events and then smoothing a bit (not using a good method) to get a less noisy estimate. To get the differential rate, we divide by observation time and also take bin sizes into account to get the rate per energy and solid angle. So overall we fill two arrays called `counts` and `exposure` with `exposure` filled so that `background_rate = counts / exposure` will give the final background rate we're interested in.\n",
    "\n",
    "The processing can be done either one observation at a time, or first for counts and then for exposure. Either way is fine. Here we do one observation at a time, starting with empty histograms and then accumulating counts and exposure. Since this is a multi-step algorithm, we put the code to do this computation in a `BackgroundModelEstimator` class.\n",
    "\n",
    "This functionality was already in Gammapy previously, and will be added back again soon, after `gammapy.irf` has been restructured and improved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BackgroundModelEstimator:\n",
    "    def __init__(self, ebounds, offset):\n",
    "        self.counts = self._make_bkg2d(ebounds, offset, unit=\"\")\n",
    "        self.exposure = self._make_bkg2d(ebounds, offset, unit=\"s MeV sr\")\n",
    "\n",
    "    @staticmethod\n",
    "    def _make_bkg2d(ebounds, offset, unit):\n",
    "        ebounds = ebounds.to(\"MeV\")\n",
    "        offset = offset.to(\"deg\")\n",
    "        shape = len(ebounds) - 1, len(offset) - 1\n",
    "        return Background2D(\n",
    "            energy_lo=ebounds[:-1],\n",
    "            energy_hi=ebounds[1:],\n",
    "            offset_lo=offset[:-1],\n",
    "            offset_hi=offset[1:],\n",
    "            data=np.zeros(shape) * u.Unit(unit),\n",
    "        )\n",
    "\n",
    "    def run(self, observations):\n",
    "        for obs in observations:\n",
    "            self.fill_counts(obs)\n",
    "            self.fill_exposure(obs)\n",
    "\n",
    "    def fill_counts(self, obs):\n",
    "        events = obs.events\n",
    "        data = self.counts.data\n",
    "        counts = np.histogram2d(\n",
    "            x=events.energy.to(\"MeV\"),\n",
    "            y=events.offset.to(\"deg\"),\n",
    "            bins=(data.axes[0].edges, data.axes[1].edges),\n",
    "        )[0]\n",
    "        data.data += counts\n",
    "\n",
    "    def fill_exposure(self, obs):\n",
    "        data = self.exposure.data\n",
    "        energy_width = np.diff(data.axes[0].edges)\n",
    "        offset = data.axes[1].center\n",
    "        offset_width = np.diff(data.axes[1].edges)\n",
    "        solid_angle = 2 * np.pi * offset * offset_width\n",
    "        time = obs.observation_time_duration\n",
    "        exposure = time * energy_width[:, None] * solid_angle[None, :]\n",
    "        data.data += exposure\n",
    "\n",
    "    @property\n",
    "    def background_rate(self):\n",
    "        rate = deepcopy(self.counts)\n",
    "        rate.data.data /= self.exposure.data.data\n",
    "        return rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.71 s, sys: 64.2 ms, total: 1.78 s\n",
      "Wall time: 1.78 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "offset = sqrt_space(start=0, stop=3, num=10) * u.deg\n",
    "estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "estimator.run(observations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's have a quick look at what we did ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "estimator.background_rate.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You could save the background model to a file like this\n",
    "# estimator.background_rate.to_fits().writeto('background_model.fits', overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zenith dependence\n",
    "\n",
    "The background models used in H.E.S.S. usually depend on the zenith angle of the observation. That kinda makes sense because the energy threshold increases with zenith angle, and since the background is related to (but not given by) the charged cosmic ray spectrum that is a power-law and falls steeply, we also expect the background rate to change.\n",
    "\n",
    "Let's have a look at the dependence we get for this configuration used here (Hillas reconstruction, standard cuts, see H.E.S.S. release notes for more information)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"SAFE_ENERGY_LO\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Energy threshold (TeV)\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"EVENT_COUNT\"] / obs_table[\"ONTIME\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Rate (events / sec)\")\n",
    "plt.ylim(0, 10);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energy threshold increases, as expected. It's a bit surprising that the total background rate doesn't decreases with increasing zenith angle. That's a bit of luck for this configuration, and because we're looking at the rate of background events in the whole field of view. As shown below, the energy threshold increases (reducing the total rate), but the rate at a given energy increases with zenith angle (increasing the total rate). Overall the background does change with zenith angle and that dependency should be taken into account.\n",
    "\n",
    "The remaining scatter you see in the plots above (in energy threshold and rate) is due to dependence on telescope optical efficiency, atmospheric changes from run to run and other effects. If you're interested in this, [2014APh....54...25H](https://ui.adsabs.harvard.edu/abs/2014APh....54...25H) has some infos. We'll not consider this futher.\n",
    "\n",
    "When faced with the question whether and how to model the zenith angle dependence, we're faced with a complex optimisation problem: the closer we require off runs to be in zenith angle, the fewer off runs and thus event statistic we have available, which will lead do noise in the background model. The choice of zenith angle binning or \"on-off observation mathching\" strategy isn't the only thing that needs to be optimised, there's also energy and offset binnings and smoothing scales. And of course good settings will depend on the way you plan to use the background model, i.e. the science measurement you plan to do. Some say background modeling is the hardest part of IACT data analysis.\n",
    "\n",
    "Here we'll just code up something simple: make three background models, one from the off runs with zenith angle 0 to 20 deg, one from 20 to 40 deg, and one from 40 to 90 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "zenith_bins = [\n",
    "    {\"min\": 0, \"max\": 20},\n",
    "    {\"min\": 20, \"max\": 40},\n",
    "    {\"min\": 40, \"max\": 90},\n",
    "]\n",
    "\n",
    "\n",
    "def make_model(observations):\n",
    "    ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "    offset = sqrt_space(start=0, stop=3, num=10) * u.deg\n",
    "    estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "    estimator.run(observations)\n",
    "    return estimator.background_rate\n",
    "\n",
    "\n",
    "def make_models():\n",
    "    for zenith in zenith_bins:\n",
    "        mask = zenith[\"min\"] <= obs_table[\"ZEN_PNT\"]\n",
    "        mask &= obs_table[\"ZEN_PNT\"] < zenith[\"max\"]\n",
    "        obs_ids = obs_table[\"OBS_ID\"][mask]\n",
    "        observations = data_store.get_observations(obs_ids)\n",
    "        yield make_model(observations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.73 s, sys: 64.8 ms, total: 1.8 s\n",
      "Wall time: 1.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "models = list(make_models())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[0].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[2].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy = models[0].data.axis(\"energy\").center.to(\"TeV\")\n",
    "y = models[0].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"0 < zen < 20\")\n",
    "y = models[1].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"20 < zen < 40\")\n",
    "y = models[2].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"40 < zen < 90\")\n",
    "plt.loglog()\n",
    "plt.xlabel(\"Energy (TeV)\")\n",
    "plt.ylabel(\"Bkg rate (s-1 sr-1 MeV-1)\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Index tables\n",
    "\n",
    "So now we have radially symmetric background models for three zenith angle bins. To be able to use it from the high-level Gammapy classes like e.g. the MapMaker though, we also have to create a [HDU index table](https://gamma-astro-data-formats.readthedocs.io/en/latest/data_storage/hdu_index/index.html) that declares which background model to use for each observation.\n",
    "\n",
    "It sounds harder than it actually is. Basically you have to some code to make a new `astropy.table.Table`. The most tricky part is that before you can make the HDU index table, you have to decide where to store the data, because the HDU index table is a reference to the data location. Let's decide in this example that we want to re-use all existing files in `$GAMMAPY_DATA/hess-dl3-dr1` and put all the new HDUs (for background models and new index files) bundled in a single FITS file called `hess-dl3-dr3-with-background.fits.gz`, which we will put  in `$GAMMAPY_DATA/hess-dl3-dr1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"hess-dl3-dr3-with-background.fits.gz\"\n",
    "\n",
    "# Make a new table with one row for each observation\n",
    "# pointing to the background model HDU\n",
    "rows = []\n",
    "for obs_row in data_store.obs_table:\n",
    "    # TODO: pick the right background model based on zenith angle\n",
    "    row = {\n",
    "        \"OBS_ID\": obs_row[\"OBS_ID\"],\n",
    "        \"HDU_TYPE\": \"bkg\",\n",
    "        \"HDU_CLASS\": \"bkg_2d\",\n",
    "        \"FILE_DIR\": \"\",\n",
    "        \"FILE_NAME\": filename,\n",
    "        \"HDU_NAME\": \"BKG0\",\n",
    "    }\n",
    "    rows.append(row)\n",
    "\n",
    "hdu_table_bkg = Table(rows=rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a copy of the original HDU index table\n",
    "hdu_table = data_store.hdu_table.copy()\n",
    "hdu_table.meta.pop(\"BASE_DIR\")\n",
    "\n",
    "# Add the rows for the background HDUs\n",
    "hdu_table = vstack([hdu_table, hdu_table_bkg])\n",
    "hdu_table.sort(\"OBS_ID\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>HDUIndexTable masked=True length=7</i>\n",
       "<table id=\"table4670251808\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>HDU_TYPE</th><th>HDU_CLASS</th><th>FILE_DIR</th><th>FILE_NAME</th><th>HDU_NAME</th><th>SIZE</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>str6</th><th>str9</th><th>str4</th><th>str36</th><th>str6</th><th>int64</th></tr></thead>\n",
       "<tr><td>20136</td><td>events</td><td>events</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>events</td><td>414720</td></tr>\n",
       "<tr><td>20136</td><td>psf</td><td>psf_table</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>psf</td><td>118080</td></tr>\n",
       "<tr><td>20136</td><td>edisp</td><td>edisp_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>edisp</td><td>377280</td></tr>\n",
       "<tr><td>20136</td><td>bkg</td><td>bkg_2d</td><td></td><td>hess-dl3-dr3-with-background.fits.gz</td><td>BKG0</td><td>--</td></tr>\n",
       "<tr><td>20136</td><td>gti</td><td>gti</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>gti</td><td>5760</td></tr>\n",
       "<tr><td>20136</td><td>aeff</td><td>aeff_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>aeff</td><td>11520</td></tr>\n",
       "<tr><td>20137</td><td>events</td><td>events</td><td>data</td><td>hess_dl3_dr1_obs_id_020137.fits.gz</td><td>events</td><td>216000</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<HDUIndexTable masked=True length=7>\n",
       "OBS_ID HDU_TYPE HDU_CLASS ... HDU_NAME  SIZE \n",
       "int64    str6      str9   ...   str6   int64 \n",
       "------ -------- --------- ... -------- ------\n",
       " 20136   events    events ...   events 414720\n",
       " 20136      psf psf_table ...      psf 118080\n",
       " 20136    edisp  edisp_2d ...    edisp 377280\n",
       " 20136      bkg    bkg_2d ...     BKG0     --\n",
       " 20136      gti       gti ...      gti   5760\n",
       " 20136     aeff   aeff_2d ...     aeff  11520\n",
       " 20137   events    events ...   events 216000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu_table[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['PRIMARY', 'HDU_INDEX', 'OBS_INDEX', 'BKG0', 'BKG1', 'BKG2']\n"
     ]
    }
   ],
   "source": [
    "# Put index tables and background models in a FITS file\n",
    "hdu_list = fits.HDUList()\n",
    "\n",
    "hdu = fits.BinTableHDU(hdu_table)\n",
    "hdu.name = \"HDU_INDEX\"\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "hdu = fits.BinTableHDU(data_store.obs_table)\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "for idx, model in enumerate(models):\n",
    "    hdu = model.to_fits()\n",
    "    hdu.name = \"BKG{}\".format(idx)\n",
    "    hdu_list.append(hdu)\n",
    "\n",
    "print([_.name for _ in hdu_list])\n",
    "\n",
    "import os\n",
    "\n",
    "path = (\n",
    "    Path(os.environ[\"GAMMAPY_DATA\"])\n",
    "    / \"hess-dl3-dr1/hess-dl3-dr3-with-background.fits.gz\"\n",
    ")\n",
    "hdu_list.writeto(str(path), overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data store:\n",
      "HDU index table:\n",
      "BASE_DIR: /Users/adonath/data/gammapy-data/hess-dl3-dr1\n",
      "Rows: 630\n",
      "OBS_ID: 20136 -- 47829\n",
      "HDU_TYPE: ['aeff', 'bkg', 'edisp', 'events', 'gti', 'psf']\n",
      "HDU_CLASS: ['aeff_2d', 'bkg_2d', 'edisp_2d', 'events', 'gti', 'psf_table']\n",
      "\n",
      "Observation table:\n",
      "Observatory name: 'N/A'\n",
      "Number of observations: 105\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's see if it's possible to access the data\n",
    "ds2 = DataStore.from_file(path)\n",
    "ds2.info()\n",
    "obs = ds2.obs(20136)\n",
    "obs.events\n",
    "obs.aeff\n",
    "obs.bkg.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- Play with the parameters here (energy binning, offset binning, zenith binning)\n",
    "- Try to figure out why there are outliers on the zenith vs energy threshold curve.\n",
    "- Does azimuth angle or optical efficiency have an effect on background rate?\n",
    "- Use the background models for a 3D analysis (see \"hess\" notebook)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
