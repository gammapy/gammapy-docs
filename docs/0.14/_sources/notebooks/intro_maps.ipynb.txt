{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.14?urlpath=lab/tree/intro_maps.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[intro_maps.ipynb](../_static/notebooks/intro_maps.ipynb) |\n",
    "[intro_maps.py](../_static/notebooks/intro_maps.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gammapy Maps\n",
    "\n",
    "![Gammapy Maps Illustration](images/gammapy_maps.png)\n",
    "\n",
    "## Introduction\n",
    "The [gammapy.maps](..\/maps/index.rst) submodule contains classes for representing **sky images** with an **arbitrary number of non-spatial dimensions** such as energy, time, event class or any possible user-defined dimension (illustrated in the image above). The main `Map` data structure features a **uniform API** for [WCS](https://fits.gsfc.nasa.gov/fits_wcs.html) as well as [HEALPix](https://en.wikipedia.org/wiki/HEALPix) based images. The API also generalizes simple image based operations such as smoothing, interpolation and reprojection to the arbitrary extra dimensions and makes working with (2 + N)-dimensional hypercubes **as easy as working with a simple 2D image**. Further information is also provided on the [gammpy.maps](..\/maps/index.rst) docs page.\n",
    "\n",
    "\n",
    "In the following introduction we will **learn all the basics** of working with WCS based maps. HEALPix based maps will be covered in a future tutorial. We will cover the following topics in order:\n",
    "\n",
    "1. [Creating WCS Maps](#1.-Creating-WCS-Maps)\n",
    "1. [Accessing and Modifying Data](#2.-Accessing-and-Modifying-Data)\n",
    "1. [Reading and Writing](#3.-Reading-and-Writing)\n",
    "1. [Visualizing and Plotting](#4.-Visualizing-and-Plotting)\n",
    "1. [Reprojecting, Interpolating and Miscellaneous](#5.-Reprojecting,-Interpolating-and-Miscellaneous)\n",
    "\n",
    "\n",
    "Make sure you have worked through the [First Steps with Gammapy](first_steps.ipynb), because a solid knowledge about working with `SkyCoords` and `Quantity` objects as well as [Numpy](http://www.numpy.org/) is required for this tutorial.\n",
    "\n",
    "**Note:** This notebook is rather lengthy, but getting to know the `Map` data structure in detail is **essential for working with Gammapy** and will allow you to fulfill **complex analysis tasks with very few and simple code** in future!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  0. Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy import units as u\n",
    "from astropy.io import fits\n",
    "from astropy.table import Table\n",
    "from astropy.coordinates import SkyCoord\n",
    "from gammapy.maps import Map, MapAxis, WcsGeom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Creating WCS Maps\n",
    "\n",
    "### 1.1 Using Factory Methods\n",
    "\n",
    "Maps are most easily created using the `Map.create()` factory method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_allsky = Map.create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calling `Map.create()` without any further arguments creates by default an allsky WCS map using a CAR projection, ICRS coordinates and a pixel size of 1 deg. This can be easily checked by printing the `.geom` attribute of the map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat']\n",
      "\tshape      : (3600, 1800)\n",
      "\tndim       : 2\n",
      "\tcoordsys   : CEL\n",
      "\tprojection : CAR\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 360.0 deg x 180.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(m_allsky.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `.geom` attribute is a `Geom` object, that defines the basic geometry of the map, such as size of the pixels, width and height of the image, coordinate system etc., but we will learn more about this object later.\n",
    "\n",
    "Besides the `.geom` attribute the map has also a `.data` attribute, which is just a plain `numpy.ndarray` and stores the data associated with this map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_allsky.data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default maps are filled with zeros.\n",
    "\n",
    "Here is a second example that creates a WCS map centered on the Galactic center and now uses Galactic coordinates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat']\n",
      "\tshape      : (500, 250)\n",
      "\tndim       : 2\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : TAN\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 10.0 deg x 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "skydir = SkyCoord(0, 0, frame=\"galactic\", unit=\"deg\")\n",
    "m_gc = Map.create(\n",
    "    binsz=0.02, width=(10, 5), skydir=skydir, coordsys=\"GAL\", proj=\"TAN\"\n",
    ")\n",
    "print(m_gc.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition we have defined a TAN projection, a pixel size of `0.02` deg and a width of the map of `10 deg x 5 deg`. The `width` argument also takes scalar value instead of a tuple, which is interpreted as both the width and height of the map, so that a quadratic map is created."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Creating from a Map Geometry\n",
    "\n",
    "As we have seen in the first examples, the `Map` object couples the data (stored as a `numpy.ndarray`) with a `Geom` object. The `Geom` object can be seen as a generalization of an `astropy.wcs.WCS` object, providing the information on how the data maps to physical coordinate systems. In some cases e.g. when creating many maps with the same WCS geometry it can be advantegeous to first create the map geometry independent of the map object itsself: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "wcs_geom = WcsGeom.create(\n",
    "    binsz=0.02, width=(10, 5), skydir=(0, 0), coordsys=\"GAL\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then create the map objects from the `wcs_geom` geometry specification:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "maps = {}\n",
    "\n",
    "for name in [\"counts\", \"background\"]:\n",
    "    maps[name] = Map.from_geom(wcs_geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Geom` object also has a few helpful methods. E.g. we can check whether a given position on the sky is contained in the map geometry:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True, False])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define the position of the Galactic center and anti-center\n",
    "positions = SkyCoord([0, 180], [0, 0], frame=\"galactic\", unit=\"deg\")\n",
    "wcs_geom.contains(positions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or get the image center of the map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<SkyCoord (Galactic): (l, b) in deg\n",
       "    (0., 0.)>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wcs_geom.center_skydir"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or we can also retrieve the solid angle per pixel of the map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$[[1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~\\dots,~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7}],~\n",
       " [1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~\\dots,~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7}],~\n",
       " [1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~\\dots,~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7}],~\n",
       " \\dots,~\n",
       " [1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~\\dots,~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7},~1.2173559 \\times 10^{-7}],~\n",
       " [1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~\\dots,~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7},~1.2173376 \\times 10^{-7}],~\n",
       " [1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~\\dots,~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7},~1.2173192 \\times 10^{-7}]] \\; \\mathrm{sr}$$"
      ],
      "text/plain": [
       "<Quantity [[1.21731921e-07, 1.21731921e-07, 1.21731921e-07, ...,\n",
       "            1.21731921e-07, 1.21731921e-07, 1.21731921e-07],\n",
       "           [1.21733761e-07, 1.21733761e-07, 1.21733761e-07, ...,\n",
       "            1.21733761e-07, 1.21733761e-07, 1.21733761e-07],\n",
       "           [1.21735587e-07, 1.21735587e-07, 1.21735587e-07, ...,\n",
       "            1.21735587e-07, 1.21735587e-07, 1.21735587e-07],\n",
       "           ...,\n",
       "           [1.21735587e-07, 1.21735587e-07, 1.21735587e-07, ...,\n",
       "            1.21735587e-07, 1.21735587e-07, 1.21735587e-07],\n",
       "           [1.21733761e-07, 1.21733761e-07, 1.21733761e-07, ...,\n",
       "            1.21733761e-07, 1.21733761e-07, 1.21733761e-07],\n",
       "           [1.21731921e-07, 1.21731921e-07, 1.21731921e-07, ...,\n",
       "            1.21731921e-07, 1.21731921e-07, 1.21731921e-07]] sr>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wcs_geom.solid_angle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Adding Non-Spatial Axes\n",
    "\n",
    "In many analysis scenarios we would like to add extra dimension to the maps to study e.g. energy or time dependency of the data. Those non-spatial dimensions are handled with the `MapAxis` object. Let us first define an energy axis, with 4 bins:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapAxis\n",
      "\n",
      "\tname       : energy    \n",
      "\tunit       : 'TeV'     \n",
      "\tnbins      : 4         \n",
      "\tnode type  : edges     \n",
      "\tedges min  : 1.0e+00 TeV\n",
      "\tedges max  : 1.0e+02 TeV\n",
      "\tinterp     : log       \n",
      "\n"
     ]
    }
   ],
   "source": [
    "energy_axis = MapAxis.from_bounds(\n",
    "    1, 100, nbin=4, unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "print(energy_axis)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Where `interp='log'` specifies that a logarithmic spacing is used between the bins, equivalent to `np.logspace(0, 2, 4)`. This `MapAxis` object we can now pass to `Map.create()` using the `axes=` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat', 'energy']\n",
      "\tshape      : (500, 250, 4)\n",
      "\tndim       : 3\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : CAR\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 10.0 deg x 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_cube = Map.create(\n",
    "    binsz=0.02, width=(10, 5), coordsys=\"GAL\", axes=[energy_axis]\n",
    ")\n",
    "print(m_cube.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we see that besides `lon` and `lat` the map has an additional axes named `energy` with 4 bins. The total dimension of the map is now `ndim=3`.\n",
    "\n",
    "We can also add further axes by passing a list of `MapAxis` objects. To demonstrate this we create a time axis with\n",
    "linearly spaced bins and pass both axes to `Map.create()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat', 'energy', 'time']\n",
      "\tshape      : (500, 250, 4, 24)\n",
      "\tndim       : 4\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : CAR\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 10.0 deg x 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "time_axis = MapAxis.from_bounds(\n",
    "    0, 24, nbin=24, unit=\"hour\", name=\"time\", interp=\"lin\"\n",
    ")\n",
    "\n",
    "m_4d = Map.create(\n",
    "    binsz=0.02, width=(10, 5), coordsys=\"GAL\", axes=[energy_axis, time_axis]\n",
    ")\n",
    "print(m_4d.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `MapAxis` object internally stores the coordinates or \"position values\" associated with every map axis bin or \"node\". We distinguish between two node types: `edges` and `center`. The node type `edges`(which is also the default) specifies that the data associated with this axis is integrated between the edges of the bin (e.g. counts data). The node type `center` specifies that the data is given at the center of the bin (e.g. exposure or differential fluxes).\n",
    "\n",
    "The edges of the bins can be checked with `.edges` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$[1,~3.1622777,~10,~31.622777,~100] \\; \\mathrm{TeV}$$"
      ],
      "text/plain": [
       "<Quantity [  1.        ,   3.16227766,  10.        ,  31.6227766 ,\n",
       "           100.        ] TeV>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "energy_axis.edges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The numbers are given in the units we specified above, which can be checked again with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\mathrm{TeV}$$"
      ],
      "text/plain": [
       "Unit(\"TeV\")"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "energy_axis.unit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The centers of the axis bins can be checked with the `.center` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$[1.7782794,~5.6234133,~17.782794,~56.234133] \\; \\mathrm{TeV}$$"
      ],
      "text/plain": [
       "<Quantity [ 1.77827941,  5.62341325, 17.7827941 , 56.23413252] TeV>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "energy_axis.center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  2. Accessing and Modifying Data\n",
    "\n",
    "### 2.1 Accessing Map Data Values\n",
    "\n",
    "All map objects have a set of accessor methods, which can be used to access or update the contents of the map irrespective of its underlying representation. Those accessor methods accept as their first argument a coordinate `tuple` containing scalars, `list`, or `numpy.ndarray` with one tuple element for each dimension. Some methods additionally accept a `dict` or `MapCoord` argument, of which both allow to assign coordinates by axis name.\n",
    "\n",
    "Let us first begin with the `.get_by_idx()` method, that accepts a tuple of indices. The order of the indices corresponds to the axis order of the map: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.], dtype=float32)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_gc.get_by_idx((50, 30))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Important:** Gammapy uses a reversed index order in the map API with the longitude axes first. To achieve the same by directly indexing into the numpy array we have to call:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.], dtype=float32)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_gc.data[([30], [50])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check the order of the axes you can always print the `.geom` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat']\n",
      "\tshape      : (500, 250)\n",
      "\tndim       : 2\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : TAN\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 10.0 deg x 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(m_gc.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To access values directly by sky coordinates we can use the `.get_by_coord()` method. This time we pass in a `dict`, specifying the axes names corresponding to the given coordinates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0., nan])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_gc.get_by_coord({\"lon\": [0, 180], \"lat\": [0, 0]})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The units of the coordinates are assumed to be in degrees in the coordinate system used by the map. If the coordinates do not correspond to the exact pixel center, the value of the nearest pixel center will be returned. For positions outside the map geometry `np.nan` is returned.\n",
    "\n",
    "The coordinate or idx arrays follow normal [Numpy broadcasting rules](https://jakevdp.github.io/PythonDataScienceHandbook/02.05-computation-on-arrays-broadcasting.html). So the following works as expected:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lons = np.linspace(-4, 4, 10)\n",
    "m_gc.get_by_coord({\"lon\": lons, \"lat\": 0})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or as an even more advanced example, we can provide `lats` as column vector and broadcasting to a 2D result array will be applied:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[nan, nan, nan, nan, nan, nan, nan, nan],\n",
       "       [nan, nan, nan, nan, nan, nan, nan, nan],\n",
       "       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n",
       "       [nan, nan, nan, nan, nan, nan, nan, nan],\n",
       "       [nan, nan, nan, nan, nan, nan, nan, nan]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lons = np.linspace(-4, 4, 8)\n",
    "lats = np.linspace(-4, 4, 8).reshape(-1, 1)\n",
    "m_gc.get_by_coord({\"lon\": lons, \"lat\": lats})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Modifying Map Data Values\n",
    "\n",
    "To modify and set map data values the `Map` object features as well a `.set_by_idx()` method: \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_cube.set_by_idx(idx=(10, 20, 3), vals=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([42.], dtype=float32)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_cube.get_by_idx((10, 20, 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course there is also a `.set_by_coord()` method, which allows to set map data values in physical coordinates. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_cube.set_by_coord({\"lon\": 0, \"lat\": 0, \"energy\": 2 * u.TeV}, vals=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again the `lon` and `lat` values are assumed to be given in degrees in the coordinate system used by the map. For the energy axis, the unit is the one specified on the axis (use `m_cube.geom.axes[0].unit` to check if needed...)\n",
    "\n",
    "All `.xxx_by_coord()` methods accept `SkyCoord` objects as well. In this case we have to use the `skycoord` keyword instead of `lon` and `lat`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "skycoords = SkyCoord([1.2, 3.4], [-0.5, 1.1], frame=\"galactic\", unit=\"deg\")\n",
    "m_cube.set_by_coord({\"skycoord\": skycoords, \"energy\": 2 * u.TeV}, vals=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Indexing and Slicing Sub-Maps\n",
    "\n",
    "When you have worked with Numpy arrays in the past you are probably familiar with the concept of indexing and slicing\n",
    "into data arrays. To support slicing of non-spatial axes of `Map` objects, the `Map` object has a `.slice_by_idx()` method, which allows to extract sub-maps from a larger map.\n",
    "\n",
    "The following example demonstrates how to get the map at the energy bin number 3:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat']\n",
      "\tshape : (500, 250)\n",
      "\tndim  : 2\n",
      "\tunit  : \n",
      "\tdtype : float32\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_sub = m_cube.slice_by_idx({\"energy\": 3})\n",
    "print(m_sub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the returned object is again a `Map` with updated axes information. In this case, because we extracted only a single image, the energy axes is dropped from the map.\n",
    "\n",
    "To extract a sub-cube with a sliced energy axes we can use a normal `slice()` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat', 'energy']\n",
      "\tshape : (500, 250, 2)\n",
      "\tndim  : 3\n",
      "\tunit  : \n",
      "\tdtype : float32\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_sub = m_cube.slice_by_idx({\"energy\": slice(1, 3)})\n",
    "print(m_sub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the returned object is also a `Map` object, but this time with updated energy axis specification.\n",
    "\n",
    "Slicing of multiple dimensions is supported by adding further entries to the dict passed to `.slice_by_idx()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat', 'energy', 'time']\n",
      "\tshape : (500, 250, 2, 6)\n",
      "\tndim  : 4\n",
      "\tunit  : \n",
      "\tdtype : float32\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_sub = m_4d.slice_by_idx({\"energy\": slice(1, 3), \"time\": slice(4, 10)})\n",
    "print(m_sub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For convenience there is also a `.get_image_by_coord()` method which allows to access image planes at given non-spatial physical coordinates. This method also supports `Quantity` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat']\n",
      "\tshape      : (500, 250)\n",
      "\tndim       : 2\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : CAR\n",
      "\tcenter     : 0.0 deg, 0.0 deg\n",
      "\twidth      : 10.0 deg x 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "image = m_4d.get_image_by_coord({\"energy\": 4 * u.TeV, \"time\": 5 * u.h})\n",
    "print(image.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  3. Reading and Writing\n",
    "\n",
    "Gammapy `Map` objects are serialized using the Flexible Image Transport Format (FITS). Depending on the pixelisation scheme (HEALPix or WCS) and presence of non-spatial dimensions the actual convention to write the FITS file is different.\n",
    "By default Gammpy uses a generic convention named `gadf`, which will support WCS and HEALPix formats as well as an arbitrary number of non-spatial axes. The convention is documented in detail on the [Gamma Astro Data Formats](https://gamma-astro-data-formats.readthedocs.io/en/latest/skymaps/index.html) page.\n",
    "\n",
    "Other conventions required by specific software (e.g. the Fermi Science Tools) are supported as well. At the moment those are the following\n",
    "\n",
    "* `fgst-ccube`: Fermi counts cube format.\n",
    "* `fgst-ltcube`: Fermi livetime cube format.\n",
    "* `fgst-bexpcube`: Fermi exposure cube format\n",
    "* `fgst-template`: Fermi Galactic diffuse and source template format. \n",
    "* `fgst-srcmap` and `fgst-srcmap-sparse`: Fermi source map and sparse source map format.\n",
    "\n",
    "The conventions listed above only support an additional energy axis. \n",
    "\n",
    "### 3.1 Reading Maps\n",
    "\n",
    "Reading FITS files is mainly exposed via the `Map.read()` method.Let us take a look at a first example: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat']\n",
      "\tshape : (400, 200)\n",
      "\tndim  : 2\n",
      "\tunit  : \n",
      "\tdtype : >i8\n",
      "\n"
     ]
    }
   ],
   "source": [
    "filename = \"$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-counts.fits.gz\"\n",
    "m_3fhl_gc = Map.read(filename)\n",
    "print(m_3fhl_gc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default `Map.read()` will try to find the first valid data hdu in the filename and read the data from there. If mutliple HDUs are present in the FITS file, the desired one can be chosen with the additional `hdu=` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat']\n",
      "\tshape : (400, 200)\n",
      "\tndim  : 2\n",
      "\tunit  : \n",
      "\tdtype : >i8\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_3fhl_gc = Map.read(filename, hdu=\"PRIMARY\")\n",
    "print(m_3fhl_gc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In rare cases e.g. when the FITS file is not valid or meta data is missing from the header it can be necessary to modify the header of a certain HDU before creating the `Map` object. In this case we can use `astropy.io.fits` directly to read the FITS file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: /Users/adonath/data/gammapy-data/fermi-3fhl-gc/fermi-3fhl-gc-exposure.fits.gz\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU      23   (400, 200)   float32   \n"
     ]
    }
   ],
   "source": [
    "filename = (\n",
    "    os.environ[\"GAMMAPY_DATA\"]\n",
    "    + \"/fermi-3fhl-gc/fermi-3fhl-gc-exposure.fits.gz\"\n",
    ")\n",
    "hdulist = fits.open(filename)\n",
    "hdulist.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then modify the header keyword and use `Map.from_hdulist()` to create the `Map` object after:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WcsNDMap\n",
       "\n",
       "\tgeom  : WcsGeom \n",
       " \taxes  : ['lon', 'lat']\n",
       "\tshape : (400, 200)\n",
       "\tndim  : 2\n",
       "\tunit  : cm2 s\n",
       "\tdtype : >f4"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdulist[\"PRIMARY\"].header[\"BUNIT\"] = \"cm2 s\"\n",
    "Map.from_hdulist(hdulist=hdulist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Writing Maps\n",
    "\n",
    "Writing FITS files is mainoy exposure via the `Map.write()` method. Here is a first example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_cube.write(\"example_cube.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default Gammapy does not overwrite files. In this example we set `overwrite=True` in case the cell gets executed multiple times. Now we can read back the cube from disk using `Map.read()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsNDMap\n",
      "\n",
      "\tgeom  : WcsGeom \n",
      " \taxes  : ['lon', 'lat', 'energy']\n",
      "\tshape : (500, 250, 4)\n",
      "\tndim  : 3\n",
      "\tunit  : \n",
      "\tdtype : >f4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m_cube = Map.read(\"example_cube.fits\")\n",
    "print(m_cube)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also choose a different FITS convention to write the example cube in a format compatible to the Fermi Galactic diffuse background model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_cube.write(\"example_cube_fgst.fits\", conv=\"fgst-template\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand a little bit better the generic `gadf` convention we use `Map.to_hdulist()` to generate a list of FITS HDUs first:   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: (No file associated with this HDUList)\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU      29   (500, 250, 4, 24)   float32   \n",
      "  1  PRIMARY_BANDS    1 BinTableHDU     33   96R x 7C   ['I', 'E', 'E', 'E', 'E', 'E', 'E']   \n"
     ]
    }
   ],
   "source": [
    "hdulist = m_4d.to_hdulist(conv=\"gadf\")\n",
    "hdulist.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see the `HDUList` object contains to HDUs. The first one named `PRIMARY` contains the data array with shape corresponding to our data and the WCS information stored in the header:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SIMPLE  =                    T / conforms to FITS standard                      \n",
       "BITPIX  =                  -32 / array data type                                \n",
       "NAXIS   =                    4 / number of array dimensions                     \n",
       "NAXIS1  =                  500                                                  \n",
       "NAXIS2  =                  250                                                  \n",
       "NAXIS3  =                    4                                                  \n",
       "NAXIS4  =                   24                                                  \n",
       "EXTEND  =                    T                                                  \n",
       "WCSAXES =                    2 / Number of coordinate axes                      \n",
       "CRPIX1  =                250.5 / Pixel coordinate of reference point            \n",
       "CRPIX2  =                125.5 / Pixel coordinate of reference point            \n",
       "CDELT1  =                -0.02 / [deg] Coordinate increment at reference point  \n",
       "CDELT2  =                 0.02 / [deg] Coordinate increment at reference point  \n",
       "CUNIT1  = 'deg'                / Units of coordinate increment and value        \n",
       "CUNIT2  = 'deg'                / Units of coordinate increment and value        \n",
       "CTYPE1  = 'GLON-CAR'           / galactic longitude, plate caree projection     \n",
       "CTYPE2  = 'GLAT-CAR'           / galactic latitude, plate caree projection      \n",
       "CRVAL1  =                  0.0 / [deg] Coordinate value at reference point      \n",
       "CRVAL2  =                  0.0 / [deg] Coordinate value at reference point      \n",
       "LONPOLE =                  0.0 / [deg] Native longitude of celestial pole       \n",
       "LATPOLE =                 90.0 / [deg] Native latitude of celestial pole        \n",
       "AXCOLS1 = 'E_MIN,E_MAX'                                                         \n",
       "INTERP1 = 'log     '                                                            \n",
       "AXCOLS2 = 'TIME_MIN,TIME_MAX'                                                   \n",
       "INTERP2 = 'lin     '                                                            \n",
       "WCSSHAPE= '(500,250,4,24)'                                                      \n",
       "BANDSHDU= 'PRIMARY_BANDS'                                                       \n",
       "META    = '{}      '                                                            \n",
       "BUNIT   = ''                                                                    "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdulist[\"PRIMARY\"].header"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second HDU is a `BinTableHDU` named `PRIMARY_BANDS` contains the information on the non-spatial axes such as name, order, unit, min, max and center values of the axis bins. We use an `astropy.table.Table` to show the information:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=96</i>\n",
       "<table id=\"table4900035944\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>CHANNEL</th><th>ENERGY</th><th>E_MIN</th><th>E_MAX</th><th>TIME</th><th>TIME_MIN</th><th>TIME_MAX</th></tr></thead>\n",
       "<thead><tr><th></th><th>TeV</th><th>TeV</th><th>TeV</th><th>h</th><th>h</th><th>h</th></tr></thead>\n",
       "<thead><tr><th>int16</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th></tr></thead>\n",
       "<tr><td>0</td><td>1.7782794</td><td>1.0</td><td>3.1622777</td><td>0.5</td><td>0.0</td><td>1.0</td></tr>\n",
       "<tr><td>1</td><td>5.623413</td><td>3.1622777</td><td>10.0</td><td>0.5</td><td>0.0</td><td>1.0</td></tr>\n",
       "<tr><td>2</td><td>17.782795</td><td>10.0</td><td>31.622776</td><td>0.5</td><td>0.0</td><td>1.0</td></tr>\n",
       "<tr><td>3</td><td>56.23413</td><td>31.622776</td><td>100.0</td><td>0.5</td><td>0.0</td><td>1.0</td></tr>\n",
       "<tr><td>4</td><td>1.7782794</td><td>1.0</td><td>3.1622777</td><td>1.5</td><td>1.0</td><td>2.0</td></tr>\n",
       "<tr><td>5</td><td>5.623413</td><td>3.1622777</td><td>10.0</td><td>1.5</td><td>1.0</td><td>2.0</td></tr>\n",
       "<tr><td>6</td><td>17.782795</td><td>10.0</td><td>31.622776</td><td>1.5</td><td>1.0</td><td>2.0</td></tr>\n",
       "<tr><td>7</td><td>56.23413</td><td>31.622776</td><td>100.0</td><td>1.5</td><td>1.0</td><td>2.0</td></tr>\n",
       "<tr><td>8</td><td>1.7782794</td><td>1.0</td><td>3.1622777</td><td>2.5</td><td>2.0</td><td>3.0</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>86</td><td>17.782795</td><td>10.0</td><td>31.622776</td><td>21.5</td><td>21.0</td><td>22.0</td></tr>\n",
       "<tr><td>87</td><td>56.23413</td><td>31.622776</td><td>100.0</td><td>21.5</td><td>21.0</td><td>22.0</td></tr>\n",
       "<tr><td>88</td><td>1.7782794</td><td>1.0</td><td>3.1622777</td><td>22.5</td><td>22.0</td><td>23.0</td></tr>\n",
       "<tr><td>89</td><td>5.623413</td><td>3.1622777</td><td>10.0</td><td>22.5</td><td>22.0</td><td>23.0</td></tr>\n",
       "<tr><td>90</td><td>17.782795</td><td>10.0</td><td>31.622776</td><td>22.5</td><td>22.0</td><td>23.0</td></tr>\n",
       "<tr><td>91</td><td>56.23413</td><td>31.622776</td><td>100.0</td><td>22.5</td><td>22.0</td><td>23.0</td></tr>\n",
       "<tr><td>92</td><td>1.7782794</td><td>1.0</td><td>3.1622777</td><td>23.5</td><td>23.0</td><td>24.0</td></tr>\n",
       "<tr><td>93</td><td>5.623413</td><td>3.1622777</td><td>10.0</td><td>23.5</td><td>23.0</td><td>24.0</td></tr>\n",
       "<tr><td>94</td><td>17.782795</td><td>10.0</td><td>31.622776</td><td>23.5</td><td>23.0</td><td>24.0</td></tr>\n",
       "<tr><td>95</td><td>56.23413</td><td>31.622776</td><td>100.0</td><td>23.5</td><td>23.0</td><td>24.0</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=96>\n",
       "CHANNEL   ENERGY    E_MIN     E_MAX     TIME  TIME_MIN TIME_MAX\n",
       "           TeV       TeV       TeV       h       h        h    \n",
       " int16   float32   float32   float32  float32 float32  float32 \n",
       "------- --------- --------- --------- ------- -------- --------\n",
       "      0 1.7782794       1.0 3.1622777     0.5      0.0      1.0\n",
       "      1  5.623413 3.1622777      10.0     0.5      0.0      1.0\n",
       "      2 17.782795      10.0 31.622776     0.5      0.0      1.0\n",
       "      3  56.23413 31.622776     100.0     0.5      0.0      1.0\n",
       "      4 1.7782794       1.0 3.1622777     1.5      1.0      2.0\n",
       "      5  5.623413 3.1622777      10.0     1.5      1.0      2.0\n",
       "      6 17.782795      10.0 31.622776     1.5      1.0      2.0\n",
       "      7  56.23413 31.622776     100.0     1.5      1.0      2.0\n",
       "      8 1.7782794       1.0 3.1622777     2.5      2.0      3.0\n",
       "    ...       ...       ...       ...     ...      ...      ...\n",
       "     86 17.782795      10.0 31.622776    21.5     21.0     22.0\n",
       "     87  56.23413 31.622776     100.0    21.5     21.0     22.0\n",
       "     88 1.7782794       1.0 3.1622777    22.5     22.0     23.0\n",
       "     89  5.623413 3.1622777      10.0    22.5     22.0     23.0\n",
       "     90 17.782795      10.0 31.622776    22.5     22.0     23.0\n",
       "     91  56.23413 31.622776     100.0    22.5     22.0     23.0\n",
       "     92 1.7782794       1.0 3.1622777    23.5     23.0     24.0\n",
       "     93  5.623413 3.1622777      10.0    23.5     23.0     24.0\n",
       "     94 17.782795      10.0 31.622776    23.5     23.0     24.0\n",
       "     95  56.23413 31.622776     100.0    23.5     23.0     24.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Table.read(hdulist[\"PRIMARY_BANDS\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  4. Visualizing and Plotting\n",
    "\n",
    "### 4.1 Plotting \n",
    "\n",
    "For debugging and inspecting the map data it is useful to plot ot visualize the images planes contained in the map. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-counts.fits.gz\"\n",
    "m_3fhl_gc = Map.read(filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After reading the map we can now plot it on the screen by calling the `.plot()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m_3fhl_gc.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can easily improve the plot by calling `Map.smooth()` first and providing additional arguments to `.plot()`. Most of them are passed further to [plt.imshow()](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "smoothed = m_3fhl_gc.smooth(width=0.2 * u.deg, kernel=\"gauss\")\n",
    "smoothed.plot(stretch=\"sqrt\", add_cbar=True, vmax=4, cmap=\"inferno\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the [plt.rc_context()](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.rc_context.html) context manager to further tweak the plot by adapting the figure and font size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x388.8 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rc_params = {\"figure.figsize\": (12, 5.4), \"font.size\": 12}\n",
    "with plt.rc_context(rc=rc_params):\n",
    "    smoothed = m_3fhl_gc.smooth(width=0.2 * u.deg, kernel=\"gauss\")\n",
    "    smoothed.plot(stretch=\"sqrt\", add_cbar=True, vmax=4);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2 Interactive Plotting \n",
    "\n",
    "For maps with non-spatial dimensions the `Map` object features an interactive plotting method, that works in jupyter notebooks only (**Note:** it requires the package `ipywidgets` to be installed). We first read a small example cutout from the Fermi Galactic diffuse model and display the data cube by calling `.plot_interactive()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x388.8 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "filename = \"$GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\"\n",
    "m_iem_gc = Map.read(filename)\n",
    "\n",
    "rc_params = {\n",
    "    \"figure.figsize\": (12, 5.4),\n",
    "    \"font.size\": 12,\n",
    "    \"axes.formatter.limits\": (2, -2),\n",
    "}\n",
    "m_iem_gc.plot_interactive(add_cbar=True, stretch=\"sqrt\", rc_params=rc_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can use the interactive slider to select an energy range and the corresponding image is diplayed on the screen. You can also use the radio buttons to select your preferred image stretching. We have passed additional keywords using the `rc_params` argument to improve the figure and font size. Those keywords are directly passed to the [plt.rc_context()](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.rc_context.html) context manager."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  5. Reprojecting, Interpolating and Miscellaneous\n",
    "\n",
    "### 5.1 Reprojecting to Different Map Geometries\n",
    "\n",
    "The example map `m_iem_gc` is given in Galactic coordinates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WcsGeom\n",
      "\n",
      "\taxes       : ['lon', 'lat', 'energy']\n",
      "\tshape      : (120, 64, 30)\n",
      "\tndim       : 3\n",
      "\tcoordsys   : GAL\n",
      "\tprojection : CAR\n",
      "\tcenter     : 0.0 deg, -0.1 deg\n",
      "\twidth      : 15.0 deg x 8.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(m_iem_gc.geom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example we will now extract the image at `~10 GeV` and reproject it to ICRS coordinates. For this we first define the target map WCS geometry. As `.reproject()` only applies to the spatial axes, we do not have to specify any additional non-spatial axes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "skydir = SkyCoord(266.4, -28.9, frame=\"icrs\", unit=\"deg\")\n",
    "wcs_geom_cel = WcsGeom.create(\n",
    "    skydir=skydir, binsz=0.1, coordsys=\"CEL\", width=(8, 4)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we extract the image at `~10 GeV`, reproject to the target geometry and plot the result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: astropy.extern.six will be removed in 4.0, use the six module directly if it is still needed [astropy.extern.six]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m_iem = m_iem_gc.get_image_by_coord({\"energy\": 10 * u.GeV})\n",
    "m_iem_cel = m_iem.reproject(wcs_geom_cel)\n",
    "m_iem_cel.plot(add_cbar=True, vmin=0, vmax=2.5e-9);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.2 Interpolating Map Values\n",
    "\n",
    "While for the reprojection example above we used `.get_image_by_coord()` to extract the closest image to `~10 GeV`, we can use the more general method `.interp_by_coord()` to interpolate in the energy axis as well. For this we first define again the target map geometry:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m_iem_10GeV = Map.from_geom(wcs_geom_cel)\n",
    "coords = m_iem_10GeV.geom.get_coord()\n",
    "\n",
    "m_iem_10GeV.data = m_iem_gc.interp_by_coord(\n",
    "    {\"skycoord\": coords.skycoord, \"energy\": 10 * u.GeV},\n",
    "    interp=\"linear\",\n",
    "    fill_value=np.nan,\n",
    ")\n",
    "m_iem_10GeV.plot(add_cbar=True, vmin=0, vmax=2.5e-9);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.3 Making Cutouts\n",
    "\n",
    "The `WCSNDMap` objects features a `.cutout()` method, which allows you to cut out a smaller part of a larger map. This can be useful, e.g. when working with allsky diffuse maps. Here is an example: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x388.8 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "position = SkyCoord(0, 0, frame=\"galactic\", unit=\"deg\")\n",
    "m_iem_cutout = m_iem_gc.cutout(position=position, width=(4 * u.deg, 2 * u.deg))\n",
    "\n",
    "rc_params = {\n",
    "    \"figure.figsize\": (12, 5.4),\n",
    "    \"font.size\": 12,\n",
    "    \"axes.formatter.limits\": (2, -2),\n",
    "}\n",
    "m_iem_cutout.plot_interactive(\n",
    "    add_cbar=True, rc_params=rc_params, stretch=\"linear\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The returned object is again a `Map` object with udpated WCS information and data size. As one can see the cutout is automatically applied to all the non-spatial axes as well. The cutout width is given in the order of `(lon, lat)` and can be specified with units that will be handled correctly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0c146dc3c458470a998512232ea6affc": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_b6f3c8184e7c46f7936e63855dde8e1a",
       "msg_id": "",
       "outputs": []
      }
     },
     "11dad610297749b4b413588a1fc0e75f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "5.85e+01 MeV MeV",
        "8.00e+01 MeV MeV",
        "1.09e+02 MeV MeV",
        "1.50e+02 MeV MeV",
        "2.05e+02 MeV MeV",
        "2.80e+02 MeV MeV",
        "3.83e+02 MeV MeV",
        "5.23e+02 MeV MeV",
        "7.16e+02 MeV MeV",
        "9.79e+02 MeV MeV",
        "1.34e+03 MeV MeV",
        "1.83e+03 MeV MeV",
        "2.50e+03 MeV MeV",
        "3.42e+03 MeV MeV",
        "4.68e+03 MeV MeV",
        "6.41e+03 MeV MeV",
        "8.76e+03 MeV MeV",
        "1.20e+04 MeV MeV",
        "1.64e+04 MeV MeV",
        "2.24e+04 MeV MeV",
        "3.06e+04 MeV MeV",
        "4.19e+04 MeV MeV",
        "5.73e+04 MeV MeV",
        "7.84e+04 MeV MeV",
        "1.07e+05 MeV MeV",
        "1.47e+05 MeV MeV",
        "2.01e+05 MeV MeV",
        "2.74e+05 MeV MeV",
        "3.75e+05 MeV MeV",
        "5.13e+05 MeV MeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_76f313dbd52c47c480dd08c2bb69cd3f",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_b8d427079470468d928a0fe4bc0efcfc"
      }
     },
     "30e0917fdc444769a557bf291b5e231c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c84537c26acc45638db806ee0f338c4f",
        "IPY_MODEL_f611d2715fd143a4a8cb2d8a875e1894",
        "IPY_MODEL_0c146dc3c458470a998512232ea6affc"
       ],
       "layout": "IPY_MODEL_6288f12e07f5407c8a2c26e86a1be838"
      }
     },
     "45f31b192172441dadaeef373827d822": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "5dc91c3046024c69b10d309c293f3673": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_e94f8d4934614356b6bdb8c99ed65188",
       "style": "IPY_MODEL_6d44a4e8b1bf4896b4b17bd433961e22"
      }
     },
     "6288f12e07f5407c8a2c26e86a1be838": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6d44a4e8b1bf4896b4b17bd433961e22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "76f313dbd52c47c480dd08c2bb69cd3f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "7daf34dce3d54a20bcab3b441eeda3f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_11dad610297749b4b413588a1fc0e75f",
        "IPY_MODEL_5dc91c3046024c69b10d309c293f3673",
        "IPY_MODEL_c77555cc8d3a4600a3a6be8da66d16a9"
       ],
       "layout": "IPY_MODEL_9c3aaf982f2a4ce79fc44fe6a6ab0ce8"
      }
     },
     "80d46d605d0b45898ebe24ecd3e8e77d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "8ba6e00bac0f4abab3013ffcd80cd050": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9c3aaf982f2a4ce79fc44fe6a6ab0ce8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9d4500ac10d140f89c04cc7910c33ed8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a4ae8840d66a4ea79a24cb8c4bd3de75": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "b6f3c8184e7c46f7936e63855dde8e1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b8d427079470468d928a0fe4bc0efcfc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "c77555cc8d3a4600a3a6be8da66d16a9": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_9d4500ac10d140f89c04cc7910c33ed8",
       "msg_id": "",
       "outputs": []
      }
     },
     "c84537c26acc45638db806ee0f338c4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "5.85e+01 MeV MeV",
        "8.00e+01 MeV MeV",
        "1.09e+02 MeV MeV",
        "1.50e+02 MeV MeV",
        "2.05e+02 MeV MeV",
        "2.80e+02 MeV MeV",
        "3.83e+02 MeV MeV",
        "5.23e+02 MeV MeV",
        "7.16e+02 MeV MeV",
        "9.79e+02 MeV MeV",
        "1.34e+03 MeV MeV",
        "1.83e+03 MeV MeV",
        "2.50e+03 MeV MeV",
        "3.42e+03 MeV MeV",
        "4.68e+03 MeV MeV",
        "6.41e+03 MeV MeV",
        "8.76e+03 MeV MeV",
        "1.20e+04 MeV MeV",
        "1.64e+04 MeV MeV",
        "2.24e+04 MeV MeV",
        "3.06e+04 MeV MeV",
        "4.19e+04 MeV MeV",
        "5.73e+04 MeV MeV",
        "7.84e+04 MeV MeV",
        "1.07e+05 MeV MeV",
        "1.47e+05 MeV MeV",
        "2.01e+05 MeV MeV",
        "2.74e+05 MeV MeV",
        "3.75e+05 MeV MeV",
        "5.13e+05 MeV MeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_45f31b192172441dadaeef373827d822",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_80d46d605d0b45898ebe24ecd3e8e77d"
      }
     },
     "e94f8d4934614356b6bdb8c99ed65188": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.1.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.1.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f611d2715fd143a4a8cb2d8a875e1894": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.4.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.4.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 1,
       "layout": "IPY_MODEL_8ba6e00bac0f4abab3013ffcd80cd050",
       "style": "IPY_MODEL_a4ae8840d66a4ea79a24cb8c4bd3de75"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
