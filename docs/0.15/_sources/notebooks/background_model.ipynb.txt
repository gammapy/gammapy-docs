{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.15?urlpath=lab/tree/background_model.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[background_model.ipynb](../_static/notebooks/background_model.ipynb) |\n",
    "[background_model.py](../_static/notebooks/background_model.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make template background model\n",
    "\n",
    "## Introduction \n",
    "\n",
    "In this tutorial, we will create a template background model from scratch. Often, background models are pre-computed and provided for analysis, but it's educational to see how the sausage is made.\n",
    "\n",
    "We will use the \"off observations\", i.e. those without significant gamma-ray emission sources in the field of view from the [H.E.S.S. first public test data release](https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/). This model could then be used in the analysis of sources from that dataset (not done here).\n",
    "\n",
    "We will make a background model that is radially symmetric in the field of view, i.e. only depends on field of view offset angle and energy. At the end, we will save the model in the `BKG_2D` as defined in the [spec](https://gamma-astro-data-formats.readthedocs.io/en/latest/irfs/full_enclosure/bkg/index.html).\n",
    "\n",
    "Note that this is just a quick and dirty example. Actual background model production is done with more sophistication usually using 100s or 1000s of off runs, e.g. concerning non-radial symmetries, binning and smoothing of the distributions, and treating other dependencies such as zenith angle, telescope configuration or optical efficiency. Another aspect not shown here is how to use AGN observations to make background models, by cutting out the part of the field of view that contains gamma-rays from the AGN.\n",
    "\n",
    "We will mainly be using the following classes:\n",
    "        \n",
    "* `~gammapy.data.DataStore` to load the runs to use to build the bkg model.\n",
    "* `~gammapy.irf.Background2D` to represent and write the background model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As always, we start the notebook with some setup and imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from copy import deepcopy\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.io import fits\n",
    "from astropy.table import Table, vstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from gammapy.maps import MapAxis\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.irf import Background2D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select off data\n",
    "\n",
    "We start by selecting the observations used to estimate the background model.\n",
    "\n",
    "In this case, we just take all \"off runs\" as defined in the observation table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations: 45\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")\n",
    "# Select just the off data runs\n",
    "obs_table = data_store.obs_table\n",
    "obs_table = obs_table[obs_table[\"TARGET_NAME\"] == \"Off data\"]\n",
    "observations = data_store.get_observations(obs_table[\"OBS_ID\"])\n",
    "print(\"Number of observations:\", len(observations))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background model\n",
    "\n",
    "The background model we will estimate is a differential background rate model in unit `s-1 MeV-1 sr-1` as a function of reconstructed energy and field of fiew offset.\n",
    "\n",
    "We estimate it by histogramming off data events and then smoothing a bit (not using a good method) to get a less noisy estimate. To get the differential rate, we divide by observation time and also take bin sizes into account to get the rate per energy and solid angle. So overall we fill two arrays called `counts` and `exposure` with `exposure` filled so that `background_rate = counts / exposure` will give the final background rate we're interested in.\n",
    "\n",
    "The processing can be done either one observation at a time, or first for counts and then for exposure. Either way is fine. Here we do one observation at a time, starting with empty histograms and then accumulating counts and exposure. Since this is a multi-step algorithm, we put the code to do this computation in a `BackgroundModelEstimator` class.\n",
    "\n",
    "This functionality was already in Gammapy previously, and will be added back again soon, after `~gammapy.irf` has been restructured and improved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BackgroundModelEstimator:\n",
    "    def __init__(self, ebounds, offset):\n",
    "        self.counts = self._make_bkg2d(ebounds, offset, unit=\"\")\n",
    "        self.exposure = self._make_bkg2d(ebounds, offset, unit=\"s MeV sr\")\n",
    "\n",
    "    @staticmethod\n",
    "    def _make_bkg2d(ebounds, offset, unit):\n",
    "        ebounds = ebounds.to(\"MeV\")\n",
    "        offset = offset.to(\"deg\")\n",
    "        shape = len(ebounds) - 1, len(offset) - 1\n",
    "        return Background2D(\n",
    "            energy_lo=ebounds[:-1],\n",
    "            energy_hi=ebounds[1:],\n",
    "            offset_lo=offset[:-1],\n",
    "            offset_hi=offset[1:],\n",
    "            data=np.zeros(shape) * u.Unit(unit),\n",
    "        )\n",
    "\n",
    "    def run(self, observations):\n",
    "        for obs in observations:\n",
    "            self.fill_counts(obs)\n",
    "            self.fill_exposure(obs)\n",
    "\n",
    "    def fill_counts(self, obs):\n",
    "        events = obs.events\n",
    "        data = self.counts.data\n",
    "        counts = np.histogram2d(\n",
    "            x=events.energy.to(\"MeV\"),\n",
    "            y=events.offset.to(\"deg\"),\n",
    "            bins=(data.axes[0].edges, data.axes[1].edges),\n",
    "        )[0]\n",
    "        data.data += counts\n",
    "\n",
    "    def fill_exposure(self, obs):\n",
    "        data = self.exposure.data\n",
    "        energy_width = np.diff(data.axes[0].edges)\n",
    "        offset = data.axes[1].center\n",
    "        offset_width = np.diff(data.axes[1].edges)\n",
    "        solid_angle = 2 * np.pi * offset * offset_width\n",
    "        time = obs.observation_time_duration\n",
    "        exposure = time * energy_width[:, None] * solid_angle[None, :]\n",
    "        data.data += exposure\n",
    "\n",
    "    @property\n",
    "    def background_rate(self):\n",
    "        rate = deepcopy(self.counts)\n",
    "        rate.data.data /= self.exposure.data.data\n",
    "        return rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2 s, sys: 87.6 ms, total: 2.09 s\n",
      "Wall time: 2.13 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "offset = MapAxis.from_bounds(0, 3, nbin=9, interp=\"sqrt\", unit=\"deg\").edges\n",
    "estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "estimator.run(observations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's have a quick look at what we did ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "estimator.background_rate.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You could save the background model to a file like this\n",
    "# estimator.background_rate.to_fits().writeto('background_model.fits', overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zenith dependence\n",
    "\n",
    "The background models used in H.E.S.S. usually depend on the zenith angle of the observation. That kinda makes sense because the energy threshold increases with zenith angle, and since the background is related to (but not given by) the charged cosmic ray spectrum that is a power-law and falls steeply, we also expect the background rate to change.\n",
    "\n",
    "Let's have a look at the dependence we get for this configuration used here (Hillas reconstruction, standard cuts, see H.E.S.S. release notes for more information)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"SAFE_ENERGY_LO\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Energy threshold (TeV)\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"EVENT_COUNT\"] / obs_table[\"ONTIME\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Rate (events / sec)\")\n",
    "plt.ylim(0, 10);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energy threshold increases, as expected. It's a bit surprising that the total background rate doesn't decreases with increasing zenith angle. That's a bit of luck for this configuration, and because we're looking at the rate of background events in the whole field of view. As shown below, the energy threshold increases (reducing the total rate), but the rate at a given energy increases with zenith angle (increasing the total rate). Overall the background does change with zenith angle and that dependency should be taken into account.\n",
    "\n",
    "The remaining scatter you see in the plots above (in energy threshold and rate) is due to dependence on telescope optical efficiency, atmospheric changes from run to run and other effects. If you're interested in this, [2014APh....54...25H](https://ui.adsabs.harvard.edu/abs/2014APh....54...25H) has some infos. We'll not consider this futher.\n",
    "\n",
    "When faced with the question whether and how to model the zenith angle dependence, we're faced with a complex optimisation problem: the closer we require off runs to be in zenith angle, the fewer off runs and thus event statistic we have available, which will lead do noise in the background model. The choice of zenith angle binning or \"on-off observation mathching\" strategy isn't the only thing that needs to be optimised, there's also energy and offset binnings and smoothing scales. And of course good settings will depend on the way you plan to use the background model, i.e. the science measurement you plan to do. Some say background modeling is the hardest part of IACT data analysis.\n",
    "\n",
    "Here we'll just code up something simple: make three background models, one from the off runs with zenith angle 0 to 20 deg, one from 20 to 40 deg, and one from 40 to 90 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "zenith_bins = [\n",
    "    {\"min\": 0, \"max\": 20},\n",
    "    {\"min\": 20, \"max\": 40},\n",
    "    {\"min\": 40, \"max\": 90},\n",
    "]\n",
    "\n",
    "\n",
    "def make_model(observations):\n",
    "    ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "    offset = MapAxis.from_bounds(0, 3, nbin=9, interp=\"sqrt\", unit=\"deg\").edges\n",
    "    estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "    estimator.run(observations)\n",
    "    return estimator.background_rate\n",
    "\n",
    "\n",
    "def make_models():\n",
    "    for zenith in zenith_bins:\n",
    "        mask = zenith[\"min\"] <= obs_table[\"ZEN_PNT\"]\n",
    "        mask &= obs_table[\"ZEN_PNT\"] < zenith[\"max\"]\n",
    "        obs_ids = obs_table[\"OBS_ID\"][mask]\n",
    "        observations = data_store.get_observations(obs_ids)\n",
    "        yield make_model(observations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.97 s, sys: 73.6 ms, total: 2.05 s\n",
      "Wall time: 2.06 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "models = list(make_models())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[0].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[2].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy = models[0].data.axis(\"energy\").center.to(\"TeV\")\n",
    "y = models[0].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"0 < zen < 20\")\n",
    "y = models[1].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"20 < zen < 40\")\n",
    "y = models[2].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"40 < zen < 90\")\n",
    "plt.loglog()\n",
    "plt.xlabel(\"Energy (TeV)\")\n",
    "plt.ylabel(\"Bkg rate (s-1 sr-1 MeV-1)\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Index tables\n",
    "\n",
    "So now we have radially symmetric background models for three zenith angle bins. To be able to use it from the high-level Gammapy classes like e.g. the MapMaker though, we also have to create a [HDU index table](https://gamma-astro-data-formats.readthedocs.io/en/latest/data_storage/hdu_index/index.html) that declares which background model to use for each observation.\n",
    "\n",
    "It sounds harder than it actually is. Basically you have to some code to make a new `astropy.table.Table`. The most tricky part is that before you can make the HDU index table, you have to decide where to store the data, because the HDU index table is a reference to the data location. Let's decide in this example that we want to re-use all existing files in `$GAMMAPY_DATA/hess-dl3-dr1` and put all the new HDUs (for background models and new index files) bundled in a single FITS file called `hess-dl3-dr3-with-background.fits.gz`, which we will put  in `$GAMMAPY_DATA/hess-dl3-dr1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"hess-dl3-dr3-with-background.fits.gz\"\n",
    "\n",
    "# Make a new table with one row for each observation\n",
    "# pointing to the background model HDU\n",
    "rows = []\n",
    "for obs_row in data_store.obs_table:\n",
    "    # TODO: pick the right background model based on zenith angle\n",
    "    row = {\n",
    "        \"OBS_ID\": obs_row[\"OBS_ID\"],\n",
    "        \"HDU_TYPE\": \"bkg\",\n",
    "        \"HDU_CLASS\": \"bkg_2d\",\n",
    "        \"FILE_DIR\": \"\",\n",
    "        \"FILE_NAME\": filename,\n",
    "        \"HDU_NAME\": \"BKG0\",\n",
    "    }\n",
    "    rows.append(row)\n",
    "\n",
    "hdu_table_bkg = Table(rows=rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a copy of the original HDU index table\n",
    "hdu_table = data_store.hdu_table.copy()\n",
    "hdu_table.meta.pop(\"BASE_DIR\")\n",
    "\n",
    "# Add the rows for the background HDUs\n",
    "hdu_table = vstack([hdu_table, hdu_table_bkg])\n",
    "hdu_table.sort(\"OBS_ID\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>HDUIndexTable masked=True length=7</i>\n",
       "<table id=\"table4775823904\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>HDU_TYPE</th><th>HDU_CLASS</th><th>FILE_DIR</th><th>FILE_NAME</th><th>HDU_NAME</th><th>SIZE</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>str6</th><th>str9</th><th>str4</th><th>str36</th><th>str6</th><th>int64</th></tr></thead>\n",
       "<tr><td>20136</td><td>aeff</td><td>aeff_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>aeff</td><td>11520</td></tr>\n",
       "<tr><td>20136</td><td>psf</td><td>psf_table</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>psf</td><td>118080</td></tr>\n",
       "<tr><td>20136</td><td>gti</td><td>gti</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>gti</td><td>5760</td></tr>\n",
       "<tr><td>20136</td><td>bkg</td><td>bkg_2d</td><td></td><td>hess-dl3-dr3-with-background.fits.gz</td><td>BKG0</td><td>--</td></tr>\n",
       "<tr><td>20136</td><td>edisp</td><td>edisp_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>edisp</td><td>377280</td></tr>\n",
       "<tr><td>20136</td><td>bkg</td><td>bkg_3d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>bkg</td><td>207360</td></tr>\n",
       "<tr><td>20136</td><td>events</td><td>events</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>events</td><td>414720</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<HDUIndexTable masked=True length=7>\n",
       "OBS_ID HDU_TYPE HDU_CLASS ... HDU_NAME  SIZE \n",
       "int64    str6      str9   ...   str6   int64 \n",
       "------ -------- --------- ... -------- ------\n",
       " 20136     aeff   aeff_2d ...     aeff  11520\n",
       " 20136      psf psf_table ...      psf 118080\n",
       " 20136      gti       gti ...      gti   5760\n",
       " 20136      bkg    bkg_2d ...     BKG0     --\n",
       " 20136    edisp  edisp_2d ...    edisp 377280\n",
       " 20136      bkg    bkg_3d ...      bkg 207360\n",
       " 20136   events    events ...   events 414720"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu_table[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['PRIMARY', 'HDU_INDEX', 'OBS_INDEX', 'BKG0', 'BKG1', 'BKG2']\n"
     ]
    }
   ],
   "source": [
    "# Put index tables and background models in a FITS file\n",
    "hdu_list = fits.HDUList()\n",
    "\n",
    "hdu = fits.BinTableHDU(hdu_table)\n",
    "hdu.name = \"HDU_INDEX\"\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "hdu = fits.BinTableHDU(data_store.obs_table)\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "for idx, model in enumerate(models):\n",
    "    hdu = model.to_fits()\n",
    "    hdu.name = f\"BKG{idx}\"\n",
    "    hdu_list.append(hdu)\n",
    "\n",
    "print([_.name for _ in hdu_list])\n",
    "\n",
    "import os\n",
    "\n",
    "path = (\n",
    "    Path(os.environ[\"GAMMAPY_DATA\"])\n",
    "    / \"hess-dl3-dr1/hess-dl3-dr3-with-background.fits.gz\"\n",
    ")\n",
    "hdu_list.writeto(path, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data store:\n",
      "HDU index table:\n",
      "BASE_DIR: /Users/adonath/data/gammapy-data/hess-dl3-dr1\n",
      "Rows: 735\n",
      "OBS_ID: 20136 -- 47829\n",
      "HDU_TYPE: ['aeff', 'bkg', 'edisp', 'events', 'gti', 'psf']\n",
      "HDU_CLASS: ['aeff_2d', 'bkg_2d', 'bkg_3d', 'edisp_2d', 'events', 'gti', 'psf_table']\n",
      "\n",
      "\n",
      "Observation table:\n",
      "Observatory name: 'N/A'\n",
      "Number of observations: 105\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Found multiple HDU matching: OBS_ID = 20136, HDU_TYPE = bkg, HDU_CLASS = None. Returning the first entry, which has HDU_TYPE = bkg and HDU_CLASS = bkg_2d\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's see if it's possible to access the data\n",
    "ds2 = DataStore.from_file(path)\n",
    "ds2.info()\n",
    "obs = ds2.obs(20136)\n",
    "obs.events\n",
    "obs.aeff\n",
    "obs.bkg.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- Play with the parameters here (energy binning, offset binning, zenith binning)\n",
    "- Try to figure out why there are outliers on the zenith vs energy threshold curve.\n",
    "- Does azimuth angle or optical efficiency have an effect on background rate?\n",
    "- Use the background models for a 3D analysis (see \"hess\" notebook)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
