{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.16?urlpath=lab/tree/extended_source_spectral_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[extended_source_spectral_analysis.ipynb](../_static/notebooks/extended_source_spectral_analysis.ipynb) |\n",
    "[extended_source_spectral_analysis.py](../_static/notebooks/extended_source_spectral_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral analysis of extended sources\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding of spectral analysis techniques in classical Cherenkov astronomy.\n",
    "- Understanding of how the spectrum and cube extraction API works, please refer to the [spectrum extraction notebook](spectrum_analysis.ipynb) and to the [3D analysis notebook](analysis_2.ipynb).\n",
    "\n",
    "## Context\n",
    "\n",
    "Many VHE sources in the Galaxy are extended. Studying them with a 1D spectral analysis is more complex than studying point sources. \n",
    "One often has to use complex (i.e. non circular) regions and more importantly, one has to take into account the fact that the instrument response is non uniform over the selectred region.\n",
    "A typical example is given by the supernova remnant RX J1713-3935 which is nearly 1 degree in diameter. See the [following article](https://ui.adsabs.harvard.edu/abs/2018A%26A...612A...6H/abstract).\n",
    "\n",
    "**Objective: Measure the spectrum of RX J1713-3945 in a 1 degree region fully enclosing it.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "We have seen in the general presentation of the spectrum extraction for point sources, see [the corresponding notebook](spectrum_analysis.ipynb), that Gammapy uses specific datasets makers to first produce reduced spectral data and then to extract OFF measurements with reflected background techniques: the `~gammapy.spectrum.SpectrumDatasetMaker` and the `~gammapy.spectrum.ReflectedRegionsBackgroundMaker`. The former simply computes the reduced IRF at the center of the ON region (assumed to be circular).\n",
    "\n",
    "This is no longer valid for extended sources. To be able to compute average responses in the ON region, Gammapy relies on the creation of a cube enclosing it (i.e. a `~gammapy.cube.MapDataset`) which can be reduced to a simple spectrum (i.e. a `~gammapy.spectrum.SpectrumDataset`). We can then proceed with the OFF extraction as the standard point source case.\n",
    "\n",
    "In summary, we have to:\n",
    "\n",
    "- Define an ON region (a `~regions.SkyRegion`) fully enclosing the source we want to study.\n",
    "- Define a geometry that fully contains the region and that covers the required energy range (beware in particular, the true energy range).  \n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.cube.MapDatasetMaker`\n",
    "    - the OFF background maker, here a `~gammapy.spectrum.ReflectedRegionsBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.cube.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Produce a map dataset and squeeze it to a spectrum dataset with `~gammapy.cube.MapDataset.to_spectrum_dataset(on_region)`\n",
    "    - Extract the OFF data to produce a `~gammapy.spectrum.SpectrumDatasetOnOff` and compute a safe range for it.\n",
    "    - Stack or store the resulting spectrum dataset.\n",
    "- Finally proceed with model fitting on the dataset as usual.\n",
    "\n",
    "Here, we will use the RX J1713-3945 observations from the H.E.S.S. first public test data release. The tutorial is implemented with the intermediate level API.\n",
    "\n",
    "## Setup \n",
    "\n",
    "As usual, we'll start with some general imports..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.maps import Map, MapAxis, WcsGeom\n",
    "from gammapy.modeling import Fit, Datasets\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.cube import SafeMaskMaker, MapDataset, MapDatasetMaker\n",
    "from gammapy.spectrum import ReflectedRegionsBackgroundMaker"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select the data\n",
    "\n",
    "We first set the datastore and retrieve a few observations from our source."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "datastore = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "obs_ids = [20326, 20327, 20349, 20350, 20396, 20397]\n",
    "# In case you want to use all RX J1713 data in the HESS DR1\n",
    "# other_ids=[20421, 20422, 20517, 20518, 20519, 20521, 20898, 20899, 20900]\n",
    "\n",
    "observations = datastore.get_observations(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare the datasets creation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the ON region\n",
    "\n",
    "Here we take a simple 1 degree circular region because it fits well with the morphology of RX J1713-3945. More complex regions could be used e.g. `~regions.EllipseSkyRegion` or `~regions.RectangleSkyRegion`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_position = SkyCoord(347.3, -0.5, unit=\"deg\", frame=\"galactic\")\n",
    "radius = Angle(\"0.5 deg\")\n",
    "on_region = CircleSkyRegion(target_position, radius)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the geometries\n",
    "\n",
    "This part is especially important. \n",
    "- We have to define first energy axes. They define the axes of the resulting `~gammapy.SpectrumDatasetOnOff`. In particular, we have to be careful to the true energy axis: it has to cover a larger range than the reconstructed energy one.\n",
    "- Then we define the geometry itself. It does not need to be very finely binned and should enclose all the ON region. To limit CPU and memory usage, one should avoid using a much larger region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The binning of the final spectrum is defined here.\n",
    "energy_axis = MapAxis.from_energy_bounds(0.3, 40.0, 10, unit=\"TeV\")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(0.05, 100, 30, unit=\"TeV\")\n",
    "\n",
    "# Here we use 1.5 degree which is slightly larger than needed.\n",
    "geom = WcsGeom.create(\n",
    "    skydir=target_position,\n",
    "    binsz=0.04,\n",
    "    width=(1.5, 1.5),\n",
    "    frame=\"galactic\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the makers\n",
    "\n",
    "First we instantiate the target `~gammapy.cube.MapDataset`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"rxj-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create its associated maker. Here we need to produce, counts, exposure and edisp (energy dispersion) entries. PSF and IRF background are not needed, therefore we don't compute them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "maker = MapDatasetMaker(selection=[\"counts\", \"exposure\", \"edisp\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create the OFF background maker for the spectra. If we have an exclusion region, we have to pass it here. We also define the safe range maker."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg_maker = ReflectedRegionsBackgroundMaker()\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"aeff-max\"], aeff_percent=10\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform the data reduction loop.\n",
    "\n",
    "We can now run over selected observations. For each of them, we:\n",
    "- create the map dataset and stack it on our target dataset.\n",
    "- squeeze the map dataset to a spectral dataset in the ON region\n",
    "- Compute the OFF and create a `~gammapy.spectrum.SpectrumDatasetOnOff` object\n",
    "- Run the safe mask maker on it\n",
    "- Add the `~gammapy.spectrum.SpectrumDatasetOnOff` to the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.49 s, sys: 166 ms, total: 2.66 s\n",
      "Wall time: 2.75 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "spectrum_datasets = []\n",
    "\n",
    "for obs in observations:\n",
    "    # A MapDataset is filled in this geometry\n",
    "    dataset = maker.run(stacked, obs)\n",
    "    # To make images, the resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)\n",
    "\n",
    "    # Extract 1D spectrum\n",
    "    spectrum_dataset = dataset.to_spectrum_dataset(on_region)\n",
    "    # Compute OFF\n",
    "    spectrum_dataset = bkg_maker.run(spectrum_dataset, obs)\n",
    "    # Define safe mask\n",
    "    spectrum_dataset = safe_mask_maker.run(spectrum_dataset, obs)\n",
    "    # Append dataset to the list\n",
    "    spectrum_datasets.append(spectrum_dataset)\n",
    "\n",
    "datasets = Datasets(spectrum_datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's look at the data to see if our region is correct.\n",
    "We plot it over the excess. To do so we convert it to a pixel region using the WCS information stored on the geom."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.WCSAxesSubplot at 0x1c1e586e80>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(width=\"0.05 deg\").plot()\n",
    "on_region.to_pixel(stacked.counts.geom.wcs).plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now turn to the spectral datasets. We can peek at their content:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7wAAAEeCAYAAACpCBn7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nOzdebyV4/7/8den3TwPmzRvNJeUQsJXhkOG6ByUIZUp48ExHRmOIZ34CQk5opSQKY4TxcGRMVKEiArRTjRpHnd9fn/c985qt/dae9de6957r/fz8ViPvdZ13dd9f1bn3Lf7s67rvi5zd0RERERERETKmnJRByAiIiIiIiKSDEp4RUREREREpExSwisiIiIiIiJlkhJeERERERERKZOU8IqIiIiIiEiZpIRXREREREREyiQlvCIiIoVgZnea2TIz+zX8/GczW2hma82sUzEe53Az+6649iciUhaZ2Y1m9njUceQys7PN7L9RxyE7M63DK8lmZmcBVwOtgTXALGCIu3+QxGM60MLd5yfrGCJStpjZAqA+sDWmeKy7X25mTYC5QDN3XxJu/z1wtbu/spvHTen1yswGAE8Afdz9+VQcU0SiEe+6Fk1EhWNmU4GuwBbAgXnAC8D97r4pwtCkFFIPrySVmV0NDAf+SXDBbQqMBE6JMi4RkQL0dPfqMa/cm8JmwPLcZDem7OvUh7jb+gMrwr8FMrPyqQlHRJKsoOtasUnS9eJyd68BNACuAc4AJpuZJeFYCVlAuVMppP/RJGnMrBZwB3CZu7/k7uvcfYu7T3L368yskpkNN7NfwtdwM6sUth1gZh/k2Z+bWfPw/Vgze9jMXjOzNWb2iZntG9a9Fzb5Ihxq2MfMMs3sVTNbaWYrzOx9XbREpDDM7BjgTaBheE2ZYGZrgQyC68z34XYNzWyimS01sx/N7IqYfWSEw+++D69ZM82sSQHXq+5mlh22u8HMXswTzwNmNiJ8X8vMRpvZYjNbFA67zojzXZoBRwADgePMrH5MXXczyzazv4fDtp8Iy08ys1nh9fMjM+sQ0+aGmO/0jZn9eTf+qUUkhXLvtcxsmJn9Hl63jo+pL/D6Erb90MzuN7MVwG3hde7e8NGPH83s8vDerbyZnW5mM/Mc/xoz+3eiOMP7x6nAycAhwIlh+9vM7KnwfWUze8rMlofXqk9zr29mNtXMhprZdDNbZWavmFndmDi6hte2lWb2hZl1j6mbamZDzOxDYD2wT/jdfwivez+a2dmx/54xbbuFcawK/3bLs9/B4b/hGjP7r5llFv5/PSkK3fBLMh0CVAZeLqD+JoLhKh2B/YGDgJuLsP8zgduBOsB8YAiAu/9fWL9/+EvmcwS/DGYDexD0NN9IMERGRCQud38LOB74JbymnOnu1cPq/d193/AHtEnAF0Aj4GjgKjM7LtzuaoJr1glATeA8YH0B16tYE4ATzKwmBIkz0Bt4JqwfB+QAzYFOwLHABXG+Tj9ghrtPBOYAZ+ep3wuoS9B7PdDMDgDGABcB9YBHgf9Y+OMk8D1wOFCL4Hr8lJk1iHN8ESlZDga+AzKB/weMNtveg5ro+nIw8AOwJ8E92IUE18qOwAFAr5ht/wPsbWZtYsr6AuMLG6i7/wzMILjm5NWf4DrUhOBadTGwIaa+H8F1t2H4nXJ/NGwEvAbcSXDtuxaYaGZ7xLQ9h+BHwhrA0rDt8WHvczeCR/V2ECbUr4Xb1gPuA14zs3oxm50FnEvw71cxPLYkgRJeSaZ6wDJ3zymg/mzgDndf4u5LCW6WzinC/l9y9+nh/p8muMAWZAvBkJhmYS/z+64H2EVkZ/8Of+XPfV1YyHYHAnu4+x3uvtndfwAeIxiCB8FN4s3u/p0HvnD35Yl26u4/AZ/xx43jUQSJ8sdh78XxwFVhD8gS4P6YY+anH38ky8+w87DmbcCt7r7J3TcQ3MA+6u6fuPtWdx8HbCL4sRJ3f8Hdf3H3bWGyPo/gx0sRKTniXdd+cvfH3H0rQYLbAKhfyOvLL+7+oLvnhNeL3sAD7p7t7r8Dd+VuGD53+xxBkouZtQOygFeL+F1+IUhM89pCcN/ZPLxWzXT31TH14919truvA24Beoc/IPYFJrv75PA69iZBUn1CTNux7v51eL+ZQ3CdbG9mVdx9sbvn92jLicA8dx8f/vtMAL4FesZs84S7zw3/7Z4n/n2s7AYlvJJMy4FMK/i5jobATzGffwrLCuvXmPfrgeoFbQjcQ9AL/N9wGMoNRTiOiKSPXu5eO+b1WCHbNSMY8rz9ppJgJEnukOEmBL2hu+IZgt5hCHoEchPWZkAFYHHMMR8l6C3YiZkdCuwNPBuz3/3MLPYma6m7b8zzva7J872aEF6rzaxfzHDnlUB7gp4iESk54l3Xtt9Lufv68G11Cnd9WZjnOA3zlOWtHwecFfYgnwM8vwsTUDUimIMgr/HAG8CzFjwm9//MrEIBsfxE8N0yCb7n6XmucYcRJP47tQ0T5j4EPciLLXi0rnU+8eS9x809bqOYz0W5j5XdoIRXkmkasJEdh7TE+oXgQpOraVgGsA6omlthZnvtTiDuvsbdr3H3fQh+XbvazI7enX2KiMRYCPyY56ayhrufEFO/7y7u+wWgu5k1Bv7MHwnvQoLe1syYY9Z093YF7Kc/YMAsC57R/SQs7xezTd6RLwsJZtWP/V5V3X2CBc8DPwZcDtRz99rA7PAYIlK6Feb6kvd6sRhoHPO5SWylu38MbCYYknwWRRjODGDBbPmdgffz1oWj925397YEw4xPYsdrW2wsTQl6hJcRfM/xea5x1dz9rpjtd/ie7v6Gu/+JICn+luA6mFfee9zc4y4qxFeVYqaEV5LG3VcB/wAeNrNeZlbVzCqY2fFm9v8Ink272cz2CB/U/wfwVNj8C6CdmXU0s8rAbUU8/G/APrkfLJh0pXn4q+Jqgun5txbUWESkiKYDqy2Y8KmKBZO3tDezA8P6x4HBZtbCAh1inuXa4XqVV/jIx1SCSaR+dPc5Yfli4L/AvWZW08zKmdm+ZnZE3n2E19HeBM+hdYx5/RU4O85InMeAi83s4DDuamZ2opnVAKoR3AguDY9xLkEPr4iUckW5vsR4HrjSzBqZWW3g7/ls8yTwEJDjhVyeMrx/PAJ4heBaOzmfbY40s/3CYcqrCRLa2Pu8vmbW1syqEkyo+mI4jPspoKeZHRdetytbMIFf47zHCI9T38xONrNqBD8IrCX/+8nJQEszO8uCSbv6AG0p+hBuKQZKeCWp3P0+gslabia4KVpI0Bvwb4IJAmYAXwJfETyndmfYbi7BBektgmfCirpm723AuHB4Sm+gRbivtQQ9zyM9mPFPRCTWJAtmS859FTTp3g7CG6eeBEnkjwQ9B48TTKICwYQlzxPcQK4GRgNVwrrb2PF6lZ9ngGP4o3c3Vz+CyU6+AX4HXmTHoXi5ehFM4PKku/+a+wrjyAB6FPC9ZhA8x/tQuP/5wICw7hvgXoJr6m/AfsCHBcQvItHZpesahb++5HqM4Br3JfA5QdKXw44J4XiCH8YK07v7kJmtIbi+DAcmAj3cfVs+2+4VxreaYEK+d/mjEyX3uGMJhhFXBq4AcPeFBEtl3sgf96nXUXCOVI5gItRfCIZWHwFcmnejcI6Gk8JtlwPXAye5+7JCfG8pZqZ5e0REREREpDhZsMTRv9y9WUxZFWAJcIC7z0tRHFOBp9z98VQcT0oe9fCKiIiIiMhuCR/nOCEcwtsIuJWdl6a8BPg0VcmuCEBBz+yIiIiIiIgUlhEsMfkcwSMUrxHMzxJUmi0ItyloMlORpNCQZhERERERESmTNKRZREREREREyiQlvCIiIiIiIlImlepneDMzMz0rKyvqMEQkCWbOnLnM3feIOo7SQNdCkbJL18L4zKwn0LNGjeoXtmjZPOpwRLbbluCx0fxXV4ppT+LHTjdt3Ry3fsHS+PvYsnZdwmNUqFEtbv1edeK3r1o+fv9qOUvc//rNrDm7dR0s1QlvVlYWM2bMiDoMEUkCM/sp6hhKC10LRcouXQvjc/dJwKTOXTpd+OEnU6MOR2S7jVs3xa3fnCBZXZ+zIeExfliTHbf+3FHxY1jy3qcJj9HwqK5x6/9+Wvz2+9erEre+WvmqCWPYr27n3boOakiziIiIiIiIlElKeEVERERERKRMUsIrIiIiIiIiZVKpfoZXZFdt2bKF7OxsNm7cGHUoaa9y5co0btyYChUqRB2KiIiIiJQxSnglLWVnZ1OjRg2ysrIws6jDSVvuzvLly8nOzmbvvfeOOhwRERERKWM0pFnS0saNG6lXr56S3YiZGfXq1VNPu4iIiIgkhRJeSVtKdksG/e8gIiIiIsmiIc2S9syGJWW/7tcmZb8iIiIiIlI4advD+9FHH/HRRx9FHYbITrKysli2bNlub1MQdwfgtttu2+FzLDPjmmuu2f552LBh27cviqVLl3LwwQfTqVMn3njjDcaPH0+bNm048sgjdyl2KX5vvfUWb731VtRhiKQFnW8iIqmXtj283bp1izoEKWGKq0c2WT3GxeX++++nZs2arFu3jptuuokjjjiCY489dodtKlWqxEsvvcSgQYPIzMzc5WO9/fbbtG7dmnHjxgHQo0cPRo4cqYS3BLnzzjsBOOaYYyKORKTs0/kmIpJ66uEViUivXr3o3Lkz7dq1Y9SoUTvVL1iwgNatW9O/f386dOjAaaedxvr167fXP/jggxxwwAHst99+fPvttwBMnz6dbt260alTJ7p168Z33323036vvvpqli1bxogRI+jRo8dOyS5A+fLlGThwIPfff3+hvstPP/3E0UcfTYcOHTj66KP5+eefmTVrFtdffz2TJ0+mY8eO3HTTTXzwwQdcfPHFXHfddYX9ZxIRERER2WVpm/DeeOON3HjjjVGHIWlszJgxzJw5kxkzZjBixAiWL1++0zbfffcdAwcO5Msvv6RmzZqMHDlye11mZiafffYZl1xyCcOGBb3KrVu35r333uPzzz/njjvuyPf/48OHDyczM5MrrriC119/nTfffDPf+C677DKefvppVq1alfC7XH755fTr148vv/ySs88+myuuuIKOHTtyxx130KdPH2bNmkW/fv1o27YtTz/9NPfcc09h/5lEREQKZGY9zWzUypWJ/1slIukpbRNekaiNGDGC/fffn65du7Jw4ULmzZu30zZNmjTh0EMPBaBv37588MEH2+v+8pe/ANC5c2cWLFgAwKpVqzj99NNp3749f/vb3/j666932ueVV17JBRdcQLVq1RgyZEiBQ+tq1qxJv379GDFiRMLvMm3aNM466ywAzjnnnB3iFBERSRZ3n+TuA2vXrhV1KCJSQinhFYnA1KlTeeutt5g2bRpffPEFnTp1ynct2rxL9sR+rlSpEgAZGRnk5OQAcMstt3DkkUcye/ZsJk2aFHefuZNQxVsW6KqrrmL06NGsW7euSN9PSw2JiIiISEmQtpNWieSVysmmVq1aRZ06dahatSrffvstH3/8cb7b/fzzz0ybNo1DDjmECRMmcNhhhyXcb6NGjQAYO3bsbsdZt25devfuzejRoznvvPMK3K5bt248++yznHPOOTz99NMJ45SS49FHH406BJG0ofNNRCT11MMrEoEePXqQk5NDhw4duOWWW+jatWu+27Vp04Zx48bRoUMHVqxYwSWXXBJ3v9dffz2DBg3i0EMPZevWrcUS6zXXXJNwCaQRI0bwxBNP0KFDB8aPH88DDzxQLMeW5GvVqhWtWrWKOgyRtKDzTUQk9dK2h3f48OFRhyAlRHEtR1QUlSpVYsqUKfnW5T6Pu3btWsqVK8e//vWvArcB6NKlC1OnTgXgkEMOYe7cudvrBg8evEvxrV27dvv7+vXr7zA7dH6ysrL43//+t1P5gAEDGDBgABA8jzx16lSqVq26SzFJckyaNAmAnj17RhyJSNmn801EJPXSNuHt2LFj1CGIpBUluiXTvffeC+gG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\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cumulative excess and signficance\n",
    "\n",
    "Finally, we can look at cumulative significance and number of excesses. This is done with the `info_table` method of `~gammapy.modeling.Datasets`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "info_table = datasets.info_table(cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(121)\n",
    "ax.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"),\n",
    "    info_table[\"excess\"],\n",
    "    marker=\"o\",\n",
    "    ls=\"none\",\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Excess events\")\n",
    "\n",
    "ax = fig.add_subplot(122)\n",
    "ax.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"),\n",
    "    info_table[\"significance\"],\n",
    "    marker=\"o\",\n",
    "    ls=\"none\",\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Significance\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform spectral model fitting\n",
    "\n",
    "Here we perform a joint fit. \n",
    "\n",
    "We first create the model, here a simple powerlaw, and assign it to every dataset in the `~gammapy.modeling.Datasets`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2, amplitude=2e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can run the fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 39\n",
      "\ttotal stat : 73.21\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fit_joint = Fit(datasets)\n",
    "result_joint = fit_joint.run()\n",
    "print(result_joint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore the fit results\n",
    "\n",
    "First the fitted parameters values and their errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=3</i>\n",
       "<table id=\"table120777092848\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>error</th><th>unit</th><th>min</th><th>max</th><th>frozen</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th></tr></thead>\n",
       "<tr><td>index</td><td>2.101e+00</td><td>6.642e-02</td><td></td><td>nan</td><td>nan</td><td>False</td></tr>\n",
       "<tr><td>amplitude</td><td>1.286e-11</td><td>1.022e-12</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>0.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=3>\n",
       "   name     value     error        unit        min     max   frozen\n",
       "   str9    float64   float64      str14      float64 float64  bool \n",
       "--------- --------- --------- -------------- ------- ------- ------\n",
       "    index 2.101e+00 6.642e-02                    nan     nan  False\n",
       "amplitude 1.286e-11 1.022e-12 cm-2 s-1 TeV-1     nan     nan  False\n",
       "reference 1.000e+00 0.000e+00            TeV     nan     nan   True"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_joint.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then plot the fit result to compare measured and expected counts. Rather than plotting them for each individual dataset, we stack all datasets and plot the fit result on the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<matplotlib.axes._subplots.AxesSubplot at 0x1c1e521c18>,\n",
       " <matplotlib.axes._subplots.AxesSubplot at 0x1c1e521ac8>)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# First stack them all\n",
    "reduced = datasets.stack_reduce()\n",
    "# Assign the fitted model\n",
    "reduced.models = model\n",
    "# Plot the result\n",
    "reduced.plot_fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
