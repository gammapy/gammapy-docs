{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.16?urlpath=lab/tree/models.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[models.ipynb](../_static/notebooks/models.ipynb) |\n",
    "[models.py](../_static/notebooks/models.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gammapy Models\n",
    "\n",
    "\n",
    "This is an introduction and overview on how to work with models in Gammapy. \n",
    "\n",
    "The sub-package `~gammapy.modeling` contains all the functionality related to modeling and fitting\n",
    "data. This includes spectral, spatial and temporal model classes, as well as the fit\n",
    "and parameter API. We will cover the follwing topics in order:\n",
    "\n",
    "1. [Spectral Models](#Spectral-Models)\n",
    "1. [Spatial Models](#Spatial-Models)\n",
    "1. [SkyModel and SkyDiffuseCube](#SkyModel-and-SkyDiffuseCube)\n",
    "1. [Model Lists and Serialisation](#Model-Lists-and-Serialisation)\n",
    "1. [Implementing as Custom Model](#Implementing-a-Custom-Model)\n",
    "\n",
    "The models follow a naming scheme which contains the category as a suffix to the class name. An overview of all the available models can be found in the :ref:`model-gallery`.\n",
    "\n",
    "Note that there is a separate tutorial [modeling](modeling.ipynb) that explains about `~gammapy.modeling`,\n",
    "the Gammapy modeling and fitting framework. You have to read that to learn how to work with models in order to analyse data.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy import units as u\n",
    "from gammapy.maps import Map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral Models\n",
    "\n",
    "All models are imported from the `gammapy.modeling.models` namespace. Let's start with a `PowerLawSpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import PowerLawSpectralModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "   name     value   error      unit      min max frozen\n",
      "--------- --------- ----- -------------- --- --- ------\n",
      "    index 2.000e+00   nan                nan nan  False\n",
      "amplitude 1.000e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "reference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLawSpectralModel()\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a list of all available spectral models you can import and print the spectral model registry or take a look at the [model gallery](https://docs.gammapy.org/stable/modeling/gallery/index.html#spectral-models):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registry\n",
      "--------\n",
      "\n",
      "    ConstantSpectralModel\n",
      "    CompoundSpectralModel\n",
      "    PowerLawSpectralModel\n",
      "    PowerLaw2SpectralModel\n",
      "    SmoothBrokenPowerLawSpectralModel\n",
      "    ExpCutoffPowerLawSpectralModel\n",
      "    ExpCutoffPowerLaw3FGLSpectralModel\n",
      "    SuperExpCutoffPowerLaw3FGLSpectralModel\n",
      "    SuperExpCutoffPowerLaw4FGLSpectralModel\n",
      "    LogParabolaSpectralModel\n",
      "    TemplateSpectralModel\n",
      "    GaussianSpectralModel\n",
      "    AbsorbedSpectralModel\n",
      "    NaimaSpectralModel\n",
      "    ScaleSpectralModel\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SPECTRAL_MODELS\n",
    "\n",
    "print(SPECTRAL_MODELS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spectral models all come with default parameters. Different parameter\n",
    "values can be passed on creation of the model, either as a string defining\n",
    "the value and unit or as an `~astropy.units.Quantity` object directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "amplitude = 1e-12 * u.Unit(\"TeV-1 cm-2 s-1\")\n",
    "pwl = PowerLawSpectralModel(amplitude=amplitude, index=2.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For convenience a `str` specifying the value and unit can be passed as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "   name     value   error      unit      min max frozen\n",
      "--------- --------- ----- -------------- --- --- ------\n",
      "    index 2.200e+00   nan                nan nan  False\n",
      "amplitude 2.700e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "reference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLawSpectralModel(amplitude=\"2.7e-12 TeV-1 cm-2 s-1\", index=2.2)\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model can be evaluated at given energies by calling the model instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.70000000e-12 2.40822469e-13 1.70358483e-14 1.51948705e-15] 1 / (cm2 s TeV)\n"
     ]
    }
   ],
   "source": [
    "energy = [1, 3, 10, 30] * u.TeV\n",
    "dnde = pwl(energy)\n",
    "print(dnde)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The returned quantity is a differential photon flux. \n",
    "\n",
    "For spectral models you can computed in addition the integrated and energy flux\n",
    "in a given energy range:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.108034597491956e-12 1 / (cm2 s)\n",
      "4.982075849517389e-12 TeV / (cm2 s)\n"
     ]
    }
   ],
   "source": [
    "flux = pwl.integral(emin=1 * u.TeV, emax=10 * u.TeV)\n",
    "print(flux)\n",
    "\n",
    "eflux = pwl.energy_flux(emin=1 * u.TeV, emax=10 * u.TeV)\n",
    "print(eflux)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This also works for a list or an array of integration boundaries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.64794383e-12 4.60090769e-13 1.03978226e-13] 1 / (cm2 s)\n"
     ]
    }
   ],
   "source": [
    "energy = [1, 3, 10, 30] * u.TeV\n",
    "flux = pwl.integral(emin=energy[:-1], emax=energy[1:])\n",
    "print(flux)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In some cases it can be useful to find use the inverse of a spectral model, to find the energy at which a given flux is reached:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 TeV\n"
     ]
    }
   ],
   "source": [
    "dnde = 2.7e-12 * u.Unit(\"TeV-1 cm-2 s-1\")\n",
    "energy = pwl.inverse(dnde)\n",
    "print(energy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a convenience you can also plot any spectral model in a given energy range:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c184a0b70>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pwl.plot(energy_range=[1, 100] * u.TeV)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spatial Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spatial models are imported from the same `gammapy.modeling.models` namespace, let's start with a `GaussianSpatialModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import GaussianSpatialModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianSpatialModel\n",
      "\n",
      " name   value   error unit    min        max    frozen\n",
      "----- --------- ----- ---- ---------- --------- ------\n",
      "lon_0 0.000e+00   nan  deg        nan       nan  False\n",
      "lat_0 0.000e+00   nan  deg -9.000e+01 9.000e+01  False\n",
      "sigma 2.000e-01   nan  deg  0.000e+00       nan  False\n",
      "    e 0.000e+00   nan       0.000e+00 1.000e+00   True\n",
      "  phi 0.000e+00   nan  deg        nan       nan   True\n"
     ]
    }
   ],
   "source": [
    "gauss = GaussianSpatialModel(lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\")\n",
    "print(gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again you can check the `SPATIAL_MODELS` registry to see which models are available or take a look at the [model gallery](https://docs.gammapy.org/stable/modeling/gallery/index.html#spatial-models)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registry\n",
      "--------\n",
      "\n",
      "    ConstantSpatialModel\n",
      "    TemplateSpatialModel\n",
      "    DiskSpatialModel\n",
      "    GaussianSpatialModel\n",
      "    PointSpatialModel\n",
      "    ShellSpatialModel\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SPATIAL_MODELS\n",
    "\n",
    "print(SPATIAL_MODELS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default coordinate frame for all spatial models is ``\"icrs\"``, but the frame can be modified using the\n",
    "``frame`` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss = GaussianSpatialModel(\n",
    "    lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\", frame=\"galactic\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can specify any valid `~astropy.coordinates` frame. The center position of the model can be retrieved as a `~astropy.coordinates.SkyCoord` object using `SpatialModel.position`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<SkyCoord (Galactic): (l, b) in deg\n",
      "    (0., 0.)>\n"
     ]
    }
   ],
   "source": [
    "print(gauss.position)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spatial models can be evaluated again by calling the instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13061.88470839 10172.60603928] 1 / sr\n"
     ]
    }
   ],
   "source": [
    "lon = [0, 0.1] * u.deg\n",
    "lat = [0, 0.1] * u.deg\n",
    "\n",
    "flux_per_omega = gauss(lon, lat)\n",
    "print(flux_per_omega)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The returned quantity corresponds to a surface brightness. Spatial model\n",
    "can be also evaluated using `gammapy.maps.Map` and `gammapy.maps.Geom` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m = Map.create(skydir=(0, 0), width=(1, 1), binsz=0.02, frame=\"galactic\")\n",
    "m.quantity = gauss.evaluate_geom(m.geom)\n",
    "m.plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again for convenience the model can be plotted directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gauss.plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All spatial models have an associated sky region to it e.g. to illustrate the extend of the model on a sky image. The returned object is an `~regions.SkyRegion` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Region: EllipseSkyRegion\n",
      "center: <SkyCoord (Galactic): (l, b) in deg\n",
      "    (0., 0.)>\n",
      "width: 0.4 deg\n",
      "height: 0.4 deg\n",
      "angle: 0.0 deg\n"
     ]
    }
   ],
   "source": [
    "print(gauss.to_region())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot the region on an sky image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create and plot the model\n",
    "gauss_elongated = GaussianSpatialModel(\n",
    "    lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\", e=0.7, phi=\"45 deg\"\n",
    ")\n",
    "ax = gauss_elongated.plot(add_cbar=True)\n",
    "\n",
    "# add region illustration\n",
    "region = gauss_elongated.to_region()\n",
    "region_pix = region.to_pixel(ax.wcs)\n",
    "ax.add_artist(region_pix.as_artist());"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `.to_region()` method can also be useful to write e.g. ds9 region files using `write_ds9` from the `regions` package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from regions import write_ds9\n",
    "\n",
    "regions = [gauss.to_region(), gauss_elongated.to_region()]\n",
    "\n",
    "filename = \"regions.reg\"\n",
    "write_ds9(regions, filename, coordsys=\"galactic\", fmt=\".4f\", radunit=\"deg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Region file format: DS9 astropy/regions\r\n",
      "galactic\r\n",
      "ellipse(0.0000,0.0000,0.2000,0.2000,0.0000)\r\n",
      "ellipse(96.3373,-60.1886,0.1428,0.2000,45.0000)\r\n"
     ]
    }
   ],
   "source": [
    "!cat regions.reg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SkyModel and SkyDiffuseCube"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `~gammapy.modeling.models.SkyModel` class combines a spectral and a spatial model. It can be created\n",
    "from existing spatial and spectral model components:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    lon_0                   :   0.000  deg         \n",
      "    lat_0                   :   0.000  deg         \n",
      "    sigma                   :   0.200  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "    index                   :   2.200              \n",
      "    amplitude               :   2.70e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SkyModel\n",
    "\n",
    "model = SkyModel(spectral_model=pwl, spatial_model=gauss, name=\"my-source\")\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is good practice to specify a name for your sky model, so that you can access it later by name and have meaningful identifier you serilisation. If you don't define a name, a unique random name is generated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "uxWqU-Zd\n"
     ]
    }
   ],
   "source": [
    "model_without_name = SkyModel(spectral_model=pwl, spatial_model=gauss)\n",
    "print(model_without_name.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The spectral and spatial component of the source model can be accessed using `.spectral_model` and `.spatial_model`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.modeling.models.spectral.PowerLawSpectralModel at 0x1c184878d0>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.spectral_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.modeling.models.spatial.GaussianSpatialModel at 0x1c18619c50>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.spatial_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And can be used as you have seen already seen above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.spectral_model.plot(energy_range=[1, 10] * u.TeV);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In some cases (e.g. when doing a spectral analysis) there is only a spectral model associated with the source. So the spatial model is optional:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : source-spectrum\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : None\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                   :   2.200              \n",
      "    amplitude               :   2.70e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model_spectrum = SkyModel(spectral_model=pwl, name=\"source-spectrum\")\n",
    "print(model_spectrum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionally the `gammapy.modeling.models.SkyDiffuseCube` can be used to represent source models based on templates, where the spatial and energy axes are correlated. It can be created e.g. from an existing FITS file:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import SkyDiffuseCube"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyDiffuseCube\n",
      "\n",
      "  Name                      : gll_iem_v06_gc.fits\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: FITSFixedWarning: 'datfix' made the change 'Set DATE-REF to '1858-11-17' from MJD-REF'. [astropy.wcs.wcs]\n"
     ]
    }
   ],
   "source": [
    "diffuse = SkyDiffuseCube.read(\n",
    "    \"$GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\"\n",
    ")\n",
    "print(diffuse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Lists and Serialisation\n",
    "\n",
    "In a typical analysis scenario a model consists of mutiple model components, or a \"catalog\" or \"source library\". To handle this list of multiple model components, Gammapy has a `Models` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    lon_0                   :   0.000  deg         \n",
      "    lat_0                   :   0.000  deg         \n",
      "    sigma                   :   0.200  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "    index                   :   2.200              \n",
      "    amplitude               :   2.70e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "Component 1: SkyDiffuseCube\n",
      "\n",
      "  Name                      : gll_iem_v06_gc.fits\n",
      "  Parameters:\n",
      "    norm                    :   1.000              \n",
      "    tilt         (frozen)   :   0.000              \n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = Models([model, diffuse])\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Individual model components in the list can be accessed by their name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    lon_0                   :   0.000  deg         \n",
      "    lat_0                   :   0.000  deg         \n",
      "    sigma                   :   0.200  deg         \n",
      "    e            (frozen)   :   0.000              \n",
      "    phi          (frozen)   :   0.000  deg         \n",
      "    index                   :   2.200              \n",
      "    amplitude               :   2.70e-12  1 / (cm2 s TeV)\n",
      "    reference    (frozen)   :   1.000  TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(models[\"my-source\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:**To make the access by name unambiguous, models are required to have a unique name, otherwise an error will be thrown.\n",
    "\n",
    "To see which models are available you can use the `.names` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['my-source', 'gll_iem_v06_gc.fits']\n"
     ]
    }
   ],
   "source": [
    "print(models.names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that a `SkyModel` object can be evaluated for a given longitude, latitude, and energy, but the `Models` object cannot. This `Models` container object will be assigned to `Dataset` or `Datasets` together with the data to be fitted as explained in other analysis tutorials (see for example the [modeling](modeling.ipynb) notebook).\n",
    "\n",
    "The `Models` class also has in place `.append()` and `.extend()` methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_copy = model.copy(name=\"my-source-copy\")\n",
    "models.append(model_copy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This list of models can be also serialised toa custom YAML based format: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\n",
      "-   name: my-source\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        - {name: index, value: 2.2, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "        - {name: amplitude, value: 2.7e-12, unit: cm-2 s-1 TeV-1, min: .nan, max: .nan,\n",
      "            frozen: false}\n",
      "        - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "    spatial:\n",
      "        type: GaussianSpatialModel\n",
      "        frame: galactic\n",
      "        parameters:\n",
      "        - {name: lon_0, value: 0.0, unit: deg, min: .nan, max: .nan, frozen: false}\n",
      "        - {name: lat_0, value: 0.0, unit: deg, min: -90.0, max: 90.0, frozen: false}\n",
      "        - {name: sigma, value: 0.2, unit: deg, min: 0.0, max: .nan, frozen: false}\n",
      "        - {name: e, value: 0.0, unit: '', min: 0.0, max: 1.0, frozen: true}\n",
      "        - {name: phi, value: 0.0, unit: deg, min: .nan, max: .nan, frozen: true}\n",
      "-   name: gll_iem_v06_gc.fits\n",
      "    type: SkyDiffuseCube\n",
      "    filename: $GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\n",
      "    parameters:\n",
      "    - {name: norm, value: 1.0, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "    - {name: tilt, value: 0.0, unit: '', min: .nan, max: .nan, frozen: true}\n",
      "    - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "-   name: my-source-copy\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        - {name: index, value: 2.2, unit: '', min: .nan, max: .nan, frozen: false}\n",
      "        - {name: amplitude, value: 2.7e-12, unit: cm-2 s-1 TeV-1, min: .nan, max: .nan,\n",
      "            frozen: false}\n",
      "        - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\n",
      "    spatial:\n",
      "        type: GaussianSpatialModel\n",
      "        frame: galactic\n",
      "        parameters:\n",
      "        - {name: lon_0, value: 0.0, unit: deg, min: .nan, max: .nan, frozen: false}\n",
      "        - {name: lat_0, value: 0.0, unit: deg, min: -90.0, max: 90.0, frozen: false}\n",
      "        - {name: sigma, value: 0.2, unit: deg, min: 0.0, max: .nan, frozen: false}\n",
      "        - {name: e, value: 0.0, unit: '', min: 0.0, max: 1.0, frozen: true}\n",
      "        - {name: phi, value: 0.0, unit: deg, min: .nan, max: .nan, frozen: true}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models_yaml = models.to_yaml()\n",
    "print(models_yaml)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The structure of the yaml files follows the structure of the python objects.\n",
    "The `components` listed correspond to the `SkyModel` and `SkyDiffuseCube` components of the `Models`. \n",
    "For each `SkyModel` we have  informations about its `name`, `type` (corresponding to the tag attribute) and sub-mobels (i.e `spectral` model and eventually `spatial` model). Then the spatial and spectral models are defiend by their type and parameters. The `parameters` keys name/value/unit are mandatory, while the keys min/max/frozen are optionnals (so you can prepare shorter files).\n",
    "\n",
    "If you want to write this list of models to disk and read it back later you can use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "models.write(\"models.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "models_read = Models.read(\"models.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionally the models can exported and imported togeter with the data using the `Datasets.read()` and `Datasets.write()` methods as shown in the [analysis_mwl](analysis_mwl.ipynb) notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "# Implementing a Custom Model\n",
    "\n",
    "In order to add a user defined spectral model you have to create a SpectralModel subclass.\n",
    "This new model class should include:\n",
    "\n",
    "- a tag used for serialization (it can be the same as the class name)\n",
    "- an instantiation of each Parameter with their unit, default values and frozen status\n",
    "- the evaluate function where the mathematical expression for the model is defined.\n",
    "\n",
    "As an example we will use a PowerLawSpectralModel plus a Gaussian (with fixed width).\n",
    "First we define the new custom model class that we name `MyCustomSpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import SpectralModel, Parameter\n",
    "\n",
    "\n",
    "class MyCustomSpectralModel(SpectralModel):\n",
    "    \"\"\"My custom spectral model, parametrising a power law plus a Gaussian spectral line.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    amplitude : `~astropy.units.Quantity`\n",
    "        Amplitude of the spectra model.\n",
    "    index : `~astropy.units.Quantity`\n",
    "        Spectral index of the model.\n",
    "    reference : `~astropy.units.Quantity`\n",
    "        Reference energy of the power law.\n",
    "    mean : `~astropy.units.Quantity`\n",
    "        Mean value of the Gaussian.\n",
    "    width : `~astropy.units.Quantity`\n",
    "        Sigma width of the Gaussian line.\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    tag = \"MyCustomSpectralModel\"\n",
    "    amplitude = Parameter(\"amplitude\", \"1e-12 cm-2 s-1 TeV-1\", min=0)\n",
    "    index = Parameter(\"index\", 2, min=0)\n",
    "    reference = Parameter(\"reference\", \"1 TeV\", frozen=True)\n",
    "    mean = Parameter(\"mean\", \"1 TeV\", min=0)\n",
    "    width = Parameter(\"width\", \"0.1 TeV\", min=0, frozen=True)\n",
    "\n",
    "    @staticmethod\n",
    "    def evaluate(energy, index, amplitude, reference, mean, width):\n",
    "        pwl = PowerLawSpectralModel.evaluate(\n",
    "            energy=energy,\n",
    "            index=index,\n",
    "            amplitude=amplitude,\n",
    "            reference=reference,\n",
    "        )\n",
    "        gauss = amplitude * np.exp(-((energy - mean) ** 2) / (2 * width ** 2))\n",
    "        return pwl + gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is good practice to also implement a docstring for the model, defining the parameters and also definig a `tag`, which specifies the name of the model for serialisation. Also note that gammapy assumes that all SpectralModel evaluate functions return a flux in unit of `\"cm-2 s-1 TeV-1\"` (or equivalent dimensions).\n",
    "\n",
    "\n",
    "\n",
    "This model can now be used as any other spectral model in Gammapy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MyCustomSpectralModel\n",
      "\n",
      "   name     value   error      unit         min    max frozen\n",
      "--------- --------- ----- -------------- --------- --- ------\n",
      "amplitude 1.000e-12   nan cm-2 s-1 TeV-1 0.000e+00 nan  False\n",
      "    index 2.000e+00   nan                0.000e+00 nan  False\n",
      "reference 1.000e+00   nan            TeV       nan nan   True\n",
      "     mean 3.000e+00   nan            TeV 0.000e+00 nan  False\n",
      "    width 1.000e-01   nan            TeV 0.000e+00 nan   True\n"
     ]
    }
   ],
   "source": [
    "my_custom_model = MyCustomSpectralModel(mean=\"3 TeV\")\n",
    "print(my_custom_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$1.1443958 \\times 10^{-12} \\; \\mathrm{\\frac{1}{s\\,cm^{2}}}$$"
      ],
      "text/plain": [
       "<Quantity 1.14439576e-12 1 / (cm2 s)>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_custom_model.integral(1 * u.TeV, 10 * u.TeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1b1e4240>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_custom_model.plot(energy_range=[1, 10] * u.TeV)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a next step we can also register the custom model in the `SPECTRAL_MODELS` registry, so that it becomes available for serilisation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPECTRAL_MODELS.append(MyCustomSpectralModel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = SkyModel(spectral_model=my_custom_model, name=\"my-source\")\n",
    "models = Models([model])\n",
    "models.write(\"my-custom-models.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\r\n",
      "-   name: my-source\r\n",
      "    type: SkyModel\r\n",
      "    spectral:\r\n",
      "        type: MyCustomSpectralModel\r\n",
      "        parameters:\r\n",
      "        - {name: amplitude, value: 1.0e-12, unit: cm-2 s-1 TeV-1, min: 0.0, max: .nan,\r\n",
      "            frozen: false}\r\n",
      "        - {name: index, value: 2.0, unit: '', min: 0.0, max: .nan, frozen: false}\r\n",
      "        - {name: reference, value: 1.0, unit: TeV, min: .nan, max: .nan, frozen: true}\r\n",
      "        - {name: mean, value: 3.0, unit: TeV, min: 0.0, max: .nan, frozen: false}\r\n",
      "        - {name: width, value: 0.1, unit: TeV, min: 0.0, max: .nan, frozen: true}\r\n"
     ]
    }
   ],
   "source": [
    "!cat my-custom-models.yaml"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly you can also create custom spatial models and add them to the `SPATIAL_MODELS` registry. In that case gammapy assumes that the evaluate function return a normalized quantity in \"sr-1\" such as the model integral over the whole sky is one."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
