{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.17?urlpath=lab/tree/modeling.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[modeling.ipynb](../_static/notebooks/modeling.ipynb) |\n",
    "[modeling.py](../_static/notebooks/modeling.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and fitting\n",
    "\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of spectral analysis to produce 1D On-Off datasets, [see the following tutorial](spectrum_analysis.ipynb)\n",
    "- Reading of pre-computed datasets [see the MWL tutorial](analysis_mwl.ipynb)\n",
    "- General knowledge on statistics and optimization methods\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "This is a hands-on tutorial to `~gammapy.modeling`, showing how the model, dataset and fit classes work together. As an example we are going to work with HESS data of the Crab Nebula and show in particular how to :\n",
    "- perform a spectral analysis\n",
    "- use different fitting backends\n",
    "- acces covariance matrix informations and parameter errors\n",
    "- compute likelihood profile\n",
    "- compute confidence contours\n",
    "\n",
    "See also: [Models gallery tutorial](models.ipynb) and `docs/modeling/index.rst`.\n",
    "\n",
    "\n",
    "## The setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from astropy import units as u\n",
    "import matplotlib.pyplot as plt\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.datasets import Datasets, SpectrumDatasetOnOff\n",
    "from gammapy.modeling.models import LogParabolaSpectralModel, SkyModel\n",
    "from gammapy.visualization.utils import plot_contour_line\n",
    "from itertools import combinations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model and dataset\n",
    "\n",
    "First we define the source model, here we need only a spectral model for which we choose a log-parabola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "crab_spectrum = LogParabolaSpectralModel(\n",
    "    amplitude=1e-11 / u.cm ** 2 / u.s / u.TeV,\n",
    "    reference=1 * u.TeV,\n",
    "    alpha=2.3,\n",
    "    beta=0.2,\n",
    ")\n",
    "\n",
    "crab_model = SkyModel(spectral_model=crab_spectrum, name=\"crab\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data and background are read from pre-computed ON/OFF datasets of HESS observations, for simplicity we stack them together.\n",
    "Then we set the model and fit range to the resulting dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/gammapy-dev/gammapy-docs/build/v0.17/gammapy/gammapy/utils/interpolation.py:163: RuntimeWarning: overflow encountered in log\n",
      "  return np.log(values)\n"
     ]
    }
   ],
   "source": [
    "datasets = []\n",
    "for obs_id in [23523, 23526]:\n",
    "    dataset = SpectrumDatasetOnOff.from_ogip_files(\n",
    "        f\"$GAMMAPY_DATA/joint-crab/spectra/hess/pha_obs{obs_id}.fits\"\n",
    "    )\n",
    "    datasets.append(dataset)\n",
    "\n",
    "dataset_hess = Datasets(datasets).stack_reduce(name=\"HESS\")\n",
    "\n",
    "# Set model and fit range\n",
    "dataset_hess.models = crab_model\n",
    "e_min = 0.66 * u.TeV\n",
    "e_max = 30 * u.TeV\n",
    "dataset_hess.mask_fit = dataset_hess.counts.geom.energy_mask(e_min, e_max)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting options\n",
    "\n",
    "\n",
    "\n",
    "First let's create a `Fit` instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "fit = Fit([dataset_hess])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the fit is performed using MINUIT, you can select alternative optimizers and set their option using the `optimize_opts` argument of the `Fit.run()` method.\n",
    "\n",
    "Note that, for now, covaraince matrix and errors are computed only for the fitting with MINUIT. However depending on the problem other optimizers can better perform, so somethimes it can be usefull to run a pre-fit with alternative optimization methods.\n",
    "\n",
    "For the \"scipy\" backend the available options are desribed in detail here:  \n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No covariance estimate - not supported by this backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : scipy\n",
      "\tmethod     : L-BFGS-B\n",
      "\tsuccess    : True\n",
      "\tmessage    : b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
      "\tnfev       : 72\n",
      "\ttotal stat : 94.72\n",
      "\n",
      "CPU times: user 152 ms, sys: 1.75 ms, total: 154 ms\n",
      "Wall time: 155 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "scipy_opts = {\"method\": \"L-BFGS-B\", \"options\": {\"ftol\": 1e-4, \"gtol\": 1e-05}}\n",
    "result_scipy = fit.run(backend=\"scipy\", optimize_opts=scipy_opts)\n",
    "print(result_scipy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the \"sherpa\" backend you can from the options method = {\"simplex\",  \"levmar\", \"moncar\", \"gridsearch\"}.  \n",
    "Those methods are described and compared in detail on http://cxc.cfa.harvard.edu/sherpa/methods/index.html.  \n",
    "The available options of the optimization methods are described on the following page https://cxc.cfa.harvard.edu/sherpa/methods/opt_methods.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No covariance estimate - not supported by this backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : sherpa\n",
      "\tmethod     : simplex\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully\n",
      "\tnfev       : 169\n",
      "\ttotal stat : 30.35\n",
      "\n",
      "CPU times: user 347 ms, sys: 4.31 ms, total: 351 ms\n",
      "Wall time: 353 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sherpa_opts = {\"method\": \"simplex\", \"ftol\": 1e-3, \"maxfev\": int(1e4)}\n",
    "results_simplex = fit.run(backend=\"sherpa\", optimize_opts=sherpa_opts)\n",
    "print(results_simplex)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the \"minuit\" backend see https://iminuit.readthedocs.io/en/latest/reference.html for a detailed description of the available options. If there is an entry ‘migrad_opts’, those options will be passed to [iminuit.Minuit.migrad](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.migrad). Additionnaly you can set the fit tolerance using the [tol](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.tol\n",
    ") option. The minimization will stop when the estimated distance to the minimum is less than 0.001*tol (by default tol=0.1). The [strategy](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.strategy) option change the speed and accuracy of the optimizer: 0 fast, 1 default, 2 slow but accurate. If you want more reliable error estimates, you should run the final fit with strategy 2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 59\n",
      "\ttotal stat : 30.35\n",
      "\n",
      "CPU times: user 172 ms, sys: 2.59 ms, total: 174 ms\n",
      "Wall time: 175 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<i>Table length=4</i>\n",
       "<table id=\"table4651193904\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>unit</th><th>min</th><th>max</th><th>frozen</th><th>error</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th></tr></thead>\n",
       "<tr><td>amplitude</td><td>3.814e-11</td><td>cm-2 s-1 TeV-1</td><td>nan</td><td>nan</td><td>False</td><td>2.886e-12</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td><td>0.000e+00</td></tr>\n",
       "<tr><td>alpha</td><td>2.196e+00</td><td></td><td>nan</td><td>nan</td><td>False</td><td>1.254e-01</td></tr>\n",
       "<tr><td>beta</td><td>2.265e-01</td><td></td><td>nan</td><td>nan</td><td>False</td><td>7.534e-02</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "   name     value        unit        min     max   frozen   error  \n",
       "   str9    float64      str14      float64 float64  bool   float64 \n",
       "--------- --------- -------------- ------- ------- ------ ---------\n",
       "amplitude 3.814e-11 cm-2 s-1 TeV-1     nan     nan  False 2.886e-12\n",
       "reference 1.000e+00            TeV     nan     nan   True 0.000e+00\n",
       "    alpha 2.196e+00                    nan     nan  False 1.254e-01\n",
       "     beta 2.265e-01                    nan     nan  False 7.534e-02"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "minuit_opts = {\"tol\": 0.001, \"strategy\": 1}\n",
    "result_minuit = fit.run(backend=\"minuit\", optimize_opts=minuit_opts)\n",
    "print(result_minuit)\n",
    "result_minuit.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Covariance and parameters errors\n",
    "\n",
    "After the fit the covariance matrix is attached to the model. You can get the error on a specific parameter by accessing the `.error` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12539950086635385"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crab_model.spectral_model.alpha.error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an exampke this step is needed to produce a butterfly plot showing the enveloppe of the model taking into account parameter uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "crab_spectrum.plot(energy_range=energy_range, energy_power=2)\n",
    "ax = crab_spectrum.plot_error(energy_range=energy_range, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inspecting fit statistic profiles\n",
    "\n",
    "To check the quality of the fit it is also useful to plot fit statistic profiles for specific parameters.\n",
    "For this we use `~gammapy.modeling.Fit.stat_profile()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "profile = fit.stat_profile(parameter=\"alpha\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a good fit and error estimate the profile should be parabolic, if we plot it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "total_stat = result_minuit.total_stat\n",
    "plt.plot(profile[\"values\"], profile[\"stat\"] - total_stat)\n",
    "plt.xlabel(r\"$\\Gamma$\")\n",
    "plt.ylabel(\"Delta TS\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Confidence contours\n",
    "\n",
    "\n",
    "In most studies, one wishes to estimate parameters distribution using observed sample data.\n",
    "A confidence interval gives an estimated range of values which is likely to include an unknown parameter.\n",
    "The selection of a confidence level for an interval determines the probability that the confidence interval produced will contain the true parameter value.\n",
    "A confidence contour is a 2D generalization of a confidence interval, often represented as an ellipsoid around the best-fit value.\n",
    "\n",
    "After the fit, MINUIT offers the possibility to compute the confidence confours.\n",
    "gammapy provides an interface to this functionnality throught the `Fit` object using the `minos_contour` method.\n",
    "Here we defined a function to automatize the contour production for the differents parameterer and confidence levels (expressed in term of sigma):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_contours(fit, result, npoints, sigmas):\n",
    "    cts_sigma = []\n",
    "    for sigma in sigmas:\n",
    "        contours = dict()\n",
    "        for par_1, par_2 in combinations([\"alpha\", \"beta\", \"amplitude\"], r=2):\n",
    "            contour = fit.minos_contour(\n",
    "                result.parameters[par_1],\n",
    "                result.parameters[par_2],\n",
    "                numpoints=npoints,\n",
    "                sigma=sigma,\n",
    "            )\n",
    "            contours[f\"contour_{par_1}_{par_2}\"] = {\n",
    "                par_1: contour[\"x\"].tolist(),\n",
    "                par_2: contour[\"y\"].tolist(),\n",
    "            }\n",
    "        cts_sigma.append(contours)\n",
    "    return cts_sigma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can compute few contours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 9.55 s, sys: 70.3 ms, total: 9.62 s\n",
      "Wall time: 9.76 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sigma = [1, 2]\n",
    "cts_sigma = make_contours(fit, result_minuit, 10, sigma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we prepare some aliases and annotations in order to make the plotting nicer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "pars = {\n",
    "    \"phi\": r\"$\\phi_0 \\,/\\,(10^{-11}\\,{\\rm TeV}^{-1} \\, {\\rm cm}^{-2} {\\rm s}^{-1})$\",\n",
    "    \"alpha\": r\"$\\alpha$\",\n",
    "    \"beta\": r\"$\\beta$\",\n",
    "}\n",
    "\n",
    "panels = [\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_amplitude\"][\"alpha\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_alpha_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"beta\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_beta_amplitude\"][\"beta\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_beta_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"beta\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_beta\"][\"alpha\"]),\n",
    "        \"cy\": (lambda ct: ct[\"contour_alpha_beta\"][\"beta\"]),\n",
    "    },\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we produce the confidence contours figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, figsize=(16, 5))\n",
    "colors = [\"m\", \"b\", \"c\"]\n",
    "for p, ax in zip(panels, axes):\n",
    "    xlabel = pars[p[\"x\"]]\n",
    "    ylabel = pars[p[\"y\"]]\n",
    "    for ks in range(len(cts_sigma)):\n",
    "        plot_contour_line(\n",
    "            ax,\n",
    "            p[\"cx\"](cts_sigma[ks]),\n",
    "            p[\"cy\"](cts_sigma[ks]),\n",
    "            lw=2.5,\n",
    "            color=colors[ks],\n",
    "            label=f\"{sigma[ks]}\" + r\"$\\sigma$\",\n",
    "        )\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel(ylabel)\n",
    "plt.legend()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
