{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.17?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.maps import Map, WcsGeom\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import Datasets, SpectrumDataset, FluxPointsDataset\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 101430\n",
      "- Median energy: 0.1 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 843\n",
      "- Median energy: 0.107 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No thresholds defined for obs Observation\n",
      "\n",
      "\tobs id            : 111630 \n",
      " \ttstart            : 59300.83\n",
      "\ttstop             : 59300.85\n",
      "\tduration          : 1800.00 s\n",
      "\tpointing (icrs)   : 130.9 deg, -44.6 deg\n",
      "\n",
      "\tdeadtime fraction : 2.0%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "e_true = np.logspace(-2.5, 1, 100) * u.TeV\n",
    "e_reco = np.logspace(-2, 1, 30) * u.TeV\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 108\n",
      "\ttotal stat : 5.70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"vela psr\")\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    dataset.mask_fit = dataset.counts.geom.energy_mask(\n",
    "        emin=emin_fit, emax=emax_fit\n",
    "    )\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/gammapy-dev/gammapy-docs/build/v0.17/gammapy/gammapy/estimators/parameter_estimator.py:172: RuntimeWarning: invalid value encountered in sqrt\n",
      "  {\"sqrt_ts\": np.sqrt(res), \"ts\": res, \"null_value\": null_value}\n"
     ]
    }
   ],
   "source": [
    "e_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.models = model\n",
    "\n",
    "fpe = FluxPointsEstimator(e_edges=e_edges, source=\"vela psr\")\n",
    "\n",
    "flux_points = fpe.run(datasets=[dataset])\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x112642c50>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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rvT8wqm12yXOtjsfQLt27fjoo49cel9iYiJXX301jzzyCHl5edx4441069atwut+++033nzzTS655BJuu+02XnnlFaZNm8Ytt9zCZ599RqdOnZg0aRKvvvoq999/f5n35uTkcPHFF/PMM8/wl7/8hX//+9888sgjXH311YwePZrx441NYGfPns2ePXsICAggOzu7Vv8d6oIG3fFrrZcBywb06337ko/eZOu2rWSsyrCXNfxg0SI2b9rMyKSRDBwwEH//yob5NRTlGIeNyc8aCISAfzBKl6JVoxg8EUI0cAeycsvc6X+35yQAseGBxEUE1/q6lQ31u2rmzJkkJiYSGBjInDlzKn1N69at7dvY3njjjcyZM4cRI0bQrl07e437m2++mXnz5lXo+P39/e25Bn369GH16tWVfkZCQgI33HADY8aMYcyYMbX6WeqCBt3xO1MKLuralYuc5mrycvP47rvvWJWxiiZNmnDZsMu44oor6NcvsfqLlRZB/injAOKLd1OIP2TH2oMB/II8+eMIIYRblb+Tn/jaN3y35ySZs6/yyudbLBZKS0vtj/PzHcHHyZMnOXv2LEVFReTn55fZhtem/Pa2Sqlqt8N15ry1rtlstm+nW94nn3zC2rVrWbp0KU899RS//vorFkv960Yb9W3qpEk3sXLVSubOmcvQIUP57LPPmD9/vv35Xbt3U1rq2i9O9unTkHsCTu2D49vh8M9wYjecPmwECCWV/yIJIYSA+Ph4Nm3aBMCmTZvYs2eP/bkpU6bw1FNPccMNN/DQQw9V+v59+/bxzTfGtERaWhqDBg2ic+fOZGZm2re3XbBgAUOGDHG5TaGhoZw5cwaA0tJS9u/fz7Bhw3juuefIzs62b9lb39S/UOUc2Ob4u3a6oMrX+FksDBw4gIEDB/C3h//GyRPGsNaJkydJTUklOjqaESNHkJSUROcLO6Mq22IIOHamoOwJXQIFp43DxhxgjAb4NzHyBfyCqPKCQgjhY7HhgV77rHHjxvHuu+/Ss2dPEhMT7cPz7777LhaLheuvv56SkhIGDhzI559/zmWXXVbm/V26dOGdd95h6tSpdOzYkTvvvJPAwEDmz5/PhAkTKC4uJjExkTvucH1/t5SUFG6//XbmzJlDeno6f/rTnzh16hRaax544AHCw8Pd+t/AWzy+LW9d0LJdZ33L//vbOb2npKiA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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "ax_spectrum, ax_residual = flux_points_dataset.peek()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residual.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
