{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.18?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.maps import Map, WcsGeom, MapAxis\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import Datasets, SpectrumDataset, FluxPointsDataset\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 101430\n",
      "  Event rate       : 56.350 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 1.52e+02 TeV\n",
      "  Median energy    : 1.00e-01 TeV\n",
      "\n",
      "  Max. offset      : 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 843\n",
      "  Event rate       : 0.468 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 4.33e+01 TeV\n",
      "  Median energy    : 1.07e-01 TeV\n",
      "\n",
      "  Max. offset      : 1.7 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n",
      "No thresholds defined for obs 111630\n"
     ]
    }
   ],
   "source": [
    "e_true = MapAxis.from_energy_bounds(\n",
    "    0.003, 10, 100, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "e_reco = MapAxis.from_energy_bounds(0.01, 10, 30, unit=\"TeV\", name=\"energy\")\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<matplotlib.axes._subplots.AxesSubplot at 0x11b85be80>,\n",
       " <matplotlib.axes._subplots.AxesSubplot at 0x11c107828>,\n",
       " <matplotlib.axes._subplots.AxesSubplot at 0x11c0d6128>)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 101\n",
      "\ttotal stat : 7.07\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"vela psr\")\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    geom = dataset.counts.geom\n",
    "    data = geom.energy_mask(energy_min=emin_fit, energy_max=emax_fit)\n",
    "    dataset.mask_fit = Map.from_geom(geom=geom, data=data)\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "energy_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.models = model\n",
    "\n",
    "fpe = FluxPointsEstimator(energy_edges=energy_edges, source=\"vela psr\")\n",
    "\n",
    "flux_points = fpe.run(datasets=[dataset])\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0.01030801, 0.00769884, 0.02056718, 0.03259678, 0.02434588]), array([0.01297701, 0.00863825, 0.02589254, 0.04103691, 0.02731653]))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x117207898>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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IQD27dtH37596dKlC9deey07d+4kOTmZxx9/nLVr1xIXF0dubi7r1q2je/fuJCQkMHTo0JIUv82bN+e5557jmmuuYcWKFed93jPPPENCQgKdOnVi586dAGRlZXHvvffSqVMnYmNj+eCDDwDKfR9nPXv2ZOLEiVx33XW0b9+en376icGDB9OmTRueeuqpkue98sorxMTEEBMTw6uvvlpy/fnnn+fyyy/nz3/+M7t27Sq5XtbvpDJJyl4hhKhjevbsec6122+/nYceeoicnBxuuummc74/cuRIRo4cyfHjxxkyZEip73399dcuf3ZRURHr16/nvvvuA0wK3tdff502bdrw448/8tBDD/Hll1+WKqV7/Phx/v73v/PFF18QGBjIiy++yCuvvFJStMfPz4/vvvuO48ePM3jw4HKfFxERwZYtW/jXv/7FjBkzmDdvHtOmTSM0NJRt20yp4pMnT1b4ec58fHzYsGEDM2fO5JZbbmHz5s3Ur1+fVq1aMXHiRFJTU1m4cCE//vgjWmuuuuoqrr/+eoqLi1m2bBlJSUkUFhaSkJBAly5dzvs7qSwy8AshhHA7e67+1NRUunTpQu/evcnKyuL7779n6NChJc/Lz88/57U//PADv/76Kz169ADgzJkzJbn9gZLc+xU9b/DgwQB06dKFDz/8EIAvvviCZcuWlTynXr16fPzxx+d9H2c333wzYEr4duzYkejoaABatmzJwYMH+e677xg0aBCBgYElffj2228pLi5m0KBBBAQElHofV38nl0IGfiGEqGPOd4ceEBBw3u9HRERc0B2+nX2N/9SpUwwYMIDXXnuNkSNHEhYWRnJy8nlfq7Wmd+/eLF26tMzv2wfVip5nL7drtVpLyu2WVVq3ovcp6z2dy/naHxcWFnK+ejhllfQtLi526XdyKWSNXwghRJUJDQ1l1qxZzJgxA39/f1q0aMGKFSsAM+Bu3br1nNd069aN//73v+zduxeAnJwcdu/efdHPc9anTx/mzJlT8vjkyZMX9T7lue6661i1ahU5OTlkZ2ezcuVKrr32Wq677jpWrlxJbm4umZmZrF69GoCQkBCXfieXQgZ+IYQQVSo+Pp7OnTuzbNkylixZwvz58+ncuTMdO3bkP//5zznPb9CgAW+//TaJiYnExsbSrVu3Mje8ufo8Z0899RQnT54kJiaGzp0789VXX13U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\n",
      "text/plain": [
       "<Figure size 576x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_spectrum, ax_residuals = flux_points_dataset.plot_fit()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residuals.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
