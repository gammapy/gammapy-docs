{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.18?urlpath=lab/tree/spectrum_simulation.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/docs/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_simulation.ipynb](../_static/notebooks/spectrum_simulation.ipynb) |\n",
    "[spectrum_simulation.py](../_static/notebooks/spectrum_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum simulation\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of spectral extraction and datasets used in gammapy, see for instance the [spectral analysis tutorial](spectrum_analysis.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "To simulate a specific observation, it is not always necessary to simulate the full photon list. For many uses cases, simulating directly a reduced binned dataset is enough: the IRFs reduced in the correct geometry are combined with a source model to predict an actual number of counts per bin. The latter is then used to simulate a reduced dataset using Poisson probability distribution.\n",
    "\n",
    "This can be done to check the feasibility of a measurement, to test whether fitted parameters really provide a good fit to the data etc.\n",
    "\n",
    "Here we will see how to perform a 1D spectral simulation of a CTA observation, in particular, we will generate OFF observations following the template background stored in the CTA IRFs.\n",
    "\n",
    "**Objective: simulate a number of spectral ON-OFF observations of a source with a power-law spectral model with CTA using the CTA 1DC response, fit them with the assumed spectral model and check that the distribution of fitted parameters is consistent with the input values.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "We will use the following classes:\n",
    "\n",
    "* `~gammapy.datasets.SpectrumDatasetOnOff`\n",
    "* `~gammapy.datasets.SpectrumDataset`\n",
    "* `~gammapy.irf.load_cta_irfs`\n",
    "* `~gammapy.modeling.models.PowerLawSpectralModel`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.datasets import SpectrumDatasetOnOff, SpectrumDataset, Datasets\n",
    "from gammapy.makers import SpectrumDatasetMaker\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.data import Observation\n",
    "from gammapy.maps import MapAxis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation of a single spectrum\n",
    "\n",
    "To do a simulation, we need to define the observational parameters like the livetime, the offset, the assumed integration radius, the energy range to perform the simulation for and the choice of spectral model. We then use an in-memory observation which is convolved with the IRFs to get the predicted number of counts. This is Poission fluctuated using the `fake()` to get the simulated counts for each observation.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define simulation parameters parameters\n",
    "livetime = 1 * u.h\n",
    "\n",
    "pointing = SkyCoord(0, 0, unit=\"deg\", frame=\"galactic\")\n",
    "offset = 0.5 * u.deg\n",
    "\n",
    "# Reconstructed and true energy axis\n",
    "energy_axis = MapAxis.from_edges(\n",
    "    np.logspace(-0.5, 1.0, 10), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_edges(\n",
    "    np.logspace(-1.2, 2.0, 31), unit=\"TeV\", name=\"energy_true\", interp=\"log\"\n",
    ")\n",
    "\n",
    "on_region_radius = Angle(\"0.11 deg\")\n",
    "\n",
    "center = pointing.directional_offset_by(\n",
    "    position_angle=0 * u.deg, separation=offset\n",
    ")\n",
    "on_region = CircleSkyRegion(center=center, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "   name     value         unit      min max frozen   error  \n",
      "--------- ---------- -------------- --- --- ------ ---------\n",
      "    index 3.0000e+00                nan nan  False 0.000e+00\n",
      "amplitude 2.5000e-12 cm-2 s-1 TeV-1 nan nan  False 0.000e+00\n",
      "reference 1.0000e+00            TeV nan nan   True 0.000e+00\n"
     ]
    }
   ],
   "source": [
    "# Define spectral model - a simple Power Law in this case\n",
    "model_simu = PowerLawSpectralModel(\n",
    "    index=3.0,\n",
    "    amplitude=2.5e-12 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "print(model_simu)\n",
    "# we set the sky model used in the dataset\n",
    "model = SkyModel(spectral_model=model_simu, name=\"source\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "# Load the IRFs\n",
    "# In this simulation, we use the CTA-1DC irfs shipped with gammapy.\n",
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observation\n",
      "\n",
      "\tobs id            : 0 \n",
      " \ttstart            : 51544.00\n",
      "\ttstop             : 51544.04\n",
      "\tduration          : 3600.00 s\n",
      "\tpointing (icrs)   : 266.4 deg, -28.9 deg\n",
      "\n",
      "\tdeadtime fraction : 0.0%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "obs = Observation.create(pointing=pointing, livetime=livetime, irfs=irfs)\n",
    "print(obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the SpectrumDataset\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    e_reco=energy_axis, e_true=energy_axis_true, region=on_region, name=\"obs-0\"\n",
    ")\n",
    "maker = SpectrumDatasetMaker(selection=[\"exposure\", \"edisp\", \"background\"])\n",
    "\n",
    "dataset = maker.run(dataset_empty, obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDataset\n",
      "---------------\n",
      "\n",
      "  Name                            : obs-0 \n",
      "\n",
      "  Total counts                    : 298 \n",
      "  Total background counts         : 22.32\n",
      "  Total excess counts             : 275.68\n",
      "\n",
      "  Predicted counts                : 303.69\n",
      "  Predicted background counts     : 22.32\n",
      "  Predicted excess counts         : 281.37\n",
      "\n",
      "  Exposure min                    : 2.53e+08 m2 s\n",
      "  Exposure max                    : 1.77e+10 m2 s\n",
      "\n",
      "  Number of total bins            : 9 \n",
      "  Number of fit bins              : 9 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : -1811.58\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 2\n",
      "\n",
      "  Component 0: SkyModel\n",
      "  \n",
      "    Name                      : source\n",
      "    Datasets names            : None\n",
      "    Spectral model type       : PowerLawSpectralModel\n",
      "    Spatial  model type       : \n",
      "    Temporal model type       : \n",
      "    Parameters:\n",
      "      index                   :   3.000              \n",
      "      amplitude               :   2.50e-12  1 / (cm2 s TeV)\n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Set the model on the dataset, and fake\n",
    "dataset.models = model\n",
    "dataset.fake(random_state=42)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that backgound counts are now simulated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### On-Off analysis\n",
    "\n",
    "To do an on off spectral analysis, which is the usual science case, the standard would be to use `SpectrumDatasetOnOff`, which uses the acceptance to fake off-counts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumDatasetOnOff\n",
      "--------------------\n",
      "\n",
      "  Name                            : obs-0 \n",
      "\n",
      "  Total counts                    : 290 \n",
      "  Total off counts                : 121.00\n",
      "  Total background counts         : 24.20\n",
      "  Total excess counts             : 265.80\n",
      "\n",
      "  Predicted counts                : 305.29\n",
      "  Predicted background counts     : 23.92\n",
      "  Predicted excess counts         : 281.37\n",
      "\n",
      "  Exposure min                    : 2.53e+08 m2 s\n",
      "  Exposure max                    : 1.77e+10 m2 s\n",
      "\n",
      "  Acceptance mean                 : 1.000\n",
      "  Acceptance off                  : 45.000\n",
      "\n",
      "  Number of total bins            : 9 \n",
      "  Number of fit bins              : 9 \n",
      "\n",
      "  Fit statistic type              : wstat\n",
      "  Fit statistic value (-2 log(L)) : 3.19\n",
      "\n",
      "  Number of models                : 1 \n",
      "  Number of parameters            : 3\n",
      "  Number of free parameters       : 2\n",
      "\n",
      "  Component 0: SkyModel\n",
      "  \n",
      "    Name                      : source\n",
      "    Datasets names            : None\n",
      "    Spectral model type       : PowerLawSpectralModel\n",
      "    Spatial  model type       : \n",
      "    Temporal model type       : \n",
      "    Parameters:\n",
      "      index                   :   3.000              \n",
      "      amplitude               :   2.50e-12  1 / (cm2 s TeV)\n",
      "      reference    (frozen)   :   1.000  TeV         \n",
      "  \n",
      "  \n"
     ]
    }
   ],
   "source": [
    "dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(\n",
    "    dataset=dataset, acceptance=1, acceptance_off=5\n",
    ")\n",
    "dataset_on_off.fake(npred_background=dataset.npred_background())\n",
    "print(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see that off counts are now simulated as well. We now simulate several spectra using the same set of observation conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 659 ms, sys: 20.5 ms, total: 680 ms\n",
      "Wall time: 711 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "n_obs = 100\n",
    "datasets = Datasets()\n",
    "\n",
    "for idx in range(n_obs):\n",
    "    dataset_on_off.fake(\n",
    "        random_state=idx, npred_background=dataset.npred_background()\n",
    "    )\n",
    "    dataset_fake = dataset_on_off.copy(name=f\"obs-{idx}\")\n",
    "    dataset_fake.meta_table[\"OBS_ID\"] = [idx]\n",
    "    datasets.append(dataset_fake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=100</i>\n",
       "<table id=\"table4755037936\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>background</th><th>excess</th><th>sqrt_ts</th><th>npred</th><th>npred_background</th><th>npred_signal</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th><th>counts_off</th><th>acceptance</th><th>acceptance_off</th><th>alpha</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str6</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str5</th><th>float64</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>obs-0</td><td>317.0</td><td>18.400000000000002</td><td>298.6</td><td>27.08240194504324</td><td>300.0237217925293</td><td>18.653546302364763</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08805555555555555</td><td>0.005111111111111111</td><td>0.08294444444444445</td><td>9</td><td>9</td><td>wstat</td><td>9.917001109717983</td><td>92</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-1</td><td>275.0</td><td>22.0</td><td>253.0</td><td>23.76785365487285</td><td>302.95276320606564</td><td>21.582587715901177</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.0763888888888889</td><td>0.006111111111111111</td><td>0.07027777777777777</td><td>9</td><td>9</td><td>wstat</td><td>8.81866082855619</td><td>110</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-2</td><td>293.0</td><td>20.6</td><td>272.4</td><td>25.17110555404655</td><td>301.8397348729255</td><td>20.469559382761037</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08138888888888889</td><td>0.005722222222222222</td><td>0.07566666666666666</td><td>9</td><td>9</td><td>wstat</td><td>7.359111002998746</td><td>103</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-3</td><td>280.0</td><td>22.4</td><td>257.6</td><td>23.982951737405376</td><td>303.4557139026035</td><td>22.085538412438968</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.07777777777777778</td><td>0.006222222222222222</td><td>0.07155555555555557</td><td>9</td><td>9</td><td>wstat</td><td>11.832983489177316</td><td>112</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-4</td><td>337.0</td><td>20.6</td><td>316.4</td><td>27.682709945184747</td><td>302.2812841625807</td><td>20.911108672416212</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.09361111111111112</td><td>0.005722222222222222</td><td>0.08788888888888888</td><td>9</td><td>9</td><td>wstat</td><td>17.867103727171312</td><td>103</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-5</td><td>283.0</td><td>24.400000000000002</td><td>258.6</td><td>23.727154782347895</td><td>305.3838138459026</td><td>24.013638355738106</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.07861111111111112</td><td>0.006777777777777778</td><td>0.07183333333333335</td><td>9</td><td>9</td><td>wstat</td><td>8.005196180438258</td><td>122</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-6</td><td>330.0</td><td>22.400000000000006</td><td>307.6</td><td>26.889184475727866</td><td>304.1716823126791</td><td>22.8015068225146</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.09166666666666666</td><td>0.006222222222222224</td><td>0.08544444444444445</td><td>9</td><td>9</td><td>wstat</td><td>10.098766444429558</td><td>112</td><td>9.0</td><td>44.999999999999986</td><td>0.2</td></tr>\n",
       "<tr><td>obs-7</td><td>283.0</td><td>26.000000000000004</td><td>257.0</td><td>23.389178133235443</td><td>307.02186335244875</td><td>25.651687862284245</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.07861111111111112</td><td>0.007222222222222224</td><td>0.07138888888888889</td><td>9</td><td>9</td><td>wstat</td><td>4.310899779189119</td><td>130</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-8</td><td>308.0</td><td>23.400000000000002</td><td>284.6</td><td>25.42049273328333</td><td>304.8351782861283</td><td>23.46500279596388</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08555555555555555</td><td>0.006500000000000001</td><td>0.07905555555555556</td><td>9</td><td>9</td><td>wstat</td><td>4.142947213516996</td><td>117</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>obs-90</td><td>286.0</td><td>19.000000000000004</td><td>267.0</td><td>25.131221887043438</td><td>300.26600271111903</td><td>18.895827220954608</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.07944444444444444</td><td>0.005277777777777779</td><td>0.07416666666666667</td><td>9</td><td>9</td><td>wstat</td><td>6.724388228060566</td><td>95</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-91</td><td>285.0</td><td>25.200000000000003</td><td>259.8</td><td>23.67754591931069</td><td>306.2191485971411</td><td>24.848973106976626</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.07916666666666666</td><td>0.007000000000000001</td><td>0.07216666666666667</td><td>9</td><td>9</td><td>wstat</td><td>14.577940826871759</td><td>126</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-92</td><td>313.0</td><td>23.6</td><td>289.4</td><td>25.664935420194176</td><td>305.058327340992</td><td>23.688151850827467</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08694444444444445</td><td>0.006555555555555556</td><td>0.08038888888888888</td><td>9</td><td>9</td><td>wstat</td><td>6.304646568308098</td><td>118</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-93</td><td>302.0</td><td>18.8</td><td>283.2</td><td>26.123867522605497</td><td>300.12595138715096</td><td>18.75577589698646</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08388888888888889</td><td>0.005222222222222223</td><td>0.07866666666666666</td><td>9</td><td>9</td><td>wstat</td><td>5.86503429029057</td><td>94</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-94</td><td>322.0</td><td>22.0</td><td>300.0</td><td>26.5292481657426</td><td>303.66420796523397</td><td>22.294032475069507</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08944444444444444</td><td>0.006111111111111111</td><td>0.08333333333333333</td><td>9</td><td>9</td><td>wstat</td><td>10.005883760873052</td><td>110</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-95</td><td>305.0</td><td>24.600000000000005</td><td>280.4</td><td>24.98804632088198</td><td>305.8930204465737</td><td>24.522844956409255</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08472222222222223</td><td>0.0068333333333333345</td><td>0.07788888888888888</td><td>9</td><td>9</td><td>wstat</td><td>5.627799171046288</td><td>123</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-96</td><td>301.0</td><td>23.6</td><td>277.4</td><td>24.969845969421428</td><td>305.0399592645493</td><td>23.669783774384797</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08361111111111111</td><td>0.006555555555555556</td><td>0.07705555555555554</td><td>9</td><td>9</td><td>wstat</td><td>5.51177203120533</td><td>118</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-97</td><td>290.0</td><td>18.8</td><td>271.2</td><td>25.417982194454826</td><td>300.0933776554593</td><td>18.723202165294804</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08055555555555556</td><td>0.005222222222222223</td><td>0.07533333333333334</td><td>9</td><td>9</td><td>wstat</td><td>5.667231272491558</td><td>94</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "<tr><td>obs-98</td><td>301.0</td><td>20.400000000000002</td><td>280.6</td><td>25.687832964675007</td><td>301.756148559105</td><td>20.38597306894053</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08361111111111111</td><td>0.005666666666666667</td><td>0.07794444444444446</td><td>9</td><td>9</td><td>wstat</td><td>7.14214115301812</td><td>102</td><td>9.0</td><td>44.99999999999999</td><td>0.2</td></tr>\n",
       "<tr><td>obs-99</td><td>323.0</td><td>20.8</td><td>302.2</td><td>26.85707842376871</td><td>302.4766917650425</td><td>21.106516274878086</td><td>281.37017549016446</td><td>252718170.97287515</td><td>17719697919.59926</td><td>3600.0</td><td>3600.0</td><td>0.08972222222222222</td><td>0.005777777777777778</td><td>0.08394444444444445</td><td>9</td><td>9</td><td>wstat</td><td>5.059623929851605</td><td>104</td><td>9.0</td><td>45.0</td><td>0.2</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=100>\n",
       " name   counts     background     ... acceptance   acceptance_off    alpha \n",
       "                                  ...                                      \n",
       " str6  float64      float64       ...  float64        float64       float64\n",
       "------ ------- ------------------ ... ---------- ------------------ -------\n",
       " obs-0   317.0 18.400000000000002 ...        9.0  44.99999999999999     0.2\n",
       " obs-1   275.0               22.0 ...        9.0               45.0     0.2\n",
       " obs-2   293.0               20.6 ...        9.0               45.0     0.2\n",
       " obs-3   280.0               22.4 ...        9.0               45.0     0.2\n",
       " obs-4   337.0               20.6 ...        9.0               45.0     0.2\n",
       " obs-5   283.0 24.400000000000002 ...        9.0  44.99999999999999     0.2\n",
       " obs-6   330.0 22.400000000000006 ...        9.0 44.999999999999986     0.2\n",
       " obs-7   283.0 26.000000000000004 ...        9.0  44.99999999999999     0.2\n",
       " obs-8   308.0 23.400000000000002 ...        9.0  44.99999999999999     0.2\n",
       "   ...     ...                ... ...        ...                ...     ...\n",
       "obs-90   286.0 19.000000000000004 ...        9.0  44.99999999999999     0.2\n",
       "obs-91   285.0 25.200000000000003 ...        9.0  44.99999999999999     0.2\n",
       "obs-92   313.0               23.6 ...        9.0               45.0     0.2\n",
       "obs-93   302.0               18.8 ...        9.0               45.0     0.2\n",
       "obs-94   322.0               22.0 ...        9.0               45.0     0.2\n",
       "obs-95   305.0 24.600000000000005 ...        9.0  44.99999999999999     0.2\n",
       "obs-96   301.0               23.6 ...        9.0               45.0     0.2\n",
       "obs-97   290.0               18.8 ...        9.0               45.0     0.2\n",
       "obs-98   301.0 20.400000000000002 ...        9.0  44.99999999999999     0.2\n",
       "obs-99   323.0               20.8 ...        9.0               45.0     0.2"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table = datasets.info_table()\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the fit let's have a look at the simulated observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fix, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[0].hist(table[\"counts\"])\n",
    "axes[0].set_xlabel(\"Counts\")\n",
    "axes[1].hist(table[\"counts_off\"])\n",
    "axes[1].set_xlabel(\"Counts Off\")\n",
    "axes[2].hist(table[\"excess\"])\n",
    "axes[2].set_xlabel(\"excess\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we fit each simulated spectrum individually "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 13.5 s, sys: 254 ms, total: 13.8 s\n",
      "Wall time: 17.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model.copy()\n",
    "    fit = Fit([dataset])\n",
    "    result = fit.optimize()\n",
    "    results.append(\n",
    "        {\n",
    "            \"index\": result.parameters[\"index\"].value,\n",
    "            \"amplitude\": result.parameters[\"amplitude\"].value,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take a look at the distribution of the fitted indices. This matches very well with the spectrum that we initially injected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index: 3.0036666673409944 += 0.08075110145690628\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([_[\"index\"] for _ in results])\n",
    "plt.hist(index, bins=10, alpha=0.5)\n",
    "plt.axvline(x=model_simu.parameters[\"index\"].value, color=\"red\")\n",
    "print(f\"index: {index.mean()} += {index.std()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Change the observation time to something longer or shorter. Does the observation and spectrum results change as you expected?\n",
    "* Change the spectral model, e.g. add a cutoff at 5 TeV, or put a steep-spectrum source with spectral index of 4.0\n",
    "* Simulate spectra with the spectral model we just defined. How much observation duration do you need to get back the injected parameters?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
