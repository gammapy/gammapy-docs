{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.19?urlpath=lab/tree/tutorials/analysis/1D/spectral_analysis.ipynb)\n",
    "- You may download all the notebooks in the documentation as a\n",
    "[tar file](../../../_downloads/notebooks-0.19.tar).\n",
    "- **Source files:**\n",
    "[spectral_analysis.ipynb](../../../_static/notebooks/spectral_analysis.ipynb) |\n",
    "[spectral_analysis.py](../../../_static/notebooks/spectral_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prerequisites \n",
    "\n",
    "- Understanding how spectral extraction is performed in Cherenkov astronomy, in particular regarding OFF background measurements. \n",
    "- Understanding the basics data reduction and modeling/fitting process with the gammapy library API as shown in the [first gammapy analysis with the gammapy library API tutorial](../../starting/analysis_2.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "While 3D analyses allow in principle to consider complex field of views containing overlapping gamma-ray sources, in many cases we might have an observation with a single, strong, point-like source in the field of view. A spectral analysis, in that case, might consider all the events inside a source (or ON) region and bin them in energy only, obtaining 1D datasets. \n",
    "\n",
    "In classical Cherenkov astronomy, the background estimation technique associated with this method measures the number of events in OFF regions taken in regions of the field-of-view devoid of gamma-ray emitters, where the background rate is assumed to be equal to the one in the ON region. \n",
    "\n",
    "This allows to use a specific fit statistics for ON-OFF measurements, the wstat (see `~gammapy.stats.fit_statistics`), where no background model is assumed. Background is treated as a set of nuisance parameters. This removes some systematic effects connected\n",
    "to the choice or the quality of the background model. But this comes at the expense of larger statistical uncertainties on the fitted model parameters.\n",
    "\n",
    "**Objective: perform a full region based spectral analysis of 4 Crab observations of  H.E.S.S. data release 1 and fit the resulting datasets.**\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Here, as usual, we use the `~gammapy.data.DataStore` to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the ON region containing the source and the geometry of the `~gammapy.datasets.SpectrumDataset` object we want to produce. We then create the corresponding dataset Maker. \n",
    "\n",
    "We have to define the Maker object that will extract the OFF counts from reflected regions in the field-of-view. To ensure we use data in an energy range where the quality of the IRFs is good enough we also create a safe range Maker.\n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry.\n",
    "\n",
    "We can then explore the resulting datasets and look at the cumulative signal and significance of our source. We finally proceed with model fitting. \n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the spectrum we want to produce:\n",
    "    - Create a `~regions.CircleSkyRegion` for the ON extraction region\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy binnings: one for the reconstructed (i.e. measured) energy, the other for the true energy (i.e. the one used by IRFs and models)\n",
    "- Create the necessary makers : \n",
    "    - the spectrum dataset maker : `~gammapy.makers.SpectrumDatasetMaker`\n",
    "    - the OFF background maker, here a `~gammapy.makers.ReflectedRegionsBackgroundMaker`\n",
    "    - and the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce a `~gammapy.datasets.SpectrumDatasetOnOff`\n",
    "    - Append it to list of datasets\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:46.539876Z",
     "iopub.status.busy": "2021-11-22T21:07:46.538955Z",
     "iopub.status.idle": "2021-11-22T21:07:46.714795Z",
     "shell.execute_reply": "2021-11-22T21:07:46.715028Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:46.717258Z",
     "iopub.status.busy": "2021-11-22T21:07:46.716950Z",
     "iopub.status.idle": "2021-11-22T21:07:46.965593Z",
     "shell.execute_reply": "2021-11-22T21:07:46.965780Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gammapy: 0.19\n",
      "numpy: 1.21.4\n",
      "astropy 4.3.1\n",
      "regions 0.5\n"
     ]
    }
   ],
   "source": [
    "# Check package versions\n",
    "import gammapy\n",
    "import numpy as np\n",
    "import astropy\n",
    "import regions\n",
    "\n",
    "print(\"gammapy:\", gammapy.__version__)\n",
    "print(\"numpy:\", np.__version__)\n",
    "print(\"astropy\", astropy.__version__)\n",
    "print(\"regions\", regions.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:46.968468Z",
     "iopub.status.busy": "2021-11-22T21:07:46.968171Z",
     "iopub.status.idle": "2021-11-22T21:07:47.263297Z",
     "shell.execute_reply": "2021-11-22T21:07:47.263502Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.maps import MapAxis, RegionGeom, WcsGeom\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import (\n",
    "    Datasets,\n",
    "    SpectrumDataset,\n",
    "    SpectrumDatasetOnOff,\n",
    "    FluxPointsDataset,\n",
    ")\n",
    "from gammapy.modeling.models import (\n",
    "    ExpCutoffPowerLawSpectralModel,\n",
    "    create_crab_spectral_model,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    SpectrumDatasetMaker,\n",
    "    ReflectedRegionsBackgroundMaker,\n",
    ")\n",
    "from gammapy.estimators import FluxPointsEstimator\n",
    "from gammapy.visualization import plot_spectrum_datasets_off_regions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data\n",
    "\n",
    "First, we select and load some H.E.S.S. observations of the Crab nebula (simulated events for now).\n",
    "\n",
    "We will access the events, effective area, energy dispersion, livetime and PSF for containement correction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.265860Z",
     "iopub.status.busy": "2021-11-22T21:07:47.265543Z",
     "iopub.status.idle": "2021-11-22T21:07:47.285736Z",
     "shell.execute_reply": "2021-11-22T21:07:47.285921Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No HDU found matching: OBS_ID = 23523, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23526, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23559, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23592, HDU_TYPE = rad_max, HDU_CLASS = None\n"
     ]
    }
   ],
   "source": [
    "datastore = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "obs_ids = [23523, 23526, 23559, 23592]\n",
    "observations = datastore.get_observations(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Target Region\n",
    "\n",
    "The next step is to define a signal extraction region, also known as on region. In the simplest case this is just a [CircleSkyRegion](http://astropy-regions.readthedocs.io/en/latest/api/regions.CircleSkyRegion.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.288665Z",
     "iopub.status.busy": "2021-11-22T21:07:47.288266Z",
     "iopub.status.idle": "2021-11-22T21:07:47.289578Z",
     "shell.execute_reply": "2021-11-22T21:07:47.289736Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63, dec=22.01, unit=\"deg\", frame=\"icrs\")\n",
    "on_region_radius = Angle(\"0.11 deg\")\n",
    "on_region = CircleSkyRegion(center=target_position, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create exclusion mask\n",
    "\n",
    "We will use the reflected regions method to place off regions to estimate the background level in the on region.\n",
    "To make sure the off regions don't contain gamma-ray emission, we create an exclusion mask.\n",
    "\n",
    "Using http://gamma-sky.net/ we find that there's only one known gamma-ray source near the Crab nebula: the AGN called [RGB J0521+212](http://gamma-sky.net/#/cat/tev/23) at GLON = 183.604 deg and GLAT = -8.708 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.295772Z",
     "iopub.status.busy": "2021-11-22T21:07:47.295165Z",
     "iopub.status.idle": "2021-11-22T21:07:47.511786Z",
     "shell.execute_reply": "2021-11-22T21:07:47.511979Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_region = CircleSkyRegion(\n",
    "    center=SkyCoord(183.604, -8.708, unit=\"deg\", frame=\"galactic\"),\n",
    "    radius=0.5 * u.deg,\n",
    ")\n",
    "\n",
    "skydir = target_position.galactic\n",
    "geom = WcsGeom.create(\n",
    "    npix=(150, 150), binsz=0.05, skydir=skydir, proj=\"TAN\", frame=\"icrs\"\n",
    ")\n",
    "\n",
    "exclusion_mask = ~geom.region_mask([exclusion_region])\n",
    "exclusion_mask.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run data reduction chain\n",
    "\n",
    "We begin with the configuration of the maker classes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.516375Z",
     "iopub.status.busy": "2021-11-22T21:07:47.516078Z",
     "iopub.status.idle": "2021-11-22T21:07:47.522771Z",
     "shell.execute_reply": "2021-11-22T21:07:47.523014Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(\n",
    "    0.1, 40, nbin=10, per_decade=True, unit=\"TeV\", name=\"energy\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.05, 100, nbin=20, per_decade=True, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "\n",
    "geom = RegionGeom.create(region=on_region, axes=[energy_axis])\n",
    "dataset_empty = SpectrumDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.525320Z",
     "iopub.status.busy": "2021-11-22T21:07:47.524984Z",
     "iopub.status.idle": "2021-11-22T21:07:47.526217Z",
     "shell.execute_reply": "2021-11-22T21:07:47.526399Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_maker = SpectrumDatasetMaker(\n",
    "    containment_correction=True, selection=[\"counts\", \"exposure\", \"edisp\"]\n",
    ")\n",
    "bkg_maker = ReflectedRegionsBackgroundMaker(exclusion_mask=exclusion_mask)\n",
    "safe_mask_masker = SafeMaskMaker(methods=[\"aeff-max\"], aeff_percent=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:47.530199Z",
     "iopub.status.busy": "2021-11-22T21:07:47.529877Z",
     "iopub.status.idle": "2021-11-22T21:07:48.994620Z",
     "shell.execute_reply": "2021-11-22T21:07:48.994812Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.65 s, sys: 97.6 ms, total: 1.75 s\n",
      "Wall time: 1.46 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "datasets = Datasets()\n",
    "\n",
    "for obs_id, observation in zip(obs_ids, observations):\n",
    "    dataset = dataset_maker.run(\n",
    "        dataset_empty.copy(name=str(obs_id)), observation\n",
    "    )\n",
    "    dataset_on_off = bkg_maker.run(dataset, observation)\n",
    "    dataset_on_off = safe_mask_masker.run(dataset_on_off, observation)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot off regions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.006324Z",
     "iopub.status.busy": "2021-11-22T21:07:49.006016Z",
     "iopub.status.idle": "2021-11-22T21:07:49.245123Z",
     "shell.execute_reply": "2021-11-22T21:07:49.245415Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 8))\n",
    "ax = exclusion_mask.plot()\n",
    "on_region.to_pixel(ax.wcs).plot(ax=ax, edgecolor=\"k\")\n",
    "plot_spectrum_datasets_off_regions(ax=ax, datasets=datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Source statistic\n",
    "\n",
    "Next we're going to look at the overall source statistics in our signal region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.353559Z",
     "iopub.status.busy": "2021-11-22T21:07:49.353234Z",
     "iopub.status.idle": "2021-11-22T21:07:49.354421Z",
     "shell.execute_reply": "2021-11-22T21:07:49.354712Z"
    }
   },
   "outputs": [],
   "source": [
    "info_table = datasets.info_table(cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.357989Z",
     "iopub.status.busy": "2021-11-22T21:07:49.357662Z",
     "iopub.status.idle": "2021-11-22T21:07:49.359248Z",
     "shell.execute_reply": "2021-11-22T21:07:49.359439Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=4</i>\n",
       "<table id=\"table5795371376\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>background</th><th>excess</th><th>sqrt_ts</th><th>npred</th><th>npred_background</th><th>npred_signal</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th><th>counts_off</th><th>acceptance</th><th>acceptance_off</th><th>alpha</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str7</th><th>int64</th><th>float64</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str5</th><th>float64</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>stacked</td><td>149</td><td>9.75</td><td>139.25</td><td>20.44968375700963</td><td>20.461539024432028</td><td>20.461539024432028</td><td>nan</td><td>2892003.25</td><td>841726208.0</td><td>1581.7367584109306</td><td>1687.0</td><td>0.0942002512160688</td><td>0.006164110398366919</td><td>0.08803614081770189</td><td>27</td><td>18</td><td>wstat</td><td>433.5372460592368</td><td>117</td><td>18.0</td><td>216.0</td><td>0.0833333432674408</td></tr>\n",
       "<tr><td>stacked</td><td>303</td><td>22.250001907348633</td><td>280.75</td><td>28.44625607119514</td><td>43.84615575068094</td><td>43.84615575068094</td><td>nan</td><td>13397218.0</td><td>1572412928.0</td><td>3154.4234824180603</td><td>3370.0</td><td>0.0960555872376818</td><td>0.00705358745627034</td><td>0.08900200038606985</td><td>27</td><td>19</td><td>wstat</td><td>823.6909484036685</td><td>267</td><td>19.0</td><td>227.9999804550359</td><td>0.08333335071802139</td></tr>\n",
       "<tr><td>stacked</td><td>439</td><td>30.225610733032227</td><td>408.77438</td><td>36.175888275385134</td><td>50.88364346926001</td><td>50.88364346926001</td><td>nan</td><td>19239694.0</td><td>2077411584.0</td><td>4732.546999931335</td><td>5056.0</td><td>0.09276188910672614</td><td>0.006386753419135778</td><td>0.08637513447850656</td><td>27</td><td>19</td><td>wstat</td><td>1325.2637060766638</td><td>594</td><td>19.0</td><td>373.39195888161265</td><td>0.049657758325338364</td></tr>\n",
       "<tr><td>stacked</td><td>550</td><td>37.864498138427734</td><td>512.1355</td><td>40.9008634601563</td><td>59.674911682627844</td><td>59.674911682627844</td><td>nan</td><td>21017612.0</td><td>2635248640.0</td><td>6313.811640620232</td><td>6742.0</td><td>0.08711061262289593</td><td>0.005997090235448986</td><td>0.081113521783264</td><td>27</td><td>19</td><td>wstat</td><td>1701.2360965968023</td><td>869</td><td>19.0</td><td>436.0549013389246</td><td>0.04170095920562744</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "  name  counts     background       excess       sqrt_ts       ...      stat_sum      counts_off acceptance   acceptance_off          alpha        \n",
       "                                                               ...                                                                                 \n",
       "  str7  int64       float64        float32       float64       ...      float64         int64     float64        float64             float64       \n",
       "------- ------ ------------------ --------- ------------------ ... ------------------ ---------- ---------- ------------------ --------------------\n",
       "stacked    149               9.75    139.25  20.44968375700963 ...  433.5372460592368        117       18.0              216.0   0.0833333432674408\n",
       "stacked    303 22.250001907348633    280.75  28.44625607119514 ...  823.6909484036685        267       19.0  227.9999804550359  0.08333335071802139\n",
       "stacked    439 30.225610733032227 408.77438 36.175888275385134 ... 1325.2637060766638        594       19.0 373.39195888161265 0.049657758325338364\n",
       "stacked    550 37.864498138427734  512.1355   40.9008634601563 ... 1701.2360965968023        869       19.0  436.0549013389246  0.04170095920562744"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.373480Z",
     "iopub.status.busy": "2021-11-22T21:07:49.373182Z",
     "iopub.status.idle": "2021-11-22T21:07:49.410579Z",
     "shell.execute_reply": "2021-11-22T21:07:49.410832Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"), info_table[\"excess\"], marker=\"o\", ls=\"none\"\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Excess\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.424855Z",
     "iopub.status.busy": "2021-11-22T21:07:49.424538Z",
     "iopub.status.idle": "2021-11-22T21:07:49.462216Z",
     "shell.execute_reply": "2021-11-22T21:07:49.462461Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(\n",
    "    info_table[\"livetime\"].to(\"h\"),\n",
    "    info_table[\"sqrt_ts\"],\n",
    "    marker=\"o\",\n",
    "    ls=\"none\",\n",
    ")\n",
    "plt.xlabel(\"Livetime [h]\")\n",
    "plt.ylabel(\"Sqrt(TS)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally you can write the extracted datasets to disk using the OGIP format (PHA, ARF, RMF, BKG, see [here](https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/ogip/index.html) for details):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.464394Z",
     "iopub.status.busy": "2021-11-22T21:07:49.464094Z",
     "iopub.status.idle": "2021-11-22T21:07:49.465500Z",
     "shell.execute_reply": "2021-11-22T21:07:49.465255Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"spectrum_analysis\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.467201Z",
     "iopub.status.busy": "2021-11-22T21:07:49.466915Z",
     "iopub.status.idle": "2021-11-22T21:07:49.825658Z",
     "shell.execute_reply": "2021-11-22T21:07:49.825853Z"
    }
   },
   "outputs": [],
   "source": [
    "for dataset in datasets:\n",
    "    dataset.write(\n",
    "        filename=path / f\"obs_{dataset.name}.fits.gz\", overwrite=True\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to read back the datasets from disk you can use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:49.828024Z",
     "iopub.status.busy": "2021-11-22T21:07:49.827718Z",
     "iopub.status.idle": "2021-11-22T21:07:50.355041Z",
     "shell.execute_reply": "2021-11-22T21:07:50.355235Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets = Datasets()\n",
    "\n",
    "for obs_id in obs_ids:\n",
    "    filename = path / f\"obs_{obs_id}.fits.gz\"\n",
    "    datasets.append(SpectrumDatasetOnOff.read(filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit spectrum\n",
    "\n",
    "Now we'll fit a global model to the spectrum. First we do a joint likelihood fit to all observations. If you want to stack the observations see below. We will also produce a debug plot in order to show how the global fit matches one of the individual observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:50.360576Z",
     "iopub.status.busy": "2021-11-22T21:07:50.360227Z",
     "iopub.status.idle": "2021-11-22T21:07:51.504467Z",
     "shell.execute_reply": "2021-11-22T21:07:51.504639Z"
    }
   },
   "outputs": [],
   "source": [
    "spectral_model = ExpCutoffPowerLawSpectralModel(\n",
    "    amplitude=1e-12 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    index=2,\n",
    "    lambda_=0.1 * u.Unit(\"TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"crab\")\n",
    "\n",
    "datasets.models = [model]\n",
    "\n",
    "fit_joint = Fit()\n",
    "result_joint = fit_joint.run(datasets=datasets)\n",
    "\n",
    "# we make a copy here to compare it later\n",
    "model_best_joint = model.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit quality and model residuals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can access the results dictionary to see if the fit converged:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:51.506529Z",
     "iopub.status.busy": "2021-11-22T21:07:51.506224Z",
     "iopub.status.idle": "2021-11-22T21:07:51.507574Z",
     "shell.execute_reply": "2021-11-22T21:07:51.507748Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 244\n",
      "\ttotal stat : 86.12\n",
      "\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 244\n",
      "\ttotal stat : 86.12\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_joint)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and check the best-fit parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:51.510963Z",
     "iopub.status.busy": "2021-11-22T21:07:51.510644Z",
     "iopub.status.idle": "2021-11-22T21:07:51.512160Z",
     "shell.execute_reply": "2021-11-22T21:07:51.512313Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5798990752\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>model</th><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str4</th><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>crab</td><td>spectral</td><td>index</td><td>2.2727e+00</td><td></td><td>1.566e-01</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>amplitude</td><td>4.7913e-11</td><td>cm-2 s-1 TeV-1</td><td>3.600e-12</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>lambda_</td><td>1.2097e-01</td><td>TeV-1</td><td>5.382e-02</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>alpha</td><td>1.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "model   type      name     value         unit        error     min     max   frozen link\n",
       " str4   str8      str9    float64       str14       float64  float64 float64  bool  str1\n",
       "----- -------- --------- ---------- -------------- --------- ------- ------- ------ ----\n",
       " crab spectral     index 2.2727e+00                1.566e-01     nan     nan  False     \n",
       " crab spectral amplitude 4.7913e-11 cm-2 s-1 TeV-1 3.600e-12     nan     nan  False     \n",
       " crab spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True     \n",
       " crab spectral   lambda_ 1.2097e-01          TeV-1 5.382e-02     nan     nan  False     \n",
       " crab spectral     alpha 1.0000e+00                0.000e+00     nan     nan   True     "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets.models.to_parameters_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple way to inspect the model residuals is using the function `~SpectrumDataset.plot_fit()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:51.532711Z",
     "iopub.status.busy": "2021-11-22T21:07:51.532393Z",
     "iopub.status.idle": "2021-11-22T21:07:51.837721Z",
     "shell.execute_reply": "2021-11-22T21:07:51.837907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 40)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_spectrum, ax_residuals = datasets[0].plot_fit()\n",
    "ax_spectrum.set_ylim(0.1, 40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more ways of assessing fit quality, please refer to the dedicated [modeling and fitting tutorial](../2D/modeling_2D.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute Flux Points\n",
    "\n",
    "To round up our analysis we can compute flux points by fitting the norm of the global model in energy bands. We'll use a fixed energy binning for now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:51.840124Z",
     "iopub.status.busy": "2021-11-22T21:07:51.839841Z",
     "iopub.status.idle": "2021-11-22T21:07:51.840897Z",
     "shell.execute_reply": "2021-11-22T21:07:51.841128Z"
    }
   },
   "outputs": [],
   "source": [
    "e_min, e_max = 0.7, 30\n",
    "energy_edges = np.geomspace(e_min, e_max, 11) * u.TeV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create an instance of the `~gammapy.estimators.FluxPointsEstimator`, by passing the dataset and the energy binning:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:51.843122Z",
     "iopub.status.busy": "2021-11-22T21:07:51.842818Z",
     "iopub.status.idle": "2021-11-22T21:07:58.625037Z",
     "shell.execute_reply": "2021-11-22T21:07:58.625221Z"
    }
   },
   "outputs": [],
   "source": [
    "fpe = FluxPointsEstimator(\n",
    "    energy_edges=energy_edges, source=\"crab\", selection_optional=\"all\"\n",
    ")\n",
    "flux_points = fpe.run(datasets=datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a the table of the resulting flux points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:58.627549Z",
     "iopub.status.busy": "2021-11-22T21:07:58.627255Z",
     "iopub.status.idle": "2021-11-22T21:07:58.634533Z",
     "shell.execute_reply": "2021-11-22T21:07:58.634738Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=10</i>\n",
       "<table id=\"table5797839056\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>e_ref</th><th>e_min</th><th>e_max</th><th>dnde</th><th>dnde_err</th><th>dnde_errp</th><th>dnde_errn</th><th>dnde_ul</th><th>ts</th><th>sqrt_ts</th><th>npred [4]</th><th>npred_excess [4]</th><th>stat</th><th>is_ul</th><th>counts [4]</th><th>success</th><th>norm_scan [11]</th><th>stat_scan [11]</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>TeV</th><th>TeV</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float32</th><th>float64</th><th>bool</th><th>float64</th><th>bool</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>0.823</td><td>0.737</td><td>0.920</td><td>6.950e-11</td><td>7.224e-12</td><td>7.462e-12</td><td>7.000e-12</td><td>8.496e-11</td><td>318.308</td><td>17.841</td><td>31.366455739137695 .. 23.88976456824348</td><td>28.8755 .. 21.720297</td><td>8.252</td><td>False</td><td>30.0 .. 25.0</td><td>True</td><td>0.200 .. 5.000</td><td>140.739 .. 451.124</td></tr>\n",
       "<tr><td>1.148</td><td>0.920</td><td>1.434</td><td>2.884e-11</td><td>2.581e-12</td><td>2.654e-12</td><td>2.510e-12</td><td>3.430e-11</td><td>449.770</td><td>21.208</td><td>40.72158479422507 .. 29.62749378240008</td><td>38.46755 .. 27.449326</td><td>12.649</td><td>False</td><td>43.0 .. 35.0</td><td>True</td><td>0.200 .. 5.000</td><td>182.603 .. 693.653</td></tr>\n",
       "<tr><td>1.790</td><td>1.434</td><td>2.235</td><td>1.104e-11</td><td>1.132e-12</td><td>1.168e-12</td><td>1.096e-12</td><td>1.345e-11</td><td>350.109</td><td>18.711</td><td>31.973730651551723 .. 21.124655968545834</td><td>29.863085 .. 19.905617</td><td>6.105</td><td>False</td><td>37.0 .. 21.0</td><td>True</td><td>0.200 .. 5.000</td><td>150.799 .. 424.855</td></tr>\n",
       "<tr><td>2.790</td><td>2.235</td><td>3.483</td><td>3.462e-12</td><td>4.450e-13</td><td>4.631e-13</td><td>4.273e-13</td><td>4.426e-12</td><td>219.114</td><td>14.802</td><td>20.868268731138357 .. 13.385575909549214</td><td>19.72982 .. 12.434961</td><td>12.915</td><td>False</td><td>13.0 .. 17.0</td><td>True</td><td>0.200 .. 5.000</td><td>102.546 .. 293.446</td></tr>\n",
       "<tr><td>3.892</td><td>3.483</td><td>4.348</td><td>8.756e-13</td><td>2.576e-13</td><td>2.800e-13</td><td>2.362e-13</td><td>1.482e-12</td><td>36.235</td><td>6.020</td><td>4.959041534302395 .. 2.7024857325192877</td><td>4.1686516 .. 2.5370138</td><td>4.035</td><td>False</td><td>8.0 .. 2.0</td><td>True</td><td>0.200 .. 5.000</td><td>13.594 .. 125.092</td></tr>\n",
       "<tr><td>5.429</td><td>4.348</td><td>6.778</td><td>5.335e-13</td><td>1.079e-13</td><td>1.149e-13</td><td>1.011e-13</td><td>7.776e-13</td><td>86.926</td><td>9.323</td><td>8.520676253068467 .. 5.1731597610821325</td><td>8.258545 .. 4.9781365</td><td>11.815</td><td>False</td><td>12.0 .. 6.0</td><td>True</td><td>0.200 .. 5.000</td><td>47.101 .. 132.109</td></tr>\n",
       "<tr><td>8.462</td><td>6.778</td><td>10.564</td><td>1.623e-13</td><td>4.547e-14</td><td>4.941e-14</td><td>4.186e-14</td><td>2.695e-13</td><td>38.108</td><td>6.173</td><td>5.121378946137629 .. 3.105552925633015</td><td>4.6203055 .. 2.7313495</td><td>8.980</td><td>False</td><td>5.0 .. 5.0</td><td>True</td><td>0.200 .. 5.000</td><td>28.474 .. 55.783</td></tr>\n",
       "<tr><td>11.803</td><td>10.564</td><td>13.189</td><td>5.214e-14</td><td>3.008e-14</td><td>3.529e-14</td><td>2.546e-14</td><td>1.339e-13</td><td>7.911</td><td>2.813</td><td>1.2131431975079712 .. 0.732386930397399</td><td>1.1362201 .. 0.67833287</td><td>7.934</td><td>False</td><td>0.0 .. 0.0</td><td>True</td><td>0.200 .. 5.000</td><td>12.285 .. 18.679</td></tr>\n",
       "<tr><td>16.465</td><td>13.189</td><td>20.556</td><td>1.177e-14</td><td>7.816e-15</td><td>9.399e-15</td><td>6.393e-15</td><td>3.395e-14</td><td>5.269</td><td>2.295</td><td>0.9432260338197485 .. 0.6987582435799975</td><td>0.8475294 .. 0.50956905</td><td>6.611</td><td>False</td><td>1.0 .. 0.0</td><td>True</td><td>0.200 .. 5.000</td><td>9.622 .. 17.557</td></tr>\n",
       "<tr><td>25.663</td><td>20.556</td><td>32.040</td><td>nan</td><td>nan</td><td>1.094e-15</td><td>nan</td><td>4.378e-15</td><td>-0.000</td><td>-0.000</td><td>0.07692307692307691 .. 0.10810810810810809</td><td>-4.4549585e-17 .. -2.7745514e-17</td><td>0.620</td><td>True</td><td>0.0 .. 0.0</td><td>False</td><td>0.200 .. 5.000</td><td>0.866 .. 6.774</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=10>\n",
       " e_ref   e_min   e_max        dnde          dnde_err       dnde_errp    ...   stat  is_ul  counts [4]  success norm_scan [11]   stat_scan [11]  \n",
       "  TeV     TeV     TeV   1 / (cm2 s TeV) 1 / (cm2 s TeV) 1 / (cm2 s TeV) ...                                                                     \n",
       "float64 float64 float64     float64         float64         float64     ... float64  bool   float64      bool     float64          float64      \n",
       "------- ------- ------- --------------- --------------- --------------- ... ------- ----- ------------ ------- -------------- ------------------\n",
       "  0.823   0.737   0.920       6.950e-11       7.224e-12       7.462e-12 ...   8.252 False 30.0 .. 25.0    True 0.200 .. 5.000 140.739 .. 451.124\n",
       "  1.148   0.920   1.434       2.884e-11       2.581e-12       2.654e-12 ...  12.649 False 43.0 .. 35.0    True 0.200 .. 5.000 182.603 .. 693.653\n",
       "  1.790   1.434   2.235       1.104e-11       1.132e-12       1.168e-12 ...   6.105 False 37.0 .. 21.0    True 0.200 .. 5.000 150.799 .. 424.855\n",
       "  2.790   2.235   3.483       3.462e-12       4.450e-13       4.631e-13 ...  12.915 False 13.0 .. 17.0    True 0.200 .. 5.000 102.546 .. 293.446\n",
       "  3.892   3.483   4.348       8.756e-13       2.576e-13       2.800e-13 ...   4.035 False   8.0 .. 2.0    True 0.200 .. 5.000  13.594 .. 125.092\n",
       "  5.429   4.348   6.778       5.335e-13       1.079e-13       1.149e-13 ...  11.815 False  12.0 .. 6.0    True 0.200 .. 5.000  47.101 .. 132.109\n",
       "  8.462   6.778  10.564       1.623e-13       4.547e-14       4.941e-14 ...   8.980 False   5.0 .. 5.0    True 0.200 .. 5.000   28.474 .. 55.783\n",
       " 11.803  10.564  13.189       5.214e-14       3.008e-14       3.529e-14 ...   7.934 False   0.0 .. 0.0    True 0.200 .. 5.000   12.285 .. 18.679\n",
       " 16.465  13.189  20.556       1.177e-14       7.816e-15       9.399e-15 ...   6.611 False   1.0 .. 0.0    True 0.200 .. 5.000    9.622 .. 17.557\n",
       " 25.663  20.556  32.040             nan             nan       1.094e-15 ...   0.620  True   0.0 .. 0.0   False 0.200 .. 5.000     0.866 .. 6.774"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flux_points.to_table(sed_type=\"dnde\", formatted=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we plot the flux points and their likelihood profiles. For the plotting of upper limits we choose a threshold of TS < 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:58.641434Z",
     "iopub.status.busy": "2021-11-22T21:07:58.640803Z",
     "iopub.status.idle": "2021-11-22T21:07:58.909204Z",
     "shell.execute_reply": "2021-11-22T21:07:58.909386Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Perform a full region based on-off spectral analysis and fit the resulting datasets."
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5))\n",
    "ax = flux_points.plot(sed_type=\"e2dnde\", color=\"darkorange\")\n",
    "flux_points.plot_ts_profiles(ax=ax, sed_type=\"e2dnde\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final plot with the best fit model, flux points and residuals can be quickly made like this: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:58.912133Z",
     "iopub.status.busy": "2021-11-22T21:07:58.911838Z",
     "iopub.status.idle": "2021-11-22T21:07:58.913072Z",
     "shell.execute_reply": "2021-11-22T21:07:58.913237Z"
    }
   },
   "outputs": [],
   "source": [
    "flux_points_dataset = FluxPointsDataset(\n",
    "    data=flux_points, models=model_best_joint\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:58.919789Z",
     "iopub.status.busy": "2021-11-22T21:07:58.919492Z",
     "iopub.status.idle": "2021-11-22T21:07:59.210036Z",
     "shell.execute_reply": "2021-11-22T21:07:59.210299Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flux_points_dataset.plot_fit();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stack observations\n",
    "\n",
    "And alternative approach to fitting the spectrum is stacking all observations first and the fitting a model. For this we first stack the individual datasets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.263952Z",
     "iopub.status.busy": "2021-11-22T21:07:59.263663Z",
     "iopub.status.idle": "2021-11-22T21:07:59.264808Z",
     "shell.execute_reply": "2021-11-22T21:07:59.265029Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_stacked = Datasets(datasets).stack_reduce()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again we set the model on the dataset we would like to fit (in this case it's only a single one) and pass it to the `~gammapy.modeling.Fit` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.279230Z",
     "iopub.status.busy": "2021-11-22T21:07:59.278845Z",
     "iopub.status.idle": "2021-11-22T21:07:59.340850Z",
     "shell.execute_reply": "2021-11-22T21:07:59.341038Z"
    }
   },
   "outputs": [],
   "source": [
    "dataset_stacked.models = model\n",
    "stacked_fit = Fit()\n",
    "result_stacked = stacked_fit.run([dataset_stacked])\n",
    "\n",
    "# make a copy to compare later\n",
    "model_best_stacked = model.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.342892Z",
     "iopub.status.busy": "2021-11-22T21:07:59.342556Z",
     "iopub.status.idle": "2021-11-22T21:07:59.343901Z",
     "shell.execute_reply": "2021-11-22T21:07:59.344066Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 54\n",
      "\ttotal stat : 8.16\n",
      "\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 54\n",
      "\ttotal stat : 8.16\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_stacked)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.347101Z",
     "iopub.status.busy": "2021-11-22T21:07:59.346752Z",
     "iopub.status.idle": "2021-11-22T21:07:59.348306Z",
     "shell.execute_reply": "2021-11-22T21:07:59.348479Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5813509136\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>index</td><td>2.2727e+00</td><td></td><td>1.566e-01</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>4.7913e-11</td><td>cm-2 s-1 TeV-1</td><td>3.600e-12</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>lambda_</td><td>1.2097e-01</td><td>TeV-1</td><td>5.382e-02</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>alpha</td><td>1.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "  type      name     value         unit        error     min     max   frozen link\n",
       "  str8      str9    float64       str14       float64  float64 float64  bool  str1\n",
       "-------- --------- ---------- -------------- --------- ------- ------- ------ ----\n",
       "spectral     index 2.2727e+00                1.566e-01     nan     nan  False     \n",
       "spectral amplitude 4.7913e-11 cm-2 s-1 TeV-1 3.600e-12     nan     nan  False     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True     \n",
       "spectral   lambda_ 1.2097e-01          TeV-1 5.382e-02     nan     nan  False     \n",
       "spectral     alpha 1.0000e+00                0.000e+00     nan     nan   True     "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_best_joint.parameters.to_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.351448Z",
     "iopub.status.busy": "2021-11-22T21:07:59.351163Z",
     "iopub.status.idle": "2021-11-22T21:07:59.352548Z",
     "shell.execute_reply": "2021-11-22T21:07:59.352793Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5794661808\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>index</td><td>2.2785e+00</td><td></td><td>1.563e-01</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>4.7800e-11</td><td>cm-2 s-1 TeV-1</td><td>3.566e-12</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>lambda_</td><td>1.1830e-01</td><td>TeV-1</td><td>5.329e-02</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>alpha</td><td>1.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "  type      name     value         unit        error     min     max   frozen link\n",
       "  str8      str9    float64       str14       float64  float64 float64  bool  str1\n",
       "-------- --------- ---------- -------------- --------- ------- ------- ------ ----\n",
       "spectral     index 2.2785e+00                1.563e-01     nan     nan  False     \n",
       "spectral amplitude 4.7800e-11 cm-2 s-1 TeV-1 3.566e-12     nan     nan  False     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True     \n",
       "spectral   lambda_ 1.1830e-01          TeV-1 5.329e-02     nan     nan  False     \n",
       "spectral     alpha 1.0000e+00                0.000e+00     nan     nan   True     "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_best_stacked.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we compare the results of our stacked analysis to a previously published Crab Nebula Spectrum for reference. This is available in `~gammapy.modeling.models.create_crab_spectral_model`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:07:59.365821Z",
     "iopub.status.busy": "2021-11-22T21:07:59.365524Z",
     "iopub.status.idle": "2021-11-22T21:07:59.618815Z",
     "shell.execute_reply": "2021-11-22T21:07:59.619008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1597a5b80>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_kwargs = {\n",
    "    \"energy_bounds\": [0.1, 30] * u.TeV,\n",
    "    \"sed_type\": \"e2dnde\",\n",
    "    \"yunits\": u.Unit(\"erg cm-2 s-1\"),\n",
    "}\n",
    "\n",
    "# plot stacked model\n",
    "model_best_stacked.spectral_model.plot(\n",
    "    **plot_kwargs, label=\"Stacked analysis result\"\n",
    ")\n",
    "model_best_stacked.spectral_model.plot_error(\n",
    "    facecolor=\"blue\", alpha=0.3, **plot_kwargs\n",
    ")\n",
    "\n",
    "# plot joint model\n",
    "model_best_joint.spectral_model.plot(\n",
    "    **plot_kwargs, label=\"Joint analysis result\", ls=\"--\"\n",
    ")\n",
    "model_best_joint.spectral_model.plot_error(\n",
    "    facecolor=\"orange\", alpha=0.3, **plot_kwargs\n",
    ")\n",
    "\n",
    "create_crab_spectral_model(\"hess_ecpl\").plot(\n",
    "    **plot_kwargs, label=\"Crab reference\"\n",
    ")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Now you have learned the basics of a spectral analysis with Gammapy. To practice you can continue with the following exercises:\n",
    "\n",
    "- Fit a different spectral model to the data.\n",
    "  You could try `~gammapy.modeling.models.ExpCutoffPowerLawSpectralModel` or `~gammapy.modeling.models.LogParabolaSpectralModel`.\n",
    "- Compute flux points for the stacked dataset.\n",
    "- Create a `~gammapy.estimators.FluxPointsDataset` with the flux points you have computed for the stacked dataset and fit the flux points again with obe of the spectral models. How does the result compare to the best fit model, that was directly fitted to the counts data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "The methods shown in this tutorial is valid for point-like or midly extended sources where we can assume that the IRF taken at the region center is valid over the whole region. If one wants to extract the 1D spectrum of a large source and properly average the response over the extraction region, one has to use a different approach explained in [the extended source spectral analysis tutorial](extended_source_spectral_analysis.ipynb)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1.0,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1.0,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
