{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.19?urlpath=lab/tree/tutorials/starting/analysis_2.ipynb)\n",
    "- You may download all the notebooks in the documentation as a\n",
    "[tar file](../../_downloads/notebooks-0.19.tar).\n",
    "- **Source files:**\n",
    "[analysis_2.ipynb](../../_static/notebooks/analysis_2.ipynb) |\n",
    "[analysis_2.py](../../_static/notebooks/analysis_2.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Low level API\n",
    "\n",
    "## Prerequisites:\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and instrument response functions (IRF).\n",
    "- Understanding of the data reduction and modeling fitting process as shown in the [analysis with the high level interface tutorial](analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis this time using the lower level classes and functions\n",
    "the library.\n",
    "This allows to understand what happens during two main gammapy analysis steps, data reduction and modeling/fitting. \n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula using the lower level gammapy API.**\n",
    "\n",
    "## Proposed approach:\n",
    "\n",
    "Here, we have to interact with the data archive (with the `~gammapy.data.DataStore`) to retrieve a list of selected observations (`~gammapy.data.Observations`). Then, we define the geometry of the `~gammapy.datasets.MapDataset` object we want to produce and the maker object that reduce an observation\n",
    "to a dataset. \n",
    "\n",
    "We can then proceed with data reduction with a loop over all selected observations to produce datasets in the relevant geometry and stack them together (i.e. sum them all).\n",
    "\n",
    "In practice, we have to:\n",
    "- Create a `~gammapy.data.DataStore` poiting to the relevant data \n",
    "- Apply an observation selection to produce a list of observations, a `~gammapy.data.Observations` object.\n",
    "- Define a geometry of the Map we want to produce, with a sky projection and an energy range.\n",
    "    - Create a `~gammapy.maps.MapAxis` for the energy\n",
    "    - Create a `~gammapy.maps.WcsGeom` for the geometry\n",
    "- Create the necessary makers : \n",
    "    - the map dataset maker : `~gammapy.makers.MapDatasetMaker`\n",
    "    - the background normalization maker, here a `~gammapy.makers.FoVBackgroundMaker`\n",
    "    - and usually the safe range maker : `~gammapy.makers.SafeRangeMaker`\n",
    "- Perform the data reduction loop. And for every observation:\n",
    "    - Apply the makers sequentially to produce the current `~gammapy.datasets.MapDataset`\n",
    "    - Stack it on the target one.\n",
    "- Define the `~gammapy.modeling.models.SkyModel` to apply to the dataset.\n",
    "- Create a `~gammapy.modeling.Fit` object and run it to fit the model parameters\n",
    "- Apply a `~gammapy.estimators.FluxPointsEstimator` to compute flux points for the spectral part of the fit.\n",
    "\n",
    "## Setup\n",
    "First, we setup the analysis by performing required imports.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:27.403960Z",
     "iopub.status.busy": "2021-11-22T21:08:27.403103Z",
     "iopub.status.idle": "2021-11-22T21:08:27.570669Z",
     "shell.execute_reply": "2021-11-22T21:08:27.570874Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:27.572844Z",
     "iopub.status.busy": "2021-11-22T21:08:27.572528Z",
     "iopub.status.idle": "2021-11-22T21:08:27.819534Z",
     "shell.execute_reply": "2021-11-22T21:08:27.819714Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:27.821992Z",
     "iopub.status.busy": "2021-11-22T21:08:27.821701Z",
     "iopub.status.idle": "2021-11-22T21:08:28.093952Z",
     "shell.execute_reply": "2021-11-22T21:08:28.094125Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import MapDataset\n",
    "from gammapy.maps import WcsGeom, MapAxis\n",
    "from gammapy.makers import MapDatasetMaker, SafeMaskMaker, FoVBackgroundMaker\n",
    "from gammapy.modeling.models import (\n",
    "    SkyModel,\n",
    "    PowerLawSpectralModel,\n",
    "    PointSpatialModel,\n",
    "    FoVBackgroundModel,\n",
    ")\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the datastore and selecting observations\n",
    "\n",
    "We first use the `~gammapy.data.DataStore` object to access the observations we want to analyse. Here the H.E.S.S. DL3 DR1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.096725Z",
     "iopub.status.busy": "2021-11-22T21:08:28.096072Z",
     "iopub.status.idle": "2021-11-22T21:08:28.111503Z",
     "shell.execute_reply": "2021-11-22T21:08:28.111660Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now define an observation filter to select only the relevant observations. \n",
    "Here we use a cone search which we define with a python dict.\n",
    "\n",
    "We then filter the `ObservationTable` with `~gammapy.data.ObservationTable.select_observations()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.115415Z",
     "iopub.status.busy": "2021-11-22T21:08:28.115118Z",
     "iopub.status.idle": "2021-11-22T21:08:28.116236Z",
     "shell.execute_reply": "2021-11-22T21:08:28.116467Z"
    }
   },
   "outputs": [],
   "source": [
    "selection = dict(\n",
    "    type=\"sky_circle\",\n",
    "    frame=\"icrs\",\n",
    "    lon=\"83.633 deg\",\n",
    "    lat=\"22.014 deg\",\n",
    "    radius=\"5 deg\",\n",
    ")\n",
    "selected_obs_table = data_store.obs_table.select_observations(selection)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now retrieve the relevant observations by passing their `obs_id` to the`~gammapy.data.DataStore.get_observations()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.119285Z",
     "iopub.status.busy": "2021-11-22T21:08:28.119003Z",
     "iopub.status.idle": "2021-11-22T21:08:28.123279Z",
     "shell.execute_reply": "2021-11-22T21:08:28.123458Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No HDU found matching: OBS_ID = 23523, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23526, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23559, HDU_TYPE = rad_max, HDU_CLASS = None\n",
      "No HDU found matching: OBS_ID = 23592, HDU_TYPE = rad_max, HDU_CLASS = None\n"
     ]
    }
   ],
   "source": [
    "observations = data_store.get_observations(selected_obs_table[\"OBS_ID\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing reduced datasets geometry\n",
    "\n",
    "Now we define a reference geometry for our analysis, We choose a WCS based geometry with a binsize of 0.02 deg and also define an energy axis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.126457Z",
     "iopub.status.busy": "2021-11-22T21:08:28.126163Z",
     "iopub.status.idle": "2021-11-22T21:08:28.127236Z",
     "shell.execute_reply": "2021-11-22T21:08:28.127445Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(1.0, 10.0, 4, unit=\"TeV\")\n",
    "\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(83.633, 22.014),\n",
    "    binsz=0.02,\n",
    "    width=(2, 2),\n",
    "    frame=\"icrs\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")\n",
    "\n",
    "# Reduced IRFs are defined in true energy (i.e. not measured energy).\n",
    "energy_axis_true = MapAxis.from_energy_bounds(\n",
    "    0.5, 20, 10, unit=\"TeV\", name=\"energy_true\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can define the target dataset with this geometry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.131710Z",
     "iopub.status.busy": "2021-11-22T21:08:28.131362Z",
     "iopub.status.idle": "2021-11-22T21:08:28.136371Z",
     "shell.execute_reply": "2021-11-22T21:08:28.136552Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"crab-stacked\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "### Create the maker classes to be used\n",
    "\n",
    "The `~gammapy.datasets.MapDatasetMaker` object is initialized as well as the `~gammapy.makers.SafeMaskMaker` that carries here a maximum offset selection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.138584Z",
     "iopub.status.busy": "2021-11-22T21:08:28.138284Z",
     "iopub.status.idle": "2021-11-22T21:08:28.139455Z",
     "shell.execute_reply": "2021-11-22T21:08:28.139610Z"
    }
   },
   "outputs": [],
   "source": [
    "offset_max = 2.5 * u.deg\n",
    "maker = MapDatasetMaker()\n",
    "maker_safe_mask = SafeMaskMaker(\n",
    "    methods=[\"offset-max\", \"aeff-max\"], offset_max=offset_max\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.141910Z",
     "iopub.status.busy": "2021-11-22T21:08:28.141610Z",
     "iopub.status.idle": "2021-11-22T21:08:28.149093Z",
     "shell.execute_reply": "2021-11-22T21:08:28.149269Z"
    }
   },
   "outputs": [],
   "source": [
    "circle = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.2 * u.deg\n",
    ")\n",
    "exclusion_mask = ~geom.region_mask(regions=[circle])\n",
    "maker_fov = FoVBackgroundMaker(method=\"fit\", exclusion_mask=exclusion_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform the data reduction loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:28.166029Z",
     "iopub.status.busy": "2021-11-22T21:08:28.157619Z",
     "iopub.status.idle": "2021-11-22T21:08:29.828137Z",
     "shell.execute_reply": "2021-11-22T21:08:29.828366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Background norm obs 23523: 0.99\n",
      "Background norm obs 23526: 1.08\n",
      "Background norm obs 23559: 0.99\n",
      "Background norm obs 23592: 1.10\n",
      "CPU times: user 1.61 s, sys: 57.9 ms, total: 1.67 s\n",
      "Wall time: 1.68 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "for obs in observations:\n",
    "    # First a cutout of the target map is produced\n",
    "    cutout = stacked.cutout(\n",
    "        obs.pointing_radec, width=2 * offset_max, name=f\"obs-{obs.obs_id}\"\n",
    "    )\n",
    "    # A MapDataset is filled in this cutout geometry\n",
    "    dataset = maker.run(cutout, obs)\n",
    "    # The data quality cut is applied\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    # fit background model\n",
    "    dataset = maker_fov.run(dataset)\n",
    "    print(\n",
    "        f\"Background norm obs {obs.obs_id}: {dataset.background_model.spectral_model.norm.value:.2f}\"\n",
    "    )\n",
    "    # The resulting dataset cutout is stacked onto the final one\n",
    "    stacked.stack(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:29.830239Z",
     "iopub.status.busy": "2021-11-22T21:08:29.829912Z",
     "iopub.status.idle": "2021-11-22T21:08:29.833464Z",
     "shell.execute_reply": "2021-11-22T21:08:29.833692Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : crab-stacked \n",
      "\n",
      "  Total counts                    : 2479 \n",
      "  Total background counts         : 2112.97\n",
      "  Total excess counts             : 366.03\n",
      "\n",
      "  Predicted counts                : 2112.97\n",
      "  Predicted background counts     : 2112.97\n",
      "  Predicted excess counts         : nan\n",
      "\n",
      "  Exposure min                    : 3.75e+08 m2 s\n",
      "  Exposure max                    : 3.48e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 40000 \n",
      "  Number of fit bins              : 40000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "  Number of models                : 0 \n",
      "  Number of parameters            : 0\n",
      "  Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(stacked)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspect the reduced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:29.836449Z",
     "iopub.status.busy": "2021-11-22T21:08:29.836146Z",
     "iopub.status.idle": "2021-11-22T21:08:30.083213Z",
     "shell.execute_reply": "2021-11-22T21:08:30.083401Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.counts.sum_over_axes().smooth(0.05 * u.deg).plot(\n",
    "    stretch=\"sqrt\", add_cbar=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:30.085469Z",
     "iopub.status.busy": "2021-11-22T21:08:30.085139Z",
     "iopub.status.idle": "2021-11-22T21:08:30.086401Z",
     "shell.execute_reply": "2021-11-22T21:08:30.086650Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_2\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `~gammapy.datasets.MapDataset.write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:30.155706Z",
     "iopub.status.busy": "2021-11-22T21:08:30.131101Z",
     "iopub.status.idle": "2021-11-22T21:08:30.209167Z",
     "shell.execute_reply": "2021-11-22T21:08:30.209383Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "stacked.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the model\n",
    "We first define the model, a `SkyModel`, as the combination of a point source `SpatialModel` with a powerlaw `SpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:30.212917Z",
     "iopub.status.busy": "2021-11-22T21:08:30.212604Z",
     "iopub.status.idle": "2021-11-22T21:08:30.220116Z",
     "shell.execute_reply": "2021-11-22T21:08:30.220318Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=target_position.ra, lat_0=target_position.dec, frame=\"icrs\"\n",
    ")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model, name=\"crab\"\n",
    ")\n",
    "\n",
    "bkg_model = FoVBackgroundModel(dataset_name=\"crab-stacked\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we assign this model to our reduced dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:30.222328Z",
     "iopub.status.busy": "2021-11-22T21:08:30.221999Z",
     "iopub.status.idle": "2021-11-22T21:08:30.223395Z",
     "shell.execute_reply": "2021-11-22T21:08:30.223577Z"
    }
   },
   "outputs": [],
   "source": [
    "stacked.models = [sky_model, bkg_model]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the model\n",
    "\n",
    "The `~gammapy.modeling.Fit` class is orchestrating the fit, connecting the `stats` method of the dataset to the minimizer. By default, it uses `iminuit`.\n",
    "\n",
    "Its constructor takes a list of dataset as argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:30.225764Z",
     "iopub.status.busy": "2021-11-22T21:08:30.225442Z",
     "iopub.status.idle": "2021-11-22T21:08:33.644769Z",
     "shell.execute_reply": "2021-11-22T21:08:33.645017Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.04 s, sys: 429 ms, total: 3.47 s\n",
      "Wall time: 3.42 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit(optimize_opts={\"print_level\": 1})\n",
    "result = fit.run([stacked])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `FitResult` contains information about the optimization and parameter error calculation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.646893Z",
     "iopub.status.busy": "2021-11-22T21:08:33.646580Z",
     "iopub.status.idle": "2021-11-22T21:08:33.647875Z",
     "shell.execute_reply": "2021-11-22T21:08:33.648111Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 139\n",
      "\ttotal stat : 16240.97\n",
      "\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 139\n",
      "\ttotal stat : 16240.97\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fitted parameters are visible from the `~astropy.modeling.models.Models` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.651646Z",
     "iopub.status.busy": "2021-11-22T21:08:33.651306Z",
     "iopub.status.idle": "2021-11-22T21:08:33.652704Z",
     "shell.execute_reply": "2021-11-22T21:08:33.652876Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=8</i>\n",
       "<table id=\"table4857628128\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>model</th><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str16</th><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>crab</td><td>spectral</td><td>index</td><td>2.5999e+00</td><td></td><td>1.004e-01</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>amplitude</td><td>4.5906e-11</td><td>cm-2 s-1 TeV-1</td><td>3.704e-12</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spatial</td><td>lon_0</td><td>8.3619e+01</td><td>deg</td><td>3.105e-03</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab</td><td>spatial</td><td>lat_0</td><td>2.2024e+01</td><td>deg</td><td>2.950e-03</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab-stacked-bkg</td><td>spectral</td><td>norm</td><td>9.3477e-01</td><td></td><td>2.192e-02</td><td>nan</td><td>nan</td><td>False</td><td></td></tr>\n",
       "<tr><td>crab-stacked-bkg</td><td>spectral</td><td>tilt</td><td>0.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "<tr><td>crab-stacked-bkg</td><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=8>\n",
       "     model         type      name     value         unit        error      min        max    frozen link\n",
       "     str16         str8      str9    float64       str14       float64   float64    float64   bool  str1\n",
       "---------------- -------- --------- ---------- -------------- --------- ---------- --------- ------ ----\n",
       "            crab spectral     index 2.5999e+00                1.004e-01        nan       nan  False     \n",
       "            crab spectral amplitude 4.5906e-11 cm-2 s-1 TeV-1 3.704e-12        nan       nan  False     \n",
       "            crab spectral reference 1.0000e+00            TeV 0.000e+00        nan       nan   True     \n",
       "            crab  spatial     lon_0 8.3619e+01            deg 3.105e-03        nan       nan  False     \n",
       "            crab  spatial     lat_0 2.2024e+01            deg 2.950e-03 -9.000e+01 9.000e+01  False     \n",
       "crab-stacked-bkg spectral      norm 9.3477e-01                2.192e-02        nan       nan  False     \n",
       "crab-stacked-bkg spectral      tilt 0.0000e+00                0.000e+00        nan       nan   True     \n",
       "crab-stacked-bkg spectral reference 1.0000e+00            TeV 0.000e+00        nan       nan   True     "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stacked.models.to_parameters_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspecting residuals\n",
    "\n",
    "For any fit it is useful to inspect the residual images. We have a few options on the dataset object to handle this. First we can use `.plot_residuals_spatial()` to plot a residual image, summed over all energies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.655919Z",
     "iopub.status.busy": "2021-11-22T21:08:33.655610Z",
     "iopub.status.idle": "2021-11-22T21:08:33.757137Z",
     "shell.execute_reply": "2021-11-22T21:08:33.757336Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Introduction to Gammapy analysis using the low level API."
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adonath/software/mambaforge/envs/gammapy-dev/lib/python3.9/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals_spatial(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition, we can also specify a region in the map to show the spectral residuals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.759726Z",
     "iopub.status.busy": "2021-11-22T21:08:33.759377Z",
     "iopub.status.idle": "2021-11-22T21:08:33.760482Z",
     "shell.execute_reply": "2021-11-22T21:08:33.760783Z"
    }
   },
   "outputs": [],
   "source": [
    "region = CircleSkyRegion(\n",
    "    center=SkyCoord(\"83.63 deg\", \"22.14 deg\"), radius=0.5 * u.deg\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.776230Z",
     "iopub.status.busy": "2021-11-22T21:08:33.765035Z",
     "iopub.status.idle": "2021-11-22T21:08:33.992904Z",
     "shell.execute_reply": "2021-11-22T21:08:33.993112Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adonath/software/mambaforge/envs/gammapy-dev/lib/python3.9/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n",
      "  return super().imshow(X, *args, origin=origin, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stacked.plot_residuals(\n",
    "    kwargs_spatial=dict(method=\"diff/sqrt(model)\", vmin=-0.5, vmax=0.5),\n",
    "    kwargs_spectral=dict(region=region),\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also directly access the `.residuals()` to get a map, that we can plot interactively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:33.995397Z",
     "iopub.status.busy": "2021-11-22T21:08:33.995056Z",
     "iopub.status.idle": "2021-11-22T21:08:34.143936Z",
     "shell.execute_reply": "2021-11-22T21:08:34.143674Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c45d8772c5074cdd92521f5388f835b3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "residuals = stacked.residuals(method=\"diff\")\n",
    "residuals.smooth(\"0.08 deg\").plot_interactive(\n",
    "    cmap=\"coolwarm\", vmin=-0.2, vmax=0.2, stretch=\"linear\", add_cbar=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the fitted spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making a butterfly plot \n",
    "\n",
    "The `SpectralModel` component can be used to produce a, so-called, butterfly plot showing the envelope of the model taking into account parameter uncertainties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:34.146558Z",
     "iopub.status.busy": "2021-11-22T21:08:34.146252Z",
     "iopub.status.idle": "2021-11-22T21:08:34.147210Z",
     "shell.execute_reply": "2021-11-22T21:08:34.147401Z"
    }
   },
   "outputs": [],
   "source": [
    "spec = sky_model.spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can actually do the plot using the `plot_error` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:34.189175Z",
     "iopub.status.busy": "2021-11-22T21:08:34.156358Z",
     "iopub.status.idle": "2021-11-22T21:08:34.308223Z",
     "shell.execute_reply": "2021-11-22T21:08:34.308504Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_bounds = [1, 10] * u.TeV\n",
    "spec.plot(energy_bounds=energy_bounds, energy_power=2)\n",
    "ax = spec.plot_error(energy_bounds=energy_bounds, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Computing flux points\n",
    "\n",
    "We can now compute some flux points using the `~gammapy.estimators.FluxPointsEstimator`. \n",
    "\n",
    "Besides the list of datasets to use, we must provide it the energy intervals on which to compute flux points as well as the model component name. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:34.310608Z",
     "iopub.status.busy": "2021-11-22T21:08:34.310264Z",
     "iopub.status.idle": "2021-11-22T21:08:34.311502Z",
     "shell.execute_reply": "2021-11-22T21:08:34.311699Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_edges = [1, 2, 4, 10] * u.TeV\n",
    "fpe = FluxPointsEstimator(energy_edges=energy_edges, source=\"crab\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:34.313653Z",
     "iopub.status.busy": "2021-11-22T21:08:34.313328Z",
     "iopub.status.idle": "2021-11-22T21:08:35.392830Z",
     "shell.execute_reply": "2021-11-22T21:08:35.393031Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.07 s, sys: 103 ms, total: 1.18 s\n",
      "Wall time: 1.08 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "flux_points = fpe.run(datasets=[stacked])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-22T21:08:35.402913Z",
     "iopub.status.busy": "2021-11-22T21:08:35.401956Z",
     "iopub.status.idle": "2021-11-22T21:08:35.573292Z",
     "shell.execute_reply": "2021-11-22T21:08:35.573581Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy [TeV]', ylabel='dnde (TeV / (cm2 s))'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = spec.plot_error(energy_bounds=energy_bounds, energy_power=2)\n",
    "flux_points.plot(ax=ax, energy_power=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1.0,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1.0,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0d12b19797154cfc97357dc103ab75b5": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_3bfc00912b794d09866acaf3a0097d1d",
       "msg_id": "",
       "outputs": [
        {
         "name": "stderr",
         "output_type": "stream",
         "text": "/Users/adonath/software/mambaforge/envs/gammapy-dev/lib/python3.9/site-packages/astropy/visualization/wcsaxes/core.py:211: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\n  return super().imshow(X, *args, origin=origin, **kwargs)\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 2 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "2530b69484664f27b1ad6f05c0cf53d3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3bfc00912b794d09866acaf3a0097d1d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "69e1a2fcc3e04ba98280f1ccd8f0a3f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "9035bfd49b004f339706fed638eb90a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00e+00 TeV - 1.78e+00 TeV",
        "1.78e+00 TeV - 3.16e+00 TeV",
        "3.16e+00 TeV - 5.62e+00 TeV",
        "5.62e+00 TeV - 1.00e+01 TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_d59eaea800644b7189c424c1efcf191e",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_c64f0230a12c41d6a30759f14a3f520e"
      }
     },
     "aef20fcaeb3b45db97171f1feb542421": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_2530b69484664f27b1ad6f05c0cf53d3",
       "style": "IPY_MODEL_69e1a2fcc3e04ba98280f1ccd8f0a3f0"
      }
     },
     "c45d8772c5074cdd92521f5388f835b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9035bfd49b004f339706fed638eb90a3",
        "IPY_MODEL_aef20fcaeb3b45db97171f1feb542421",
        "IPY_MODEL_0d12b19797154cfc97357dc103ab75b5"
       ],
       "layout": "IPY_MODEL_f7e08dd681fc48c4adc7220f70f05e9b"
      }
     },
     "c64f0230a12c41d6a30759f14a3f520e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "d59eaea800644b7189c424c1efcf191e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "f7e08dd681fc48c4adc7220f70f05e9b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
