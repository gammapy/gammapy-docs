{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "80953104",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20.1?urlpath=lab/tree/tutorials/analysis/time/light_curve_simulation.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../../_downloads/notebooks-0.20.1.tar).\n",
    "- **Source files:**\n",
    "[light_curve_simulation.ipynb](../../../_static/notebooks/light_curve_simulation.ipynb) |\n",
    "[light_curve_simulation.py](../../../_static/notebooks/light_curve_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dbfd2f2",
   "metadata": {},
   "source": [
    "# Simulating and fitting a time varying source\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- To understand how a single binned simulation works, please refer to [spectrum_simulation](../1D/spectrum_simulation.ipynb) [simulate_3d](../3D/simulate_3d.ipynb) for 1D and 3D simulations respectively.\n",
    "- For details of light curve extraction using gammapy, refer to the two tutorials [light_curve](light_curve.ipynb) and [light_curve_flare](light_curve_flare.ipynb) \n",
    "\n",
    "## Context\n",
    "\n",
    "Frequently, studies of variable sources (eg: decaying GRB light curves, AGN flares, etc) require time variable simulations. For most use cases, generating an event list is an overkill, and it suffices to use binned simulations using a temporal model.\n",
    "\n",
    "**Objective: Simulate and fit a time decaying light curve of a source with CTA using the CTA 1DC response**\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "We will simulate 10 spectral datasets within given time intervals (Good Time Intervals) following a given spectral (a power law) and temporal profile (an exponential decay, with a decay time of 6 hr ). These are then analysed using the light curve estimator to obtain flux points. \n",
    "\n",
    "Modelling and fitting of lightcurves can be done either\n",
    "- directly on the output of the `LighCurveEstimator` (at the DL5 level)\n",
    "- fit the simulated datasets (at the DL4 level)\n",
    "\n",
    "In summary, necessary steps are:\n",
    "\n",
    "- Choose observation parameters including a list of `gammapy.data.GTI`\n",
    "- Define temporal and spectral models from :ref:model-gallery as per science case\n",
    "- Perform the simulation (in 1D or 3D)\n",
    "- Extract the light curve from the reduced dataset as shown in [light curve notebook](light_curve.ipynb)\n",
    "- Optionally, we show here how to fit the simulated datasets using a source model \n",
    "\n",
    "\n",
    "## Setup \n",
    "\n",
    "As usual, we'll start with some general imports..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f253c65",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f538de1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:08.980839Z",
     "iopub.status.busy": "2022-06-17T21:28:08.979930Z",
     "iopub.status.idle": "2022-06-17T21:28:12.032691Z",
     "shell.execute_reply": "2022-06-17T21:28:12.031631Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from astropy.time import Time\n",
    "\n",
    "import logging\n",
    "\n",
    "log = logging.getLogger(__name__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ed3ee18",
   "metadata": {},
   "source": [
    "And some gammapy specific imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "605ca49b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:12.038978Z",
     "iopub.status.busy": "2022-06-17T21:28:12.037625Z",
     "iopub.status.idle": "2022-06-17T21:28:14.453389Z",
     "shell.execute_reply": "2022-06-17T21:28:14.452317Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.data import Observation\n",
    "from gammapy.irf import load_cta_irfs\n",
    "from gammapy.datasets import SpectrumDataset, Datasets, FluxPointsDataset\n",
    "from gammapy.modeling.models import (\n",
    "    PowerLawSpectralModel,\n",
    "    ExpDecayTemporalModel,\n",
    "    SkyModel,\n",
    ")\n",
    "from gammapy.maps import MapAxis, RegionGeom, TimeMapAxis\n",
    "from gammapy.estimators import LightCurveEstimator\n",
    "from gammapy.makers import SpectrumDatasetMaker\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.data import observatory_locations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afc4289b",
   "metadata": {},
   "source": [
    "We first define our preferred time format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c3f88ee3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.465405Z",
     "iopub.status.busy": "2022-06-17T21:28:14.464723Z",
     "iopub.status.idle": "2022-06-17T21:28:14.470287Z",
     "shell.execute_reply": "2022-06-17T21:28:14.469227Z"
    }
   },
   "outputs": [],
   "source": [
    "TimeMapAxis.time_format = \"iso\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a9c7cbf",
   "metadata": {},
   "source": [
    "## Simulating a light curve\n",
    "\n",
    "We will simulate 10  spectra between 300 GeV and 10 TeV using an `PowerLawSpectralModel` and a `ExpDecayTemporalModel`. The important thing to note here is how to attach a different `GTI` to each dataset. Since we use spectrum datasets here, we will use a `RegionGeom`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7c9f7f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.477103Z",
     "iopub.status.busy": "2022-06-17T21:28:14.476419Z",
     "iopub.status.idle": "2022-06-17T21:28:14.875110Z",
     "shell.execute_reply": "2022-06-17T21:28:14.872056Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n"
     ]
    }
   ],
   "source": [
    "# Loading IRFs\n",
    "irfs = load_cta_irfs(\n",
    "    \"$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9929b19d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.882486Z",
     "iopub.status.busy": "2022-06-17T21:28:14.881392Z",
     "iopub.status.idle": "2022-06-17T21:28:14.901309Z",
     "shell.execute_reply": "2022-06-17T21:28:14.899732Z"
    }
   },
   "outputs": [],
   "source": [
    "# Reconstructed and true energy axis\n",
    "energy_axis = MapAxis.from_edges(\n",
    "    np.logspace(-0.5, 1.0, 10), unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "energy_axis_true = MapAxis.from_edges(\n",
    "    np.logspace(-1.2, 2.0, 31), unit=\"TeV\", name=\"energy_true\", interp=\"log\"\n",
    ")\n",
    "\n",
    "geom = RegionGeom.create(\"galactic;circle(0, 0, 0.11)\", axes=[energy_axis])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5d1c911b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.908318Z",
     "iopub.status.busy": "2022-06-17T21:28:14.907617Z",
     "iopub.status.idle": "2022-06-17T21:28:14.915616Z",
     "shell.execute_reply": "2022-06-17T21:28:14.914331Z"
    }
   },
   "outputs": [],
   "source": [
    "# Pointing position\n",
    "pointing = SkyCoord(0.5, 0.5, unit=\"deg\", frame=\"galactic\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c7d0614",
   "metadata": {},
   "source": [
    "Note that observations are usually conducted in  Wobble mode, in which the source is not in the center of the camera. This allows to have a symmetrical sky position from which background can be estimated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c82ee57b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.922218Z",
     "iopub.status.busy": "2022-06-17T21:28:14.921127Z",
     "iopub.status.idle": "2022-06-17T21:28:14.967003Z",
     "shell.execute_reply": "2022-06-17T21:28:14.965394Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: overflow encountered in exp\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n",
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: invalid value encountered in subtract\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Define the source model: A combination of spectral and temporal model\n",
    "\n",
    "gti_t0 = Time(\"2020-03-01\")\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=3, amplitude=\"1e-11 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "temporal_model = ExpDecayTemporalModel(t0=\"6 h\", t_ref=gti_t0.mjd * u.d)\n",
    "\n",
    "model_simu = SkyModel(\n",
    "    spectral_model=spectral_model,\n",
    "    temporal_model=temporal_model,\n",
    "    name=\"model-simu\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1154058f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:14.973160Z",
     "iopub.status.busy": "2022-06-17T21:28:14.972042Z",
     "iopub.status.idle": "2022-06-17T21:28:14.994798Z",
     "shell.execute_reply": "2022-06-17T21:28:14.993696Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5367808592\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>is_norm</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>int64</th><th>float64</th><th>float64</th><th>bool</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>index</td><td>3.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>1.0000e-11</td><td>cm-2 s-1 TeV-1</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t0</td><td>6.0000e+00</td><td>h</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t_ref</td><td>5.8909e+04</td><td>d</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "  type      name     value         unit        error     min     max   frozen is_norm link\n",
       "  str8      str9    float64       str14        int64   float64 float64  bool    bool  str1\n",
       "-------- --------- ---------- -------------- --------- ------- ------- ------ ------- ----\n",
       "spectral     index 3.0000e+00                0.000e+00     nan     nan  False   False     \n",
       "spectral amplitude 1.0000e-11 cm-2 s-1 TeV-1 0.000e+00     nan     nan  False    True     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True   False     \n",
       "temporal        t0 6.0000e+00              h 0.000e+00     nan     nan  False   False     \n",
       "temporal     t_ref 5.8909e+04              d 0.000e+00     nan     nan   True   False     "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Look at the model\n",
    "model_simu.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc68a829",
   "metadata": {},
   "source": [
    "Now, define the start and observation livetime wrt to the reference time, `gti_t0`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d9c453f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:15.000179Z",
     "iopub.status.busy": "2022-06-17T21:28:14.999416Z",
     "iopub.status.idle": "2022-06-17T21:28:15.009010Z",
     "shell.execute_reply": "2022-06-17T21:28:15.007319Z"
    }
   },
   "outputs": [],
   "source": [
    "n_obs = 10\n",
    "\n",
    "tstart = gti_t0 + [1, 2, 3, 5, 8, 10, 20, 22, 23, 24] * u.h\n",
    "lvtm = [55, 25, 26, 40, 40, 50, 40, 52, 43, 47] * u.min"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bea67428",
   "metadata": {},
   "source": [
    "Now perform the simulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7832be93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:15.014673Z",
     "iopub.status.busy": "2022-06-17T21:28:15.013653Z",
     "iopub.status.idle": "2022-06-17T21:28:22.858446Z",
     "shell.execute_reply": "2022-06-17T21:28:22.857129Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets = Datasets()\n",
    "\n",
    "empty = SpectrumDataset.create(\n",
    "    geom=geom, energy_axis_true=energy_axis_true, name=\"empty\"\n",
    ")\n",
    "\n",
    "maker = SpectrumDatasetMaker(selection=[\"exposure\", \"background\", \"edisp\"])\n",
    "\n",
    "\n",
    "for idx in range(n_obs):\n",
    "    obs = Observation.create(\n",
    "        pointing=pointing,\n",
    "        livetime=lvtm[idx],\n",
    "        tstart=tstart[idx],\n",
    "        irfs=irfs,\n",
    "        reference_time=gti_t0,\n",
    "        obs_id=idx,\n",
    "        location=observatory_locations[\"cta_south\"],\n",
    "    )\n",
    "    empty_i = empty.copy(name=f\"dataset-{idx}\")\n",
    "    dataset = maker.run(empty_i, obs)\n",
    "    dataset.models = model_simu\n",
    "    dataset.fake()\n",
    "    datasets.append(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6611a8e",
   "metadata": {},
   "source": [
    "The reduced datasets have been successfully simulated. Let's take a quick look into our datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9c94d2e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:22.864833Z",
     "iopub.status.busy": "2022-06-17T21:28:22.864097Z",
     "iopub.status.idle": "2022-06-17T21:28:23.054255Z",
     "shell.execute_reply": "2022-06-17T21:28:23.053120Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=10</i>\n",
       "<table id=\"table5372409552\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>counts</th><th>excess</th><th>sqrt_ts</th><th>background</th><th>npred</th><th>npred_background</th><th>npred_signal</th><th>exposure_min</th><th>exposure_max</th><th>livetime</th><th>ontime</th><th>counts_rate</th><th>background_rate</th><th>excess_rate</th><th>n_bins</th><th>n_fit_bins</th><th>stat_type</th><th>stat_sum</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>m2 s</th><th>m2 s</th><th>s</th><th>s</th><th>1 / s</th><th>1 / s</th><th>1 / s</th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>int64</th><th>str4</th><th>float64</th></tr></thead>\n",
       "<tr><td>dataset-0</td><td>829</td><td>808.6812133789062</td><td>67.31731458104936</td><td>20.318769454956055</td><td>20.318769469857216</td><td>20.318769454956055</td><td>nan</td><td>216137904.0</td><td>16025275392.0</td><td>3299.9999999999973</td><td>3300.0</td><td>0.25121212121212144</td><td>0.006157202865138204</td><td>0.24505491314512332</td><td>9</td><td>9</td><td>cash</td><td>nan</td></tr>\n",
       "<tr><td>dataset-1</td><td>330</td><td>320.7641959176923</td><td>41.4564216021322</td><td>9.235804082307682</td><td>332.1496126848936</td><td>9.235804082307682</td><td>322.91380860258596</td><td>98244500.93556362</td><td>7284216297.312286</td><td>1500.0000000000036</td><td>1500.0000000000036</td><td>0.21999999999999947</td><td>0.00615720272153844</td><td>0.213842797278461</td><td>9</td><td>9</td><td>cash</td><td>-2053.5263391934623</td></tr>\n",
       "<tr><td>dataset-2</td><td>320</td><td>310.3947637544</td><td>40.28720068338956</td><td>9.60523624559999</td><td>293.48960245451894</td><td>9.60523624559999</td><td>283.884366208919</td><td>102174280.97298616</td><td>7575584949.204778</td><td>1560.0000000000036</td><td>1560.0000000000036</td><td>0.20512820512820465</td><td>0.006157202721538441</td><td>0.1989710024066662</td><td>9</td><td>9</td><td>cash</td><td>-1995.2213487608487</td></tr>\n",
       "<tr><td>dataset-3</td><td>320</td><td>305.22271346830775</td><td>36.847002227816574</td><td>14.777286531692258</td><td>321.7838592189118</td><td>14.777286531692258</td><td>307.00657268721955</td><td>157191201.49690142</td><td>11654746075.69963</td><td>2400.0</td><td>2400.0</td><td>0.13333333333333333</td><td>0.006157202721538441</td><td>0.1271761306117949</td><td>9</td><td>9</td><td>cash</td><td>-1950.1409750273895</td></tr>\n",
       "<tr><td>dataset-4</td><td>213</td><td>198.22271346830775</td><td>27.20676640833841</td><td>14.777286531692258</td><td>200.9861855997861</td><td>14.777286531692258</td><td>186.2088990680938</td><td>157191201.49690142</td><td>11654746075.69963</td><td>2400.0</td><td>2400.0</td><td>0.08875</td><td>0.006157202721538441</td><td>0.08259279727846155</td><td>9</td><td>9</td><td>cash</td><td>-1137.4784918388684</td></tr>\n",
       "<tr><td>dataset-5</td><td>190</td><td>171.52839183538467</td><td>23.294701482664998</td><td>18.471608164615322</td><td>182.99944247949256</td><td>18.471608164615322</td><td>164.5278343148772</td><td>196489001.87112677</td><td>14568432594.624538</td><td>3000.0</td><td>3000.0</td><td>0.06333333333333334</td><td>0.006157202721538441</td><td>0.05717613061179489</td><td>9</td><td>9</td><td>cash</td><td>-1016.7012114582753</td></tr>\n",
       "<tr><td>dataset-6</td><td>38</td><td>23.22271346830774</td><td>5.033505913945236</td><td>14.777286531692258</td><td>39.977920628250665</td><td>14.777286531692258</td><td>25.20063409655841</td><td>157191201.49690142</td><td>11654746075.69963</td><td>2400.0</td><td>2400.0</td><td>0.015833333333333335</td><td>0.006157202721538441</td><td>0.009676130611794892</td><td>9</td><td>9</td><td>cash</td><td>-64.33017421792906</td></tr>\n",
       "<tr><td>dataset-7</td><td>51</td><td>31.789527508800063</td><td>6.00089086025525</td><td>19.210472491199937</td><td>42.30482855222412</td><td>19.210472491199937</td><td>23.094356061024193</td><td>204348561.94597185</td><td>15151169898.40952</td><td>3120.0</td><td>3120.0</td><td>0.016346153846153847</td><td>0.0061572027215384415</td><td>0.010188951124615405</td><td>9</td><td>9</td><td>cash</td><td>-137.61176114657297</td></tr>\n",
       "<tr><td>dataset-8</td><td>31</td><td>15.114416978430823</td><td>3.350049342927064</td><td>15.885583021569177</td><td>32.249900287793274</td><td>15.885583021569177</td><td>16.36431726622409</td><td>168980541.609169</td><td>12528852031.377102</td><td>2580.0</td><td>2580.0</td><td>0.012015503875968992</td><td>0.006157202721538441</td><td>0.0058583011544305515</td><td>9</td><td>9</td><td>cash</td><td>-53.98618916042473</td></tr>\n",
       "<tr><td>dataset-9</td><td>39</td><td>21.6366883252616</td><td>4.45470472668954</td><td>17.3633116747384</td><td>32.421834962248106</td><td>17.3633116747384</td><td>15.05852328750971</td><td>184699661.75885916</td><td>13694326638.947065</td><td>2820.0</td><td>2820.0</td><td>0.013829787234042552</td><td>0.006157202721538441</td><td>0.007672584512504113</td><td>9</td><td>9</td><td>cash</td><td>-84.26051818568244</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=10>\n",
       "   name   counts       excess            sqrt_ts           background     ...      excess_rate      n_bins n_fit_bins stat_type       stat_sum     \n",
       "                                                                          ...         1 / s                                                        \n",
       "   str9   int64       float64            float64            float64       ...        float64        int64    int64       str4         float64      \n",
       "--------- ------ ------------------ ------------------ ------------------ ... --------------------- ------ ---------- --------- -------------------\n",
       "dataset-0    829  808.6812133789062  67.31731458104936 20.318769454956055 ...   0.24505491314512332      9          9      cash                 nan\n",
       "dataset-1    330  320.7641959176923   41.4564216021322  9.235804082307682 ...     0.213842797278461      9          9      cash -2053.5263391934623\n",
       "dataset-2    320     310.3947637544  40.28720068338956   9.60523624559999 ...    0.1989710024066662      9          9      cash -1995.2213487608487\n",
       "dataset-3    320 305.22271346830775 36.847002227816574 14.777286531692258 ...    0.1271761306117949      9          9      cash -1950.1409750273895\n",
       "dataset-4    213 198.22271346830775  27.20676640833841 14.777286531692258 ...   0.08259279727846155      9          9      cash -1137.4784918388684\n",
       "dataset-5    190 171.52839183538467 23.294701482664998 18.471608164615322 ...   0.05717613061179489      9          9      cash -1016.7012114582753\n",
       "dataset-6     38  23.22271346830774  5.033505913945236 14.777286531692258 ...  0.009676130611794892      9          9      cash  -64.33017421792906\n",
       "dataset-7     51 31.789527508800063   6.00089086025525 19.210472491199937 ...  0.010188951124615405      9          9      cash -137.61176114657297\n",
       "dataset-8     31 15.114416978430823  3.350049342927064 15.885583021569177 ... 0.0058583011544305515      9          9      cash  -53.98618916042473\n",
       "dataset-9     39   21.6366883252616   4.45470472668954   17.3633116747384 ...  0.007672584512504113      9          9      cash  -84.26051818568244"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets.info_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9815e50f",
   "metadata": {},
   "source": [
    "## Extract the lightcurve\n",
    "\n",
    "This section uses standard light curve estimation tools for a 1D extraction. Only a spectral model needs to be defined in this case. Since the estimator returns the integrated flux separately for each time bin, the temporal model need not be accounted for at this stage. We extract the lightcurve in 3 energy binsç"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "207f8cb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:23.059969Z",
     "iopub.status.busy": "2022-06-17T21:28:23.059159Z",
     "iopub.status.idle": "2022-06-17T21:28:23.078110Z",
     "shell.execute_reply": "2022-06-17T21:28:23.075584Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define the model:\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=3, amplitude=\"1e-11 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "model_fit = SkyModel(spectral_model=spectral_model, name=\"model-fit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ff16ec0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:23.083249Z",
     "iopub.status.busy": "2022-06-17T21:28:23.082322Z",
     "iopub.status.idle": "2022-06-17T21:28:23.090622Z",
     "shell.execute_reply": "2022-06-17T21:28:23.089605Z"
    }
   },
   "outputs": [],
   "source": [
    "# Attach model to all datasets\n",
    "datasets.models = model_fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "de110489",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:23.096173Z",
     "iopub.status.busy": "2022-06-17T21:28:23.095418Z",
     "iopub.status.idle": "2022-06-17T21:28:53.251834Z",
     "shell.execute_reply": "2022-06-17T21:28:53.244254Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 26.1 s, sys: 238 ms, total: 26.3 s\n",
      "Wall time: 30.1 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "lc_maker_1d = LightCurveEstimator(\n",
    "    energy_edges=[0.3, 0.6, 1.0, 10] * u.TeV,\n",
    "    source=\"model-fit\",\n",
    "    selection_optional=[\"ul\"],\n",
    ")\n",
    "lc_1d = lc_maker_1d.run(datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a5aee53c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:53.264767Z",
     "iopub.status.busy": "2022-06-17T21:28:53.259960Z",
     "iopub.status.idle": "2022-06-17T21:28:55.289248Z",
     "shell.execute_reply": "2022-06-17T21:28:55.288018Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = lc_1d.plot(marker=\"o\", axis_name=\"time\", sed_type=\"flux\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a82fae46",
   "metadata": {},
   "source": [
    "## Fitting temporal models\n",
    "We have the reconstructed lightcurve at this point. Now we want to fit a profile to the obtained light curves, using a joint fitting across the different datasets, while simultaneously minimising across the temporal model parameters as well. The temporal models can be applied \n",
    "\n",
    "- directly on the obtained lightcurve\n",
    "- on the simulated datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91e87524",
   "metadata": {},
   "source": [
    "### Fitting the obtained light curve\n",
    "\n",
    "The fitting will proceed through a joint fit of the flux points. First, we need to obtain a set of `FluxPointDatasets`, one for each time bin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c8ebf08e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:55.296581Z",
     "iopub.status.busy": "2022-06-17T21:28:55.295560Z",
     "iopub.status.idle": "2022-06-17T21:28:56.321461Z",
     "shell.execute_reply": "2022-06-17T21:28:56.320389Z"
    }
   },
   "outputs": [],
   "source": [
    "## Create the datasets by iterating over the returned lightcurve\n",
    "datasets = Datasets()\n",
    "\n",
    "for idx, fp in enumerate(lc_1d.iter_by_axis(axis_name=\"time\")):\n",
    "    dataset = FluxPointsDataset(data=fp, name=f\"time-bin-{idx}\")\n",
    "    datasets.append(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe9e4d13",
   "metadata": {},
   "source": [
    "We will fit the amplitude, spectral index and the decay time scale. Note that `t_ref` should be fixed by default for the `ExpDecayTemporalModel`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa124578",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:56.331934Z",
     "iopub.status.busy": "2022-06-17T21:28:56.330227Z",
     "iopub.status.idle": "2022-06-17T21:28:56.377164Z",
     "shell.execute_reply": "2022-06-17T21:28:56.375584Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: overflow encountered in exp\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n",
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: invalid value encountered in subtract\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Define the model:\n",
    "spectral_model1 = PowerLawSpectralModel(\n",
    "    index=2.0, amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "temporal_model1 = ExpDecayTemporalModel(t0=\"10 h\", t_ref=gti_t0.mjd * u.d)\n",
    "\n",
    "model = SkyModel(\n",
    "    spectral_model=spectral_model1,\n",
    "    temporal_model=temporal_model1,\n",
    "    name=\"model-test\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f3c3e945",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:56.383871Z",
     "iopub.status.busy": "2022-06-17T21:28:56.382966Z",
     "iopub.status.idle": "2022-06-17T21:28:56.393455Z",
     "shell.execute_reply": "2022-06-17T21:28:56.392118Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets.models = model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "28f3a62c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:28:56.398993Z",
     "iopub.status.busy": "2022-06-17T21:28:56.398526Z",
     "iopub.status.idle": "2022-06-17T21:29:29.877970Z",
     "shell.execute_reply": "2022-06-17T21:29:29.876519Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 25.4 s, sys: 239 ms, total: 25.6 s\n",
      "Wall time: 33.5 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: overflow encountered in exp\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n",
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: invalid value encountered in subtract\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Do a joint fit\n",
    "fit = Fit()\n",
    "result = fit.run(datasets=datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6170b6d9",
   "metadata": {},
   "source": [
    "Now let's plot model and data. We plot only the normalisation of the temporal model in relative units for one particular energy range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "da30ee2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:29.884505Z",
     "iopub.status.busy": "2022-06-17T21:29:29.883615Z",
     "iopub.status.idle": "2022-06-17T21:29:30.369202Z",
     "shell.execute_reply": "2022-06-17T21:29:30.368123Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Simulate and fit a time decaying light curve of a source using the CTA 1DC response."
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x143f0b700>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc_1TeV_10TeV = lc_1d.slice_by_idx({\"energy\": slice(2, 3)})\n",
    "ax = lc_1TeV_10TeV.plot(sed_type=\"norm\", axis_name=\"time\")\n",
    "\n",
    "time_range = lc_1TeV_10TeV.geom.axes[\"time\"].time_bounds\n",
    "temporal_model1.plot(ax=ax, time_range=time_range, label=\"Best fit model\")\n",
    "\n",
    "ax.set_yscale(\"linear\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a959c6c",
   "metadata": {},
   "source": [
    "### Fit the datasets\n",
    "\n",
    "Here, we apply the models directly to the simulated datasets.\n",
    "\n",
    "For modelling and fitting more complex flares, you should attach the relevant model to each group of `datasets`. The parameters of a model in a given group of dataset will be tied. For more details on joint fitting in gammapy, see [here](../2D/modeling_2D.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "205d016b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:30.374480Z",
     "iopub.status.busy": "2022-06-17T21:29:30.373790Z",
     "iopub.status.idle": "2022-06-17T21:29:30.400126Z",
     "shell.execute_reply": "2022-06-17T21:29:30.399004Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: overflow encountered in exp\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n",
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: invalid value encountered in subtract\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Define the model:\n",
    "spectral_model2 = PowerLawSpectralModel(\n",
    "    index=2.0, amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"1 TeV\"\n",
    ")\n",
    "temporal_model2 = ExpDecayTemporalModel(t0=\"10 h\", t_ref=gti_t0.mjd * u.d)\n",
    "\n",
    "model2 = SkyModel(\n",
    "    spectral_model=spectral_model2,\n",
    "    temporal_model=temporal_model2,\n",
    "    name=\"model-test2\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9db21cec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:30.405711Z",
     "iopub.status.busy": "2022-06-17T21:29:30.404725Z",
     "iopub.status.idle": "2022-06-17T21:29:30.419353Z",
     "shell.execute_reply": "2022-06-17T21:29:30.418185Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5435033728\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>is_norm</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>int64</th><th>float64</th><th>float64</th><th>bool</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>index</td><td>2.0000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>1.0000e-12</td><td>cm-2 s-1 TeV-1</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t0</td><td>1.0000e+01</td><td>h</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t_ref</td><td>5.8909e+04</td><td>d</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "  type      name     value         unit        error     min     max   frozen is_norm link\n",
       "  str8      str9    float64       str14        int64   float64 float64  bool    bool  str1\n",
       "-------- --------- ---------- -------------- --------- ------- ------- ------ ------- ----\n",
       "spectral     index 2.0000e+00                0.000e+00     nan     nan  False   False     \n",
       "spectral amplitude 1.0000e-12 cm-2 s-1 TeV-1 0.000e+00     nan     nan  False    True     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True   False     \n",
       "temporal        t0 1.0000e+01              h 0.000e+00     nan     nan  False   False     \n",
       "temporal     t_ref 5.8909e+04              d 0.000e+00     nan     nan   True   False     "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.parameters.to_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aed8ef42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:30.424491Z",
     "iopub.status.busy": "2022-06-17T21:29:30.423796Z",
     "iopub.status.idle": "2022-06-17T21:29:30.433821Z",
     "shell.execute_reply": "2022-06-17T21:29:30.432639Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets.models = model2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d07b2bf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:30.439669Z",
     "iopub.status.busy": "2022-06-17T21:29:30.438943Z",
     "iopub.status.idle": "2022-06-17T21:29:53.631670Z",
     "shell.execute_reply": "2022-06-17T21:29:53.630413Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 21.5 s, sys: 82.6 ms, total: 21.5 s\n",
      "Wall time: 23.2 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: overflow encountered in exp\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n",
      "/Users/terrier/Code/anaconda3/envs/gammapy-dev/lib/python3.8/site-packages/astropy/units/quantity.py:613: RuntimeWarning: invalid value encountered in subtract\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Do a joint fit\n",
    "fit = Fit()\n",
    "result = fit.run(datasets=datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0444edd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:29:53.637546Z",
     "iopub.status.busy": "2022-06-17T21:29:53.636935Z",
     "iopub.status.idle": "2022-06-17T21:29:53.654636Z",
     "shell.execute_reply": "2022-06-17T21:29:53.653331Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=5</i>\n",
       "<table id=\"table5435174432\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>is_norm</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>index</td><td>3.0232e+00</td><td></td><td>2.741e-02</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>9.8974e-12</td><td>cm-2 s-1 TeV-1</td><td>3.288e-13</td><td>nan</td><td>nan</td><td>False</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t0</td><td>6.1551e+00</td><td>h</td><td>2.199e-01</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>temporal</td><td>t_ref</td><td>5.8909e+04</td><td>d</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=5>\n",
       "  type      name     value         unit        error     min     max   frozen is_norm link\n",
       "  str8      str9    float64       str14       float64  float64 float64  bool    bool  str1\n",
       "-------- --------- ---------- -------------- --------- ------- ------- ------ ------- ----\n",
       "spectral     index 3.0232e+00                2.741e-02     nan     nan  False   False     \n",
       "spectral amplitude 9.8974e-12 cm-2 s-1 TeV-1 3.288e-13     nan     nan  False    True     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00     nan     nan   True   False     \n",
       "temporal        t0 6.1551e+00              h 2.199e-01     nan     nan  False   False     \n",
       "temporal     t_ref 5.8909e+04              d 0.000e+00     nan     nan   True   False     "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6bcdafc",
   "metadata": {},
   "source": [
    "We see that the fitted parameters are consistent between fitting flux points and datasets, and match well with the simulated ones"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e27739b",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "1. Re-do the analysis with `MapDataset` instead of `SpectralDataset`\n",
    "2. Model the flare of PKS 2155-304 which you obtained using the [light curve flare tutorial](light_curve_flare.ipynb). Use a combination of a Gaussian and Exponential flare profiles, and fit using `scipy.optimize.curve_fit`\n",
    "3. Do a joint fitting of the datasets."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
