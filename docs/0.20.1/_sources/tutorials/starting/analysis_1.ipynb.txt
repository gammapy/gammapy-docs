{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9af4a71a",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20.1?urlpath=lab/tree/tutorials/starting/analysis_1.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../_downloads/notebooks-0.20.1.tar).\n",
    "- **Source files:**\n",
    "[analysis_1.ipynb](../../_static/notebooks/analysis_1.ipynb) |\n",
    "[analysis_1.py](../../_static/notebooks/analysis_1.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b5bd296",
   "metadata": {},
   "source": [
    "# High level interface\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Understanding the gammapy data workflow, in particular what are DL3 events and instrument response functions (IRF).\n",
    "\n",
    "## Context\n",
    "\n",
    "This notebook is an introduction to gammapy analysis using the high level interface. \n",
    "\n",
    "Gammapy analysis consists in two main steps. \n",
    "\n",
    "The first one is data reduction: user selected observations  are reduced to a geometry defined by the user. \n",
    "It can be 1D (spectrum from a given extraction region) or 3D (with a sky projection and an energy axis). \n",
    "The resulting reduced data and instrument response functions (IRF) are called datasets in Gammapy.\n",
    "\n",
    "The second step consists in setting a physical model on the datasets and fitting it to obtain relevant physical information.\n",
    "\n",
    "\n",
    "**Objective: Create a 3D dataset of the Crab using the H.E.S.S. DL3 data release 1 and perform a simple model fitting of the Crab nebula.**\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "This notebook uses the high level `Analysis` class to orchestrate data reduction. In its current state, `Analysis` supports the standard analysis cases of joint or stacked 3D and 1D analyses. It is instantiated with an `AnalysisConfig` object that gives access to analysis parameters either directly or via a YAML config file. \n",
    "\n",
    "To see what is happening under-the-hood and to get an idea of the internal API, a second notebook performs the same analysis without using the `Analysis` class. \n",
    "\n",
    "In summary, we have to:\n",
    "\n",
    "- Create an `~gammapy.analysis.AnalysisConfig` object and edit it to define the analysis configuration:\n",
    "    - Define what observations to use\n",
    "    - Define the geometry of the dataset (data and IRFs)\n",
    "    - Define the model we want to fit on the dataset.\n",
    "- Instantiate a `~gammapy.analysis.Analysis` from this configuration and run the different analysis steps\n",
    "    - Observation selection\n",
    "    - Data reduction\n",
    "    - Model fitting\n",
    "    - Estimating flux points\n",
    "\n",
    "Finally we will compare the results against a reference model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb4c3bc",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e5d680bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:10.387695Z",
     "iopub.status.busy": "2022-06-17T21:36:10.387056Z",
     "iopub.status.idle": "2022-06-17T21:36:11.852746Z",
     "shell.execute_reply": "2022-06-17T21:36:11.851735Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "adb83ccc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:11.857929Z",
     "iopub.status.busy": "2022-06-17T21:36:11.857258Z",
     "iopub.status.idle": "2022-06-17T21:36:14.992413Z",
     "shell.execute_reply": "2022-06-17T21:36:14.991302Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from astropy import units as u\n",
    "from gammapy.analysis import Analysis, AnalysisConfig\n",
    "from gammapy.modeling.models import create_crab_spectral_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cbb05f9",
   "metadata": {},
   "source": [
    "## Analysis configuration\n",
    "\n",
    "For configuration of the analysis we use the [YAML](https://en.wikipedia.org/wiki/YAML) data format. YAML is a machine readable serialisation format, that is also friendly for humans to read. In this tutorial we will write the configuration file just using Python strings, but of course the file can be created and modified with any text editor of your choice.\n",
    "\n",
    "Here is what the configuration for our analysis looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8ad8ec7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:14.997190Z",
     "iopub.status.busy": "2022-06-17T21:36:14.996927Z",
     "iopub.status.idle": "2022-06-17T21:36:15.014525Z",
     "shell.execute_reply": "2022-06-17T21:36:15.013448Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "        n_jobs: 1\n",
      "        datasets_file: null\n",
      "        models_file: null\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: null, lon: null, lat: null, radius: null}\n",
      "        obs_time: {start: null, stop: null}\n",
      "        required_irf: [aeff, edisp, psf, bkg]\n",
      "    datasets:\n",
      "        type: 1d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: null, lon: null, lat: null}\n",
      "                binsize: 0.02 deg\n",
      "                width: {width: 5.0 deg, height: 5.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 5}\n",
      "                energy_true: {min: 0.5 TeV, max: 20.0 TeV, nbins: 16}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: null\n",
      "            exclusion: null\n",
      "            parameters: {}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: null, max: null}\n",
      "    flux_points:\n",
      "        energy: {min: null, max: null, nbins: null}\n",
      "        source: source\n",
      "        parameters: {selection_optional: all}\n",
      "    excess_map:\n",
      "        correlation_radius: 0.1 deg\n",
      "        parameters: {}\n",
      "        energy_edges: {min: null, max: null, nbins: null}\n",
      "    light_curve:\n",
      "        time_intervals: {start: null, stop: null}\n",
      "        energy_edges: {min: null, max: null, nbins: null}\n",
      "        source: source\n",
      "        parameters: {selection_optional: all}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig()\n",
    "# the AnalysisConfig gives access to the various parameters used from logging to reduced dataset geometries\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdf542ee",
   "metadata": {},
   "source": [
    "### Setting the data to use"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10b96a41",
   "metadata": {},
   "source": [
    "We want to use Crab runs from the H.E.S.S. DL3-DR1. We define here the datastore and a cone search of observations pointing with 5 degrees of the Crab nebula. Parameters can be set directly or as a python dict.\n",
    "\n",
    "PS: do not forget to setup your environment variable _$GAMMAPY\\_DATA_ to your local directory containing the H.E.S.S. DL3-DR1 as described in [getting started](../../getting-started/index.rst#quickstart-setup)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb2fe2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.019417Z",
     "iopub.status.busy": "2022-06-17T21:36:15.019128Z",
     "iopub.status.idle": "2022-06-17T21:36:15.026198Z",
     "shell.execute_reply": "2022-06-17T21:36:15.025338Z"
    }
   },
   "outputs": [],
   "source": [
    "# We define the datastore containing the data\n",
    "config.observations.datastore = \"$GAMMAPY_DATA/hess-dl3-dr1\"\n",
    "\n",
    "# We define the cone search parameters\n",
    "config.observations.obs_cone.frame = \"icrs\"\n",
    "config.observations.obs_cone.lon = \"83.633 deg\"\n",
    "config.observations.obs_cone.lat = \"22.014 deg\"\n",
    "config.observations.obs_cone.radius = \"5 deg\"\n",
    "\n",
    "# Equivalently we could have set parameters with a python dict\n",
    "# config.observations.obs_cone = {\"frame\": \"icrs\", \"lon\": \"83.633 deg\", \"lat\": \"22.014 deg\", \"radius\": \"5 deg\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f03686",
   "metadata": {},
   "source": [
    "### Setting the reduced datasets geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e77fef39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.030809Z",
     "iopub.status.busy": "2022-06-17T21:36:15.030275Z",
     "iopub.status.idle": "2022-06-17T21:36:15.042332Z",
     "shell.execute_reply": "2022-06-17T21:36:15.041089Z"
    }
   },
   "outputs": [],
   "source": [
    "# We want to perform a 3D analysis\n",
    "config.datasets.type = \"3d\"\n",
    "# We want to stack the data into a single reduced dataset\n",
    "config.datasets.stack = True\n",
    "\n",
    "# We fix the WCS geometry of the datasets\n",
    "config.datasets.geom.wcs.skydir = {\n",
    "    \"lon\": \"83.633 deg\",\n",
    "    \"lat\": \"22.014 deg\",\n",
    "    \"frame\": \"icrs\",\n",
    "}\n",
    "config.datasets.geom.wcs.width = {\"width\": \"2 deg\", \"height\": \"2 deg\"}\n",
    "config.datasets.geom.wcs.binsize = \"0.02 deg\"\n",
    "\n",
    "# We now fix the energy axis for the counts map\n",
    "config.datasets.geom.axes.energy.min = \"1 TeV\"\n",
    "config.datasets.geom.axes.energy.max = \"10 TeV\"\n",
    "config.datasets.geom.axes.energy.nbins = 10\n",
    "\n",
    "# We now fix the energy axis for the IRF maps (exposure, etc)\n",
    "config.datasets.geom.axes.energy_true.min = \"0.5 TeV\"\n",
    "config.datasets.geom.axes.energy_true.max = \"20 TeV\"\n",
    "config.datasets.geom.axes.energy_true.nbins = 20"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d2e25af",
   "metadata": {},
   "source": [
    "### Setting the background normalization maker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "95e6bc03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.046707Z",
     "iopub.status.busy": "2022-06-17T21:36:15.046406Z",
     "iopub.status.idle": "2022-06-17T21:36:15.051775Z",
     "shell.execute_reply": "2022-06-17T21:36:15.050624Z"
    }
   },
   "outputs": [],
   "source": [
    "config.datasets.background.method = \"fov_background\"\n",
    "config.datasets.background.parameters = {\"method\": \"scale\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "450453a7",
   "metadata": {},
   "source": [
    "### Setting the exclusion mask"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b610dd9",
   "metadata": {},
   "source": [
    "In order to properly adjust the background normalisation on regions without gamma-ray signal, one needs to define an exclusion mask for the background normalisation.\n",
    "For this tutorial, we use the following one ``$GAMMAPY_DATA/joint-crab/exclusion/exclusion_mask_crab.fits.gz``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c30184e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.055700Z",
     "iopub.status.busy": "2022-06-17T21:36:15.055366Z",
     "iopub.status.idle": "2022-06-17T21:36:15.059752Z",
     "shell.execute_reply": "2022-06-17T21:36:15.058652Z"
    }
   },
   "outputs": [],
   "source": [
    "config.datasets.background.exclusion = (\n",
    "    \"$GAMMAPY_DATA/joint-crab/exclusion/exclusion_mask_crab.fits.gz\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f894cdbc",
   "metadata": {},
   "source": [
    "### Setting modeling and fitting parameters\n",
    "`Analysis` can perform a few modeling and fitting tasks besides data reduction. Parameters have then to be passed to the configuration object.\n",
    "\n",
    "Here we define the energy range on which to perform the fit. We also set the energy edges used for flux point computation as well as the correlation radius to compute excess and significance maps. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f92b315e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.064047Z",
     "iopub.status.busy": "2022-06-17T21:36:15.063751Z",
     "iopub.status.idle": "2022-06-17T21:36:15.072646Z",
     "shell.execute_reply": "2022-06-17T21:36:15.071644Z"
    }
   },
   "outputs": [],
   "source": [
    "config.fit.fit_range.min = 1 * u.TeV\n",
    "config.fit.fit_range.max = 10 * u.TeV\n",
    "config.flux_points.energy = {\"min\": \"1 TeV\", \"max\": \"10 TeV\", \"nbins\": 4}\n",
    "config.excess_map.correlation_radius = 0.1 * u.deg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ef442bf",
   "metadata": {},
   "source": [
    "We're all set. \n",
    "But before we go on let's see how to save or import `AnalysisConfig` objects though YAML files."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "565f6f84",
   "metadata": {},
   "source": [
    "### Using YAML configuration files\n",
    "\n",
    "One can export/import the `AnalysisConfig` to/from a YAML file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "16a07ce5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.077396Z",
     "iopub.status.busy": "2022-06-17T21:36:15.077095Z",
     "iopub.status.idle": "2022-06-17T21:36:15.103722Z",
     "shell.execute_reply": "2022-06-17T21:36:15.102728Z"
    }
   },
   "outputs": [],
   "source": [
    "config.write(\"config.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b674b352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.107947Z",
     "iopub.status.busy": "2022-06-17T21:36:15.107667Z",
     "iopub.status.idle": "2022-06-17T21:36:15.155102Z",
     "shell.execute_reply": "2022-06-17T21:36:15.154063Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnalysisConfig\n",
      "\n",
      "    general:\n",
      "        log: {level: info, filename: null, filemode: null, format: null, datefmt: null}\n",
      "        outdir: .\n",
      "        n_jobs: 1\n",
      "        datasets_file: null\n",
      "        models_file: null\n",
      "    observations:\n",
      "        datastore: $GAMMAPY_DATA/hess-dl3-dr1\n",
      "        obs_ids: []\n",
      "        obs_file: null\n",
      "        obs_cone: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg, radius: 5.0 deg}\n",
      "        obs_time: {start: null, stop: null}\n",
      "        required_irf: [aeff, edisp, psf, bkg]\n",
      "    datasets:\n",
      "        type: 3d\n",
      "        stack: true\n",
      "        geom:\n",
      "            wcs:\n",
      "                skydir: {frame: icrs, lon: 83.633 deg, lat: 22.014 deg}\n",
      "                binsize: 0.02 deg\n",
      "                width: {width: 2.0 deg, height: 2.0 deg}\n",
      "                binsize_irf: 0.2 deg\n",
      "            selection: {offset_max: 2.5 deg}\n",
      "            axes:\n",
      "                energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 10}\n",
      "                energy_true: {min: 0.5 TeV, max: 20.0 TeV, nbins: 20}\n",
      "        map_selection: [counts, exposure, background, psf, edisp]\n",
      "        background:\n",
      "            method: fov_background\n",
      "            exclusion: $GAMMAPY_DATA/joint-crab/exclusion/exclusion_mask_crab.fits.gz\n",
      "            parameters: {method: scale}\n",
      "        safe_mask:\n",
      "            methods: [aeff-default]\n",
      "            parameters: {}\n",
      "        on_region: {frame: null, lon: null, lat: null, radius: null}\n",
      "        containment_correction: true\n",
      "    fit:\n",
      "        fit_range: {min: 1.0 TeV, max: 10.0 TeV}\n",
      "    flux_points:\n",
      "        energy: {min: 1.0 TeV, max: 10.0 TeV, nbins: 4}\n",
      "        source: source\n",
      "        parameters: {selection_optional: all}\n",
      "    excess_map:\n",
      "        correlation_radius: 0.1 deg\n",
      "        parameters: {}\n",
      "        energy_edges: {min: null, max: null, nbins: null}\n",
      "    light_curve:\n",
      "        time_intervals: {start: null, stop: null}\n",
      "        energy_edges: {min: null, max: null, nbins: null}\n",
      "        source: source\n",
      "        parameters: {selection_optional: all}\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "config = AnalysisConfig.read(\"config.yaml\")\n",
    "print(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51f9ee2d",
   "metadata": {},
   "source": [
    "## Running the analysis\n",
    "\n",
    "We first create an `~gammapy.analysis.Analysis` object from our configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "daca8a28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.161279Z",
     "iopub.status.busy": "2022-06-17T21:36:15.160942Z",
     "iopub.status.idle": "2022-06-17T21:36:15.174023Z",
     "shell.execute_reply": "2022-06-17T21:36:15.172984Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting logging config: {'level': 'INFO', 'filename': None, 'filemode': None, 'format': None, 'datefmt': None}\n"
     ]
    }
   ],
   "source": [
    "analysis = Analysis(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3d9308b",
   "metadata": {},
   "source": [
    "###  Observation selection\n",
    "\n",
    "We can directly select and load the observations from disk using `~gammapy.analysis.Analysis.get_observations()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a49f5bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.179705Z",
     "iopub.status.busy": "2022-06-17T21:36:15.179316Z",
     "iopub.status.idle": "2022-06-17T21:36:15.392936Z",
     "shell.execute_reply": "2022-06-17T21:36:15.391727Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fetching observations.\n",
      "Observations selected: 4 out of 4.\n",
      "Number of selected observations: 4\n"
     ]
    }
   ],
   "source": [
    "analysis.get_observations()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53bdf7f6",
   "metadata": {},
   "source": [
    "The observations are now available on the `Analysis` object. The selection corresponds to the following ids:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d9a6a9e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.399563Z",
     "iopub.status.busy": "2022-06-17T21:36:15.398940Z",
     "iopub.status.idle": "2022-06-17T21:36:15.410301Z",
     "shell.execute_reply": "2022-06-17T21:36:15.409315Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['23523', '23526', '23559', '23592']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analysis.observations.ids"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4c14ba7",
   "metadata": {},
   "source": [
    "To see how to explore observations, please refer to the following notebook: [CTA with Gammapy](../data/cta.ipynb) or  [HESS with Gammapy](../data/hess.ipynb) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "406c9111",
   "metadata": {},
   "source": [
    "## Data reduction\n",
    "\n",
    "Now we proceed to the data reduction. In the config file we have chosen a WCS map geometry, energy axis and decided to stack the maps. We can run the reduction using `.get_datasets()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9297d93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:15.415134Z",
     "iopub.status.busy": "2022-06-17T21:36:15.414829Z",
     "iopub.status.idle": "2022-06-17T21:36:23.312972Z",
     "shell.execute_reply": "2022-06-17T21:36:23.311660Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating reference dataset and makers.\n",
      "Creating the background Maker.\n",
      "Start the data reduction loop.\n",
      "Computing dataset for observation 23523\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Running FoVBackgroundMaker\n",
      "Computing dataset for observation 23526\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Running FoVBackgroundMaker\n",
      "Computing dataset for observation 23559\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Running FoVBackgroundMaker\n",
      "Computing dataset for observation 23592\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Running FoVBackgroundMaker\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6.95 s, sys: 370 ms, total: 7.32 s\n",
      "Wall time: 7.89 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "analysis.get_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dadf87e",
   "metadata": {},
   "source": [
    "As we have chosen to stack the data, there is finally one dataset contained which we can print:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d7196f5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:23.318851Z",
     "iopub.status.busy": "2022-06-17T21:36:23.317786Z",
     "iopub.status.idle": "2022-06-17T21:36:23.336004Z",
     "shell.execute_reply": "2022-06-17T21:36:23.334879Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MapDataset\n",
      "----------\n",
      "\n",
      "  Name                            : stacked \n",
      "\n",
      "  Total counts                    : 2485 \n",
      "  Total background counts         : 1997.49\n",
      "  Total excess counts             : 487.51\n",
      "\n",
      "  Predicted counts                : 1997.49\n",
      "  Predicted background counts     : 1997.49\n",
      "  Predicted excess counts         : nan\n",
      "\n",
      "  Exposure min                    : 2.73e+08 m2 s\n",
      "  Exposure max                    : 3.52e+09 m2 s\n",
      "\n",
      "  Number of total bins            : 100000 \n",
      "  Number of fit bins              : 100000 \n",
      "\n",
      "  Fit statistic type              : cash\n",
      "  Fit statistic value (-2 log(L)) : nan\n",
      "\n",
      "  Number of models                : 0 \n",
      "  Number of parameters            : 0\n",
      "  Number of free parameters       : 0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.datasets[\"stacked\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d821aef",
   "metadata": {},
   "source": [
    "As you can see the dataset comes with a predefined background model out of the data reduction, but no source model has been set yet.\n",
    "\n",
    "The counts, exposure and background model maps are directly available on the dataset and can be printed and plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8afa0c3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:23.341397Z",
     "iopub.status.busy": "2022-06-17T21:36:23.341037Z",
     "iopub.status.idle": "2022-06-17T21:36:24.163212Z",
     "shell.execute_reply": "2022-06-17T21:36:24.162072Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b9898e28abc54e4e832387d520cacd55",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(SelectionSlider(continuous_update=False, description='Select energy:', layout=Layout(wid…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = analysis.datasets[\"stacked\"].counts\n",
    "counts.smooth(\"0.05 deg\").plot_interactive()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c26b7d62",
   "metadata": {},
   "source": [
    "We can also compute the map of the sqrt_ts (significance) of the excess counts above the background. The correlation radius to sum counts is defined in the config file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e1f6be44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:24.172206Z",
     "iopub.status.busy": "2022-06-17T21:36:24.171332Z",
     "iopub.status.idle": "2022-06-17T21:36:24.864851Z",
     "shell.execute_reply": "2022-06-17T21:36:24.863847Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing excess maps.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis.get_excess_map()\n",
    "analysis.excess_map[\"sqrt_ts\"].plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec82bd4b",
   "metadata": {},
   "source": [
    "## Save dataset to disk\n",
    "\n",
    "It is common to run the preparation step independent of the likelihood fit, because often the preparation of maps, PSF and energy dispersion is slow if you have a lot of data. We first create a folder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fee5bd53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:24.869528Z",
     "iopub.status.busy": "2022-06-17T21:36:24.868759Z",
     "iopub.status.idle": "2022-06-17T21:36:24.874247Z",
     "shell.execute_reply": "2022-06-17T21:36:24.873291Z"
    }
   },
   "outputs": [],
   "source": [
    "path = Path(\"analysis_1\")\n",
    "path.mkdir(exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a80dbe6",
   "metadata": {},
   "source": [
    "And then write the maps and IRFs to disk by calling the dedicated `write()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "64287406",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:24.878943Z",
     "iopub.status.busy": "2022-06-17T21:36:24.878579Z",
     "iopub.status.idle": "2022-06-17T21:36:25.553542Z",
     "shell.execute_reply": "2022-06-17T21:36:25.552435Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"crab-stacked-dataset.fits.gz\"\n",
    "analysis.datasets[0].write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8e285a4",
   "metadata": {},
   "source": [
    "## Model fitting\n",
    "\n",
    "Now we define a model to be fitted to the dataset. Here we use its YAML definition to load it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5379dd31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:25.559547Z",
     "iopub.status.busy": "2022-06-17T21:36:25.558820Z",
     "iopub.status.idle": "2022-06-17T21:36:25.566147Z",
     "shell.execute_reply": "2022-06-17T21:36:25.564774Z"
    }
   },
   "outputs": [],
   "source": [
    "model_config = \"\"\"\n",
    "components:\n",
    "- name: crab\n",
    "  type: SkyModel\n",
    "  spatial:\n",
    "    type: PointSpatialModel\n",
    "    frame: icrs\n",
    "    parameters:\n",
    "    - name: lon_0\n",
    "      value: 83.63\n",
    "      unit: deg\n",
    "    - name: lat_0 \n",
    "      value: 22.014    \n",
    "      unit: deg\n",
    "  spectral:\n",
    "    type: PowerLawSpectralModel\n",
    "    parameters:\n",
    "    - name: amplitude      \n",
    "      value: 1.0e-12\n",
    "      unit: cm-2 s-1 TeV-1\n",
    "    - name: index\n",
    "      value: 2.0\n",
    "      unit: ''\n",
    "    - name: reference\n",
    "      value: 1.0\n",
    "      unit: TeV\n",
    "      frozen: true\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d348c8",
   "metadata": {},
   "source": [
    "Now we set the model on the analysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b06c9395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:25.571285Z",
     "iopub.status.busy": "2022-06-17T21:36:25.570769Z",
     "iopub.status.idle": "2022-06-17T21:36:25.629978Z",
     "shell.execute_reply": "2022-06-17T21:36:25.628963Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading model.\n",
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : crab\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : PointSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                         :      2.000   +/-    0.00             \n",
      "    amplitude                     :   1.00e-12   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "    lon_0                         :     83.630   +/-    0.00 deg         \n",
      "    lat_0                         :     22.014   +/-    0.00 deg         \n",
      "\n",
      "Component 1: FoVBackgroundModel\n",
      "\n",
      "  Name                      : stacked-bkg\n",
      "  Datasets names            : ['stacked']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "analysis.set_models(model_config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77d243b4",
   "metadata": {},
   "source": [
    "Finally we run the fit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f032aea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:25.635415Z",
     "iopub.status.busy": "2022-06-17T21:36:25.634651Z",
     "iopub.status.idle": "2022-06-17T21:36:56.412659Z",
     "shell.execute_reply": "2022-06-17T21:36:56.411584Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fitting datasets.\n",
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 263\n",
      "\ttotal stat : 19991.99\n",
      "\n",
      "CovarianceResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : hesse\n",
      "\tsuccess    : True\n",
      "\tmessage    : Hesse terminated successfully.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 23.4 s, sys: 5.02 s, total: 28.4 s\n",
      "Wall time: 30.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "analysis.run_fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6ad3293e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:56.418292Z",
     "iopub.status.busy": "2022-06-17T21:36:56.417470Z",
     "iopub.status.idle": "2022-06-17T21:36:56.423132Z",
     "shell.execute_reply": "2022-06-17T21:36:56.422134Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 263\n",
      "\ttotal stat : 19991.99\n",
      "\n",
      "CovarianceResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : hesse\n",
      "\tsuccess    : True\n",
      "\tmessage    : Hesse terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fa6164e",
   "metadata": {},
   "source": [
    "This is how we can write the model back to file again:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2826df97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:56.427810Z",
     "iopub.status.busy": "2022-06-17T21:36:56.427156Z",
     "iopub.status.idle": "2022-06-17T21:36:56.477538Z",
     "shell.execute_reply": "2022-06-17T21:36:56.476473Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"model-best-fit.yaml\"\n",
    "analysis.models.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b4f80336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:56.482203Z",
     "iopub.status.busy": "2022-06-17T21:36:56.481923Z",
     "iopub.status.idle": "2022-06-17T21:36:56.624888Z",
     "shell.execute_reply": "2022-06-17T21:36:56.623737Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\r\n",
      "-   name: crab\r\n",
      "    type: SkyModel\r\n",
      "    spectral:\r\n",
      "        type: PowerLawSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: index\r\n",
      "            value: 2.556220932198337\r\n",
      "            error: 0.10315682613781278\r\n",
      "        -   name: amplitude\r\n",
      "            value: 4.5503635110733023e-11\r\n",
      "            unit: cm-2 s-1 TeV-1\r\n",
      "            error: 3.733234539504148e-12\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "    spatial:\r\n",
      "        type: PointSpatialModel\r\n",
      "        frame: icrs\r\n",
      "        parameters:\r\n",
      "        -   name: lon_0\r\n",
      "            value: 83.61982252386838\r\n",
      "            unit: deg\r\n",
      "            error: 0.003143841482710745\r\n",
      "        -   name: lat_0\r\n",
      "            value: 22.024551176975006\r\n",
      "            unit: deg\r\n",
      "            error: 0.002963265753971426\r\n",
      "-   type: FoVBackgroundModel\r\n",
      "    datasets_names:\r\n",
      "    - stacked\r\n",
      "    spectral:\r\n",
      "        type: PowerLawNormSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: norm\r\n",
      "\r\n",
      "            error: 0.023473087515404497\r\n",
      "        -   name: tilt\r\n",
      "            value: 0.0\r\n",
      "            frozen: true\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "covariance: model-best-fit_covariance.dat\r\n"
     ]
    }
   ],
   "source": [
    "!cat analysis_1/model-best-fit.yaml"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72f2dd8",
   "metadata": {},
   "source": [
    "### Flux points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8945cfde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:36:56.628862Z",
     "iopub.status.busy": "2022-06-17T21:36:56.628506Z",
     "iopub.status.idle": "2022-06-17T21:37:17.345473Z",
     "shell.execute_reply": "2022-06-17T21:37:17.344234Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating flux points.\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "Reoptimize = False ignored for iminuit backend\n",
      "\n",
      "      e_ref                 dnde                 dnde_ul               dnde_err             sqrt_ts      \n",
      "       TeV            1 / (cm2 s TeV)        1 / (cm2 s TeV)       1 / (cm2 s TeV)                       \n",
      "------------------ ---------------------- --------------------- ---------------------- ------------------\n",
      "1.2589254117941673 2.3566084842844554e-11 2.757696903051642e-11 1.9150587762720065e-12 24.265128450030602\n",
      "  2.23872113856834  6.746741180957154e-12 7.848238786235031e-12  5.267950552051874e-13  26.33120989466341\n",
      "3.9810717055349727 1.0544178324865922e-12 1.425787504588846e-12  1.697266051968933e-13 12.828276923194677\n",
      " 7.079457843841381  2.928501821682406e-13 4.193268197038183e-13 5.6404404545189907e-14 11.763409622537509\n"
     ]
    }
   ],
   "source": [
    "analysis.config.flux_points.source = \"crab\"\n",
    "analysis.get_flux_points()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "890a6131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:37:17.352115Z",
     "iopub.status.busy": "2022-06-17T21:37:17.351352Z",
     "iopub.status.idle": "2022-06-17T21:37:18.908071Z",
     "shell.execute_reply": "2022-06-17T21:37:18.907105Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Introduction to Gammapy analysis using the high level interface."
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlAAAAGtCAYAAADZBkofAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAABd7klEQVR4nO3dd5zcd3Xv/9fZ3ntRWUmrZhVLtmXLBdyECwhZkiH0FsCUkACX/MhNLlwCpiQXbpLLBRKaMQZCsYNNuJbcjY1l7LhJbtiWZMm2JMva3ns9vz++s8t6vZK2zMx3Zvf9fDy+D+3MfOfzOTO2pKPP9/M9x9wdEREREZm8lLADEBEREUk2SqBEREREpkgJlIiIiMgUKYESERERmSIlUCIiIiJTlBZ2AMmirKzMq6urww5DREREomDPnj2N7l4+3fcrgZqk6upqdu/eHXYYIiIiEgVmdngm79clPBEREZEpUgIlIiIiMkVKoERERESmSAmUiIiIyBQpgRIRERGZIiVQIiIiIlOkBEpERERkipRAnYSZbTOza9ra2sIORURERBKEEqiTcPed7v7xwsLCsEMRERGRBKEESkRERGSKlECJiIiITJESqGmoqamhu7s77DBEREQkJGomPA2tra0cO3aMgoICKisrKSgoCDskERERiSMlUDPQ3t5Oe3s72dnZVFZWUlJSgpmFHZaIiIjEmC7hRUFPTw+HDh3imWeeoa6ujqGhobBDEhERkRjSClQU9ff3c/ToUWpqaigrK6OyspL09PSwwxIREZEoUwIVA0NDQ9TV1VFfX09JSQmVlZVkZ2eHHZaIiIhEiRKoGHJ3mpqaaGpqoqCggHnz5pGfnx92WCIiIjJDSqDiZGTDeU5ODpWVlRQXF2vDuYiISJLSJvI46+7u5qWXXhrdcD48PBx2SCIiIjJFWoEKydgN5+Xl5VRUVGjDuYiISJJQAhWyoaEhamtrqaur04ZzERGRJKEEaiqGh+D6d0Paelh0MWTmRW3o8RvOVeFcREQkcSmBmorOuuB4+nbw78DyS2DtlVCxOqrTqMK5iIhIYjN3DzuGpLBx40bfvXs3AHvv+w3de/4DXrgXBnuhbCWs2Q4rLoOMnKjPnZ6eTkVFBeXl5aSmpkZ9fBERkbnGzPa4+8Zpv18J1OS8KoHau5fu7m7o64QDd8PeHdD8IqTnwMrLgmSqbGXUY0hNTaWsrIyKigoyMjKiPr6IiMhcMdMESpfwZiIzD9a9FU59C9Q9GyRS+++A53ZAxZogkVp+CaRnRWW6sRXOi4qKqKysJDc3Nypji4iIyORpBWqSJlyBmkhvW7Aq9dzN0HoEMvJg5RuDvVIl1VGPKy8vj8rKSoqKiqI+toiIyGylS3gxZmbbgG0rVqz42IEDB4CTJFAj3KHmqWA16tD9MDQA89YHidTSiyAtM6pxZmVlUVFRQWlpKSkpqo8qIiJyIkqg4mTSK1AT6WmF/bfDvp3Q9gpkFsCqzcElvqJFUY0zLS1ttDBnWpqu0IqIiExECVSczCiBGjE8DMceD/ZKHXogqCu1YEOQSFVfCGnRq0SekpIyWpgzKys6e7BERERmC20iTyYpKVC1MTi6mmD/bbDvFrjnK5BdDKdshjXboHDhjKcaHh6msbGRxsZGCgsLqaysJD8/PwofQkRERJRAhSW3FM78AJzxXji6O9gr9fR/wFPXQ9XZQSK15HxInfl/ora2Ntra2lSYU0REJEqUQIUtJRUWnxscnQ2w79ZgVeruL0FOKazeAqu3Qv68GU/V09PDoUOHeOWVVygvL6e8vFz7pERERKZBe6AmKSp7oCZraBBefgT27oQjD4MBi84L9kotPjdIuqIgJSWF0tJSKisrycyM7l2BIiIiiUx7oGaj1DSoPj84OmqDFal9t8Gdn4fcClh9RXDklc9omuHhYRoaGmhoaNA+KRERkSnQCtQkxXUFaiJDg3D4wWBV6uhjYCnBHqm122Dh2cEG9SjIycmhoqJC+6RERGRWUxmDOBmbQA0ODtLS0kJzczOdnZ3xD6btKOy9Jagt1dsK+fNhzVZYtQVySqIyxUgD47KyMu2TEhGRWUcJVJyMTaDGGhgYoLm5mZaWFrq6uuIb1GA/HPpDsCp17Ilgb1T1hcFeqYVnQhRWkEb2SVVUVKielIiIzBpKoOLkeAnUWH19fbS0tNDS0hL/S3wth4NE6vk7oK8DCquCUginbIbsoqhMUVhYSEVFBQUFBVEZT0REJCxKoOJkMgnUWL29vaOX+Xp7e2MY2TiDffDirqCuVN0fITUdll4Ma7fDvNOisiqVnZ092ndP+6RERCQZKYGKk6kmUGP19PSMXubr6+uLcmQn0PRi0DbmwN3Q30ld6jwezTqfbW//EGTNfBVJffdERCRZKYGKk5kkUGN1dXWNJlMDAwNRiGwSBnrhhXs58uB/sHjwEKRmwPJLgkt8lafOeFXKzEb77mVnZ0cnZhERkRhSHagkk5ubS25uLosWLaKjo4Pm5mZaW1sZHByM3aTpWbB6C997tor5g0f5zIK9warU83dA6XJYvQ1WXg6ZedMa3t1pamqiqamJ/Px8KioqKCoqiu5nEBERSSBKoEKUn59Pfn4+ixcvpr29fTSZGh4ejtmcNWlVcOEWOPcTcPCeYK/Ug9+CR34IKy4J7uCrWD3t8Ts6Oujo6CAzM3N0n1RqanQqp4uIiCQKJVAJwMwoLCyksLCQ4eFh2traaG5upq2tjZhdYs3IDTaWr9kGDfuCROrgPUEvvrJTgteWXwoZOdMavq+vj5dffpljx46NlkFQuxgREZktlEAlmJSUFIqLiykuLmZoaIjW1laam5vp6OiITTJlBhVrguN1nwwu7e29Ge7/F3joe8GlvTXboWzFtIYfGhqivr6e+vp6ioqKqKioULsYERFJekqgElhqaiqlpaWUlpYyMDAwWhYhZgU7M/Ng3Vvh1LdA3bPBHXz7b4PnbobKtbDmSli+CdKmV1CztbWV1tbW0TIIJSUlpESpBY2IiEg8KYFKEiOtVSoqKujv76e5uZnm5mZ6enqiP5kZzFsXHK/7JDx/V5BE3fd1eOhfYeWbglWpkuppDd/T08Phw4d55ZVXKCsro6KigvT09Oh+BhERkRhSApWEMjIymDdvHvPmzYt9jamsQjjtHbD+7VDzVJBIPXczPPMbmH96kEgtvQjSMqY89ODgILW1tdTV1VFcXExFRQW5ubnR/wwiIiJRNqcSKDNbBnwBKHT3t49/HG5005Odnc3ChQtZuHDhaI2p5ubm6JdFMIMFZwRHdws8f3vQOuber0FmAazaHFziK6qa8tDuPhp3bm4u5eXllJSUqMq5iIgkrJgW0jSzIuBaYB3gwFXu/tA0xrkO2ArUu/u6ca9tBr4NpALXuvs3JjHeTWMTpvGPJxKtQprx4O6vqjE1NDREbWsvn7x+D32DzuLibL609VTmFc2wOfDwMBx7PFiROvwgDA/Bwg2wenvQ1Dht+pfl0tPTKS8vp6ysTJf3REQk6hK6ErmZ/Qz4g7tfa2YZQI67t455vQLocfeOMc+tcPeD48a5COgE/n1sAmVmqcDzwOXAUeAx4D0EydTXx4VzlbvXR9435QSqZMkav/x/Xjf5D58gfHiYgZ5OnnrhFXq6Rr9mMtOMlRXRuxsuf7iNs/oe4ZzeBygZaqEjJZ89mefxSNb5tKSWTntcMyM9J5+s/GLSMl9d5fw//uJ1Mw1bRETmqIStRG5mBcBFwIcA3L0f6B932sXAX5rZFnfvNbOPAW8Ftow9yd3vN7PqCaY5Bzjo7i9G5rwBuNLdv06wYhWNz7EN2Ja/YHq38YfNUlLIyC1gOH+QjNwyhns7Ge7poG8gug2OO1IKuS/7jezKuoxTBvZxTu8DXNTzOy7q+R0HMlbzaNb57E1fz7BN7a47d6e/q53+rnbSMrPIzC8hIydfl/dERCRUsdwDtQxoAH5iZqcDe4DPuPvoPfjufqOZLQVuMLMbgasIVpMmayHw8pjHR4Fzj3eymZUC/whsMLPPA9eMfRxJvF7F3XcCOzdu3PixZF7xuPybuzhQ30lqTiHpuYUsLc7k53++LkZ38p0BvBs662Hfbazadwur2q+FnFJYfUVw5M+b9ujp6emUlZUxMDCgy3siIhKKmF3CM7ONwMPA+e7+iJl9G2h39y9OcO4NBKtOy9294TjjVQO3jLuE9w7gTe7+0cjjDwDnuPuno/15kmkP1ESONHXzxm/tondgmJUVefz4g2ezuDSoMt7T00NTUxPNzc2xaXA8NAgvPxxUO3/5UTBg8XnBXqnF50LK9Fq9mNlocc68vOn18RMRkbkpYS/hEawGHXX3RyKPbwI+N/4kM7uQYJP5b4GrgU9NcY5FYx5XAcemFe0st7g0h9OrioDX7h3Kzs6mqqqKqqqq0c3nLS0tDA0NRWfy1DSoviA42muCdjH7b4XDn4e8ymBFatUVkFc2pWHdnZaWFlpaWsjJyRm9e0/FOUVEJNZi9jeNu9cCL5vZqshTlwLPjT3HzDYAPwKuBD4MlJjZP0xhmseAlWa2NLJJ/d3AjhkHP4fl5+ezZMkSTjvtNJYtW0ZRUVF09xsVzIdzPgrvvREu/woULoLd18Gv3gF3/n2wQjWNZsrd3d0cPnyYp59+mqNHj8amJlaSetcPH+JdP5zyza8iInICsa4D9Wngl5Hk5kWCJGmsHOAd7v4CgJl9kMim87HM7HpgE1BmZkeBq939x+4+aGafAu4kuPPuOnd/NlYfZi4Z25NvcHCQlpYWmpqaotdGJjUNlm0KjtajsO8W2H87HPpDkGSt3gqrtkBOyZSGHRoaoq6ujrq6OgoLCykvL6ewsDA6MYuIiETENIFy9yeB415fdPcHxz0eIFiRGn/ee04wxm3AbdOPUk4mLS2N8vJyysvL6evro7m5maampuit8hRVwXmfgI1XwaH7Ye8t8OiPYPdPYOmFsHobLDwzKOY5BW1tbbS1tZGZmTlaUyo1dXr7rURERMaaU5XIZeYyMzOZP38+8+fPp6uri6amJlpaWqJT+TwtA1ZcFhwth4NK58/fAS/8HgqrYM02OGUzZBdNadi+vj6OHj3KsWPHKCkpoby8nJycnJnHKyIic5YSKJm23NxccnNzWbRoEW1tbTQ1NdHW1kZU7uwsXgKv/1SwX+rFXfDcTnj4+/DYtbB0E6zdBvNOm9Kq1PDwMI2NjTQ2NqpljIiIzIgSKJmxkXICRUVF0d8vlZYFp7wpOJpeCFalDtwFB++G4upgVWrlmyBralXVu7q66Orq4ujRo5SVlVFWVkZmZubM4xURkTlBCZRE1fj9Uk1NTTQ1NdHfP74I/TSULocL/hrO/Qt44d6grtR//Ss8cg2suATWbIeKNVNalRocHKS2tpba2lptOhcRkUlTAiUxk5mZyYIFC1iwYEF060ulZ/+ponnD/siq1O+Cu/hKVwSrUisug8ypFdcc2XSekZExuuk8LU2/RURE5LX0t4PERX5+Pvn5+SxatIjW1laamppob2+f+cDlq4Lj3E/Awd8FydQD/xce/gGsuDTYK1W+ekpD9vf388orr3Ds2DGKi4spLy9XpXMREXkVJVBzSCL08ktJSaGkpISSkhIGBgZGL/H19s6wuXFmHpz6Flh7JdTvg703w4G7g/pS5auCy3srLg1WrybJ3Wlubqa5uZmsrCzKy8spLS1VKQQREYldL7zZJtl74SW6qJdEAOjtCDabP7cDWl6CjFxYeXlQV6psxbSGHEkAy8rKyM3NjU6cMXSiHogiInPZTHvhKYGaJCVQ8eHur7rEd6L/Pz/3m6cnOyjVgy9yTu+DrO97gnQGOZS2lEezLuDpzDMYtIxpxZqWkUVmfhEZOQVYgvbfe+poK70Df2qNk5WeMtoTUSaWCCu1IhJ7idxMWGTKzGy0hczAwADNzc00NjbO7BKfGYfSl3MofTm35L2NM3sf4dzeB3hn58/Z2nUTj2edxyNZ59OQWjmlYQf7exlsqqW7pZ6M3AIy84pIy8iafpwxMDZ5muixiIhMj1agJkkrUOEaucTX3Nw887v4ANzh2BOwdwe89AcYHoT5pwd7pZZeFFRFn4bc3FzKysooKSkhJQFWpS7/5i4O1HcCkGKwvDyPuz97cchRiYiET5fw4kQJVGJw99FCnVG5iw+guwWevy24g6+9BrIKYdVmWL096NM3DampqaNtY7KzJ79xPdq0B0pEZGJKoOJECVTi6e/vH72LLyqNjYeH4dgeeO5mOPQg+HDQxHjNdlhyAaSlT2vYsFel3vXDhwDt7RERGUt7oGTOysjIGG1s3NHRQWNjI62trQwPT3OfT0oKVJ0dHF2NsP822HsL/O7LkF0Mq7bAmq1QsGBKw45tGzNyB5+aGYuIJDclUDIrjBTqHBoaorm5eea9+HLL4Mw/hzPeBy8/FtSVeupX8OSvYNHZQb2pRedB6uR/Cw0NDdHQ0EBDQwM5OTmjq1KqKyUiknyUQMmskpqaOtqLr6enh8bGRpqbm6dfWyolFZacFxyddbDv1uC48wuQW/6nljJ5FVMatru7myNHjnD06FGKi4spKytTtXMRkSSiBEpmrezsbBYtWkRVVRWtra00NjbObON5XiVsvAo2/DkceSi4g2/Pz+Dxn8Hi18GaK4PVqZTJrygNDw+P7uPKzs6mtLSU0tJS9eATEUlw+lNaZr2xtaX6+/tpbGykqamJ/v7+6Q2YmgZLLwyO9mPBPqn9t8Hh/wqSrNVbYfWW4DLgFPT09HD06FFeeeUVioqKKCsro6CgYHoxiohITCmBkjklIyODBQsWsGDBAtrb20c3nk/7btSCBXDux+GsD8PhB4JVqd0/hsd/CkteH+yVWnBWsEF9kkZKNbS0tJCZmTm6KpWRMb3aVCIiEn3HTaDMbMck3t/s7h+KXjgi8VNQUEBBQQGDg4M0NTXNrOJ5Wjosf0NwtB6FfTtg3+1Bkc6CBcHde6dsgZziKQ3b19fHsWPHOHbsGIWFhZSWllJUVISZTS9OERGJihOtQK0BPnqC1w34bnTDEYm/tLQ0KisrqaysjE45hKIqOO+vYONH4dD98OzN8Mg18Nh1wWW/NdthwQaYYhLU1tZGW1sbaWlpo6tSYRbpFBGZy06UQH3B3Xed6M1m9pUoxyMSqpFyCIODgzQ3N9PQ0DCDVakMWHFZcDQfCiqdH7gDXvg9FC6CNduCiudZhVMadnBwkLq6Ourq6sjNzaW0tFTlEERE4kyVyE/CzLYB21asWPGxAwcOhB2OhKCzs5PGxkZaWlqmvyo1YrAXXrgvqCtV9xykpsOyTcFeqcp1U16VGpGSkjK68Tw/P39mMYqIzAExbeViZlXAe4ALgAVAD/AMcCtwu7vPmdbuauUiQ0NDNDU1zWxVaqzGg7BvJzx/Fwx0Q8nS4PLeyjdC5vRrQmnjuYjIycUsgTKznwALgVuA3UA9kAWcArwBOAv4nLvfP93Jk4kSKBkrqqtS/d3wwr1BD77G5yEtK9iMvuZKqFg97VUpCDbKj2w8D6MPn4hIooplArXO3Z85wcQZwGJ3PzjdyZOJEiiZSFTu4BurYR88txMO3gODPVC6EtZuC/ZRZeROe9jU1FRKSkooLS0lN3f644iIzBYxvYQ3wWTFwCJ3f3q6EyYrJVByMiN38LW0tEy/rtSIvk44+LugrlTTC5CeHSRRa7dD2SkzGnqk4nlJSQnp6ekzi1NEJEnFPIEys/uA7QR37D0JNAC73P2z0500GSmBkskaHByksbGRhoaG6Vc7H+EebDbfF1mVGuqH8tXBqtTyS4PEaprM7FWX+FRbSkTmkngkUE+4+wYz+yjB6tPVZva0u5823UmTkRIomY62tjYaGhpoa2ub+WC97XDgLnhuB7QeDi7prXxjUA6hdPmMhk5LSxttapyTkzPzWEVEEtxME6jJtHJJM7P5wDuBL0x3IpG5qLCwkMLCQvr7+2loaKCpqYmBgYHpDZZVAOvfDuveBrVPB3ul9t0Cz/42KIGwdjssuzjYhD5Fg4ODNDQ00NDQoEt8IiKTMJkVqHcAXwQecPe/MrNlwD+7+9viEWCi0AqURMNIn7uGhgY6OztnPmBvG+y/IyjS2fYyZObDKZuDVaniJTMaeuwlvsLCQt3FJyKzSlw3kc9lSqAk2np6emhoaKC5uZmhoaGZDeYOx54INp2/9AcYHgzaxazZCtUXBVXRZyA1NZXi4mJKS0vJy5t+jSoRkUShBCpOlEBJrAwNDY22jenp6Zn5gN3NsP822HsLdNQErWJWbQmSqcKqGQ+vQp0iMhsogYoTJVASDx0dHTQ0NNDa2jrzUgjDw/DKY8FeqcMPgg/DwrOCvVJLLoDUyWyBPLH8/PzRu/jUi09EkokSqDhRAiXxNDAwQENDA42NjdPfdD5WZ2NkVWondNVDTgmsuiJYlcqfN+PhR3rxlZaWkp+fr5IIIpLwYt0LbzVBO5dH3L1zzPOb3f2O6U6ajJRASRiivul8eAhefjRoZnzkYXBg8bnBpvNF50VlVSo9PX206nl29vTrVImIxFIsW7n8N+CTwF7gDOAz7n5z5LXH3f3M6U6ajJRASdi6u7tHN53PuP8eQEct7Ls1OLqbILccVm+F1Vsgr2Lm46Oq5yKSuGKZQP0ReJ27d5pZNXAT8HN3//ZIcc3pTpqMlEBJohjpv1dfXz/zSucAQ4Nw5L+CAp1HHwuaFy9+fbBXqupsSJn53iYze9V+KZVEEJGwxbKQZurIZTt3P2Rmm4CbzGwJoA0OIiFJS0ujsrKSyspKWltbqa+vp6OjY/oDpqbB0ouCo+2VoDjn/tuDjed584J9Uqu2QG7ptKdwd9rb22lvbyclJYXi4mJKSkooKCiYftwiIiE60QrUvcBn3f3JMc+lAdcB73P3OXXLjVagJJH19vZSX19PU1NTdC7vDQ7AoT/Avh3wyhPBKlT1BbBmOyw4E6K0gqT9UiISllhewqsCBt29doLXznf3B6c7aTJSAiXJYGhoaLSRcV9fX3QGbX05KNC5/w7oa4fChbB6G6x6M2QXRWcOtF9KROIrLmUMzKwYWMSYS37u/vh0J01GSqAk2UTl8t5Yg33w0v3BXqnapyE1HaovhLVXwvzTg71TUaL6UiISazFPoMzsa8CHgBcIbnoGcHe/ZLqTJiMlUJKsenp6qK+vj97dewDNh4JVqQN3Ql8nFC0OLu+d8sag8nmUjNSXGtkvpfpSIhIt8Uig9gPr3T0Kt/skLyVQkuwGBwdHL+9F5e49gIFeeOH3wV6puucgNQOWvyFIpipPjeqqVFpaGiUlJZSUlJCbmxu1cUVkbopHAvUb4C/dvX66k8wGSqBktnD30ct7USnOOaLxYGRV6m4Y6IaSZUEitfJyyIxuA+KRfnwlJSVkZmZGdWwRmRvikUBtBG4GngFGd6W6+/bpTpqMlEDJbNTd3T16eS9qbZ36u+GFe4K9Uo3PQ1pWsCq19kooXx3VVSmA3Nzc0ZWptLSZV1IXkbkhHgnUs8APgT8Coxso3H3XdCdNRkqgZDYb6b3X0NDA4OBg9Aau3xesSh28BwZ7oXRlUKBzxaWQEd3LcGZGQUEBJSUlKtYpIicVjwRql7tfPN0JZgslUDIXDA8P09zcTH19PT09PdEbuK8TDv4uSKaaXoD0bFhxWbAqVbYyevNEqLmxiJxMPBKobxJcutvBqy/hqYyByCzW0dFBXV0dbW1t0RvUPdhsvncHvHAvDPVDxZpgr9TySyA9K3pzRWjzuYhMJB4J1O8neFplDETmiKhXOR8duB0O3BXslWo9DBl5sPKNwSW+kqXRm2eMzMzM0WQqKyv6yZqIJI+4FNIUJVAiQ0NDo/ukolYGAYJVqZqnYO9OeGkXDA1A5fogkVp2MaTF5i67nJyc0WRKlc9F5p54rED9L+Cf3L018rgY+Bt3//vpTpqMlECJBNydlpYW6uvr6erqiu7gPa1By5h9O4LGxpn5cMrmIJkqWhzducZQ5XORuSceCdQT7r5h3HOPu/uZ0500GSmBEnmtzs5O6urqaG1tje7Aw8Nw7PFgVerQH2B4CBZsgDVbofoiSMuI7nwRKSkpFBQUUFpaSmFhoTafi8xiM02gJlM0JdXMMt29LzJhNqDKdSJCXl4eeXl59PX1UV9fT2NjY3T2SaWkQNXG4OhqgudvD5Kpe74GWUVBI+M1W6GwauZzjTE8PExrayutra2kpqZSXFxMSUkJ+fn5UZ1HRJLfZFag/g7YDvyEoBfeVcAOd/+n2IcXXWa2DPgCUOjubx//+ETv1QqUyMnFbJ8UBKtSRx8LNp0feTDYO1V1NqzZBkvOh9TYFdFMT08fTaZ0J5/I7BCXTeRmthm4DDDgLne/cwoBpgK7gVfcfeu0gjS7DtgK1Lv7ugli+zaQClzr7t+YxHg3jU2Yxj+eiBIokckb2SdVV1dHd3d39CfobIB9t8K+W6CrAXJKYfUWWL0V8udFf74xdCefyOwQswTKzMxPkl1N8pzPAhuBgvEJlJlVAD3u3jHmuRXufnDceRcBncC/j02gIsnZ88DlwFHgMeA9BMnU18eFctVIPz8lUCLxE5N6UiOGBuHlR4LLe0ceDv6Jt+i8oK7U4nMhJbYbwnUnn0jyiuUeqN9HGgnf7O5HxkyYAVwAfBD4PfDTEwRXBVwB/CPw2QlOuRj4SzPb4u69ZvYx4K3AlrEnufv9ZlY9wfvPAQ66+4uR+W4ArnT3rxOsWM2YmW0Dtq1YsSIaw4nMOfn5+eTn58emnlRqGlSfHxwdtcGK1L5b4c7PQ24FrL4iOPLKozPfON3d3XR3d3P06FHy8/MpKSmhuLhYd/KJzAEnWoHKItjv9D5gKdAKZAMpwF3Ad939yRMObnYTwUpQPvDfJ7qEF9lj9XrgRuBTwOXu/poW8ZEE6pZxK1BvBza7+0cjjz8AnOvunzpOPKUEydzlwLXANWMfRxKvCWkFSiQ6BgcHaWhooL6+Prp990YMDcLhB4O9Uq/sBksJ9kit2RbsmYpxjzz15BNJDjFbgXL3XuB7wPfMLB0oI7jc1jrJwEb2LO0xs00nmOefIitH3weWT5Q8nWiaiYY8wVxNwCfGPT3+sYjEUFpaGvPnz6eyspLm5mbq6uro7e2N3gSpaUEBzmUXQ9tR2HsL7L89KIeQPy9IpFZtgZyS6M05hrvT1tZGW1vbaE++kpISCgoKVBZBZBaZ1G0r7j4A1Exx7POB7Wa2BcgCCszsF+7+/rEnmdmFwDrgt8DVBKtQk3UUWDTmcRVwbIpxikgIUlJSKCsro6ysjLa2Nurq6ujo6Dj5G6eisArO+wRsvCpIoPbuhEd/BLuvg+oLg2RqwZkxW5Uaac7c3NxMWloaxcXFFBcXqyyCyCwQl1YukRWo11zCM7MNwPUE+6ReAn4BvDhRlfPjXMJLI9hEfinwCsEm8ve6+7PR/gy6hCcSe93d3dTV1dHS0kLM/mxqPRIkUvtvh74OKFwIq7fDqs2QXRSbOcfJyMgYLYuQk5MTlzlF5NWSohfeCRKo84F2d/9j5HE68CF3/9G4864HNhFcRqwDrnb3H0de2wJ8i+DOu+vc/R9j8RmUQInET39/P3V1ddErzDmRwT54cVewV6ruj5CaDksvDlal5p8OcbrclpWVNZpMqSyCSPzEsozBncAdwO3uvm+6E8wWSqBE4m+kMGd9fT0DAwOxm6jpRdi7Aw7cDf2dULQk6L+38o2QVRC7eccZKYtQXFxMRkZs2tWISCCWCdQ8YHPkOAV4hCChumeKG71nBSVQIuFx99EN5z09PbGbaKAXXrg3SKbq90JqBiy/JFiVqjw1bqtSELTJGUmm0tJiV2VdZK6KVyXyFOBc4M0E+416CCqSJ107l+lSAiWSGGK24Xy8xgN/WpUa6IGSZUGBzpWXQ2ZebOceY6QsQnFxMUVFRaoxJRIloeyBMrMy4E3u/svpTpxslECJJJbu7m5qa2tpbW2N3YZzgP4uOHhPsFeq6QCkZcGKS4NkqmJ17OadQEpKCoWFhaNlEVRjSmT6kmIT+WygBEokMfX19VFfXx/bDecQNC9u2BckUi/cC4O9ULYS1l4Jyy+FjPjeTZeamjpaYyo/P181pkSmSAlUnCiBEklsMa9wPlZfZ3Bpb+8OaH4R0nNg5WWw5kooi3/bp5EaUyUlJeTlxe/yokgyUwIVJ0qgRJLD8PAwTU1N1NXV0dfXF9vJ3KHu2SCReuFeGBqAijXB5b3ll0B6/MsSqMaUyOTEPIEys4maALcBe07WC282UQIlknxaW1upra2lq6sr9pP1tsHzdwXJVOsRyMgLyiCs3Q4lS2M//wRUY0rk+OKRQP0K2AjsjDx1BUHF79XAjXPlTjwlUCLJq7Ozk9raWtra2mI/mTvUPBXslXppFwwPwrz1wV6ppRdBWmbsY5hAdnY2JSUllJSUqMaUCPFJoO4E3jZS+8nM8oCbgLcSrEKtne7kyUQJlEjy6+3tpba2lubm5tjeuTeipzVoGbNvJ7S9ApkFQcuYNduhaNFJ3x4rubm5ozWm0tPTQ4tDJEzxSKD2Aqe7e3/kcSbwpLuvMbMn3H3DdCdPJkqgRGaPgYGB0VYxQ0NDsZ9weBiOPR5c3jv0AAwPwcINQQ++6gshLZwkxsxeVbBTNaZkLplpAjWZ8ra/Ah42s5sjj7cB15tZLvDcdCcWEQlLeno6VVVVzJ8/Pz6tYlJSoGpjcHQ1wf7bYO8tcM9XILsYVr0ZVm8NGhvHkbvT0dFBR0cHR44coaCggJKSEoqKilRjSuQkTrgCZUFhkSqgArgAMOABd59zSzFagRKZvdx99M693t7e+Ew6PARHH4PndsKRB8EJEqy122Hx6yE1vPYtYwt2FhYWqsaUzErxuIS3x93Pmu4Es4USKJG5Ia537o3orId9t8G+W6CrAXLLYNUWWH0F5M+LXxwTUMFOma3ikUB9F/ipuz823UlmAyVQInNLXO/cGzE0CC8/DHt3wpFHgjX/xecFe6UWnwsp4e5RUsFOmU3ikUA9B6wCDgFdBL+l3d1Pm+6kyUgJlMjc1NPTQ21tLS0tLfG5c29Eew3suxX23wrdzZBbAWu2wqorIK8sfnEcx0jBzuLiYnJzc8MOR2TK4pFALZnoeXc/PN1Jk5ESKJG5rb+/f/TOvZj23BtvaBAOPxDslXplN1gKLDk/2Cu1cGOwQT1kmZmZo3fyZWdnhx2OyKTEpZWLmV0ArHT3n5hZOZDn7i9Nd9JkpARKRCDOPffGaz0a1JTaf3tQ+bxgfnD33qotkFMS31iOIzs7e/QyX2ZmOEVDRSYjHitQVxNUIl/l7qeY2QKCCuTnT3fSZKQESkTGGh4eprGxkbq6Ovr7++M7+WA/HLo/WJWqeRJS0mDphUGBzgUbIEE2eufm5o5e5lP1c0k08UigngQ2AI+PFM00s6e1B0pEJCiB0NLSQm1tLT09PfEPoOVQUFPq+TugrwMKFwV7pU7ZDNlF8Y/nOMYW7ExLC69Eg8iIeCRQj7r7OWb2uLufGSmg+ZASKBGRV2tra6O2tpbOzs74Tz7YCy/uClal6v4IqemwdBOs3QbzTkuYVSkzIz8/f3RlStXPJSzxSKD+O7ASuBz4OnAV8Ct3/9fpTpqMlECJyGR1dXVRW1tLa2trOAE0vRi0jTlwF/R3QXE1rNkGK98IWQXhxDQBM6OwsJDi4mJVP5e4i9cm8suBNxKUMLjT3e+e7oTJSgmUiExV3JsXjzfQAy/cG9SVqt8LqZmw4pJgr1TFmoRZlQJVP5f4i0sCJUqgRGT6QiuBMFbj8/DcDjj4uyCxKl0RrEqtuAwyE6so5kj18+LiYgoKCpRMSUzELIEys1vcfetJJj/pObOFEigRmalQSyCM6O8KkqjndkLTAUjLhhWXBnulyleHE9MJjFQ/Ly4uJj8/P+xwZBaJZQLVCtx/ovcCp7r7sulOnkyUQIlItIRaAmGEO9Tvg703w8F7YagPylcFl/dWXArpiVcQMz09fbTGlKqfy0zFMoG6eBLv73f3h6Y7eTJRAiUi0ebuNDc3U1tbS29vb3iB9HbAwbuCVamWlyAjF1ZeDqu3QdmK8OI6gczMzNFkStXPZTq0BypOlECJSCy1trZSW1tLV1dXeEG4Q90z8NzN8OJ9MDQAlacGq1LLN0FaVnixnUBWVtZoMpWVlZgxSuJRAhUnSqBEJB46Ojqora2lvb093EB62+D5O4ON520vQ2Z+UJxzzTYonrBFakLIzs4eLdipVjJyIkqg4kQJlIjEU3d392gtqVD/nHaHY08GdaVeuh+GB2H+6UEz4+qLIC1xW7SMtJIpKSkhPT097HAkwcSrDlQ2sNjd9093omSnBEpEwtDX10dtbS1NTU3hJlIA3S3w/O1BXan2Y5BVCKs2w+rtUFQVbmwnMbb6uVrJCMSnEvk24F+ADHdfamZnAF919+3TnTQZKYESkTANDAyM1pIaGhoKN5jhYTi2J7i8d/hBGB6ChWcGe6WWXABpibvaM9JKpqSkhKKiIrWSmcPikUDtAS4B7lMzYSVQIhKuoaEh6uvrw60lNVZXI+y/DfbeCp21kF0Mq7YEDY0LFoQd3QmplczcFo8E6hF3P9fMnlACpQRKRBLDyWpJfe43TwPwjbfF6Y/q4SE4+liwKnXkv8CBqo2w9kpY/DpITezLZmNbyRQUFCiZmgNmmkBN5v/oZ8zsvUCqma0E/hvwX9OdUEREZi4lJYWKigrKy8sTo5ZUSiosPi84Outg322w71a46+8htwxWXxEceZXhxXgCw8PDtLS00NLSolYyMimTSaA+DXwB6AOuB+4EvhbLoEREZHLMjNLSUkpLSxOjlhQESdLGD8OGD8DLDwd1pfb8Ozz+78Fq1JrtsOicIOlKQENDQzQ1NdHU1ERaWhpFRUWUlJSolYy8ykkTKHfvJkigvhD7cGLLzJYRfI5Cd3/7+MfhRiciMjNFRUUUFRXR0dFBetZBBnq7ww0oNQ2qLwiO9mOw95Zgv9Th/wqSrNVbYfWWYIUqQQ0ODtLY2EhjY+NoK5ni4mLy8hKrAbPE34lauewkuIo9oZPdhWdmWQS99DIJErWb3P3qaQVpdh2wFah393XjXtsMfBtIBa51929MYrybxiZM4x9PRHugRCSZvOuHDzHY18M/XbGE1tbWsMP5k8GB4M69vTfDK48Hq1BLXh/slVpwFiTJ3qOMjIzRGlM5OTlhhyPTEMs9UP8S+fXPgHnALyKP3wMcmsTYfcAl7t5pZunAA2Z2u7s/PHKCmVUAPe7eMea5Fe5+cNxYPwX+Dfj3sU+aWSrwXeBy4CjwmJntIEimvj5ujKvcvX4ScYuIzAppmdksX76c3t5eamtraW5uDr+WVFp60BZm+SZoPQr7dsC+2+GlP0DB/KDS+SlbIKc43DhPor+/n7q6Ourq6sjMzBytfq6+fHPHcRMod98FYGZfc/eLxry008zuP9nAHvwu7Yw8TI8c43/nXgz8pZltcfdeM/sY8FZgy7ix7jez6gmmOQc46O4vRmK9AbjS3b9OsGIlIjLnZWVlUV1dzYIFC0aLcg4PD4cdVlB887y/go0fCRKovTvgkWvgsetg6YXBXqkFGyDBN3H39fVRU1NDTU0N2dnZoytTaiUzu01mE3m5mS0bk6QsBconM3hkhWgPsAL4rrs/MvZ1d78xMt4NZnYjcBXBatJkLQReHvP4KHDuCeIpBf4R2GBmnweuGfs4kniNf882YNuKFYnZkVxEZLIyMjJYvHgxCxYsoK6ujoaGhvCLcgKkZcLKy4Kj5RA8txMO3AEv/B4KFwWrUqs2B5XPE1xPTw89PT0cO3aMnJyc0ZWpjIzEbXkj0zOZOlCbCRKNFyNPVQN/4e53TnoSsyLgt8Cn3f2ZCV6/gWDVabm7NxxnjGrglrF7oMzsHcCb3P2jkccfAM5x909PNrbJ0h4oEUkm7/rhQwD8x1+87rjnDA0N0dDQQF1dXWIU5RxrsBdeuC9Ylap7FlLTYdmmYFVq3vqEX5UaLzc3dzSZUl++xBDzOlDufkek/tPqyFP73L1vKpO4e6uZ3QdsBl6VQJnZhcA6ggTrauBTUxj6KLBozOMq4NhUYhMRmatSU1OZN28eFRUVJyzKGYq0rGDVadVmaHoh6L/3/J1w4G4oXgprt8GKN0JWcpQW6Orqoquri5dffvlVrWTUly95TfZ2h7OAU4HTgXeZ2Z+f7A1mVh5ZeRppRnwZsG/cORuAHwFXAh8GSszsHyYdPTwGrDSzpWaWAbwb2DGF94uIzHkjRTnXrVtHdXU1WVlZYYf0aqXL4YK/hg/8J1z8t5CWAQ9+B37xNrjvG1D3HIS9OX4KOjo6OHz4ME8//TQHDhygqakpMS6lypScNPU1s58Dy4EngZH/ws64O+ImMB/4WWQfVArwa3e/Zdw5OcA73P2FyFwfBD40QQzXA5uAMjM7Clzt7j9290Ez+xRBcc9U4Dp3f/Zkn0lERF5rbFHOlpYWamtr6e4OuZbUWOnZkdpRW6Fhf7AqdeB3sP92KF0Ba7fDissgIzfsSCfF3Wlvb6e9vX20L19JSQmFhYVqJZMEJrMHai+w1kO/9zVc2gMlIslkMnugJqO9vZ3a2lo6OjpOfnIY+jrh4O+CZKrpYJBkrbgsSKbKTgk7umkZ25evsLBQrWRiJC698AjqQNVMdxIREUlOBQUFFBQU0NnZSW1tLW1tbWGH9GqZeXDqW4JCnPV7g03nz98VJFTlq4O9UssvDRKrJDFRX76RVjJKphLHZBKoMuA5M3uUoDgmcPJK5CIiMnvk5eWxYsUKenp6qK2tpaWlJfyinGOZQeXa4Djvr+BAJIna9c/w0Pdg5RuDcgily8OOdErUly9xTSaB+nKsgxARkeSQnZ3N0qVLX1WUM6ESKYCsAlj/dlj3Nqj9Y7Aqte8WePa3ULkuSKSWbwru9Esi6suXWE66B0oC2gMlIskkWnugTmZgYIDa2loaGxsTo7r58fS2wf47glWptpchMx9O2RwkU8VLwo5uRkb68n3mtwdIy8iK+X/z2SJme6DMrIMTNxMumO6kIiIyO6Snp7No0SLmz59PfX099fX1iXlLflYhnP4uOO2dcOyJYFXq2d/CH2+E+WcEe6WqLwpKJCSZkb587TWHSE1L59ixJerLFwcn6oWXD2BmXwVqgZ8DBrwP0MVXEREZlZaWxoIFC6isrEzc6uYQ7JVaeGZwdDfD/ttg7y1wz9eCJGvVm2H1tqBPXxIaGhxQX744mcweqDe5+9j+ct83s0eAf4pRTCIikqQSurr5eDklsOH9cPp74ZXdwarU07+Gp26AhWcFbWOqL4DU5KwWrr58sTWZ/yuGzOx9wA0El/Tew58KaoqIiLzGSHXz8vJympubqa2tpbe3N+ywJpaSAovOCY7Oxsiq1E743dVBkrVqS1C8s2B+2JFOW3d3N93d3Rw9epS8vLzRDejqyzd9k0mg3gt8O3I48GDkORERkRNK+Orm4+WVwVl/DhveBy8/GqxKPflLeOKXQYK1djssOi9pV6UAOjs76ezsVF++GZpMM+FDBL3qREREpm1k1aOtrY3a2lo6OzvDDun4UlJhyeuCo7MO9t0aHHd+AXLLYfUVwZFXEXakM9LR0UFHRwdHjhx5VTKVmpoadmgJ74QJlJm9CagCfufuh8c8f5W7Xxfr4EREZOqONHXz1NFWegeGufybu/jxB89mcWlO2GGNKiwspLCwkI6ODmpra2lvbw87pBPLq4SNV8GGP4cjDwWrUnt+Bo//DBa/PtgrtejsIOlKUhP15SsuLqaoqEh9+Y7jRGUM/hdwAfA48D/N7Fvu/q+Rlz8FKIESkVlnpH5SMhtJngAO1Hfyxm/t4vSqonCDOoHB/l562xrp7554ReobbzstzhEdR2oaLL0wONqPBXfv7b8NDj8IefNgzRXBfqncsrAjnRF3p7W1ldbWVvXlO4ETrUBtAza4+6CZfRn4lZktc/f/j6CcgYiIJKCR5Ol4jxNNWkYWeeVVDPb30dvexEB3R+JVNx+vYAGc+3E468Nw+IFgVeqxH8Oen8KS84O9UgvOCjaoJ7GJ+vIVFxdTUFAw55OpEyVQae4+CODurWa2DbjGzG4EdA+kiMxKs6GK8+Xf3MWB+mA1J8VgeXleUn2uvr6+xG0TM15aOix/Q3C0HoV9O2Df7fDS/UGStWZbsCqVXRR2pDOmvnyvdqLU+AUzu3jkgbsPuftHgP3AmphHJiIi0/LjD55NVnrwx/vy8jx+/MGzQ45oajIzM1myZAnr16+nsrIyefbgFFUFjYzffxNc8sVgs/kjP4RfvA1+9xU49iQkekI4SSN9+Z5//nmefvppXn755cS+KSAGTrQC9Y6JnnT3vzez78coHhERmaHFpTmje56SaeVpvPT0dKqqqpg3b15it4kZLy0TVl4WHM2HgppSB+6AF+6FosXBqtQpbwoqn88CAwMDo/99RvrylZSUkJOTODcuxMKJWrn0AFhwkfN9wDJ3/6qZLQbmAa/EJ0QREZnLkqZNzERKquH8T8M5H4MX74O9N8ND34VHr4Flb4C1V0LlqUGLmVlgpC9fXV0dmZmZo9XPZ2NfvslUzfoeMAxcAnwV6AB+AyTXmrCIiCS18W1iamtrGRgYCDusyUnPglWbg6PxYLDp/MDdcOAuKFkKa66ElZdDZl7YkUZNX1/frO7LN5kE6lx3P9PMngBw9xYz0yZyEREJxdg2MU1NTdTW1tLX1xd2WJNXtgIu/Cyc+wl44R54bgc8+C145AfBZvS1V0L56lmzKgWzsy/fZBKoATNLJWjjgpmVE6xIiYiIhMbMKCsre1WbmJ6enrDDmryMnGA/1JptUL8vWJU6eA/svx1KV8LabbDiMsjIDTvSqJotffkmk0B9B/gtUGFm/wi8Hfj7mEYlIiIySWZGSUkJJSUltLa2UlNTk9j99iZSsTo4zvur4NLevp3wh2/Cw98Pkqi1V0LZyrCjjLpk7ss3mV54vzSzPcClBAU03+Lue2MemYiIyBQVFRVRVFREe3s7NTU1yXdrfWYerHsrnPoWqHs2uIPv+TuDXyvWBG1jll8S7KmaZZKtL9+kUjx33wfsi3EsIiIiUVFQUEBBQQGdnZ3U1NQkfr+98cxg3rrgeN0ng83mz+2AXf87uItv5RuDauclS8OONOqSpS9f4q+RiYiITFNeXh4rV66ku7ubmpoaWltbww5p6rIKYP3bYd3boOapYDVq30549j+hcn2wV2rZprCjjIlE7sunBEpERGa9nJwcli9fTk9PD7W1tbS0tCR+m5jxzGDBGcHR82nYf0eQSP3+f8F//StXpGzkkazzw44yZibqyzfSSiaMZEoJlIiIzBnZ2dksXbqUBQsWJE+/vYlkF8EZ74bT3gnHHoe9O3ndi7u4sOf3sPPW4M6+6ouCXn2zUCL05VMCJSIic85Iv7358+dTV1dHY2Mjw8NJWKEnJQWqNkLVRr5x4wNs7HuYzR2PwT1fhawiWPVmWLMVCqvCjjRmRvryNTY2kp6ePloWIS8vtkVJlUCJiMiclZGRwaJFi5g3bx51dXU0NDQkZyIFdKYUcF/2G9n81s/C0ceCvVJP/wc8dT0s3BjslVpyAaTO3r/6x/flGynYGYu+fLP3WxQREZmkpG1cPJGUFFh8bnB0NsC+W2HfLXD31ZBTAquuCFal8ueFHWlM9ff3U1tbS21tLVlZWaOtZLKyolMCQgmUiIhIRFI3Lp5IXjls/BCc+QE48nCwKvXEL4Jj8blBXanF50FKYtZaipbe3t7RvnxLly6lpKRkxmMqgRIRERlnfOPiuro6+vv7ww7ruGpbezlQ30HfoPNXv9jDl7aeyryiMSstKalQfX5wdNRGVqVuhTv/J+SWw+qtsPqKIOGa5aJ104ASKBERSWjv+uFDYYeAu9Pf1UZvWxNDgwNhh/MaI8kTwJGWHj55/R5WVpzojrSzSc0+k9Vpz3BO74Os2vMThvb8lH0Z63gk6wIOpK/GLXGKVkZTbmkDmXmFMx5HCZSIiMhJmBmZeUVk5BbS39VOb3sTQwOJsyI1kjwd7/FEhiyVZzNO59mM0ykdauDs3ofY2PcQp7b/kebUEh7NOp/dmefRmVIQq7CTmhIoERFJaP/xF68LO4QJtbS0UFtbmxCNi//qF3s40tIDQIpBVVE233jbaVMc5VIYHIBD91Oydyebj+1kc89tUH1BsFdqwZnBBvUkV11dTWlpKb/+xMzGUQIlIiIyDSP1htra2qipqaGrqyu0WL609VQ+ef0e+gadqqJsvrT11OkNlJYOKy4NjtYjwabz/bfDi7ugcCGs3hbUlsouimr8yUgJlIiIyAwUFhZSWFhIR0cHNTU1dHR0xD2GeUVZo3uepr7ydBxFi4NGxmd/FF66P2hm/MgPYPePgyrna7fD/NODFjNzkBIoERGRKMjPzyc/P5/Ozk5qa2tpa2sLO6ToSMuElZcHR/NLwarU83fCC/cESdaa7XDKGyFr5huzk4kSKBERkSjKy8tjxYoVdHd3U1NTQ2tra9ghRU/JUjj/v8E5H4cX7oW9O+Chf4NHr4HlbwiSqcpT58SqlBIoEZFZKFE3Xs8lOTk5LF++nJ6eHmpra2lpaUnOxsUTSc+C1VuCo/FAkEgduDtYmSpZFiRSKy+HzNj2owtT8m+nFxERSWDZ2dksXbqUU089ldLSUmy2rc6UrYQL/wbe/5vgV0uFB78Fv3gb3Pe/oX5f2BHGhFagRERE4iAzM5Pq6moWLFhAbW0tjY2Ns2dFCiAjN9hYvmYbNOwLNp2/cC/svy1IstZeCcsvhYzoN/YNgxIoERGROMrIyGDx4sXMnz+furo6GhoaGB4eDjus6DGDijXB8bpPBpf29u6A+/8FHvpecGlvzXYoWxF2pDOiBEpERCQE6enpVFVVMW/evNFEamhoKOywoiszD9a9FU59C9Q9GyRS+2+H526GyrWwenuw+Tw966RDJRolUCIiIiFKS0tj4cKFzJs3j/r6eurq6mZfImUG89YFx+s+Cc/fFSRTu74BD/8brHxTsCpVUh12pJOmBEpERCQBpKamMn/+fCoqKmhoaKCuro7BwcGww4q+rEI47R2w/u1Q81SwV2rvDnjmNzBvfbBXaulFQf2pBKYESkREJIGkpqYyb948KioqaGxspLa2loGBgbDDij4zWHBGcPS0Bpf29u2Ee/8BMgtg1eZgVapoUciBTkwJlIiISAJKSUmhoqKC8vLy0USqv78/7LBiI7sIzngPnPYuOPb4n1aknv41LNgQJFLVFwa9+hKEEigREZEEZmaUl5dTVlZGc3MzNTU19PX1hR1WbKSkQNXG4OhqCkog7LsF7vkKZBcHjYxXbw0aG4dMCZSIiEgSMDNKS0spKSmhpaWF2tpaenp6wg4rdnJL4cwPwBnvhaOPwXM74anr4cnrgwRr7XZY/HpIDSeVUQIlIiKSRMyMkpISSkpKaG1tpaamhu7u7rDDip2UVFh8XnB01sO+yKrUXV+EnNJIS5mtkD8vrmEpgRIREUlSRUVFFBUV0dbWRlrm8wz29YYdUmzlVcDGD8GG98PLD8PenfD4L+CJX8Ci84K9UovPDZKuGFMCJSIikuQKCwspmFfNQG8X+fn5dHR0hB1SbKWmQfUFwdFeA/tuhf23wp2fh9wKWH1FcOSVxywEJVAiIiKzRHpWLqeccgqdnZ3U1NTQ3t4edkixVzAfzvkonPUhOPxgUFdqz0/g8Z/BkvNh7TZYeHawQT2KlECJiIjMMnl5eaxcuZKuri5qampoa2sLO6TYS02DZRcHR+vRYJ/U/tvh0B8gfz6s2QqrtgDVUZkuuumYiIiIJIzc3FxWrFjBmjVrKC4uDjuc+CmqgvM+Ae+7ES79UrDB/NEfwS/fAfd9PSpTzKkVKDNbBnwBKHT3t49/HG50IiIisZGTk8OyZcvo7e2lpqaGlpYW3D3ssGIvLQNWXBocLYeDTefFy6IydMxWoMxskZn93sz2mtmzZvaZGYx1nZnVm9kzE7y22cz2m9lBM/vcicZx9xfd/SPHeywiIjKbZWVlsXTpUk499VRKS0sxs7BDip/iJfD6T8Hp74rKcLG8hDcI/I27rwHOAz5pZmvHnmBmFWaWP+65FROM9VNg8/gnzSwV+C7wZmAt8B4zW2tm683slnFHRXQ+loiISHLLzMykurqadevWUV5ePrcSqSiJWQLl7jXu/njk5w5gLzC+9vrFwM1mlgVgZh8DvjPBWPcDzRNMcw5wMLKS1A/cAFzp7n90963jjvrpfA4z22Zm18yJDXgiIjKnZGRksHjxYtavX09FRQUpUb5TbTaLyzdlZtXABuCRsc+7+43AHcANZvY+4CrgnVMYeiHw8pjHR3ltkjY2jlIz+wGwwcw+P/7xRO9x953u/vHCwsIphCUiIpI80tPTWbRoEevWraOyslKJ1CTEfBO5meUBvwH+2t1fU5DC3f/JzG4Avg8sd/fOqQw/wXPH3RXn7k3AJ8Y9Pf6xiIjInJSenk5VVRXz5s2jrq6OhoYGhoaGwg4rIcU0xTSzdILk6Zfu/p/HOedCYB3wW+DqKU5xFFg05nEVcGwaoYqIiEhEWloaCxcuZP369SxYsIDU1Ni3Rkk2sbwLz4AfA3vd/ZvHOWcD8CPgSuDDQImZ/cMUpnkMWGlmS80sA3g3sGNmkYuIiAhAamoq8+fPZ/369SxcuJC0tDlV/eiEYrkCdT7wAeASM3sycmwZd04O8A53f8Hdh4EPAofHD2Rm1wMPAavM7KiZfQTA3QeBTwF3EmxS/7W7Pxu7jyQiIjL3pKamMm/ePNavX09VVRXp6elhhxQ6mxOFtKJg48aNvnv37rDDEBERCd3w8DBNTU3U1tbS398fdjhTUl1dPVIDa4+7b5zuOFqLExERkSlJSUmhvLycsrKy0USqr68v7LDiSgmUiIiITIuZUVZWRmlpKc3NzdTW1tLb2xt2WHGhBEpERERmxMwoLS2lpKSElpYWampqZn0ipQRKREREosLMKCkpeVUi1dPTE3ZYMaEESkRERKKuuLiY4uJiWltbqampobu7O+yQokoJlIiIiMRMUVERRUVFtLW1UVNTQ1dXV9ghRYUSKBEREYm5wsJCCgsLaW9vp6amhs7OqXRuSzxKoERERCRuCgoKKCgooLOzk5qaGtrbX9MmNykogRIREZG4y8vLY+XKlXR1dVFTU0NbW1vYIU2JEigREREJTW5uLitWrKC7u5uamhpaW1vDDmlSlECJiIhI6HJycli+fDk9PT3U1NTQ0tISdkgnpARKREREEkZ2djbLli2jt7eXmpoampubww5pQilhByAiIiIyXlZWFkuXLuXUU08daf4bdkivogRKREREElZWVhbV1dWceuqplJWVJUwipQRKREREEl5mZiZLlixh3bp1lJeXh55IKYESERGRpJGRkcHixYtZt24dFRUVpKSEk8oogRIREZGkk5GRwaJFi1i3bh2VlZVxT6SUQImIiEjSSk9Pp6qqivXr1zNv3ry4JVIqYyAiIiJJLy0tjYULF1JZWUl9fT319fUMDQ3Fbr6YjSwiIiISZ2lpaSxYsGA0kaqrq4tJIqUESkRERGad1NRU5s+fT0VFxeiK1ODgYNTGVwIlIiIis9ZIIjWyIpWWFp3URwmUiIiIzHopKSnMmzcveuNFbSQRERGROUIJlIiIiMgUKYESERERmSIlUCIiIiJTpARKREREZIqUQImIiIhMkRIoERERkSlSAiUiIiIyRUqgRERERKZICZSIiIjIFCmBEhEREZkic/ewY0gKZtYB7A87DpmVCoG2sIOY5ebyd5zsnz3R40+U+MKIIx5zxnKOVe6eP903q5nw5O13941hByGzj5ld4+4fDzuO2Wwuf8fJ/tkTPf5EiS+MOOIxZyznMLPdM3m/LuGJhG9n2AHMAXP5O072z57o8SdKfGHEEY85E+X7fQ1dwpskM9utFSgREZHZYaZ/r2sFavKuCTsAERERiZoZ/b0e9xWoyGbskUkt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\n",
      "text/plain": [
       "<Figure size 648x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_sed, ax_residuals = analysis.flux_points.plot_fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24dc0da8",
   "metadata": {},
   "source": [
    "The flux points can be exported to a fits table following the format defined [here](https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/flux_points/index.html) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5d15746b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:37:18.913472Z",
     "iopub.status.busy": "2022-06-17T21:37:18.912789Z",
     "iopub.status.idle": "2022-06-17T21:37:19.032908Z",
     "shell.execute_reply": "2022-06-17T21:37:19.031821Z"
    }
   },
   "outputs": [],
   "source": [
    "filename = path / \"flux-points.fits\"\n",
    "analysis.flux_points.write(filename, overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f5062b",
   "metadata": {},
   "source": [
    "To check the fit is correct, we compute the map of the sqrt_ts of the excess counts above the current model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cbb40bcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-17T21:37:19.037992Z",
     "iopub.status.busy": "2022-06-17T21:37:19.037465Z",
     "iopub.status.idle": "2022-06-17T21:37:19.678500Z",
     "shell.execute_reply": "2022-06-17T21:37:19.677208Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing excess maps.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis.get_excess_map()\n",
    "analysis.excess_map[\"sqrt_ts\"].plot(\n",
    "    add_cbar=True, cmap=\"RdBu\", vmin=-5, vmax=5\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ade4acd",
   "metadata": {},
   "source": [
    "## What's next\n",
    "\n",
    "You can look at the same analysis without the high level interface in [analysis_2](analysis_2.ipynb)\n",
    "\n",
    "You can see how to perform a 1D spectral analysis of the same data in [spectral analysis](../analysis/1D/spectral_analysis.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26162da8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "nbsphinx": {
   "orphan": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "03d1dc7654d1461cb755405623ce216c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2d130c2ea42945cc88210840b521f150": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4e6dd959c4274a3ba0d8bc1ec0fdcc0b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_ad580e20b64b4502b1454c1854d4431a",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 432x288 with 1 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "848309fb7611443a80beebc27893c384": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "ad580e20b64b4502b1454c1854d4431a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aea4d571779c4486b565c7687ed09ef3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": "initial"
      }
     },
     "b9898e28abc54e4e832387d520cacd55": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d4181df3f2224b378af11f9b8c8dbf00",
        "IPY_MODEL_c26b24c68a2a42f696df6e4504d52fa9",
        "IPY_MODEL_4e6dd959c4274a3ba0d8bc1ec0fdcc0b"
       ],
       "layout": "IPY_MODEL_03d1dc7654d1461cb755405623ce216c"
      }
     },
     "c26b24c68a2a42f696df6e4504d52fa9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "RadioButtonsModel",
       "_options_labels": [
        "linear",
        "sqrt",
        "log"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "RadioButtonsView",
       "description": "Select stretch:",
       "description_tooltip": null,
       "disabled": false,
       "index": 1,
       "layout": "IPY_MODEL_2d130c2ea42945cc88210840b521f150",
       "style": "IPY_MODEL_aea4d571779c4486b565c7687ed09ef3"
      }
     },
     "d4181df3f2224b378af11f9b8c8dbf00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SelectionSliderModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "SelectionSliderModel",
       "_options_labels": [
        "1.00 TeV - 1.26 TeV",
        "1.26 TeV - 1.58 TeV",
        "1.58 TeV - 2.00 TeV",
        "2.00 TeV - 2.51 TeV",
        "2.51 TeV - 3.16 TeV",
        "3.16 TeV - 3.98 TeV",
        "3.98 TeV - 5.01 TeV",
        "5.01 TeV - 6.31 TeV",
        "6.31 TeV - 7.94 TeV",
        "7.94 TeV - 10.0 TeV"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "SelectionSliderView",
       "continuous_update": false,
       "description": "Select energy:",
       "description_tooltip": null,
       "disabled": false,
       "index": 0,
       "layout": "IPY_MODEL_f7574c5f836d4817b5231fad79308bd3",
       "orientation": "horizontal",
       "readout": true,
       "style": "IPY_MODEL_848309fb7611443a80beebc27893c384"
      }
     },
     "f7574c5f836d4817b5231fad79308bd3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
