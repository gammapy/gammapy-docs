{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e5e18a78",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20?urlpath=lab/tree/tutorials/analysis/time/light_curve.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../../_downloads/notebooks-0.20.tar).\n",
    "- **Source files:**\n",
    "[light_curve.ipynb](../../../_static/notebooks/light_curve.ipynb) |\n",
    "[light_curve.py](../../../_static/notebooks/light_curve.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4da67254",
   "metadata": {},
   "source": [
    "# Light curves\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of the high level interface to perform data reduction, see [first gammapy analysis with the high level interface tutorial](../../starting/analysis_1.ipynb)\n",
    "\n",
    "## Context\n",
    "\n",
    "This tutorial presents how light curve extraction is performed in gammapy, i.e. how to measure the flux of a source\n",
    "in different time bins.\n",
    "\n",
    "Cherenkov telescopes usually work with observing runs and distribute data according to this basic time interval. A typical use case is to look for variability of a source on various time binnings: observation run-wise binning, nightly, weekly etc.\n",
    "\n",
    "**Objective: The Crab nebula is not known to be variable at TeV energies, so we expect constant brightness within statistical and systematic errors. Compute per-observation and nightly fluxes of the four Crab nebula observations from the H.E.S.S. first public test data release [o](https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/) to check it.**\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "We will demonstrate how to compute a `~gammapy.estimators.LightCurve` from 3D reduced datasets (`~gammapy.datasets.MapDataset`) as well as 1D ON-OFF spectral datasets (`~gammapy.datasets.SpectrumDatasetOnOff`). \n",
    "\n",
    "The data reduction will be performed with the high level interface for the data reduction. Then we will use the `~gammapy.estimators.LightCurveEstimator` class, which  is able to extract a light curve independently of the dataset type. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1863dc3",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some general imports..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0e5995a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:38.715573Z",
     "iopub.status.busy": "2022-05-12T21:49:38.715456Z",
     "iopub.status.idle": "2022-05-12T21:49:39.991535Z",
     "shell.execute_reply": "2022-05-12T21:49:39.990501Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "import logging\n",
    "\n",
    "from astropy.time import Time\n",
    "\n",
    "log = logging.getLogger(__name__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fdfcadc",
   "metadata": {},
   "source": [
    "Now let's import gammapy specific classes and functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "18290806",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:39.997521Z",
     "iopub.status.busy": "2022-05-12T21:49:39.997361Z",
     "iopub.status.idle": "2022-05-12T21:49:41.099178Z",
     "shell.execute_reply": "2022-05-12T21:49:41.098156Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import PowerLawSpectralModel\n",
    "from gammapy.modeling.models import PointSpatialModel\n",
    "from gammapy.modeling.models import SkyModel, Models\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import LightCurveEstimator\n",
    "from gammapy.analysis import Analysis, AnalysisConfig"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26c2155b",
   "metadata": {},
   "source": [
    "## Analysis configuration \n",
    "For the 1D and 3D extraction, we will use the same CrabNebula configuration than in the notebook analysis_1.ipynb using the high level interface of Gammapy.\n",
    "\n",
    "From the high level interface, the data reduction for those observations is performed as followed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "306f55b3",
   "metadata": {},
   "source": [
    "### Building the 3D analysis configuration\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7bdb13e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:41.109537Z",
     "iopub.status.busy": "2022-05-12T21:49:41.108867Z",
     "iopub.status.idle": "2022-05-12T21:49:41.133594Z",
     "shell.execute_reply": "2022-05-12T21:49:41.130997Z"
    }
   },
   "outputs": [],
   "source": [
    "conf_3d = AnalysisConfig()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4cd165f",
   "metadata": {},
   "source": [
    "#### Definition of the data selection\n",
    "\n",
    "Here we use the Crab runs from the HESS DL3 data release 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3745acb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:41.144227Z",
     "iopub.status.busy": "2022-05-12T21:49:41.143515Z",
     "iopub.status.idle": "2022-05-12T21:49:41.159009Z",
     "shell.execute_reply": "2022-05-12T21:49:41.157219Z"
    }
   },
   "outputs": [],
   "source": [
    "conf_3d.observations.obs_ids = [23523, 23526, 23559, 23592]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4450f322",
   "metadata": {},
   "source": [
    "#### Definition of the dataset geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ed3d3d18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:41.164795Z",
     "iopub.status.busy": "2022-05-12T21:49:41.164294Z",
     "iopub.status.idle": "2022-05-12T21:49:41.172474Z",
     "shell.execute_reply": "2022-05-12T21:49:41.169403Z"
    }
   },
   "outputs": [],
   "source": [
    "# We want a 3D analysis\n",
    "conf_3d.datasets.type = \"3d\"\n",
    "\n",
    "# We want to extract the data by observation and therefore to not stack them\n",
    "conf_3d.datasets.stack = False\n",
    "\n",
    "# Here is the WCS geometry of the Maps\n",
    "conf_3d.datasets.geom.wcs.skydir = dict(\n",
    "    frame=\"icrs\", lon=83.63308 * u.deg, lat=22.01450 * u.deg\n",
    ")\n",
    "conf_3d.datasets.geom.wcs.binsize = 0.02 * u.deg\n",
    "conf_3d.datasets.geom.wcs.width = dict(width=1 * u.deg, height=1 * u.deg)\n",
    "\n",
    "# We define a value for the IRF Maps binsize\n",
    "conf_3d.datasets.geom.wcs.binsize_irf = 0.2 * u.deg\n",
    "\n",
    "# Define energy binning for the Maps\n",
    "conf_3d.datasets.geom.axes.energy = dict(\n",
    "    min=0.7 * u.TeV, max=10 * u.TeV, nbins=5\n",
    ")\n",
    "conf_3d.datasets.geom.axes.energy_true = dict(\n",
    "    min=0.3 * u.TeV, max=20 * u.TeV, nbins=20\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a5b30a8",
   "metadata": {},
   "source": [
    "### Run the 3D data reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "371fc6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:41.180635Z",
     "iopub.status.busy": "2022-05-12T21:49:41.180254Z",
     "iopub.status.idle": "2022-05-12T21:49:44.593850Z",
     "shell.execute_reply": "2022-05-12T21:49:44.593017Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting logging config: {'level': 'INFO', 'filename': None, 'filemode': None, 'format': None, 'datefmt': None}\n",
      "Fetching observations.\n",
      "Observations selected: 4 out of 4.\n",
      "Number of selected observations: 4\n",
      "Creating reference dataset and makers.\n",
      "Creating the background Maker.\n",
      "No background maker set. Check configuration.\n",
      "Start the data reduction loop.\n",
      "Computing dataset for observation 23523\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Computing dataset for observation 23526\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Computing dataset for observation 23559\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n",
      "Computing dataset for observation 23592\n",
      "Running MapDatasetMaker\n",
      "Running SafeMaskMaker\n"
     ]
    }
   ],
   "source": [
    "analysis_3d = Analysis(conf_3d)\n",
    "analysis_3d.get_observations()\n",
    "analysis_3d.get_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6039d2ed",
   "metadata": {},
   "source": [
    "### Define the model to be used\n",
    "\n",
    "Here we don't try to fit the model parameters to the whole dataset, but we use predefined values instead. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "03b3299d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:44.599669Z",
     "iopub.status.busy": "2022-05-12T21:49:44.599289Z",
     "iopub.status.idle": "2022-05-12T21:49:44.627221Z",
     "shell.execute_reply": "2022-05-12T21:49:44.625667Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=target_position.ra, lat_0=target_position.dec, frame=\"icrs\"\n",
    ")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model, name=\"crab\"\n",
    ")\n",
    "# Now we freeze these parameters that we don't want the light curve estimator to change\n",
    "sky_model.parameters[\"index\"].frozen = True\n",
    "sky_model.parameters[\"lon_0\"].frozen = True\n",
    "sky_model.parameters[\"lat_0\"].frozen = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32d0bf0",
   "metadata": {},
   "source": [
    "We assign them the model to be fitted to each dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce4106b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:44.632250Z",
     "iopub.status.busy": "2022-05-12T21:49:44.631952Z",
     "iopub.status.idle": "2022-05-12T21:49:44.643328Z",
     "shell.execute_reply": "2022-05-12T21:49:44.642522Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading model.\n",
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : crab\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : PointSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                 (frozen):      2.702                   \n",
      "    amplitude                     :   4.71e-11   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "    lon_0                 (frozen):     83.633       deg         \n",
      "    lat_0                 (frozen):     22.015       deg         \n",
      "\n",
      "Component 1: FoVBackgroundModel\n",
      "\n",
      "  Name                      : MC_6mfCo-bkg\n",
      "  Datasets names            : ['MC_6mfCo']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "Component 2: FoVBackgroundModel\n",
      "\n",
      "  Name                      : XRKs3EVL-bkg\n",
      "  Datasets names            : ['XRKs3EVL']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "Component 3: FoVBackgroundModel\n",
      "\n",
      "  Name                      : BF3KNxcT-bkg\n",
      "  Datasets names            : ['BF3KNxcT']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "Component 4: FoVBackgroundModel\n",
      "\n",
      "  Name                      : NHA6yjbb-bkg\n",
      "  Datasets names            : ['NHA6yjbb']\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = Models([sky_model])\n",
    "analysis_3d.set_models(models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c2b5d4",
   "metadata": {},
   "source": [
    "## Light Curve estimation by observation\n",
    "\n",
    "We can now create the light curve estimator.\n",
    "\n",
    "We pass it the list of datasets and the name of the model component for which we want to build the light curve. \n",
    "We can optionally ask for parameters reoptimization during fit, that is most of the time to fit background normalization in each time bin. \n",
    "\n",
    "If we don't set any time interval, the `~gammapy.estimators.LightCurveEstimator` is determines the flux of each dataset and places it at the corresponding time in the light curve. \n",
    "Here one dataset equals to one observing run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5460e99e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:44.649254Z",
     "iopub.status.busy": "2022-05-12T21:49:44.648914Z",
     "iopub.status.idle": "2022-05-12T21:49:51.271528Z",
     "shell.execute_reply": "2022-05-12T21:49:51.268011Z"
    }
   },
   "outputs": [],
   "source": [
    "lc_maker_3d = LightCurveEstimator(\n",
    "    energy_edges=[1, 10] * u.TeV, source=\"crab\", reoptimize=False\n",
    ")\n",
    "lc_3d = lc_maker_3d.run(analysis_3d.datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7c007da",
   "metadata": {},
   "source": [
    "The LightCurve object contains a table which we can explore."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "35f9e5bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.305077Z",
     "iopub.status.busy": "2022-05-12T21:49:51.303625Z",
     "iopub.status.idle": "2022-05-12T21:49:51.837210Z",
     "shell.execute_reply": "2022-05-12T21:49:51.836077Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Time [iso]', ylabel='dnde (1 / (cm2 s TeV))'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc_3d.plot(axis_name=\"time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f0b74583",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.843065Z",
     "iopub.status.busy": "2022-05-12T21:49:51.842784Z",
     "iopub.status.idle": "2022-05-12T21:49:51.906157Z",
     "shell.execute_reply": "2022-05-12T21:49:51.905000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=4</i>\n",
       "<table id=\"table6144365760\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>time_min</th><th>time_max</th><th>e_min [1]</th><th>e_max [1]</th><th>flux [1]</th><th>flux_err [1]</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th>TeV</th><th>TeV</th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>53343.922340092584</td><td>53343.94186555555</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.0380210271197794e-11</td><td>2.1205833943560366e-12</td></tr>\n",
       "<tr><td>53343.954215092584</td><td>53343.97369425925</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.061095350246212e-11</td><td>2.1406685689437862e-12</td></tr>\n",
       "<tr><td>53345.96198129629</td><td>53345.98149518518</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.1806916394335914e-11</td><td>2.78937151632376e-12</td></tr>\n",
       "<tr><td>53347.91319657407</td><td>53347.932710462956</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.5084878816023824e-11</td><td>2.914172443640524e-12</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "     time_min           time_max          e_min [1]         e_max [1]             flux [1]             flux_err [1]     \n",
       "                                             TeV               TeV              1 / (cm2 s)            1 / (cm2 s)      \n",
       "     float64            float64            float64           float64              float64                float64        \n",
       "------------------ ------------------ ----------------- ------------------ ---------------------- ----------------------\n",
       "53343.922340092584  53343.94186555555 1.191457161449437 10.000000000000002 2.0380210271197794e-11 2.1205833943560366e-12\n",
       "53343.954215092584  53343.97369425925 1.191457161449437 10.000000000000002  2.061095350246212e-11 2.1406685689437862e-12\n",
       " 53345.96198129629  53345.98149518518 1.191457161449437 10.000000000000002 2.1806916394335914e-11   2.78937151632376e-12\n",
       " 53347.91319657407 53347.932710462956 1.191457161449437 10.000000000000002 2.5084878816023824e-11  2.914172443640524e-12"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table = lc_3d.to_table(format=\"lightcurve\", sed_type=\"flux\")\n",
    "table[\"time_min\", \"time_max\", \"e_min\", \"e_max\", \"flux\", \"flux_err\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "119e987e",
   "metadata": {},
   "source": [
    "## Running the light curve extraction in 1D"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "984489eb",
   "metadata": {},
   "source": [
    "### Building the 1D analysis configuration\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f99be5e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.911705Z",
     "iopub.status.busy": "2022-05-12T21:49:51.911390Z",
     "iopub.status.idle": "2022-05-12T21:49:51.917772Z",
     "shell.execute_reply": "2022-05-12T21:49:51.916685Z"
    }
   },
   "outputs": [],
   "source": [
    "conf_1d = AnalysisConfig()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b553432f",
   "metadata": {},
   "source": [
    "#### Definition of the data selection\n",
    "\n",
    "Here we use the Crab runs from the HESS DL3 data release 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "05d73e44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.922390Z",
     "iopub.status.busy": "2022-05-12T21:49:51.921845Z",
     "iopub.status.idle": "2022-05-12T21:49:51.927045Z",
     "shell.execute_reply": "2022-05-12T21:49:51.926205Z"
    }
   },
   "outputs": [],
   "source": [
    "conf_1d.observations.obs_ids = [23523, 23526, 23559, 23592]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69fa58d7",
   "metadata": {},
   "source": [
    "#### Definition of the dataset geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c0ef28da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.931837Z",
     "iopub.status.busy": "2022-05-12T21:49:51.931194Z",
     "iopub.status.idle": "2022-05-12T21:49:51.940510Z",
     "shell.execute_reply": "2022-05-12T21:49:51.939457Z"
    }
   },
   "outputs": [],
   "source": [
    "# We want a 1D analysis\n",
    "conf_1d.datasets.type = \"1d\"\n",
    "\n",
    "# We want to extract the data by observation and therefore to not stack them\n",
    "conf_1d.datasets.stack = False\n",
    "\n",
    "# Here we define the ON region and make sure that PSF leakage is corrected\n",
    "conf_1d.datasets.on_region = dict(\n",
    "    frame=\"icrs\",\n",
    "    lon=83.63308 * u.deg,\n",
    "    lat=22.01450 * u.deg,\n",
    "    radius=0.1 * u.deg,\n",
    ")\n",
    "conf_1d.datasets.containment_correction = True\n",
    "\n",
    "# Finally we define the energy binning for the spectra\n",
    "conf_1d.datasets.geom.axes.energy = dict(\n",
    "    min=0.7 * u.TeV, max=10 * u.TeV, nbins=5\n",
    ")\n",
    "conf_1d.datasets.geom.axes.energy_true = dict(\n",
    "    min=0.3 * u.TeV, max=20 * u.TeV, nbins=20\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12827f44",
   "metadata": {},
   "source": [
    "### Run the 1D data reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "35118d1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:51.946337Z",
     "iopub.status.busy": "2022-05-12T21:49:51.945753Z",
     "iopub.status.idle": "2022-05-12T21:49:53.612253Z",
     "shell.execute_reply": "2022-05-12T21:49:53.610034Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting logging config: {'level': 'INFO', 'filename': None, 'filemode': None, 'format': None, 'datefmt': None}\n",
      "Fetching observations.\n",
      "Observations selected: 4 out of 4.\n",
      "Number of selected observations: 4\n",
      "Reducing spectrum datasets.\n",
      "Creating the background Maker.\n",
      "No background maker set. Check configuration.\n"
     ]
    }
   ],
   "source": [
    "analysis_1d = Analysis(conf_1d)\n",
    "analysis_1d.get_observations()\n",
    "analysis_1d.get_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab252db9",
   "metadata": {},
   "source": [
    "### Define the model to be used\n",
    "\n",
    "Here we don't try to fit the model parameters to the whole dataset, but we use predefined values instead. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b7f9877d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:53.636264Z",
     "iopub.status.busy": "2022-05-12T21:49:53.635011Z",
     "iopub.status.idle": "2022-05-12T21:49:53.666152Z",
     "shell.execute_reply": "2022-05-12T21:49:53.662287Z"
    }
   },
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "\n",
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=2.702,\n",
    "    amplitude=4.712e-11 * u.Unit(\"1 / (cm2 s TeV)\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "sky_model = SkyModel(spectral_model=spectral_model, name=\"crab\")\n",
    "# Now we freeze these parameters that we don't want the light curve estimator to change\n",
    "sky_model.parameters[\"index\"].frozen = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3caf1c3e",
   "metadata": {},
   "source": [
    "We assign the model to be fitted to each dataset. We can use the same `~gammapy.modeling.models.SkyModel` as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6440902",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:53.685513Z",
     "iopub.status.busy": "2022-05-12T21:49:53.684665Z",
     "iopub.status.idle": "2022-05-12T21:49:53.709804Z",
     "shell.execute_reply": "2022-05-12T21:49:53.708805Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading model.\n",
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : crab\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : \n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                 (frozen):      2.702                   \n",
      "    amplitude                     :   4.71e-11   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = Models([sky_model])\n",
    "analysis_1d.set_models(models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6948b905",
   "metadata": {},
   "source": [
    "### Extracting the light curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "24a76e12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:53.718289Z",
     "iopub.status.busy": "2022-05-12T21:49:53.717978Z",
     "iopub.status.idle": "2022-05-12T21:49:54.391050Z",
     "shell.execute_reply": "2022-05-12T21:49:54.389530Z"
    }
   },
   "outputs": [],
   "source": [
    "lc_maker_1d = LightCurveEstimator(\n",
    "    energy_edges=[1, 10] * u.TeV, source=\"crab\", reoptimize=False\n",
    ")\n",
    "lc_1d = lc_maker_1d.run(analysis_1d.datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7351a354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:54.405741Z",
     "iopub.status.busy": "2022-05-12T21:49:54.404850Z",
     "iopub.status.idle": "2022-05-12T21:49:54.425447Z",
     "shell.execute_reply": "2022-05-12T21:49:54.423765Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['energy', 'time']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lc_1d.geom.axes.names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cdcdd22e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:54.444807Z",
     "iopub.status.busy": "2022-05-12T21:49:54.444381Z",
     "iopub.status.idle": "2022-05-12T21:49:54.523387Z",
     "shell.execute_reply": "2022-05-12T21:49:54.522013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=4</i>\n",
       "<table id=\"table6149957472\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>time_min</th><th>time_max</th><th>e_ref [1]</th><th>e_min [1]</th><th>e_max [1]</th><th>flux [1]</th><th>flux_err [1]</th><th>ts [1]</th><th>sqrt_ts [1]</th><th>npred [1,4]</th><th>npred_excess [1,4]</th><th>stat [1]</th><th>is_ul [1]</th><th>counts [1,4]</th><th>success [1]</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th>TeV</th><th>TeV</th><th>TeV</th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th><th>bool</th></tr></thead>\n",
       "<tr><td>53343.922340092584</td><td>53343.94186555555</td><td>3.4517490659800822</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.2143915082283826e-11</td><td>2.46043438709985e-12</td><td>9669.93681384043</td><td>98.3358368746635</td><td>80.99951140280142 .. nan</td><td>80.99950408935547 .. nan</td><td>-344.46719038026515</td><td>False</td><td>81.0 .. nan</td><td>True</td></tr>\n",
       "<tr><td>53343.954215092584</td><td>53343.97369425925</td><td>3.4517490659800822</td><td>1.191457161449437</td><td>10.000000000000002</td><td>1.8788302509399298e-11</td><td>2.2297607397555523e-12</td><td>8464.484921386465</td><td>92.00263540457124</td><td>nan .. nan</td><td>nan .. nan</td><td>-290.30784403249163</td><td>False</td><td>nan .. nan</td><td>True</td></tr>\n",
       "<tr><td>53345.96198129629</td><td>53345.98149518518</td><td>3.4517490659800822</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.1553175393191787e-11</td><td>3.0180475449692493e-12</td><td>6065.962232361473</td><td>77.88428745492554</td><td>nan .. nan</td><td>nan .. nan</td><td>-194.37024721988715</td><td>False</td><td>nan .. nan</td><td>True</td></tr>\n",
       "<tr><td>53347.91319657407</td><td>53347.932710462956</td><td>3.4517490659800822</td><td>1.191457161449437</td><td>10.000000000000002</td><td>2.485367385298985e-11</td><td>3.2356719941454455e-12</td><td>7019.342401645411</td><td>83.78151587101662</td><td>nan .. 58.99955742868726</td><td>nan .. 58.99955749511719</td><td>-226.71637961887058</td><td>False</td><td>nan .. 59.0</td><td>True</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "     time_min           time_max          e_ref [1]          e_min [1]         e_max [1]             flux [1]        ...    npred_excess [1,4]          stat [1]      is_ul [1] counts [1,4] success [1]\n",
       "                                             TeV                TeV               TeV              1 / (cm2 s)       ...                                                                                \n",
       "     float64            float64            float64            float64           float64              float64         ...         float64                float64          bool     float64        bool   \n",
       "------------------ ------------------ ------------------ ----------------- ------------------ ---------------------- ... ------------------------ ------------------- --------- ------------ -----------\n",
       "53343.922340092584  53343.94186555555 3.4517490659800822 1.191457161449437 10.000000000000002 2.2143915082283826e-11 ... 80.99950408935547 .. nan -344.46719038026515     False  81.0 .. nan        True\n",
       "53343.954215092584  53343.97369425925 3.4517490659800822 1.191457161449437 10.000000000000002 1.8788302509399298e-11 ...               nan .. nan -290.30784403249163     False   nan .. nan        True\n",
       " 53345.96198129629  53345.98149518518 3.4517490659800822 1.191457161449437 10.000000000000002 2.1553175393191787e-11 ...               nan .. nan -194.37024721988715     False   nan .. nan        True\n",
       " 53347.91319657407 53347.932710462956 3.4517490659800822 1.191457161449437 10.000000000000002  2.485367385298985e-11 ... nan .. 58.99955749511719 -226.71637961887058     False  nan .. 59.0        True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lc_1d.to_table(sed_type=\"flux\", format=\"lightcurve\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d212ca33",
   "metadata": {},
   "source": [
    "### Compare results\n",
    "\n",
    "Finally we compare the result for the 1D and 3D lightcurve in a single figure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "59adc2c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:54.529217Z",
     "iopub.status.busy": "2022-05-12T21:49:54.528680Z",
     "iopub.status.idle": "2022-05-12T21:49:54.931827Z",
     "shell.execute_reply": "2022-05-12T21:49:54.929275Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Compute per-observation and nightly fluxes of four Crab nebula observations."
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x16cbf05e0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = lc_1d.plot(marker=\"o\", label=\"1D\")\n",
    "lc_3d.plot(ax=ax, marker=\"o\", label=\"3D\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbde5e44",
   "metadata": {},
   "source": [
    "## Night-wise LC estimation\n",
    "\n",
    "Here we want to extract a night curve per night. We define the time intervals that cover the three nights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a0f4712d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:54.960746Z",
     "iopub.status.busy": "2022-05-12T21:49:54.959932Z",
     "iopub.status.idle": "2022-05-12T21:49:54.964898Z",
     "shell.execute_reply": "2022-05-12T21:49:54.963765Z"
    }
   },
   "outputs": [],
   "source": [
    "time_intervals = [\n",
    "    Time([53343.5, 53344.5], format=\"mjd\", scale=\"utc\"),\n",
    "    Time([53345.5, 53346.5], format=\"mjd\", scale=\"utc\"),\n",
    "    Time([53347.5, 53348.5], format=\"mjd\", scale=\"utc\"),\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86784c1f",
   "metadata": {},
   "source": [
    "To compute the LC on the time intervals defined above, we pass the `LightCurveEstimator` the list of time intervals. \n",
    "\n",
    "Internally, datasets are grouped per time interval and a flux extraction is performed for each group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e719ab3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:49:54.970697Z",
     "iopub.status.busy": "2022-05-12T21:49:54.970372Z",
     "iopub.status.idle": "2022-05-12T21:49:58.513804Z",
     "shell.execute_reply": "2022-05-12T21:49:58.510930Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc_maker_1d = LightCurveEstimator(\n",
    "    energy_edges=[1, 10] * u.TeV,\n",
    "    time_intervals=time_intervals,\n",
    "    source=\"crab\",\n",
    "    reoptimize=False,\n",
    "    selection_optional=\"all\",\n",
    ")\n",
    "\n",
    "nightwise_lc = lc_maker_1d.run(analysis_1d.datasets)\n",
    "\n",
    "nightwise_lc.plot(color=\"tab:orange\")\n",
    "ax = nightwise_lc.plot_ts_profiles()\n",
    "ax.set_ylim(1e-12, 3e-12);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d40b521d",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "When sources are bright enough to look for variability at small time scales, the per-observation time binning is no longer relevant. One can easily extend the light curve estimation approach presented above to any time binning. This is demonstrated in the [following tutorial](light_curve_flare.ipynb) which shows the extraction of the lightcurve of an AGN flare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13aadcd3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
