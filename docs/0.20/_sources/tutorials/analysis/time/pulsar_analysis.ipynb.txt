{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bb25e52c",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20?urlpath=lab/tree/tutorials/analysis/time/pulsar_analysis.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../../_downloads/notebooks-0.20.tar).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../../../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../../../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dfa9ba6",
   "metadata": {},
   "source": [
    "# Pulsar analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeea2979",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdecadea",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4c5d5b4",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e35f27c",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6b145a63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:08.537831Z",
     "iopub.status.busy": "2022-05-12T21:50:08.536863Z",
     "iopub.status.idle": "2022-05-12T21:50:09.303174Z",
     "shell.execute_reply": "2022-05-12T21:50:09.300099Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6812c0c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:09.312277Z",
     "iopub.status.busy": "2022-05-12T21:50:09.311982Z",
     "iopub.status.idle": "2022-05-12T21:50:10.483113Z",
     "shell.execute_reply": "2022-05-12T21:50:10.482373Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.makers import (\n",
    "    SafeMaskMaker,\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    ")\n",
    "from gammapy.maps import Map, WcsGeom, MapAxis, RegionGeom\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.datasets import Datasets, SpectrumDataset, FluxPointsDataset\n",
    "from gammapy.modeling.models import PowerLawSpectralModel, SkyModel\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.estimators import FluxPointsEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "452aa33e",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c86996d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.492078Z",
     "iopub.status.busy": "2022-05-12T21:50:10.491104Z",
     "iopub.status.idle": "2022-05-12T21:50:10.517023Z",
     "shell.execute_reply": "2022-05-12T21:50:10.513923Z"
    }
   },
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2bab77c",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5460b58d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.532049Z",
     "iopub.status.busy": "2022-05-12T21:50:10.529855Z",
     "iopub.status.idle": "2022-05-12T21:50:10.598979Z",
     "shell.execute_reply": "2022-05-12T21:50:10.591713Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 101430\n",
      "  Event rate       : 56.350 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 1.52e+02 TeV\n",
      "  Median energy    : 1.00e-01 TeV\n",
      "\n",
      "  Max. offset      : 5.0 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60cabc78",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "02f8f26a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.613419Z",
     "iopub.status.busy": "2022-05-12T21:50:10.612980Z",
     "iopub.status.idle": "2022-05-12T21:50:10.684244Z",
     "shell.execute_reply": "2022-05-12T21:50:10.683462Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList\n",
      "---------\n",
      "\n",
      "  Instrument       : None\n",
      "  Telescope        : CTA\n",
      "  Obs. ID          : 111630\n",
      "\n",
      "  Number of events : 843\n",
      "  Event rate       : 0.468 1 / s\n",
      "\n",
      "  Time start       : 59300.833333333336\n",
      "  Time stop        : 59300.854166666664\n",
      "\n",
      "  Min. energy      : 3.00e-02 TeV\n",
      "  Max. energy      : 4.33e+01 TeV\n",
      "  Median energy    : 1.07e-01 TeV\n",
      "\n",
      "  Max. offset      : 1.7 deg\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39ed6a0",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5649d33f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.690875Z",
     "iopub.status.busy": "2022-05-12T21:50:10.690602Z",
     "iopub.status.idle": "2022-05-12T21:50:10.708280Z",
     "shell.execute_reply": "2022-05-12T21:50:10.707137Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ca23100",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5e28d56",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c822873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.724138Z",
     "iopub.status.busy": "2022-05-12T21:50:10.723345Z",
     "iopub.status.idle": "2022-05-12T21:50:10.732271Z",
     "shell.execute_reply": "2022-05-12T21:50:10.731322Z"
    }
   },
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fca9c6a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.740308Z",
     "iopub.status.busy": "2022-05-12T21:50:10.739569Z",
     "iopub.status.idle": "2022-05-12T21:50:10.886622Z",
     "shell.execute_reply": "2022-05-12T21:50:10.885729Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Produce a phasogram, phased-resolved maps and spectra in pulsar analysis."
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d432993",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "61172ac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.910842Z",
     "iopub.status.busy": "2022-05-12T21:50:10.910505Z",
     "iopub.status.idle": "2022-05-12T21:50:10.946090Z",
     "shell.execute_reply": "2022-05-12T21:50:10.928750Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3979bdb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.961187Z",
     "iopub.status.busy": "2022-05-12T21:50:10.960801Z",
     "iopub.status.idle": "2022-05-12T21:50:10.974186Z",
     "shell.execute_reply": "2022-05-12T21:50:10.973153Z"
    }
   },
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "17fb26f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:10.987037Z",
     "iopub.status.busy": "2022-05-12T21:50:10.986316Z",
     "iopub.status.idle": "2022-05-12T21:50:11.378792Z",
     "shell.execute_reply": "2022-05-12T21:50:11.372747Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7843782",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db55fb28",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a5a36fbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:11.480192Z",
     "iopub.status.busy": "2022-05-12T21:50:11.479293Z",
     "iopub.status.idle": "2022-05-12T21:50:11.491084Z",
     "shell.execute_reply": "2022-05-12T21:50:11.488628Z"
    }
   },
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b97cdb14",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2f8a0d09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:11.498727Z",
     "iopub.status.busy": "2022-05-12T21:50:11.497699Z",
     "iopub.status.idle": "2022-05-12T21:50:11.508191Z",
     "shell.execute_reply": "2022-05-12T21:50:11.506642Z"
    }
   },
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "071cc313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:11.515080Z",
     "iopub.status.busy": "2022-05-12T21:50:11.514110Z",
     "iopub.status.idle": "2022-05-12T21:50:12.105524Z",
     "shell.execute_reply": "2022-05-12T21:50:12.099867Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d612502b",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42051559",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6c3d2d0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:12.128972Z",
     "iopub.status.busy": "2022-05-12T21:50:12.125891Z",
     "iopub.status.idle": "2022-05-12T21:50:12.677253Z",
     "shell.execute_reply": "2022-05-12T21:50:12.676510Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Invalid unit found in background table! Assuming (s-1 MeV-1 sr-1)\n",
      "No default upper safe energy threshold defined for obs 111630\n",
      "No default lower safe energy threshold defined for obs 111630\n"
     ]
    }
   ],
   "source": [
    "e_true = MapAxis.from_energy_bounds(\n",
    "    0.003, 10, 100, unit=\"TeV\", name=\"energy_true\"\n",
    ")\n",
    "e_reco = MapAxis.from_energy_bounds(0.01, 10, 30, unit=\"TeV\", name=\"energy\")\n",
    "\n",
    "\n",
    "geom = RegionGeom.create(region=on_region, axes=[e_reco])\n",
    "\n",
    "dataset_empty = SpectrumDataset.create(geom=geom, energy_axis_true=e_true)\n",
    "\n",
    "dataset_maker = SpectrumDatasetMaker()\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(dataset_empty, obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ea03e4",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d51b5c2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:12.684394Z",
     "iopub.status.busy": "2022-05-12T21:50:12.684054Z",
     "iopub.status.idle": "2022-05-12T21:50:13.811331Z",
     "shell.execute_reply": "2022-05-12T21:50:13.810501Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5d2aa47",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "69bb3879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:13.817450Z",
     "iopub.status.busy": "2022-05-12T21:50:13.817096Z",
     "iopub.status.idle": "2022-05-12T21:50:14.420038Z",
     "shell.execute_reply": "2022-05-12T21:50:14.414290Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 101\n",
      "\ttotal stat : 7.07\n",
      "\n",
      "CovarianceResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : hesse\n",
      "\tsuccess    : True\n",
      "\tmessage    : Hesse terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spectral_model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "model = SkyModel(spectral_model=spectral_model, name=\"vela psr\")\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "mask_fit = geom.energy_mask(energy_min=emin_fit, energy_max=emax_fit)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.models = model\n",
    "    dataset.mask_fit = mask_fit\n",
    "\n",
    "joint_fit = Fit()\n",
    "joint_result = joint_fit.run(datasets=datasets)\n",
    "\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d05ded6f",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "78e09a03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:14.449204Z",
     "iopub.status.busy": "2022-05-12T21:50:14.448855Z",
     "iopub.status.idle": "2022-05-12T21:50:17.599734Z",
     "shell.execute_reply": "2022-05-12T21:50:17.598877Z"
    }
   },
   "outputs": [],
   "source": [
    "energy_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.models = model\n",
    "\n",
    "fpe = FluxPointsEstimator(\n",
    "    energy_edges=energy_edges, source=\"vela psr\", selection_optional=\"all\"\n",
    ")\n",
    "\n",
    "flux_points = fpe.run(datasets=[dataset])\n",
    "flux_points.meta[\"ts_threshold_ul\"] = 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "864622ca",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1c5c3b7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:17.603875Z",
     "iopub.status.busy": "2022-05-12T21:50:17.603581Z",
     "iopub.status.idle": "2022-05-12T21:50:18.251430Z",
     "shell.execute_reply": "2022-05-12T21:50:18.250231Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x150cb78e0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax_spectrum, ax_residuals = flux_points_dataset.plot_fit()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residuals.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_bounds=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6faa8eea",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d460737",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
