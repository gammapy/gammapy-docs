{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "75a835c1",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20?urlpath=lab/tree/tutorials/api/fitting.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../_downloads/notebooks-0.20.tar).\n",
    "- **Source files:**\n",
    "[fitting.ipynb](../../_static/notebooks/fitting.ipynb) |\n",
    "[fitting.py](../../_static/notebooks/fitting.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87392038",
   "metadata": {},
   "source": [
    "# Fitting\n",
    "\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "- Knowledge of spectral analysis to produce 1D On-Off datasets, [see the following tutorial](../analysis/1D/spectral_analysis.ipynb)\n",
    "- Reading of pre-computed datasets [see the MWL tutorial](../analysis/3D/analysis_mwl.ipynb)\n",
    "- General knowledge on statistics and optimization methods\n",
    "\n",
    "## Proposed approach\n",
    "\n",
    "This is a hands-on tutorial to `~gammapy.modeling`, showing how to do perform a Fit in gammapy. The emphasis here is on interfacing the `Fit` class and inspecting the errors. To see an analysis example of how datasets and models interact, see the [model management notebook](model_management.ipynb). As an example, in this notebook, we are going to work with HESS data of the Crab Nebula and show in particular how to :\n",
    "- perform a spectral analysis\n",
    "- use different fitting backends\n",
    "- access covariance matrix information and parameter errors\n",
    "- compute likelihood profile\n",
    "- compute confidence contours\n",
    "\n",
    "See also: [Models gallery tutorial](models.ipynb) and `docs/modeling/index.rst`.\n",
    "\n",
    "\n",
    "## The setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23ce0a0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:51.865138Z",
     "iopub.status.busy": "2022-05-12T21:50:51.864289Z",
     "iopub.status.idle": "2022-05-12T21:50:53.813477Z",
     "shell.execute_reply": "2022-05-12T21:50:53.811640Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from astropy import units as u\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import StrMethodFormatter\n",
    "import scipy.stats as st\n",
    "from gammapy.modeling import Fit\n",
    "from gammapy.datasets import Datasets, SpectrumDatasetOnOff\n",
    "from gammapy.modeling.models import LogParabolaSpectralModel, SkyModel\n",
    "from gammapy.visualization.utils import plot_contour_line\n",
    "from itertools import combinations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e5014d3",
   "metadata": {},
   "source": [
    "## Model and dataset\n",
    "\n",
    "First we define the source model, here we need only a spectral model for which we choose a log-parabola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5b639bc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:53.835962Z",
     "iopub.status.busy": "2022-05-12T21:50:53.834303Z",
     "iopub.status.idle": "2022-05-12T21:50:53.880927Z",
     "shell.execute_reply": "2022-05-12T21:50:53.877336Z"
    }
   },
   "outputs": [],
   "source": [
    "crab_spectrum = LogParabolaSpectralModel(\n",
    "    amplitude=1e-11 / u.cm**2 / u.s / u.TeV,\n",
    "    reference=1 * u.TeV,\n",
    "    alpha=2.3,\n",
    "    beta=0.2,\n",
    ")\n",
    "\n",
    "crab_spectrum.alpha.max = 3\n",
    "crab_spectrum.alpha.min = 1\n",
    "crab_model = SkyModel(spectral_model=crab_spectrum, name=\"crab\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bedea74b",
   "metadata": {},
   "source": [
    "The data and background are read from pre-computed ON/OFF datasets of HESS observations, for simplicity we stack them together.\n",
    "Then we set the model and fit range to the resulting dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11e2e74b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:53.887107Z",
     "iopub.status.busy": "2022-05-12T21:50:53.886268Z",
     "iopub.status.idle": "2022-05-12T21:50:54.105085Z",
     "shell.execute_reply": "2022-05-12T21:50:54.104164Z"
    }
   },
   "outputs": [],
   "source": [
    "datasets = []\n",
    "for obs_id in [23523, 23526]:\n",
    "    dataset = SpectrumDatasetOnOff.read(\n",
    "        f\"$GAMMAPY_DATA/joint-crab/spectra/hess/pha_obs{obs_id}.fits\"\n",
    "    )\n",
    "    datasets.append(dataset)\n",
    "\n",
    "dataset_hess = Datasets(datasets).stack_reduce(name=\"HESS\")\n",
    "datasets = Datasets(datasets=[dataset_hess])\n",
    "\n",
    "# Set model and fit range\n",
    "dataset_hess.models = crab_model\n",
    "e_min = 0.66 * u.TeV\n",
    "e_max = 30 * u.TeV\n",
    "dataset_hess.mask_fit = dataset_hess.counts.geom.energy_mask(e_min, e_max)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5bc172d",
   "metadata": {},
   "source": [
    "## Fitting options\n",
    "\n",
    "\n",
    "\n",
    "First let's create a `Fit` instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff05ef3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:54.121539Z",
     "iopub.status.busy": "2022-05-12T21:50:54.120332Z",
     "iopub.status.idle": "2022-05-12T21:50:54.133573Z",
     "shell.execute_reply": "2022-05-12T21:50:54.132529Z"
    }
   },
   "outputs": [],
   "source": [
    "scipy_opts = {\n",
    "    \"method\": \"L-BFGS-B\",\n",
    "    \"options\": {\"ftol\": 1e-4, \"gtol\": 1e-05},\n",
    "    \"backend\": \"scipy\",\n",
    "}\n",
    "fit_scipy = Fit(store_trace=True, optimize_opts=scipy_opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc23d8e4",
   "metadata": {},
   "source": [
    "By default the fit is performed using MINUIT, you can select alternative optimizers and set their option using the `optimize_opts` argument of the `Fit.run()` method. In addition we have specified to store the trace of parameter values of the fit.\n",
    "\n",
    "Note that, for now, covaraince matrix and errors are computed only for the fitting with MINUIT. However depending on the problem other optimizers can better perform, so sometimes it can be useful to run a pre-fit with alternative optimization methods.\n",
    "\n",
    "For the \"scipy\" backend the available options are described in detail here:  \n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d8f5e050",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:54.140531Z",
     "iopub.status.busy": "2022-05-12T21:50:54.139729Z",
     "iopub.status.idle": "2022-05-12T21:50:54.489594Z",
     "shell.execute_reply": "2022-05-12T21:50:54.481157Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 287 ms, sys: 5.44 ms, total: 292 ms\n",
      "Wall time: 332 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "result_scipy = fit_scipy.run(datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ea90e65",
   "metadata": {},
   "source": [
    "For the \"sherpa\" backend you can choose the optimization algorithm between method = {\"simplex\",  \"levmar\", \"moncar\", \"gridsearch\"}.  \n",
    "Those methods are described and compared in detail on http://cxc.cfa.harvard.edu/sherpa/methods/index.html \n",
    "The available options of the optimization methods are described on the following page https://cxc.cfa.harvard.edu/sherpa/methods/opt_methods.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "efb95dfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:54.501242Z",
     "iopub.status.busy": "2022-05-12T21:50:54.499460Z",
     "iopub.status.idle": "2022-05-12T21:50:54.883494Z",
     "shell.execute_reply": "2022-05-12T21:50:54.882754Z"
    }
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'sherpa'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "File \u001b[0;32m<timed exec>:3\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "File \u001b[0;32m~/github/adonath/gammapy/gammapy/modeling/fit.py:158\u001b[0m, in \u001b[0;36mFit.run\u001b[0;34m(self, datasets)\u001b[0m\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrun\u001b[39m(\u001b[38;5;28mself\u001b[39m, datasets):\n\u001b[1;32m    146\u001b[0m     \u001b[38;5;124;03m\"\"\"Run all fitting steps.\u001b[39;00m\n\u001b[1;32m    147\u001b[0m \n\u001b[1;32m    148\u001b[0m \u001b[38;5;124;03m    Parameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    156\u001b[0m \u001b[38;5;124;03m        Fit result\u001b[39;00m\n\u001b[1;32m    157\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 158\u001b[0m     optimize_result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptimize\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdatasets\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdatasets\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    160\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m registry\u001b[38;5;241m.\u001b[39mregister[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcovariance\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n\u001b[1;32m    161\u001b[0m         log\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo covariance estimate - not supported by this backend.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/github/adonath/gammapy/gammapy/modeling/fit.py:196\u001b[0m, in \u001b[0;36mFit.optimize\u001b[0;34m(self, datasets)\u001b[0m\n\u001b[1;32m    192\u001b[0m compute \u001b[38;5;241m=\u001b[39m registry\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moptimize\u001b[39m\u001b[38;5;124m\"\u001b[39m, backend)\n\u001b[1;32m    193\u001b[0m \u001b[38;5;66;03m# TODO: change this calling interface!\u001b[39;00m\n\u001b[1;32m    194\u001b[0m \u001b[38;5;66;03m# probably should pass a fit statistic, which has a model, which has parameters\u001b[39;00m\n\u001b[1;32m    195\u001b[0m \u001b[38;5;66;03m# and return something simpler, not a tuple of three things\u001b[39;00m\n\u001b[0;32m--> 196\u001b[0m factors, info, optimizer \u001b[38;5;241m=\u001b[39m \u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    197\u001b[0m \u001b[43m    \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    198\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfunction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdatasets\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstat_sum\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    199\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstore_trace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstore_trace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    200\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    201\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m backend \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mminuit\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    204\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_minuit \u001b[38;5;241m=\u001b[39m optimizer\n",
      "File \u001b[0;32m~/github/adonath/gammapy/gammapy/modeling/sherpa.py:50\u001b[0m, in \u001b[0;36moptimize_sherpa\u001b[0;34m(parameters, function, store_trace, **kwargs)\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;124;03m\"\"\"Sherpa optimization wrapper method.\u001b[39;00m\n\u001b[1;32m     34\u001b[0m \n\u001b[1;32m     35\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;124;03m    Tuple containing the best fit factors, some info and the optimizer instance.\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m     49\u001b[0m method \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmethod\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msimplex\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 50\u001b[0m optimizer \u001b[38;5;241m=\u001b[39m \u001b[43mget_sherpa_optimizer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     51\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mconfig\u001b[38;5;241m.\u001b[39mupdate(kwargs)\n\u001b[1;32m     53\u001b[0m pars \u001b[38;5;241m=\u001b[39m [par\u001b[38;5;241m.\u001b[39mfactor \u001b[38;5;28;01mfor\u001b[39;00m par \u001b[38;5;129;01min\u001b[39;00m parameters\u001b[38;5;241m.\u001b[39mfree_parameters]\n",
      "File \u001b[0;32m~/github/adonath/gammapy/gammapy/modeling/sherpa.py:9\u001b[0m, in \u001b[0;36mget_sherpa_optimizer\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_sherpa_optimizer\u001b[39m(name):\n\u001b[0;32m----> 9\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msherpa\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01moptmethods\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m GridSearch, LevMar, MonCar, NelderMead\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     12\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlevmar\u001b[39m\u001b[38;5;124m\"\u001b[39m: LevMar,\n\u001b[1;32m     13\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msimplex\u001b[39m\u001b[38;5;124m\"\u001b[39m: NelderMead,\n\u001b[1;32m     14\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmoncar\u001b[39m\u001b[38;5;124m\"\u001b[39m: MonCar,\n\u001b[1;32m     15\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgridsearch\u001b[39m\u001b[38;5;124m\"\u001b[39m: GridSearch,\n\u001b[1;32m     16\u001b[0m     }[name]()\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sherpa'"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sherpa_opts = {\"method\": \"simplex\", \"ftol\": 1e-3, \"maxfev\": int(1e4)}\n",
    "fit_sherpa = Fit(store_trace=True, backend=\"sherpa\", optimize_opts=sherpa_opts)\n",
    "results_simplex = fit_sherpa.run(datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f75005c",
   "metadata": {},
   "source": [
    "For the \"minuit\" backend see https://iminuit.readthedocs.io/en/latest/reference.html for a detailed description of the available options. If there is an entry ‘migrad_opts’, those options will be passed to [iminuit.Minuit.migrad](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.migrad). Additionally you can set the fit tolerance using the [tol](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.tol\n",
    ") option. The minimization will stop when the estimated distance to the minimum is less than 0.001*tol (by default tol=0.1). The [strategy](https://iminuit.readthedocs.io/en/latest/reference.html#iminuit.Minuit.strategy) option change the speed and accuracy of the optimizer: 0 fast, 1 default, 2 slow but accurate. If you want more reliable error estimates, you should run the final fit with strategy 2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "45dbcf65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:54.888566Z",
     "iopub.status.busy": "2022-05-12T21:50:54.888199Z",
     "iopub.status.idle": "2022-05-12T21:50:55.065172Z",
     "shell.execute_reply": "2022-05-12T21:50:55.059376Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 139 ms, sys: 3.12 ms, total: 142 ms\n",
      "Wall time: 159 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit(store_trace=True)\n",
    "minuit_opts = {\"tol\": 0.001, \"strategy\": 1}\n",
    "fit.backend = \"minuit\"\n",
    "fit.optimize_opts = minuit_opts\n",
    "result_minuit = fit.run(datasets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de5900fe",
   "metadata": {},
   "source": [
    "## Fit quality assessment\n",
    "\n",
    "There are various ways to check the convergence and quality of a fit. Among them:\n",
    "\n",
    "Refer to the automatically-generated results dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "189a8869",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.081937Z",
     "iopub.status.busy": "2022-05-12T21:50:55.078455Z",
     "iopub.status.idle": "2022-05-12T21:50:55.119902Z",
     "shell.execute_reply": "2022-05-12T21:50:55.110079Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : scipy\n",
      "\tmethod     : L-BFGS-B\n",
      "\tsuccess    : True\n",
      "\tmessage    : CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH\n",
      "\tnfev       : 60\n",
      "\ttotal stat : 30.35\n",
      "\n",
      "CovarianceResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : hesse\n",
      "\tsuccess    : True\n",
      "\tmessage    : Hesse terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_scipy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4bea6859",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.127869Z",
     "iopub.status.busy": "2022-05-12T21:50:55.127417Z",
     "iopub.status.idle": "2022-05-12T21:50:55.527184Z",
     "shell.execute_reply": "2022-05-12T21:50:55.525700Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'results_simplex' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mresults_simplex\u001b[49m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'results_simplex' is not defined"
     ]
    }
   ],
   "source": [
    "print(results_simplex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "754a293c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.532540Z",
     "iopub.status.busy": "2022-05-12T21:50:55.532212Z",
     "iopub.status.idle": "2022-05-12T21:50:55.542561Z",
     "shell.execute_reply": "2022-05-12T21:50:55.540922Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : migrad\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 52\n",
      "\ttotal stat : 30.35\n",
      "\n",
      "CovarianceResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : hesse\n",
      "\tsuccess    : True\n",
      "\tmessage    : Hesse terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_minuit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a0d3694",
   "metadata": {},
   "source": [
    "If the fit is performed with minuit you can print detailed informations to check the convergence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13ab29b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.548333Z",
     "iopub.status.busy": "2022-05-12T21:50:55.548004Z",
     "iopub.status.idle": "2022-05-12T21:50:55.561725Z",
     "shell.execute_reply": "2022-05-12T21:50:55.559811Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┌─────────────────────────────────────────────────────────────────────────┐\n",
      "│                                Migrad                                   │\n",
      "├──────────────────────────────────┬──────────────────────────────────────┤\n",
      "│ FCN = 30.35                      │              Nfcn = 52               │\n",
      "│ EDM = 4.15e-10 (Goal: 2e-06)     │            time = 0.1 sec            │\n",
      "├──────────────────────────────────┼──────────────────────────────────────┤\n",
      "│          Valid Minimum           │        No Parameters at limit        │\n",
      "├──────────────────────────────────┼──────────────────────────────────────┤\n",
      "│ Below EDM threshold (goal x 10)  │           Below call limit           │\n",
      "├───────────────┬──────────────────┼───────────┬─────────────┬────────────┤\n",
      "│  Covariance   │     Hesse ok     │ Accurate  │  Pos. def.  │ Not forced │\n",
      "└───────────────┴──────────────────┴───────────┴─────────────┴────────────┘\n",
      "┌───┬───────────────────┬───────────┬───────────┬────────────┬────────────┬─────────┬─────────┬───────┐\n",
      "│   │ Name              │   Value   │ Hesse Err │ Minos Err- │ Minos Err+ │ Limit-  │ Limit+  │ Fixed │\n",
      "├───┼───────────────────┼───────────┼───────────┼────────────┼────────────┼─────────┼─────────┼───────┤\n",
      "│ 0 │ par_000_amplitude │    3.8    │    0.4    │            │            │         │         │       │\n",
      "│ 1 │ par_001_alpha     │   2.20    │   0.26    │            │            │    1    │    3    │       │\n",
      "│ 2 │ par_002_beta      │    2.3    │    1.4    │            │            │         │         │       │\n",
      "└───┴───────────────────┴───────────┴───────────┴────────────┴────────────┴─────────┴─────────┴───────┘\n",
      "┌───────────────────┬───────────────────────────────────────────────────────┐\n",
      "│                   │ par_000_amplitude     par_001_alpha      par_002_beta │\n",
      "├───────────────────┼───────────────────────────────────────────────────────┤\n",
      "│ par_000_amplitude │             0.126            0.0458            -0.119 │\n",
      "│     par_001_alpha │            0.0458            0.0696            -0.335 │\n",
      "│      par_002_beta │            -0.119            -0.335              1.97 │\n",
      "└───────────────────┴───────────────────────────────────────────────────────┘\n"
     ]
    }
   ],
   "source": [
    "print(fit.minuit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9367d1ed",
   "metadata": {},
   "source": [
    "Check the trace of the fit e.g. in case the fit did not converge properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36ef999f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.570969Z",
     "iopub.status.busy": "2022-05-12T21:50:55.569493Z",
     "iopub.status.idle": "2022-05-12T21:50:55.619023Z",
     "shell.execute_reply": "2022-05-12T21:50:55.610911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=52</i>\n",
       "<table id=\"table6058478848\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>total_stat</th><th>crab.spectral.amplitude</th><th>crab.spectral.alpha</th><th>crab.spectral.beta</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>30.3500657162104</td><td>3.817289698656186e-11</td><td>2.197292407700903</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.350283248175447</td><td>3.820841929575321e-11</td><td>2.197292407700903</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.350222616485947</td><td>3.81373746773705e-11</td><td>2.197292407700903</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.35007926860123</td><td>3.8179994706225424e-11</td><td>2.197292407700903</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.350067112690233</td><td>3.816579926689829e-11</td><td>2.197292407700903</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.352094318911043</td><td>3.817289698656186e-11</td><td>2.1999760722366375</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.350029544745276</td><td>3.817289698656186e-11</td><td>2.19460726388853</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.350179154484287</td><td>3.817289698656186e-11</td><td>2.1975608410540226</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.349972202223313</td><td>3.817289698656186e-11</td><td>2.1970239595550076</td><td>0.22709127789012862</td></tr>\n",
       "<tr><td>30.351857502861385</td><td>3.817289698656186e-11</td><td>2.197292407700903</td><td>0.22850114499290705</td></tr>\n",
       "<tr><td>30.349837154420428</td><td>3.817289698656186e-11</td><td>2.197292407700903</td><td>0.2256814107873502</td></tr>\n",
       "<tr><td>30.35017479159167</td><td>3.817289698656186e-11</td><td>2.197292407700903</td><td>0.22723226460040646</td></tr>\n",
       "<tr><td>30.34997227296953</td><td>3.817289698656186e-11</td><td>2.197292407700903</td><td>0.2269502911798508</td></tr>\n",
       "<tr><td>30.34997695393293</td><td>3.817001117496923e-11</td><td>2.1958980704229853</td><td>0.2261780173394799</td></tr>\n",
       "<tr><td>30.34974235504521</td><td>3.8171338387753655e-11</td><td>2.1965393890554075</td><td>0.2265980347381994</td></tr>\n",
       "<tr><td>30.349813792334285</td><td>3.817843607213018e-11</td><td>2.1965393890554075</td><td>0.2265980347381994</td></tr>\n",
       "<tr><td>30.349685869600748</td><td>3.816424070337713e-11</td><td>2.1965393890554075</td><td>0.2265980347381994</td></tr>\n",
       "<tr><td>30.349743320421467</td><td>3.8171338387753655e-11</td><td>2.1967719387411244</td><td>0.2265980347381994</td></tr>\n",
       "<tr><td>30.349756399032348</td><td>3.8171338387753655e-11</td><td>2.1963068283133813</td><td>0.2265980347381994</td></tr>\n",
       "<tr><td>30.349751959719185</td><td>3.8171338387753655e-11</td><td>2.1965393890554075</td><td>0.22673590512220493</td></tr>\n",
       "<tr><td>30.349747780067773</td><td>3.8171338387753655e-11</td><td>2.1965393890554075</td><td>0.22646016435419383</td></tr>\n",
       "<tr><td>30.349578125655736</td><td>3.8146127436317635e-11</td><td>2.1963598828820707</td><td>0.22641068578109103</td></tr>\n",
       "<tr><td>30.349534163471766</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>30.349534163471766</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349541897167885</td><td>3.8131754590818664e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.34954141331377</td><td>3.811756075157937e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349543448344082</td><td>3.8124657671199016e-11</td><td>2.196439103828382</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.34953983490288</td><td>3.8124657671199016e-11</td><td>2.1959749039576453</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349539830137537</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.22638863655365438</td></tr>\n",
       "<tr><td>30.349543469018254</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.22611364049798982</td></tr>\n",
       "<tr><td>30.34953451169259</td><td>3.8126077055122947e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.34953441459256</td><td>3.8123238287275085e-11</td><td>2.196207009389486</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349534824240266</td><td>3.8124657671199016e-11</td><td>2.1962534291571165</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.34953410095561</td><td>3.8124657671199016e-11</td><td>2.196160589182137</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349534099466126</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.22627863813138857</td></tr>\n",
       "<tr><td>30.34953482636601</td><td>3.8124657671199016e-11</td><td>2.196207009389486</td><td>0.22622363892025563</td></tr>\n",
       "<tr><td>30.349541323317055</td><td>3.8131754590818664e-11</td><td>2.196439103828382</td><td>0.2262511385258221</td></tr>\n",
       "<tr><td>30.349539387830283</td><td>3.8131754590818664e-11</td><td>2.196207009389486</td><td>0.22638863655365438</td></tr>\n",
       "<tr><td>30.349563014685785</td><td>3.8124657671199016e-11</td><td>2.196439103828382</td><td>0.22638863655365438</td></tr>\n",
       "<tr><td>30.349530433261027</td><td>3.812189947833074e-11</td><td>2.1957119982280755</td><td>0.22651087418268717</td></tr>\n",
       "<tr><td>30.349537910866125</td><td>3.812898812391197e-11</td><td>2.1957119982280755</td><td>0.22651087418268717</td></tr>\n",
       "<tr><td>30.349537906385564</td><td>3.81148108327495e-11</td><td>2.1957119982280755</td><td>0.22651087418268717</td></tr>\n",
       "<tr><td>30.349537922340755</td><td>3.812189947833074e-11</td><td>2.195944056474383</td><td>0.22651087418268717</td></tr>\n",
       "<tr><td>30.349537894602186</td><td>3.812189947833074e-11</td><td>2.195479929022191</td><td>0.22651087418268717</td></tr>\n",
       "<tr><td>30.349537879388105</td><td>3.812189947833074e-11</td><td>2.1957119982280755</td><td>0.22664826384159636</td></tr>\n",
       "<tr><td>30.349537929838906</td><td>3.812189947833074e-11</td><td>2.1957119982280755</td><td>0.22637348452377798</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=52>\n",
       "    total_stat     crab.spectral.amplitude crab.spectral.alpha  crab.spectral.beta\n",
       "     float64               float64               float64             float64      \n",
       "------------------ ----------------------- ------------------- -------------------\n",
       "  30.3500657162104   3.817289698656186e-11   2.197292407700903 0.22709127789012862\n",
       "30.350283248175447   3.820841929575321e-11   2.197292407700903 0.22709127789012862\n",
       "30.350222616485947    3.81373746773705e-11   2.197292407700903 0.22709127789012862\n",
       " 30.35007926860123  3.8179994706225424e-11   2.197292407700903 0.22709127789012862\n",
       "30.350067112690233   3.816579926689829e-11   2.197292407700903 0.22709127789012862\n",
       "30.352094318911043   3.817289698656186e-11  2.1999760722366375 0.22709127789012862\n",
       "30.350029544745276   3.817289698656186e-11    2.19460726388853 0.22709127789012862\n",
       "30.350179154484287   3.817289698656186e-11  2.1975608410540226 0.22709127789012862\n",
       "30.349972202223313   3.817289698656186e-11  2.1970239595550076 0.22709127789012862\n",
       "30.351857502861385   3.817289698656186e-11   2.197292407700903 0.22850114499290705\n",
       "30.349837154420428   3.817289698656186e-11   2.197292407700903  0.2256814107873502\n",
       " 30.35017479159167   3.817289698656186e-11   2.197292407700903 0.22723226460040646\n",
       " 30.34997227296953   3.817289698656186e-11   2.197292407700903  0.2269502911798508\n",
       " 30.34997695393293   3.817001117496923e-11  2.1958980704229853  0.2261780173394799\n",
       " 30.34974235504521  3.8171338387753655e-11  2.1965393890554075  0.2265980347381994\n",
       "30.349813792334285   3.817843607213018e-11  2.1965393890554075  0.2265980347381994\n",
       "30.349685869600748   3.816424070337713e-11  2.1965393890554075  0.2265980347381994\n",
       "30.349743320421467  3.8171338387753655e-11  2.1967719387411244  0.2265980347381994\n",
       "30.349756399032348  3.8171338387753655e-11  2.1963068283133813  0.2265980347381994\n",
       "30.349751959719185  3.8171338387753655e-11  2.1965393890554075 0.22673590512220493\n",
       "30.349747780067773  3.8171338387753655e-11  2.1965393890554075 0.22646016435419383\n",
       "30.349578125655736  3.8146127436317635e-11  2.1963598828820707 0.22641068578109103\n",
       "30.349534163471766  3.8124657671199016e-11   2.196207009389486  0.2262511385258221\n",
       "               ...                     ...                 ...                 ...\n",
       "30.349534163471766  3.8124657671199016e-11   2.196207009389486  0.2262511385258221\n",
       "30.349541897167885  3.8131754590818664e-11   2.196207009389486  0.2262511385258221\n",
       " 30.34954141331377   3.811756075157937e-11   2.196207009389486  0.2262511385258221\n",
       "30.349543448344082  3.8124657671199016e-11   2.196439103828382  0.2262511385258221\n",
       " 30.34953983490288  3.8124657671199016e-11  2.1959749039576453  0.2262511385258221\n",
       "30.349539830137537  3.8124657671199016e-11   2.196207009389486 0.22638863655365438\n",
       "30.349543469018254  3.8124657671199016e-11   2.196207009389486 0.22611364049798982\n",
       " 30.34953451169259  3.8126077055122947e-11   2.196207009389486  0.2262511385258221\n",
       " 30.34953441459256  3.8123238287275085e-11   2.196207009389486  0.2262511385258221\n",
       "30.349534824240266  3.8124657671199016e-11  2.1962534291571165  0.2262511385258221\n",
       " 30.34953410095561  3.8124657671199016e-11   2.196160589182137  0.2262511385258221\n",
       "30.349534099466126  3.8124657671199016e-11   2.196207009389486 0.22627863813138857\n",
       " 30.34953482636601  3.8124657671199016e-11   2.196207009389486 0.22622363892025563\n",
       "30.349541323317055  3.8131754590818664e-11   2.196439103828382  0.2262511385258221\n",
       "30.349539387830283  3.8131754590818664e-11   2.196207009389486 0.22638863655365438\n",
       "30.349563014685785  3.8124657671199016e-11   2.196439103828382 0.22638863655365438\n",
       "30.349530433261027   3.812189947833074e-11  2.1957119982280755 0.22651087418268717\n",
       "30.349537910866125   3.812898812391197e-11  2.1957119982280755 0.22651087418268717\n",
       "30.349537906385564    3.81148108327495e-11  2.1957119982280755 0.22651087418268717\n",
       "30.349537922340755   3.812189947833074e-11   2.195944056474383 0.22651087418268717\n",
       "30.349537894602186   3.812189947833074e-11   2.195479929022191 0.22651087418268717\n",
       "30.349537879388105   3.812189947833074e-11  2.1957119982280755 0.22664826384159636\n",
       "30.349537929838906   3.812189947833074e-11  2.1957119982280755 0.22637348452377798"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_minuit.trace"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ced8728",
   "metadata": {},
   "source": [
    "Check that the fitted values and errors for all parameters are reasonable, and no fitted parameter value is \"too close\" - or even outside - its allowed min-max range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c4de5875",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.625471Z",
     "iopub.status.busy": "2022-05-12T21:50:55.624833Z",
     "iopub.status.idle": "2022-05-12T21:50:55.644656Z",
     "shell.execute_reply": "2022-05-12T21:50:55.638934Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><i>Table length=4</i>\n",
       "<table id=\"table6069460848\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>is_norm</th><th>link</th></tr></thead>\n",
       "<thead><tr><th>str8</th><th>str9</th><th>float64</th><th>str14</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>bool</th><th>str1</th></tr></thead>\n",
       "<tr><td>spectral</td><td>amplitude</td><td>3.8122e-11</td><td>cm-2 s-1 TeV-1</td><td>3.548e-12</td><td>nan</td><td>nan</td><td>False</td><td>True</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>alpha</td><td>2.1957e+00</td><td></td><td>2.639e-01</td><td>1.000e+00</td><td>3.000e+00</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>spectral</td><td>beta</td><td>2.2651e-01</td><td></td><td>1.403e-01</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "  type      name     value         unit        error      min       max    frozen is_norm link\n",
       "  str8      str9    float64       str14       float64   float64   float64   bool    bool  str1\n",
       "-------- --------- ---------- -------------- --------- --------- --------- ------ ------- ----\n",
       "spectral amplitude 3.8122e-11 cm-2 s-1 TeV-1 3.548e-12       nan       nan  False    True     \n",
       "spectral reference 1.0000e+00            TeV 0.000e+00       nan       nan   True   False     \n",
       "spectral     alpha 2.1957e+00                2.639e-01 1.000e+00 3.000e+00  False   False     \n",
       "spectral      beta 2.2651e-01                1.403e-01       nan       nan  False   False     "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_minuit.parameters.to_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddc581eb",
   "metadata": {},
   "source": [
    "Plot fit statistic profiles for all fitted parameters, using `~gammapy.modeling.Fit.stat_profile()`. For a good fit and error estimate each profile should be parabolic. The specification for each fit statistic profile can be changed on the `~gammapy.modeling.Parameter` object, which has `.scan_min`, `.scan_max`, `.scan_n_values` and `.scan_n_sigma` attributes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1e6bdcdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:55.650131Z",
     "iopub.status.busy": "2022-05-12T21:50:55.649699Z",
     "iopub.status.idle": "2022-05-12T21:50:56.302518Z",
     "shell.execute_reply": "2022-05-12T21:50:56.301537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "total_stat = result_minuit.total_stat\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(14, 4))\n",
    "\n",
    "for ax, par in zip(axes, crab_model.parameters.free_parameters):\n",
    "    par.scan_n_values = 17\n",
    "\n",
    "    profile = fit.stat_profile(datasets=datasets, parameter=par)\n",
    "    ax.plot(profile[f\"{par.name}_scan\"], profile[\"stat_scan\"] - total_stat)\n",
    "    ax.set_xlabel(f\"{par.unit}\")\n",
    "    ax.set_ylabel(\"Delta TS\")\n",
    "    ax.set_title(f\"{par.name}: {par.value:.1e} +- {par.error:.1e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97263e1",
   "metadata": {},
   "source": [
    "Inspect model residuals. Those can always be accessed using `~Dataset.residuals()`, that will return an array in case a the fitted `Dataset` is a `SpectrumDataset` and a full cube in case of a `MapDataset`. For more details, we refer here to the dedicated fitting tutorials: [analysis_3d.ipynb](../analysis/3D/analysis_3d.ipynb) (for `MapDataset` fitting) and [spectrum_analysis.ipynb](../analysis/1D/spectral_analysis.ipynb) (for `SpectrumDataset` fitting)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e950ff2",
   "metadata": {},
   "source": [
    "## Covariance and parameters errors\n",
    "\n",
    "After the fit the covariance matrix is attached to the model. You can get the error on a specific parameter by accessing the `.error` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a266e3b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:56.309008Z",
     "iopub.status.busy": "2022-05-12T21:50:56.308624Z",
     "iopub.status.idle": "2022-05-12T21:50:56.325852Z",
     "shell.execute_reply": "2022-05-12T21:50:56.324181Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.26387706255272814"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crab_model.spectral_model.alpha.error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e33db055",
   "metadata": {},
   "source": [
    "And you can plot the total parameter correlation as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "82a0787c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:56.332172Z",
     "iopub.status.busy": "2022-05-12T21:50:56.331779Z",
     "iopub.status.idle": "2022-05-12T21:50:56.564163Z",
     "shell.execute_reply": "2022-05-12T21:50:56.563180Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 230.4x187.2 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "crab_model.covariance.plot_correlation()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e22a3cf",
   "metadata": {},
   "source": [
    "As an example, this step is needed to produce a butterfly plot showing the envelope of the model taking into account parameter uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b1d80d1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:56.577132Z",
     "iopub.status.busy": "2022-05-12T21:50:56.575562Z",
     "iopub.status.idle": "2022-05-12T21:50:57.041677Z",
     "shell.execute_reply": "2022-05-12T21:50:57.040739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_bounds = [1, 10] * u.TeV\n",
    "crab_spectrum.plot(energy_bounds=energy_bounds, energy_power=2)\n",
    "ax = crab_spectrum.plot_error(energy_bounds=energy_bounds, energy_power=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea1ff83",
   "metadata": {},
   "source": [
    "## Confidence contours\n",
    "\n",
    "\n",
    "In most studies, one wishes to estimate parameters distribution using observed sample data.\n",
    "A 1-dimensional confidence interval gives an estimated range of values which is likely to include an unknown parameter.\n",
    "A confidence contour is a 2-dimensional generalization of a confidence interval, often represented as an ellipsoid around the best-fit value.\n",
    "\n",
    "Gammapy offers two ways of computing confidence contours, in the dedicated methods `Fit.minos_contour()` and `Fit.stat_profile()`. In the following sections we will describe them."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29aeac1f",
   "metadata": {},
   "source": [
    "An important point to keep in mind is: *what does a $N\\sigma$ confidence contour really mean?* The answer is it represents the points of the parameter space for which the model likelihood is $N\\sigma$ above the minimum. But one always has to keep in mind that **1 standard deviation in two dimensions has a smaller coverage probability than 68%**, and similarly for all other levels. In particular, in 2-dimensions the probability enclosed by the $N\\sigma$ confidence contour is $P(N)=1-e^{-N^2/2}$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d5d294e",
   "metadata": {},
   "source": [
    "### Computing contours using `Fit.stat_contour()` "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c5ed54b",
   "metadata": {},
   "source": [
    "After the fit, MINUIT offers the possibility to compute the confidence confours.\n",
    "gammapy provides an interface to this functionality through the `Fit` object using the `.stat_contour` method.\n",
    "Here we defined a function to automate the contour production for the different parameterer and confidence levels (expressed in term of sigma):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "646a8b27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:57.046760Z",
     "iopub.status.busy": "2022-05-12T21:50:57.046506Z",
     "iopub.status.idle": "2022-05-12T21:50:57.060822Z",
     "shell.execute_reply": "2022-05-12T21:50:57.059646Z"
    }
   },
   "outputs": [],
   "source": [
    "def make_contours(fit, datasets, result, npoints, sigmas):\n",
    "    cts_sigma = []\n",
    "    for sigma in sigmas:\n",
    "        contours = dict()\n",
    "        for par_1, par_2 in combinations([\"alpha\", \"beta\", \"amplitude\"], r=2):\n",
    "            contour = fit.stat_contour(\n",
    "                datasets=datasets,\n",
    "                x=datasets.parameters[par_1],\n",
    "                y=datasets.parameters[par_2],\n",
    "                numpoints=npoints,\n",
    "                sigma=sigma,\n",
    "            )\n",
    "            contours[f\"contour_{par_1}_{par_2}\"] = {\n",
    "                par_1: contour[par_1].tolist(),\n",
    "                par_2: contour[par_2].tolist(),\n",
    "            }\n",
    "        cts_sigma.append(contours)\n",
    "    return cts_sigma"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83b040a3",
   "metadata": {},
   "source": [
    "Now we can compute few contours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c5e2c536",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:50:57.072583Z",
     "iopub.status.busy": "2022-05-12T21:50:57.070468Z",
     "iopub.status.idle": "2022-05-12T21:51:10.041699Z",
     "shell.execute_reply": "2022-05-12T21:51:10.039874Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adonath/software/mambaforge/envs/gammapy-dev/lib/python3.9/site-packages/numpy/core/fromnumeric.py:86: RuntimeWarning: overflow encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 10.5 s, sys: 130 ms, total: 10.6 s\n",
      "Wall time: 13 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sigmas = [1, 2]\n",
    "cts_sigma = make_contours(\n",
    "    fit=fit,\n",
    "    datasets=datasets,\n",
    "    result=result_minuit,\n",
    "    npoints=10,\n",
    "    sigmas=sigmas,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a027a3f",
   "metadata": {},
   "source": [
    "Then we prepare some aliases and annotations in order to make the plotting nicer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b20028cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:10.047510Z",
     "iopub.status.busy": "2022-05-12T21:51:10.047162Z",
     "iopub.status.idle": "2022-05-12T21:51:10.062059Z",
     "shell.execute_reply": "2022-05-12T21:51:10.061357Z"
    }
   },
   "outputs": [],
   "source": [
    "pars = {\n",
    "    \"phi\": r\"$\\phi_0 \\,/\\,(10^{-11}\\,{\\rm TeV}^{-1} \\, {\\rm cm}^{-2} {\\rm s}^{-1})$\",\n",
    "    \"alpha\": r\"$\\alpha$\",\n",
    "    \"beta\": r\"$\\beta$\",\n",
    "}\n",
    "\n",
    "panels = [\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_amplitude\"][\"alpha\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_alpha_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"beta\",\n",
    "        \"y\": \"phi\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_beta_amplitude\"][\"beta\"]),\n",
    "        \"cy\": (\n",
    "            lambda ct: np.array(1e11)\n",
    "            * ct[\"contour_beta_amplitude\"][\"amplitude\"]\n",
    "        ),\n",
    "    },\n",
    "    {\n",
    "        \"x\": \"alpha\",\n",
    "        \"y\": \"beta\",\n",
    "        \"cx\": (lambda ct: ct[\"contour_alpha_beta\"][\"alpha\"]),\n",
    "        \"cy\": (lambda ct: ct[\"contour_alpha_beta\"][\"beta\"]),\n",
    "    },\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db0956f9",
   "metadata": {},
   "source": [
    "Finally we produce the confidence contours figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9c1010a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:10.068596Z",
     "iopub.status.busy": "2022-05-12T21:51:10.067673Z",
     "iopub.status.idle": "2022-05-12T21:51:10.516229Z",
     "shell.execute_reply": "2022-05-12T21:51:10.515295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, figsize=(16, 5))\n",
    "colors = [\"m\", \"b\", \"c\"]\n",
    "for p, ax in zip(panels, axes):\n",
    "    xlabel = pars[p[\"x\"]]\n",
    "    ylabel = pars[p[\"y\"]]\n",
    "    for ks in range(len(cts_sigma)):\n",
    "        plot_contour_line(\n",
    "            ax,\n",
    "            p[\"cx\"](cts_sigma[ks]),\n",
    "            p[\"cy\"](cts_sigma[ks]),\n",
    "            lw=2.5,\n",
    "            color=colors[ks],\n",
    "            label=f\"{sigmas[ks]}\" + r\"$\\sigma$\",\n",
    "        )\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel(ylabel)\n",
    "plt.legend()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cd2aafa",
   "metadata": {},
   "source": [
    "### Computing contours using `Fit.stat_surface()`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae4d1e0",
   "metadata": {},
   "source": [
    "This alternative method for the computation of confidence contours, although more time consuming than `Fit.minos_contour()`, is expected to be more stable. It consists of a generalization of `Fit.stat_profile()` to a 2-dimensional parameter space. The algorithm is very simple:\n",
    "- First, passing two arrays of parameters values, a 2-dimensional discrete parameter space is defined;\n",
    "- For each node of the parameter space, the two parameters of interest are frozen. This way, a likelihood value ($-2\\mathrm{ln}\\,\\mathcal{L}$, actually) is computed, by either freezing (default) or fitting all nuisance parameters;\n",
    "- Finally, a 2-dimensional surface of $-2\\mathrm{ln}(\\mathcal{L})$ values is returned.\n",
    "Using that surface, one can easily compute a surface of $TS = -2\\Delta\\mathrm{ln}(\\mathcal{L})$ and compute confidence contours.\n",
    "\n",
    "Let's see it step by step."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b064ae24",
   "metadata": {},
   "source": [
    "First of all, we can notice that this method is \"backend-agnostic\", meaning that it can be run with MINUIT, sherpa or scipy as fitting tools. Here we will stick with MINUIT, which is the default choice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93b5f56d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1aaea70b",
   "metadata": {},
   "source": [
    "As an example, we can compute the confidence contour for the `alpha` and `beta` parameters of the `dataset_hess`. Here we define the parameter space:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "20c3a05c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:10.530522Z",
     "iopub.status.busy": "2022-05-12T21:51:10.526213Z",
     "iopub.status.idle": "2022-05-12T21:51:10.549866Z",
     "shell.execute_reply": "2022-05-12T21:51:10.540749Z"
    }
   },
   "outputs": [],
   "source": [
    "result = result_minuit\n",
    "par_alpha = datasets.parameters[\"alpha\"]\n",
    "par_beta = datasets.parameters[\"beta\"]\n",
    "\n",
    "par_alpha.scan_values = np.linspace(1.55, 2.7, 20)\n",
    "par_beta.scan_values = np.linspace(-0.05, 0.55, 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9fe9226",
   "metadata": {},
   "source": [
    "Then we run the algorithm, by choosing `reoptimize=False` for the sake of time saving. In real life applications, we strongly recommend to  use `reoptimize=True`, so that all free nuisance parameters will be fit at each grid node. This is the correct way, statistically speaking, of computing confidence contours, but is expected to be time consuming."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "76b1ad89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:10.559085Z",
     "iopub.status.busy": "2022-05-12T21:51:10.556914Z",
     "iopub.status.idle": "2022-05-12T21:51:11.666037Z",
     "shell.execute_reply": "2022-05-12T21:51:11.664476Z"
    }
   },
   "outputs": [],
   "source": [
    "fit = Fit(backend=\"minuit\", optimize_opts={\"print_level\": 0})\n",
    "stat_surface = fit.stat_surface(\n",
    "    datasets=datasets,\n",
    "    x=par_alpha,\n",
    "    y=par_beta,\n",
    "    reoptimize=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d955670",
   "metadata": {},
   "source": [
    "In order to easily inspect the results, we can convert the $-2\\mathrm{ln}(\\mathcal{L})$ surface to a surface of statistical significance (in units of Gaussian standard deviations from the surface minimum):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "93157f7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:11.678577Z",
     "iopub.status.busy": "2022-05-12T21:51:11.678024Z",
     "iopub.status.idle": "2022-05-12T21:51:11.682208Z",
     "shell.execute_reply": "2022-05-12T21:51:11.681458Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute TS\n",
    "TS = stat_surface[\"stat_scan\"] - result.total_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "69f95a81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:11.687254Z",
     "iopub.status.busy": "2022-05-12T21:51:11.686820Z",
     "iopub.status.idle": "2022-05-12T21:51:11.694292Z",
     "shell.execute_reply": "2022-05-12T21:51:11.690615Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute the corresponding statistical significance surface\n",
    "stat_surface = np.sqrt(TS.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d79f139",
   "metadata": {},
   "source": [
    "Notice that, as explained before, $1\\sigma$ contour obtained this way will not contain 68% of the probability, but rather "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1199cba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:11.699038Z",
     "iopub.status.busy": "2022-05-12T21:51:11.698387Z",
     "iopub.status.idle": "2022-05-12T21:51:11.709949Z",
     "shell.execute_reply": "2022-05-12T21:51:11.706476Z"
    }
   },
   "outputs": [],
   "source": [
    "# Compute the corresponding statistical significance surface\n",
    "# p_value = 1 - st.chi2(df=1).cdf(TS)\n",
    "# gaussian_sigmas = st.norm.isf(p_value / 2).T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ae5751f",
   "metadata": {},
   "source": [
    "Finally, we can plot the surface values together with contours:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "415e59bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:11.715086Z",
     "iopub.status.busy": "2022-05-12T21:51:11.714763Z",
     "iopub.status.idle": "2022-05-12T21:51:11.862425Z",
     "shell.execute_reply": "2022-05-12T21:51:11.861399Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Learn how the model, dataset and fit Gammapy classes work together in a detailed modeling and fitting use-case."
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "x_values = par_alpha.scan_values\n",
    "y_values = par_beta.scan_values\n",
    "\n",
    "# plot surface\n",
    "im = ax.pcolormesh(x_values, y_values, stat_surface, shading=\"auto\")\n",
    "fig.colorbar(im, label=\"sqrt(TS)\")\n",
    "ax.set_xlabel(f\"{par_alpha.name}\")\n",
    "ax.set_ylabel(f\"{par_beta.name}\")\n",
    "\n",
    "# We choose to plot 1 and 2 sigma confidence contours\n",
    "levels = [1, 2]\n",
    "contours = ax.contour(\n",
    "    x_values, y_values, stat_surface, levels=levels, colors=\"white\"\n",
    ")\n",
    "ax.clabel(contours, fmt=\"%.0f$\\,\\sigma$\", inline=3, fontsize=15);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dddeb7ad",
   "metadata": {},
   "source": [
    "Note that, if computed with `reoptimize=True`, this plot would be completely consistent with the third panel of the plot produced with `Fit.stat_contour` (try!)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "825cd6b6",
   "metadata": {},
   "source": [
    "Finally, it is always remember that confidence contours are approximations. In particular, when the parameter range boundaries are close to the contours lines, it is expected that the statistical meaning of the contours is not well defined. That's why we advise to always choose a parameter space that com contain the contours you're interested in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75b9a9e7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
