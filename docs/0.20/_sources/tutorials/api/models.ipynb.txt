{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b181f841",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online[![Binder](https://static.mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.20?urlpath=lab/tree/tutorials/api/models.ipynb)\n",
    "- You may download all the notebooks as a [tar file](../../_downloads/notebooks-0.20.tar).\n",
    "- **Source files:**\n",
    "[models.ipynb](../../_static/notebooks/models.ipynb) |\n",
    "[models.py](../../_static/notebooks/models.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72bd2990",
   "metadata": {},
   "source": [
    "# Models\n",
    "\n",
    "\n",
    "This is an introduction and overview on how to work with models in Gammapy. \n",
    "\n",
    "The sub-package `~gammapy.modeling` contains all the functionality related to modeling and fitting\n",
    "data. This includes spectral, spatial and temporal model classes, as well as the fit\n",
    "and parameter API. We will cover the following topics in order:\n",
    "\n",
    "1. [Spectral Models](#Spectral-Models)\n",
    "1. [Spatial Models](#Spatial-Models)\n",
    "1. [Temporal Models](#Temporal-Models)\n",
    "1. [SkyModel](#SkyModel)\n",
    "1. [Modifying model parameters](#Modifying-model-parameters)\n",
    "1. [Model Lists and Serialisation](#Model-Lists-and-Serialisation)\n",
    "1. [Models with shared parameter](#Models-with-shared-parameter)\n",
    "1. [Implementing as Custom Model](#Implementing-a-Custom-Model)\n",
    "1. [Energy dependent models](#Models-with-energy-dependent-morphology)\n",
    "\n",
    "The models follow a naming scheme which contains the category as a suffix to the class name. An overview of all the available models can be found in the [model gallery](../../modeling/gallery/index.rst#spectral-models).\n",
    "\n",
    "Note that there are separate tutorials, [model_management](model_management.ipynb) and [fitting](fitting.ipynb) that explains about `~gammapy.modeling`,\n",
    "the Gammapy modeling and fitting framework. You have to read that to learn how to work with models in order to analyse data.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3df56fe6",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b58bd101",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:20.681342Z",
     "iopub.status.busy": "2022-05-12T21:51:20.680421Z",
     "iopub.status.idle": "2022-05-12T21:51:21.308813Z",
     "shell.execute_reply": "2022-05-12T21:51:21.307821Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "75dde21f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:21.314834Z",
     "iopub.status.busy": "2022-05-12T21:51:21.314524Z",
     "iopub.status.idle": "2022-05-12T21:51:22.190029Z",
     "shell.execute_reply": "2022-05-12T21:51:22.189034Z"
    }
   },
   "outputs": [],
   "source": [
    "from astropy import units as u\n",
    "from gammapy.maps import Map, WcsGeom, MapAxis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3deacee",
   "metadata": {},
   "source": [
    "## Spectral models\n",
    "\n",
    "All models are imported from the `~gammapy.modeling.models` namespace. Let's start with a `PowerLawSpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c52aaa51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.200509Z",
     "iopub.status.busy": "2022-05-12T21:51:22.199473Z",
     "iopub.status.idle": "2022-05-12T21:51:22.267113Z",
     "shell.execute_reply": "2022-05-12T21:51:22.266184Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import PowerLawSpectralModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b5a07ff4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.281983Z",
     "iopub.status.busy": "2022-05-12T21:51:22.281473Z",
     "iopub.status.idle": "2022-05-12T21:51:22.316316Z",
     "shell.execute_reply": "2022-05-12T21:51:22.310356Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "  type      name     value         unit        error   min max frozen is_norm link\n",
      "-------- --------- ---------- -------------- --------- --- --- ------ ------- ----\n",
      "spectral     index 2.0000e+00                0.000e+00 nan nan  False   False     \n",
      "spectral amplitude 1.0000e-12 cm-2 s-1 TeV-1 0.000e+00 nan nan  False    True     \n",
      "spectral reference 1.0000e+00            TeV 0.000e+00 nan nan   True   False     \n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLawSpectralModel()\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab523165",
   "metadata": {},
   "source": [
    "To get a list of all available spectral models you can import and print the spectral model registry or take a look at the [model gallery](https://docs.gammapy.org/dev/modeling/gallery/index.html#spectral-models):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "53416948",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.326191Z",
     "iopub.status.busy": "2022-05-12T21:51:22.325083Z",
     "iopub.status.idle": "2022-05-12T21:51:22.334296Z",
     "shell.execute_reply": "2022-05-12T21:51:22.330641Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registry\n",
      "--------\n",
      "\n",
      "ConstantSpectralModel                     : ['ConstantSpectralModel', 'const'] \n",
      "CompoundSpectralModel                     : ['CompoundSpectralModel', 'compound'] \n",
      "PowerLawSpectralModel                     : ['PowerLawSpectralModel', 'pl'] \n",
      "PowerLaw2SpectralModel                    : ['PowerLaw2SpectralModel', 'pl-2'] \n",
      "BrokenPowerLawSpectralModel               : ['BrokenPowerLawSpectralModel', 'bpl'] \n",
      "SmoothBrokenPowerLawSpectralModel         : ['SmoothBrokenPowerLawSpectralModel', 'sbpl'] \n",
      "PiecewiseNormSpectralModel                : ['PiecewiseNormSpectralModel', 'piecewise-norm'] \n",
      "ExpCutoffPowerLawSpectralModel            : ['ExpCutoffPowerLawSpectralModel', 'ecpl'] \n",
      "ExpCutoffPowerLaw3FGLSpectralModel        : ['ExpCutoffPowerLaw3FGLSpectralModel', 'ecpl-3fgl'] \n",
      "SuperExpCutoffPowerLaw3FGLSpectralModel   : ['SuperExpCutoffPowerLaw3FGLSpectralModel', 'secpl-3fgl'] \n",
      "SuperExpCutoffPowerLaw4FGLDR3SpectralModel: ['SuperExpCutoffPowerLaw4FGLDR3SpectralModel', 'secpl-4fgl-dr3'] \n",
      "SuperExpCutoffPowerLaw4FGLSpectralModel   : ['SuperExpCutoffPowerLaw4FGLSpectralModel', 'secpl-4fgl'] \n",
      "LogParabolaSpectralModel                  : ['LogParabolaSpectralModel', 'lp'] \n",
      "TemplateSpectralModel                     : ['TemplateSpectralModel', 'template'] \n",
      "TemplateNDSpectralModel                   : ['TemplateNDSpectralModel', 'templateND'] \n",
      "GaussianSpectralModel                     : ['GaussianSpectralModel', 'gauss'] \n",
      "EBLAbsorptionNormSpectralModel            : ['EBLAbsorptionNormSpectralModel', 'ebl-norm'] \n",
      "NaimaSpectralModel                        : ['NaimaSpectralModel', 'naima'] \n",
      "ScaleSpectralModel                        : ['ScaleSpectralModel', 'scale'] \n",
      "PowerLawNormSpectralModel                 : ['PowerLawNormSpectralModel', 'pl-norm'] \n",
      "LogParabolaNormSpectralModel              : ['LogParabolaNormSpectralModel', 'lp-norm'] \n",
      "ExpCutoffPowerLawNormSpectralModel        : ['ExpCutoffPowerLawNormSpectralModel', 'ecpl-norm'] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SPECTRAL_MODEL_REGISTRY\n",
    "\n",
    "print(SPECTRAL_MODEL_REGISTRY)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ea1c44",
   "metadata": {},
   "source": [
    "Spectral models all come with default parameters. Different parameter\n",
    "values can be passed on creation of the model, either as a string defining\n",
    "the value and unit or as an `astropy.units.Quantity` object directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c19b63f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.346667Z",
     "iopub.status.busy": "2022-05-12T21:51:22.345947Z",
     "iopub.status.idle": "2022-05-12T21:51:22.357963Z",
     "shell.execute_reply": "2022-05-12T21:51:22.355355Z"
    }
   },
   "outputs": [],
   "source": [
    "amplitude = 1e-12 * u.Unit(\"TeV-1 cm-2 s-1\")\n",
    "pwl = PowerLawSpectralModel(amplitude=amplitude, index=2.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f588d5e",
   "metadata": {},
   "source": [
    "For convenience a `str` specifying the value and unit can be passed as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b6fd7d52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.367986Z",
     "iopub.status.busy": "2022-05-12T21:51:22.367066Z",
     "iopub.status.idle": "2022-05-12T21:51:22.383812Z",
     "shell.execute_reply": "2022-05-12T21:51:22.380424Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawSpectralModel\n",
      "\n",
      "  type      name     value         unit        error   min max frozen is_norm link\n",
      "-------- --------- ---------- -------------- --------- --- --- ------ ------- ----\n",
      "spectral     index 2.2000e+00                0.000e+00 nan nan  False   False     \n",
      "spectral amplitude 2.7000e-12 cm-2 s-1 TeV-1 0.000e+00 nan nan  False    True     \n",
      "spectral reference 1.0000e+00            TeV 0.000e+00 nan nan   True   False     \n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLawSpectralModel(amplitude=\"2.7e-12 TeV-1 cm-2 s-1\", index=2.2)\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf508c2",
   "metadata": {},
   "source": [
    "The model can be evaluated at given energies by calling the model instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9e71d24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.393957Z",
     "iopub.status.busy": "2022-05-12T21:51:22.393328Z",
     "iopub.status.idle": "2022-05-12T21:51:22.406825Z",
     "shell.execute_reply": "2022-05-12T21:51:22.400965Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.70000000e-12 2.40822469e-13 1.70358483e-14 1.51948705e-15] 1 / (cm2 s TeV)\n"
     ]
    }
   ],
   "source": [
    "energy = [1, 3, 10, 30] * u.TeV\n",
    "dnde = pwl(energy)\n",
    "print(dnde)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f242485",
   "metadata": {},
   "source": [
    "The returned quantity is a differential photon flux. \n",
    "\n",
    "For spectral models you can additionally compute the integrated and energy flux\n",
    "in a given energy range:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a41fad53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.413013Z",
     "iopub.status.busy": "2022-05-12T21:51:22.412569Z",
     "iopub.status.idle": "2022-05-12T21:51:22.418225Z",
     "shell.execute_reply": "2022-05-12T21:51:22.417207Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.108034597491956e-12 1 / (cm2 s)\n",
      "4.982075849517389e-12 TeV / (cm2 s)\n"
     ]
    }
   ],
   "source": [
    "flux = pwl.integral(energy_min=1 * u.TeV, energy_max=10 * u.TeV)\n",
    "print(flux)\n",
    "\n",
    "eflux = pwl.energy_flux(energy_min=1 * u.TeV, energy_max=10 * u.TeV)\n",
    "print(eflux)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04d9650c",
   "metadata": {},
   "source": [
    "This also works for a list or an array of integration boundaries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "71a6c8ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.425189Z",
     "iopub.status.busy": "2022-05-12T21:51:22.424848Z",
     "iopub.status.idle": "2022-05-12T21:51:22.432393Z",
     "shell.execute_reply": "2022-05-12T21:51:22.430690Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.64794383e-12 4.60090769e-13 1.03978226e-13] 1 / (cm2 s)\n"
     ]
    }
   ],
   "source": [
    "energy = [1, 3, 10, 30] * u.TeV\n",
    "flux = pwl.integral(energy_min=energy[:-1], energy_max=energy[1:])\n",
    "print(flux)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90d73650",
   "metadata": {},
   "source": [
    "In some cases it can be useful to find use the inverse of a spectral model, to find the energy at which a given flux is reached:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a14e742e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.437532Z",
     "iopub.status.busy": "2022-05-12T21:51:22.436923Z",
     "iopub.status.idle": "2022-05-12T21:51:22.446853Z",
     "shell.execute_reply": "2022-05-12T21:51:22.445362Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 TeV\n"
     ]
    }
   ],
   "source": [
    "dnde = 2.7e-12 * u.Unit(\"TeV-1 cm-2 s-1\")\n",
    "energy = pwl.inverse(dnde)\n",
    "print(energy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a54a288c",
   "metadata": {},
   "source": [
    "As a convenience you can also plot any spectral model in a given energy range:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2b9bef62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:22.455666Z",
     "iopub.status.busy": "2022-05-12T21:51:22.455278Z",
     "iopub.status.idle": "2022-05-12T21:51:23.163120Z",
     "shell.execute_reply": "2022-05-12T21:51:23.162148Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy [TeV]', ylabel='dnde [1 / (cm2 s TeV)]'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pwl.plot(energy_bounds=[1, 100] * u.TeV)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5ca352e",
   "metadata": {},
   "source": [
    "### Norm Spectral Models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46cd55c9",
   "metadata": {},
   "source": [
    "Normed spectral models are a special class of Spectral Models, which have a dimension-less normalisation. These spectral models feature a norm parameter instead\n",
    "of amplitude and are named using the ``NormSpectralModel`` suffix. They **must** be used along with another spectral model, as a multiplicative correction factor according to their spectral shape. They can be typically used for adjusting template based models, or adding a EBL correction to some analytic model. \n",
    "\n",
    "To check if a given `SpectralModel` is a norm model, you can simply look at the `is_norm_spectral_model` property"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "34b338fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.178376Z",
     "iopub.status.busy": "2022-05-12T21:51:23.177682Z",
     "iopub.status.idle": "2022-05-12T21:51:23.183331Z",
     "shell.execute_reply": "2022-05-12T21:51:23.182537Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'gammapy.modeling.models.spectral.PiecewiseNormSpectralModel'>\n",
      "<class 'gammapy.modeling.models.spectral.EBLAbsorptionNormSpectralModel'>\n",
      "<class 'gammapy.modeling.models.spectral.PowerLawNormSpectralModel'>\n",
      "<class 'gammapy.modeling.models.spectral.LogParabolaNormSpectralModel'>\n",
      "<class 'gammapy.modeling.models.spectral.ExpCutoffPowerLawNormSpectralModel'>\n"
     ]
    }
   ],
   "source": [
    "# To see the available norm models shipped with gammapy:\n",
    "for model in SPECTRAL_MODEL_REGISTRY:\n",
    "    if model.is_norm_spectral_model:\n",
    "        print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e96b1a1",
   "metadata": {},
   "source": [
    "As an example, we see the `PowerLawNormSpectralModel`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ab2ed22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.191716Z",
     "iopub.status.busy": "2022-05-12T21:51:23.191367Z",
     "iopub.status.idle": "2022-05-12T21:51:23.207356Z",
     "shell.execute_reply": "2022-05-12T21:51:23.206574Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import PowerLawNormSpectralModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dff6f58d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.211521Z",
     "iopub.status.busy": "2022-05-12T21:51:23.211000Z",
     "iopub.status.idle": "2022-05-12T21:51:23.225266Z",
     "shell.execute_reply": "2022-05-12T21:51:23.222007Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLawNormSpectralModel\n",
      "\n",
      "  type      name     value    unit   error   min max frozen is_norm link\n",
      "-------- --------- ---------- ---- --------- --- --- ------ ------- ----\n",
      "spectral      norm 1.0000e+00      0.000e+00 nan nan  False    True     \n",
      "spectral      tilt 1.0000e-01      0.000e+00 nan nan   True   False     \n",
      "spectral reference 1.0000e+00  TeV 0.000e+00 nan nan   True   False     \n"
     ]
    }
   ],
   "source": [
    "pwl_norm = PowerLawNormSpectralModel(tilt=0.1)\n",
    "print(pwl_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ff4655e",
   "metadata": {},
   "source": [
    "We can check the correction introduced at each energy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e935d3a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.232028Z",
     "iopub.status.busy": "2022-05-12T21:51:23.231241Z",
     "iopub.status.idle": "2022-05-12T21:51:23.246279Z",
     "shell.execute_reply": "2022-05-12T21:51:23.245197Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$[1.1279449,~1,~0.89595846,~0.79432823,~0.7116851] \\; \\mathrm{}$$"
      ],
      "text/plain": [
       "<Quantity [1.12794487, 1.        , 0.89595846, 0.79432823, 0.7116851 ]>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "energy = [0.3, 1, 3, 10, 30] * u.TeV\n",
    "pwl_norm(energy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d084d79d",
   "metadata": {},
   "source": [
    "A typical use case of a norm model would be in applying spectral correction to a `TemplateSpectralModel`. A template model is defined by custom tabular values provided at initialization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7a7b8372",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.251430Z",
     "iopub.status.busy": "2022-05-12T21:51:23.250862Z",
     "iopub.status.idle": "2022-05-12T21:51:23.258639Z",
     "shell.execute_reply": "2022-05-12T21:51:23.257719Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import TemplateSpectralModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4a304df4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.264321Z",
     "iopub.status.busy": "2022-05-12T21:51:23.263754Z",
     "iopub.status.idle": "2022-05-12T21:51:23.598929Z",
     "shell.execute_reply": "2022-05-12T21:51:23.597971Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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HjhwoH7ggQfM+xg4cKB+5plntNZav/322zooKEifOnVK5+Xl6eDgYJ2Wlqb37dunR40apfPz87XWWj/wwAN63rx5+tSpUzo0NFSnpKToixcv6r59++qHHnqo3HjvuOMOvWjRIvPzIUOG6EOHDmmttd60aZMePHiweb2JEyfq4uJivWzZMu3t7a137dqli4qKdI8ePcyvF9Cff/651lrrl156yXzsksdJT083H++2227Ty5cvN7/urVu3aq21zs/P13369NEpKSlaa60XLFig77rrrjLjryyukydPmt+TgoICPXjwYL106dIK36vJkyfr9evXa621Pn78uI6MjNRaa/3JJ5+U+36W+t0zAeJ0Od+rdtlTKHFHs61DaRTcnB2JbOFDZItLF54jgMEUF2tOnstl85mznDu2HYfkrfhnbKNj+u/4ZfwAO1/gAK055DuA/IgRhHfrS5dg34pnnm0MKviL3prCwsLM9Q569uxJYmIimZmZnDt3joEDjWlX7rjjDsaPH2/eZuLEiaX2MWbMGAC6du1K586dzX8ht23blqSkJH777bcy6xNs3ryZQYMGmf86nzhxYrn1Fa6UlZXFhg0bSsV18eJF88+jR48211Vo3rx5qZoLiYmJREVF4eDgYH4tt912GzfffPNVx1mzZg2vv/46OTk5ZGRk0LlzZ0aPHl1qnYMHD7Jnzx6uv/56AIqKiq7qJVga1/Hjx0u9J1OmTGHdunUA5b5XP//8M/v27TMf4/z586VmnK0NdpkUtNYrgBUxMTH32jqWxszBQRHq50Gonwd0CgaM/0BFRUUkJWzn3O4f8UpcxajMz3GI+4zkrc2YTy+Smw/BN3IAse0C6RrcBBenRp4k6kjJ0zWOjo7k5uZWus2V01eXrGFwZX2DwsLCcusTLFu2rPKaJeUoLi6mSZMm5qpxV6osprJcGUteXh4PPvggcXFxhIaGMmPGDPLy8q7aTmtN586d2bhxY6VxVxZXRddoynuviouL2bhxI+7u1ruWJ/8bRa1zdHQkNLIXXce/QNjT63B4KoHzw97EKagrkxxW83zK00z+dSiJ/72dJ196mb/MWcusnxPYdDSdvILGXR+3rvn6+tK0aVPWr18PwGeffWbuNVTH0KFDWbx4MSkpKYBRM/n48ePExsaydu1a0tPTKSgoYNGiRRXup2TNBR8fH8LCwszbaK3Z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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy = [0.3, 1, 3, 10, 30] * u.TeV\n",
    "values = [40, 30, 20, 10, 1] * u.Unit(\"TeV-1 s-1 cm-2\")\n",
    "template = TemplateSpectralModel(energy, values)\n",
    "template.plot(energy_bounds=[0.2, 50] * u.TeV, label=\"template model\")\n",
    "normed_template = template * pwl_norm\n",
    "normed_template.plot(\n",
    "    energy_bounds=[0.2, 50] * u.TeV, label=\"normed_template model\"\n",
    ")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "533ddedf",
   "metadata": {},
   "source": [
    "### Compound Spectral Model\n",
    "\n",
    "A `CompoundSpectralModel` is an arithmetic combination of two spectral models. The model `normed_template` created in the preceding example is an example of a `CompoundSpectralModel`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "652db87a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.605527Z",
     "iopub.status.busy": "2022-05-12T21:51:23.604283Z",
     "iopub.status.idle": "2022-05-12T21:51:23.620113Z",
     "shell.execute_reply": "2022-05-12T21:51:23.618911Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CompoundSpectralModel\n",
      "    Component 1 : TemplateSpectralModel\n",
      "\n",
      "  type   name   value    unit   error   min max frozen is_norm link\n",
      "-------- ---- ---------- ---- --------- --- --- ------ ------- ----\n",
      "spectral norm 1.0000e+00      0.000e+00 nan nan   True    True     \n",
      "    Component 2 : PowerLawNormSpectralModel\n",
      "\n",
      "  type      name     value    unit   error   min max frozen is_norm link\n",
      "-------- --------- ---------- ---- --------- --- --- ------ ------- ----\n",
      "spectral      norm 1.0000e+00      0.000e+00 nan nan  False    True     \n",
      "spectral      tilt 1.0000e-01      0.000e+00 nan nan   True   False     \n",
      "spectral reference 1.0000e+00  TeV 0.000e+00 nan nan   True   False     \n",
      "    Operator : mul\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(normed_template)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9543d03",
   "metadata": {},
   "source": [
    "To create an additive model, you can do simply:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5f224a12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.625545Z",
     "iopub.status.busy": "2022-05-12T21:51:23.624828Z",
     "iopub.status.idle": "2022-05-12T21:51:23.634689Z",
     "shell.execute_reply": "2022-05-12T21:51:23.632921Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CompoundSpectralModel\n",
      "    Component 1 : PowerLawSpectralModel\n",
      "\n",
      "  type      name     value         unit        error   min max frozen is_norm link\n",
      "-------- --------- ---------- -------------- --------- --- --- ------ ------- ----\n",
      "spectral     index 2.2000e+00                0.000e+00 nan nan  False   False     \n",
      "spectral amplitude 2.7000e-12 cm-2 s-1 TeV-1 0.000e+00 nan nan  False    True     \n",
      "spectral reference 1.0000e+00            TeV 0.000e+00 nan nan   True   False     \n",
      "    Component 2 : TemplateSpectralModel\n",
      "\n",
      "  type   name   value    unit   error   min max frozen is_norm link\n",
      "-------- ---- ---------- ---- --------- --- --- ------ ------- ----\n",
      "spectral norm 1.0000e+00      0.000e+00 nan nan   True    True     \n",
      "    Operator : add\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model_add = pwl + template\n",
    "print(model_add)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3700e24d",
   "metadata": {},
   "source": [
    "## Spatial models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21db8aeb",
   "metadata": {},
   "source": [
    "Spatial models are imported from the same `~gammapy.modeling.models` namespace, let's start with a `GaussianSpatialModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c3ae7b8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.639628Z",
     "iopub.status.busy": "2022-05-12T21:51:23.639268Z",
     "iopub.status.idle": "2022-05-12T21:51:23.644728Z",
     "shell.execute_reply": "2022-05-12T21:51:23.643905Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import GaussianSpatialModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b04779a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.648422Z",
     "iopub.status.busy": "2022-05-12T21:51:23.648146Z",
     "iopub.status.idle": "2022-05-12T21:51:23.657637Z",
     "shell.execute_reply": "2022-05-12T21:51:23.656516Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianSpatialModel\n",
      "\n",
      "  type   name   value    unit   error      min        max    frozen is_norm link\n",
      "------- ----- ---------- ---- --------- ---------- --------- ------ ------- ----\n",
      "spatial lon_0 0.0000e+00  deg 0.000e+00        nan       nan  False   False     \n",
      "spatial lat_0 0.0000e+00  deg 0.000e+00 -9.000e+01 9.000e+01  False   False     \n",
      "spatial sigma 2.0000e-01  deg 0.000e+00  0.000e+00       nan  False   False     \n",
      "spatial     e 0.0000e+00      0.000e+00  0.000e+00 1.000e+00   True   False     \n",
      "spatial   phi 0.0000e+00  deg 0.000e+00        nan       nan   True   False     \n"
     ]
    }
   ],
   "source": [
    "gauss = GaussianSpatialModel(lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\")\n",
    "print(gauss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b8a05c4",
   "metadata": {},
   "source": [
    "Again you can check the `SPATIAL_MODELS` registry to see which models are available or take a look at the [model gallery](https://docs.gammapy.org/dev/modeling/gallery/index.html#spatial-models)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b73c517a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.661558Z",
     "iopub.status.busy": "2022-05-12T21:51:23.661285Z",
     "iopub.status.idle": "2022-05-12T21:51:23.665548Z",
     "shell.execute_reply": "2022-05-12T21:51:23.664436Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registry\n",
      "--------\n",
      "\n",
      "ConstantSpatialModel           : ['ConstantSpatialModel', 'const'] \n",
      "TemplateSpatialModel           : ['TemplateSpatialModel', 'template'] \n",
      "DiskSpatialModel               : ['DiskSpatialModel', 'disk'] \n",
      "GaussianSpatialModel           : ['GaussianSpatialModel', 'gauss'] \n",
      "GeneralizedGaussianSpatialModel: ['GeneralizedGaussianSpatialModel', 'gauss-general'] \n",
      "PointSpatialModel              : ['PointSpatialModel', 'point'] \n",
      "ShellSpatialModel              : ['ShellSpatialModel', 'shell'] \n",
      "Shell2SpatialModel             : ['Shell2SpatialModel', 'shell2'] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SPATIAL_MODEL_REGISTRY\n",
    "\n",
    "print(SPATIAL_MODEL_REGISTRY)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e771fb7e",
   "metadata": {},
   "source": [
    "The default coordinate frame for all spatial models is ``\"icrs\"``, but the frame can be modified using the\n",
    "``frame`` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ea62befd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.672616Z",
     "iopub.status.busy": "2022-05-12T21:51:23.671152Z",
     "iopub.status.idle": "2022-05-12T21:51:23.678328Z",
     "shell.execute_reply": "2022-05-12T21:51:23.677622Z"
    }
   },
   "outputs": [],
   "source": [
    "gauss = GaussianSpatialModel(\n",
    "    lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\", frame=\"galactic\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d82a3dd",
   "metadata": {},
   "source": [
    "You can specify any valid `astropy.coordinates` frame. The center position of the model can be retrieved as a `astropy.coordinates.SkyCoord` object using `SpatialModel.position`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a9c2be74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.682776Z",
     "iopub.status.busy": "2022-05-12T21:51:23.682467Z",
     "iopub.status.idle": "2022-05-12T21:51:23.690177Z",
     "shell.execute_reply": "2022-05-12T21:51:23.688615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<SkyCoord (Galactic): (l, b) in deg\n",
      "    (0., 0.)>\n"
     ]
    }
   ],
   "source": [
    "print(gauss.position)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02fcbdaa",
   "metadata": {},
   "source": [
    "Spatial models can be evaluated again by calling the instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c404a31d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.695809Z",
     "iopub.status.busy": "2022-05-12T21:51:23.695497Z",
     "iopub.status.idle": "2022-05-12T21:51:23.704250Z",
     "shell.execute_reply": "2022-05-12T21:51:23.703104Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13061.88470839 10172.60603928] 1 / sr\n"
     ]
    }
   ],
   "source": [
    "lon = [0, 0.1] * u.deg\n",
    "lat = [0, 0.1] * u.deg\n",
    "\n",
    "flux_per_omega = gauss(lon, lat)\n",
    "print(flux_per_omega)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bd69ef8",
   "metadata": {},
   "source": [
    "The returned quantity corresponds to a surface brightness. Spatial model\n",
    "can be also evaluated using `~gammapy.maps.Map` and `~gammapy.maps.Geom` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7bdea6c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:23.708997Z",
     "iopub.status.busy": "2022-05-12T21:51:23.708671Z",
     "iopub.status.idle": "2022-05-12T21:51:24.240359Z",
     "shell.execute_reply": "2022-05-12T21:51:24.239198Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m = Map.create(skydir=(0, 0), width=(1, 1), binsz=0.02, frame=\"galactic\")\n",
    "m.quantity = gauss.evaluate_geom(m.geom)\n",
    "m.plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78b02bd3",
   "metadata": {},
   "source": [
    "Again for convenience the model can be plotted directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "78485784",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:24.246664Z",
     "iopub.status.busy": "2022-05-12T21:51:24.245881Z",
     "iopub.status.idle": "2022-05-12T21:51:24.728781Z",
     "shell.execute_reply": "2022-05-12T21:51:24.727763Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gauss.plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d9a68f0",
   "metadata": {},
   "source": [
    "All spatial models have an associated sky region to it e.g. to illustrate the extend of the model on a sky image. The returned object is an `regions.SkyRegion` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7c644fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:24.734636Z",
     "iopub.status.busy": "2022-05-12T21:51:24.734285Z",
     "iopub.status.idle": "2022-05-12T21:51:24.758580Z",
     "shell.execute_reply": "2022-05-12T21:51:24.755678Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Region: EllipseSkyRegion\n",
      "center: <SkyCoord (Galactic): (l, b) in deg\n",
      "    (0., 0.)>\n",
      "width: 0.6000000000000001 deg\n",
      "height: 0.6000000000000001 deg\n",
      "angle: 0.0 deg\n"
     ]
    }
   ],
   "source": [
    "print(gauss.to_region())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8506a108",
   "metadata": {},
   "source": [
    "Now we can plot the region on an sky image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "51c3fcc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:24.770231Z",
     "iopub.status.busy": "2022-05-12T21:51:24.767854Z",
     "iopub.status.idle": "2022-05-12T21:51:25.407240Z",
     "shell.execute_reply": "2022-05-12T21:51:25.384744Z"
    },
    "nbsphinx-thumbnail": {
     "tooltip": "Introduction and overview on how to work with models in Gammapy."
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create and plot the model\n",
    "gauss_elongated = GaussianSpatialModel(\n",
    "    lon_0=\"0 deg\", lat_0=\"0 deg\", sigma=\"0.2 deg\", e=0.7, phi=\"45 deg\"\n",
    ")\n",
    "ax = gauss_elongated.plot(add_cbar=True)\n",
    "\n",
    "# add region illustration\n",
    "region = gauss_elongated.to_region()\n",
    "region_pix = region.to_pixel(ax.wcs)\n",
    "ax.add_artist(region_pix.as_artist(ec=\"w\", fc=\"None\"));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c561acbf",
   "metadata": {},
   "source": [
    "The `.to_region()` method can also be useful to write e.g. ds9 region files using `write_ds9` from the `regions` package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9267d97b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.414540Z",
     "iopub.status.busy": "2022-05-12T21:51:25.413626Z",
     "iopub.status.idle": "2022-05-12T21:51:25.436499Z",
     "shell.execute_reply": "2022-05-12T21:51:25.435448Z"
    }
   },
   "outputs": [],
   "source": [
    "from regions import Regions\n",
    "\n",
    "regions = Regions([gauss.to_region(), gauss_elongated.to_region()])\n",
    "\n",
    "filename = \"regions.reg\"\n",
    "regions.write(\n",
    "    filename,\n",
    "    format=\"ds9\",\n",
    "    overwrite=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a1929c10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.444493Z",
     "iopub.status.busy": "2022-05-12T21:51:25.443243Z",
     "iopub.status.idle": "2022-05-12T21:51:25.581982Z",
     "shell.execute_reply": "2022-05-12T21:51:25.580647Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Region file format: DS9 astropy/regions\r\n",
      "fk5\r\n",
      "ellipse(266.404996,-28.936172,0.300000,0.300000,0.000000)\r\n",
      "ellipse(0.000006,0.000003,0.214243,0.300000,45.000000)\r\n"
     ]
    }
   ],
   "source": [
    "!cat regions.reg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c2cfa43",
   "metadata": {},
   "source": [
    "## Temporal models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "774b42c9",
   "metadata": {},
   "source": [
    "Temporal models are imported from the same `~gammapy.modeling.models` namespace, let's start with a `GaussianTemporalModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3c328f66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.592532Z",
     "iopub.status.busy": "2022-05-12T21:51:25.592037Z",
     "iopub.status.idle": "2022-05-12T21:51:25.601458Z",
     "shell.execute_reply": "2022-05-12T21:51:25.598164Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import GaussianTemporalModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c98d1f52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.617897Z",
     "iopub.status.busy": "2022-05-12T21:51:25.617221Z",
     "iopub.status.idle": "2022-05-12T21:51:25.643779Z",
     "shell.execute_reply": "2022-05-12T21:51:25.629096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianTemporalModel\n",
      "\n",
      "  type    name   value    unit   error   min max frozen is_norm link\n",
      "-------- ----- ---------- ---- --------- --- --- ------ ------- ----\n",
      "temporal t_ref 5.9240e+04    d 0.000e+00 nan nan  False   False     \n",
      "temporal sigma 2.0000e+00    d 0.000e+00 nan nan  False   False     \n"
     ]
    }
   ],
   "source": [
    "gauss_temp = GaussianTemporalModel(t_ref=59240.0 * u.d, sigma=2.0 * u.d)\n",
    "print(gauss_temp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae1f431e",
   "metadata": {},
   "source": [
    "To check the `TEMPORAL_MODELS` registry to see which models are available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0d57c033",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.650730Z",
     "iopub.status.busy": "2022-05-12T21:51:25.649746Z",
     "iopub.status.idle": "2022-05-12T21:51:25.657445Z",
     "shell.execute_reply": "2022-05-12T21:51:25.655935Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Registry\n",
      "--------\n",
      "\n",
      "ConstantTemporalModel           : ['ConstantTemporalModel', 'const'] \n",
      "LinearTemporalModel             : ['LinearTemporalModel', 'linear'] \n",
      "LightCurveTemplateTemporalModel : ['LightCurveTemplateTemporalModel', 'template'] \n",
      "ExpDecayTemporalModel           : ['ExpDecayTemporalModel', 'exp-decay'] \n",
      "GaussianTemporalModel           : ['GaussianTemporalModel', 'gauss'] \n",
      "GeneralizedGaussianTemporalModel: ['GeneralizedGaussianTemporalModel', 'gengauss'] \n",
      "PowerLawTemporalModel           : ['PowerLawTemporalModel', 'powerlaw'] \n",
      "SineTemporalModel               : ['SineTemporalModel', 'sinus'] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import TEMPORAL_MODEL_REGISTRY\n",
    "\n",
    "print(TEMPORAL_MODEL_REGISTRY)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9789a57",
   "metadata": {},
   "source": [
    "Temporal models can be evaluated on `astropy.time.Time` objects. The returned quantity is a dimensionless number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e9cce09d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.662599Z",
     "iopub.status.busy": "2022-05-12T21:51:25.662205Z",
     "iopub.status.idle": "2022-05-12T21:51:25.675292Z",
     "shell.execute_reply": "2022-05-12T21:51:25.674361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$0.32465247 \\; \\mathrm{}$$"
      ],
      "text/plain": [
       "<Quantity 0.32465247>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from astropy.time import Time\n",
    "\n",
    "time = Time(\"2021-01-29 00:00:00.000\")\n",
    "gauss_temp(time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6988e1a9",
   "metadata": {},
   "source": [
    "As for other models, they can be plotted in a given time range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c53c133d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.679984Z",
     "iopub.status.busy": "2022-05-12T21:51:25.679652Z",
     "iopub.status.idle": "2022-05-12T21:51:25.865185Z",
     "shell.execute_reply": "2022-05-12T21:51:25.863345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Time [iso]', ylabel='Norm / A.U.'>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time = Time([59233.0, 59250], format=\"mjd\")\n",
    "gauss_temp.plot(time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "543e1c8c",
   "metadata": {},
   "source": [
    "## SkyModel"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9cfe721",
   "metadata": {},
   "source": [
    "The `~gammapy.modeling.models.SkyModel` class combines a spectral, and optionally, a spatial model and a temporal. It can be created\n",
    "from existing spectral, spatial and temporal model components:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b0902845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.881389Z",
     "iopub.status.busy": "2022-05-12T21:51:25.880798Z",
     "iopub.status.idle": "2022-05-12T21:51:25.909424Z",
     "shell.execute_reply": "2022-05-12T21:51:25.903790Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : GaussianTemporalModel\n",
      "  Parameters:\n",
      "    index                         :      2.200   +/-    0.00             \n",
      "    amplitude                     :   2.70e-12   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "    lon_0                         :      0.000   +/-    0.00 deg         \n",
      "    lat_0                         :      0.000   +/-    0.00 deg         \n",
      "    sigma                         :      0.200   +/-    0.00 deg         \n",
      "    e                     (frozen):      0.000                   \n",
      "    phi                   (frozen):      0.000       deg         \n",
      "    t_ref                         :  59240.000   +/-    0.00 d           \n",
      "    sigma                         :      2.000   +/-    0.00 d           \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from gammapy.modeling.models import SkyModel\n",
    "\n",
    "model = SkyModel(\n",
    "    spectral_model=pwl,\n",
    "    spatial_model=gauss,\n",
    "    temporal_model=gauss_temp,\n",
    "    name=\"my-source\",\n",
    ")\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "364f6415",
   "metadata": {},
   "source": [
    "It is good practice to specify a name for your sky model, so that you can access it later by name and have meaningful identifier you serilisation. If you don't define a name, a unique random name is generated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "84ee9065",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.914484Z",
     "iopub.status.busy": "2022-05-12T21:51:25.914115Z",
     "iopub.status.idle": "2022-05-12T21:51:25.926145Z",
     "shell.execute_reply": "2022-05-12T21:51:25.924678Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K98R2CDa\n"
     ]
    }
   ],
   "source": [
    "model_without_name = SkyModel(spectral_model=pwl, spatial_model=gauss)\n",
    "print(model_without_name.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc18206e",
   "metadata": {},
   "source": [
    "The individual components of the source model can be accessed using `.spectral_model`,  `.spatial_model` and `.temporal_model`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "14ffbbeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.932045Z",
     "iopub.status.busy": "2022-05-12T21:51:25.931672Z",
     "iopub.status.idle": "2022-05-12T21:51:25.940470Z",
     "shell.execute_reply": "2022-05-12T21:51:25.938561Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.modeling.models.spectral.PowerLawSpectralModel at 0x15fa85be0>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.spectral_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9bce536d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:25.946827Z",
     "iopub.status.busy": "2022-05-12T21:51:25.946513Z",
     "iopub.status.idle": "2022-05-12T21:51:26.068024Z",
     "shell.execute_reply": "2022-05-12T21:51:26.066647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.modeling.models.spatial.GaussianSpatialModel at 0x15fec9df0>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.spatial_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c4c11eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.075115Z",
     "iopub.status.busy": "2022-05-12T21:51:26.074727Z",
     "iopub.status.idle": "2022-05-12T21:51:26.082541Z",
     "shell.execute_reply": "2022-05-12T21:51:26.081683Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<gammapy.modeling.models.temporal.GaussianTemporalModel at 0x168bec9d0>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.temporal_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6144b17d",
   "metadata": {},
   "source": [
    "And can be used as you have seen already seen above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "85eeab0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.088144Z",
     "iopub.status.busy": "2022-05-12T21:51:26.087522Z",
     "iopub.status.idle": "2022-05-12T21:51:26.445963Z",
     "shell.execute_reply": "2022-05-12T21:51:26.444111Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.spectral_model.plot(energy_bounds=[1, 10] * u.TeV);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0e5774",
   "metadata": {},
   "source": [
    "Note that the gammapy fitting can interface only with a `SkyModel` and **not** its individual components. So, it is customary to work with `SkyModel` even if you are not doing a 3D fit. Since the amplitude parameter resides on the `SpectralModel`, specifying a spectral component is compulsory. The temporal and spatial components are optional. The temporal model needs to be specified only for timing analysis. In some cases (e.g. when doing a spectral analysis) there is no need for a spatial component either, and only a spectral model is associated with the source. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b4c2dac2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.450212Z",
     "iopub.status.busy": "2022-05-12T21:51:26.450029Z",
     "iopub.status.idle": "2022-05-12T21:51:26.458377Z",
     "shell.execute_reply": "2022-05-12T21:51:26.457366Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : source-spectrum\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : \n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    index                         :      2.200   +/-    0.00             \n",
      "    amplitude                     :   2.70e-12   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model_spectrum = SkyModel(spectral_model=pwl, name=\"source-spectrum\")\n",
    "print(model_spectrum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cc0255b",
   "metadata": {},
   "source": [
    "Additionally the spatial model of `~gammapy.modeling.models.SkyModel` can be used to represent source models based on templates, where the spatial and energy axes are correlated. It can be created e.g. from an existing FITS file:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a349235b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.463588Z",
     "iopub.status.busy": "2022-05-12T21:51:26.463108Z",
     "iopub.status.idle": "2022-05-12T21:51:26.479493Z",
     "shell.execute_reply": "2022-05-12T21:51:26.470967Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import TemplateSpatialModel\n",
    "from gammapy.modeling.models import PowerLawNormSpectralModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "800f1dba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.488411Z",
     "iopub.status.busy": "2022-05-12T21:51:26.486080Z",
     "iopub.status.idle": "2022-05-12T21:51:26.581666Z",
     "shell.execute_reply": "2022-05-12T21:51:26.580869Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : vZDhhooV\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Spatial  model type       : TemplateSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "diffuse_cube = TemplateSpatialModel.read(\n",
    "    \"$GAMMAPY_DATA/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\", normalize=False\n",
    ")\n",
    "diffuse = SkyModel(PowerLawNormSpectralModel(), diffuse_cube)\n",
    "print(diffuse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9402b9e1",
   "metadata": {},
   "source": [
    "Note that if the spatial model is not normalized over the sky it has to be combined with a normalized spectral model, for example `~gammapy.modeling.models.PowerLawNormSpectralModel`. This is the only case in `gammapy.models.SkyModel` where the unit is fully attached to the spatial model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ded7f5",
   "metadata": {},
   "source": [
    "## Modifying model parameters\n",
    "\n",
    "Model parameters can be modified (eg: frozen, values changed, etc at any point), eg:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6062d197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.590976Z",
     "iopub.status.busy": "2022-05-12T21:51:26.590367Z",
     "iopub.status.idle": "2022-05-12T21:51:26.607984Z",
     "shell.execute_reply": "2022-05-12T21:51:26.605794Z"
    }
   },
   "outputs": [],
   "source": [
    "# Freezing a parameter\n",
    "model.spectral_model.index.frozen = True\n",
    "# Making a parameter free\n",
    "model.spectral_model.index.frozen = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "db1a7e2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.614299Z",
     "iopub.status.busy": "2022-05-12T21:51:26.614158Z",
     "iopub.status.idle": "2022-05-12T21:51:26.622593Z",
     "shell.execute_reply": "2022-05-12T21:51:26.618633Z"
    }
   },
   "outputs": [],
   "source": [
    "# Changing a value\n",
    "model.spectral_model.index.value = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "523799ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.628359Z",
     "iopub.status.busy": "2022-05-12T21:51:26.627656Z",
     "iopub.status.idle": "2022-05-12T21:51:26.642123Z",
     "shell.execute_reply": "2022-05-12T21:51:26.641262Z"
    }
   },
   "outputs": [],
   "source": [
    "# Setting min and max ranges on parameters\n",
    "model.spectral_model.index.min = 1.0\n",
    "model.spectral_model.index.max = 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3c0e451f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.647434Z",
     "iopub.status.busy": "2022-05-12T21:51:26.646878Z",
     "iopub.status.idle": "2022-05-12T21:51:26.663087Z",
     "shell.execute_reply": "2022-05-12T21:51:26.659345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=10</i>\n",
       "<table id=\"table6048839712-277609\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>idx</th><th>type</th><th>name</th><th>value</th><th>unit</th><th>error</th><th>min</th><th>max</th><th>frozen</th><th>is_norm</th><th>link</th></tr></thead>\n",
       "<tr><td>0</td><td>spectral</td><td>index</td><td>3.0000e+00</td><td></td><td>0.000e+00</td><td>1.000e+00</td><td>5.000e+00</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>1</td><td>spectral</td><td>amplitude</td><td>2.7000e-12</td><td>cm-2 s-1 TeV-1</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>True</td><td></td></tr>\n",
       "<tr><td>2</td><td>spectral</td><td>reference</td><td>1.0000e+00</td><td>TeV</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>3</td><td>spatial</td><td>lon_0</td><td>0.0000e+00</td><td>deg</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>4</td><td>spatial</td><td>lat_0</td><td>0.0000e+00</td><td>deg</td><td>0.000e+00</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>5</td><td>spatial</td><td>sigma</td><td>2.0000e-01</td><td>deg</td><td>0.000e+00</td><td>0.000e+00</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>6</td><td>spatial</td><td>e</td><td>0.0000e+00</td><td></td><td>0.000e+00</td><td>0.000e+00</td><td>1.000e+00</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>7</td><td>spatial</td><td>phi</td><td>0.0000e+00</td><td>deg</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>True</td><td>False</td><td></td></tr>\n",
       "<tr><td>8</td><td>temporal</td><td>t_ref</td><td>5.9240e+04</td><td>d</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "<tr><td>9</td><td>temporal</td><td>sigma</td><td>2.0000e+00</td><td>d</td><td>0.000e+00</td><td>nan</td><td>nan</td><td>False</td><td>False</td><td></td></tr>\n",
       "</table><style>table.dataTable {clear: both; width: auto !important; margin: 0 !important;}\n",
       ".dataTables_info, .dataTables_length, .dataTables_filter, .dataTables_paginate{\n",
       "display: inline-block; margin-right: 1em; }\n",
       ".paginate_button { margin-right: 5px; }\n",
       "</style>\n",
       "<script>\n",
       "\n",
       "var astropy_sort_num = function(a, b) {\n",
       "    var a_num = parseFloat(a);\n",
       "    var b_num = parseFloat(b);\n",
       "\n",
       "    if (isNaN(a_num) && isNaN(b_num))\n",
       "        return ((a < b) ? -1 : ((a > b) ? 1 : 0));\n",
       "    else if (!isNaN(a_num) && !isNaN(b_num))\n",
       "        return ((a_num < b_num) ? -1 : ((a_num > b_num) ? 1 : 0));\n",
       "    else\n",
       "        return isNaN(a_num) ? -1 : 1;\n",
       "}\n",
       "\n",
       "require.config({paths: {\n",
       "    datatables: 'https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min'\n",
       "}});\n",
       "require([\"datatables\"], function(){\n",
       "    console.log(\"$('#table6048839712-277609').dataTable()\");\n",
       "    \n",
       "jQuery.extend( jQuery.fn.dataTableExt.oSort, {\n",
       "    \"optionalnum-asc\": astropy_sort_num,\n",
       "    \"optionalnum-desc\": function (a,b) { return -astropy_sort_num(a, b); }\n",
       "});\n",
       "\n",
       "    $('#table6048839712-277609').dataTable({\n",
       "        order: [],\n",
       "        pageLength: 50,\n",
       "        lengthMenu: [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']],\n",
       "        pagingType: \"full_numbers\",\n",
       "        columnDefs: [{targets: [0, 3, 5, 6, 7], type: \"optionalnum\"}]\n",
       "    });\n",
       "});\n",
       "</script>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualise the model as a table\n",
    "model.parameters.to_table().show_in_notebook()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc7e977",
   "metadata": {},
   "source": [
    "You can use the interactive boxes to choose model parameters by name, type or other attrributes mentioned in the column names."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2943c0c0",
   "metadata": {},
   "source": [
    "## Model lists and serialisation\n",
    "\n",
    "In a typical analysis scenario a model consists of multiple model components, or a \"catalog\" or \"source library\". To handle this list of multiple model components, Gammapy has a `Models` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "61f5d0cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.669581Z",
     "iopub.status.busy": "2022-05-12T21:51:26.668684Z",
     "iopub.status.idle": "2022-05-12T21:51:26.674679Z",
     "shell.execute_reply": "2022-05-12T21:51:26.673899Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d4c460ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.679056Z",
     "iopub.status.busy": "2022-05-12T21:51:26.678704Z",
     "iopub.status.idle": "2022-05-12T21:51:26.684947Z",
     "shell.execute_reply": "2022-05-12T21:51:26.683974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Models\n",
      "\n",
      "Component 0: SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : GaussianTemporalModel\n",
      "  Parameters:\n",
      "    index                         :      3.000   +/-    0.00             \n",
      "    amplitude                     :   2.70e-12   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "    lon_0                         :      0.000   +/-    0.00 deg         \n",
      "    lat_0                         :      0.000   +/-    0.00 deg         \n",
      "    sigma                         :      0.200   +/-    0.00 deg         \n",
      "    e                     (frozen):      0.000                   \n",
      "    phi                   (frozen):      0.000       deg         \n",
      "    t_ref                         :  59240.000   +/-    0.00 d           \n",
      "    sigma                         :      2.000   +/-    0.00 d           \n",
      "\n",
      "Component 1: SkyModel\n",
      "\n",
      "  Name                      : vZDhhooV\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawNormSpectralModel\n",
      "  Spatial  model type       : TemplateSpatialModel\n",
      "  Temporal model type       : \n",
      "  Parameters:\n",
      "    norm                          :      1.000   +/-    0.00             \n",
      "    tilt                  (frozen):      0.000                   \n",
      "    reference             (frozen):      1.000       TeV         \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = Models([model, diffuse])\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e69128d",
   "metadata": {},
   "source": [
    "Individual model components in the list can be accessed by their name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "26f7c3d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.692667Z",
     "iopub.status.busy": "2022-05-12T21:51:26.692159Z",
     "iopub.status.idle": "2022-05-12T21:51:26.697825Z",
     "shell.execute_reply": "2022-05-12T21:51:26.696613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "  Name                      : my-source\n",
      "  Datasets names            : None\n",
      "  Spectral model type       : PowerLawSpectralModel\n",
      "  Spatial  model type       : GaussianSpatialModel\n",
      "  Temporal model type       : GaussianTemporalModel\n",
      "  Parameters:\n",
      "    index                         :      3.000   +/-    0.00             \n",
      "    amplitude                     :   2.70e-12   +/- 0.0e+00 1 / (cm2 s TeV)\n",
      "    reference             (frozen):      1.000       TeV         \n",
      "    lon_0                         :      0.000   +/-    0.00 deg         \n",
      "    lat_0                         :      0.000   +/-    0.00 deg         \n",
      "    sigma                         :      0.200   +/-    0.00 deg         \n",
      "    e                     (frozen):      0.000                   \n",
      "    phi                   (frozen):      0.000       deg         \n",
      "    t_ref                         :  59240.000   +/-    0.00 d           \n",
      "    sigma                         :      2.000   +/-    0.00 d           \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(models[\"my-source\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fce5632",
   "metadata": {},
   "source": [
    "**Note:**To make the access by name unambiguous, models are required to have a unique name, otherwise an error will be thrown.\n",
    "\n",
    "To see which models are available you can use the `.names` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f9380d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.704249Z",
     "iopub.status.busy": "2022-05-12T21:51:26.703663Z",
     "iopub.status.idle": "2022-05-12T21:51:26.709114Z",
     "shell.execute_reply": "2022-05-12T21:51:26.708045Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['my-source', 'vZDhhooV']\n"
     ]
    }
   ],
   "source": [
    "print(models.names)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5a4ad31",
   "metadata": {},
   "source": [
    "Note that a `SkyModel` object can be evaluated for a given longitude, latitude, and energy, but the `Models` object cannot. This `Models` container object will be assigned to `Dataset` or `Datasets` together with the data to be fitted as explained in other analysis tutorials (see for example the [modeling](../analysis/2D/modeling_2D.ipynb) notebook).\n",
    "\n",
    "The `Models` class also has in place `.append()` and `.extend()` methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fc6b0012",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.715185Z",
     "iopub.status.busy": "2022-05-12T21:51:26.714849Z",
     "iopub.status.idle": "2022-05-12T21:51:26.746467Z",
     "shell.execute_reply": "2022-05-12T21:51:26.745010Z"
    }
   },
   "outputs": [],
   "source": [
    "model_copy = model.copy(name=\"my-source-copy\")\n",
    "models.append(model_copy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9662d67",
   "metadata": {},
   "source": [
    "This list of models can be also serialised to a custom YAML based format: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a8596442",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.751297Z",
     "iopub.status.busy": "2022-05-12T21:51:26.750933Z",
     "iopub.status.idle": "2022-05-12T21:51:26.776608Z",
     "shell.execute_reply": "2022-05-12T21:51:26.775842Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Template file already exits, and overwrite is False\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\n",
      "-   name: my-source\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        -   name: index\n",
      "            value: 3.0\n",
      "            is_norm: false\n",
      "        -   name: amplitude\n",
      "            value: 2.7e-12\n",
      "            unit: cm-2 s-1 TeV-1\n",
      "            is_norm: true\n",
      "        -   name: reference\n",
      "            value: 1.0\n",
      "            unit: TeV\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "    spatial:\n",
      "        type: GaussianSpatialModel\n",
      "        frame: galactic\n",
      "        parameters:\n",
      "        -   name: lon_0\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: lat_0\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: sigma\n",
      "            value: 0.2\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: e\n",
      "            value: 0.0\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "        -   name: phi\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "    temporal:\n",
      "        type: GaussianTemporalModel\n",
      "        parameters:\n",
      "        -   name: t_ref\n",
      "            value: 59240.0\n",
      "            unit: d\n",
      "            is_norm: false\n",
      "        -   name: sigma\n",
      "            value: 2.0\n",
      "            unit: d\n",
      "            is_norm: false\n",
      "-   name: vZDhhooV\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawNormSpectralModel\n",
      "        parameters:\n",
      "        -   name: norm\n",
      "            value: 1.0\n",
      "            is_norm: true\n",
      "        -   name: tilt\n",
      "            value: 0.0\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "        -   name: reference\n",
      "            value: 1.0\n",
      "            unit: TeV\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "    spatial:\n",
      "        type: TemplateSpatialModel\n",
      "        frame: galactic\n",
      "        parameters: []\n",
      "        filename: /Users/adonath/github/gammapy/gammapy-data/fermi-3fhl-gc/gll_iem_v06_gc.fits.gz\n",
      "        normalize: false\n",
      "        unit: 1 / (cm2 MeV s sr)\n",
      "-   name: my-source-copy\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        -   name: index\n",
      "            value: 3.0\n",
      "            is_norm: false\n",
      "        -   name: amplitude\n",
      "            value: 2.7e-12\n",
      "            unit: cm-2 s-1 TeV-1\n",
      "            is_norm: true\n",
      "        -   name: reference\n",
      "            value: 1.0\n",
      "            unit: TeV\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "    spatial:\n",
      "        type: GaussianSpatialModel\n",
      "        frame: galactic\n",
      "        parameters:\n",
      "        -   name: lon_0\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: lat_0\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: sigma\n",
      "            value: 0.2\n",
      "            unit: deg\n",
      "            is_norm: false\n",
      "        -   name: e\n",
      "            value: 0.0\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "        -   name: phi\n",
      "            value: 0.0\n",
      "            unit: deg\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "    temporal:\n",
      "        type: GaussianTemporalModel\n",
      "        parameters:\n",
      "        -   name: t_ref\n",
      "            value: 59240.0\n",
      "            unit: d\n",
      "            is_norm: false\n",
      "        -   name: sigma\n",
      "            value: 2.0\n",
      "            unit: d\n",
      "            is_norm: false\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models_yaml = models.to_yaml()\n",
    "print(models_yaml)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04ebddf1",
   "metadata": {},
   "source": [
    "The structure of the yaml files follows the structure of the python objects.\n",
    "The `components` listed correspond to the `SkyModel` and `SkyDiffuseCube` components of the `Models`. \n",
    "For each `SkyModel` we have  information about its `name`, `type` (corresponding to the tag attribute) and sub-mobels (i.e `spectral` model and eventually `spatial` model). Then the spatial and spectral models are defined by their type and parameters. The `parameters` keys name/value/unit are mandatory, while the keys min/max/frozen are optionnals (so you can prepare shorter files).\n",
    "\n",
    "If you want to write this list of models to disk and read it back later you can use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "69686cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.781242Z",
     "iopub.status.busy": "2022-05-12T21:51:26.780960Z",
     "iopub.status.idle": "2022-05-12T21:51:26.857366Z",
     "shell.execute_reply": "2022-05-12T21:51:26.855641Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Template file already exits, and overwrite is False\n"
     ]
    }
   ],
   "source": [
    "models.write(\"models.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6ad3dd78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.863117Z",
     "iopub.status.busy": "2022-05-12T21:51:26.862476Z",
     "iopub.status.idle": "2022-05-12T21:51:26.965504Z",
     "shell.execute_reply": "2022-05-12T21:51:26.963783Z"
    }
   },
   "outputs": [],
   "source": [
    "models_read = Models.read(\"models.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f993ab0f",
   "metadata": {},
   "source": [
    "Additionally the models can exported and imported togeter with the data using the `Datasets.read()` and `Datasets.write()` methods as shown in the [analysis_mwl](../analysis/3D/analysis_mwl.ipynb) notebook.\n",
    "\n",
    "## Models with shared parameter\n",
    "\n",
    "A model parameter can be shared with other models, for example we can define two power-law models with the same spectral index but different amplitudes: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d9620fb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.979157Z",
     "iopub.status.busy": "2022-05-12T21:51:26.978862Z",
     "iopub.status.idle": "2022-05-12T21:51:26.983392Z",
     "shell.execute_reply": "2022-05-12T21:51:26.982620Z"
    },
    "run_control": {
     "marked": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter(name='index', value=2.3, factor=2.3, scale=1.0, unit=Unit(dimensionless), min=1.0, max=5.0, frozen=False, id=0x15faa3250)\n",
      "Parameter(name='index', value=2.3, factor=2.3, scale=1.0, unit=Unit(dimensionless), min=1.0, max=5.0, frozen=False, id=0x15faa3250)\n"
     ]
    }
   ],
   "source": [
    "pwl2 = PowerLawSpectralModel()\n",
    "pwl2.index = pwl.index\n",
    "pwl.index.value = 2.3  # also update pwl2 as the parameter object is now the same as shown below\n",
    "print(pwl.index)\n",
    "print(pwl2.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fc77a9e",
   "metadata": {},
   "source": [
    "In the YAML files the shared parameter is flagged by the additional `link` entry that follows the convention `parameter.name@unique_id`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "97b31e6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:26.991301Z",
     "iopub.status.busy": "2022-05-12T21:51:26.990863Z",
     "iopub.status.idle": "2022-05-12T21:51:27.009913Z",
     "shell.execute_reply": "2022-05-12T21:51:27.008746Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\n",
      "-   name: source1\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        -   name: index\n",
      "            value: 2.3\n",
      "            is_norm: false\n",
      "            link: index@LW5yVIkA\n",
      "        -   name: amplitude\n",
      "            value: 2.7e-12\n",
      "            unit: cm-2 s-1 TeV-1\n",
      "            is_norm: true\n",
      "        -   name: reference\n",
      "            value: 1.0\n",
      "            unit: TeV\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "-   name: source2\n",
      "    type: SkyModel\n",
      "    spectral:\n",
      "        type: PowerLawSpectralModel\n",
      "        parameters:\n",
      "        -   name: index\n",
      "            value: 2.3\n",
      "            is_norm: false\n",
      "            link: index@LW5yVIkA\n",
      "        -   name: amplitude\n",
      "            value: 1.0e-12\n",
      "            unit: cm-2 s-1 TeV-1\n",
      "            is_norm: true\n",
      "        -   name: reference\n",
      "            value: 1.0\n",
      "            unit: TeV\n",
      "            frozen: true\n",
      "            is_norm: false\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = Models(\n",
    "    [SkyModel(pwl, name=\"source1\"), SkyModel(pwl2, name=\"source2\")]\n",
    ")\n",
    "models_yaml = models.to_yaml()\n",
    "print(models_yaml)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e15b37",
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Implementing a custom model\n",
    "\n",
    "In order to add a user defined spectral model you have to create a SpectralModel subclass.\n",
    "This new model class should include:\n",
    "\n",
    "- a tag used for serialization (it can be the same as the class name)\n",
    "- an instantiation of each Parameter with their unit, default values and frozen status\n",
    "- the evaluate function where the mathematical expression for the model is defined.\n",
    "\n",
    "As an example we will use a PowerLawSpectralModel plus a Gaussian (with fixed width).\n",
    "First we define the new custom model class that we name `MyCustomSpectralModel`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "88860e64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.015817Z",
     "iopub.status.busy": "2022-05-12T21:51:27.015546Z",
     "iopub.status.idle": "2022-05-12T21:51:27.024334Z",
     "shell.execute_reply": "2022-05-12T21:51:27.022846Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling import Parameter\n",
    "from gammapy.modeling.models import SpectralModel\n",
    "\n",
    "\n",
    "class MyCustomSpectralModel(SpectralModel):\n",
    "    \"\"\"My custom spectral model, parametrising a power law plus a Gaussian spectral line.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    amplitude : `astropy.units.Quantity`\n",
    "        Amplitude of the spectra model.\n",
    "    index : `astropy.units.Quantity`\n",
    "        Spectral index of the model.\n",
    "    reference : `astropy.units.Quantity`\n",
    "        Reference energy of the power law.\n",
    "    mean : `astropy.units.Quantity`\n",
    "        Mean value of the Gaussian.\n",
    "    width : `astropy.units.Quantity`\n",
    "        Sigma width of the Gaussian line.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    tag = \"MyCustomSpectralModel\"\n",
    "    amplitude = Parameter(\n",
    "        \"amplitude\", \"1e-12 cm-2 s-1 TeV-1\", min=0, is_norm=True\n",
    "    )\n",
    "    index = Parameter(\"index\", 2, min=0)\n",
    "    reference = Parameter(\"reference\", \"1 TeV\", frozen=True)\n",
    "    mean = Parameter(\"mean\", \"1 TeV\", min=0)\n",
    "    width = Parameter(\"width\", \"0.1 TeV\", min=0, frozen=True)\n",
    "\n",
    "    @staticmethod\n",
    "    def evaluate(energy, index, amplitude, reference, mean, width):\n",
    "        pwl = PowerLawSpectralModel.evaluate(\n",
    "            energy=energy,\n",
    "            index=index,\n",
    "            amplitude=amplitude,\n",
    "            reference=reference,\n",
    "        )\n",
    "        gauss = amplitude * np.exp(-((energy - mean) ** 2) / (2 * width**2))\n",
    "        return pwl + gauss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6883069f",
   "metadata": {},
   "source": [
    "It is good practice to also implement a docstring for the model, defining the parameters and also definig a `tag`, which specifies the name of the model for serialisation. Also note that gammapy assumes that all SpectralModel evaluate functions return a flux in unit of `\"cm-2 s-1 TeV-1\"` (or equivalent dimensions).\n",
    "\n",
    "\n",
    "\n",
    "This model can now be used as any other spectral model in Gammapy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "189425dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.029314Z",
     "iopub.status.busy": "2022-05-12T21:51:27.028721Z",
     "iopub.status.idle": "2022-05-12T21:51:27.039513Z",
     "shell.execute_reply": "2022-05-12T21:51:27.038044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MyCustomSpectralModel\n",
      "\n",
      "  type      name     value         unit        error      min    max frozen is_norm link\n",
      "-------- --------- ---------- -------------- --------- --------- --- ------ ------- ----\n",
      "spectral amplitude 1.0000e-12 cm-2 s-1 TeV-1 0.000e+00 0.000e+00 nan  False    True     \n",
      "spectral     index 2.0000e+00                0.000e+00 0.000e+00 nan  False   False     \n",
      "spectral reference 1.0000e+00            TeV 0.000e+00       nan nan   True   False     \n",
      "spectral      mean 3.0000e+00            TeV 0.000e+00 0.000e+00 nan  False   False     \n",
      "spectral     width 1.0000e-01            TeV 0.000e+00 0.000e+00 nan   True   False     \n"
     ]
    }
   ],
   "source": [
    "my_custom_model = MyCustomSpectralModel(mean=\"3 TeV\")\n",
    "print(my_custom_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ce939cd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.043621Z",
     "iopub.status.busy": "2022-05-12T21:51:27.043336Z",
     "iopub.status.idle": "2022-05-12T21:51:27.055320Z",
     "shell.execute_reply": "2022-05-12T21:51:27.051295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$1.1442739 \\times 10^{-12} \\; \\mathrm{\\frac{1}{s\\,cm^{2}}}$$"
      ],
      "text/plain": [
       "<Quantity 1.14427393e-12 1 / (cm2 s)>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_custom_model.integral(1 * u.TeV, 10 * u.TeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9b50dcd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.063289Z",
     "iopub.status.busy": "2022-05-12T21:51:27.062777Z",
     "iopub.status.idle": "2022-05-12T21:51:27.394261Z",
     "shell.execute_reply": "2022-05-12T21:51:27.393321Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Energy [TeV]', ylabel='dnde [1 / (cm2 s TeV)]'>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_custom_model.plot(energy_bounds=[1, 10] * u.TeV)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2964230",
   "metadata": {},
   "source": [
    "As a next step we can also register the custom model in the `SPECTRAL_MODELS` registry, so that it becomes available for serilisation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5c05c89e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.400334Z",
     "iopub.status.busy": "2022-05-12T21:51:27.399972Z",
     "iopub.status.idle": "2022-05-12T21:51:27.405614Z",
     "shell.execute_reply": "2022-05-12T21:51:27.404590Z"
    }
   },
   "outputs": [],
   "source": [
    "SPECTRAL_MODEL_REGISTRY.append(MyCustomSpectralModel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "91a6c075",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.410966Z",
     "iopub.status.busy": "2022-05-12T21:51:27.410573Z",
     "iopub.status.idle": "2022-05-12T21:51:27.435843Z",
     "shell.execute_reply": "2022-05-12T21:51:27.433096Z"
    }
   },
   "outputs": [],
   "source": [
    "model = SkyModel(spectral_model=my_custom_model, name=\"my-source\")\n",
    "models = Models([model])\n",
    "models.write(\"my-custom-models.yaml\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "08c651f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.444188Z",
     "iopub.status.busy": "2022-05-12T21:51:27.443573Z",
     "iopub.status.idle": "2022-05-12T21:51:27.589165Z",
     "shell.execute_reply": "2022-05-12T21:51:27.587452Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "components:\r\n",
      "-   name: my-source\r\n",
      "    type: SkyModel\r\n",
      "    spectral:\r\n",
      "        type: MyCustomSpectralModel\r\n",
      "        parameters:\r\n",
      "        -   name: amplitude\r\n",
      "            value: 1.0e-12\r\n",
      "            unit: cm-2 s-1 TeV-1\r\n",
      "            is_norm: true\r\n",
      "        -   name: index\r\n",
      "            value: 2.0\r\n",
      "            is_norm: false\r\n",
      "        -   name: reference\r\n",
      "            value: 1.0\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "            is_norm: false\r\n",
      "        -   name: mean\r\n",
      "            value: 3.0\r\n",
      "            unit: TeV\r\n",
      "            is_norm: false\r\n",
      "        -   name: width\r\n",
      "            value: 0.1\r\n",
      "            unit: TeV\r\n",
      "            frozen: true\r\n",
      "            is_norm: false\r\n",
      "covariance: my-custom-models_covariance.dat\r\n"
     ]
    }
   ],
   "source": [
    "!cat my-custom-models.yaml"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1a1c966",
   "metadata": {},
   "source": [
    "Similarly you can also create custom spatial models and add them to the `SPATIAL_MODELS` registry. In that case gammapy assumes that the evaluate function return a normalized quantity in \"sr-1\" such as the model integral over the whole sky is one."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8188b075",
   "metadata": {},
   "source": [
    "## Models with energy dependent morphology\n",
    "\n",
    "A common science case in the study of extended sources is to probe for energy dependent morphology, eg: in Supernova Remnants or Pulsar Wind Nebulae. Traditionally, this has been done by splitting the data into energy bands and doing individual fits of the morphology in these energy bands.\n",
    "\n",
    "`SkyModel` offers a natural framework to simultaneously model the energy and morphology, e.g. spatial extent described by a parametric model expression with energy dependent parameters.\n",
    "\n",
    "The models shipped within gammapy use a “factorised” representation of the source model, where the spatial ($l,b$), energy ($E$) and time ($t$) dependence are independent model components and not correlated:\n",
    "\n",
    "   $$f(l, b, E, t) = F(l, b) \\cdot G(E) \\cdot H(t) $$\n",
    "    \n",
    "To use full 3D models, ie $f(l, b, E) = F(l, b, E) \\cdot G(E) $,  you have to implement your own custom `SpatialModel`. Note that it is still necessary to multiply by a `SpectralModel`, $G(E)$ to be dimensionally consistent.\n",
    "\n",
    "In this example, we create Gaussian Spatial Model with the extension varying with energy. For simplicity, we assume a linear dependence on energy and parameterize this by specifying the extension at 2 energies. You can add more complex dependences, probably motivated by physical models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "cfe25cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.596630Z",
     "iopub.status.busy": "2022-05-12T21:51:27.596211Z",
     "iopub.status.idle": "2022-05-12T21:51:27.621576Z",
     "shell.execute_reply": "2022-05-12T21:51:27.618760Z"
    }
   },
   "outputs": [],
   "source": [
    "from gammapy.modeling.models import SpatialModel\n",
    "from astropy.coordinates.angle_utilities import angular_separation\n",
    "\n",
    "\n",
    "class MyCustomGaussianModel(SpatialModel):\n",
    "    \"\"\"My custom Energy Dependent Gaussian model.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    lon_0, lat_0 : `~astropy.coordinates.Angle`\n",
    "        Center position\n",
    "    sigma_1TeV : `~astropy.coordinates.Angle`\n",
    "        Width of the Gaussian at 1 TeV\n",
    "    sigma_10TeV : `~astropy.coordinates.Angle`\n",
    "        Width of the Gaussian at 10 TeV\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    tag = \"MyCustomGaussianModel\"\n",
    "    is_energy_dependent = True\n",
    "    lon_0 = Parameter(\"lon_0\", \"0 deg\")\n",
    "    lat_0 = Parameter(\"lat_0\", \"0 deg\", min=-90, max=90)\n",
    "\n",
    "    sigma_1TeV = Parameter(\"sigma_1TeV\", \"2.0 deg\", min=0)\n",
    "    sigma_10TeV = Parameter(\"sigma_10TeV\", \"0.2 deg\", min=0)\n",
    "\n",
    "    @staticmethod\n",
    "    def evaluate(lon, lat, energy, lon_0, lat_0, sigma_1TeV, sigma_10TeV):\n",
    "\n",
    "        sep = angular_separation(lon, lat, lon_0, lat_0)\n",
    "\n",
    "        # Compute sigma for the given energy using linear interpolation in log energy\n",
    "        sigma_nodes = u.Quantity([sigma_1TeV, sigma_10TeV])\n",
    "        energy_nodes = [1, 10] * u.TeV\n",
    "        log_s = np.log(sigma_nodes.to(\"deg\").value)\n",
    "        log_en = np.log(energy_nodes.to(\"TeV\").value)\n",
    "        log_e = np.log(energy.to(\"TeV\").value)\n",
    "        sigma = np.exp(np.interp(log_e, log_en, log_s)) * u.deg\n",
    "\n",
    "        exponent = -0.5 * (sep / sigma) ** 2\n",
    "        norm = 1 / (2 * np.pi * sigma**2)\n",
    "        return norm * np.exp(exponent)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0f8d2b3",
   "metadata": {},
   "source": [
    "Serialisation of this model can be achieved as explained in the previous section.\n",
    "You can now use it as stadard `SpatialModel` in your analysis. Note that this is still a `SpatialModel`, and not a `SkyModel`, so it needs to be multiplied by a `SpectralModel` as before. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "ccb7c5ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.633287Z",
     "iopub.status.busy": "2022-05-12T21:51:27.631351Z",
     "iopub.status.idle": "2022-05-12T21:51:27.661216Z",
     "shell.execute_reply": "2022-05-12T21:51:27.660504Z"
    }
   },
   "outputs": [],
   "source": [
    "spatial_model = MyCustomGaussianModel()\n",
    "spectral_model = PowerLawSpectralModel()\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model, spectral_model=spectral_model\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "995c8c26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.665217Z",
     "iopub.status.busy": "2022-05-12T21:51:27.664943Z",
     "iopub.status.idle": "2022-05-12T21:51:27.670078Z",
     "shell.execute_reply": "2022-05-12T21:51:27.668530Z"
    }
   },
   "outputs": [],
   "source": [
    "spatial_model.evaluation_radius"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8a4075f",
   "metadata": {},
   "source": [
    "To visualise it, we evaluate it on a 3D geom. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2697149d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:27.678709Z",
     "iopub.status.busy": "2022-05-12T21:51:27.678397Z",
     "iopub.status.idle": "2022-05-12T21:51:28.494916Z",
     "shell.execute_reply": "2022-05-12T21:51:28.492111Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x216 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_axis = MapAxis.from_energy_bounds(\n",
    "    energy_min=0.1 * u.TeV, energy_max=10.0 * u.TeV, nbin=3, name=\"energy_true\"\n",
    ")\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(0, 0), width=5.0 * u.deg, binsz=0.1, axes=[energy_axis]\n",
    ")\n",
    "\n",
    "spatial_model.plot_grid(geom=geom, add_cbar=True, figsize=(14, 3));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cb54f63",
   "metadata": {},
   "source": [
    "For computational purposes, it is useful to specify a `evaluation_radius` for `SpatialModels` - this gives a size on which to compute the model. Though optional, it is highly recommended for Custom Spatial Models. This can be done, for ex, by defining the following function inside the above class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "e5d19d48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-12T21:51:28.501272Z",
     "iopub.status.busy": "2022-05-12T21:51:28.500851Z",
     "iopub.status.idle": "2022-05-12T21:51:28.514960Z",
     "shell.execute_reply": "2022-05-12T21:51:28.514068Z"
    }
   },
   "outputs": [],
   "source": [
    "@property\n",
    "def evaluation_radius(self):\n",
    "    \"\"\"Evaluation radius (`~astropy.coordinates.Angle`).\"\"\"\n",
    "    return 5 * np.max([self.sigma_1TeV.value, self.sigma_10TeV.value]) * u.deg"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
