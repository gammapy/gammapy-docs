{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.8?urlpath=lab/tree/cta_sensitivity.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[cta_sensitivity.ipynb](../_static/notebooks/cta_sensitivity.ipynb) |\n",
    "[cta_sensitivity.py](../_static/notebooks/cta_sensitivity.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Computation of the CTA sensitivity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to derive the CTA sensitivity for a point-like IRF at a fixed zenith angle and fixed offset. The significativity is computed for the 1D analysis (On-OFF regions) and the LiMa formula.\n",
    "\n",
    "We will be using the following Gammapy classes:\n",
    "\n",
    "* [gammapy.irf.CTAIrf](..\/api/gammapy.irf.CTAIrf.rst)\n",
    "* [gammapy.spectrum.SensitivityEstimator](..\/api/gammapy.spectrum.SensitivityEstimator.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.irf import CTAPerf\n",
    "from gammapy.spectrum import SensitivityEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load IRFs\n",
    "\n",
    "First load the CTA IRFs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"$GAMMAPY_EXTRA/datasets/cta/perf_prod2/point_like_non_smoothed/South_5h.fits.gz\"\n",
    "irf = CTAPerf.read(filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute sensitivity\n",
    "\n",
    "Choose a few parameters, then run the sentitivity computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "sensitivity_estimator = SensitivityEstimator(irf=irf, livetime=\"5h\")\n",
    "sensitivity_estimator.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "The results are given as an Astropy table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=21</i>\n",
       "<table id=\"table4565597656\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>energy</th><th>e2dnde</th><th>excess</th><th>background</th><th>criterion</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>erg / (cm2 s)</th><th></th><th></th><th></th></tr></thead>\n",
       "<thead><tr><th>float32</th><th>float64</th><th>float64</th><th>float32</th><th>str12</th></tr></thead>\n",
       "<tr><td>0.0158489</td><td>1.26569e-10</td><td>339.143</td><td>3703.48</td><td>significance</td></tr>\n",
       "<tr><td>0.0251189</td><td>2.41235e-11</td><td>311.106</td><td>3106.66</td><td>significance</td></tr>\n",
       "<tr><td>0.0398107</td><td>1.5914e-11</td><td>459.213</td><td>6852.06</td><td>significance</td></tr>\n",
       "<tr><td>0.0630957</td><td>4.26714e-12</td><td>163.204</td><td>825.794</td><td>significance</td></tr>\n",
       "<tr><td>0.1</td><td>3.04454e-12</td><td>169.361</td><td>891.645</td><td>significance</td></tr>\n",
       "<tr><td>0.158489</td><td>1.55368e-12</td><td>90.0926</td><td>236.905</td><td>significance</td></tr>\n",
       "<tr><td>0.251189</td><td>1.0771e-12</td><td>51.5349</td><td>69.8381</td><td>significance</td></tr>\n",
       "<tr><td>0.398107</td><td>7.83236e-13</td><td>35.6905</td><td>29.8996</td><td>significance</td></tr>\n",
       "<tr><td>0.630957</td><td>5.93807e-13</td><td>26.4005</td><td>14.2506</td><td>significance</td></tr>\n",
       "<tr><td>1</td><td>4.28759e-13</td><td>18.1072</td><td>5.11857</td><td>significance</td></tr>\n",
       "<tr><td>1.58489</td><td>3.62852e-13</td><td>15.6871</td><td>3.31032</td><td>significance</td></tr>\n",
       "<tr><td>2.51189</td><td>3.21257e-13</td><td>11.7016</td><td>1.17059</td><td>significance</td></tr>\n",
       "<tr><td>3.98107</td><td>3.39152e-13</td><td>12.0962</td><td>1.33607</td><td>significance</td></tr>\n",
       "<tr><td>6.30957</td><td>3.9511e-13</td><td>10</td><td>0.424068</td><td>gamma</td></tr>\n",
       "<tr><td>10</td><td>5.65043e-13</td><td>10.898</td><td>0.865076</td><td>significance</td></tr>\n",
       "<tr><td>15.8489</td><td>8.36566e-13</td><td>10</td><td>0.216136</td><td>gamma</td></tr>\n",
       "<tr><td>25.1189</td><td>1.26771e-12</td><td>10</td><td>0.00979249</td><td>gamma</td></tr>\n",
       "<tr><td>39.8107</td><td>2.00893e-12</td><td>10</td><td>0.0053102</td><td>gamma</td></tr>\n",
       "<tr><td>63.0957</td><td>3.24246e-12</td><td>10</td><td>0.00170479</td><td>gamma</td></tr>\n",
       "<tr><td>100</td><td>5.10213e-12</td><td>10</td><td>0.00101395</td><td>gamma</td></tr>\n",
       "<tr><td>158.489</td><td>9.04831e-12</td><td>10</td><td>0.00566093</td><td>gamma</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=21>\n",
       "  energy      e2dnde     excess background  criterion  \n",
       "   TeV    erg / (cm2 s)                                \n",
       " float32     float64    float64  float32      str12    \n",
       "--------- ------------- ------- ---------- ------------\n",
       "0.0158489   1.26569e-10 339.143    3703.48 significance\n",
       "0.0251189   2.41235e-11 311.106    3106.66 significance\n",
       "0.0398107    1.5914e-11 459.213    6852.06 significance\n",
       "0.0630957   4.26714e-12 163.204    825.794 significance\n",
       "      0.1   3.04454e-12 169.361    891.645 significance\n",
       " 0.158489   1.55368e-12 90.0926    236.905 significance\n",
       " 0.251189    1.0771e-12 51.5349    69.8381 significance\n",
       " 0.398107   7.83236e-13 35.6905    29.8996 significance\n",
       " 0.630957   5.93807e-13 26.4005    14.2506 significance\n",
       "        1   4.28759e-13 18.1072    5.11857 significance\n",
       "  1.58489   3.62852e-13 15.6871    3.31032 significance\n",
       "  2.51189   3.21257e-13 11.7016    1.17059 significance\n",
       "  3.98107   3.39152e-13 12.0962    1.33607 significance\n",
       "  6.30957    3.9511e-13      10   0.424068        gamma\n",
       "       10   5.65043e-13  10.898   0.865076 significance\n",
       "  15.8489   8.36566e-13      10   0.216136        gamma\n",
       "  25.1189   1.26771e-12      10 0.00979249        gamma\n",
       "  39.8107   2.00893e-12      10  0.0053102        gamma\n",
       "  63.0957   3.24246e-12      10 0.00170479        gamma\n",
       "      100   5.10213e-12      10 0.00101395        gamma\n",
       "  158.489   9.04831e-12      10 0.00566093        gamma"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the results table\n",
    "sensitivity_estimator.results_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save it to file (could use e.g. format of CSV or ECSV or FITS)\n",
    "# sensitivity_estimator.results_table.write('sensitivity.ecsv', format='ascii.ecsv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the sensitivity curve\n",
    "t = sensitivity_estimator.results_table\n",
    "\n",
    "is_s = t[\"criterion\"] == \"significance\"\n",
    "plt.plot(\n",
    "    t[\"energy\"][is_s],\n",
    "    t[\"e2dnde\"][is_s],\n",
    "    \"s-\",\n",
    "    color=\"red\",\n",
    "    label=\"significance\",\n",
    ")\n",
    "\n",
    "is_g = t[\"criterion\"] == \"gamma\"\n",
    "plt.plot(\n",
    "    t[\"energy\"][is_g], t[\"e2dnde\"][is_g], \"*-\", color=\"blue\", label=\"gamma\"\n",
    ")\n",
    "\n",
    "plt.loglog()\n",
    "plt.xlabel(\"Energy ({})\".format(t[\"energy\"].unit))\n",
    "plt.ylabel(\"Sensitivity ({})\".format(t[\"e2dnde\"].unit))\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Also compute the sensitivity for a 20 hour observation\n",
    "* Compare how the sensitivity differs between 5 and 20 hours by plotting the ratio as a function of energy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
