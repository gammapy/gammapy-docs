{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.8?urlpath=lab/tree/image_fitting_with_sherpa.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[image_fitting_with_sherpa.ipynb](../_static/notebooks/image_fitting_with_sherpa.ipynb) |\n",
    "[image_fitting_with_sherpa.py](../_static/notebooks/image_fitting_with_sherpa.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fitting 2D images with Sherpa\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Sherpa is the X-ray satellite Chandra modeling and fitting application. It enables the user to construct complex models from simple definitions and fit those models to data, using a variety of statistics and optimization methods. \n",
    "The issues of constraining the source position and morphology are common in X- and Gamma-ray astronomy. \n",
    "This notebook will show you how to apply Sherpa to CTA data.\n",
    "\n",
    "Here we will set up Sherpa to fit the counts map and loading the ancillary images for subsequent use. A relevant test statistic for data with Poisson fluctuations is the one proposed by Cash (1979). The simplex (or Nelder-Mead) fitting algorithm is a good compromise between efficiency and robustness. The source fit is best performed in pixel coordinates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read sky images\n",
    "The sky image that are loaded here have been prepared in a separated notebook. Here we start from those fits file and focus on the source fitting aspect.\n",
    "\n",
    "The info needed for sherpa are:\n",
    "- Count map\n",
    "- Background map\n",
    "- Exposure map\n",
    "- PSF map\n",
    "\n",
    "For info, the fits file are written in the following way in the Sky map generation notebook:\n",
    "\n",
    "```\n",
    "images['counts']    .write(\"G300-0_test_counts.fits\", clobber=True)\n",
    "images['exposure']  .write(\"G300-0_test_exposure.fits\", clobber=True)\n",
    "images['background'].write(\"G300-0_test_background.fits\", clobber=True)\n",
    "\n",
    "##As psf is an array of quantities we cannot use the images['psf'].write() function\n",
    "##all the other arrays do not have quantities. \n",
    "fits.writeto(\"G300-0_test_psf.fits\",images['psf'].data.value,overwrite=True)\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: imaging routines will not be available, \n",
      "failed to import sherpa.image.ds9_backend due to \n",
      "'RuntimeErr: DS9Win unusable: Could not find ds9 on your PATH'\n",
      "WARNING: failed to import sherpa.astro.xspec; XSPEC models will not be available\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "from astropy.io import fits\n",
    "from astropy.wcs import WCS\n",
    "from gammapy.maps import Map, WcsNDMap, WcsGeom\n",
    "import os\n",
    "\n",
    "# Warnings about XSPEC or DS9 can be ignored here\n",
    "import sherpa.astro.ui as sh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the fits file to load them in a sherpa model\n",
    "filecounts = os.environ[\"GAMMAPY_DATA\"] + \"/sherpaCTA/G300-0_test_counts.fits\"\n",
    "hdr = fits.getheader(filecounts)\n",
    "wcs = WCS(hdr)\n",
    "\n",
    "sh.set_stat(\"cash\")\n",
    "sh.set_method(\"simplex\")\n",
    "sh.load_image(filecounts)\n",
    "sh.set_coord(\"logical\")\n",
    "\n",
    "fileexp = os.environ[\"GAMMAPY_DATA\"] + \"/sherpaCTA/G300-0_test_exposure.fits\"\n",
    "filebkg = os.environ[\"GAMMAPY_DATA\"] + \"/sherpaCTA/G300-0_test_background.fits\"\n",
    "filepsf = os.environ[\"GAMMAPY_DATA\"] + \"/sherpaCTA/G300-0_test_psf.fits\"\n",
    "sh.load_table_model(\"expo\", fileexp)\n",
    "sh.load_table_model(\"bkg\", filebkg)\n",
    "sh.load_psf(\"psf\", filepsf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In principle one might first want to fit the background amplitude. However the background estimation method already yields the correct normalization, so we freeze the background amplitude to unity instead of adjusting it. The (smoothed) residuals from this background model are then computed and shown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sh.set_full_model(bkg)\n",
    "bkg.ampl = 1\n",
    "sh.freeze(bkg)\n",
    "\n",
    "resid = Map.read(filecounts)\n",
    "resid.data = sh.get_data_image().y - sh.get_model_image().y\n",
    "resid_smooth = resid.smooth(width=6)\n",
    "resid_smooth.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find and fit the brightest source\n",
    "We then find the position of the maximum in the (smoothed) residuals map, and fit a (symmetrical) Gaussian source with that initial position:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "yp, xp = np.unravel_index(\n",
    "    np.nanargmax(resid_smooth.data), resid_smooth.data.shape\n",
    ")\n",
    "ampl = resid_smooth.get_by_pix((xp, yp))[0]\n",
    "\n",
    "sh.set_full_model(\n",
    "    bkg + psf(sh.gauss2d.g0) * expo\n",
    ")  # creates g0 as a gauss2d instance\n",
    "g0.xpos, g0.ypos = xp, yp\n",
    "sh.freeze(g0.xpos, g0.ypos)  # fix the position in the initial fitting step\n",
    "\n",
    "expo.ampl = (\n",
    "    1e-9\n",
    ")  # fix exposure amplitude so that typical exposure is of order unity\n",
    "sh.freeze(expo)\n",
    "sh.thaw(g0.fwhm, g0.ampl)  # in case frozen in a previous iteration\n",
    "\n",
    "g0.fwhm = 10  # give some reasonable initial values\n",
    "g0.ampl = ampl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47566.1\n",
      "Final fit statistic   = 47440.7 at function evaluation 228\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 125.402\n",
      "   g0.fwhm        20.0951     \n",
      "   g0.ampl        0.111272    \n",
      "CPU times: user 1.58 s, sys: 17 ms, total: 1.6 s\n",
      "Wall time: 1.62 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "sh.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit all parameters of this Gaussian component, fix them and re-compute the residuals map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47440.7\n",
      "Final fit statistic   = 47429.2 at function evaluation 408\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 11.4937\n",
      "   g0.fwhm        21.5373     \n",
      "   g0.xpos        66.3947     \n",
      "   g0.ypos        69.3172     \n",
      "   g0.ampl        0.107149    \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sh.thaw(g0.xpos, g0.ypos)\n",
    "sh.fit()\n",
    "sh.freeze(g0)\n",
    "\n",
    "resid.data = sh.get_data_image().y - sh.get_model_image().y\n",
    "resid_smooth = resid.smooth(width=6)\n",
    "resid_smooth.plot(vmin=-0.5, vmax=1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Iteratively find and fit additional sources\n",
    "Instantiate additional Gaussian components, and use them to iteratively fit sources, repeating the steps performed above for component g0. (The residuals map is shown after each additional source included in the model.) This takes some time..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# initialize components with fixed, zero amplitude\n",
    "for i in range(1, 6):\n",
    "    model = sh.create_model_component(\"gauss2d\", \"g\" + str(i))\n",
    "    model.ampl = 0\n",
    "    sh.freeze(model)\n",
    "\n",
    "gs = [g0, g1, g2, g3, g4, g5]\n",
    "sh.set_full_model(bkg + psf(g0 + g1 + g2 + g3 + g4 + g5) * expo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47352.1\n",
      "Final fit statistic   = 47306.6 at function evaluation 218\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 45.4492\n",
      "   g1.fwhm        6.73141     \n",
      "   g1.ampl        0.358694    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47306.6\n",
      "Final fit statistic   = 47295.3 at function evaluation 362\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 11.3247\n",
      "   g1.fwhm        5.88307     \n",
      "   g1.xpos        41.7803     \n",
      "   g1.ypos        81.4247     \n",
      "   g1.ampl        0.45753     \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47211.4\n",
      "Final fit statistic   = 47187.6 at function evaluation 215\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 23.794\n",
      "   g2.fwhm        6.77442     \n",
      "   g2.ampl        0.346582    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47187.6\n",
      "Final fit statistic   = 47184.1 at function evaluation 341\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 3.46844\n",
      "   g2.fwhm        6.19417     \n",
      "   g2.xpos        20.8277     \n",
      "   g2.ypos        81.6412     \n",
      "   g2.ampl        0.399908    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47173.4\n",
      "Final fit statistic   = 47116.6 at function evaluation 227\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 56.7946\n",
      "   g3.fwhm        6.43218     \n",
      "   g3.ampl        0.235481    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47116.6\n",
      "Final fit statistic   = 47115.9 at function evaluation 303\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 0.728928\n",
      "   g3.fwhm        6.38175     \n",
      "   g3.xpos        177.458     \n",
      "   g3.ypos        80.2233     \n",
      "   g3.ampl        0.239637    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47121\n",
      "Final fit statistic   = 47090.2 at function evaluation 246\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 30.818\n",
      "   g4.fwhm        7.24022     \n",
      "   g4.ampl        0.112126    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47090.2\n",
      "Final fit statistic   = 47087.3 at function evaluation 330\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 2.93503\n",
      "   g4.fwhm        5.94179     \n",
      "   g4.xpos        135.942     \n",
      "   g4.ypos        59.5875     \n",
      "   g4.ampl        0.156213    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47082.3\n",
      "Final fit statistic   = 47068.5 at function evaluation 249\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29998\n",
      "Change in statistic   = 13.7724\n",
      "   g5.fwhm        3.07232     \n",
      "   g5.ampl        0.479624    \n",
      "Dataset               = 1\n",
      "Method                = neldermead\n",
      "Statistic             = cash\n",
      "Initial fit statistic = 47068.5\n",
      "Final fit statistic   = 47068.5 at function evaluation 320\n",
      "Data points           = 30000\n",
      "Degrees of freedom    = 29996\n",
      "Change in statistic   = 0.0196613\n",
      "   g5.fwhm        3.05445     \n",
      "   g5.xpos        76.0488     \n",
      "   g5.ypos        73.1002     \n",
      "   g5.ampl        0.483818    \n",
      "CPU times: user 25.7 s, sys: 267 ms, total: 26 s\n",
      "Wall time: 26.3 s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%time\n",
    "for i in range(1, len(gs)):\n",
    "    yp, xp = np.unravel_index(\n",
    "        np.nanargmax(resid_smooth.data), resid_smooth.data.shape\n",
    "    )\n",
    "    ampl = resid_smooth.get_by_pix((xp, yp))[0]\n",
    "    gs[i].xpos, gs[i].ypos = xp, yp\n",
    "    gs[i].fwhm = 10\n",
    "    gs[i].ampl = ampl\n",
    "\n",
    "    sh.thaw(gs[i].fwhm)\n",
    "    sh.thaw(gs[i].ampl)\n",
    "    sh.fit()\n",
    "\n",
    "    sh.thaw(gs[i].xpos)\n",
    "    sh.thaw(gs[i].ypos)\n",
    "    sh.fit()\n",
    "    sh.freeze(gs[i])\n",
    "\n",
    "    resid.data = sh.get_data_image().y - sh.get_model_image().y\n",
    "    resid_smooth = resid.smooth(width=6)\n",
    "    resid_smooth.plot(vmin=-0.5, vmax=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generating output table and Test Statistics estimation\n",
    "When adding a new source, one need to check the significance of this new source. A frequently used method is the Test Statistics (TS). This is done by comparing the change of statistics when the source is included compared to the null hypothesis (no source ; in practice here we fix the amplitude to zero).\n",
    "\n",
    "$TS = Cstat(source) - Cstat(no source)$\n",
    "\n",
    "The criterion for a significant source detection is typically that it should improve the test statistic by at least 25 or 30. The last excess fitted (g5) thus not a significant source:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=6</i>\n",
       "<table id=\"table4831717416\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>delstat</th><th>glon</th><th>glat</th><th>sigma</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>156.52</td><td>299.66</td><td>-0.10365</td><td>0.18292</td></tr>\n",
       "<tr><td>133.86</td><td>300.15</td><td>0.13847</td><td>0.049966</td></tr>\n",
       "<tr><td>111.18</td><td>300.57</td><td>0.14277</td><td>0.052608</td></tr>\n",
       "<tr><td>68.202</td><td>297.44</td><td>0.11442</td><td>0.054202</td></tr>\n",
       "<tr><td>28.633</td><td>298.27</td><td>-0.29822</td><td>0.050465</td></tr>\n",
       "<tr><td>18.816</td><td>299.47</td><td>-0.027994</td><td>0.025942</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=6>\n",
       "delstat   glon     glat    sigma  \n",
       "float64 float64  float64  float64 \n",
       "------- ------- --------- --------\n",
       " 156.52  299.66  -0.10365  0.18292\n",
       " 133.86  300.15   0.13847 0.049966\n",
       " 111.18  300.57   0.14277 0.052608\n",
       " 68.202  297.44   0.11442 0.054202\n",
       " 28.633  298.27  -0.29822 0.050465\n",
       " 18.816  299.47 -0.027994 0.025942"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from astropy.stats import gaussian_fwhm_to_sigma\n",
    "from astropy.table import Table\n",
    "\n",
    "rows = []\n",
    "for g in gs:\n",
    "    ampl = g.ampl.val\n",
    "    g.ampl = 0\n",
    "    stati = sh.get_stat_info()[0].statval\n",
    "    g.ampl = ampl\n",
    "    statf = sh.get_stat_info()[0].statval\n",
    "    delstat = stati - statf\n",
    "\n",
    "    geom = resid.geom\n",
    "    coord = geom.pix_to_coord((g.xpos.val, g.ypos.val))\n",
    "    pix_scale = geom.pixel_scales.mean().deg\n",
    "    sigma = g.fwhm.val * pix_scale * gaussian_fwhm_to_sigma\n",
    "    rows.append(\n",
    "        dict(delstat=delstat, glon=coord[0], glat=coord[1], sigma=sigma)\n",
    "    )\n",
    "\n",
    "table = Table(rows=rows, names=rows[0])\n",
    "for name in table.colnames:\n",
    "    table[name].format = \".5g\"\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* If you look back to the original image: there's one source that looks like a shell-type supernova remnant.\n",
    "    * Try to fit is with a shell morphology model (use ``sh.shell2d('shell')`` to create such a model).\n",
    "    * Try to evaluate the ``TS`` and probability of the shell model compared to a Gaussian model hypothesis\n",
    "    * You could also try a disk model (use ``sh.disk2d('disk')`` to create one)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "These are good resources to learn more about Sherpa:\n",
    "\n",
    "* https://python4astronomers.github.io/fitting/fitting.html\n",
    "* https://github.com/DougBurke/sherpa-standalone-notebooks\n",
    "\n",
    "You could read over the examples there, and try to apply a similar analysis to this dataset here to practice.\n",
    "\n",
    "If you want a deeper understanding of how Sherpa works, then these proceedings are good introductions:\n",
    "\n",
    "* http://conference.scipy.org/proceedings/scipy2009/paper_8/full_text.pdf\n",
    "* http://conference.scipy.org/proceedings/scipy2011/pdfs/brefsdal.pdf"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
