{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.9?urlpath=lab/tree/spectrum_pipe.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_pipe.ipynb](../_static/notebooks/spectrum_pipe.ipynb) |\n",
    "[spectrum_pipe.py](../_static/notebooks/spectrum_pipe.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum analysis with Gammapy (run pipeline)\n",
    "\n",
    "In this tutorial we will learn how to perform a 1d spectral analysis.\n",
    "\n",
    "We will use a \"pipeline\" or \"workflow\" class to run a standard analysis. If you're interested in implementation detail of the analysis in order to create a custom analysis class, you should read ([spectrum_analysis.ipynb](spectrum_analysis.ipynb)) that executes the analysis using lower-level classes and methods in Gammapy. \n",
    "\n",
    "In this tutorial we will use the folling Gammapy classes:\n",
    "\n",
    "- [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the data to \n",
    "- [gammapy.scripts.SpectrumAnalysisIACT](..\/api/gammapy.scripts.SpectrumAnalysisIACT.rst) to run the analysis\n",
    "\n",
    "We use 4 Crab observations from H.E.S.S. for testing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup for the notebook, and import the functionality we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.scripts import SpectrumAnalysisIACT\n",
    "from gammapy.catalog import SourceCatalogGammaCat\n",
    "from gammapy.maps import Map\n",
    "from gammapy.spectrum.models import LogParabola\n",
    "from gammapy.spectrum import CrabSpectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select data\n",
    "\n",
    "First, we select and load some H.E.S.S. data (simulated events for now). In real life you would do something fancy here, or just use the list of observations someone send you (and hope they have done something fancy before). We'll just use the standard gammapy 4 crab runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23523 23526 23559 23592]\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "mask = data_store.obs_table[\"TARGET_NAME\"] == \"Crab\"\n",
    "obs_ids = data_store.obs_table[\"OBS_ID\"][mask].data\n",
    "observations = data_store.get_observations(obs_ids)\n",
    "print(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configure the analysis\n",
    "\n",
    "Now we'll define the input for the spectrum analysis. It will be done the python way, i.e. by creating a config dict containing python objects. We plan to add also the convenience to configure the analysis using a plain text config file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "crab_pos = SkyCoord.from_name(\"crab\")\n",
    "on_region = CircleSkyRegion(crab_pos, 0.15 * u.deg)\n",
    "\n",
    "model = LogParabola(\n",
    "    alpha=2.3,\n",
    "    beta=0.01,\n",
    "    amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "flux_point_binning = EnergyBounds.equal_log_spacing(0.7, 30, 5, u.TeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_mask = Map.create(skydir=crab_pos, width=(10, 10), binsz=0.02)\n",
    "\n",
    "gammacat = SourceCatalogGammaCat()\n",
    "\n",
    "regions = []\n",
    "for source in gammacat:\n",
    "    if not exclusion_mask.geom.contains(source.position):\n",
    "        continue\n",
    "    region = CircleSkyRegion(source.position, 0.15 * u.deg)\n",
    "    regions.append(region)\n",
    "\n",
    "exclusion_mask.data = exclusion_mask.geom.region_mask(regions, inside=False)\n",
    "exclusion_mask.plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = dict(\n",
    "    outdir=\".\",\n",
    "    background=dict(\n",
    "        on_region=on_region,\n",
    "        exclusion_mask=exclusion_mask,\n",
    "        min_distance=0.1 * u.rad,\n",
    "    ),\n",
    "    extraction=dict(containment_correction=False),\n",
    "    fit=dict(\n",
    "        model=model,\n",
    "        stat=\"wstat\",\n",
    "        forward_folded=True,\n",
    "        fit_range=flux_point_binning[[0, -1]],\n",
    "    ),\n",
    "    fp_binning=flux_point_binning,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run the analysis\n",
    "\n",
    "TODO: Clean up the log (partly done, get rid of remaining useless warnings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td title=\"Minimum value of function\">FCN = 108.83548432146344</td>\n",
       "        <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 118</td>\n",
       "        <td title=\"Number of call in last migrad\">NCALLS = 118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td title=\"Estimated distance to minimum\">EDM = 2.61011135442229e-06</td>\n",
       "        <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "        <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "        UP = 1.0</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<table>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "        <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "        <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "        <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "        <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "        <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "        <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "</table>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td><a href=\"#\" onclick=\"$('#NpjCxxQSyw').toggle()\">+</a></td>\n",
       "        <td title=\"Variable name\">Name</td>\n",
       "        <td title=\"Value of parameter\">Value</td>\n",
       "        <td title=\"Hesse error\">Hesse Error</td>\n",
       "        <td title=\"Minos lower error\">Minos Error-</td>\n",
       "        <td title=\"Minos upper error\">Minos Error+</td>\n",
       "        <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "        <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "        <td title=\"Is the parameter fixed in the fit\">Fixed?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>0</td>\n",
       "        <td>par_000_amplitude</td>\n",
       "        <td>3.32931</td>\n",
       "        <td>0.222011</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>par_001_reference</td>\n",
       "        <td>1</td>\n",
       "        <td>1</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2</td>\n",
       "        <td>par_002_alpha</td>\n",
       "        <td>2.32327</td>\n",
       "        <td>0.193054</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>3</td>\n",
       "        <td>par_003_beta</td>\n",
       "        <td>18.6602</td>\n",
       "        <td>9.95332</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<pre id=\"NpjCxxQSyw\" style=\"display:none;\">\n",
       "<textarea rows=\"14\" cols=\"50\" onclick=\"this.select()\" readonly>\n",
       "\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Hesse Error & Minos Error- & Minos Error+ & Limit- & Limit+ & Fixed?\\\\\n",
       "\\hline\n",
       "0 & par $000_{amplitude}$ & 3.32931 & 0.222011 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "1 & par $001_{reference}$ & 1 & 1 &  &  &  &  & Yes\\\\\n",
       "\\hline\n",
       "2 & par $002_{\\alpha}$ & 2.32327 & 0.193054 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "3 & par $003_{\\beta}$ & 18.6602 & 9.95332 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "\\end{tabular}\n",
       "</textarea>\n",
       "</pre>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis = SpectrumAnalysisIACT(observations=observations, config=config)\n",
    "analysis.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "Let's look at the results, and also compare with a previously published Crab nebula spectrum for reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fit result info \n",
      "--------------- \n",
      "Model: LogParabola\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error        unit      min max frozen\n",
      "\t--------- --------- --------- -------------- --- --- ------\n",
      "\tamplitude 3.329e-11 2.220e-12 cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00 0.000e+00            TeV nan nan   True\n",
      "\t    alpha 2.323e+00 1.931e-01                nan nan  False\n",
      "\t     beta 1.866e-01 9.953e-02                nan nan  False\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\t   name   amplitude  reference   alpha       beta   \n",
      "\t--------- ---------- --------- ---------- ----------\n",
      "\tamplitude  4.929e-24 0.000e+00  2.248e-13 -6.322e-14\n",
      "\treference  0.000e+00 0.000e+00  0.000e+00  0.000e+00\n",
      "\t    alpha  2.248e-13 0.000e+00  3.727e-02 -1.744e-02\n",
      "\t     beta -6.322e-14 0.000e+00 -1.744e-02  9.907e-03 \n",
      "\n",
      "Statistic: 39.258 (wstat)\n",
      "Fit Range: [ 0.87992254 27.82559402] TeV\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit.result[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1a694240>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "opts = {\n",
    "    \"energy_range\": analysis.fit.fit_range,\n",
    "    \"energy_power\": 2,\n",
    "    \"flux_unit\": \"erg-1 cm-2 s-1\",\n",
    "}\n",
    "axes = analysis.spectrum_result.plot(**opts)\n",
    "CrabSpectrum().model.plot(ax=axes[0], **opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Rerun the analysis, changing some aspects of the analysis as you like:\n",
    "\n",
    "* only use one or two observations\n",
    "* a different spectral model\n",
    "* different config options for the spectral analysis\n",
    "* different energy binning for the spectral point computation\n",
    "\n",
    "Observe how the measured spectrum changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
