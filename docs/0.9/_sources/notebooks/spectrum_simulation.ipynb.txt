{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v0.9?urlpath=lab/tree/spectrum_simulation.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_simulation.ipynb](../_static/notebooks/spectrum_simulation.ipynb) |\n",
    "[spectrum_simulation.py](../_static/notebooks/spectrum_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum simulation with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to use the functions and classes in [gammapy.spectrum](..\/spectrum/index.rst) in order to simulate and fit spectra.\n",
    "\n",
    "First, we will simulate and fit a pure power law without any background. Than we will add a power law shaped background component. Finally, we will see how to simulate and fit a user defined model. For all scenarios a toy detector will be simulated. For an example using real CTA IRFs, checkout [this notebook](https://github.com/gammapy/gammapy-extra/blob/master/notebooks/spectrum_simulation_cta.ipynb).\n",
    "\n",
    "The following clases will be used:\n",
    "\n",
    "* [gammapy.irf.EffectiveAreaTable](..\/api/gammapy.irf.EffectiveAreaTable.rst)\n",
    "* [gammapy.irf.EnergyDispersion](https://docs.gammapy.org/dev/api/gammapy.irf.EnergyDispersion)\n",
    "* [gammapy.spectrum.SpectrumObservation](..\/api/gammapy.spectrum.SpectrumObservation.rst)\n",
    "* [gammapy.spectrum.SpectrumSimulation](..\/api/gammapy.spectrum.SpectrumSimulation.rst)\n",
    "* [gammapy.spectrum.SpectrumFit](..\/api/gammapy.spectrum.SpectrumFit.rst)\n",
    "* [gammapy.spectrum.models.PowerLaw](..\/api/gammapy.spectrum.models.PowerLaw.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Same procedure as in every script ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from gammapy.irf import EnergyDispersion, EffectiveAreaTable\n",
    "from gammapy.spectrum import SpectrumSimulation, SpectrumFit\n",
    "from gammapy.spectrum.models import PowerLaw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create detector\n",
    "\n",
    "For the sake of self consistency of this tutorial, we will simulate a simple detector. For a real application you would want to replace this part of the code with loading the IRFs or your detector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "e_true = np.logspace(-2, 2.5, 109) * u.TeV\n",
    "e_reco = np.logspace(-2, 2, 79) * u.TeV\n",
    "\n",
    "edisp = EnergyDispersion.from_gauss(\n",
    "    e_true=e_true, e_reco=e_reco, sigma=0.2, bias=0\n",
    ")\n",
    "aeff = EffectiveAreaTable.from_parametrization(energy=e_true)\n",
    "\n",
    "fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n",
    "edisp.plot_matrix(ax=axes[0])\n",
    "aeff.plot(ax=axes[1]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power law\n",
    "\n",
    "In this section we will simulate one observation using a power law model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error      unit      min max frozen\n",
      "\t--------- --------- ----- -------------- --- --- ------\n",
      "\t    index 2.300e+00   nan                nan nan  False\n",
      "\tamplitude 1.000e-11   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLaw(\n",
    "    index=2.3, amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Observation summary report ***\n",
      "Observation Id: 1\n",
      "Livetime: 2.000 h\n",
      "On events: 339\n",
      "Off events: 0\n",
      "Alpha: 1.000\n",
      "Bkg events in On region: 0.00\n",
      "Excess: 339.00\n",
      "Excess / Background: inf\n",
      "Gamma rate: 169.50 1 / h\n",
      "Bkg rate: 0.00 1 / min\n",
      "Sigma: nan\n",
      "energy range: 0.01 TeV - 100.00 TeV\n"
     ]
    }
   ],
   "source": [
    "livetime = 2 * u.h\n",
    "sim = SpectrumSimulation(\n",
    "    aeff=aeff, edisp=edisp, source_model=pwl, livetime=livetime\n",
    ")\n",
    "sim.simulate_obs(seed=2309, obs_id=1)\n",
    "print(sim.obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fit result info \n",
      "--------------- \n",
      "Model: PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error        unit      min max frozen\n",
      "\t--------- --------- --------- -------------- --- --- ------\n",
      "\t    index 2.259e+00 2.191e-01                nan nan  False\n",
      "\tamplitude 9.255e-12 1.754e-12 cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00 0.000e+00            TeV nan nan   True\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\t   name     index   amplitude reference\n",
      "\t--------- --------- --------- ---------\n",
      "\t    index 4.802e-02 2.984e-13 0.000e+00\n",
      "\tamplitude 2.984e-13 3.077e-24 0.000e+00\n",
      "\treference 0.000e+00 0.000e+00 0.000e+00 \n",
      "\n",
      "Statistic: -74.059 (cash)\n",
      "Fit Range: [1.         9.42668455] TeV\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fit = SpectrumFit(obs_list=sim.obs, model=pwl.copy(), stat=\"cash\")\n",
    "fit.fit_range = [1, 10] * u.TeV\n",
    "fit.run()\n",
    "print(fit.result[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Include background\n",
    "\n",
    "In this section we will include a background component. Furthermore, we will also simulate more than one observation and fit each one individuallt in order to get average fit results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg_model = PowerLaw(\n",
    "    index=2.5, amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumObservationList\n",
      "Number of observations: 30\n",
      "*** Observation summary report ***\n",
      "Observation Id: 0\n",
      "Livetime: 2.000 h\n",
      "On events: 733\n",
      "Off events: 1915\n",
      "Alpha: 0.200\n",
      "Bkg events in On region: 383.00\n",
      "Excess: 350.00\n",
      "Excess / Background: 0.91\n",
      "Gamma rate: 175.00 1 / h\n",
      "Bkg rate: 0.04 1 / min\n",
      "Sigma: 14.17\n",
      "energy range: 0.01 TeV - 100.00 TeV\n",
      "CPU times: user 721 ms, sys: 6.08 ms, total: 727 ms\n",
      "Wall time: 179 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_obs = 30\n",
    "seeds = np.arange(n_obs)\n",
    "\n",
    "sim = SpectrumSimulation(\n",
    "    aeff=aeff,\n",
    "    edisp=edisp,\n",
    "    source_model=pwl,\n",
    "    livetime=livetime,\n",
    "    background_model=bkg_model,\n",
    "    alpha=0.2,\n",
    ")\n",
    "\n",
    "sim.run(seeds)\n",
    "print(sim.result)\n",
    "print(sim.result[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the fit let's have a look at the simulated observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_on = [obs.total_stats.n_on for obs in sim.result]\n",
    "n_off = [obs.total_stats.n_off for obs in sim.result]\n",
    "excess = [obs.total_stats.excess for obs in sim.result]\n",
    "\n",
    "fix, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[0].hist(n_on)\n",
    "axes[0].set_xlabel(\"n_on\")\n",
    "axes[1].hist(n_off)\n",
    "axes[1].set_xlabel(\"n_off\")\n",
    "axes[2].hist(excess)\n",
    "axes[2].set_xlabel(\"excess\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6.16 s, sys: 12 ms, total: 6.18 s\n",
      "Wall time: 1.55 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "for obs in sim.result:\n",
    "    fit = SpectrumFit(obs, pwl.copy(), stat=\"wstat\")\n",
    "    fit.optimize()\n",
    "    results.append(\n",
    "        {\n",
    "            \"index\": fit.result[0].model.parameters[\"index\"].value,\n",
    "            \"amplitude\": fit.result[0].model.parameters[\"amplitude\"].value,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spectral index: 2.31 +/- 0.09\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([_[\"index\"] for _ in results])\n",
    "plt.hist(index, bins=10)\n",
    "print(\"spectral index: {:.2f} +/- {:.2f}\".format(index.mean(), index.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Fit a pure power law and the user define model to the observation you just simulated. You can start with the user defined model described in the [spectrum_models.ipynb](https://github.com/gammapy/gammapy-extra/blob/master/notebooks/spectrum_models.ipynb) notebook.\n",
    "* Vary the observation lifetime and see when you can distinguish the two models (Hint: You get the final likelihood of a fit from `fit.result[0].statval`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What's next\n",
    "\n",
    "In this tutorial we learnd how to simulate and fit data using a toy detector. Go to [gammapy.spectrum](..\/spectrum/index.rst) to see what else you can do with gammapy."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
