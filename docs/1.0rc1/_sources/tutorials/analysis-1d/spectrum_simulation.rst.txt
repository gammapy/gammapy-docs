
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-1d/spectrum_simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_analysis-1d_spectrum_simulation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-1d_spectrum_simulation.py:


1D spectrum simulation
======================

Simulate a number of spectral on-off observations of a source with a power-law spectral
model using the CTA 1DC response and fit them with the assumed spectral model.

Prerequisites
-------------

-  Knowledge of spectral extraction and datasets used in gammapy, see
   for instance the `spectral analysis
   tutorial <spectral_analysis.ipynb>`__

Context
-------

To simulate a specific observation, it is not always necessary to
simulate the full photon list. For many uses cases, simulating directly
a reduced binned dataset is enough: the IRFs reduced in the correct
geometry are combined with a source model to predict an actual number of
counts per bin. The latter is then used to simulate a reduced dataset
using Poisson probability distribution.

This can be done to check the feasibility of a measurement, to test
whether fitted parameters really provide a good fit to the data etc.

Here we will see how to perform a 1D spectral simulation of a CTA
observation, in particular, we will generate OFF observations following
the template background stored in the CTA IRFs.

**Objective: simulate a number of spectral ON-OFF observations of a
source with a power-law spectral model with CTA using the CTA 1DC
response, fit them with the assumed spectral model and check that the
distribution of fitted parameters is consistent with the input values.**

Proposed approach
-----------------

We will use the following classes:

-  `~gammapy.datasets.SpectrumDatasetOnOff`
-  `~gammapy.datasets.SpectrumDataset`
-  `~gammapy.irf.load_cta_irfs`
-  `~gammapy.modeling.models.PowerLawSpectralModel`

.. GENERATED FROM PYTHON SOURCE LINES 51-54

Setup
-----


.. GENERATED FROM PYTHON SOURCE LINES 54-70

.. code-block:: python3


    import numpy as np
    import astropy.units as u
    from astropy.coordinates import Angle, SkyCoord
    from regions import CircleSkyRegion

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from gammapy.data import Observation, observatory_locations
    from gammapy.datasets import Datasets, SpectrumDataset, SpectrumDatasetOnOff
    from gammapy.irf import load_cta_irfs
    from gammapy.makers import SpectrumDatasetMaker
    from gammapy.maps import MapAxis, RegionGeom
    from gammapy.modeling import Fit
    from gammapy.modeling.models import PowerLawSpectralModel, SkyModel








.. GENERATED FROM PYTHON SOURCE LINES 71-73

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: python3

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /Users/adonath/github/adonath/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.12     
            machine                : arm64      
            system                 : Darwin     


    Gammapy package:

            version                : 0.20.2.dev596+g96acaf17f 
            path                   : /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.23.3     
            scipy                  : 1.9.1      
            astropy                : 5.1        
            regions                : 0.6        
            click                  : 8.1.3      
            yaml                   : 6.0        
            IPython                : 8.5.0      
            jupyterlab             : not installed 
            matplotlib             : 3.6.0      
            pandas                 : not installed 
            healpy                 : 1.16.1     
            iminuit                : 2.17.0     
            sherpa                 : 4.14.1     
            naima                  : 0.10.0     
            emcee                  : 3.1.3      
            corner                 : 2.2.1      


    Gammapy environment variables:

            GAMMAPY_DATA           : /Users/adonath/github/gammapy/gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 79-89

Simulation of a single spectrum
-------------------------------

To do a simulation, we need to define the observational parameters like
the livetime, the offset, the assumed integration radius, the energy
range to perform the simulation for and the choice of spectral model. We
then use an in-memory observation which is convolved with the IRFs to
get the predicted number of counts. This is Poission fluctuated using
the `fake()` to get the simulated counts for each observation.


.. GENERATED FROM PYTHON SOURCE LINES 89-150

.. code-block:: python3


    # Define simulation parameters parameters
    livetime = 1 * u.h

    pointing = SkyCoord(0, 0, unit="deg", frame="galactic")
    offset = 0.5 * u.deg

    # Reconstructed and true energy axis
    energy_axis = MapAxis.from_edges(
        np.logspace(-0.5, 1.0, 10), unit="TeV", name="energy", interp="log"
    )
    energy_axis_true = MapAxis.from_edges(
        np.logspace(-1.2, 2.0, 31), unit="TeV", name="energy_true", interp="log"
    )

    on_region_radius = Angle("0.11 deg")

    center = pointing.directional_offset_by(position_angle=0 * u.deg, separation=offset)
    on_region = CircleSkyRegion(center=center, radius=on_region_radius)

    # Define spectral model - a simple Power Law in this case
    model_simu = PowerLawSpectralModel(
        index=3.0,
        amplitude=2.5e-12 * u.Unit("cm-2 s-1 TeV-1"),
        reference=1 * u.TeV,
    )
    print(model_simu)
    # we set the sky model used in the dataset
    model = SkyModel(spectral_model=model_simu, name="source")

    # Load the IRFs
    # In this simulation, we use the CTA-1DC irfs shipped with gammapy.
    irfs = load_cta_irfs(
        "$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits"
    )

    location = observatory_locations["cta_south"]
    obs = Observation.create(
        pointing=pointing,
        livetime=livetime,
        irfs=irfs,
        location=location,
    )
    print(obs)

    # Make the SpectrumDataset
    geom = RegionGeom.create(region=on_region, axes=[energy_axis])

    dataset_empty = SpectrumDataset.create(
        geom=geom, energy_axis_true=energy_axis_true, name="obs-0"
    )
    maker = SpectrumDatasetMaker(selection=["exposure", "edisp", "background"])

    dataset = maker.run(dataset_empty, obs)

    # Set the model on the dataset, and fake
    dataset.models = model
    dataset.fake(random_state=42)
    print(dataset)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PowerLawSpectralModel

      type      name     value         unit      ... max frozen is_norm link
    -------- --------- ---------- -------------- ... --- ------ ------- ----
    spectral     index 3.0000e+00                ... nan  False   False     
    spectral amplitude 2.5000e-12 cm-2 s-1 TeV-1 ... nan  False    True     
    spectral reference 1.0000e+00            TeV ... nan   True   False     
    /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/core.py:2042: UnitsWarning: '1/s/MeV/sr' did not parse as fits unit: Numeric factor not supported by FITS If this is meant to be a custom unit, define it with 'u.def_unit'. To have it recognized inside a file reader or other code, enable it with 'u.add_enabled_units'. For details, see https://docs.astropy.org/en/latest/units/combining_and_defining.html
      warnings.warn(msg, UnitsWarning)
    Observation

            obs id            : 0 
            tstart            : 51544.00
            tstop             : 51544.04
            duration          : 3600.00 s
            pointing (icrs)   : 266.4 deg, -28.9 deg

            deadtime fraction : 0.0%

    SpectrumDataset
    ---------------

      Name                            : obs-0 

      Total counts                    : 298 
      Total background counts         : 22.29
      Total excess counts             : 275.71

      Predicted counts                : 303.66
      Predicted background counts     : 22.29
      Predicted excess counts         : 281.37

      Exposure min                    : 2.53e+08 m2 s
      Exposure max                    : 1.77e+10 m2 s

      Number of total bins            : 9 
      Number of fit bins              : 9 

      Fit statistic type              : cash
      Fit statistic value (-2 log(L)) : -1811.58

      Number of models                : 1 
      Number of parameters            : 3
      Number of free parameters       : 2

      Component 0: SkyModel
  
        Name                      : source
        Datasets names            : None
        Spectral model type       : PowerLawSpectralModel
        Spatial  model type       : 
        Temporal model type       : 
        Parameters:
          index                         :      3.000   +/-    0.00             
          amplitude                     :   2.50e-12   +/- 0.0e+00 1 / (cm2 s TeV)
          reference             (frozen):      1.000       TeV         
  
  




.. GENERATED FROM PYTHON SOURCE LINES 151-153

You can see that background counts are now simulated


.. GENERATED FROM PYTHON SOURCE LINES 156-163

On-Off analysis
~~~~~~~~~~~~~~~

To do an on off spectral analysis, which is the usual science case, the
standard would be to use `SpectrumDatasetOnOff`, which uses the
acceptance to fake off-counts


.. GENERATED FROM PYTHON SOURCE LINES 163-171

.. code-block:: python3


    dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(
        dataset=dataset, acceptance=1, acceptance_off=5
    )
    dataset_on_off.fake(npred_background=dataset.npred_background())
    print(dataset_on_off)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SpectrumDatasetOnOff
    --------------------

      Name                            : -2htzWbF 

      Total counts                    : 287 
      Total background counts         : 25.20
      Total excess counts             : 261.80

      Predicted counts                : 306.17
      Predicted background counts     : 24.80
      Predicted excess counts         : 281.37

      Exposure min                    : 2.53e+08 m2 s
      Exposure max                    : 1.77e+10 m2 s

      Number of total bins            : 9 
      Number of fit bins              : 9 

      Fit statistic type              : wstat
      Fit statistic value (-2 log(L)) : 7.38

      Number of models                : 1 
      Number of parameters            : 3
      Number of free parameters       : 2

      Component 0: SkyModel
  
        Name                      : source
        Datasets names            : None
        Spectral model type       : PowerLawSpectralModel
        Spatial  model type       : 
        Temporal model type       : 
        Parameters:
          index                         :      3.000   +/-    0.00             
          amplitude                     :   2.50e-12   +/- 0.0e+00 1 / (cm2 s TeV)
          reference             (frozen):      1.000       TeV         
  
        Total counts_off                : 126 
      Acceptance                      : 9 
      Acceptance off                  : 45 





.. GENERATED FROM PYTHON SOURCE LINES 172-175

You can see that off counts are now simulated as well. We now simulate
several spectra using the same set of observation conditions.


.. GENERATED FROM PYTHON SOURCE LINES 177-191

.. code-block:: python3


    n_obs = 100
    datasets = Datasets()

    for idx in range(n_obs):
        dataset_on_off.fake(random_state=idx, npred_background=dataset.npred_background())
        dataset_fake = dataset_on_off.copy(name=f"obs-{idx}")
        dataset_fake.meta_table["OBS_ID"] = [idx]
        datasets.append(dataset_fake)

    table = datasets.info_table()
    table









.. GENERATED FROM PYTHON SOURCE LINES 192-195

Before moving on to the fit let’s have a look at the simulated
observations.


.. GENERATED FROM PYTHON SOURCE LINES 195-205

.. code-block:: python3


    fix, axes = plt.subplots(1, 3, figsize=(12, 4))
    axes[0].hist(table["counts"])
    axes[0].set_xlabel("Counts")
    axes[1].hist(table["counts_off"])
    axes[1].set_xlabel("Counts Off")
    axes[2].hist(table["excess"])
    axes[2].set_xlabel("excess")





.. image-sg:: /tutorials/analysis-1d/images/sphx_glr_spectrum_simulation_001.png
   :alt: spectrum simulation
   :srcset: /tutorials/analysis-1d/images/sphx_glr_spectrum_simulation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 206-208

Now, we fit each simulated spectrum individually


.. GENERATED FROM PYTHON SOURCE LINES 210-225

.. code-block:: python3

    results = []

    fit = Fit()

    for dataset in datasets:
        dataset.models = model.copy()
        result = fit.optimize(dataset)
        results.append(
            {
                "index": result.parameters["index"].value,
                "amplitude": result.parameters["amplitude"].value,
            }
        )









.. GENERATED FROM PYTHON SOURCE LINES 226-229

We take a look at the distribution of the fitted indices. This matches
very well with the spectrum that we initially injected.


.. GENERATED FROM PYTHON SOURCE LINES 229-236

.. code-block:: python3


    index = np.array([_["index"] for _ in results])
    plt.hist(index, bins=10, alpha=0.5)
    plt.axvline(x=model_simu.parameters["index"].value, color="red")
    print(f"index: {index.mean()} += {index.std()}")





.. image-sg:: /tutorials/analysis-1d/images/sphx_glr_spectrum_simulation_002.png
   :alt: spectrum simulation
   :srcset: /tutorials/analysis-1d/images/sphx_glr_spectrum_simulation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    index: 3.00369255504466 += 0.08081469527083394




.. GENERATED FROM PYTHON SOURCE LINES 237-247

Exercises
---------

-  Change the observation time to something longer or shorter. Does the
   observation and spectrum results change as you expected?
-  Change the spectral model, e.g. add a cutoff at 5 TeV, or put a
   steep-spectrum source with spectral index of 4.0
-  Simulate spectra with the spectral model we just defined. How much
   observation duration do you need to get back the injected parameters?



.. _sphx_glr_download_tutorials_analysis-1d_spectrum_simulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-1d/spectrum_simulation.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: spectrum_simulation.py <spectrum_simulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: spectrum_simulation.ipynb <spectrum_simulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
