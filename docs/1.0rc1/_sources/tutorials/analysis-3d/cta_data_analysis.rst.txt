
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-3d/cta_data_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_analysis-3d_cta_data_analysis.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-3d_cta_data_analysis.py:


Basic image exploration and fitting
===================================

Detect sources, produce a sky image and a spectrum using CTA 1DC data.

Introduction
------------

**This notebook shows an example how to make a sky image and spectrum
for simulated CTA data with Gammapy.**

The dataset we will use is three observation runs on the Galactic
center. This is a tiny (and thus quick to process and play with and
learn) subset of the simulated CTA dataset that was produced for the
first data challenge in August 2017.

.. GENERATED FROM PYTHON SOURCE LINES 22-27

Setup
-----

As usual, we’ll start with some setup …


.. GENERATED FROM PYTHON SOURCE LINES 27-61

.. code-block:: python3


    # Configure the logger, so that the spectral analysis
    # isn't so chatty about what it's doing.
    import logging
    import numpy as np
    import astropy.units as u
    from astropy.coordinates import SkyCoord
    from regions import CircleSkyRegion

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from gammapy.data import DataStore
    from gammapy.datasets import Datasets, FluxPointsDataset, MapDataset, SpectrumDataset
    from gammapy.estimators import FluxPointsEstimator, TSMapEstimator
    from gammapy.estimators.utils import find_peaks
    from gammapy.makers import (
        MapDatasetMaker,
        ReflectedRegionsBackgroundMaker,
        SafeMaskMaker,
        SpectrumDatasetMaker,
    )
    from gammapy.maps import MapAxis, RegionGeom, WcsGeom
    from gammapy.modeling import Fit
    from gammapy.modeling.models import (
        GaussianSpatialModel,
        PowerLawSpectralModel,
        SkyModel,
    )
    from gammapy.visualization import plot_spectrum_datasets_off_regions

    logging.basicConfig()
    log = logging.getLogger("gammapy.spectrum")
    log.setLevel(logging.ERROR)








.. GENERATED FROM PYTHON SOURCE LINES 62-64

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: python3

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /Users/adonath/github/adonath/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.12     
            machine                : arm64      
            system                 : Darwin     


    Gammapy package:

            version                : 0.20.2.dev596+g96acaf17f 
            path                   : /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.23.3     
            scipy                  : 1.9.1      
            astropy                : 5.1        
            regions                : 0.6        
            click                  : 8.1.3      
            yaml                   : 6.0        
            IPython                : 8.5.0      
            jupyterlab             : not installed 
            matplotlib             : 3.6.0      
            pandas                 : not installed 
            healpy                 : 1.16.1     
            iminuit                : 2.17.0     
            sherpa                 : 4.14.1     
            naima                  : 0.10.0     
            emcee                  : 3.1.3      
            corner                 : 2.2.1      


    Gammapy environment variables:

            GAMMAPY_DATA           : /Users/adonath/github/gammapy/gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 70-79

Select observations
-------------------

A Gammapy analysis usually starts by creating a
`~gammapy.data.DataStore` and selecting observations.

This is shown in detail in the other notebook, here we just pick three
observations near the galactic center.


.. GENERATED FROM PYTHON SOURCE LINES 79-99

.. code-block:: python3


    data_store = DataStore.from_dir("$GAMMAPY_DATA/cta-1dc/index/gps")

    # Just as a reminder: this is how to select observations
    # from astropy.coordinates import SkyCoord
    # table = data_store.obs_table
    # pos_obs = SkyCoord(table['GLON_PNT'], table['GLAT_PNT'], frame='galactic', unit='deg')
    # pos_target = SkyCoord(0, 0, frame='galactic', unit='deg')
    # offset = pos_target.separation(pos_obs).deg
    # mask = (1 < offset) & (offset < 2)
    # table = table[mask]
    # table.show_in_browser(jsviewer=True)

    obs_id = [110380, 111140, 111159]
    observations = data_store.get_observations(obs_id)

    obs_cols = ["OBS_ID", "GLON_PNT", "GLAT_PNT", "LIVETIME"]
    data_store.obs_table.select_obs_id(obs_id)[obs_cols]









.. GENERATED FROM PYTHON SOURCE LINES 100-109

Make sky images
---------------

Define map geometry
~~~~~~~~~~~~~~~~~~~

Select the target position and define an ON region for the spectral
analysis


.. GENERATED FROM PYTHON SOURCE LINES 109-119

.. code-block:: python3


    axis = MapAxis.from_edges(
        np.logspace(-1.0, 1.0, 10), unit="TeV", name="energy", interp="log"
    )
    geom = WcsGeom.create(
        skydir=(0, 0), npix=(500, 400), binsz=0.02, frame="galactic", axes=[axis]
    )
    geom









.. GENERATED FROM PYTHON SOURCE LINES 120-123

Compute images
~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 125-141

.. code-block:: python3

    stacked = MapDataset.create(geom=geom)
    stacked.edisp = None
    maker = MapDatasetMaker(selection=["counts", "background", "exposure", "psf"])
    maker_safe_mask = SafeMaskMaker(methods=["offset-max"], offset_max=2.5 * u.deg)

    for obs in observations:
        cutout = stacked.cutout(obs.pointing_radec, width="5 deg")
        dataset = maker.run(cutout, obs)
        dataset = maker_safe_mask.run(dataset, obs)
        stacked.stack(dataset)

    # The maps are cubes, with an energy axis.
    # Let's also make some images:
    dataset_image = stacked.to_image()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/core.py:2042: UnitsWarning: '1/s/MeV/sr' did not parse as fits unit: Numeric factor not supported by FITS If this is meant to be a custom unit, define it with 'u.def_unit'. To have it recognized inside a file reader or other code, enable it with 'u.add_enabled_units'. For details, see https://docs.astropy.org/en/latest/units/combining_and_defining.html
      warnings.warn(msg, UnitsWarning)
    /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/core.py:2042: UnitsWarning: '1/s/MeV/sr' did not parse as fits unit: Numeric factor not supported by FITS If this is meant to be a custom unit, define it with 'u.def_unit'. To have it recognized inside a file reader or other code, enable it with 'u.add_enabled_units'. For details, see https://docs.astropy.org/en/latest/units/combining_and_defining.html
      warnings.warn(msg, UnitsWarning)
    /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/core.py:2042: UnitsWarning: '1/s/MeV/sr' did not parse as fits unit: Numeric factor not supported by FITS If this is meant to be a custom unit, define it with 'u.def_unit'. To have it recognized inside a file reader or other code, enable it with 'u.add_enabled_units'. For details, see https://docs.astropy.org/en/latest/units/combining_and_defining.html
      warnings.warn(msg, UnitsWarning)




.. GENERATED FROM PYTHON SOURCE LINES 142-147

Show images
~~~~~~~~~~~

Let’s have a quick look at the images we computed …


.. GENERATED FROM PYTHON SOURCE LINES 147-155

.. code-block:: python3


    dataset_image.counts.smooth(2).plot(vmax=5)

    dataset_image.background.plot(vmax=5)

    dataset_image.excess.smooth(3).plot(vmax=2)





.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_001.png
   :alt: cta data analysis
   :srcset: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 156-163

Source Detection
----------------

Use the class `~gammapy.estimators.TSMapEstimator` and function
`gammapy.estimators.utils.find_peaks` to detect sources on the images.
We search for 0.1 deg sigma gaussian sources in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 163-177

.. code-block:: python3


    spatial_model = GaussianSpatialModel(sigma="0.05 deg")
    spectral_model = PowerLawSpectralModel(index=2)
    model = SkyModel(spatial_model=spatial_model, spectral_model=spectral_model)

    ts_image_estimator = TSMapEstimator(
        model,
        kernel_width="0.5 deg",
        selection_optional=[],
        downsampling_factor=2,
        sum_over_energy_groups=False,
        energy_edges=[0.1, 10] * u.TeV,
    )








.. GENERATED FROM PYTHON SOURCE LINES 178-205

.. code-block:: python3

    images_ts = ts_image_estimator.run(stacked)

    sources = find_peaks(
        images_ts["sqrt_ts"],
        threshold=5,
        min_distance="0.2 deg",
    )
    sources

    source_pos = SkyCoord(sources["ra"], sources["dec"])
    source_pos

    # Plot sources on top of significance sky image
    images_ts["sqrt_ts"].plot(add_cbar=True)

    plt.gca().scatter(
        source_pos.ra.deg,
        source_pos.dec.deg,
        transform=plt.gca().get_transform("icrs"),
        color="none",
        edgecolor="white",
        marker="o",
        s=200,
        lw=1.5,
    )





.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_002.png
   :alt: cta data analysis
   :srcset: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 206-211

Spatial analysis
----------------

See other notebooks for how to run a 3D cube or 2D image based analysis.


.. GENERATED FROM PYTHON SOURCE LINES 214-221

Spectrum
--------

We’ll run a spectral analysis using the classical reflected regions
background estimation method, and using the on-off (often called WSTAT)
likelihood function.


.. GENERATED FROM PYTHON SOURCE LINES 221-243

.. code-block:: python3


    target_position = SkyCoord(0, 0, unit="deg", frame="galactic")
    on_radius = 0.2 * u.deg
    on_region = CircleSkyRegion(center=target_position, radius=on_radius)

    exclusion_mask = ~geom.to_image().region_mask([on_region])
    exclusion_mask.plot()

    energy_axis = MapAxis.from_energy_bounds(0.1, 40, 40, unit="TeV", name="energy")
    energy_axis_true = MapAxis.from_energy_bounds(
        0.05, 100, 200, unit="TeV", name="energy_true"
    )

    geom = RegionGeom.create(region=on_region, axes=[energy_axis])
    dataset_empty = SpectrumDataset.create(geom=geom, energy_axis_true=energy_axis_true)

    dataset_maker = SpectrumDatasetMaker(
        containment_correction=False, selection=["counts", "exposure", "edisp"]
    )
    bkg_maker = ReflectedRegionsBackgroundMaker(exclusion_mask=exclusion_mask)
    safe_mask_masker = SafeMaskMaker(methods=["aeff-max"], aeff_percent=10)




.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_003.png
   :alt: cta data analysis
   :srcset: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 244-261

.. code-block:: python3

    datasets = Datasets()

    for observation in observations:
        dataset = dataset_maker.run(
            dataset_empty.copy(name=f"obs-{observation.obs_id}"), observation
        )
        dataset_on_off = bkg_maker.run(dataset, observation)
        dataset_on_off = safe_mask_masker.run(dataset_on_off, observation)
        datasets.append(dataset_on_off)

    plt.figure(figsize=(8, 8))
    ax = dataset_image.counts.smooth("0.03 deg").plot(vmax=8)

    on_region.to_pixel(ax.wcs).plot(ax=ax, edgecolor="white")
    plot_spectrum_datasets_off_regions(datasets, ax=ax)





.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_004.png
   :alt: cta data analysis
   :srcset: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 262-268

Model fit
~~~~~~~~~

The next step is to fit a spectral model, using all data (i.e. a
“global” fit, using all energies).


.. GENERATED FROM PYTHON SOURCE LINES 270-283

.. code-block:: python3

    spectral_model = PowerLawSpectralModel(
        index=2, amplitude=1e-11 * u.Unit("cm-2 s-1 TeV-1"), reference=1 * u.TeV
    )

    model = SkyModel(spectral_model=spectral_model, name="source-gc")

    datasets.models = model

    fit = Fit()
    result = fit.run(datasets=datasets)
    print(result)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    OptimizeResult

            backend    : minuit
            method     : migrad
            success    : True
            message    : Optimization terminated successfully.
            nfev       : 104
            total stat : 88.36

    CovarianceResult

            backend    : minuit
            method     : hesse
            success    : True
            message    : Hesse terminated successfully.





.. GENERATED FROM PYTHON SOURCE LINES 284-291

Spectral points
~~~~~~~~~~~~~~~

Finally, let’s compute spectral points. The method used is to first
choose an energy binning, and then to do a 1-dim likelihood fit /
profile to compute the flux and flux error.


.. GENERATED FROM PYTHON SOURCE LINES 291-306

.. code-block:: python3


    # Flux points are computed on stacked observation
    stacked_dataset = datasets.stack_reduce(name="stacked")

    print(stacked_dataset)

    energy_edges = MapAxis.from_energy_bounds("1 TeV", "30 TeV", nbin=5).edges

    stacked_dataset.models = model

    fpe = FluxPointsEstimator(energy_edges=energy_edges, source="source-gc")
    flux_points = fpe.run(datasets=[stacked_dataset])
    flux_points.to_table(sed_type="dnde", formatted=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SpectrumDatasetOnOff
    --------------------

      Name                            : stacked 

      Total counts                    : 413 
      Total background counts         : 85.43
      Total excess counts             : 327.57

      Predicted counts                : 98.34
      Predicted background counts     : 98.34
      Predicted excess counts         : nan

      Exposure min                    : 9.94e+07 m2 s
      Exposure max                    : 2.46e+10 m2 s

      Number of total bins            : 40 
      Number of fit bins              : 30 

      Fit statistic type              : wstat
      Fit statistic value (-2 log(L)) : 658.76

      Number of models                : 0 
      Number of parameters            : 0
      Number of free parameters       : 0

      Total counts_off                : 2095 
      Acceptance                      : 40 
      Acceptance off                  : 990 

      NAME          TYPE         ...       DEC_PNT       
    ------- -------------------- ... --------------------
    stacked SpectrumDatasetOnOff ... -29.6075 .. -26.9782




.. GENERATED FROM PYTHON SOURCE LINES 307-314

Plot
~~~~

Let’s plot the spectral model and points. You could do it directly, but
for convenience we bundle the model and the flux points in a
`FluxPointDataset`:


.. GENERATED FROM PYTHON SOURCE LINES 314-320

.. code-block:: python3


    flux_points_dataset = FluxPointsDataset(data=flux_points, models=model)

    flux_points_dataset.plot_fit()





.. image-sg:: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_005.png
   :alt: cta data analysis
   :srcset: /tutorials/analysis-3d/images/sphx_glr_cta_data_analysis_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 321-337

Exercises
---------

-  Re-run the analysis above, varying some analysis parameters, e.g.

   -  Select a few other observations
   -  Change the energy band for the map
   -  Change the spectral model for the fit
   -  Change the energy binning for the spectral points

-  Change the target. Make a sky image and spectrum for your favourite
   source.

   -  If you don’t know any, the Crab nebula is the “hello world!”
      analysis of gamma-ray astronomy.


.. GENERATED FROM PYTHON SOURCE LINES 337-342

.. code-block:: python3


    # print('hello world')
    # SkyCoord.from_name('crab')









.. GENERATED FROM PYTHON SOURCE LINES 343-350

What next?
----------

-  This notebook showed an example of a first CTA analysis with Gammapy,
   using simulated 1DC data.
-  Let us know if you have any question or issues!



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.858 seconds)


.. _sphx_glr_download_tutorials_analysis-3d_cta_data_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-3d/cta_data_analysis.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cta_data_analysis.py <cta_data_analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cta_data_analysis.ipynb <cta_data_analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
