
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-time/light_curve.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_analysis-time_light_curve.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-time_light_curve.py:


Light curves
============

Compute per-observation and nightly fluxes of four Crab nebula observations.

Prerequisites
-------------

-  Knowledge of the high level interface to perform data reduction, see
   :doc:`/tutorials/starting/analysis_1` tutorial.

Context
-------

This tutorial presents how light curve extraction is performed in
gammapy, i.e. how to measure the flux of a source in different time
bins.

Cherenkov telescopes usually work with observing runs and distribute
data according to this basic time interval. A typical use case is to
look for variability of a source on various time binnings: observation
run-wise binning, nightly, weekly etc.

**Objective: The Crab nebula is not known to be variable at TeV
energies, so we expect constant brightness within statistical and
systematic errors. Compute per-observation and nightly fluxes of the
four Crab nebula observations from the H.E.S.S. first public test data
release**\ `o <https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/>`__\ **to
check it.**

Proposed approach
-----------------

We will demonstrate how to compute a light curve from 3D reduced
datasets (`~gammapy.datasets.MapDataset`) as well as 1D ON-OFF
spectral datasets (`~gammapy.datasets.SpectrumDatasetOnOff`).

The data reduction will be performed with the high level interface for
the data reduction. Then we will use the
`~gammapy.estimators.LightCurveEstimator` class, which is able to
extract a light curve independently of the dataset type.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

Setup
-----

As usual, we’ll start with some general imports…


.. GENERATED FROM PYTHON SOURCE LINES 53-72

.. code-block:: python3


    import logging
    import astropy.units as u
    from astropy.coordinates import SkyCoord
    from astropy.time import Time

    # %matplotlib inline
    import matplotlib.pyplot as plt
    from gammapy.analysis import Analysis, AnalysisConfig
    from gammapy.estimators import LightCurveEstimator
    from gammapy.modeling.models import (
        Models,
        PointSpatialModel,
        PowerLawSpectralModel,
        SkyModel,
    )

    log = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 73-75

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: python3

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /Users/adonath/github/adonath/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.12     
            machine                : arm64      
            system                 : Darwin     


    Gammapy package:

            version                : 0.20.2.dev596+g96acaf17f 
            path                   : /Users/adonath/github/adonath/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.23.3     
            scipy                  : 1.9.1      
            astropy                : 5.1        
            regions                : 0.6        
            click                  : 8.1.3      
            yaml                   : 6.0        
            IPython                : 8.5.0      
            jupyterlab             : not installed 
            matplotlib             : 3.6.0      
            pandas                 : not installed 
            healpy                 : 1.16.1     
            iminuit                : 2.17.0     
            sherpa                 : 4.14.1     
            naima                  : 0.10.0     
            emcee                  : 3.1.3      
            corner                 : 2.2.1      


    Gammapy environment variables:

            GAMMAPY_DATA           : /Users/adonath/github/gammapy/gammapy-data 





.. GENERATED FROM PYTHON SOURCE LINES 81-91

Analysis configuration
----------------------

For the 1D and 3D extraction, we will use the same CrabNebula
configuration than in the :doc:`/tutorials/starting/analysis_1` tutorial
using the high level interface of Gammapy.

From the high level interface, the data reduction for those observations
is performed as followed


.. GENERATED FROM PYTHON SOURCE LINES 94-97

Building the 3D analysis configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: python3


    conf_3d = AnalysisConfig()









.. GENERATED FROM PYTHON SOURCE LINES 102-107

Definition of the data selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we use the Crab runs from the HESS DL3 data release 1


.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: python3


    conf_3d.observations.obs_ids = [23523, 23526, 23559, 23592]









.. GENERATED FROM PYTHON SOURCE LINES 112-115

Definition of the dataset geometry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 115-137

.. code-block:: python3


    # We want a 3D analysis
    conf_3d.datasets.type = "3d"

    # We want to extract the data by observation and therefore to not stack them
    conf_3d.datasets.stack = False

    # Here is the WCS geometry of the Maps
    conf_3d.datasets.geom.wcs.skydir = dict(
        frame="icrs", lon=83.63308 * u.deg, lat=22.01450 * u.deg
    )
    conf_3d.datasets.geom.wcs.binsize = 0.02 * u.deg
    conf_3d.datasets.geom.wcs.width = dict(width=1 * u.deg, height=1 * u.deg)

    # We define a value for the IRF Maps binsize
    conf_3d.datasets.geom.wcs.binsize_irf = 0.2 * u.deg

    # Define energy binning for the Maps
    conf_3d.datasets.geom.axes.energy = dict(min=0.7 * u.TeV, max=10 * u.TeV, nbins=5)
    conf_3d.datasets.geom.axes.energy_true = dict(min=0.3 * u.TeV, max=20 * u.TeV, nbins=20)









.. GENERATED FROM PYTHON SOURCE LINES 138-141

Run the 3D data reduction
~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 141-147

.. code-block:: python3


    analysis_3d = Analysis(conf_3d)
    analysis_3d.get_observations()
    analysis_3d.get_datasets()









.. GENERATED FROM PYTHON SOURCE LINES 148-154

Define the model to be used
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here we don’t try to fit the model parameters to the whole dataset, but
we use predefined values instead.


.. GENERATED FROM PYTHON SOURCE LINES 154-171

.. code-block:: python3


    target_position = SkyCoord(ra=83.63308, dec=22.01450, unit="deg")
    spatial_model = PointSpatialModel(
        lon_0=target_position.ra, lat_0=target_position.dec, frame="icrs"
    )

    spectral_model = PowerLawSpectralModel(
        index=2.702,
        amplitude=4.712e-11 * u.Unit("1 / (cm2 s TeV)"),
        reference=1 * u.TeV,
    )

    sky_model = SkyModel(
        spatial_model=spatial_model, spectral_model=spectral_model, name="crab"
    )









.. GENERATED FROM PYTHON SOURCE LINES 172-174

We assign them the model to be fitted to each dataset


.. GENERATED FROM PYTHON SOURCE LINES 174-179

.. code-block:: python3


    models = Models([sky_model])
    analysis_3d.set_models(models)









.. GENERATED FROM PYTHON SOURCE LINES 180-197

Light Curve estimation by observation
-------------------------------------

We can now create the light curve estimator.

We pass it the list of datasets and the name of the model component for
which we want to build the light curve. In a given time bin, the only
free parameter of the source is its normalization. We can optionally ask
for parameters of other model components to be reoptimized during fit,
that is most of the time to fit background normalization in each time
bin.

If we don’t set any time interval, the
`~gammapy.estimators.LightCurveEstimator` is determines the flux of
each dataset and places it at the corresponding time in the light curve.
Here one dataset equals to one observing run.


.. GENERATED FROM PYTHON SOURCE LINES 197-209

.. code-block:: python3


    lc_maker_3d = LightCurveEstimator(
        energy_edges=[1, 10] * u.TeV, source="crab", reoptimize=False
    )
    # Example showing how to change some parameters from the object itself
    lc_maker_3d.n_sigma_ul = 3  # Number of sigma to use for upper limit computation
    lc_maker_3d.selection_optional = (
        "all"  # Add the computation of upper limits and likelihood profile
    )
    lc_3d = lc_maker_3d.run(analysis_3d.datasets)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      NAME      TYPE    TELESCOP OBS_ID OBS_MODE      RA_PNT         DEC_PNT    
                                                       deg             deg      
    -------- ---------- -------- ------ -------- --------------- ---------------
    QkczMWec MapDataset     HESS  23523 POINTING 83.633333333333 21.514444444444
      NAME      TYPE    TELESCOP OBS_ID OBS_MODE      RA_PNT         DEC_PNT    
                                                       deg             deg      
    -------- ---------- -------- ------ -------- --------------- ---------------
    BYkqZshn MapDataset     HESS  23526 POINTING 83.633333333333 22.514444444444
      NAME      TYPE    TELESCOP OBS_ID OBS_MODE      RA_PNT          DEC_PNT    
                                                       deg              deg      
    -------- ---------- -------- ------ -------- ---------------- ---------------
    ImwuWd10 MapDataset     HESS  23559 POINTING 85.2533333381014 22.014444444444
      NAME      TYPE    TELESCOP OBS_ID OBS_MODE      RA_PNT          DEC_PNT    
                                                       deg              deg      
    -------- ---------- -------- ------ -------- ---------------- ---------------
    MOGsd7j9 MapDataset     HESS  23592 POINTING 82.0133333285646 22.014444444444




.. GENERATED FROM PYTHON SOURCE LINES 210-212

The LightCurve object contains a table which we can explore.


.. GENERATED FROM PYTHON SOURCE LINES 212-222

.. code-block:: python3


    # Example showing how to change just before plotting the threshold on the signal significance
    # (points vs upper limits), even if this has no effect with this data set.
    lc_3d.sqrt_ts_threshold_ul = 5
    lc_3d.plot(axis_name="time")

    table = lc_3d.to_table(format="lightcurve", sed_type="flux")
    table["time_min", "time_max", "e_min", "e_max", "flux", "flux_err"]





.. image-sg:: /tutorials/analysis-time/images/sphx_glr_light_curve_001.png
   :alt: light curve
   :srcset: /tutorials/analysis-time/images/sphx_glr_light_curve_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 223-226

Running the light curve extraction in 1D
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 229-232

Building the 1D analysis configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 232-236

.. code-block:: python3


    conf_1d = AnalysisConfig()









.. GENERATED FROM PYTHON SOURCE LINES 237-242

Definition of the data selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we use the Crab runs from the HESS DL3 data release 1


.. GENERATED FROM PYTHON SOURCE LINES 242-246

.. code-block:: python3


    conf_1d.observations.obs_ids = [23523, 23526, 23559, 23592]









.. GENERATED FROM PYTHON SOURCE LINES 247-250

Definition of the dataset geometry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 250-271

.. code-block:: python3


    # We want a 1D analysis
    conf_1d.datasets.type = "1d"

    # We want to extract the data by observation and therefore to not stack them
    conf_1d.datasets.stack = False

    # Here we define the ON region and make sure that PSF leakage is corrected
    conf_1d.datasets.on_region = dict(
        frame="icrs",
        lon=83.63308 * u.deg,
        lat=22.01450 * u.deg,
        radius=0.1 * u.deg,
    )
    conf_1d.datasets.containment_correction = True

    # Finally we define the energy binning for the spectra
    conf_1d.datasets.geom.axes.energy = dict(min=0.7 * u.TeV, max=10 * u.TeV, nbins=5)
    conf_1d.datasets.geom.axes.energy_true = dict(min=0.3 * u.TeV, max=20 * u.TeV, nbins=20)









.. GENERATED FROM PYTHON SOURCE LINES 272-275

Run the 1D data reduction
~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 275-281

.. code-block:: python3


    analysis_1d = Analysis(conf_1d)
    analysis_1d.get_observations()
    analysis_1d.get_datasets()









.. GENERATED FROM PYTHON SOURCE LINES 282-288

Define the model to be used
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here we don’t try to fit the model parameters to the whole dataset, but
we use predefined values instead.


.. GENERATED FROM PYTHON SOURCE LINES 288-300

.. code-block:: python3


    target_position = SkyCoord(ra=83.63308, dec=22.01450, unit="deg")

    spectral_model = PowerLawSpectralModel(
        index=2.702,
        amplitude=4.712e-11 * u.Unit("1 / (cm2 s TeV)"),
        reference=1 * u.TeV,
    )

    sky_model = SkyModel(spectral_model=spectral_model, name="crab")









.. GENERATED FROM PYTHON SOURCE LINES 301-304

We assign the model to be fitted to each dataset. We can use the same
`~gammapy.modeling.models.SkyModel` as before.


.. GENERATED FROM PYTHON SOURCE LINES 304-309

.. code-block:: python3


    models = Models([sky_model])
    analysis_1d.set_models(models)









.. GENERATED FROM PYTHON SOURCE LINES 310-313

Extracting the light curve
~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 313-324

.. code-block:: python3


    lc_maker_1d = LightCurveEstimator(
        energy_edges=[1, 10] * u.TeV, source="crab", reoptimize=False
    )
    lc_1d = lc_maker_1d.run(analysis_1d.datasets)

    lc_1d.geom.axes.names

    lc_1d.to_table(sed_type="flux", format="lightcurve")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT         DEC_PNT    
                                      ...                deg             deg      
    -------- --------------- -------- ... -------- --------------- ---------------
    0A4rT5Eq SpectrumDataset     HESS ... POINTING 83.633333333333 21.514444444444
      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT         DEC_PNT    
                                      ...                deg             deg      
    -------- --------------- -------- ... -------- --------------- ---------------
    uLwfw16b SpectrumDataset     HESS ... POINTING 83.633333333333 22.514444444444
      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT          DEC_PNT    
                                      ...                deg              deg      
    -------- --------------- -------- ... -------- ---------------- ---------------
    9DpOqIIM SpectrumDataset     HESS ... POINTING 85.2533333381014 22.014444444444
      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT          DEC_PNT    
                                      ...                deg              deg      
    -------- --------------- -------- ... -------- ---------------- ---------------
    WyiR1HxT SpectrumDataset     HESS ... POINTING 82.0133333285646 22.014444444444




.. GENERATED FROM PYTHON SOURCE LINES 325-331

Compare results
~~~~~~~~~~~~~~~

Finally we compare the result for the 1D and 3D lightcurve in a single
figure:


.. GENERATED FROM PYTHON SOURCE LINES 331-337

.. code-block:: python3


    ax = lc_1d.plot(marker="o", label="1D")
    lc_3d.plot(ax=ax, marker="o", label="3D")
    plt.legend()





.. image-sg:: /tutorials/analysis-time/images/sphx_glr_light_curve_002.png
   :alt: light curve
   :srcset: /tutorials/analysis-time/images/sphx_glr_light_curve_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 338-344

Night-wise LC estimation
------------------------

Here we want to extract a night curve per night. We define the time
intervals that cover the three nights.


.. GENERATED FROM PYTHON SOURCE LINES 344-352

.. code-block:: python3


    time_intervals = [
        Time([53343.5, 53344.5], format="mjd", scale="utc"),
        Time([53345.5, 53346.5], format="mjd", scale="utc"),
        Time([53347.5, 53348.5], format="mjd", scale="utc"),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 353-359

To compute the LC on the time intervals defined above, we pass the
`LightCurveEstimator` the list of time intervals.

Internally, datasets are grouped per time interval and a flux extraction
is performed for each group.


.. GENERATED FROM PYTHON SOURCE LINES 359-375

.. code-block:: python3


    lc_maker_1d = LightCurveEstimator(
        energy_edges=[1, 10] * u.TeV,
        time_intervals=time_intervals,
        source="crab",
        reoptimize=False,
        selection_optional="all",
    )

    nightwise_lc = lc_maker_1d.run(analysis_1d.datasets)

    nightwise_lc.plot(color="tab:orange")
    ax = nightwise_lc.plot_ts_profiles()
    ax.set_ylim(1e-12, 3e-12)





.. image-sg:: /tutorials/analysis-time/images/sphx_glr_light_curve_003.png
   :alt: light curve
   :srcset: /tutorials/analysis-time/images/sphx_glr_light_curve_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT         DEC_PNT    
                                      ...                deg             deg      
    -------- --------------- -------- ... -------- --------------- ---------------
    0A4rT5Eq SpectrumDataset     HESS ... POINTING 83.633333333333 21.514444444444
    uLwfw16b SpectrumDataset     HESS ... POINTING 83.633333333333 22.514444444444
      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT          DEC_PNT    
                                      ...                deg              deg      
    -------- --------------- -------- ... -------- ---------------- ---------------
    9DpOqIIM SpectrumDataset     HESS ... POINTING 85.2533333381014 22.014444444444
      NAME         TYPE      TELESCOP ... OBS_MODE      RA_PNT          DEC_PNT    
                                      ...                deg              deg      
    -------- --------------- -------- ... -------- ---------------- ---------------
    WyiR1HxT SpectrumDataset     HESS ... POINTING 82.0133333285646 22.014444444444




.. GENERATED FROM PYTHON SOURCE LINES 376-385

What next?
----------

When sources are bright enough to look for variability at small time
scales, the per-observation time binning is no longer relevant. One can
easily extend the light curve estimation approach presented above to any
time binning. This is demonstrated in the :doc:`/tutorials/analysis-time/light_curve_flare`
tutorial. which shows the extraction of the lightcurve of an AGN flare.



.. _sphx_glr_download_tutorials_analysis-time_light_curve.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/analysis-time/light_curve.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: light_curve.py <light_curve.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: light_curve.ipynb <light_curve.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
