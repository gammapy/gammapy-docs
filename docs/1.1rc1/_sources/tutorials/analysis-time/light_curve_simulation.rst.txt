
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/analysis-time/light_curve_simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_analysis-time_light_curve_simulation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_analysis-time_light_curve_simulation.py:


Simulating and fitting a time varying source
============================================

Simulate and fit a time decaying light curve of a source using the CTA 1DC response.

Prerequisites
-------------

-  To understand how a single binned simulation works, please refer to
   :doc:`/tutorials/analysis-1d/spectrum_simulation` tutorial and 
   :doc:`/tutorials/analysis-3d/simulate_3d` tutorial for 1D and 3D simulations
   respectively.
-  For details of light curve extraction using gammapy, refer to the two
   tutorials :doc:`/tutorials/analysis-time/light_curve` and
   :doc:`/tutorials/analysis-time/light_curve_flare` tutorial.

Context
-------

Frequently, studies of variable sources (eg: decaying GRB light curves,
AGN flares, etc) require time variable simulations. For most use cases,
generating an event list is an overkill, and it suffices to use binned
simulations using a temporal model.

**Objective: Simulate and fit a time decaying light curve of a source
with CTA using the CTA 1DC response**

Proposed approach
-----------------

We will simulate 10 spectral datasets within given time intervals (Good
Time Intervals) following a given spectral (a power law) and temporal
profile (an exponential decay, with a decay time of 6 hr ). These are
then analysed using the light curve estimator to obtain flux points.

Modelling and fitting of lightcurves can be done either - directly on
the output of the `LighCurveEstimator` (at the DL5 level) - fit the
simulated datasets (at the DL4 level)

In summary, necessary steps are:

-  Choose observation parameters including a list of
   `gammapy.data.GTI`
-  Define temporal and spectral models from :ref:model-gallery as per
   science case
-  Perform the simulation (in 1D or 3D)
-  Extract the light curve from the reduced dataset as shown
   in :doc:`/tutorials/analysis-time/light_curve` tutorial.
-  Optionally, we show here how to fit the simulated datasets using a
   source model

Setup
-----

As usual, we’ll start with some general imports…

.. GENERATED FROM PYTHON SOURCE LINES 59-70

.. code-block:: python3



    import logging
    import numpy as np
    import astropy.units as u
    from astropy.coordinates import SkyCoord
    from astropy.time import Time

    # %matplotlib inline
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 71-74

Setup
-----


.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: python3

    from IPython.display import display

    log = logging.getLogger(__name__)









.. GENERATED FROM PYTHON SOURCE LINES 80-82

And some gammapy specific imports


.. GENERATED FROM PYTHON SOURCE LINES 82-96

.. code-block:: python3


    from gammapy.data import Observation, observatory_locations
    from gammapy.datasets import Datasets, FluxPointsDataset, SpectrumDataset
    from gammapy.estimators import LightCurveEstimator
    from gammapy.irf import load_irf_dict_from_file
    from gammapy.makers import SpectrumDatasetMaker
    from gammapy.maps import MapAxis, RegionGeom, TimeMapAxis
    from gammapy.modeling import Fit
    from gammapy.modeling.models import (
        ExpDecayTemporalModel,
        PowerLawSpectralModel,
        SkyModel,
    )








.. GENERATED FROM PYTHON SOURCE LINES 97-99

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 99-104

.. code-block:: python3

    from gammapy.utils.check import check_tutorials_setup

    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/bin/python 
            python_version         : 3.9.16     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 1.1rc1     
            path                   : /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy 


    Other packages:

            numpy                  : 1.24.3     
            scipy                  : 1.10.1     
            astropy                : 5.2.2      
            regions                : 0.7        
            click                  : 8.1.3      
            yaml                   : 6.0        
            IPython                : 8.14.0     
            jupyterlab             : not installed 
            matplotlib             : 3.7.1      
            pandas                 : not installed 
            healpy                 : 1.16.2     
            iminuit                : 2.21.3     
            sherpa                 : 4.15.1     
            naima                  : 0.10.0     
            emcee                  : 3.1.4      
            corner                 : 2.2.2      
            ray                    : 2.4.0      


    Gammapy environment variables:

            GAMMAPY_DATA           : /home/runner/work/gammapy-docs/gammapy-docs/gammapy-datasets/1.1rc1 





.. GENERATED FROM PYTHON SOURCE LINES 105-107

We first define our preferred time format:


.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: python3


    TimeMapAxis.time_format = "iso"









.. GENERATED FROM PYTHON SOURCE LINES 112-120

Simulating a light curve
------------------------

We will simulate 10 spectra between 300 GeV and 10 TeV using an
`PowerLawSpectralModel` and a `ExpDecayTemporalModel`. The important
thing to note here is how to attach a different `GTI` to each dataset.
Since we use spectrum datasets here, we will use a `RegionGeom`.


.. GENERATED FROM PYTHON SOURCE LINES 120-140

.. code-block:: python3


    # Loading IRFs
    irfs = load_irf_dict_from_file(
        "$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits"
    )

    # Reconstructed and true energy axis
    energy_axis = MapAxis.from_edges(
        np.logspace(-0.5, 1.0, 10), unit="TeV", name="energy", interp="log"
    )
    energy_axis_true = MapAxis.from_edges(
        np.logspace(-1.2, 2.0, 31), unit="TeV", name="energy_true", interp="log"
    )

    geom = RegionGeom.create("galactic;circle(0, 0, 0.11)", axes=[energy_axis])

    # Pointing position
    pointing = SkyCoord(0.5, 0.5, unit="deg", frame="galactic")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/core.py:2097: UnitsWarning: '1/s/MeV/sr' did not parse as fits unit: Numeric factor not supported by FITS If this is meant to be a custom unit, define it with 'u.def_unit'. To have it recognized inside a file reader or other code, enable it with 'u.add_enabled_units'. For details, see https://docs.astropy.org/en/latest/units/combining_and_defining.html
      warnings.warn(msg, UnitsWarning)




.. GENERATED FROM PYTHON SOURCE LINES 141-145

Note that observations are usually conducted in Wobble mode, in which
the source is not in the center of the camera. This allows to have a
symmetrical sky position from which background can be estimated.


.. GENERATED FROM PYTHON SOURCE LINES 145-164

.. code-block:: python3


    # Define the source model: A combination of spectral and temporal model

    gti_t0 = Time("2020-03-01")
    spectral_model = PowerLawSpectralModel(
        index=3, amplitude="1e-11 cm-2 s-1 TeV-1", reference="1 TeV"
    )
    temporal_model = ExpDecayTemporalModel(t0="6 h", t_ref=gti_t0.mjd * u.d)

    model_simu = SkyModel(
        spectral_model=spectral_model,
        temporal_model=temporal_model,
        name="model-simu",
    )

    # Look at the model
    display(model_simu.parameters.to_table())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/quantity.py:673: RuntimeWarning: overflow encountered in exp
      result = super().__array_ufunc__(function, method, *arrays, **kwargs)
      type      name     value         unit      ... max frozen is_norm link
    -------- --------- ---------- -------------- ... --- ------ ------- ----
    spectral     index 3.0000e+00                ... nan  False   False     
    spectral amplitude 1.0000e-11 cm-2 s-1 TeV-1 ... nan  False    True     
    spectral reference 1.0000e+00            TeV ... nan   True   False     
    temporal        t0 6.0000e+00              h ... nan  False   False     
    temporal     t_ref 5.8909e+04              d ... nan   True   False     




.. GENERATED FROM PYTHON SOURCE LINES 165-168

Now, define the start and observation livetime wrt to the reference
time, `gti_t0`


.. GENERATED FROM PYTHON SOURCE LINES 168-175

.. code-block:: python3


    n_obs = 10

    tstart = gti_t0 + [1, 2, 3, 5, 8, 10, 20, 22, 23, 24] * u.h
    lvtm = [55, 25, 26, 40, 40, 50, 40, 52, 43, 47] * u.min









.. GENERATED FROM PYTHON SOURCE LINES 176-178

Now perform the simulations


.. GENERATED FROM PYTHON SOURCE LINES 178-205

.. code-block:: python3


    datasets = Datasets()

    empty = SpectrumDataset.create(
        geom=geom, energy_axis_true=energy_axis_true, name="empty"
    )

    maker = SpectrumDatasetMaker(selection=["exposure", "background", "edisp"])


    for idx in range(n_obs):
        obs = Observation.create(
            pointing=pointing,
            livetime=lvtm[idx],
            tstart=tstart[idx],
            irfs=irfs,
            reference_time=gti_t0,
            obs_id=idx,
            location=observatory_locations["cta_south"],
        )
        empty_i = empty.copy(name=f"dataset-{idx}")
        dataset = maker.run(empty_i, obs)
        dataset.models = model_simu
        dataset.fake()
        datasets.append(dataset)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(
    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/gammapy/data/observations.py:226: GammapyDeprecationWarning: Pointing will be required to be provided as FixedPointingInfo
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 206-209

The reduced datasets have been successfully simulated. Let’s take a
quick look into our datasets.


.. GENERATED FROM PYTHON SOURCE LINES 209-213

.. code-block:: python3


    display(datasets.info_table())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       name   counts       excess       ... n_fit_bins stat_type       stat_sum     
                                        ...                                         
    --------- ------ ------------------ ... ---------- --------- -------------------
    dataset-0    803  782.6812133789062 ...          9      cash                 nan
    dataset-1    350  340.7641959176923 ...          9      cash -2161.8552785430643
    dataset-2    282     272.3947637544 ...          9      cash -1723.9557662754253
    dataset-3    293 278.22271346830775 ...          9      cash -1787.6250246498994
    dataset-4    201 186.22271346830775 ...          9      cash -1046.1576019582997
    dataset-5    185  166.5283918353847 ...          9      cash  -913.6321665679493
    dataset-6     49  34.22271346830774 ...          9      cash -114.37338928016305
    dataset-7     38  18.78952750880007 ...          9      cash  -68.66329529914191
    dataset-8     38  22.11441697843082 ...          9      cash  -69.58128476113401
    dataset-9     31 13.636688325261602 ...          9      cash  -42.96195378953245




.. GENERATED FROM PYTHON SOURCE LINES 214-223

Extract the lightcurve
----------------------

This section uses standard light curve estimation tools for a 1D
extraction. Only a spectral model needs to be defined in this case.
Since the estimator returns the integrated flux separately for each time
bin, the temporal model need not be accounted for at this stage. We
extract the lightcurve in 3 energy bins.


.. GENERATED FROM PYTHON SOURCE LINES 223-233

.. code-block:: python3


    # Define the model:
    spectral_model = PowerLawSpectralModel(
        index=3, amplitude="1e-11 cm-2 s-1 TeV-1", reference="1 TeV"
    )
    model_fit = SkyModel(spectral_model=spectral_model, name="model-fit")

    # Attach model to all datasets
    datasets.models = model_fit








.. GENERATED FROM PYTHON SOURCE LINES 234-249

.. code-block:: python3

    lc_maker_1d = LightCurveEstimator(
        energy_edges=[0.3, 0.6, 1.0, 10] * u.TeV,
        source="model-fit",
        selection_optional=["ul"],
    )
    lc_1d = lc_maker_1d.run(datasets)

    fig, ax = plt.subplots(
        figsize=(8, 6),
        gridspec_kw={"left": 0.16, "bottom": 0.2, "top": 0.98, "right": 0.98},
    )
    lc_1d.plot(ax=ax, marker="o", axis_name="time", sed_type="flux")
    plt.show()





.. image-sg:: /tutorials/analysis-time/images/sphx_glr_light_curve_simulation_001.png
   :alt: light curve simulation
   :srcset: /tutorials/analysis-time/images/sphx_glr_light_curve_simulation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 250-261

Fitting temporal models
-----------------------

We have the reconstructed lightcurve at this point. Now we want to fit a
profile to the obtained light curves, using a joint fitting across the
different datasets, while simultaneously minimising across the temporal
model parameters as well. The temporal models can be applied

-  directly on the obtained lightcurve
-  on the simulated datasets


.. GENERATED FROM PYTHON SOURCE LINES 264-270

Fitting the obtained light curve
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The fitting will proceed through a joint fit of the flux points. First,
we need to obtain a set of `FluxPointDatasets`, one for each time bin


.. GENERATED FROM PYTHON SOURCE LINES 270-279

.. code-block:: python3


    # Create the datasets by iterating over the returned lightcurve
    datasets = Datasets()

    for idx, fp in enumerate(lc_1d.iter_by_axis(axis_name="time")):
        dataset = FluxPointsDataset(data=fp, name=f"time-bin-{idx}")
        datasets.append(dataset)









.. GENERATED FROM PYTHON SOURCE LINES 280-284

We will fit the amplitude, spectral index and the decay time scale. Note
that `t_ref` should be fixed by default for the
`ExpDecayTemporalModel`.


.. GENERATED FROM PYTHON SOURCE LINES 284-299

.. code-block:: python3


    # Define the model:
    spectral_model1 = PowerLawSpectralModel(
        index=2.0, amplitude="1e-12 cm-2 s-1 TeV-1", reference="1 TeV"
    )
    temporal_model1 = ExpDecayTemporalModel(t0="10 h", t_ref=gti_t0.mjd * u.d)

    model = SkyModel(
        spectral_model=spectral_model1,
        temporal_model=temporal_model1,
        name="model-test",
    )

    datasets.models = model





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/quantity.py:673: RuntimeWarning: overflow encountered in exp
      result = super().__array_ufunc__(function, method, *arrays, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 300-301

Do a joint fit

.. GENERATED FROM PYTHON SOURCE LINES 301-305

.. code-block:: python3

    fit = Fit()
    result = fit.run(datasets=datasets)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/quantity.py:673: RuntimeWarning: overflow encountered in exp
      result = super().__array_ufunc__(function, method, *arrays, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 306-309

Now let’s plot model and data. We plot only the normalisation of the
temporal model in relative units for one particular energy range


.. GENERATED FROM PYTHON SOURCE LINES 309-325

.. code-block:: python3


    fig, ax = plt.subplots(
        figsize=(8, 6),
        gridspec_kw={"left": 0.16, "bottom": 0.2, "top": 0.98, "right": 0.98},
    )
    lc_1TeV_10TeV = lc_1d.slice_by_idx({"energy": slice(2, 3)})
    lc_1TeV_10TeV.plot(ax=ax, sed_type="norm", axis_name="time")

    time_range = lc_1TeV_10TeV.geom.axes["time"].time_bounds
    temporal_model1.plot(ax=ax, time_range=time_range, label="Best fit model")

    ax.set_yscale("linear")
    ax.legend()
    plt.show()





.. image-sg:: /tutorials/analysis-time/images/sphx_glr_light_curve_simulation_002.png
   :alt: light curve simulation
   :srcset: /tutorials/analysis-time/images/sphx_glr_light_curve_simulation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 326-336

Fit the datasets
~~~~~~~~~~~~~~~~

Here, we apply the models directly to the simulated datasets.

For modelling and fitting more complex flares, you should attach the
relevant model to each group of `datasets`. The parameters of a model
in a given group of dataset will be tied. For more details on joint
fitting in Gammapy, see :doc:`/tutorials/analysis-3d/analysis_3d`


.. GENERATED FROM PYTHON SOURCE LINES 336-353

.. code-block:: python3


    # Define the model:
    spectral_model2 = PowerLawSpectralModel(
        index=2.0, amplitude="1e-12 cm-2 s-1 TeV-1", reference="1 TeV"
    )
    temporal_model2 = ExpDecayTemporalModel(t0="10 h", t_ref=gti_t0.mjd * u.d)

    model2 = SkyModel(
        spectral_model=spectral_model2,
        temporal_model=temporal_model2,
        name="model-test2",
    )

    display(model2.parameters.to_table())

    datasets.models = model2





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/quantity.py:673: RuntimeWarning: overflow encountered in exp
      result = super().__array_ufunc__(function, method, *arrays, **kwargs)
      type      name     value         unit      ... max frozen is_norm link
    -------- --------- ---------- -------------- ... --- ------ ------- ----
    spectral     index 2.0000e+00                ... nan  False   False     
    spectral amplitude 1.0000e-12 cm-2 s-1 TeV-1 ... nan  False    True     
    spectral reference 1.0000e+00            TeV ... nan   True   False     
    temporal        t0 1.0000e+01              h ... nan  False   False     
    temporal     t_ref 5.8909e+04              d ... nan   True   False     




.. GENERATED FROM PYTHON SOURCE LINES 354-355

Do a joint fit

.. GENERATED FROM PYTHON SOURCE LINES 355-360

.. code-block:: python3

    fit = Fit()
    result = fit.run(datasets=datasets)

    display(result.parameters.to_table())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/gammapy-docs/gammapy-docs/gammapy/.tox/build_docs/lib/python3.9/site-packages/astropy/units/quantity.py:673: RuntimeWarning: overflow encountered in exp
      result = super().__array_ufunc__(function, method, *arrays, **kwargs)
      type      name     value         unit      ... max frozen is_norm link
    -------- --------- ---------- -------------- ... --- ------ ------- ----
    spectral     index 2.9900e+00                ... nan  False   False     
    spectral amplitude 9.5876e-12 cm-2 s-1 TeV-1 ... nan  False    True     
    spectral reference 1.0000e+00            TeV ... nan   True   False     
    temporal        t0 6.1241e+00              h ... nan  False   False     
    temporal     t_ref 5.8909e+04              d ... nan   True   False     




.. GENERATED FROM PYTHON SOURCE LINES 361-364

We see that the fitted parameters are consistent between fitting flux
points and datasets, and match well with the simulated ones


.. GENERATED FROM PYTHON SOURCE LINES 367-376

Exercises
---------

1. Re-do the analysis with `MapDataset` instead of `SpectralDataset`
2. Model the flare of PKS 2155-304 which you obtained using
   the :doc:`/tutorials/analysis-time/light_curve_flare` tutorial.
   Use a combination of a Gaussian and Exponential flare profiles.
3. Do a joint fitting of the datasets.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  30.666 seconds)


.. _sphx_glr_download_tutorials_analysis-time_light_curve_simulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/v1.1rc1?urlpath=lab/tree/notebooks/1.1rc1/tutorials/analysis-time/light_curve_simulation.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: light_curve_simulation.py <light_curve_simulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: light_curve_simulation.ipynb <light_curve_simulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
