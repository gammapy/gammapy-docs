
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/starting/overview.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_starting_overview.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_starting_overview.py:


Data structures
===============

Introduction to basic data structures handling.

Introduction
------------

This is a getting started tutorial for Gammapy.

In this tutorial we will use the `Second Fermi-LAT Catalog of
High-Energy Sources (3FHL)
catalog <http://fermi.gsfc.nasa.gov/ssc/data/access/lat/3FHL/>`__,
corresponding event list and images to learn how to work with some of
the central Gammapy data structures.

We will cover the following topics:

-  **Sky maps**

   -  We will learn how to handle image based data with gammapy using a
      Fermi-LAT 3FHL example image. We will work with the following
      classes:

      -  ``~gammapy.maps.WcsNDMap``
      -  `astropy.coordinates.SkyCoord <http://astropy.readthedocs.io/en/latest/coordinates/index.html>`__ 
      -  `numpy.ndarray <https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html>`__

-  **Event lists**

   -  We will learn how to handle event lists with Gammapy. Important
      for this are the following classes:

      -  ``~gammapy.data.EventList``
      -  `astropy.table.Table <http://docs.astropy.org/en/stable/api/astropy.table.Table.html>`__

-  **Source catalogs**

   -  We will show how to load source catalogs with Gammapy and explore
      the data using the following classes:

      -  ``~gammapy.catalog.SourceCatalog``, specifically
         ``~gammapy.catalog.SourceCatalog3FHL``
      -  `astropy.table.Table <http://docs.astropy.org/en/stable/api/astropy.table.Table.html>`__

-  **Spectral models and flux points**

   -  We will pick an example source and show how to plot its spectral
      model and flux points. For this we will use the following classes:

      -  ``~gammapy.modeling.models.SpectralModel``, specifically the
         ``~gammapy.modeling.models.PowerLaw2SpectralModel``
      -  ``~gammapy.estimators.FluxPoints``
      -  `astropy.table.Table <http://docs.astropy.org/en/stable/api/astropy.table.Table.html>`__

.. GENERATED FROM PYTHON SOURCE LINES 61-69

Setup
-----

**Important**: to run this tutorial the environment variable
``GAMMAPY_DATA`` must be defined and point to the directory on your
machine where the datasets needed are placed. To check whether your
setup is correct you can execute the following cell:


.. GENERATED FROM PYTHON SOURCE LINES 69-74

.. code-block:: python3



    import astropy.units as u
    from astropy.coordinates import SkyCoord








.. GENERATED FROM PYTHON SOURCE LINES 75-77

Check setup
-----------

.. GENERATED FROM PYTHON SOURCE LINES 77-85

.. code-block:: python3

    from gammapy.utils.check import check_tutorials_setup

    # %matplotlib inline


    check_tutorials_setup()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System:

            python_executable      : /home/runner/micromamba-root/envs/gammapy-dev/bin/python 
            python_version         : 3.8.13     
            machine                : x86_64     
            system                 : Linux      


    Gammapy package:

            version                : 0.20.2.dev570+gd0ef0e279 
            path                   : /home/runner/work/gammapy-docs/gammapy-docs/gammapy/gammapy 


    Other packages:

            numpy                  : 1.22.4     
            scipy                  : 1.9.1      
            astropy                : 5.1        
            regions                : 0.6        
            click                  : 8.1.3      
            yaml                   : 6.0        
            IPython                : 8.5.0      
            jupyterlab             : 3.4.7      
            matplotlib             : 3.6.0      
            pandas                 : 1.5.0      
            healpy                 : 1.16.1     
            iminuit                : 2.17.0     
            sherpa                 : 4.14.1     
            naima                  : 0.10.0     
            emcee                  : 3.1.3      
            corner                 : 2.2.1      


    Gammapy environment variables:

            GAMMAPY_DATA           : /home/runner/work/gammapy-docs/gammapy-docs/gammapy-datasets/dev 





.. GENERATED FROM PYTHON SOURCE LINES 86-100

Maps
----

The ``~gammapy.maps`` package contains classes to work with sky images
and cubes.

In this section, we will use a simple 2D sky image and will learn how
to:

-  Read sky images from FITS files
-  Smooth images
-  Plot images
-  Cutout parts from images


.. GENERATED FROM PYTHON SOURCE LINES 100-106

.. code-block:: python3


    from gammapy.maps import Map

    gc_3fhl = Map.read("$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-counts.fits.gz")









.. GENERATED FROM PYTHON SOURCE LINES 107-109

The image is a ``~gammapy.maps.WcsNDMap`` object:


.. GENERATED FROM PYTHON SOURCE LINES 109-113

.. code-block:: python3


    gc_3fhl









.. GENERATED FROM PYTHON SOURCE LINES 114-119

The shape of the image is 400 x 200 pixel and it is defined using a
cartesian projection in galactic coordinates.

The ``geom`` attribute is a ``~gammapy.maps.WcsGeom`` object:


.. GENERATED FROM PYTHON SOURCE LINES 119-123

.. code-block:: python3


    gc_3fhl.geom









.. GENERATED FROM PYTHON SOURCE LINES 124-126

Let’s take a closer look a the ``.data`` attribute:


.. GENERATED FROM PYTHON SOURCE LINES 126-130

.. code-block:: python3


    gc_3fhl.data









.. GENERATED FROM PYTHON SOURCE LINES 131-134

That looks familiar! It just an *ordinary* 2 dimensional numpy array,
which means you can apply any known numpy method to it:


.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: python3


    print(f"Total number of counts in the image: {gc_3fhl.data.sum():.0f}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total number of counts in the image: 32684




.. GENERATED FROM PYTHON SOURCE LINES 139-147

To show the image on the screen we can use the ``plot`` method. It
basically calls
`plt.imshow <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html>`__,
passing the ``gc_3fhl.data`` attribute but in addition handles axis with
world coordinates using
`astropy.visualization.wcsaxes <https://docs.astropy.org/en/stable/visualization/wcsaxes/>`__
and defines some defaults for nicer plots (e.g. the colormap ‘afmhot’):


.. GENERATED FROM PYTHON SOURCE LINES 147-151

.. code-block:: python3


    gc_3fhl.plot(stretch="sqrt")





.. image-sg:: /tutorials/starting/images/sphx_glr_overview_001.png
   :alt: overview
   :srcset: /tutorials/starting/images/sphx_glr_overview_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-155

To make the structures in the image more visible we will smooth the data
using a Gaussian kernel.


.. GENERATED FROM PYTHON SOURCE LINES 155-161

.. code-block:: python3


    gc_3fhl_smoothed = gc_3fhl.smooth(kernel="gauss", width=0.2 * u.deg)

    gc_3fhl_smoothed.plot(stretch="sqrt")





.. image-sg:: /tutorials/starting/images/sphx_glr_overview_002.png
   :alt: overview
   :srcset: /tutorials/starting/images/sphx_glr_overview_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 162-168

The smoothed plot already looks much nicer, but still the image is
rather large. As we are mostly interested in the inner part of the
image, we will cut out a quadratic region of the size 9 deg x 9 deg
around Vela. Therefore we use ``~gammapy.maps.Map.cutout`` to make a
cutout map:


.. GENERATED FROM PYTHON SOURCE LINES 168-175

.. code-block:: python3


    # define center and size of the cutout region
    center = SkyCoord(0, 0, unit="deg", frame="galactic")
    gc_3fhl_cutout = gc_3fhl_smoothed.cutout(center, 9 * u.deg)
    gc_3fhl_cutout.plot(stretch="sqrt")





.. image-sg:: /tutorials/starting/images/sphx_glr_overview_003.png
   :alt: overview
   :srcset: /tutorials/starting/images/sphx_glr_overview_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 176-186

For a more detailed introduction to ``~gammapy.maps``, take a look a the
`maps.ipynb <../api/maps.ipynb>`__ notebook.

Exercises
~~~~~~~~~

-  Add a marker and circle at the position of ``Sag A*`` (you can find
   examples in
   `astropy.visualization.wcsaxes <https://docs.astropy.org/en/stable/visualization/wcsaxes/>`__).


.. GENERATED FROM PYTHON SOURCE LINES 189-205

Event lists
-----------

Almost any high level gamma-ray data analysis starts with the raw
measured counts data, which is stored in event lists. In Gammapy event
lists are represented by the ``~gammapy.data.EventList`` class.

In this section we will learn how to:

-  Read event lists from FITS files
-  Access and work with the ``EventList`` attributes such as ``.table``
   and ``.energy``
-  Filter events lists using convenience methods

Let’s start with the import from the ``~gammapy.data`` submodule:


.. GENERATED FROM PYTHON SOURCE LINES 205-208

.. code-block:: python3


    from gammapy.data import EventList








.. GENERATED FROM PYTHON SOURCE LINES 209-212

Very similar to the sky map class an event list can be created, by
passing a filename to the ``~gammapy.data.EventList.read()`` method:


.. GENERATED FROM PYTHON SOURCE LINES 212-216

.. code-block:: python3


    events_3fhl = EventList.read("$GAMMAPY_DATA/fermi-3fhl-gc/fermi-3fhl-gc-events.fits.gz")









.. GENERATED FROM PYTHON SOURCE LINES 217-221

This time the actual data is stored as an
`astropy.table.Table <http://docs.astropy.org/en/stable/api/astropy.table.Table.html>`__
object. It can be accessed with ``.table`` attribute:


.. GENERATED FROM PYTHON SOURCE LINES 221-225

.. code-block:: python3


    events_3fhl.table









.. GENERATED FROM PYTHON SOURCE LINES 226-229

You can do *len* over event_3fhl.table to find the total number of
events.


.. GENERATED FROM PYTHON SOURCE LINES 229-233

.. code-block:: python3


    len(events_3fhl.table)









.. GENERATED FROM PYTHON SOURCE LINES 234-236

And we can access any other attribute of the ``Table`` object as well:


.. GENERATED FROM PYTHON SOURCE LINES 236-240

.. code-block:: python3


    events_3fhl.table.colnames









.. GENERATED FROM PYTHON SOURCE LINES 241-250

For convenience we can access the most important event parameters as
properties on the ``EventList`` objects. The attributes will return
corresponding Astropy objects to represent the data, such as
`astropy.units.Quantity <http://docs.astropy.org/en/stable/api/astropy.units.Quantity.html>`__,
`astropy.coordinates.SkyCoord <http://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html>`__
or
`astropy.time.Time <http://docs.astropy.org/en/stable/api/astropy.time.Time.html#astropy.time.Time>`__
objects:


.. GENERATED FROM PYTHON SOURCE LINES 250-259

.. code-block:: python3


    events_3fhl.energy.to("GeV")

    events_3fhl.galactic
    # events_3fhl.radec

    events_3fhl.time









.. GENERATED FROM PYTHON SOURCE LINES 260-264

In addition ``EventList`` provides convenience methods to filter the
event lists. One possible use case is to find the highest energy event
within a radius of 0.5 deg around the vela position:


.. GENERATED FROM PYTHON SOURCE LINES 264-278

.. code-block:: python3


    # select all events within a radius of 0.5 deg around center
    from gammapy.utils.regions import SphericalCircleSkyRegion

    region = SphericalCircleSkyRegion(center, radius=0.5 * u.deg)
    events_gc_3fhl = events_3fhl.select_region(region)

    # sort events by energy
    events_gc_3fhl.table.sort("ENERGY")

    # and show highest energy photon
    events_gc_3fhl.energy[-1].to("GeV")









.. GENERATED FROM PYTHON SOURCE LINES 279-285

Exercises
~~~~~~~~~

-  Make a counts energy spectrum for the galactic center region, within
   a radius of 10 deg.


.. GENERATED FROM PYTHON SOURCE LINES 288-303

Source catalogs
---------------

Gammapy provides a convenient interface to access and work with catalog
based data.

In this section we will learn how to:

-  Load builtins catalogs from ``~gammapy.catalog``
-  Sort and index the underlying Astropy tables
-  Access data from individual sources

Let’s start with importing the 3FHL catalog object from the
``~gammapy.catalog`` submodule:


.. GENERATED FROM PYTHON SOURCE LINES 303-306

.. code-block:: python3


    from gammapy.catalog import SourceCatalog3FHL








.. GENERATED FROM PYTHON SOURCE LINES 307-310

First we initialize the Fermi-LAT 3FHL catalog and directly take a look
at the ``.table`` attribute:


.. GENERATED FROM PYTHON SOURCE LINES 310-315

.. code-block:: python3


    fermi_3fhl = SourceCatalog3FHL()
    fermi_3fhl.table









.. GENERATED FROM PYTHON SOURCE LINES 316-322

This looks very familiar again. The data is just stored as an
`astropy.table.Table <http://docs.astropy.org/en/stable/api/astropy.table.Table.html#astropy.table.Table>`__
object. We have all the methods and attributes of the ``Table`` object
available. E.g. we can sort the underlying table by ``Signif_Avg`` to
find the top 5 most significant sources:


.. GENERATED FROM PYTHON SOURCE LINES 322-333

.. code-block:: python3


    # sort table by significance
    fermi_3fhl.table.sort("Signif_Avg")

    # invert the order to find the highest values and take the top 5
    top_five_TS_3fhl = fermi_3fhl.table[::-1][:5]

    # print the top five significant sources with association and source class
    top_five_TS_3fhl[["Source_Name", "ASSOC1", "ASSOC2", "CLASS", "Signif_Avg"]]









.. GENERATED FROM PYTHON SOURCE LINES 334-338

If you are interested in the data of an individual source you can access
the information from catalog using the name of the source or any alias
source name that is defined in the catalog:


.. GENERATED FROM PYTHON SOURCE LINES 338-346

.. code-block:: python3


    mkn_421_3fhl = fermi_3fhl["3FHL J1104.4+3812"]

    # or use any alias source name that is defined in the catalog
    mkn_421_3fhl = fermi_3fhl["Mkn 421"]
    print(mkn_421_3fhl.data["Signif_Avg"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    144.40611




.. GENERATED FROM PYTHON SOURCE LINES 347-361

Exercises
~~~~~~~~~

-  Try to load the Fermi-LAT 2FHL catalog and check the total number of
   sources it contains.
-  Select all the sources from the 2FHL catalog which are contained in
   the Galactic Center region. The methods
   ``~gammapy.maps.WcsGeom.contains()`` and
   ``~gammapy.catalog.SourceCatalog.positions`` might be helpful for
   this. Add markers for all these sources and try to add labels with
   the source names.
-  Try to find the source class of the object at position ra=68.6803,
   dec=9.3331


.. GENERATED FROM PYTHON SOURCE LINES 364-377

Spectral models and flux points
-------------------------------

In the previous section we learned how access basic data from individual
sources in the catalog. Now we will go one step further and explore the
full spectral information of sources. We will learn how to:

-  Plot spectral models
-  Compute integral and energy fluxes
-  Read and plot flux points

As a first example we will start with the Crab Nebula:


.. GENERATED FROM PYTHON SOURCE LINES 377-383

.. code-block:: python3


    crab_3fhl = fermi_3fhl["Crab Nebula"]
    crab_3fhl_spec = crab_3fhl.spectral_model()
    print(crab_3fhl_spec)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PowerLawSpectralModel

      type      name     value         unit      ... max frozen is_norm link
    -------- --------- ---------- -------------- ... --- ------ ------- ----
    spectral     index 2.2202e+00                ... nan  False   False     
    spectral amplitude 1.7132e-10 cm-2 GeV-1 s-1 ... nan  False    True     
    spectral reference 2.2726e+01            GeV ... nan   True   False     




.. GENERATED FROM PYTHON SOURCE LINES 384-391

The ``crab_3fhl_spec`` is an instance of the
``~gammapy.modeling.models.PowerLaw2SpectralModel`` model, with the
parameter values and errors taken from the 3FHL catalog.

Let’s plot the spectral model in the energy range between 10 GeV and
2000 GeV:


.. GENERATED FROM PYTHON SOURCE LINES 391-395

.. code-block:: python3


    ax_crab_3fhl = crab_3fhl_spec.plot(energy_bounds=[10, 2000] * u.GeV, energy_power=0)





.. image-sg:: /tutorials/starting/images/sphx_glr_overview_004.png
   :alt: overview
   :srcset: /tutorials/starting/images/sphx_glr_overview_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 396-402

We assign the return axes object to variable called ``ax_crab_3fhl``,
because we will re-use it later to plot the flux points on top.

To compute the differential flux at 100 GeV we can simply call the model
like normal Python function and convert to the desired units:


.. GENERATED FROM PYTHON SOURCE LINES 402-406

.. code-block:: python3


    crab_3fhl_spec(100 * u.GeV).to("cm-2 s-1 GeV-1")









.. GENERATED FROM PYTHON SOURCE LINES 407-410

Next we can compute the integral flux of the Crab between 10 GeV and
2000 GeV:


.. GENERATED FROM PYTHON SOURCE LINES 410-414

.. code-block:: python3


    crab_3fhl_spec.integral(energy_min=10 * u.GeV, energy_max=2000 * u.GeV).to("cm-2 s-1")









.. GENERATED FROM PYTHON SOURCE LINES 415-418

We can easily convince ourself, that it corresponds to the value given
in the Fermi-LAT 3FHL catalog:


.. GENERATED FROM PYTHON SOURCE LINES 418-422

.. code-block:: python3


    crab_3fhl.data["Flux"]









.. GENERATED FROM PYTHON SOURCE LINES 423-425

In addition we can compute the energy flux between 10 GeV and 2000 GeV:


.. GENERATED FROM PYTHON SOURCE LINES 425-431

.. code-block:: python3


    crab_3fhl_spec.energy_flux(energy_min=10 * u.GeV, energy_max=2000 * u.GeV).to(
        "erg cm-2 s-1"
    )









.. GENERATED FROM PYTHON SOURCE LINES 432-434

Next we will access the flux points data of the Crab:


.. GENERATED FROM PYTHON SOURCE LINES 434-438

.. code-block:: python3


    print(crab_3fhl.flux_points)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    FluxPoints
    ----------

      geom                   : RegionGeom
      axes                   : ['lon', 'lat', 'energy']
      shape                  : (1, 1, 5)
      quantities             : ['norm', 'norm_errp', 'norm_errn', 'norm_ul', 'sqrt_ts', 'is_ul']
      ref. model             : pl
      n_sigma                : 1
      n_sigma_ul             : 2
      sqrt_ts_threshold_ul   : 1
      sed type init          : flux





.. GENERATED FROM PYTHON SOURCE LINES 439-446

If you want to learn more about the different flux point formats you can
read the specification
`here <https://gamma-astro-data-formats.readthedocs.io/en/latest/spectra/flux_points/index.html>`__.

No we can check again the underlying astropy data structure by accessing
the ``.table`` attribute:


.. GENERATED FROM PYTHON SOURCE LINES 446-450

.. code-block:: python3


    crab_3fhl.flux_points.to_table(sed_type="dnde", formatted=True)









.. GENERATED FROM PYTHON SOURCE LINES 451-455

Finally let’s combine spectral model and flux points in a single plot
and scale with ``energy_power=2`` to obtain the spectral energy
distribution:


.. GENERATED FROM PYTHON SOURCE LINES 455-460

.. code-block:: python3


    ax = crab_3fhl_spec.plot(energy_bounds=[10, 2000] * u.GeV, energy_power=2)
    crab_3fhl.flux_points.plot(ax=ax, sed_type="dnde", energy_power=2)





.. image-sg:: /tutorials/starting/images/sphx_glr_overview_005.png
   :alt: overview
   :srcset: /tutorials/starting/images/sphx_glr_overview_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 461-470

Exercises
~~~~~~~~~

-  Plot the spectral model and flux points for PKS 2155-304 for the 3FGL
   and 2FHL catalogs. Try to plot the error of the model (aka
   “Butterfly”) as well. Note this requires the `uncertainties
   package <https://pythonhosted.org/uncertainties/>`__ to be installed
   on your machine.


.. GENERATED FROM PYTHON SOURCE LINES 473-487

What next?
----------

This was a quick introduction to some of the high level classes in
Astropy and Gammapy.

-  To learn more about those classes, go to the API docs (links are in
   the introduction at the top).
-  To learn more about other parts of Gammapy (e.g. Fermi-LAT and TeV
   data analysis), check out the other tutorial notebooks.
-  To see what’s available in Gammapy, browse the Gammapy docs or use
   the full-text search.
-  If you have any questions, ask on the mailing list.



.. _sphx_glr_download_tutorials_starting_overview.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/notebooks/dev/tutorials/starting/overview.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: overview.py <overview.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: overview.ipynb <overview.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
