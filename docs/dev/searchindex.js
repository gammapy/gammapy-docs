Search.setIndex({"docnames": ["api-reference/analysis", "api-reference/astro", "api-reference/catalog", "api-reference/data", "api-reference/datasets", "api-reference/estimators", "api-reference/index", "api-reference/irf", "api-reference/makers", "api-reference/maps", "api-reference/modeling", "api-reference/scripts", "api-reference/stats", "api-reference/utils", "api-reference/visualization", "api/gammapy.analysis.Analysis", "api/gammapy.analysis.AnalysisConfig", "api/gammapy.astro.darkmatter.BurkertProfile", "api/gammapy.astro.darkmatter.DMProfile", "api/gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel", "api/gammapy.astro.darkmatter.DarkMatterDecaySpectralModel", "api/gammapy.astro.darkmatter.EinastoProfile", "api/gammapy.astro.darkmatter.IsothermalProfile", "api/gammapy.astro.darkmatter.JFactory", "api/gammapy.astro.darkmatter.MooreProfile", "api/gammapy.astro.darkmatter.NFWProfile", "api/gammapy.astro.darkmatter.PrimaryFlux", "api/gammapy.astro.darkmatter.ZhaoProfile", "api/gammapy.astro.population.CaseBattacharya1998", "api/gammapy.astro.population.Exponential", "api/gammapy.astro.population.FaucherKaspi2006", "api/gammapy.astro.population.FaucherKaspi2006VelocityBimodal", "api/gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian", "api/gammapy.astro.population.FaucherSpiral", "api/gammapy.astro.population.LogSpiral", "api/gammapy.astro.population.Lorimer2006", "api/gammapy.astro.population.Paczynski1990", "api/gammapy.astro.population.Paczynski1990Velocity", "api/gammapy.astro.population.ValleeSpiral", "api/gammapy.astro.population.YusifovKucuk2004", "api/gammapy.astro.population.YusifovKucuk2004B", "api/gammapy.astro.population.add_observed_parameters", "api/gammapy.astro.population.add_pulsar_parameters", "api/gammapy.astro.population.add_pwn_parameters", "api/gammapy.astro.population.add_snr_parameters", "api/gammapy.astro.population.make_base_catalog_galactic", "api/gammapy.astro.population.make_catalog_random_positions_cube", "api/gammapy.astro.population.make_catalog_random_positions_sphere", "api/gammapy.astro.population.radial_distributions", "api/gammapy.astro.population.velocity_distributions", "api/gammapy.astro.source.PWN", "api/gammapy.astro.source.Pulsar", "api/gammapy.astro.source.SNR", "api/gammapy.astro.source.SNRTrueloveMcKee", "api/gammapy.astro.source.SimplePulsar", "api/gammapy.catalog.CATALOG_REGISTRY", "api/gammapy.catalog.SourceCatalog", "api/gammapy.catalog.SourceCatalog1LHAASO", "api/gammapy.catalog.SourceCatalog2FHL", "api/gammapy.catalog.SourceCatalog2HWC", "api/gammapy.catalog.SourceCatalog3FGL", "api/gammapy.catalog.SourceCatalog3FHL", "api/gammapy.catalog.SourceCatalog3HWC", "api/gammapy.catalog.SourceCatalog4FGL", "api/gammapy.catalog.SourceCatalogGammaCat", "api/gammapy.catalog.SourceCatalogHGPS", "api/gammapy.catalog.SourceCatalogLargeScaleHGPS", "api/gammapy.catalog.SourceCatalogObject", "api/gammapy.catalog.SourceCatalogObject1LHAASO", "api/gammapy.catalog.SourceCatalogObject2FHL", "api/gammapy.catalog.SourceCatalogObject2HWC", "api/gammapy.catalog.SourceCatalogObject3FGL", "api/gammapy.catalog.SourceCatalogObject3FHL", "api/gammapy.catalog.SourceCatalogObject3HWC", "api/gammapy.catalog.SourceCatalogObject4FGL", "api/gammapy.catalog.SourceCatalogObjectGammaCat", "api/gammapy.catalog.SourceCatalogObjectHGPS", "api/gammapy.catalog.SourceCatalogObjectHGPSComponent", "api/gammapy.data.DataStore", "api/gammapy.data.EventList", "api/gammapy.data.EventListMetaData", "api/gammapy.data.FixedPointingInfo", "api/gammapy.data.GTI", "api/gammapy.data.HDUIndexTable", "api/gammapy.data.Observation", "api/gammapy.data.ObservationFilter", "api/gammapy.data.ObservationTable", "api/gammapy.data.Observations", "api/gammapy.data.ObservationsEventsSampler", "api/gammapy.data.PointingInfo", "api/gammapy.data.PointingMode", "api/gammapy.data.get_irfs_features", "api/gammapy.data.observatory_locations", "api/gammapy.datasets.DATASET_REGISTRY", "api/gammapy.datasets.Dataset", "api/gammapy.datasets.Datasets", "api/gammapy.datasets.FluxPointsDataset", "api/gammapy.datasets.MapDataset", "api/gammapy.datasets.MapDatasetEventSampler", "api/gammapy.datasets.MapDatasetMetaData", "api/gammapy.datasets.MapDatasetOnOff", "api/gammapy.datasets.OGIPDatasetReader", "api/gammapy.datasets.OGIPDatasetWriter", "api/gammapy.datasets.ObservationEventSampler", "api/gammapy.datasets.SpectrumDataset", "api/gammapy.datasets.SpectrumDatasetOnOff", "api/gammapy.datasets.apply_edisp", "api/gammapy.datasets.create_map_dataset_from_observation", "api/gammapy.datasets.create_map_dataset_geoms", "api/gammapy.datasets.split_dataset", "api/gammapy.datasets.utils.apply_edisp", "api/gammapy.datasets.utils.split_dataset", "api/gammapy.estimators.ASmoothMapEstimator", "api/gammapy.estimators.ESTIMATOR_REGISTRY", "api/gammapy.estimators.EnergyDependentMorphologyEstimator", "api/gammapy.estimators.Estimator", "api/gammapy.estimators.ExcessMapEstimator", "api/gammapy.estimators.FluxMaps", "api/gammapy.estimators.FluxMetaData", "api/gammapy.estimators.FluxPoints", "api/gammapy.estimators.FluxPointsEstimator", "api/gammapy.estimators.FluxProfileEstimator", "api/gammapy.estimators.ImageProfile", "api/gammapy.estimators.ImageProfileEstimator", "api/gammapy.estimators.LightCurveEstimator", "api/gammapy.estimators.ParameterEstimator", "api/gammapy.estimators.SensitivityEstimator", "api/gammapy.estimators.TSMapEstimator", "api/gammapy.estimators.utils.compute_lightcurve_doublingtime", "api/gammapy.estimators.utils.compute_lightcurve_fpp", "api/gammapy.estimators.utils.compute_lightcurve_fvar", "api/gammapy.estimators.utils.estimate_exposure_reco_energy", "api/gammapy.estimators.utils.find_peaks", "api/gammapy.estimators.utils.find_peaks_in_flux_map", "api/gammapy.estimators.utils.get_rebinned_axis", "api/gammapy.estimators.utils.resample_energy_edges", "api/gammapy.irf.Background2D", "api/gammapy.irf.Background3D", "api/gammapy.irf.BackgroundIRF", "api/gammapy.irf.EDispKernel", "api/gammapy.irf.EDispKernelMap", "api/gammapy.irf.EDispMap", "api/gammapy.irf.EffectiveAreaTable2D", "api/gammapy.irf.EnergyDependentMultiGaussPSF", "api/gammapy.irf.EnergyDispersion2D", "api/gammapy.irf.FoVAlignment", "api/gammapy.irf.IRF", "api/gammapy.irf.IRFMap", "api/gammapy.irf.IRF_REGISTRY", "api/gammapy.irf.PSF3D", "api/gammapy.irf.PSFKernel", "api/gammapy.irf.PSFKing", "api/gammapy.irf.PSFMap", "api/gammapy.irf.ParametricPSF", "api/gammapy.irf.RadMax2D", "api/gammapy.irf.RecoPSFMap", "api/gammapy.irf.load_irf_dict_from_file", "api/gammapy.makers.AdaptiveRingBackgroundMaker", "api/gammapy.makers.DatasetsMaker", "api/gammapy.makers.FoVBackgroundMaker", "api/gammapy.makers.MAKER_REGISTRY", "api/gammapy.makers.Maker", "api/gammapy.makers.MapDatasetMaker", "api/gammapy.makers.PhaseBackgroundMaker", "api/gammapy.makers.ReflectedRegionsBackgroundMaker", "api/gammapy.makers.ReflectedRegionsFinder", "api/gammapy.makers.RegionsFinder", "api/gammapy.makers.RingBackgroundMaker", "api/gammapy.makers.SafeMaskMaker", "api/gammapy.makers.SpectrumDatasetMaker", "api/gammapy.makers.WobbleRegionsFinder", "api/gammapy.makers.utils.make_counts_rad_max", "api/gammapy.makers.utils.make_edisp_kernel_map", "api/gammapy.makers.utils.make_edisp_map", "api/gammapy.makers.utils.make_effective_livetime_map", "api/gammapy.makers.utils.make_map_background_irf", "api/gammapy.makers.utils.make_map_exposure_true_energy", "api/gammapy.makers.utils.make_observation_time_map", "api/gammapy.makers.utils.make_psf_map", "api/gammapy.makers.utils.make_theta_squared_table", "api/gammapy.maps.Geom", "api/gammapy.maps.HpxGeom", "api/gammapy.maps.HpxMap", "api/gammapy.maps.HpxNDMap", "api/gammapy.maps.LabelMapAxis", "api/gammapy.maps.Map", "api/gammapy.maps.MapAxes", "api/gammapy.maps.MapAxis", "api/gammapy.maps.MapCoord", "api/gammapy.maps.Maps", "api/gammapy.maps.RegionGeom", "api/gammapy.maps.RegionNDMap", "api/gammapy.maps.TimeMapAxis", "api/gammapy.maps.WcsGeom", "api/gammapy.maps.WcsMap", "api/gammapy.maps.WcsNDMap", "api/gammapy.maps.containment_radius", "api/gammapy.maps.containment_region", "api/gammapy.modeling.Covariance", "api/gammapy.modeling.Fit", "api/gammapy.modeling.Parameter", "api/gammapy.modeling.Parameters", "api/gammapy.modeling.PriorParameter", "api/gammapy.modeling.PriorParameters", "api/gammapy.modeling.models.BrokenPowerLawSpectralModel", "api/gammapy.modeling.models.CompoundSpectralModel", "api/gammapy.modeling.models.ConstantFluxSpatialModel", "api/gammapy.modeling.models.ConstantSpatialModel", "api/gammapy.modeling.models.ConstantSpectralModel", "api/gammapy.modeling.models.ConstantTemporalModel", "api/gammapy.modeling.models.DatasetModels", "api/gammapy.modeling.models.DiskSpatialModel", "api/gammapy.modeling.models.EBLAbsorptionNormSpectralModel", "api/gammapy.modeling.models.EBL_DATA_BUILTIN", "api/gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel", "api/gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel", "api/gammapy.modeling.models.ExpCutoffPowerLawSpectralModel", "api/gammapy.modeling.models.ExpDecayTemporalModel", "api/gammapy.modeling.models.FoVBackgroundModel", "api/gammapy.modeling.models.GaussianSpatialModel", "api/gammapy.modeling.models.GaussianSpectralModel", "api/gammapy.modeling.models.GaussianTemporalModel", "api/gammapy.modeling.models.GeneralizedGaussianSpatialModel", "api/gammapy.modeling.models.GeneralizedGaussianTemporalModel", "api/gammapy.modeling.models.LightCurveTemplateTemporalModel", "api/gammapy.modeling.models.LinearTemporalModel", "api/gammapy.modeling.models.LogParabolaNormSpectralModel", "api/gammapy.modeling.models.LogParabolaSpectralModel", "api/gammapy.modeling.models.MODEL_REGISTRY", "api/gammapy.modeling.models.MeyerCrabSpectralModel", "api/gammapy.modeling.models.Model", "api/gammapy.modeling.models.ModelBase", "api/gammapy.modeling.models.Models", "api/gammapy.modeling.models.NaimaSpectralModel", "api/gammapy.modeling.models.PiecewiseNormSpatialModel", "api/gammapy.modeling.models.PiecewiseNormSpectralModel", "api/gammapy.modeling.models.PointSpatialModel", "api/gammapy.modeling.models.PowerLaw2SpectralModel", "api/gammapy.modeling.models.PowerLawNormSpectralModel", "api/gammapy.modeling.models.PowerLawSpectralModel", "api/gammapy.modeling.models.PowerLawTemporalModel", "api/gammapy.modeling.models.SPATIAL_MODEL_REGISTRY", "api/gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY", "api/gammapy.modeling.models.ScaleSpectralModel", "api/gammapy.modeling.models.Shell2SpatialModel", "api/gammapy.modeling.models.ShellSpatialModel", "api/gammapy.modeling.models.SineTemporalModel", "api/gammapy.modeling.models.SkyModel", "api/gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel", "api/gammapy.modeling.models.SpatialModel", "api/gammapy.modeling.models.SpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel", "api/gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY", "api/gammapy.modeling.models.TemplateNDSpatialModel", "api/gammapy.modeling.models.TemplateNDSpectralModel", "api/gammapy.modeling.models.TemplateNPredModel", "api/gammapy.modeling.models.TemplatePhaseCurveTemporalModel", "api/gammapy.modeling.models.TemplateSpatialModel", "api/gammapy.modeling.models.TemplateSpectralModel", "api/gammapy.modeling.models.TemporalModel", "api/gammapy.modeling.models.create_cosmic_ray_spectral_model", "api/gammapy.modeling.models.create_crab_spectral_model", "api/gammapy.modeling.models.create_fermi_isotropic_diffuse_model", "api/gammapy.modeling.models.integrate_spectrum", "api/gammapy.modeling.models.read_hermes_cube", "api/gammapy.modeling.models.scale_plot_flux", "api/gammapy.modeling.models.utils.read_hermes_cube", "api/gammapy.modeling.select_nested_models", "api/gammapy.modeling.stat_profile_ul_scipy", "api/gammapy.stats.CashCountsStatistic", "api/gammapy.stats.WStatCountsStatistic", "api/gammapy.stats.cash", "api/gammapy.stats.cash_sum_cython", "api/gammapy.stats.compute_chisq", "api/gammapy.stats.compute_flux_doubling", "api/gammapy.stats.compute_fpp", "api/gammapy.stats.compute_fvar", "api/gammapy.stats.cstat", "api/gammapy.stats.f_cash_root_cython", "api/gammapy.stats.get_wstat_gof_terms", "api/gammapy.stats.get_wstat_mu_bkg", "api/gammapy.stats.norm_bounds_cython", "api/gammapy.stats.wstat", "api/gammapy.utils.cluster.hierarchical_clustering", "api/gammapy.utils.cluster.standard_scaler", "api/gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER", "api/gammapy.utils.coordinates.cartesian", "api/gammapy.utils.coordinates.fov_to_sky", "api/gammapy.utils.coordinates.galactic", "api/gammapy.utils.coordinates.motion_since_birth", "api/gammapy.utils.coordinates.polar", "api/gammapy.utils.coordinates.sky_to_fov", "api/gammapy.utils.coordinates.velocity_glon_glat", "api/gammapy.utils.fits.HDULocation", "api/gammapy.utils.fits.LazyFitsData", "api/gammapy.utils.fits.earth_location_from_dict", "api/gammapy.utils.integrate.trapz_loglog", "api/gammapy.utils.interpolation.ScaledRegularGridInterpolator", "api/gammapy.utils.interpolation.interpolate_profile", "api/gammapy.utils.interpolation.interpolation_scale", "api/gammapy.utils.parallel.BACKEND_DEFAULT", "api/gammapy.utils.parallel.METHOD_DEFAULT", "api/gammapy.utils.parallel.METHOD_KWARGS_DEFAULT", "api/gammapy.utils.parallel.N_JOBS_DEFAULT", "api/gammapy.utils.parallel.POOL_KWARGS_DEFAULT", "api/gammapy.utils.parallel.multiprocessing_manager", "api/gammapy.utils.parallel.run_multiprocessing", "api/gammapy.utils.random.InverseCDFSampler", "api/gammapy.utils.random.draw", "api/gammapy.utils.random.get_random_state", "api/gammapy.utils.random.normalize", "api/gammapy.utils.random.pdf", "api/gammapy.utils.random.sample_powerlaw", "api/gammapy.utils.random.sample_sphere", "api/gammapy.utils.random.sample_sphere_distance", "api/gammapy.utils.random.sample_times", "api/gammapy.utils.regions.compound_region_to_regions", "api/gammapy.utils.regions.make_concentric_annulus_sky_regions", "api/gammapy.utils.regions.make_orthogonal_rectangle_sky_regions", "api/gammapy.utils.regions.region_to_frame", "api/gammapy.utils.regions.regions_to_compound_region", "api/gammapy.utils.scripts.get_images_paths", "api/gammapy.utils.scripts.make_path", "api/gammapy.utils.scripts.read_yaml", "api/gammapy.utils.scripts.recursive_merge_dicts", "api/gammapy.utils.scripts.write_yaml", "api/gammapy.utils.table.hstack_columns", "api/gammapy.utils.table.table_row_to_dict", "api/gammapy.utils.table.table_standardise_units_copy", "api/gammapy.utils.table.table_standardise_units_inplace", "api/gammapy.utils.testing.Checker", "api/gammapy.utils.testing.assert_quantity_allclose", "api/gammapy.utils.testing.assert_skycoord_allclose", "api/gammapy.utils.testing.assert_time_allclose", "api/gammapy.utils.testing.mpl_plot_check", "api/gammapy.utils.testing.requires_data", "api/gammapy.utils.testing.requires_dependency", "api/gammapy.utils.time.absolute_time", "api/gammapy.utils.time.time_ref_from_dict", "api/gammapy.utils.time.time_ref_to_dict", "api/gammapy.utils.time.time_relative_to_ref", "api/gammapy.utils.units.standardise_unit", "api/gammapy.utils.units.unit_from_fits_image_hdu", "api/gammapy.visualization.MapPanelPlotter", "api/gammapy.visualization.add_colorbar", "api/gammapy.visualization.annotate_heatmap", "api/gammapy.visualization.colormap_hess", "api/gammapy.visualization.colormap_milagro", "api/gammapy.visualization.plot_contour_line", "api/gammapy.visualization.plot_distribution", "api/gammapy.visualization.plot_heatmap", "api/gammapy.visualization.plot_map_rgb", "api/gammapy.visualization.plot_npred_signal", "api/gammapy.visualization.plot_spectrum_datasets_off_regions", "api/gammapy.visualization.plot_theta_squared_table", "development/dependencies", "development/dev_howto", "development/doc_howto", "development/index", "development/intro", "development/pigs/index", "development/pigs/pig-001", "development/pigs/pig-002", "development/pigs/pig-003", "development/pigs/pig-004", "development/pigs/pig-005", "development/pigs/pig-006", "development/pigs/pig-007", "development/pigs/pig-008", "development/pigs/pig-009", "development/pigs/pig-010", "development/pigs/pig-011", "development/pigs/pig-012", "development/pigs/pig-013", "development/pigs/pig-014", "development/pigs/pig-016", "development/pigs/pig-018", "development/pigs/pig-019", "development/pigs/pig-020", "development/pigs/pig-021", "development/pigs/pig-022", "development/pigs/pig-023", "development/pigs/pig-024", "development/pigs/pig-025", "development/pigs/pig-026", "development/release", "development/setup", "getting-started/environments", "getting-started/index", "getting-started/install", "getting-started/quickstart", "getting-started/troubleshooting", "getting-started/usage", "index", "release-notes/index", "release-notes/v0.1", "release-notes/v0.10", "release-notes/v0.11", "release-notes/v0.12", "release-notes/v0.13", "release-notes/v0.14", "release-notes/v0.15", "release-notes/v0.16", "release-notes/v0.17", "release-notes/v0.18", "release-notes/v0.18.1", "release-notes/v0.18.2", "release-notes/v0.19", "release-notes/v0.2", "release-notes/v0.20", "release-notes/v0.20.1", "release-notes/v0.3", "release-notes/v0.4", "release-notes/v0.5", "release-notes/v0.6", "release-notes/v0.7", "release-notes/v0.8", "release-notes/v0.9", "release-notes/v1.0", "release-notes/v1.0.1", "release-notes/v1.0.2", "release-notes/v1.1", "release-notes/v1.2", "release-notes/v1.3", "sg_execution_times", "tutorials/analysis-1d/cta_sensitivity", "tutorials/analysis-1d/extended_source_spectral_analysis", "tutorials/analysis-1d/sed_fitting", "tutorials/analysis-1d/sg_execution_times", "tutorials/analysis-1d/spectral_analysis", "tutorials/analysis-1d/spectral_analysis_hli", "tutorials/analysis-1d/spectral_analysis_rad_max", "tutorials/analysis-1d/spectrum_simulation", "tutorials/analysis-2d/detect", "tutorials/analysis-2d/modeling_2D", "tutorials/analysis-2d/ring_background", "tutorials/analysis-2d/sg_execution_times", "tutorials/analysis-3d/analysis_3d", "tutorials/analysis-3d/analysis_mwl", "tutorials/analysis-3d/cta_data_analysis", "tutorials/analysis-3d/energy_dependent_estimation", "tutorials/analysis-3d/event_sampling", "tutorials/analysis-3d/event_sampling_nrg_depend_models", "tutorials/analysis-3d/flux_profiles", "tutorials/analysis-3d/sg_execution_times", "tutorials/analysis-3d/simulate_3d", "tutorials/analysis-time/Variability_estimation", "tutorials/analysis-time/light_curve", "tutorials/analysis-time/light_curve_flare", "tutorials/analysis-time/light_curve_simulation", "tutorials/analysis-time/pulsar_analysis", "tutorials/analysis-time/sg_execution_times", "tutorials/api/astro_dark_matter", "tutorials/api/catalog", "tutorials/api/datasets", "tutorials/api/fitting", "tutorials/api/irfs", "tutorials/api/makers", "tutorials/api/maps", "tutorials/api/mask_maps", "tutorials/api/model_management", "tutorials/api/models", "tutorials/api/observation_clustering", "tutorials/api/priors", "tutorials/api/sg_execution_times", "tutorials/data/cta", "tutorials/data/fermi_lat", "tutorials/data/hawc", "tutorials/data/hess", "tutorials/data/sg_execution_times", "tutorials/index", "tutorials/scripts/sg_execution_times", "tutorials/scripts/survey_map", "tutorials/sg_execution_times", "tutorials/starting/analysis_1", "tutorials/starting/analysis_2", "tutorials/starting/overview", "tutorials/starting/sg_execution_times", "user-guide/astro/darkmatter/index", "user-guide/astro/index", "user-guide/astro/population/index", "user-guide/astro/source/index", "user-guide/astro/source/pulsar", "user-guide/astro/source/pwn", "user-guide/astro/source/snr", "user-guide/catalog", "user-guide/datasets/index", "user-guide/dl3", "user-guide/estimators", "user-guide/hli", "user-guide/howto", "user-guide/index", "user-guide/irf/aeff", "user-guide/irf/bkg", "user-guide/irf/edisp", "user-guide/irf/index", "user-guide/irf/psf", "user-guide/makers/fov", "user-guide/makers/index", "user-guide/makers/reflected", "user-guide/makers/ring", "user-guide/maps/hpxmap", "user-guide/maps/index", "user-guide/maps/regionmap", "user-guide/model-gallery/index", "user-guide/model-gallery/sg_execution_times", "user-guide/model-gallery/spatial/plot_constant", "user-guide/model-gallery/spatial/plot_disk", "user-guide/model-gallery/spatial/plot_gauss", "user-guide/model-gallery/spatial/plot_gen_gauss", "user-guide/model-gallery/spatial/plot_piecewise_norm_spatial", "user-guide/model-gallery/spatial/plot_point", "user-guide/model-gallery/spatial/plot_shell", "user-guide/model-gallery/spatial/plot_shell2", "user-guide/model-gallery/spatial/plot_template", "user-guide/model-gallery/spatial/sg_execution_times", "user-guide/model-gallery/spectral/plot_absorbed", "user-guide/model-gallery/spectral/plot_broken_powerlaw", "user-guide/model-gallery/spectral/plot_compound", "user-guide/model-gallery/spectral/plot_constant_spectral", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_3fgl", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_norm_spectral", "user-guide/model-gallery/spectral/plot_gauss_spectral", "user-guide/model-gallery/spectral/plot_logparabola", "user-guide/model-gallery/spectral/plot_logparabola_norm_spectral", "user-guide/model-gallery/spectral/plot_naima", "user-guide/model-gallery/spectral/plot_piecewise_norm_spectral", "user-guide/model-gallery/spectral/plot_powerlaw", "user-guide/model-gallery/spectral/plot_powerlaw2", "user-guide/model-gallery/spectral/plot_powerlaw_norm_spectral", "user-guide/model-gallery/spectral/plot_smooth_broken_powerlaw", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_3fgl", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl_dr1", "user-guide/model-gallery/spectral/plot_template_spectral", "user-guide/model-gallery/spectral/sg_execution_times", "user-guide/model-gallery/temporal/plot_constant_temporal", "user-guide/model-gallery/temporal/plot_expdecay_temporal", "user-guide/model-gallery/temporal/plot_gaussian_temporal", "user-guide/model-gallery/temporal/plot_generalized_gaussian_temporal", "user-guide/model-gallery/temporal/plot_linear_temporal", "user-guide/model-gallery/temporal/plot_powerlaw_temporal", "user-guide/model-gallery/temporal/plot_sine_temporal", "user-guide/model-gallery/temporal/plot_template_phase_temporal", "user-guide/model-gallery/temporal/plot_template_temporal", "user-guide/model-gallery/temporal/sg_execution_times", "user-guide/modeling", "user-guide/package", "user-guide/references", "user-guide/scripts/index", "user-guide/stats/fit_statistics", "user-guide/stats/index", "user-guide/stats/wstat_derivation", "user-guide/utils", "user-guide/visualization/index"], "filenames": ["api-reference/analysis.rst", "api-reference/astro.rst", "api-reference/catalog.rst", "api-reference/data.rst", "api-reference/datasets.rst", "api-reference/estimators.rst", "api-reference/index.rst", "api-reference/irf.rst", "api-reference/makers.rst", "api-reference/maps.rst", "api-reference/modeling.rst", "api-reference/scripts.rst", "api-reference/stats.rst", "api-reference/utils.rst", "api-reference/visualization.rst", "api/gammapy.analysis.Analysis.rst", "api/gammapy.analysis.AnalysisConfig.rst", "api/gammapy.astro.darkmatter.BurkertProfile.rst", "api/gammapy.astro.darkmatter.DMProfile.rst", "api/gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.rst", "api/gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.rst", "api/gammapy.astro.darkmatter.EinastoProfile.rst", "api/gammapy.astro.darkmatter.IsothermalProfile.rst", "api/gammapy.astro.darkmatter.JFactory.rst", "api/gammapy.astro.darkmatter.MooreProfile.rst", "api/gammapy.astro.darkmatter.NFWProfile.rst", "api/gammapy.astro.darkmatter.PrimaryFlux.rst", "api/gammapy.astro.darkmatter.ZhaoProfile.rst", "api/gammapy.astro.population.CaseBattacharya1998.rst", "api/gammapy.astro.population.Exponential.rst", "api/gammapy.astro.population.FaucherKaspi2006.rst", "api/gammapy.astro.population.FaucherKaspi2006VelocityBimodal.rst", "api/gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.rst", "api/gammapy.astro.population.FaucherSpiral.rst", "api/gammapy.astro.population.LogSpiral.rst", "api/gammapy.astro.population.Lorimer2006.rst", "api/gammapy.astro.population.Paczynski1990.rst", "api/gammapy.astro.population.Paczynski1990Velocity.rst", "api/gammapy.astro.population.ValleeSpiral.rst", "api/gammapy.astro.population.YusifovKucuk2004.rst", "api/gammapy.astro.population.YusifovKucuk2004B.rst", "api/gammapy.astro.population.add_observed_parameters.rst", "api/gammapy.astro.population.add_pulsar_parameters.rst", "api/gammapy.astro.population.add_pwn_parameters.rst", "api/gammapy.astro.population.add_snr_parameters.rst", "api/gammapy.astro.population.make_base_catalog_galactic.rst", "api/gammapy.astro.population.make_catalog_random_positions_cube.rst", "api/gammapy.astro.population.make_catalog_random_positions_sphere.rst", "api/gammapy.astro.population.radial_distributions.rst", "api/gammapy.astro.population.velocity_distributions.rst", "api/gammapy.astro.source.PWN.rst", "api/gammapy.astro.source.Pulsar.rst", "api/gammapy.astro.source.SNR.rst", "api/gammapy.astro.source.SNRTrueloveMcKee.rst", "api/gammapy.astro.source.SimplePulsar.rst", "api/gammapy.catalog.CATALOG_REGISTRY.rst", "api/gammapy.catalog.SourceCatalog.rst", "api/gammapy.catalog.SourceCatalog1LHAASO.rst", "api/gammapy.catalog.SourceCatalog2FHL.rst", "api/gammapy.catalog.SourceCatalog2HWC.rst", "api/gammapy.catalog.SourceCatalog3FGL.rst", "api/gammapy.catalog.SourceCatalog3FHL.rst", "api/gammapy.catalog.SourceCatalog3HWC.rst", "api/gammapy.catalog.SourceCatalog4FGL.rst", "api/gammapy.catalog.SourceCatalogGammaCat.rst", "api/gammapy.catalog.SourceCatalogHGPS.rst", "api/gammapy.catalog.SourceCatalogLargeScaleHGPS.rst", "api/gammapy.catalog.SourceCatalogObject.rst", "api/gammapy.catalog.SourceCatalogObject1LHAASO.rst", "api/gammapy.catalog.SourceCatalogObject2FHL.rst", "api/gammapy.catalog.SourceCatalogObject2HWC.rst", "api/gammapy.catalog.SourceCatalogObject3FGL.rst", "api/gammapy.catalog.SourceCatalogObject3FHL.rst", "api/gammapy.catalog.SourceCatalogObject3HWC.rst", "api/gammapy.catalog.SourceCatalogObject4FGL.rst", "api/gammapy.catalog.SourceCatalogObjectGammaCat.rst", "api/gammapy.catalog.SourceCatalogObjectHGPS.rst", "api/gammapy.catalog.SourceCatalogObjectHGPSComponent.rst", "api/gammapy.data.DataStore.rst", "api/gammapy.data.EventList.rst", "api/gammapy.data.EventListMetaData.rst", "api/gammapy.data.FixedPointingInfo.rst", "api/gammapy.data.GTI.rst", "api/gammapy.data.HDUIndexTable.rst", "api/gammapy.data.Observation.rst", "api/gammapy.data.ObservationFilter.rst", "api/gammapy.data.ObservationTable.rst", "api/gammapy.data.Observations.rst", "api/gammapy.data.ObservationsEventsSampler.rst", "api/gammapy.data.PointingInfo.rst", "api/gammapy.data.PointingMode.rst", "api/gammapy.data.get_irfs_features.rst", "api/gammapy.data.observatory_locations.rst", "api/gammapy.datasets.DATASET_REGISTRY.rst", "api/gammapy.datasets.Dataset.rst", "api/gammapy.datasets.Datasets.rst", "api/gammapy.datasets.FluxPointsDataset.rst", "api/gammapy.datasets.MapDataset.rst", "api/gammapy.datasets.MapDatasetEventSampler.rst", "api/gammapy.datasets.MapDatasetMetaData.rst", "api/gammapy.datasets.MapDatasetOnOff.rst", "api/gammapy.datasets.OGIPDatasetReader.rst", "api/gammapy.datasets.OGIPDatasetWriter.rst", "api/gammapy.datasets.ObservationEventSampler.rst", "api/gammapy.datasets.SpectrumDataset.rst", "api/gammapy.datasets.SpectrumDatasetOnOff.rst", "api/gammapy.datasets.apply_edisp.rst", "api/gammapy.datasets.create_map_dataset_from_observation.rst", "api/gammapy.datasets.create_map_dataset_geoms.rst", "api/gammapy.datasets.split_dataset.rst", "api/gammapy.datasets.utils.apply_edisp.rst", "api/gammapy.datasets.utils.split_dataset.rst", "api/gammapy.estimators.ASmoothMapEstimator.rst", "api/gammapy.estimators.ESTIMATOR_REGISTRY.rst", "api/gammapy.estimators.EnergyDependentMorphologyEstimator.rst", "api/gammapy.estimators.Estimator.rst", "api/gammapy.estimators.ExcessMapEstimator.rst", "api/gammapy.estimators.FluxMaps.rst", "api/gammapy.estimators.FluxMetaData.rst", "api/gammapy.estimators.FluxPoints.rst", "api/gammapy.estimators.FluxPointsEstimator.rst", "api/gammapy.estimators.FluxProfileEstimator.rst", "api/gammapy.estimators.ImageProfile.rst", "api/gammapy.estimators.ImageProfileEstimator.rst", "api/gammapy.estimators.LightCurveEstimator.rst", "api/gammapy.estimators.ParameterEstimator.rst", "api/gammapy.estimators.SensitivityEstimator.rst", "api/gammapy.estimators.TSMapEstimator.rst", "api/gammapy.estimators.utils.compute_lightcurve_doublingtime.rst", "api/gammapy.estimators.utils.compute_lightcurve_fpp.rst", "api/gammapy.estimators.utils.compute_lightcurve_fvar.rst", "api/gammapy.estimators.utils.estimate_exposure_reco_energy.rst", "api/gammapy.estimators.utils.find_peaks.rst", "api/gammapy.estimators.utils.find_peaks_in_flux_map.rst", "api/gammapy.estimators.utils.get_rebinned_axis.rst", "api/gammapy.estimators.utils.resample_energy_edges.rst", "api/gammapy.irf.Background2D.rst", "api/gammapy.irf.Background3D.rst", "api/gammapy.irf.BackgroundIRF.rst", "api/gammapy.irf.EDispKernel.rst", "api/gammapy.irf.EDispKernelMap.rst", "api/gammapy.irf.EDispMap.rst", "api/gammapy.irf.EffectiveAreaTable2D.rst", "api/gammapy.irf.EnergyDependentMultiGaussPSF.rst", "api/gammapy.irf.EnergyDispersion2D.rst", "api/gammapy.irf.FoVAlignment.rst", "api/gammapy.irf.IRF.rst", "api/gammapy.irf.IRFMap.rst", "api/gammapy.irf.IRF_REGISTRY.rst", "api/gammapy.irf.PSF3D.rst", "api/gammapy.irf.PSFKernel.rst", "api/gammapy.irf.PSFKing.rst", "api/gammapy.irf.PSFMap.rst", "api/gammapy.irf.ParametricPSF.rst", "api/gammapy.irf.RadMax2D.rst", "api/gammapy.irf.RecoPSFMap.rst", "api/gammapy.irf.load_irf_dict_from_file.rst", "api/gammapy.makers.AdaptiveRingBackgroundMaker.rst", "api/gammapy.makers.DatasetsMaker.rst", "api/gammapy.makers.FoVBackgroundMaker.rst", "api/gammapy.makers.MAKER_REGISTRY.rst", "api/gammapy.makers.Maker.rst", "api/gammapy.makers.MapDatasetMaker.rst", "api/gammapy.makers.PhaseBackgroundMaker.rst", "api/gammapy.makers.ReflectedRegionsBackgroundMaker.rst", "api/gammapy.makers.ReflectedRegionsFinder.rst", "api/gammapy.makers.RegionsFinder.rst", "api/gammapy.makers.RingBackgroundMaker.rst", "api/gammapy.makers.SafeMaskMaker.rst", "api/gammapy.makers.SpectrumDatasetMaker.rst", "api/gammapy.makers.WobbleRegionsFinder.rst", "api/gammapy.makers.utils.make_counts_rad_max.rst", "api/gammapy.makers.utils.make_edisp_kernel_map.rst", "api/gammapy.makers.utils.make_edisp_map.rst", "api/gammapy.makers.utils.make_effective_livetime_map.rst", "api/gammapy.makers.utils.make_map_background_irf.rst", "api/gammapy.makers.utils.make_map_exposure_true_energy.rst", "api/gammapy.makers.utils.make_observation_time_map.rst", "api/gammapy.makers.utils.make_psf_map.rst", "api/gammapy.makers.utils.make_theta_squared_table.rst", "api/gammapy.maps.Geom.rst", "api/gammapy.maps.HpxGeom.rst", "api/gammapy.maps.HpxMap.rst", "api/gammapy.maps.HpxNDMap.rst", "api/gammapy.maps.LabelMapAxis.rst", "api/gammapy.maps.Map.rst", "api/gammapy.maps.MapAxes.rst", "api/gammapy.maps.MapAxis.rst", "api/gammapy.maps.MapCoord.rst", "api/gammapy.maps.Maps.rst", "api/gammapy.maps.RegionGeom.rst", "api/gammapy.maps.RegionNDMap.rst", "api/gammapy.maps.TimeMapAxis.rst", "api/gammapy.maps.WcsGeom.rst", "api/gammapy.maps.WcsMap.rst", "api/gammapy.maps.WcsNDMap.rst", "api/gammapy.maps.containment_radius.rst", "api/gammapy.maps.containment_region.rst", "api/gammapy.modeling.Covariance.rst", "api/gammapy.modeling.Fit.rst", "api/gammapy.modeling.Parameter.rst", "api/gammapy.modeling.Parameters.rst", "api/gammapy.modeling.PriorParameter.rst", "api/gammapy.modeling.PriorParameters.rst", "api/gammapy.modeling.models.BrokenPowerLawSpectralModel.rst", "api/gammapy.modeling.models.CompoundSpectralModel.rst", "api/gammapy.modeling.models.ConstantFluxSpatialModel.rst", "api/gammapy.modeling.models.ConstantSpatialModel.rst", "api/gammapy.modeling.models.ConstantSpectralModel.rst", "api/gammapy.modeling.models.ConstantTemporalModel.rst", "api/gammapy.modeling.models.DatasetModels.rst", "api/gammapy.modeling.models.DiskSpatialModel.rst", "api/gammapy.modeling.models.EBLAbsorptionNormSpectralModel.rst", "api/gammapy.modeling.models.EBL_DATA_BUILTIN.rst", "api/gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.rst", "api/gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.rst", "api/gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.rst", "api/gammapy.modeling.models.ExpDecayTemporalModel.rst", "api/gammapy.modeling.models.FoVBackgroundModel.rst", "api/gammapy.modeling.models.GaussianSpatialModel.rst", "api/gammapy.modeling.models.GaussianSpectralModel.rst", "api/gammapy.modeling.models.GaussianTemporalModel.rst", "api/gammapy.modeling.models.GeneralizedGaussianSpatialModel.rst", "api/gammapy.modeling.models.GeneralizedGaussianTemporalModel.rst", "api/gammapy.modeling.models.LightCurveTemplateTemporalModel.rst", "api/gammapy.modeling.models.LinearTemporalModel.rst", "api/gammapy.modeling.models.LogParabolaNormSpectralModel.rst", "api/gammapy.modeling.models.LogParabolaSpectralModel.rst", "api/gammapy.modeling.models.MODEL_REGISTRY.rst", "api/gammapy.modeling.models.MeyerCrabSpectralModel.rst", "api/gammapy.modeling.models.Model.rst", "api/gammapy.modeling.models.ModelBase.rst", "api/gammapy.modeling.models.Models.rst", "api/gammapy.modeling.models.NaimaSpectralModel.rst", "api/gammapy.modeling.models.PiecewiseNormSpatialModel.rst", "api/gammapy.modeling.models.PiecewiseNormSpectralModel.rst", "api/gammapy.modeling.models.PointSpatialModel.rst", "api/gammapy.modeling.models.PowerLaw2SpectralModel.rst", "api/gammapy.modeling.models.PowerLawNormSpectralModel.rst", "api/gammapy.modeling.models.PowerLawSpectralModel.rst", "api/gammapy.modeling.models.PowerLawTemporalModel.rst", "api/gammapy.modeling.models.SPATIAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.ScaleSpectralModel.rst", "api/gammapy.modeling.models.Shell2SpatialModel.rst", "api/gammapy.modeling.models.ShellSpatialModel.rst", "api/gammapy.modeling.models.SineTemporalModel.rst", "api/gammapy.modeling.models.SkyModel.rst", "api/gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.rst", "api/gammapy.modeling.models.SpatialModel.rst", "api/gammapy.modeling.models.SpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.rst", "api/gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.TemplateNDSpatialModel.rst", "api/gammapy.modeling.models.TemplateNDSpectralModel.rst", "api/gammapy.modeling.models.TemplateNPredModel.rst", "api/gammapy.modeling.models.TemplatePhaseCurveTemporalModel.rst", "api/gammapy.modeling.models.TemplateSpatialModel.rst", "api/gammapy.modeling.models.TemplateSpectralModel.rst", "api/gammapy.modeling.models.TemporalModel.rst", "api/gammapy.modeling.models.create_cosmic_ray_spectral_model.rst", "api/gammapy.modeling.models.create_crab_spectral_model.rst", "api/gammapy.modeling.models.create_fermi_isotropic_diffuse_model.rst", "api/gammapy.modeling.models.integrate_spectrum.rst", "api/gammapy.modeling.models.read_hermes_cube.rst", "api/gammapy.modeling.models.scale_plot_flux.rst", "api/gammapy.modeling.models.utils.read_hermes_cube.rst", "api/gammapy.modeling.select_nested_models.rst", "api/gammapy.modeling.stat_profile_ul_scipy.rst", "api/gammapy.stats.CashCountsStatistic.rst", "api/gammapy.stats.WStatCountsStatistic.rst", "api/gammapy.stats.cash.rst", "api/gammapy.stats.cash_sum_cython.rst", "api/gammapy.stats.compute_chisq.rst", "api/gammapy.stats.compute_flux_doubling.rst", "api/gammapy.stats.compute_fpp.rst", "api/gammapy.stats.compute_fvar.rst", "api/gammapy.stats.cstat.rst", "api/gammapy.stats.f_cash_root_cython.rst", "api/gammapy.stats.get_wstat_gof_terms.rst", "api/gammapy.stats.get_wstat_mu_bkg.rst", "api/gammapy.stats.norm_bounds_cython.rst", "api/gammapy.stats.wstat.rst", "api/gammapy.utils.cluster.hierarchical_clustering.rst", "api/gammapy.utils.cluster.standard_scaler.rst", "api/gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER.rst", "api/gammapy.utils.coordinates.cartesian.rst", "api/gammapy.utils.coordinates.fov_to_sky.rst", "api/gammapy.utils.coordinates.galactic.rst", "api/gammapy.utils.coordinates.motion_since_birth.rst", "api/gammapy.utils.coordinates.polar.rst", "api/gammapy.utils.coordinates.sky_to_fov.rst", "api/gammapy.utils.coordinates.velocity_glon_glat.rst", "api/gammapy.utils.fits.HDULocation.rst", "api/gammapy.utils.fits.LazyFitsData.rst", "api/gammapy.utils.fits.earth_location_from_dict.rst", "api/gammapy.utils.integrate.trapz_loglog.rst", "api/gammapy.utils.interpolation.ScaledRegularGridInterpolator.rst", "api/gammapy.utils.interpolation.interpolate_profile.rst", "api/gammapy.utils.interpolation.interpolation_scale.rst", "api/gammapy.utils.parallel.BACKEND_DEFAULT.rst", "api/gammapy.utils.parallel.METHOD_DEFAULT.rst", "api/gammapy.utils.parallel.METHOD_KWARGS_DEFAULT.rst", "api/gammapy.utils.parallel.N_JOBS_DEFAULT.rst", "api/gammapy.utils.parallel.POOL_KWARGS_DEFAULT.rst", "api/gammapy.utils.parallel.multiprocessing_manager.rst", "api/gammapy.utils.parallel.run_multiprocessing.rst", "api/gammapy.utils.random.InverseCDFSampler.rst", "api/gammapy.utils.random.draw.rst", "api/gammapy.utils.random.get_random_state.rst", "api/gammapy.utils.random.normalize.rst", "api/gammapy.utils.random.pdf.rst", "api/gammapy.utils.random.sample_powerlaw.rst", "api/gammapy.utils.random.sample_sphere.rst", "api/gammapy.utils.random.sample_sphere_distance.rst", "api/gammapy.utils.random.sample_times.rst", "api/gammapy.utils.regions.compound_region_to_regions.rst", "api/gammapy.utils.regions.make_concentric_annulus_sky_regions.rst", "api/gammapy.utils.regions.make_orthogonal_rectangle_sky_regions.rst", "api/gammapy.utils.regions.region_to_frame.rst", "api/gammapy.utils.regions.regions_to_compound_region.rst", "api/gammapy.utils.scripts.get_images_paths.rst", "api/gammapy.utils.scripts.make_path.rst", "api/gammapy.utils.scripts.read_yaml.rst", "api/gammapy.utils.scripts.recursive_merge_dicts.rst", "api/gammapy.utils.scripts.write_yaml.rst", "api/gammapy.utils.table.hstack_columns.rst", "api/gammapy.utils.table.table_row_to_dict.rst", "api/gammapy.utils.table.table_standardise_units_copy.rst", "api/gammapy.utils.table.table_standardise_units_inplace.rst", "api/gammapy.utils.testing.Checker.rst", "api/gammapy.utils.testing.assert_quantity_allclose.rst", "api/gammapy.utils.testing.assert_skycoord_allclose.rst", "api/gammapy.utils.testing.assert_time_allclose.rst", "api/gammapy.utils.testing.mpl_plot_check.rst", "api/gammapy.utils.testing.requires_data.rst", "api/gammapy.utils.testing.requires_dependency.rst", "api/gammapy.utils.time.absolute_time.rst", "api/gammapy.utils.time.time_ref_from_dict.rst", "api/gammapy.utils.time.time_ref_to_dict.rst", "api/gammapy.utils.time.time_relative_to_ref.rst", "api/gammapy.utils.units.standardise_unit.rst", "api/gammapy.utils.units.unit_from_fits_image_hdu.rst", "api/gammapy.visualization.MapPanelPlotter.rst", "api/gammapy.visualization.add_colorbar.rst", "api/gammapy.visualization.annotate_heatmap.rst", "api/gammapy.visualization.colormap_hess.rst", "api/gammapy.visualization.colormap_milagro.rst", "api/gammapy.visualization.plot_contour_line.rst", "api/gammapy.visualization.plot_distribution.rst", "api/gammapy.visualization.plot_heatmap.rst", "api/gammapy.visualization.plot_map_rgb.rst", "api/gammapy.visualization.plot_npred_signal.rst", "api/gammapy.visualization.plot_spectrum_datasets_off_regions.rst", "api/gammapy.visualization.plot_theta_squared_table.rst", "development/dependencies.rst", "development/dev_howto.rst", "development/doc_howto.rst", "development/index.rst", "development/intro.rst", "development/pigs/index.rst", "development/pigs/pig-001.rst", "development/pigs/pig-002.rst", "development/pigs/pig-003.rst", "development/pigs/pig-004.rst", "development/pigs/pig-005.rst", "development/pigs/pig-006.rst", "development/pigs/pig-007.rst", "development/pigs/pig-008.rst", "development/pigs/pig-009.rst", "development/pigs/pig-010.rst", "development/pigs/pig-011.rst", "development/pigs/pig-012.rst", "development/pigs/pig-013.rst", "development/pigs/pig-014.rst", "development/pigs/pig-016.rst", "development/pigs/pig-018.rst", "development/pigs/pig-019.rst", "development/pigs/pig-020.rst", "development/pigs/pig-021.rst", "development/pigs/pig-022.rst", "development/pigs/pig-023.rst", "development/pigs/pig-024.rst", "development/pigs/pig-025.rst", "development/pigs/pig-026.rst", "development/release.rst", "development/setup.rst", "getting-started/environments.rst", "getting-started/index.rst", "getting-started/install.rst", "getting-started/quickstart.rst", "getting-started/troubleshooting.rst", "getting-started/usage.rst", "index.rst", "release-notes/index.rst", "release-notes/v0.1.rst", "release-notes/v0.10.rst", "release-notes/v0.11.rst", "release-notes/v0.12.rst", "release-notes/v0.13.rst", "release-notes/v0.14.rst", "release-notes/v0.15.rst", "release-notes/v0.16.rst", "release-notes/v0.17.rst", "release-notes/v0.18.rst", "release-notes/v0.18.1.rst", "release-notes/v0.18.2.rst", "release-notes/v0.19.rst", "release-notes/v0.2.rst", "release-notes/v0.20.rst", "release-notes/v0.20.1.rst", "release-notes/v0.3.rst", "release-notes/v0.4.rst", "release-notes/v0.5.rst", "release-notes/v0.6.rst", "release-notes/v0.7.rst", "release-notes/v0.8.rst", "release-notes/v0.9.rst", "release-notes/v1.0.rst", "release-notes/v1.0.1.rst", "release-notes/v1.0.2.rst", "release-notes/v1.1.rst", "release-notes/v1.2.rst", "release-notes/v1.3.rst", "sg_execution_times.rst", "tutorials/analysis-1d/cta_sensitivity.rst", "tutorials/analysis-1d/extended_source_spectral_analysis.rst", "tutorials/analysis-1d/sed_fitting.rst", "tutorials/analysis-1d/sg_execution_times.rst", "tutorials/analysis-1d/spectral_analysis.rst", "tutorials/analysis-1d/spectral_analysis_hli.rst", "tutorials/analysis-1d/spectral_analysis_rad_max.rst", "tutorials/analysis-1d/spectrum_simulation.rst", "tutorials/analysis-2d/detect.rst", "tutorials/analysis-2d/modeling_2D.rst", "tutorials/analysis-2d/ring_background.rst", "tutorials/analysis-2d/sg_execution_times.rst", "tutorials/analysis-3d/analysis_3d.rst", "tutorials/analysis-3d/analysis_mwl.rst", "tutorials/analysis-3d/cta_data_analysis.rst", "tutorials/analysis-3d/energy_dependent_estimation.rst", "tutorials/analysis-3d/event_sampling.rst", "tutorials/analysis-3d/event_sampling_nrg_depend_models.rst", "tutorials/analysis-3d/flux_profiles.rst", "tutorials/analysis-3d/sg_execution_times.rst", "tutorials/analysis-3d/simulate_3d.rst", "tutorials/analysis-time/Variability_estimation.rst", "tutorials/analysis-time/light_curve.rst", "tutorials/analysis-time/light_curve_flare.rst", "tutorials/analysis-time/light_curve_simulation.rst", "tutorials/analysis-time/pulsar_analysis.rst", "tutorials/analysis-time/sg_execution_times.rst", "tutorials/api/astro_dark_matter.rst", "tutorials/api/catalog.rst", "tutorials/api/datasets.rst", "tutorials/api/fitting.rst", "tutorials/api/irfs.rst", "tutorials/api/makers.rst", "tutorials/api/maps.rst", "tutorials/api/mask_maps.rst", "tutorials/api/model_management.rst", "tutorials/api/models.rst", "tutorials/api/observation_clustering.rst", "tutorials/api/priors.rst", "tutorials/api/sg_execution_times.rst", "tutorials/data/cta.rst", "tutorials/data/fermi_lat.rst", "tutorials/data/hawc.rst", "tutorials/data/hess.rst", "tutorials/data/sg_execution_times.rst", "tutorials/index.rst", "tutorials/scripts/sg_execution_times.rst", "tutorials/scripts/survey_map.rst", "tutorials/sg_execution_times.rst", "tutorials/starting/analysis_1.rst", "tutorials/starting/analysis_2.rst", "tutorials/starting/overview.rst", "tutorials/starting/sg_execution_times.rst", "user-guide/astro/darkmatter/index.rst", "user-guide/astro/index.rst", "user-guide/astro/population/index.rst", "user-guide/astro/source/index.rst", "user-guide/astro/source/pulsar.rst", "user-guide/astro/source/pwn.rst", "user-guide/astro/source/snr.rst", "user-guide/catalog.rst", "user-guide/datasets/index.rst", "user-guide/dl3.rst", "user-guide/estimators.rst", "user-guide/hli.rst", "user-guide/howto.rst", "user-guide/index.rst", "user-guide/irf/aeff.rst", "user-guide/irf/bkg.rst", "user-guide/irf/edisp.rst", "user-guide/irf/index.rst", "user-guide/irf/psf.rst", "user-guide/makers/fov.rst", "user-guide/makers/index.rst", "user-guide/makers/reflected.rst", "user-guide/makers/ring.rst", "user-guide/maps/hpxmap.rst", "user-guide/maps/index.rst", "user-guide/maps/regionmap.rst", "user-guide/model-gallery/index.rst", "user-guide/model-gallery/sg_execution_times.rst", "user-guide/model-gallery/spatial/plot_constant.rst", "user-guide/model-gallery/spatial/plot_disk.rst", "user-guide/model-gallery/spatial/plot_gauss.rst", "user-guide/model-gallery/spatial/plot_gen_gauss.rst", "user-guide/model-gallery/spatial/plot_piecewise_norm_spatial.rst", "user-guide/model-gallery/spatial/plot_point.rst", "user-guide/model-gallery/spatial/plot_shell.rst", "user-guide/model-gallery/spatial/plot_shell2.rst", "user-guide/model-gallery/spatial/plot_template.rst", "user-guide/model-gallery/spatial/sg_execution_times.rst", "user-guide/model-gallery/spectral/plot_absorbed.rst", "user-guide/model-gallery/spectral/plot_broken_powerlaw.rst", "user-guide/model-gallery/spectral/plot_compound.rst", "user-guide/model-gallery/spectral/plot_constant_spectral.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_3fgl.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_gauss_spectral.rst", "user-guide/model-gallery/spectral/plot_logparabola.rst", "user-guide/model-gallery/spectral/plot_logparabola_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_naima.rst", "user-guide/model-gallery/spectral/plot_piecewise_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_powerlaw.rst", "user-guide/model-gallery/spectral/plot_powerlaw2.rst", "user-guide/model-gallery/spectral/plot_powerlaw_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_smooth_broken_powerlaw.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_3fgl.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl_dr1.rst", "user-guide/model-gallery/spectral/plot_template_spectral.rst", "user-guide/model-gallery/spectral/sg_execution_times.rst", "user-guide/model-gallery/temporal/plot_constant_temporal.rst", "user-guide/model-gallery/temporal/plot_expdecay_temporal.rst", "user-guide/model-gallery/temporal/plot_gaussian_temporal.rst", "user-guide/model-gallery/temporal/plot_generalized_gaussian_temporal.rst", "user-guide/model-gallery/temporal/plot_linear_temporal.rst", "user-guide/model-gallery/temporal/plot_powerlaw_temporal.rst", "user-guide/model-gallery/temporal/plot_sine_temporal.rst", "user-guide/model-gallery/temporal/plot_template_phase_temporal.rst", "user-guide/model-gallery/temporal/plot_template_temporal.rst", "user-guide/model-gallery/temporal/sg_execution_times.rst", "user-guide/modeling.rst", "user-guide/package.rst", "user-guide/references.rst", "user-guide/scripts/index.rst", "user-guide/stats/fit_statistics.rst", "user-guide/stats/index.rst", "user-guide/stats/wstat_derivation.rst", "user-guide/utils.rst", "user-guide/visualization/index.rst"], "titles": ["analysis - High level interface", "astro - Astrophysics", "catalog - Source catalogs", "data - DL3 data and observations", "datasets - Reduced datasets", "estimators - High level estimators", "API reference", "irf - Instrument response functions", "makers - Data reduction", "maps - Sky maps", "modeling - Models and fitting", "scripts - Command line tools", "stats - Statistics", "utils - Utilities", "visualization - Plotting features", "Analysis", "AnalysisConfig", "BurkertProfile", "DMProfile", "DarkMatterAnnihilationSpectralModel", "DarkMatterDecaySpectralModel", "EinastoProfile", "IsothermalProfile", "JFactory", "MooreProfile", "NFWProfile", "PrimaryFlux", "ZhaoProfile", "CaseBattacharya1998", "Exponential", "FaucherKaspi2006", "FaucherKaspi2006VelocityBimodal", "FaucherKaspi2006VelocityMaxwellian", "FaucherSpiral", "LogSpiral", "Lorimer2006", "Paczynski1990", "Paczynski1990Velocity", "ValleeSpiral", "YusifovKucuk2004", "YusifovKucuk2004B", "add_observed_parameters", "add_pulsar_parameters", "add_pwn_parameters", "add_snr_parameters", "make_base_catalog_galactic", "make_catalog_random_positions_cube", "make_catalog_random_positions_sphere", "radial_distributions", "velocity_distributions", "PWN", "Pulsar", "SNR", "SNRTrueloveMcKee", "SimplePulsar", "CATALOG_REGISTRY", "SourceCatalog", "SourceCatalog1LHAASO", "SourceCatalog2FHL", "SourceCatalog2HWC", "SourceCatalog3FGL", "SourceCatalog3FHL", "SourceCatalog3HWC", "SourceCatalog4FGL", "SourceCatalogGammaCat", "SourceCatalogHGPS", "SourceCatalogLargeScaleHGPS", "SourceCatalogObject", "SourceCatalogObject1LHAASO", "SourceCatalogObject2FHL", "SourceCatalogObject2HWC", "SourceCatalogObject3FGL", "SourceCatalogObject3FHL", "SourceCatalogObject3HWC", "SourceCatalogObject4FGL", "SourceCatalogObjectGammaCat", "SourceCatalogObjectHGPS", "SourceCatalogObjectHGPSComponent", "DataStore", "EventList", "EventListMetaData", "FixedPointingInfo", "GTI", "HDUIndexTable", "Observation", "ObservationFilter", "ObservationTable", "Observations", "ObservationsEventsSampler", "PointingInfo", "PointingMode", "get_irfs_features", "observatory_locations", "DATASET_REGISTRY", "Dataset", "Datasets", "FluxPointsDataset", "MapDataset", "MapDatasetEventSampler", "MapDatasetMetaData", "MapDatasetOnOff", "OGIPDatasetReader", "OGIPDatasetWriter", "ObservationEventSampler", "SpectrumDataset", "SpectrumDatasetOnOff", "apply_edisp", "create_map_dataset_from_observation", "create_map_dataset_geoms", "split_dataset", "apply_edisp", "split_dataset", "ASmoothMapEstimator", "ESTIMATOR_REGISTRY", "EnergyDependentMorphologyEstimator", "Estimator", "ExcessMapEstimator", "FluxMaps", "FluxMetaData", "FluxPoints", "FluxPointsEstimator", "FluxProfileEstimator", "ImageProfile", "ImageProfileEstimator", "LightCurveEstimator", "ParameterEstimator", "SensitivityEstimator", "TSMapEstimator", "compute_lightcurve_doublingtime", "compute_lightcurve_fpp", "compute_lightcurve_fvar", "estimate_exposure_reco_energy", "find_peaks", "find_peaks_in_flux_map", "get_rebinned_axis", "resample_energy_edges", "Background2D", "Background3D", "BackgroundIRF", "EDispKernel", "EDispKernelMap", "EDispMap", "EffectiveAreaTable2D", "EnergyDependentMultiGaussPSF", "EnergyDispersion2D", "FoVAlignment", "IRF", "IRFMap", "IRF_REGISTRY", "PSF3D", "PSFKernel", "PSFKing", "PSFMap", "ParametricPSF", "RadMax2D", "RecoPSFMap", "load_irf_dict_from_file", "AdaptiveRingBackgroundMaker", "DatasetsMaker", "FoVBackgroundMaker", "MAKER_REGISTRY", "Maker", "MapDatasetMaker", "PhaseBackgroundMaker", "ReflectedRegionsBackgroundMaker", "ReflectedRegionsFinder", "RegionsFinder", "RingBackgroundMaker", "SafeMaskMaker", "SpectrumDatasetMaker", "WobbleRegionsFinder", "make_counts_rad_max", "make_edisp_kernel_map", "make_edisp_map", "make_effective_livetime_map", "make_map_background_irf", "make_map_exposure_true_energy", "make_observation_time_map", "make_psf_map", "make_theta_squared_table", "Geom", "HpxGeom", "HpxMap", "HpxNDMap", "LabelMapAxis", "Map", "MapAxes", "MapAxis", "MapCoord", "Maps", "RegionGeom", "RegionNDMap", "TimeMapAxis", "WcsGeom", "WcsMap", "WcsNDMap", "containment_radius", "containment_region", "Covariance", "Fit", "Parameter", "Parameters", "PriorParameter", "PriorParameters", "BrokenPowerLawSpectralModel", "CompoundSpectralModel", "ConstantFluxSpatialModel", "ConstantSpatialModel", "ConstantSpectralModel", "ConstantTemporalModel", "DatasetModels", "DiskSpatialModel", "EBLAbsorptionNormSpectralModel", "EBL_DATA_BUILTIN", "ExpCutoffPowerLaw3FGLSpectralModel", "ExpCutoffPowerLawNormSpectralModel", "ExpCutoffPowerLawSpectralModel", "ExpDecayTemporalModel", "FoVBackgroundModel", "GaussianSpatialModel", "GaussianSpectralModel", "GaussianTemporalModel", "GeneralizedGaussianSpatialModel", "GeneralizedGaussianTemporalModel", "LightCurveTemplateTemporalModel", "LinearTemporalModel", "LogParabolaNormSpectralModel", "LogParabolaSpectralModel", "MODEL_REGISTRY", "MeyerCrabSpectralModel", "Model", "ModelBase", "Models", "NaimaSpectralModel", "PiecewiseNormSpatialModel", "PiecewiseNormSpectralModel", "PointSpatialModel", "PowerLaw2SpectralModel", "PowerLawNormSpectralModel", "PowerLawSpectralModel", "PowerLawTemporalModel", "SPATIAL_MODEL_REGISTRY", "SPECTRAL_MODEL_REGISTRY", "ScaleSpectralModel", "Shell2SpatialModel", "ShellSpatialModel", "SineTemporalModel", "SkyModel", "SmoothBrokenPowerLawSpectralModel", "SpatialModel", "SpectralModel", "SuperExpCutoffPowerLaw3FGLSpectralModel", "SuperExpCutoffPowerLaw4FGLDR3SpectralModel", "SuperExpCutoffPowerLaw4FGLSpectralModel", "TEMPORAL_MODEL_REGISTRY", "TemplateNDSpatialModel", "TemplateNDSpectralModel", "TemplateNPredModel", "TemplatePhaseCurveTemporalModel", "TemplateSpatialModel", "TemplateSpectralModel", "TemporalModel", "create_cosmic_ray_spectral_model", "create_crab_spectral_model", "create_fermi_isotropic_diffuse_model", "integrate_spectrum", "read_hermes_cube", "scale_plot_flux", "read_hermes_cube", "select_nested_models", "stat_profile_ul_scipy", "CashCountsStatistic", "WStatCountsStatistic", "cash", "cash_sum_cython", "compute_chisq", "compute_flux_doubling", "compute_fpp", "compute_fvar", "cstat", "f_cash_root_cython", "get_wstat_gof_terms", "get_wstat_mu_bkg", "norm_bounds_cython", "wstat", "hierarchical_clustering", "standard_scaler", "D_SUN_TO_GALACTIC_CENTER", "cartesian", "fov_to_sky", "galactic", "motion_since_birth", "polar", "sky_to_fov", "velocity_glon_glat", "HDULocation", "LazyFitsData", "earth_location_from_dict", "trapz_loglog", "ScaledRegularGridInterpolator", "interpolate_profile", "interpolation_scale", "BACKEND_DEFAULT", "METHOD_DEFAULT", "METHOD_KWARGS_DEFAULT", "N_JOBS_DEFAULT", "POOL_KWARGS_DEFAULT", "multiprocessing_manager", "run_multiprocessing", "InverseCDFSampler", "draw", "get_random_state", "normalize", "pdf", "sample_powerlaw", "sample_sphere", "sample_sphere_distance", "sample_times", "compound_region_to_regions", "make_concentric_annulus_sky_regions", "make_orthogonal_rectangle_sky_regions", "region_to_frame", "regions_to_compound_region", "get_images_paths", "make_path", "read_yaml", "recursive_merge_dicts", "write_yaml", "hstack_columns", "table_row_to_dict", "table_standardise_units_copy", "table_standardise_units_inplace", "Checker", "assert_quantity_allclose", "assert_skycoord_allclose", "assert_time_allclose", "mpl_plot_check", "requires_data", "requires_dependency", "absolute_time", "time_ref_from_dict", "time_ref_to_dict", "time_relative_to_ref", "standardise_unit", "unit_from_fits_image_hdu", "MapPanelPlotter", "add_colorbar", "annotate_heatmap", "colormap_hess", "colormap_milagro", "plot_contour_line", "plot_distribution", "plot_heatmap", "plot_map_rgb", "plot_npred_signal", "plot_spectrum_datasets_off_regions", "plot_theta_squared_table", "Dependencies", "Developer How To", "Documentation How To", "Developer guide", "How to contribute to Gammapy", "PIGs", "PIG 1 - PIG purpose and guidelines", "PIG 2 - Organization of low level analysis code", "PIG 3 - Plan for dropping Python 2.7 support", "PIG 4 - Setup for tutorial notebooks and data", "PIG 5 - Gammapy 1.0 roadmap", "PIG 6 - CTA observation handling", "PIG 7 - Models", "PIG 8 - Datasets", "PIG 9 - Event sampling", "PIG 10 - Regions", "PIG 11 - Light curves", "PIG 12 - High level interface", "PIG 13 - Gammapy dependencies and distribution", "PIG 14 - Uncertainty estimation", "PIG 16 - Gammapy package structure", "PIG 18 - Documentation", "PIG 19 - Gammapy package structure follow up", "PIG 20 - Global Model API", "PIG 21 - Models improvements", "PIG 22 - Unified flux estimators API", "PIG 23 - Gammapy release cycle and version numbering", "PIG 24 - Authorship policy", "PIG 25 - Metadata container for Gammapy", "PIG 26 - Model Priors API", "How to make a Gammapy release", "Project setup", "Virtual Environments", "Getting started", "Installation", "Recommended Setup", "Troubleshooting", "Using Gammapy", "Gammapy", "Release notes", "0.1 (Aug 25, 2014)", "0.10 (Jan 28, 2019)", "0.11 (Mar 29, 2019)", "0.12 (May 30, 2019)", "0.13 (Jul 26, 2019)", "0.14 (Sep 30, 2019)", "0.15 (Dec 3, 2019)", "0.16 (Feb 1, 2020)", "0.17 (Apr 1, 2020)", "0.18 (Nov 4th, 2020)", "0.18.1 (Nov 6th, 2020)", "0.18.2 (Nov 19th, 2020)", "0.19 (Nov 22nd, 2021)", "0.2 (Apr 13, 2015)", "0.20 (May 12th, 2022)", "0.20.1 (June 16th, 2022)", "0.3 (Aug 13, 2015)", "0.4 (Apr 20, 2016)", "0.5 (Nov 22, 2016)", "0.6 (Apr 28, 2017)", "0.7 (Feb 28, 2018)", "0.8 (Sep 23, 2018)", "0.9 (Nov 29, 2018)", "1.0 (November 10th, 2022)", "1.0.1 (March 14th, 2023)", "1.0.2 (December 6th, 2023)", "1.1 (June 13th 2023)", "1.2 (February 29th 2024)", "1.3 (unreleased)", "Computation times", "Point source sensitivity", "Spectral analysis of extended sources", "Flux point fitting", "Computation times", "Spectral analysis", "Spectral analysis with the HLI", "Spectral analysis with energy-dependent directional cuts", "1D spectrum simulation", "Source detection and significance maps", "2D map fitting", "Ring background map", "Computation times", "3D detailed analysis", "Multi instrument joint 3D and 1D analysis", "Basic image exploration and fitting", "Morphological energy dependence estimation", "Event sampling", "Sample a source with energy-dependent temporal evolution", "Flux Profile Estimation", "Computation times", "3D map simulation", "Estimation of time variability in a lightcurve", "Light curves", "Light curves for flares", "Simulating and fitting a time varying source", "Pulsar analysis", "Computation times", "Dark matter spatial and spectral models", "Source catalogs", "Datasets - Reduced data, IRFs, models", "Fitting", "Using Gammapy IRFs", "Makers - Data reduction", "Maps", "Mask maps", "Modelling", "Models", "Observational clustering", "Priors", "Computation times", "CTA with Gammapy", "Fermi-LAT with Gammapy", "HAWC with Gammapy", "H.E.S.S. with Gammapy", "Computation times", "Tutorials", "Computation times", "Survey Map Script", "Computation times", "High level interface", "Low level API", "Data structures", "Computation times", "Dark matter", "Astrophysics", "Astrophysical source population models", "Astrophysical source models", "Pulsar Source Models", "Pulsar Wind Nebula Source Models", "Supernova Remnant Models", "Source catalogs", "Datasets (DL4)", "Data access and selection (DL3)", "Estimators (DL4 to DL5, and DL6)", "High Level Analysis Interface", "How To", "User guide", "Effective area", "Background", "Energy Dispersion", "Instrument Response Functions (DL3)", "Point Spread Function", "FoV background", "Data reduction (DL3 to DL4)", "Reflected regions background", "Ring background", "HEALPix-based maps", "Sky maps (DL4)", "RegionGeom and RegionNDMap", "Model gallery", "Computation times", "Constant spatial model", "Disk spatial model", "Gaussian spatial model", "Generalized gaussian spatial model", "Piecewise norm spatial model", "Point spatial model", "Shell spatial model", "Shell2 spatial model", "Template spatial model", "Computation times", "EBL absorption spectral model", "Broken power law spectral model", "Compound spectral model", "Constant spectral model", "Exponential cutoff power law spectral model", "Exponential cutoff power law spectral model used for 3FGL", "Exponential cutoff power law norm spectral model", "Gaussian spectral model", "Log parabola spectral model", "Log parabola spectral norm model", "Naima spectral model", "Piecewise  norm spectral model", "Power law spectral model", "Power law 2 spectral model", "Power law norm spectral model", "Smooth broken power law spectral model", "Super exponential cutoff power law model used for 3FGL", "Super Exponential Cutoff Power Law Model used for 4FGL-DR3", "Super Exponential Cutoff Power Law Model used for 4FGL-DR1 (and DR2)", "Template spectral model", "Computation times", "Constant temporal model", "ExpDecay temporal model", "Gaussian temporal model", "Generalized Gaussian temporal model", "Linear temporal model", "PowerLaw temporal model", "Sine temporal model", "Phase curve temporal model", "Light curve temporal model", "Computation times", "Modeling and Fitting (DL4 to DL5)", "Gammapy analysis workflow and package structure", "Glossary and references", "Command line tools", "Fit statistics", "Statistical utility functions", "Derivation of the WStat formula", "Utility functions", "Visualization"], "terms": {"tabl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], "dark": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 378, 386, 418, 423, 424, 426, 466, 472, 481, 504, 550], "matter": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 372, 378, 386, 418, 423, 424, 426, 459, 466, 468, 472, 481, 504, 550, 552], "spatial": [1, 46, 48, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 97, 100, 104, 105, 107, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 195, 201, 203, 206, 207, 210, 211, 218, 219, 222, 232, 234, 236, 241, 244, 245, 247, 249, 255, 257, 259, 269, 351, 353, 358, 364, 367, 370, 371, 372, 374, 376, 377, 382, 390, 398, 399, 401, 402, 403, 404, 406, 409, 417, 418, 420, 423, 424, 426, 429, 432, 434, 436, 439, 440, 442, 443, 444, 445, 447, 451, 452, 455, 456, 459, 462, 466, 468, 472, 476, 480, 481, 488, 490, 492, 493, 503, 504, 517, 549, 550, 551], "spectral": [1, 19, 20, 26, 52, 53, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 97, 100, 104, 105, 112, 116, 117, 119, 120, 121, 124, 126, 127, 131, 150, 152, 155, 159, 201, 203, 204, 205, 208, 210, 212, 214, 215, 216, 218, 220, 224, 226, 227, 229, 230, 232, 233, 235, 237, 238, 239, 242, 243, 247, 248, 250, 251, 252, 253, 256, 257, 258, 260, 262, 263, 277, 314, 364, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 382, 390, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 430, 434, 436, 439, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 459, 461, 462, 465, 466, 467, 468, 476, 477, 480, 481, 487, 488, 489, 490, 491, 492, 493, 499, 500, 501, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553], "model": [1, 6, 15, 16, 18, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 84, 88, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 107, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 131, 136, 142, 143, 150, 151, 152, 153, 155, 159, 162, 175, 182, 183, 185, 191, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 280, 283, 284, 354, 357, 358, 359, 362, 363, 364, 370, 371, 373, 374, 376, 378, 379, 382, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 434, 435, 437, 442, 445, 447, 452, 458, 459, 460, 461, 466, 468, 469, 472, 480, 481, 487, 488, 490, 492, 493, 497, 499, 500, 504, 507, 517, 538, 548, 550, 551, 554, 555], "handl": [3, 189, 279, 357, 359, 362, 370, 371, 372, 374, 379, 381, 382, 385, 387, 390, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 431, 433, 439, 440, 441, 443, 456, 458, 460, 462, 463, 468, 469, 472, 477, 478, 488, 489, 492, 551], "thi": [6, 15, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 56, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 86, 95, 97, 98, 99, 100, 103, 104, 105, 108, 112, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 165, 166, 168, 170, 172, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 202, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 269, 271, 272, 278, 287, 295, 305, 308, 311, 316, 317, 333, 336, 343, 345, 347, 348, 349, 353, 355, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 480, 481, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556], "page": [6, 83, 86, 199, 273, 279, 284, 359, 361, 363, 370, 372, 375, 378, 384, 387, 388, 390, 391, 395, 403, 404, 409, 412, 413, 416, 417, 418, 419, 457, 460, 470, 472, 490, 492, 503, 505, 553, 556], "give": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 131, 276, 277, 358, 363, 367, 368, 372, 373, 374, 375, 378, 379, 384, 388, 399, 401, 403, 411, 424, 432, 435, 442, 444, 448, 450, 455, 457, 458, 459, 460, 463, 467, 468, 476, 492, 497, 552, 553, 555, 556], "an": [6, 15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 50, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 100, 103, 104, 105, 106, 108, 110, 117, 119, 120, 121, 122, 124, 125, 127, 131, 132, 133, 137, 139, 140, 141, 142, 144, 147, 150, 152, 154, 155, 158, 162, 165, 167, 170, 172, 173, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 258, 259, 260, 265, 276, 278, 285, 287, 291, 305, 316, 320, 336, 342, 348, 349, 351, 354, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 394, 395, 398, 399, 402, 403, 404, 405, 406, 409, 411, 412, 413, 416, 417, 418, 420, 421, 423, 424, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 480, 482, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555], "overview": [6, 361, 388, 403, 404, 406, 409, 426, 452, 460, 463, 472, 478, 479, 492, 493, 506, 553], "all": [6, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 95, 97, 98, 99, 100, 102, 103, 104, 105, 116, 117, 118, 119, 120, 124, 125, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 156, 162, 169, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 269, 330, 331, 332, 333, 334, 335, 345, 354, 357, 358, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 431, 432, 433, 436, 437, 439, 441, 442, 443, 447, 449, 451, 452, 455, 456, 457, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 482, 488, 490, 492, 501, 503, 504, 505, 506, 528, 549, 552, 553, 554], "public": [6, 348, 349, 361, 363, 372, 377, 380, 383, 388, 413, 428, 440, 449, 450, 550, 557], "gammapi": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 380, 381, 382, 386, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 474, 476, 477, 478, 481, 482, 484, 485, 486, 492, 493, 494, 495, 496, 498, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 557], "object": [6, 15, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 95, 96, 97, 98, 99, 100, 104, 105, 117, 118, 119, 122, 123, 124, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 166, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 271, 272, 287, 291, 295, 296, 299, 307, 309, 311, 317, 320, 332, 333, 334, 335, 340, 345, 351, 353, 354, 355, 364, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 382, 384, 385, 390, 394, 400, 401, 403, 404, 405, 406, 409, 411, 416, 417, 418, 420, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 440, 442, 445, 447, 448, 449, 450, 451, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 470, 476, 477, 478, 482, 487, 488, 489, 490, 498, 501, 503, 504, 505, 549, 551, 552, 556], "function": [6, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 78, 79, 81, 83, 84, 86, 95, 96, 97, 98, 100, 103, 104, 105, 112, 117, 124, 127, 128, 129, 130, 133, 142, 143, 144, 146, 147, 149, 151, 152, 153, 155, 182, 183, 185, 187, 191, 194, 195, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 246, 247, 248, 250, 251, 252, 253, 256, 260, 265, 271, 272, 280, 300, 308, 309, 311, 312, 316, 317, 326, 343, 346, 347, 351, 353, 355, 357, 361, 364, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 381, 382, 383, 385, 386, 390, 394, 395, 397, 399, 400, 401, 402, 403, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 427, 431, 432, 433, 434, 435, 439, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 465, 470, 472, 476, 477, 478, 480, 481, 482, 487, 488, 489, 491, 492, 501, 503, 505, 510, 511, 513, 540, 549, 550, 551, 552, 553, 555, 557], "method": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 278, 285, 295, 299, 303, 307, 308, 309, 332, 345, 347, 357, 358, 361, 364, 367, 368, 369, 372, 373, 374, 376, 377, 378, 380, 382, 384, 385, 390, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 487, 489, 491, 492, 496, 499, 501, 502, 503, 505, 526, 540, 549, 550, 551, 552, 554], "class": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 271, 272, 295, 296, 299, 307, 309, 332, 345, 361, 364, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 386, 390, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 429, 431, 432, 433, 434, 435, 436, 437, 441, 443, 444, 447, 449, 452, 455, 456, 457, 458, 459, 460, 463, 465, 467, 468, 469, 476, 478, 483, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 500, 502, 503, 504, 505, 506, 528, 537, 549, 550, 551, 552, 557], "expos": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 367, 372, 373, 374, 377, 378, 422, 424, 460, 472, 490, 491, 550], "namespac": [6, 16, 80, 99, 118, 358, 377, 379, 402, 405, 415, 463, 481, 556], "ar": [6, 11, 15, 16, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 46, 57, 65, 68, 71, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 91, 95, 96, 97, 99, 100, 103, 104, 105, 107, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 162, 163, 168, 169, 170, 175, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 276, 287, 299, 305, 307, 319, 320, 333, 347, 349, 354, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 480, 481, 482, 483, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 509, 510, 518, 528, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557], "data": [6, 11, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 117, 118, 119, 120, 121, 122, 123, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 164, 168, 175, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 273, 278, 279, 281, 282, 284, 285, 286, 295, 296, 299, 317, 325, 328, 329, 337, 346, 347, 348, 349, 351, 352, 357, 359, 362, 365, 368, 369, 370, 371, 372, 374, 377, 378, 379, 380, 381, 382, 384, 386, 387, 390, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 429, 434, 435, 436, 437, 441, 443, 444, 447, 451, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 479, 480, 487, 488, 490, 492, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 511, 512, 524, 527, 529, 531, 532, 537, 549, 550, 551, 554, 555, 556], "dl3": [6, 16, 78, 79, 82, 84, 86, 91, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 168, 186, 187, 285, 286, 359, 364, 366, 367, 369, 378, 385, 390, 394, 400, 403, 405, 411, 420, 424, 428, 431, 432, 433, 436, 437, 439, 449, 450, 459, 461, 464, 474, 476, 477, 488, 492, 494, 495, 496, 498, 499, 501, 502, 550, 551], "observ": [6, 15, 16, 41, 78, 79, 81, 82, 83, 85, 86, 88, 89, 90, 91, 96, 97, 98, 99, 100, 103, 104, 105, 107, 152, 157, 158, 159, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 209, 212, 217, 221, 223, 224, 225, 240, 246, 258, 261, 273, 279, 284, 286, 295, 316, 362, 364, 370, 371, 372, 373, 374, 378, 380, 382, 385, 390, 399, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 428, 433, 434, 436, 437, 439, 440, 447, 448, 451, 452, 457, 465, 466, 467, 469, 470, 472, 474, 480, 488, 489, 492, 495, 497, 499, 501, 502, 528, 551, 552, 553, 554], "packag": [6, 11, 132, 287, 323, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 372, 375, 376, 378, 383, 384, 385, 387, 389, 390, 392, 393, 394, 395, 396, 397, 399, 402, 403, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 420, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 488, 491, 492, 493, 500, 505, 516, 524, 526, 527, 540, 552, 556], "irf": [6, 78, 84, 91, 97, 98, 100, 103, 104, 105, 106, 107, 108, 110, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 168, 169, 171, 172, 173, 175, 177, 178, 181, 190, 193, 247, 286, 358, 359, 364, 368, 369, 370, 371, 374, 377, 378, 379, 380, 386, 390, 398, 400, 403, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 428, 429, 431, 432, 433, 434, 435, 436, 439, 443, 444, 447, 449, 451, 459, 461, 464, 465, 466, 468, 469, 470, 472, 476, 477, 488, 489, 492, 494, 495, 496, 498, 499, 504, 549, 550, 551], "instrument": [6, 79, 90, 103, 142, 146, 147, 218, 358, 368, 369, 370, 371, 373, 378, 382, 390, 394, 403, 406, 418, 419, 420, 426, 428, 429, 431, 432, 435, 439, 446, 452, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 470, 472, 476, 477, 488, 489, 490, 494, 496, 498, 549, 550, 551], "respons": [6, 103, 139, 140, 141, 144, 146, 147, 165, 358, 364, 365, 367, 369, 370, 371, 373, 374, 382, 384, 390, 416, 417, 418, 419, 428, 431, 432, 433, 434, 447, 451, 458, 459, 462, 467, 470, 472, 476, 477, 488, 489, 494, 496, 498, 550, 551], "maker": [6, 141, 152, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 364, 371, 373, 384, 403, 405, 406, 411, 420, 423, 424, 426, 427, 431, 433, 434, 437, 441, 443, 444, 447, 451, 452, 456, 458, 461, 466, 469, 470, 472, 488, 489, 502, 504, 551], "reduct": [6, 11, 158, 364, 370, 371, 374, 378, 379, 380, 385, 390, 403, 405, 423, 426, 437, 441, 442, 445, 452, 456, 458, 461, 462, 464, 466, 472, 488, 489, 492, 499, 501, 502, 504, 550, 551], "util": [6, 91, 99, 106, 109, 110, 111, 118, 119, 121, 128, 129, 130, 131, 132, 133, 134, 135, 141, 171, 172, 173, 174, 175, 176, 177, 178, 179, 268, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 358, 367, 369, 370, 371, 372, 382, 397, 400, 401, 402, 403, 410, 411, 414, 415, 416, 417, 418, 419, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 480, 481, 492, 551], "modul": [6, 246, 358, 359, 363, 367, 374, 379, 397, 399, 405, 417, 451, 455, 459, 462, 480, 481, 482, 483, 528, 545, 556], "dataset": [6, 15, 16, 19, 20, 26, 62, 89, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 127, 131, 132, 133, 135, 140, 141, 147, 152, 155, 157, 158, 159, 162, 163, 164, 167, 168, 169, 189, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 307, 351, 354, 355, 361, 362, 364, 366, 371, 373, 374, 375, 377, 378, 382, 386, 387, 388, 390, 392, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 426, 429, 431, 434, 435, 441, 442, 443, 445, 447, 452, 454, 455, 460, 463, 464, 466, 467, 468, 470, 472, 474, 478, 489, 490, 492, 497, 499, 500, 501, 502, 504, 512, 516, 518, 546, 547, 549, 550, 551, 552, 553, 554], "reduc": [6, 11, 15, 95, 97, 100, 104, 105, 150, 152, 155, 160, 170, 182, 183, 185, 187, 191, 194, 195, 364, 365, 367, 369, 370, 374, 377, 379, 384, 385, 390, 397, 402, 409, 418, 424, 426, 428, 429, 432, 433, 434, 439, 440, 443, 447, 449, 450, 451, 461, 464, 466, 469, 472, 488, 492, 497, 502, 504, 505, 510, 511, 549, 550, 551, 552], "map": [6, 15, 16, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 79, 80, 83, 86, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 127, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 207, 210, 211, 218, 219, 222, 224, 232, 234, 236, 244, 245, 247, 249, 255, 256, 257, 259, 260, 267, 309, 345, 346, 351, 353, 355, 357, 358, 359, 361, 365, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 385, 390, 394, 398, 399, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 423, 424, 426, 427, 428, 431, 432, 433, 434, 438, 439, 442, 443, 444, 445, 446, 448, 449, 450, 451, 455, 456, 459, 463, 466, 467, 468, 469, 470, 472, 473, 476, 477, 480, 487, 488, 489, 491, 492, 496, 497, 498, 499, 500, 501, 502, 508, 510, 511, 512, 513, 516, 547, 549, 550, 551], "sky": [6, 13, 41, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 91, 97, 100, 103, 104, 105, 112, 132, 140, 141, 152, 155, 175, 181, 182, 183, 185, 190, 191, 193, 194, 195, 210, 232, 247, 259, 262, 264, 289, 293, 294, 318, 320, 322, 345, 357, 358, 359, 371, 377, 390, 399, 401, 415, 416, 418, 431, 432, 434, 435, 437, 447, 451, 452, 455, 460, 463, 467, 468, 472, 474, 476, 477, 478, 480, 487, 488, 489, 492, 497, 498, 501, 503, 505, 509, 510, 514, 515, 516, 550, 551], "fit": [6, 15, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 58, 60, 61, 63, 64, 65, 69, 71, 72, 74, 78, 79, 80, 81, 82, 83, 84, 86, 89, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 159, 162, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 200, 202, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 257, 258, 259, 260, 269, 270, 271, 272, 273, 274, 279, 281, 284, 295, 296, 297, 340, 341, 344, 346, 351, 353, 357, 358, 359, 364, 368, 369, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 385, 386, 390, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 414, 416, 417, 418, 419, 421, 423, 424, 426, 427, 430, 434, 435, 437, 438, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 469, 470, 472, 474, 478, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 504, 509, 516, 518, 528, 546, 547, 550, 551, 556], "estim": [6, 19, 20, 26, 50, 70, 96, 100, 105, 107, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 157, 163, 164, 165, 171, 180, 181, 190, 193, 195, 199, 200, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 269, 275, 278, 282, 307, 351, 362, 364, 367, 371, 372, 373, 374, 377, 380, 386, 390, 399, 400, 403, 404, 405, 406, 409, 410, 411, 415, 416, 417, 418, 420, 423, 424, 426, 427, 431, 433, 437, 439, 440, 441, 444, 446, 450, 451, 452, 453, 456, 457, 461, 465, 469, 472, 476, 477, 488, 492, 502, 504, 549, 550, 551, 553, 555], "high": [6, 15, 58, 61, 62, 79, 139, 187, 310, 358, 362, 363, 364, 371, 372, 373, 378, 385, 401, 402, 403, 404, 405, 409, 417, 418, 426, 427, 429, 432, 435, 436, 439, 445, 447, 449, 454, 455, 456, 459, 461, 467, 468, 469, 470, 472, 477, 478, 479, 487, 490, 497, 504, 550, 551, 552, 553], "level": [6, 11, 15, 16, 79, 80, 99, 116, 118, 199, 271, 272, 358, 359, 361, 362, 363, 369, 371, 373, 377, 378, 379, 382, 385, 390, 394, 401, 402, 403, 404, 405, 409, 417, 424, 426, 428, 429, 431, 432, 435, 436, 437, 439, 441, 443, 447, 448, 449, 450, 451, 452, 454, 457, 462, 464, 467, 468, 469, 470, 472, 474, 478, 479, 488, 489, 490, 497, 499, 500, 504, 549, 550, 551, 552, 556], "analysi": [6, 16, 57, 65, 68, 70, 71, 79, 97, 99, 100, 104, 105, 109, 111, 164, 168, 357, 358, 359, 362, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 387, 388, 389, 390, 391, 394, 395, 398, 399, 400, 402, 403, 404, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 429, 430, 435, 436, 437, 438, 442, 443, 445, 446, 447, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 477, 478, 480, 489, 490, 492, 493, 497, 499, 500, 501, 502, 504, 505, 531, 549, 551, 552, 554], "interfac": [6, 11, 15, 19, 20, 83, 86, 198, 199, 200, 201, 202, 203, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 362, 363, 364, 368, 370, 371, 373, 375, 376, 377, 378, 399, 402, 404, 405, 406, 409, 413, 416, 417, 423, 426, 432, 435, 436, 439, 447, 449, 457, 463, 467, 472, 477, 478, 479, 492, 503, 528, 549, 550, 551, 552], "catalog": [6, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 120, 372, 378, 397, 401, 403, 405, 409, 410, 411, 414, 415, 416, 417, 418, 420, 424, 426, 429, 435, 440, 456, 463, 466, 468, 472, 482, 516, 550, 551], "sourc": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 390, 395, 397, 399, 403, 404, 409, 410, 415, 416, 417, 418, 423, 424, 426, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 472, 474, 476, 477, 480, 481, 486, 488, 489, 490, 492, 497, 500, 501, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554], "astro": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 120, 175, 182, 183, 185, 194, 195, 242, 260, 358, 359, 370, 377, 378, 382, 387, 401, 410, 414, 418, 420, 424, 433, 454, 458, 460, 467, 481, 482, 484, 485, 486, 489, 551], "astrophys": [6, 23, 291, 373, 492, 550, 551], "darkmatt": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 242, 359, 378, 418, 454, 481], "popul": [6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 359, 378, 416, 481, 483, 528, 550], "stat": [6, 95, 96, 100, 105, 117, 119, 120, 121, 124, 125, 127, 199, 200, 202, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 351, 358, 370, 378, 386, 388, 394, 401, 403, 404, 405, 406, 409, 415, 418, 419, 420, 424, 428, 429, 431, 432, 433, 437, 439, 440, 441, 442, 445, 448, 452, 457, 465, 468, 476, 477, 490, 552, 553, 554], "statist": [6, 19, 20, 26, 75, 94, 95, 96, 97, 100, 104, 105, 116, 117, 119, 120, 121, 124, 125, 127, 133, 135, 162, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 243, 248, 250, 251, 252, 253, 256, 260, 269, 270, 271, 272, 273, 274, 279, 284, 370, 373, 376, 377, 378, 380, 386, 400, 404, 405, 406, 409, 411, 423, 424, 427, 432, 434, 435, 436, 437, 439, 441, 445, 447, 448, 449, 451, 452, 456, 457, 459, 465, 476, 477, 488, 490, 492, 502, 550, 551], "script": [6, 83, 86, 119, 323, 324, 325, 326, 327, 359, 364, 365, 367, 369, 372, 374, 377, 378, 384, 387, 388, 398, 399, 400, 401, 409, 410, 414, 417, 418, 419, 420, 424, 426, 431, 435, 437, 439, 440, 441, 442, 443, 445, 450, 451, 454, 455, 456, 457, 459, 465, 468, 473, 476, 491, 492, 552], "command": [6, 13, 89, 96, 119, 143, 149, 151, 153, 357, 359, 361, 366, 367, 369, 374, 375, 388, 389, 390, 391, 392, 393, 399, 403, 414, 417, 418, 420, 443, 491, 550], "line": [6, 13, 46, 78, 79, 83, 86, 96, 97, 100, 104, 105, 143, 149, 151, 153, 190, 191, 210, 232, 319, 320, 355, 357, 359, 361, 364, 367, 369, 372, 374, 375, 382, 388, 389, 390, 392, 394, 403, 414, 417, 439, 457, 459, 463, 480, 492, 505, 550], "tool": [6, 13, 182, 183, 185, 194, 195, 357, 361, 365, 367, 369, 371, 374, 375, 378, 384, 395, 403, 414, 417, 418, 442, 445, 451, 456, 457, 460, 464, 467, 468, 480, 492, 526, 550, 551], "visual": [6, 183, 195, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 372, 404, 405, 423, 424, 431, 433, 437, 439, 441, 444, 457, 458, 464, 469, 470, 477, 478, 492, 501, 506, 509, 550], "plot": [6, 19, 20, 26, 64, 65, 79, 84, 96, 97, 100, 104, 105, 119, 122, 123, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 155, 182, 183, 184, 185, 187, 190, 191, 192, 194, 195, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 263, 267, 336, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 359, 372, 373, 374, 376, 377, 379, 382, 394, 397, 400, 403, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 427, 428, 429, 433, 436, 437, 439, 440, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 461, 463, 464, 465, 467, 468, 469, 470, 476, 478, 482, 484, 485, 486, 488, 492, 494, 495, 496, 498, 501, 546, 547, 554, 556], "featur": [6, 13, 83, 86, 91, 112, 132, 285, 286, 348, 349, 358, 361, 365, 367, 368, 369, 370, 372, 374, 375, 380, 381, 382, 384, 385, 386, 391, 396, 399, 400, 401, 402, 403, 405, 406, 409, 413, 416, 417, 418, 419, 448, 460, 461, 463, 464, 480, 490, 528], "cluster": [6, 91, 285, 286, 371, 423, 424, 426, 466, 472, 489, 492], "coordin": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 46, 47, 79, 81, 83, 84, 85, 86, 89, 90, 91, 97, 98, 100, 103, 104, 105, 117, 119, 121, 122, 123, 128, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 165, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 210, 211, 219, 222, 224, 232, 234, 236, 244, 245, 247, 259, 276, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 309, 315, 319, 320, 334, 359, 363, 364, 365, 367, 371, 372, 377, 378, 381, 383, 384, 397, 399, 402, 404, 415, 417, 418, 420, 427, 428, 431, 433, 434, 437, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 477, 478, 488, 496, 501, 503, 504, 509, 510, 513, 550, 551, 556], "integr": [6, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 37, 51, 97, 100, 104, 105, 117, 119, 122, 124, 131, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 157, 182, 183, 185, 187, 191, 194, 195, 196, 197, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 298, 357, 365, 367, 369, 371, 372, 373, 375, 376, 378, 382, 384, 397, 399, 400, 404, 405, 409, 414, 415, 416, 417, 418, 419, 420, 423, 433, 434, 436, 451, 454, 455, 456, 460, 461, 463, 478, 480, 488, 490, 496, 511, 531], "interpol": [6, 26, 89, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 162, 181, 182, 183, 185, 187, 191, 192, 194, 195, 212, 224, 234, 235, 255, 256, 258, 259, 260, 270, 299, 300, 301, 357, 369, 370, 371, 399, 404, 409, 411, 414, 417, 419, 420, 421, 422, 423, 424, 444, 458, 459, 463, 468, 469, 492, 500, 504, 537], "random": [6, 33, 42, 45, 46, 47, 83, 86, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 310, 311, 312, 313, 314, 315, 316, 317, 361, 370, 371, 374, 401, 413, 417, 443, 463, 492, 553, 554, 556], "region": [6, 27, 79, 86, 95, 97, 100, 102, 104, 105, 109, 111, 121, 123, 126, 128, 140, 141, 147, 152, 155, 157, 158, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 181, 182, 183, 185, 190, 191, 193, 194, 195, 197, 199, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 257, 259, 260, 262, 272, 284, 318, 319, 320, 321, 322, 354, 355, 357, 359, 362, 364, 365, 373, 374, 375, 377, 380, 382, 390, 401, 402, 403, 405, 409, 411, 412, 414, 415, 417, 418, 420, 422, 423, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 460, 463, 465, 467, 468, 469, 470, 476, 477, 478, 487, 488, 489, 490, 492, 499, 500, 502, 503, 504, 509, 510, 528, 550, 551, 553, 554, 555], "parallel": [6, 88, 120, 121, 124, 127, 158, 302, 303, 304, 305, 306, 307, 308, 361, 375, 388, 411, 423, 424, 456], "test": [6, 89, 96, 109, 111, 114, 116, 117, 119, 120, 121, 124, 125, 127, 133, 150, 152, 155, 182, 183, 185, 191, 194, 195, 224, 269, 270, 271, 272, 275, 317, 332, 333, 334, 335, 336, 337, 338, 359, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 383, 386, 387, 388, 398, 400, 401, 403, 405, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 423, 428, 434, 435, 444, 447, 449, 450, 451, 456, 458, 490, 492, 496, 502, 546, 547, 551, 554], "time": [6, 19, 20, 50, 51, 52, 53, 74, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 95, 96, 97, 98, 99, 100, 103, 104, 105, 117, 118, 119, 124, 127, 128, 134, 158, 164, 175, 177, 182, 183, 184, 185, 191, 192, 194, 195, 199, 200, 202, 209, 212, 217, 221, 223, 224, 225, 240, 246, 247, 258, 261, 276, 317, 335, 339, 340, 341, 342, 358, 359, 361, 363, 364, 365, 366, 368, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 388, 390, 394, 398, 399, 402, 403, 404, 406, 409, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 431, 433, 434, 435, 437, 439, 441, 442, 444, 445, 449, 452, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 476, 477, 478, 484, 485, 486, 488, 489, 490, 492, 497, 500, 505, 510, 511, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555], "unit": [6, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 64, 79, 81, 83, 84, 86, 91, 96, 97, 100, 102, 104, 105, 106, 109, 110, 111, 112, 117, 119, 121, 123, 127, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 162, 165, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 200, 202, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 262, 263, 285, 286, 287, 317, 329, 330, 331, 333, 342, 343, 344, 347, 348, 349, 353, 359, 367, 369, 372, 374, 376, 381, 382, 386, 398, 399, 401, 409, 411, 417, 418, 420, 421, 422, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 482, 484, 485, 486, 489, 490, 492, 494, 496, 497, 499, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551], "built": [10, 169, 212, 326, 342, 357, 358, 359, 369, 370, 372, 374, 375, 377, 385, 388, 395, 418, 423, 455, 462, 468, 472, 488], "cli": [11, 374, 419, 550], "i": [11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 284, 285, 287, 289, 293, 295, 298, 299, 300, 305, 307, 308, 311, 314, 315, 316, 317, 319, 320, 325, 327, 329, 333, 335, 336, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 480, 481, 482, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557], "python": [11, 16, 80, 99, 118, 132, 287, 327, 357, 361, 362, 363, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 401, 402, 409, 411, 414, 415, 416, 417, 418, 419, 420, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 480, 491, 492, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552], "gamma": [11, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 52, 53, 57, 59, 62, 64, 65, 75, 79, 116, 120, 126, 151, 175, 182, 183, 185, 194, 195, 212, 214, 215, 216, 237, 238, 239, 260, 263, 314, 358, 364, 366, 369, 370, 371, 372, 382, 387, 388, 390, 394, 395, 400, 414, 415, 416, 417, 418, 427, 429, 431, 432, 433, 437, 440, 441, 442, 443, 445, 455, 458, 460, 461, 464, 467, 469, 470, 476, 478, 480, 482, 483, 487, 488, 489, 492, 495, 497, 499, 501, 502, 511, 518, 522, 523, 530, 531, 549, 550, 551, 552, 553, 554, 557], "rai": [11, 19, 20, 26, 52, 53, 57, 59, 62, 64, 79, 88, 116, 120, 121, 124, 126, 127, 128, 158, 212, 262, 263, 277, 278, 307, 308, 364, 369, 370, 372, 376, 387, 388, 390, 394, 395, 400, 416, 418, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 480, 482, 483, 487, 488, 489, 492, 495, 497, 499, 501, 502, 518, 549, 550, 551, 552, 553, 554, 557], "astronomi": [11, 263, 357, 368, 372, 376, 388, 395, 416, 428, 431, 437, 441, 459, 467, 492, 501, 502, 549, 550, 551, 552, 553, 554, 556, 557], "us": [11, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 46, 47, 53, 56, 57, 59, 63, 67, 68, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 270, 273, 285, 287, 295, 298, 299, 300, 307, 308, 311, 316, 317, 323, 326, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 444, 445, 447, 448, 450, 451, 452, 454, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 478, 481, 482, 492, 494, 495, 496, 498, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 556, 557], "help": [11, 83, 86, 273, 279, 358, 361, 363, 365, 372, 373, 374, 378, 384, 387, 388, 389, 394, 398, 399, 400, 417, 418, 420, 455, 459, 460, 462, 468, 470, 478, 492, 552], "see": [11, 13, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 64, 78, 79, 81, 83, 85, 86, 90, 94, 95, 96, 97, 100, 104, 105, 112, 114, 116, 119, 120, 121, 124, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 158, 165, 167, 175, 180, 181, 183, 185, 187, 188, 190, 193, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 264, 273, 279, 281, 282, 284, 287, 295, 311, 326, 348, 349, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 378, 379, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 415, 416, 417, 418, 419, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 472, 476, 478, 480, 488, 489, 492, 502, 503, 505, 531, 535, 536, 549, 551, 552, 553, 554, 556], "avail": [11, 13, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 65, 68, 70, 74, 79, 83, 84, 86, 96, 97, 100, 104, 105, 116, 117, 119, 120, 124, 125, 127, 135, 156, 162, 168, 169, 199, 200, 202, 206, 207, 211, 212, 219, 222, 234, 236, 244, 245, 249, 255, 257, 259, 263, 311, 346, 358, 361, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 378, 385, 388, 389, 390, 391, 392, 393, 399, 403, 404, 405, 409, 412, 416, 418, 420, 423, 431, 432, 435, 457, 459, 461, 463, 467, 468, 472, 476, 478, 480, 482, 483, 489, 491, 492, 494, 495, 496, 498, 506, 518, 550, 552, 554], "sub": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 109, 111, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 182, 183, 184, 185, 187, 191, 192, 194, 195, 198, 358, 361, 365, 367, 368, 372, 377, 378, 379, 380, 385, 388, 397, 399, 403, 405, 406, 414, 416, 417, 441, 443, 459, 461, 463, 469, 470, 488, 491, 492, 500, 550, 552, 556], "well": [11, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 79, 83, 86, 100, 105, 109, 111, 116, 117, 125, 181, 185, 187, 191, 193, 200, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 348, 349, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 391, 394, 395, 398, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 417, 418, 419, 423, 424, 428, 434, 437, 442, 444, 449, 451, 456, 457, 458, 459, 460, 461, 463, 467, 468, 472, 476, 477, 478, 488, 489, 490, 501, 504, 505, 549, 550, 552, 554], "argument": [11, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 79, 80, 82, 83, 84, 86, 87, 88, 95, 96, 97, 99, 100, 103, 104, 105, 118, 119, 120, 122, 124, 135, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 158, 168, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 270, 285, 287, 299, 305, 307, 308, 345, 346, 347, 351, 352, 353, 354, 355, 361, 364, 370, 373, 405, 406, 409, 411, 417, 423, 424, 435, 439, 444, 457, 459, 460, 463, 464, 477, 490, 492, 503, 504, 505, 528, 552], "option": [11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 270, 271, 272, 276, 277, 278, 284, 285, 287, 298, 308, 311, 314, 315, 316, 317, 319, 320, 327, 329, 340, 341, 345, 346, 347, 352, 353, 354, 355, 358, 361, 363, 364, 366, 367, 369, 370, 372, 374, 376, 378, 381, 385, 388, 389, 390, 391, 392, 398, 399, 400, 403, 405, 406, 409, 411, 415, 417, 418, 419, 420, 422, 423, 424, 439, 447, 449, 451, 455, 456, 459, 460, 461, 463, 464, 467, 468, 476, 477, 488, 490, 492, 504, 505, 547, 552], "each": [11, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 82, 83, 86, 87, 95, 97, 100, 103, 104, 105, 109, 111, 112, 114, 116, 117, 119, 120, 124, 126, 127, 128, 129, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 163, 164, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 232, 233, 234, 235, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 285, 323, 347, 356, 358, 361, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 382, 384, 388, 389, 396, 403, 406, 417, 420, 423, 428, 434, 435, 437, 439, 440, 441, 443, 444, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 477, 481, 487, 488, 489, 492, 496, 497, 498, 504, 505, 512, 528, 529, 551, 552, 555, 556], "For": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 78, 83, 84, 86, 90, 94, 96, 97, 100, 104, 105, 112, 114, 116, 117, 119, 120, 121, 124, 125, 126, 127, 139, 140, 141, 147, 152, 155, 162, 167, 169, 172, 173, 175, 176, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 232, 233, 234, 235, 236, 237, 239, 240, 244, 245, 246, 248, 249, 251, 252, 253, 255, 259, 260, 273, 277, 279, 284, 290, 305, 357, 358, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 399, 400, 401, 403, 404, 405, 406, 409, 416, 420, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 445, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 476, 477, 478, 480, 487, 488, 490, 492, 502, 504, 505, 510, 515, 547, 551, 552, 554, 555, 556], "further": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 112, 116, 120, 121, 124, 127, 188, 311, 358, 361, 362, 364, 367, 368, 371, 372, 375, 377, 378, 379, 380, 381, 404, 405, 406, 409, 411, 437, 443, 454, 455, 456, 460, 478, 481, 482, 497, 552], "inform": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 84, 86, 89, 94, 95, 96, 97, 99, 100, 104, 105, 117, 118, 119, 139, 143, 149, 151, 153, 154, 157, 162, 163, 169, 188, 199, 204, 205, 206, 207, 208, 209, 211, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 233, 234, 235, 236, 237, 239, 240, 244, 245, 246, 248, 251, 252, 253, 255, 256, 259, 260, 273, 279, 295, 311, 340, 341, 358, 362, 363, 368, 370, 371, 372, 373, 374, 381, 382, 385, 386, 388, 393, 394, 395, 403, 405, 406, 409, 411, 417, 423, 424, 429, 432, 433, 440, 443, 444, 447, 448, 456, 457, 459, 460, 463, 467, 468, 469, 470, 476, 477, 478, 487, 488, 489, 490, 492, 505, 551, 552, 555], "http": [11, 13, 16, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 62, 63, 65, 79, 80, 83, 84, 86, 99, 112, 118, 120, 128, 139, 142, 168, 175, 181, 187, 190, 193, 199, 210, 229, 232, 238, 239, 252, 253, 260, 262, 263, 277, 278, 287, 314, 315, 326, 361, 375, 378, 383, 384, 387, 388, 389, 390, 391, 392, 396, 400, 417, 427, 431, 434, 436, 439, 440, 441, 447, 451, 454, 455, 457, 458, 459, 467, 470, 489, 503, 505, 531, 535, 536, 552], "org": [11, 34, 62, 63, 79, 83, 84, 86, 168, 199, 238, 239, 252, 253, 277, 287, 361, 366, 375, 378, 383, 384, 387, 389, 390, 392, 396, 415, 417, 427, 434, 436, 439, 440, 441, 447, 451, 454, 455, 457, 459, 467, 535, 536, 552], "doc": [11, 13, 16, 79, 80, 83, 86, 99, 118, 139, 181, 187, 190, 193, 199, 210, 232, 287, 323, 358, 359, 361, 363, 366, 372, 374, 375, 377, 378, 387, 394, 395, 397, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 505, 516, 518, 524, 527, 540, 546, 547, 551, 552, 556], "exampl": [11, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 65, 76, 78, 79, 81, 82, 83, 84, 85, 86, 89, 91, 94, 96, 97, 100, 104, 105, 106, 109, 110, 111, 112, 114, 116, 119, 121, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 150, 152, 155, 162, 165, 167, 181, 182, 183, 185, 188, 191, 193, 194, 195, 201, 203, 224, 230, 260, 263, 269, 285, 286, 307, 311, 317, 326, 337, 338, 343, 346, 348, 349, 351, 353, 355, 358, 359, 361, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 384, 385, 386, 390, 391, 392, 394, 398, 400, 403, 406, 409, 410, 411, 414, 416, 417, 418, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 492, 494, 495, 496, 498, 503, 505, 506, 507, 517, 538, 546, 547, 548, 552, 554, 556, 557], "version": [11, 74, 79, 81, 83, 84, 86, 119, 120, 121, 124, 170, 200, 202, 357, 359, 361, 362, 365, 366, 367, 368, 372, 375, 378, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 402, 403, 408, 410, 411, 413, 416, 417, 418, 420, 421, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 490, 552], "arg": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 80, 83, 86, 99, 104, 105, 118, 136, 137, 138, 142, 143, 144, 146, 149, 150, 151, 153, 154, 183, 184, 191, 205, 218, 230, 237, 238, 239, 310, 552], "log_level": 11, "verbos": [11, 78, 359, 381, 552, 554], "debug": [11, 358, 364, 369, 374, 420, 431, 460, 492, 552], "warn": [11, 16, 26, 78, 80, 83, 86, 99, 118, 183, 200, 201, 202, 203, 255, 256, 257, 259, 344, 383, 388, 400, 417, 422, 423, 424, 427, 434, 435, 436, 439, 440, 441, 443, 444, 447, 451, 452, 467, 468, 492, 516, 524, 527, 552], "error": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 66, 75, 80, 82, 97, 99, 100, 104, 105, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 158, 184, 187, 192, 200, 202, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 271, 272, 276, 277, 278, 336, 358, 359, 372, 373, 374, 376, 381, 382, 385, 386, 399, 403, 405, 407, 409, 410, 412, 416, 417, 420, 422, 423, 424, 428, 429, 431, 432, 434, 436, 439, 440, 441, 442, 444, 447, 448, 449, 451, 452, 455, 463, 464, 465, 467, 476, 477, 478, 480, 488, 490, 492, 510, 528, 537, 549, 552], "ignor": [11, 83, 86, 146, 156, 185, 200, 202, 218, 287, 299, 359, 411, 445, 451, 452, 456, 461, 476, 492, 552], "print": [11, 65, 78, 79, 81, 82, 83, 84, 86, 89, 91, 96, 97, 104, 106, 110, 116, 119, 121, 127, 132, 133, 137, 139, 142, 143, 149, 151, 153, 162, 165, 201, 203, 210, 224, 232, 263, 285, 286, 295, 326, 358, 359, 369, 370, 373, 382, 385, 393, 394, 427, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 476, 477, 478, 490, 492, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 556], "exit": [11, 15, 83, 86, 201, 203, 210, 232, 399, 516, 552], "autom": [11, 366, 374, 384, 387, 388, 411, 457, 552], "configur": [11, 15, 16, 46, 80, 83, 86, 96, 99, 104, 105, 112, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 127, 307, 358, 359, 361, 367, 369, 373, 374, 378, 379, 385, 388, 394, 402, 404, 405, 409, 411, 420, 423, 424, 431, 433, 441, 443, 444, 467, 472, 491, 497, 551, 552], "driven": [11, 15, 364, 374, 376, 378, 417, 472, 491], "process": [11, 79, 88, 120, 121, 124, 127, 158, 183, 195, 306, 307, 308, 317, 358, 359, 361, 363, 364, 366, 367, 368, 370, 371, 373, 374, 380, 383, 384, 385, 391, 395, 401, 406, 409, 411, 417, 424, 428, 431, 441, 443, 444, 455, 456, 459, 469, 474, 477, 482, 489, 491, 492, 550, 551, 552], "overwrit": [11, 15, 16, 19, 20, 26, 78, 79, 84, 88, 95, 96, 97, 100, 102, 104, 105, 117, 119, 140, 141, 147, 152, 155, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 200, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 255, 256, 257, 258, 259, 307, 382, 418, 420, 431, 432, 439, 440, 443, 444, 445, 458, 460, 461, 462, 463, 467, 468, 474, 476, 477, 488, 492, 505, 516, 552], "filenam": [11, 16, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 81, 82, 83, 86, 89, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 121, 123, 125, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 182, 183, 185, 189, 191, 194, 195, 210, 212, 224, 232, 255, 256, 257, 258, 259, 260, 264, 266, 268, 269, 295, 325, 327, 337, 358, 359, 363, 406, 431, 432, 436, 437, 439, 440, 444, 445, 455, 456, 460, 461, 462, 463, 467, 468, 476, 477, 478, 489, 492, 494, 495, 496, 498, 516, 518, 546, 547, 552], "myconfig": [11, 552], "yaml": [11, 15, 16, 20, 26, 80, 94, 95, 96, 97, 99, 100, 104, 105, 117, 118, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 325, 327, 357, 366, 367, 369, 370, 371, 374, 375, 380, 385, 386, 388, 389, 401, 402, 403, 406, 411, 420, 424, 427, 428, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 477, 478, 491, 549, 550, 551, 552], "write": [11, 15, 16, 26, 78, 79, 82, 83, 84, 86, 95, 96, 97, 100, 102, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 182, 183, 185, 189, 191, 194, 195, 210, 224, 232, 255, 256, 257, 258, 259, 327, 336, 359, 361, 367, 368, 369, 370, 371, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 388, 394, 397, 403, 406, 411, 413, 416, 417, 418, 419, 424, 427, 431, 439, 440, 443, 445, 458, 462, 463, 467, 468, 474, 476, 477, 492, 497, 553, 555], "default": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 63, 65, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 277, 278, 279, 284, 285, 287, 298, 299, 300, 305, 307, 308, 314, 315, 316, 317, 319, 320, 325, 327, 329, 335, 340, 341, 345, 347, 348, 349, 351, 352, 354, 355, 358, 364, 370, 374, 375, 381, 384, 388, 394, 400, 402, 403, 404, 406, 409, 411, 417, 418, 420, 421, 422, 423, 424, 432, 433, 435, 437, 439, 443, 444, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 468, 476, 477, 478, 488, 490, 492, 499, 502, 503, 504, 505, 509, 510, 511, 518, 524, 527, 528, 552, 556], "file": [11, 15, 16, 26, 63, 64, 65, 78, 79, 81, 82, 83, 84, 86, 88, 89, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 163, 168, 182, 183, 185, 189, 191, 194, 195, 210, 212, 224, 232, 255, 256, 257, 258, 259, 260, 295, 325, 327, 357, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 392, 394, 402, 403, 409, 411, 413, 415, 416, 417, 418, 420, 421, 423, 424, 426, 427, 430, 433, 434, 438, 439, 441, 443, 444, 446, 447, 451, 453, 455, 456, 459, 460, 461, 462, 463, 466, 469, 470, 471, 472, 473, 475, 478, 479, 480, 491, 492, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556], "store": [11, 15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 78, 79, 81, 82, 83, 86, 117, 118, 119, 122, 124, 150, 163, 164, 182, 183, 185, 191, 194, 195, 199, 200, 202, 210, 232, 341, 358, 361, 364, 366, 367, 368, 370, 371, 374, 376, 380, 382, 384, 385, 388, 406, 409, 410, 428, 433, 434, 443, 444, 448, 452, 456, 457, 458, 459, 460, 461, 464, 467, 468, 469, 470, 478, 488, 489, 492, 497, 498, 499, 504, 505, 528, 549, 550, 552, 556], "valu": [11, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 52, 79, 80, 82, 83, 84, 86, 87, 90, 94, 95, 96, 97, 99, 100, 104, 105, 107, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 158, 162, 168, 169, 171, 172, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 269, 270, 271, 272, 273, 275, 276, 277, 287, 291, 299, 300, 314, 317, 326, 329, 344, 347, 348, 349, 359, 361, 364, 369, 370, 372, 374, 376, 378, 381, 382, 385, 400, 403, 409, 420, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 476, 477, 478, 480, 484, 485, 486, 490, 492, 496, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555], "exist": [11, 15, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 84, 86, 94, 95, 96, 97, 100, 102, 104, 105, 117, 119, 140, 141, 147, 152, 155, 167, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 210, 224, 232, 255, 256, 257, 259, 342, 358, 361, 363, 366, 367, 369, 370, 371, 372, 374, 375, 377, 378, 379, 381, 382, 384, 385, 390, 391, 394, 395, 398, 402, 403, 417, 418, 420, 423, 435, 437, 456, 460, 461, 463, 464, 468, 489, 504, 505, 553], "perform": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 81, 83, 86, 89, 95, 99, 103, 118, 159, 167, 181, 193, 195, 207, 210, 211, 219, 222, 232, 234, 244, 245, 249, 255, 259, 271, 272, 325, 351, 358, 359, 364, 367, 368, 369, 373, 374, 382, 385, 388, 390, 399, 406, 409, 411, 414, 418, 421, 423, 424, 427, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 444, 447, 449, 450, 451, 456, 457, 459, 460, 461, 462, 464, 469, 472, 476, 488, 492, 500, 501, 504, 510, 528, 550, 551, 552, 553], "out": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 89, 95, 96, 119, 182, 183, 185, 191, 194, 195, 232, 244, 245, 357, 358, 359, 361, 363, 366, 368, 370, 372, 374, 376, 377, 378, 383, 387, 394, 395, 397, 403, 417, 429, 433, 436, 437, 460, 461, 467, 468, 476, 478, 480, 481, 501, 514, 515, 549, 552, 556], "output": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 79, 80, 82, 83, 84, 86, 88, 99, 118, 132, 133, 139, 144, 182, 183, 185, 191, 194, 195, 210, 224, 232, 316, 359, 366, 368, 371, 374, 375, 379, 382, 385, 398, 413, 419, 422, 423, 439, 443, 444, 447, 451, 459, 460, 476, 477, 490, 492, 552, 553], "folder": [11, 78, 89, 96, 101, 105, 119, 323, 358, 359, 363, 366, 387, 389, 394, 399, 409, 412, 432, 439, 443, 467, 476, 477, 550, 552], "where": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 67, 79, 80, 83, 84, 86, 99, 117, 118, 119, 122, 127, 139, 140, 141, 147, 152, 155, 157, 168, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 273, 276, 279, 280, 287, 323, 359, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 390, 392, 394, 400, 412, 418, 427, 431, 436, 443, 444, 455, 459, 460, 461, 463, 465, 467, 468, 469, 478, 480, 488, 489, 492, 497, 504, 509, 510, 511, 514, 515, 518, 551, 552, 553, 554, 555, 556], "publish": [11, 375, 388, 431, 468], "document": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 295, 299, 309, 332, 345, 358, 360, 362, 363, 365, 366, 368, 372, 374, 375, 377, 379, 381, 383, 384, 388, 389, 394, 395, 396, 403, 405, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 460, 462, 467, 469, 470, 492, 503, 504, 505, 552], "relat": [11, 13, 65, 79, 81, 198, 277, 364, 366, 369, 371, 372, 375, 377, 378, 379, 384, 388, 405, 406, 418, 424, 443, 456, 463, 467, 482, 549, 554], "need": [11, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 81, 83, 85, 86, 89, 96, 99, 100, 116, 118, 119, 140, 141, 152, 154, 155, 190, 262, 263, 287, 357, 358, 359, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 388, 389, 394, 398, 399, 400, 417, 419, 424, 428, 432, 434, 435, 436, 437, 441, 443, 444, 448, 450, 451, 457, 458, 460, 461, 462, 463, 464, 467, 469, 476, 478, 488, 501, 503, 504, 552, 556], "execut": [11, 116, 120, 124, 125, 127, 358, 359, 361, 363, 365, 366, 367, 373, 374, 378, 388, 389, 390, 391, 392, 393, 394, 403, 411, 417, 426, 430, 438, 446, 453, 459, 460, 466, 468, 471, 472, 473, 475, 478, 479, 507, 517, 538, 548, 550], "them": [11, 15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 95, 201, 203, 210, 232, 287, 358, 359, 361, 363, 365, 366, 372, 374, 377, 384, 385, 387, 388, 394, 401, 417, 428, 429, 431, 434, 436, 439, 440, 442, 444, 449, 455, 456, 457, 460, 461, 463, 465, 467, 469, 472, 477, 489, 492, 501, 552, 554], "The": [11, 15, 16, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 52, 53, 57, 59, 62, 67, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 159, 163, 168, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 263, 269, 271, 272, 273, 275, 276, 277, 278, 279, 287, 299, 305, 307, 308, 311, 326, 341, 342, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 395, 398, 399, 401, 402, 403, 404, 405, 406, 409, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 476, 477, 478, 480, 481, 482, 483, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 509, 511, 513, 514, 515, 518, 524, 526, 527, 528, 537, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557], "creat": [11, 13, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 78, 79, 80, 82, 83, 84, 86, 87, 88, 94, 96, 97, 99, 100, 104, 105, 106, 107, 108, 110, 112, 117, 118, 119, 120, 121, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 162, 164, 165, 166, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 269, 287, 297, 318, 322, 336, 345, 347, 352, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 401, 402, 403, 406, 409, 411, 417, 418, 420, 421, 422, 423, 424, 427, 429, 432, 433, 434, 439, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 454, 455, 457, 459, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 478, 480, 487, 488, 489, 492, 496, 499, 501, 502, 503, 504, 508, 510, 511, 512, 513, 518, 528, 537, 549, 550, 552, 557], "current": [11, 15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 97, 100, 104, 105, 119, 120, 124, 145, 168, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 336, 352, 358, 359, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 392, 401, 419, 432, 454, 458, 459, 460, 462, 467, 469, 470, 476, 477, 481, 488, 489, 490, 505, 549, 551, 552], "work": [11, 13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 119, 192, 323, 357, 358, 359, 361, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 410, 413, 414, 415, 416, 417, 418, 419, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 488, 492, 502, 504, 516, 518, 524, 527, 540, 546, 547, 552], "directori": [11, 78, 83, 358, 374, 432, 442, 470, 476, 478, 489, 492, 552], "localfold": 11, "releas": [11, 51, 63, 90, 360, 362, 363, 365, 366, 372, 375, 376, 385, 389, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 431, 432, 440, 449, 450, 467, 469, 470, 476, 477, 480, 492, 494, 495, 496, 498], "0": [11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 38, 39, 42, 47, 50, 51, 52, 53, 65, 69, 72, 79, 81, 83, 84, 85, 86, 89, 91, 97, 98, 100, 103, 104, 105, 106, 107, 108, 110, 112, 114, 116, 117, 119, 120, 121, 122, 124, 126, 127, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 165, 166, 170, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 267, 269, 271, 272, 273, 276, 277, 278, 279, 285, 286, 305, 309, 316, 317, 335, 346, 348, 349, 353, 355, 358, 359, 361, 362, 365, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 391, 394, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 484, 486, 490, 494, 496, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 554, 555], "18": [11, 83, 86, 132, 362, 377, 383, 403, 409, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "number": [11, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 65, 70, 73, 78, 79, 81, 82, 83, 86, 87, 88, 89, 95, 97, 98, 100, 103, 104, 105, 107, 112, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 158, 159, 162, 165, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 261, 265, 269, 271, 272, 287, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 345, 351, 362, 363, 364, 367, 369, 370, 371, 372, 373, 377, 379, 382, 384, 385, 387, 394, 399, 409, 411, 412, 413, 418, 419, 420, 423, 424, 427, 428, 431, 432, 433, 434, 436, 437, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 459, 460, 461, 463, 464, 467, 468, 469, 470, 476, 477, 478, 482, 488, 490, 492, 499, 501, 504, 505, 551, 552, 553, 554, 555], "stabl": [11, 83, 86, 190, 199, 287, 365, 366, 367, 374, 375, 378, 383, 387, 388, 389, 391, 403, 404, 405, 411, 416, 418, 420, 457, 489], "ex": [11, 460, 462, 463], "2": [11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 53, 54, 59, 62, 65, 66, 69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 96, 97, 99, 100, 104, 105, 108, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 131, 133, 134, 135, 139, 140, 141, 142, 144, 150, 152, 155, 162, 165, 179, 181, 182, 183, 185, 187, 188, 189, 193, 195, 200, 201, 202, 203, 204, 208, 212, 214, 216, 220, 222, 223, 227, 230, 237, 238, 239, 244, 245, 247, 248, 251, 252, 253, 258, 262, 263, 269, 271, 272, 273, 278, 279, 285, 305, 307, 343, 346, 351, 353, 355, 358, 359, 362, 363, 367, 369, 370, 372, 373, 374, 375, 378, 381, 382, 383, 384, 385, 387, 390, 392, 394, 397, 398, 399, 400, 401, 402, 409, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 476, 477, 478, 480, 486, 489, 490, 492, 497, 498, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555], "dev": [11, 16, 78, 80, 99, 118, 358, 360, 361, 374, 384, 387, 388, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 518, 546, 547], "destin": 11, "path": [11, 15, 16, 64, 78, 79, 80, 82, 83, 84, 86, 88, 95, 99, 101, 102, 105, 118, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 182, 183, 185, 190, 191, 194, 195, 210, 224, 232, 258, 295, 323, 324, 325, 327, 358, 361, 393, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 490, 546, 547, 552], "copi": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94, 95, 96, 97, 99, 100, 103, 104, 105, 112, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 127, 140, 141, 147, 152, 155, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 287, 330, 358, 363, 366, 368, 372, 374, 380, 387, 388, 394, 409, 411, 418, 419, 420, 423, 428, 431, 433, 434, 439, 441, 447, 450, 451, 455, 457, 459, 463, 465, 468, 492, 501, 505, 516, 552], "displai": [11, 15, 78, 83, 86, 112, 124, 127, 199, 276, 308, 351, 355, 358, 359, 388, 409, 412, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 445, 447, 449, 451, 452, 455, 456, 457, 459, 460, 462, 463, 467, 468, 469, 470, 477, 492, 552], "about": [11, 13, 16, 80, 99, 118, 137, 142, 219, 224, 317, 358, 361, 363, 367, 374, 375, 377, 378, 379, 383, 384, 386, 387, 388, 393, 394, 413, 414, 418, 419, 420, 429, 435, 436, 437, 440, 441, 443, 455, 458, 460, 463, 468, 477, 478, 480, 488, 489, 552, 555], "system": [11, 79, 83, 86, 137, 145, 146, 181, 182, 183, 185, 188, 190, 193, 194, 195, 210, 232, 358, 364, 369, 371, 375, 378, 379, 383, 384, 386, 391, 399, 417, 423, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 503, 504, 550, 552, 556], "show": [11, 78, 83, 86, 121, 122, 123, 143, 162, 224, 355, 358, 359, 361, 370, 372, 373, 377, 378, 386, 388, 398, 399, 403, 411, 416, 417, 418, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 484, 485, 486, 492, 494, 495, 496, 498, 499, 501, 503, 509, 518, 550, 552, 554, 557], "depend": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 84, 95, 97, 98, 103, 104, 114, 117, 119, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 169, 180, 181, 190, 193, 195, 210, 224, 232, 247, 287, 338, 358, 360, 361, 362, 364, 369, 370, 371, 372, 373, 376, 377, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 398, 402, 403, 406, 413, 415, 418, 419, 421, 423, 424, 426, 427, 430, 434, 436, 437, 446, 450, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 472, 488, 489, 492, 496, 497, 500, 501, 504, 518, 549], "envvar": 11, "environ": [11, 78, 324, 357, 358, 361, 365, 366, 370, 375, 378, 387, 388, 390, 391, 392, 393, 394, 398, 399, 401, 417, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 552], "variabl": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 86, 99, 118, 128, 195, 271, 272, 275, 276, 277, 278, 298, 324, 358, 359, 361, 371, 373, 374, 388, 390, 392, 398, 399, 415, 416, 417, 423, 424, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 497, 552, 553, 554], "hierarch": [13, 285, 326, 367, 369, 385, 424, 492, 504], "agglom": 13, "astronom": [13, 372, 379, 417, 551], "calcul": [13, 15, 19, 20, 26, 91, 100, 105, 128, 129, 130, 168, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 243, 248, 250, 251, 252, 253, 256, 259, 260, 275, 277, 278, 284, 286, 309, 340, 348, 349, 368, 371, 399, 405, 409, 410, 411, 417, 422, 424, 427, 448, 452, 454, 465, 476, 477, 480, 492, 551, 555], "probabl": [13, 144, 358, 361, 364, 365, 366, 368, 371, 372, 376, 378, 380, 386, 388, 434, 447, 457, 460, 463, 465, 468, 496, 497, 498, 551, 552, 554, 555], "distribut": [13, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 79, 103, 144, 179, 216, 227, 233, 271, 272, 309, 310, 314, 351, 354, 356, 357, 358, 362, 363, 366, 371, 376, 377, 380, 383, 384, 388, 391, 402, 411, 417, 423, 424, 427, 433, 434, 437, 439, 443, 445, 447, 449, 457, 462, 465, 467, 478, 480, 492, 496, 497, 499, 505, 513, 528, 553, 554], "helper": [13, 295, 300, 365, 367, 372, 373, 374, 377, 388, 394, 400, 401, 402, 403, 409, 411, 414, 416, 417, 423, 424, 445, 455, 461, 462, 501, 550, 557], "throughout": [13, 365, 367, 368, 372, 374, 416, 455], "we": [13, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 63, 79, 83, 84, 85, 86, 90, 164, 190, 193, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 263, 333, 358, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 384, 385, 387, 388, 389, 390, 391, 392, 394, 397, 398, 399, 400, 405, 409, 411, 416, 417, 418, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 474, 476, 477, 478, 489, 496, 497, 499, 501, 504, 515, 518, 528, 549, 552, 553, 554, 555, 556], "repres": [13, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 83, 86, 97, 99, 100, 104, 105, 118, 181, 183, 185, 187, 188, 190, 192, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 258, 259, 287, 295, 305, 358, 369, 370, 371, 372, 376, 379, 380, 381, 382, 399, 423, 444, 445, 455, 457, 459, 460, 461, 463, 468, 478, 487, 488, 490, 494, 495, 496, 498, 504, 549, 550, 551, 556], "astropi": [13, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 64, 79, 81, 82, 83, 84, 85, 86, 87, 89, 91, 97, 100, 104, 105, 109, 111, 112, 117, 119, 121, 123, 124, 127, 132, 133, 139, 141, 150, 152, 165, 179, 182, 183, 185, 188, 190, 191, 192, 193, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 223, 224, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 247, 248, 250, 251, 252, 253, 256, 258, 260, 261, 263, 285, 286, 287, 317, 334, 335, 344, 348, 349, 353, 357, 359, 360, 361, 363, 364, 365, 369, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 394, 395, 397, 401, 402, 403, 404, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 482, 484, 485, 486, 488, 489, 490, 492, 494, 496, 499, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 556], "readthedoc": [13, 120, 175, 190, 199, 260, 361, 378, 400, 415, 457, 458, 467, 489, 503, 505], "io": [13, 79, 82, 83, 86, 120, 175, 185, 190, 199, 260, 361, 367, 378, 388, 400, 403, 415, 419, 423, 443, 457, 458, 460, 467, 489, 492, 503, 505], "might": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 170, 187, 199, 358, 363, 369, 370, 372, 375, 377, 382, 384, 385, 390, 392, 399, 431, 450, 452, 456, 459, 461, 468, 469, 472, 478, 480, 488, 492, 499, 505, 552, 554], "add": [13, 15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 75, 79, 80, 83, 84, 86, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 117, 118, 119, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 155, 159, 182, 183, 185, 189, 191, 194, 195, 210, 232, 247, 284, 327, 346, 355, 357, 358, 359, 361, 363, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 384, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 434, 439, 440, 443, 447, 449, 452, 456, 458, 459, 460, 461, 463, 465, 467, 478, 482, 483, 492, 505, 520, 552, 555], "other": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 67, 79, 80, 82, 83, 86, 97, 99, 100, 104, 105, 117, 118, 120, 124, 125, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 164, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 201, 203, 257, 270, 287, 300, 328, 347, 352, 357, 361, 363, 365, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 389, 417, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 488, 489, 490, 492, 497, 499, 501, 505, 520, 549, 550, 552, 556], "conveni": [13, 117, 357, 358, 361, 368, 372, 380, 382, 389, 399, 401, 406, 409, 411, 416, 441, 454, 455, 456, 460, 461, 462, 463, 467, 469, 478, 487, 491, 550], "here": [13, 78, 79, 83, 86, 97, 104, 119, 137, 142, 151, 199, 271, 272, 275, 346, 357, 358, 359, 360, 361, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 385, 386, 388, 390, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 469, 472, 476, 477, 478, 482, 488, 492, 497, 499, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 556, 557], "e": [13, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 50, 51, 54, 59, 65, 66, 78, 79, 80, 81, 82, 83, 86, 90, 99, 118, 119, 132, 139, 140, 141, 142, 144, 175, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 199, 200, 202, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 271, 272, 276, 287, 289, 293, 319, 326, 336, 347, 348, 353, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 394, 395, 397, 398, 399, 403, 409, 410, 411, 415, 417, 418, 419, 423, 426, 428, 429, 431, 432, 433, 434, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 476, 477, 478, 480, 487, 488, 489, 490, 492, 496, 497, 502, 503, 504, 509, 510, 511, 518, 519, 521, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 546, 549, 551, 552, 553, 554, 555, 556, 557], "g": [13, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 51, 52, 53, 54, 59, 65, 79, 81, 82, 83, 86, 90, 132, 181, 182, 183, 185, 187, 191, 193, 194, 195, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 276, 287, 326, 347, 353, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 384, 385, 387, 388, 390, 391, 392, 409, 411, 415, 417, 418, 419, 420, 423, 428, 429, 432, 434, 441, 443, 445, 454, 455, 456, 457, 460, 461, 462, 463, 467, 468, 472, 478, 480, 484, 487, 488, 489, 490, 492, 497, 502, 503, 504, 511, 549, 551, 552, 554, 556, 557], "coord": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 234, 276, 369, 402, 444, 460, 461, 501, 504, 505, 512], "contain": [13, 16, 19, 20, 26, 57, 59, 62, 65, 67, 78, 79, 80, 82, 83, 84, 86, 87, 90, 91, 95, 96, 97, 99, 100, 103, 104, 105, 107, 117, 118, 119, 127, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 167, 169, 174, 177, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 276, 285, 286, 351, 353, 355, 356, 358, 361, 362, 364, 366, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 387, 388, 395, 399, 403, 404, 405, 406, 408, 409, 411, 412, 415, 416, 417, 418, 419, 423, 424, 427, 429, 431, 432, 433, 436, 439, 440, 443, 444, 447, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 480, 481, 483, 488, 489, 490, 492, 496, 500, 501, 504, 505, 506, 549, 551, 553, 554, 555], "without": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 124, 142, 180, 181, 186, 190, 193, 355, 358, 361, 363, 366, 368, 372, 373, 374, 375, 377, 382, 388, 399, 400, 404, 432, 435, 439, 440, 454, 459, 460, 461, 476, 492, 503, 504, 505, 547, 552, 554], "wc": [13, 16, 79, 97, 100, 104, 121, 157, 165, 166, 170, 181, 182, 183, 185, 190, 191, 193, 194, 195, 207, 210, 211, 219, 222, 232, 234, 244, 245, 249, 255, 259, 320, 353, 358, 364, 372, 377, 399, 400, 401, 403, 409, 417, 418, 422, 424, 431, 432, 435, 436, 437, 439, 441, 445, 449, 452, 454, 456, 458, 459, 461, 462, 463, 468, 476, 477, 478, 501, 504, 509, 510, 511, 516], "pixel": [13, 79, 97, 100, 104, 105, 107, 108, 112, 122, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 153, 154, 165, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 207, 210, 211, 219, 222, 232, 234, 244, 245, 249, 255, 259, 369, 397, 401, 415, 418, 435, 437, 443, 445, 456, 459, 460, 468, 478, 488, 490, 502, 503, 504, 513], "pig": [13, 358, 360, 361, 398, 399, 401, 402, 403, 405, 406, 417, 419, 420, 424], "10": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 54, 64, 65, 82, 83, 84, 85, 86, 97, 98, 100, 103, 104, 105, 106, 110, 112, 116, 120, 121, 125, 126, 127, 132, 133, 136, 137, 139, 141, 143, 149, 150, 151, 152, 153, 155, 162, 168, 181, 182, 183, 185, 190, 191, 193, 194, 195, 199, 200, 202, 211, 214, 226, 227, 229, 230, 251, 263, 277, 305, 307, 317, 346, 351, 353, 355, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 375, 380, 381, 382, 386, 388, 394, 399, 401, 412, 414, 417, 421, 423, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 486, 490, 496, 499, 501, 502, 503, 504, 514, 515, 518, 520, 523, 524, 526, 527, 528, 529, 531, 532, 534, 535, 536, 540, 541, 542, 552, 553, 556], "some": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 78, 80, 83, 86, 99, 118, 168, 189, 287, 295, 361, 363, 364, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 388, 390, 391, 392, 393, 394, 395, 397, 399, 401, 409, 410, 412, 414, 416, 417, 418, 423, 427, 428, 429, 431, 433, 435, 436, 437, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 462, 463, 465, 467, 468, 477, 478, 480, 481, 488, 489, 492, 497, 502, 504, 551, 552, 553, 554, 556], "healpix": [13, 181, 182, 183, 185, 191, 194, 195, 357, 365, 367, 372, 409, 417, 460, 468, 504], "todo": [13, 75, 83, 86, 94, 150, 260, 359, 382, 400, 467, 482, 483, 556], "befor": [13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 52, 53, 80, 83, 86, 87, 95, 99, 117, 118, 182, 183, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 299, 353, 358, 359, 361, 363, 365, 366, 367, 368, 372, 373, 374, 376, 377, 383, 387, 388, 394, 412, 418, 432, 434, 449, 450, 457, 460, 463, 469, 472, 476, 528, 552], "v1": [13, 16, 79, 80, 84, 99, 118, 358, 365, 367, 369, 374, 375, 376, 377, 383, 384, 387, 390, 392, 403, 404, 405, 411, 416, 420, 421, 422, 423, 424, 524, 527], "discuss": [13, 59, 260, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 395, 417, 465, 470, 480, 481, 556], "what": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 263, 317, 359, 364, 372, 375, 377, 378, 385, 388, 396, 445, 454, 455, 457, 467, 468, 472, 477, 480, 488, 505, 537, 552, 553, 556], "do": [13, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 90, 95, 99, 118, 139, 150, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 311, 351, 359, 361, 363, 364, 365, 368, 372, 373, 374, 375, 376, 377, 378, 381, 382, 385, 387, 388, 390, 392, 403, 429, 431, 432, 434, 435, 436, 437, 439, 441, 442, 443, 447, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 467, 468, 476, 477, 478, 488, 492, 504, 549, 552, 555, 556], "keep": [13, 83, 86, 95, 117, 150, 182, 183, 185, 191, 194, 195, 199, 358, 359, 361, 363, 364, 365, 366, 372, 375, 376, 377, 378, 381, 382, 407, 417, 436, 437, 442, 447, 457, 462, 468], "hide": [13, 363, 380], "from": [13, 15, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 168, 169, 171, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 269, 270, 271, 272, 275, 278, 285, 286, 287, 297, 305, 307, 309, 310, 314, 317, 318, 322, 326, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556], "remov": [13, 83, 86, 87, 91, 95, 120, 121, 124, 152, 155, 167, 180, 181, 186, 189, 190, 193, 195, 200, 202, 232, 286, 361, 365, 366, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 389, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 431, 437, 452, 456, 461, 464, 467, 481, 492, 501], "complet": [13, 16, 80, 99, 118, 317, 358, 364, 368, 369, 370, 371, 372, 375, 376, 378, 382, 383, 384, 391, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 414, 415, 416, 417, 418, 419, 439, 444, 457, 464, 472, 492, 497], "directli": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 79, 83, 84, 86, 131, 154, 169, 182, 183, 185, 191, 194, 195, 255, 257, 259, 358, 360, 361, 363, 365, 366, 369, 370, 371, 372, 376, 378, 385, 390, 392, 393, 397, 399, 400, 401, 403, 417, 424, 429, 431, 432, 434, 439, 440, 441, 444, 445, 447, 448, 450, 451, 455, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 476, 477, 478, 480, 488, 492, 497, 501, 504, 528, 554], "multiprocess": [13, 88, 120, 121, 124, 127, 158, 302, 307, 308, 403, 423, 424], "multithread": 13, "setup": [13, 360, 361, 362, 365, 370, 371, 375, 378, 386, 415, 419, 472, 552], "quantiti": [13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 50, 51, 52, 53, 54, 69, 71, 72, 76, 79, 82, 83, 84, 86, 89, 91, 95, 97, 98, 100, 101, 103, 104, 105, 107, 108, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 166, 167, 168, 170, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 265, 271, 272, 275, 276, 277, 278, 286, 287, 289, 291, 293, 294, 299, 317, 319, 320, 329, 333, 358, 359, 364, 367, 369, 372, 373, 374, 376, 381, 382, 385, 386, 400, 402, 406, 409, 410, 418, 419, 420, 427, 435, 443, 444, 445, 448, 455, 456, 458, 459, 460, 463, 467, 469, 470, 478, 484, 485, 486, 488, 492, 505, 531, 540, 542, 551, 554, 556], "config": [15, 16, 80, 99, 118, 357, 359, 364, 366, 367, 374, 375, 378, 385, 390, 392, 402, 403, 404, 409, 417, 432, 439, 476, 549], "base": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 286, 295, 296, 299, 305, 307, 309, 332, 345, 353, 358, 359, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 386, 388, 390, 391, 398, 400, 401, 403, 405, 406, 409, 411, 414, 415, 416, 417, 418, 424, 431, 433, 434, 436, 439, 440, 441, 442, 443, 445, 448, 452, 455, 458, 460, 461, 463, 464, 465, 467, 468, 477, 478, 480, 489, 490, 492, 502, 504, 516, 526, 550, 551, 553, 554], "It": [15, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 97, 100, 104, 105, 106, 110, 117, 132, 139, 143, 150, 151, 152, 153, 155, 165, 168, 172, 173, 178, 182, 183, 185, 187, 190, 191, 194, 195, 197, 204, 205, 208, 211, 212, 214, 215, 216, 220, 224, 226, 227, 229, 233, 235, 237, 243, 247, 248, 250, 251, 252, 253, 256, 260, 275, 277, 278, 295, 309, 314, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 393, 395, 399, 400, 401, 402, 406, 409, 411, 412, 413, 418, 420, 422, 423, 424, 427, 432, 437, 440, 442, 444, 447, 448, 452, 455, 456, 457, 459, 460, 461, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 481, 488, 489, 491, 492, 496, 497, 499, 501, 505, 519, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 549, 550, 551, 552, 553, 554, 556], "initi": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 53, 63, 80, 83, 86, 99, 117, 118, 119, 127, 183, 186, 187, 210, 232, 234, 235, 287, 363, 368, 369, 370, 374, 411, 427, 434, 437, 439, 440, 442, 443, 444, 447, 452, 455, 456, 460, 463, 476, 477, 478, 487, 489, 537, 551], "set": [15, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 90, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 114, 116, 117, 118, 119, 120, 121, 123, 124, 127, 139, 141, 152, 155, 158, 159, 162, 168, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 251, 252, 253, 255, 258, 259, 260, 269, 307, 309, 358, 359, 364, 367, 368, 370, 371, 373, 374, 375, 376, 378, 382, 383, 384, 385, 386, 388, 390, 392, 405, 411, 413, 415, 417, 420, 423, 424, 427, 428, 431, 433, 434, 435, 436, 439, 441, 442, 443, 444, 445, 449, 450, 452, 455, 456, 457, 459, 461, 463, 464, 465, 467, 469, 470, 472, 480, 488, 489, 492, 501, 503, 504, 505, 528, 549, 552, 555, 556], "paramet": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 289, 291, 293, 294, 296, 298, 299, 300, 301, 307, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 367, 370, 371, 373, 374, 376, 377, 380, 382, 384, 395, 398, 399, 400, 401, 402, 403, 405, 406, 409, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 458, 459, 464, 465, 467, 468, 477, 478, 480, 488, 490, 491, 492, 499, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555], "declar": [15, 83, 86, 247, 337, 338, 361, 365, 366, 369, 374, 375, 381, 388, 405, 491], "intern": [15, 83, 86, 117, 119, 128, 129, 130, 159, 165, 190, 253, 265, 287, 299, 358, 370, 372, 374, 377, 382, 409, 411, 420, 423, 427, 432, 439, 448, 449, 456, 458, 460, 467, 470, 476, 488, 492, 547], "though": [15, 361, 366, 372, 373, 374, 376, 378, 432, 463, 476], "user": [15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 84, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 358, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 395, 402, 409, 410, 416, 417, 418, 420, 432, 442, 443, 444, 456, 458, 460, 461, 462, 463, 464, 472, 476, 489, 490, 491, 492, 497, 501, 507, 513, 517, 538, 548, 549, 552], "can": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 50, 56, 65, 66, 67, 78, 79, 80, 83, 86, 88, 97, 99, 100, 103, 104, 105, 112, 117, 118, 119, 124, 125, 127, 132, 137, 142, 150, 152, 155, 159, 165, 168, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 193, 194, 195, 197, 199, 201, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 219, 220, 222, 224, 226, 227, 229, 232, 233, 234, 235, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 270, 276, 287, 299, 300, 305, 308, 317, 334, 336, 351, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 401, 403, 405, 406, 409, 411, 412, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 480, 482, 483, 488, 489, 490, 492, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 526, 528, 537, 547, 549, 550, 551, 552, 553, 554, 555], "also": [15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 90, 112, 116, 117, 119, 120, 132, 154, 159, 165, 180, 187, 189, 190, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 270, 287, 295, 300, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 404, 405, 406, 409, 417, 418, 419, 423, 427, 428, 431, 432, 433, 434, 435, 439, 441, 442, 443, 444, 445, 448, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 476, 477, 480, 488, 489, 490, 491, 492, 499, 501, 504, 505, 528, 531, 549, 551, 552, 553, 554, 556], "provid": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 81, 83, 84, 86, 97, 100, 104, 105, 108, 124, 127, 139, 140, 158, 172, 173, 178, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 284, 287, 351, 358, 359, 368, 369, 371, 373, 374, 375, 378, 379, 382, 384, 385, 386, 387, 388, 389, 393, 395, 399, 402, 403, 404, 406, 409, 411, 420, 423, 427, 433, 434, 435, 444, 447, 448, 455, 456, 457, 459, 460, 461, 463, 464, 468, 469, 470, 472, 477, 478, 480, 482, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 502, 503, 504, 505, 506, 513, 516, 528, 537, 549, 550, 551, 552, 554, 557], "pass": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 66, 79, 80, 81, 82, 83, 84, 85, 86, 88, 96, 97, 99, 100, 103, 104, 105, 118, 119, 122, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 167, 175, 180, 181, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 270, 287, 299, 307, 308, 309, 314, 315, 316, 317, 345, 346, 351, 353, 354, 358, 361, 368, 370, 371, 372, 373, 385, 405, 409, 411, 423, 424, 428, 429, 431, 432, 439, 440, 444, 448, 449, 450, 455, 456, 457, 458, 459, 460, 461, 463, 464, 467, 476, 477, 478, 492, 503, 504, 505, 509, 510, 552, 556], "nest": [15, 181, 182, 183, 233, 269, 287, 326, 423, 468, 503, 554], "dictionari": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 80, 83, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 114, 117, 118, 119, 120, 121, 124, 125, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 167, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 271, 272, 276, 297, 325, 326, 327, 329, 339, 342, 352, 375, 377, 382, 385, 386, 431, 433, 439, 457, 458, 464, 465, 547], "moment": [15, 51, 54, 82, 90, 247, 334, 364, 372, 374, 375, 378, 383, 384, 458, 460, 497], "instanti": [15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 182, 183, 185, 187, 194, 195, 369, 374, 428, 432, 455, 456, 460, 463, 465, 476], "In": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 83, 84, 86, 89, 96, 98, 103, 119, 139, 158, 181, 183, 186, 189, 195, 200, 202, 259, 270, 300, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 394, 399, 400, 401, 402, 403, 404, 405, 406, 409, 420, 423, 427, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 476, 477, 478, 488, 490, 492, 497, 500, 501, 502, 504, 505, 506, 509, 510, 515, 528, 547, 550, 551, 552, 553, 554, 555, 556], "case": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 67, 79, 83, 86, 139, 158, 170, 181, 183, 189, 190, 193, 195, 199, 200, 202, 222, 233, 255, 257, 259, 270, 279, 300, 317, 353, 358, 359, 361, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 398, 399, 402, 405, 411, 412, 417, 423, 424, 427, 428, 431, 432, 433, 434, 436, 437, 439, 443, 444, 447, 448, 449, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 472, 476, 478, 487, 490, 491, 492, 502, 505, 509, 510, 511, 514, 515, 519, 528, 535, 550, 552, 554], "those": [15, 79, 168, 182, 183, 185, 191, 194, 195, 199, 201, 203, 210, 232, 295, 347, 358, 361, 363, 365, 367, 372, 374, 377, 378, 379, 380, 381, 383, 388, 389, 390, 392, 393, 403, 406, 449, 457, 460, 461, 462, 464, 472, 478, 490, 492, 501, 556], "present": [15, 68, 78, 79, 81, 86, 87, 95, 101, 105, 117, 119, 156, 184, 189, 210, 218, 232, 287, 358, 359, 361, 371, 374, 378, 382, 385, 388, 409, 428, 433, 436, 437, 448, 449, 450, 454, 458, 459, 460, 462, 488, 490, 493, 505, 552, 554], "dict": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 67, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 112, 114, 117, 118, 119, 120, 121, 122, 124, 125, 127, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 269, 270, 271, 272, 276, 285, 299, 307, 308, 325, 326, 327, 329, 339, 340, 341, 342, 345, 346, 347, 351, 352, 353, 354, 355, 358, 373, 375, 379, 382, 385, 402, 406, 409, 417, 432, 439, 449, 450, 455, 457, 460, 464, 476, 477, 504, 509, 518], "analysisconfig": [15, 359, 432, 436, 437, 439, 449, 476], "follow": [15, 19, 20, 43, 44, 76, 78, 79, 80, 86, 97, 99, 101, 102, 104, 105, 117, 118, 119, 122, 127, 132, 181, 182, 183, 185, 189, 194, 195, 199, 247, 263, 269, 348, 349, 351, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 401, 402, 403, 405, 406, 409, 411, 412, 418, 419, 423, 424, 427, 428, 429, 431, 432, 434, 435, 436, 439, 440, 443, 444, 449, 450, 451, 452, 454, 455, 457, 459, 460, 461, 462, 463, 467, 472, 476, 478, 480, 482, 483, 488, 490, 492, 494, 496, 497, 501, 503, 504, 505, 506, 514, 515, 519, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 537, 550, 553, 554, 555, 557], "schema": [15, 16, 80, 99, 118, 374, 377], "attribut": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 287, 368, 370, 380, 385, 386, 399, 400, 403, 404, 405, 406, 409, 411, 413, 415, 417, 422, 423, 424, 429, 433, 443, 457, 459, 460, 461, 463, 478, 488, 504, 505, 554], "summari": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 295, 299, 309, 332, 345, 359, 361, 378, 396, 428, 432, 450, 451, 456, 467, 476, 492], "get_dataset": [15, 432, 436, 437, 439, 449, 476, 492], "produc": [15, 97, 100, 104, 105, 108, 117, 266, 268, 358, 359, 364, 373, 374, 382, 383, 385, 388, 403, 428, 431, 433, 435, 440, 441, 442, 443, 447, 450, 452, 454, 457, 459, 465, 467, 477, 492, 495, 497, 551, 552], "note": [15, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 74, 78, 79, 80, 82, 83, 86, 89, 96, 97, 98, 99, 103, 112, 118, 119, 124, 127, 139, 144, 152, 154, 164, 175, 193, 197, 199, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 277, 278, 287, 308, 349, 355, 357, 360, 361, 363, 366, 371, 372, 375, 378, 382, 383, 384, 386, 387, 388, 391, 397, 399, 419, 421, 423, 427, 428, 432, 433, 435, 436, 439, 442, 444, 448, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 488, 490, 492, 505, 514, 515, 526, 554, 555, 556], "progress": [15, 78, 112, 124, 127, 199, 308, 364, 367, 374, 375, 388, 409, 416, 417, 418, 424, 492], "bar": [15, 78, 83, 86, 97, 100, 104, 105, 112, 124, 127, 136, 137, 195, 199, 220, 278, 308, 352, 375, 409, 412, 413, 419, 424, 452, 465, 492, 525], "get_excess_map": [15, 476], "excess": [15, 65, 70, 97, 100, 104, 105, 113, 116, 117, 119, 120, 121, 124, 126, 129, 130, 162, 271, 272, 277, 278, 356, 370, 373, 405, 406, 412, 417, 424, 427, 431, 432, 434, 435, 436, 439, 441, 445, 447, 451, 452, 455, 456, 459, 461, 462, 469, 476, 477, 490, 492], "respect": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 79, 80, 83, 86, 99, 101, 118, 119, 128, 181, 183, 193, 195, 270, 368, 373, 384, 386, 406, 435, 437, 451, 460, 461, 469, 490, 505, 555], "get_flux_point": [15, 117, 119, 382, 404, 432, 476], "flux": [15, 19, 20, 26, 41, 46, 65, 69, 71, 72, 74, 75, 76, 79, 84, 95, 96, 97, 100, 104, 105, 112, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 200, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 267, 275, 276, 277, 278, 362, 370, 371, 373, 374, 376, 378, 379, 381, 390, 397, 400, 402, 403, 405, 409, 411, 415, 416, 417, 419, 424, 426, 430, 433, 435, 439, 441, 443, 444, 446, 448, 449, 450, 451, 452, 456, 460, 463, 468, 472, 486, 487, 488, 497, 504, 506, 513, 528, 549, 550, 554], "point": [15, 17, 18, 21, 22, 24, 25, 27, 60, 63, 65, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 84, 86, 89, 90, 91, 94, 95, 96, 97, 99, 100, 104, 105, 113, 117, 119, 120, 121, 124, 125, 126, 127, 129, 134, 141, 143, 146, 152, 154, 155, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 182, 183, 185, 190, 191, 194, 195, 199, 210, 232, 236, 247, 265, 269, 277, 289, 293, 299, 305, 315, 350, 358, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 397, 400, 402, 403, 409, 411, 412, 414, 415, 416, 417, 419, 422, 423, 424, 426, 428, 430, 433, 434, 435, 439, 444, 445, 447, 449, 451, 452, 456, 457, 458, 459, 460, 463, 464, 468, 470, 472, 480, 481, 487, 488, 489, 492, 497, 500, 501, 504, 506, 510, 511, 517, 528, 549, 550, 551], "specif": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 81, 82, 83, 86, 89, 97, 100, 105, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 158, 172, 173, 178, 182, 183, 184, 185, 187, 191, 192, 193, 194, 195, 199, 224, 257, 269, 347, 357, 358, 359, 361, 363, 368, 370, 372, 373, 374, 375, 376, 377, 379, 382, 383, 384, 385, 388, 390, 391, 403, 406, 409, 411, 420, 421, 423, 428, 431, 433, 434, 437, 439, 440, 445, 447, 451, 452, 456, 457, 458, 460, 461, 464, 470, 472, 478, 488, 489, 490, 492, 494, 495, 496, 498, 503, 504, 505, 556], "compon": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 77, 84, 97, 98, 100, 103, 104, 105, 124, 128, 154, 156, 190, 210, 232, 233, 247, 262, 369, 370, 371, 374, 380, 381, 399, 403, 405, 409, 417, 418, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 447, 449, 450, 451, 455, 456, 462, 463, 467, 468, 476, 477, 480, 488, 490, 492, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551], "get_light_curv": 15, "light": [15, 124, 128, 212, 224, 278, 362, 369, 371, 374, 378, 382, 390, 403, 405, 406, 413, 416, 418, 423, 424, 426, 448, 453, 472, 488, 489, 490, 491, 500, 501, 504, 506, 548, 550], "curv": [15, 19, 20, 26, 79, 124, 128, 204, 205, 208, 212, 214, 215, 216, 220, 224, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 278, 350, 362, 369, 371, 374, 378, 382, 390, 399, 403, 405, 406, 410, 413, 414, 416, 418, 420, 423, 424, 426, 427, 448, 453, 472, 488, 489, 490, 491, 500, 501, 504, 506, 548, 550], "get_observ": [15, 78, 91, 285, 286, 400, 411, 428, 431, 432, 433, 436, 437, 439, 441, 443, 449, 450, 452, 459, 464, 469, 470, 474, 476, 477, 492, 499, 501, 502], "fetch": [15, 358, 366, 397, 410, 476, 552], "accord": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 70, 83, 86, 97, 100, 104, 105, 112, 117, 134, 140, 150, 157, 181, 187, 200, 202, 284, 347, 368, 369, 372, 373, 376, 382, 384, 403, 412, 424, 437, 449, 456, 459, 463, 464, 472, 488, 489, 492], "criteria": [15, 86, 411, 459, 464, 472], "defin": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 52, 53, 79, 80, 83, 84, 86, 90, 96, 97, 98, 99, 100, 103, 104, 105, 109, 111, 116, 117, 118, 119, 120, 121, 123, 124, 127, 139, 140, 141, 143, 147, 150, 151, 152, 153, 155, 158, 159, 163, 168, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 273, 279, 280, 299, 309, 314, 315, 316, 317, 320, 348, 349, 358, 359, 361, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 385, 386, 389, 390, 391, 392, 399, 400, 403, 406, 409, 412, 416, 417, 422, 423, 424, 432, 434, 435, 436, 437, 439, 440, 442, 445, 447, 448, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 476, 478, 488, 489, 490, 492, 494, 497, 501, 502, 504, 509, 511, 513, 514, 515, 518, 519, 522, 523, 525, 526, 528, 530, 531, 533, 534, 535, 536, 537, 547, 549, 550, 551, 552, 553, 554, 555], "read_dataset": 15, "read": [15, 16, 79, 81, 82, 83, 84, 86, 89, 95, 96, 97, 100, 101, 104, 105, 109, 111, 112, 116, 117, 119, 121, 123, 125, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 164, 182, 183, 185, 189, 190, 191, 194, 195, 210, 212, 224, 232, 258, 259, 260, 264, 266, 268, 269, 325, 344, 346, 351, 353, 358, 359, 361, 363, 368, 369, 370, 371, 374, 378, 380, 382, 384, 385, 386, 390, 392, 403, 406, 409, 417, 418, 420, 423, 424, 431, 432, 433, 437, 439, 442, 443, 448, 456, 457, 458, 463, 465, 467, 468, 469, 472, 476, 478, 489, 490, 492, 494, 495, 496, 498, 516, 546, 547, 552, 555], "name": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 89, 91, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 117, 118, 119, 120, 121, 124, 125, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 162, 163, 172, 173, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 285, 286, 308, 337, 338, 353, 359, 361, 364, 367, 368, 370, 371, 372, 373, 376, 377, 380, 381, 382, 384, 385, 386, 387, 399, 400, 401, 402, 403, 404, 405, 406, 409, 418, 420, 421, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 480, 490, 492, 496, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554], "taken": [15, 27, 83, 86, 97, 100, 104, 105, 117, 119, 142, 150, 169, 175, 177, 191, 192, 195, 199, 279, 359, 363, 367, 371, 422, 431, 439, 440, 452, 458, 461, 462, 467, 478, 488, 490, 501, 502, 554], "read_model": 15, "extend": [15, 19, 20, 26, 67, 70, 83, 86, 87, 95, 157, 184, 187, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 232, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 365, 369, 370, 371, 372, 378, 380, 381, 382, 385, 390, 402, 404, 409, 426, 430, 431, 435, 444, 449, 455, 460, 461, 462, 463, 468, 472, 488, 489, 500, 501, 549], "true": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 82, 83, 84, 86, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 116, 117, 118, 119, 120, 124, 125, 127, 131, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 162, 168, 169, 172, 173, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 284, 287, 295, 296, 299, 317, 327, 329, 346, 351, 355, 358, 364, 371, 372, 373, 374, 381, 382, 385, 400, 404, 405, 416, 418, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 468, 469, 474, 476, 477, 478, 482, 488, 490, 492, 497, 502, 504, 505, 508, 509, 510, 513, 514, 516, 537, 551, 554, 556], "str": [15, 16, 19, 20, 26, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 114, 116, 117, 118, 119, 120, 122, 124, 125, 127, 128, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 168, 169, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 287, 299, 308, 323, 324, 340, 341, 343, 347, 351, 352, 354, 372, 385, 431, 433, 459, 463, 469], "bool": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 82, 83, 84, 86, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 116, 117, 118, 119, 120, 124, 125, 127, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 162, 169, 172, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 259, 284, 287, 296, 299, 317, 325, 327, 329, 355, 358, 372, 441, 455, 459, 460], "replac": [15, 16, 80, 83, 86, 95, 97, 99, 100, 104, 105, 118, 140, 141, 147, 152, 180, 181, 183, 186, 190, 191, 193, 195, 257, 269, 358, 368, 369, 372, 376, 379, 385, 391, 400, 401, 403, 405, 406, 423, 424, 443, 452], "run_fit": [15, 432, 436, 476], "set_model": [15, 380, 432, 436, 449, 476], "fovbackgroundmodel": [15, 97, 103, 104, 107, 159, 228, 386, 406, 423, 424, 439, 440, 443, 444, 447, 456, 462, 476, 477, 499, 512], "alreadi": [15, 16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 118, 199, 255, 256, 257, 259, 358, 364, 365, 366, 369, 370, 371, 372, 373, 375, 378, 379, 380, 382, 385, 387, 388, 418, 429, 433, 435, 444, 452, 454, 455, 456, 460, 461, 462, 463, 467, 468, 469, 478, 480, 505, 516], "string": [15, 16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 86, 88, 99, 117, 118, 119, 120, 121, 124, 127, 143, 149, 151, 153, 158, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 200, 202, 210, 232, 287, 305, 347, 358, 371, 372, 375, 377, 384, 385, 397, 401, 409, 411, 432, 455, 461, 463, 476, 504, 505], "update_config": 15, "updat": [15, 16, 80, 83, 86, 98, 99, 103, 118, 189, 200, 202, 210, 232, 269, 307, 326, 358, 361, 363, 364, 365, 366, 367, 370, 375, 380, 382, 384, 385, 387, 388, 390, 391, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 415, 416, 417, 418, 420, 423, 424, 460, 463, 503, 504, 556], "write_dataset": 15, "write_covari": [15, 95, 210, 232], "save": [15, 19, 20, 26, 79, 95, 127, 197, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 358, 366, 374, 382, 386, 439, 440, 443, 457, 461, 462, 469, 489], "covari": [15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 120, 121, 124, 125, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 271, 272, 351, 376, 386, 405, 411, 419, 420, 423, 432, 476, 554], "write_model": 15, "gener": [16, 27, 33, 42, 45, 46, 47, 56, 78, 79, 80, 83, 84, 86, 87, 97, 98, 99, 100, 103, 104, 105, 118, 141, 152, 155, 182, 183, 185, 186, 187, 191, 194, 195, 199, 209, 217, 221, 222, 223, 224, 225, 240, 246, 255, 256, 258, 260, 261, 309, 311, 314, 315, 316, 317, 323, 359, 361, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 388, 391, 394, 400, 404, 405, 406, 409, 411, 416, 420, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 488, 492, 497, 503, 505, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 552, 554, 555], "generalconfig": 16, "log": [16, 19, 20, 26, 42, 80, 97, 99, 117, 118, 119, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 187, 191, 195, 200, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 265, 273, 279, 298, 299, 301, 344, 353, 370, 374, 396, 413, 420, 424, 426, 432, 434, 435, 436, 437, 439, 440, 441, 444, 447, 449, 450, 451, 454, 456, 457, 458, 459, 460, 463, 465, 468, 469, 474, 476, 477, 492, 494, 504, 505, 506, 529, 537, 538, 544, 551, 552, 553, 554, 555], "logconfig": 16, "info": [16, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 86, 89, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 143, 149, 151, 153, 271, 272, 295, 359, 373, 374, 378, 387, 393, 403, 404, 406, 413, 414, 417, 432, 436, 437, 439, 443, 450, 454, 455, 456, 460, 468, 469, 470, 472, 474, 476, 552], "none": [16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 50, 51, 52, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 107, 108, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 271, 272, 284, 285, 287, 290, 295, 299, 307, 308, 309, 311, 314, 315, 316, 317, 325, 327, 333, 341, 345, 346, 347, 351, 352, 353, 354, 355, 358, 370, 372, 375, 382, 385, 386, 411, 422, 423, 428, 429, 431, 432, 434, 435, 439, 440, 441, 443, 444, 445, 447, 450, 451, 452, 454, 455, 456, 459, 460, 462, 463, 465, 468, 476, 480, 488, 504, 509, 510, 511, 552], "filemod": [16, 432, 436, 437, 439, 476, 552], "format": [16, 79, 80, 81, 82, 83, 84, 86, 89, 97, 99, 100, 102, 104, 105, 117, 118, 119, 120, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 175, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 210, 224, 232, 260, 295, 317, 339, 340, 347, 357, 359, 366, 367, 368, 369, 370, 372, 374, 382, 384, 385, 388, 397, 409, 411, 414, 418, 420, 421, 423, 424, 429, 431, 432, 433, 435, 436, 437, 439, 441, 443, 444, 445, 448, 449, 451, 455, 458, 460, 461, 463, 467, 468, 469, 470, 476, 478, 480, 486, 488, 489, 490, 491, 494, 495, 496, 497, 498, 505, 546, 547, 551, 552, 553], "datefmt": [16, 432, 436, 437, 439, 476, 552], "outdir": [16, 78, 88, 432, 436, 437, 439, 476], "n_job": [16, 88, 120, 121, 124, 127, 158, 307, 423, 432, 436, 437, 439, 445, 459, 476], "1": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 62, 64, 65, 69, 70, 71, 72, 74, 79, 82, 83, 84, 86, 90, 91, 96, 97, 99, 100, 104, 105, 106, 109, 110, 111, 112, 116, 118, 119, 120, 121, 122, 124, 125, 127, 128, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 157, 162, 165, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 200, 202, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 235, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 269, 271, 272, 276, 277, 285, 286, 298, 299, 305, 306, 307, 316, 317, 319, 320, 343, 345, 348, 349, 353, 355, 358, 359, 361, 362, 365, 366, 368, 369, 370, 372, 373, 375, 378, 380, 381, 382, 383, 384, 385, 387, 388, 391, 394, 395, 398, 399, 401, 402, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 473, 476, 477, 478, 480, 484, 485, 486, 489, 490, 492, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 553, 554, 555], "datasets_fil": [16, 432, 436, 437, 439, 476], "models_fil": [16, 432, 436, 437, 439, 476], "observationsconfig": 16, "datastor": [16, 85, 91, 162, 285, 286, 364, 368, 373, 390, 394, 400, 411, 412, 414, 415, 417, 423, 424, 428, 431, 432, 433, 436, 437, 439, 441, 443, 447, 450, 452, 459, 464, 469, 470, 474, 476, 492, 499, 501, 502, 552], "posixpath": [16, 323], "home": [16, 323, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 518, 524, 527, 540, 546, 547], "runner": [16, 323, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 518, 524, 527, 540, 546, 547], "hess": [16, 55, 65, 78, 79, 82, 84, 86, 91, 92, 96, 104, 105, 120, 125, 134, 135, 142, 144, 162, 168, 269, 285, 286, 359, 366, 367, 372, 374, 378, 387, 390, 394, 397, 399, 402, 413, 414, 417, 418, 426, 428, 429, 431, 432, 433, 437, 439, 441, 442, 450, 452, 454, 455, 456, 457, 459, 464, 465, 468, 470, 471, 474, 476, 477, 480, 489, 490, 492, 494, 495, 496, 498, 499, 501, 502], "dr1": [16, 63, 78, 79, 82, 84, 86, 91, 144, 162, 253, 285, 286, 359, 366, 378, 394, 426, 428, 431, 432, 437, 439, 450, 459, 464, 474, 476, 477, 489, 492, 494, 495, 496, 498, 499, 501, 502, 506, 538], "obs_id": [16, 78, 83, 84, 85, 86, 91, 135, 285, 286, 368, 370, 380, 385, 394, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 444, 449, 450, 451, 457, 459, 464, 467, 469, 470, 474, 476, 477, 501], "obs_fil": [16, 432, 436, 437, 439, 476], "obs_con": [16, 432, 436, 437, 439, 476], "spatialcircleconfig": 16, "frame": [16, 79, 81, 86, 89, 90, 91, 97, 100, 104, 105, 106, 110, 121, 132, 152, 162, 165, 175, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259, 285, 286, 321, 334, 358, 359, 367, 369, 372, 382, 399, 400, 402, 403, 404, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 476, 477, 478, 496, 501, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516], "lon": [16, 47, 86, 89, 91, 97, 100, 104, 106, 110, 116, 121, 123, 127, 140, 141, 147, 152, 155, 158, 182, 183, 185, 188, 191, 193, 194, 195, 206, 207, 211, 218, 219, 222, 234, 236, 244, 245, 247, 249, 255, 257, 259, 289, 290, 293, 315, 358, 359, 369, 372, 377, 381, 402, 432, 436, 437, 439, 441, 445, 449, 450, 455, 456, 458, 459, 460, 463, 464, 468, 476, 477, 478, 490, 504, 505, 509, 510, 511, 512, 513, 514, 515], "lat": [16, 47, 58, 60, 61, 63, 67, 69, 71, 72, 74, 79, 82, 86, 89, 91, 97, 100, 104, 106, 110, 116, 120, 121, 123, 127, 140, 141, 147, 152, 155, 158, 182, 183, 185, 188, 191, 193, 194, 195, 206, 207, 211, 218, 219, 222, 234, 236, 244, 245, 247, 249, 255, 257, 259, 264, 269, 289, 290, 293, 315, 358, 359, 366, 367, 368, 369, 370, 371, 377, 378, 381, 388, 390, 395, 398, 403, 416, 417, 418, 426, 429, 432, 435, 436, 437, 439, 441, 445, 449, 450, 455, 456, 458, 459, 460, 461, 462, 463, 464, 471, 472, 476, 477, 478, 480, 487, 488, 489, 490, 492, 497, 504, 505, 509, 510, 511, 512, 513, 514, 515, 549, 556], "radiu": [16, 17, 18, 21, 22, 24, 25, 27, 33, 34, 38, 43, 44, 50, 51, 52, 53, 54, 70, 78, 79, 86, 91, 97, 100, 104, 105, 116, 121, 122, 143, 149, 151, 152, 153, 155, 157, 165, 167, 183, 193, 195, 196, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 257, 259, 285, 286, 319, 359, 372, 374, 381, 382, 399, 408, 409, 413, 423, 427, 428, 431, 432, 434, 435, 436, 437, 439, 441, 443, 444, 449, 450, 452, 454, 456, 458, 459, 461, 462, 463, 464, 467, 476, 477, 478, 485, 486, 499, 501, 502, 505, 509, 510, 511, 514, 515], "obs_tim": [16, 432, 436, 437, 439, 476], "timerangeconfig": 16, "start": [16, 53, 79, 82, 84, 85, 86, 87, 89, 95, 124, 132, 192, 209, 210, 217, 221, 223, 224, 225, 232, 240, 246, 258, 261, 358, 359, 361, 363, 365, 366, 367, 368, 371, 372, 374, 375, 383, 384, 386, 387, 388, 392, 393, 394, 395, 397, 402, 411, 414, 415, 416, 417, 418, 423, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 460, 463, 467, 468, 472, 476, 478, 479, 492, 496, 550], "stop": [16, 52, 79, 82, 84, 85, 86, 87, 95, 124, 127, 192, 209, 210, 217, 221, 223, 224, 225, 232, 240, 246, 258, 261, 368, 394, 423, 432, 436, 437, 439, 450, 452, 457, 468, 476], "required_irf": [16, 78, 432, 433, 436, 437, 439, 476], "aeff": [16, 78, 83, 84, 100, 105, 142, 168, 176, 368, 370, 371, 405, 406, 428, 431, 432, 433, 436, 437, 439, 441, 450, 458, 459, 467, 469, 470, 476, 477, 494, 499, 501, 502, 551], "edisp": [16, 78, 83, 84, 91, 97, 100, 101, 104, 105, 106, 110, 139, 140, 141, 144, 148, 162, 168, 169, 172, 173, 247, 285, 286, 359, 368, 369, 370, 371, 374, 404, 406, 409, 415, 416, 417, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 447, 450, 451, 456, 459, 464, 467, 468, 469, 470, 476, 488, 496, 497, 551], "psf": [16, 78, 83, 84, 91, 97, 98, 100, 103, 104, 105, 107, 108, 141, 143, 148, 149, 150, 151, 152, 153, 155, 162, 169, 178, 193, 210, 232, 247, 285, 286, 358, 364, 368, 369, 370, 371, 374, 397, 399, 403, 404, 405, 406, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 423, 427, 428, 431, 432, 433, 435, 436, 437, 439, 441, 443, 444, 447, 449, 456, 459, 461, 464, 467, 469, 470, 476, 477, 488, 490, 492, 497, 500, 505, 551], "bkg": [16, 78, 83, 84, 97, 101, 102, 104, 105, 136, 137, 138, 168, 175, 218, 380, 404, 406, 411, 427, 431, 432, 436, 437, 439, 440, 443, 444, 447, 452, 456, 458, 459, 462, 467, 469, 470, 476, 477, 488, 495, 551, 553, 554, 555], "datasetsconfig": 16, "type": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 80, 83, 85, 86, 91, 94, 95, 96, 97, 99, 116, 117, 118, 119, 121, 127, 156, 162, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 287, 317, 364, 367, 368, 369, 370, 372, 373, 374, 377, 381, 382, 384, 386, 388, 389, 394, 402, 409, 415, 416, 417, 423, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 476, 477, 478, 480, 490, 492, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552], "1d": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 104, 105, 121, 140, 141, 150, 164, 181, 183, 312, 351, 364, 368, 369, 371, 372, 373, 374, 377, 378, 379, 390, 400, 402, 403, 404, 405, 409, 411, 414, 418, 420, 421, 424, 426, 427, 428, 429, 430, 431, 433, 435, 439, 446, 451, 456, 457, 459, 461, 463, 464, 465, 467, 468, 476, 488, 490, 492, 497, 500, 505, 549, 551], "stack": [16, 79, 82, 87, 95, 96, 97, 99, 100, 104, 105, 116, 117, 119, 140, 141, 147, 152, 155, 158, 182, 183, 184, 185, 190, 191, 194, 195, 198, 201, 203, 257, 328, 358, 370, 373, 374, 380, 385, 399, 402, 403, 406, 409, 414, 415, 420, 421, 423, 428, 432, 436, 440, 441, 449, 452, 456, 457, 459, 464, 465, 476, 477, 489, 490, 499, 502, 551], "geom": [16, 23, 79, 97, 100, 104, 105, 106, 108, 110, 116, 117, 119, 121, 127, 140, 141, 150, 152, 155, 162, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 206, 207, 210, 211, 218, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 259, 369, 371, 373, 406, 409, 418, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 468, 469, 476, 477, 478, 490, 499, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513], "geomconfig": 16, "wcsconfig": 16, "skydir": [16, 79, 97, 100, 104, 105, 106, 110, 141, 152, 162, 181, 182, 183, 185, 191, 193, 194, 195, 431, 432, 433, 436, 437, 439, 441, 442, 443, 444, 447, 449, 452, 454, 456, 458, 459, 460, 461, 463, 468, 469, 476, 477, 499, 501, 502, 503, 505, 510, 511, 512, 513], "skycoordconfig": 16, "binsiz": [16, 432, 436, 437, 439, 449, 476, 477], "angl": [16, 17, 18, 21, 22, 24, 25, 27, 33, 34, 38, 66, 79, 85, 86, 91, 97, 100, 109, 111, 112, 116, 123, 127, 136, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 155, 158, 165, 166, 168, 170, 180, 181, 183, 188, 190, 193, 195, 196, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 257, 259, 262, 315, 345, 358, 364, 372, 374, 381, 385, 397, 399, 400, 401, 418, 427, 428, 431, 434, 440, 443, 444, 450, 455, 460, 461, 463, 464, 467, 468, 492, 497, 501, 504, 505, 509, 510, 511, 514, 515, 551], "02": [16, 65, 79, 89, 97, 100, 104, 105, 106, 110, 150, 157, 162, 182, 183, 185, 187, 191, 192, 194, 195, 394, 426, 427, 429, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 466, 468, 473, 476, 477, 478, 499, 501, 502, 509, 510, 511, 517], "deg": [16, 33, 34, 38, 47, 65, 79, 81, 83, 86, 89, 91, 97, 100, 104, 105, 107, 108, 109, 111, 112, 116, 121, 122, 127, 132, 133, 141, 143, 144, 149, 150, 151, 152, 153, 154, 155, 157, 165, 166, 168, 170, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 210, 211, 219, 222, 232, 236, 244, 245, 247, 285, 286, 319, 353, 358, 359, 369, 372, 374, 381, 382, 385, 394, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 476, 477, 478, 489, 490, 492, 494, 496, 499, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516], "width": [16, 27, 66, 79, 83, 86, 97, 100, 104, 105, 106, 107, 109, 110, 111, 112, 122, 127, 139, 140, 141, 144, 147, 150, 152, 155, 157, 162, 167, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 207, 210, 211, 219, 221, 222, 232, 234, 244, 245, 247, 249, 255, 257, 259, 348, 349, 374, 381, 419, 432, 433, 436, 437, 439, 441, 442, 443, 444, 445, 447, 449, 452, 454, 455, 456, 458, 459, 460, 461, 463, 468, 469, 476, 477, 478, 499, 501, 502, 503, 504, 505, 509, 510, 511, 513, 514, 515], "widthconfig": 16, "5": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 52, 53, 65, 79, 83, 86, 97, 98, 100, 103, 104, 105, 112, 116, 119, 120, 122, 124, 126, 132, 133, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 162, 165, 182, 183, 185, 187, 191, 193, 194, 195, 204, 205, 208, 211, 212, 214, 215, 216, 219, 220, 222, 224, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 263, 287, 319, 348, 349, 353, 355, 358, 359, 362, 363, 365, 369, 370, 372, 373, 374, 375, 377, 381, 382, 383, 389, 394, 397, 399, 401, 402, 409, 411, 413, 414, 416, 417, 418, 422, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 480, 485, 486, 489, 496, 499, 501, 502, 503, 504, 505, 509, 510, 511, 512, 514, 518, 519, 524, 526, 527, 528, 532, 533, 540, 541, 542, 543, 545, 551, 553, 554], "height": [16, 29, 83, 86, 89, 121, 320, 432, 436, 437, 439, 445, 449, 452, 454, 460, 461, 463, 476, 501, 505], "binsize_irf": [16, 432, 436, 437, 439, 449, 476], "select": [16, 78, 79, 82, 83, 84, 85, 86, 87, 91, 95, 97, 100, 104, 105, 162, 169, 182, 183, 184, 185, 187, 192, 194, 195, 201, 203, 210, 232, 247, 257, 269, 354, 355, 368, 370, 371, 372, 373, 374, 378, 380, 382, 385, 390, 392, 398, 401, 409, 413, 427, 431, 433, 434, 436, 437, 439, 440, 442, 443, 444, 447, 451, 452, 456, 457, 459, 460, 461, 464, 467, 469, 470, 472, 478, 490, 492, 496, 497, 501, 550, 552], "selectionconfig": 16, "offset_max": [16, 79, 158, 168, 174, 177, 432, 436, 437, 439, 441, 447, 452, 459, 476, 477, 499, 502], "ax": [16, 19, 20, 26, 64, 65, 79, 96, 97, 100, 104, 105, 106, 107, 110, 116, 117, 119, 121, 122, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 162, 169, 172, 173, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 271, 272, 345, 346, 350, 351, 352, 353, 354, 355, 358, 367, 377, 400, 404, 409, 415, 416, 417, 420, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 476, 477, 478, 488, 490, 492, 494, 499, 501, 502, 503, 504, 509, 510, 511, 515, 518, 546, 547, 551], "energyaxesconfig": 16, "energi": [16, 19, 20, 26, 44, 50, 51, 52, 53, 58, 61, 62, 65, 69, 71, 72, 76, 78, 79, 84, 91, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 114, 116, 117, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 155, 162, 164, 168, 169, 171, 172, 173, 175, 176, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 267, 353, 354, 358, 364, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 382, 386, 390, 394, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 428, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 443, 445, 446, 447, 449, 450, 451, 452, 455, 456, 459, 460, 469, 470, 472, 476, 477, 478, 487, 488, 489, 492, 497, 500, 501, 503, 504, 505, 512, 518, 524, 527, 529, 532, 537, 547, 549, 550, 551, 553], "energyaxisconfig": 16, "min": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 86, 97, 120, 122, 124, 134, 162, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 276, 315, 373, 374, 381, 386, 394, 409, 417, 432, 434, 436, 437, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 463, 464, 465, 468, 476, 477, 480, 501, 528, 531, 537], "tev": [16, 19, 20, 26, 44, 52, 53, 64, 65, 69, 72, 79, 91, 96, 97, 100, 104, 105, 106, 110, 112, 119, 120, 132, 133, 136, 137, 139, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 162, 182, 183, 185, 191, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 247, 248, 250, 251, 252, 253, 256, 260, 262, 263, 285, 286, 307, 353, 359, 369, 381, 382, 385, 386, 394, 427, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 486, 489, 490, 496, 497, 499, 501, 502, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550], "max": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 84, 86, 97, 107, 120, 122, 124, 152, 154, 155, 158, 162, 168, 195, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 315, 366, 374, 381, 386, 394, 405, 406, 407, 409, 411, 423, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 445, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 469, 476, 477, 480, 499, 501, 502, 509, 528, 531, 537, 554], "nbin": [16, 106, 110, 121, 142, 144, 150, 152, 184, 187, 192, 195, 319, 320, 374, 427, 431, 432, 433, 436, 437, 439, 440, 441, 443, 444, 445, 449, 450, 452, 456, 458, 459, 460, 463, 468, 469, 470, 476, 496, 499, 501, 502, 505], "energy_tru": [16, 91, 97, 100, 104, 105, 106, 110, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 162, 169, 172, 180, 181, 187, 190, 193, 285, 286, 358, 359, 371, 423, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 447, 449, 450, 451, 452, 456, 458, 459, 460, 461, 463, 464, 467, 468, 469, 476, 477, 496, 497, 499, 501, 502, 505], "20": [16, 38, 79, 83, 85, 86, 97, 100, 104, 105, 143, 144, 149, 151, 153, 162, 182, 183, 185, 191, 194, 195, 285, 359, 362, 363, 364, 366, 371, 373, 376, 378, 383, 420, 426, 427, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 446, 448, 449, 450, 451, 452, 454, 455, 457, 459, 460, 462, 463, 465, 467, 470, 476, 477, 478, 479, 480, 499, 501, 502, 503, 509, 510, 511, 514, 515, 524, 527, 532, 538, 553], "16": [16, 24, 53, 65, 89, 104, 105, 181, 362, 366, 375, 378, 379, 402, 417, 422, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 503, 545, 553, 554], "map_select": [16, 432, 436, 437, 439, 476], "count": [16, 79, 87, 95, 97, 100, 101, 102, 103, 104, 105, 108, 112, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 131, 157, 159, 162, 163, 164, 169, 171, 175, 179, 182, 183, 185, 186, 187, 191, 194, 195, 201, 203, 210, 232, 271, 272, 273, 274, 279, 280, 283, 284, 309, 343, 345, 354, 356, 364, 366, 369, 370, 371, 373, 374, 378, 382, 400, 401, 404, 406, 409, 411, 412, 418, 419, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 445, 447, 449, 450, 451, 452, 456, 457, 459, 460, 461, 465, 469, 474, 476, 477, 478, 490, 492, 496, 499, 500, 501, 502, 505, 551, 552, 553, 555], "exposur": [16, 79, 84, 97, 100, 101, 103, 104, 105, 116, 127, 131, 140, 141, 147, 150, 152, 155, 157, 162, 169, 172, 173, 174, 176, 177, 178, 247, 280, 283, 284, 364, 367, 368, 369, 370, 371, 382, 401, 406, 414, 416, 417, 418, 420, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 447, 450, 451, 456, 459, 460, 461, 469, 476, 477, 488, 497, 500, 505, 554], "background": [16, 65, 78, 79, 84, 88, 97, 98, 100, 101, 103, 104, 105, 107, 108, 112, 116, 117, 119, 126, 136, 137, 138, 148, 157, 159, 160, 162, 163, 164, 165, 167, 168, 169, 175, 212, 218, 257, 264, 271, 272, 280, 281, 282, 283, 284, 354, 358, 364, 367, 370, 371, 372, 374, 378, 379, 382, 390, 395, 398, 399, 400, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 426, 427, 428, 431, 432, 433, 434, 435, 436, 438, 439, 441, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 458, 460, 461, 465, 469, 470, 472, 477, 488, 490, 491, 504, 550, 551, 552, 554, 555], "backgroundconfig": 16, "exclus": [16, 79, 157, 159, 164, 165, 166, 167, 170, 181, 193, 364, 372, 374, 405, 407, 428, 436, 439, 459, 499, 501], "safe_mask": [16, 97, 104, 432, 436, 437, 439, 476], "safemaskconfig": 16, "on_region": [16, 97, 100, 165, 427, 428, 431, 432, 433, 434, 436, 437, 439, 441, 443, 444, 449, 450, 452, 456, 476, 501], "containment_correct": [16, 97, 100, 169, 427, 431, 432, 433, 436, 437, 439, 441, 449, 450, 452, 456, 459, 476], "fitconfig": 16, "fit_rang": [16, 432, 436, 437, 439, 476], "energyrangeconfig": 16, "flux_point": [16, 64, 65, 69, 71, 72, 74, 75, 76, 93, 96, 117, 119, 120, 370, 427, 429, 431, 432, 436, 437, 439, 441, 452, 455, 456, 476, 477, 478], "fluxpointsconfig": 16, "selection_opt": [16, 112, 114, 115, 116, 120, 121, 123, 124, 125, 126, 127, 409, 431, 432, 436, 437, 439, 440, 441, 445, 449, 450, 451, 452, 461, 469, 476], "excess_map": [16, 432, 436, 437, 439, 476], "excessmapconfig": 16, "correlation_radiu": [16, 116, 132, 133, 432, 436, 437, 439, 452, 469, 476, 490], "energy_edg": [16, 112, 114, 116, 120, 121, 124, 127, 132, 133, 135, 187, 307, 382, 431, 432, 435, 436, 437, 439, 440, 441, 442, 445, 449, 450, 451, 452, 469, 476, 477, 490], "light_curv": [16, 224, 378, 418, 426, 432, 436, 437, 439, 449, 453, 476, 547], "lightcurveconfig": 16, "time_interv": [16, 79, 82, 84, 87, 124, 432, 436, 437, 439, 444, 449, 450, 476], "gammapybaseconfig": 16, "new": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 82, 83, 84, 86, 87, 96, 97, 99, 100, 104, 105, 117, 118, 119, 120, 124, 134, 136, 137, 138, 139, 142, 144, 146, 149, 154, 165, 166, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 210, 232, 247, 257, 287, 311, 336, 343, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 410, 413, 439, 448, 455, 456, 460, 462, 463, 489, 490, 492, 537, 551], "pars": [16, 80, 81, 99, 118, 181, 190, 359, 372, 427, 434, 436, 439, 441, 447, 451, 461, 467, 552], "valid": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 101, 117, 118, 121, 154, 168, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 287, 305, 357, 358, 367, 371, 374, 375, 384, 403, 411, 420, 428, 431, 457, 459, 460, 463, 468, 490, 492, 497, 551], "input": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 80, 82, 83, 86, 97, 99, 100, 103, 112, 114, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 133, 135, 140, 141, 143, 150, 151, 152, 153, 154, 155, 157, 159, 163, 165, 167, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 203, 210, 224, 232, 258, 259, 260, 287, 298, 308, 311, 328, 330, 351, 353, 364, 366, 368, 369, 370, 371, 372, 373, 374, 379, 394, 404, 409, 412, 419, 423, 434, 443, 444, 452, 460, 465, 490, 504, 505, 553], "keyword": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 78, 79, 80, 82, 83, 84, 86, 90, 96, 97, 99, 100, 104, 105, 118, 119, 121, 122, 134, 135, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 270, 299, 307, 308, 327, 339, 341, 342, 345, 346, 347, 351, 352, 353, 354, 355, 385, 405, 409, 412, 420, 421, 433, 443, 444, 456, 460, 469, 490, 505, 516], "rais": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 80, 82, 83, 86, 87, 95, 99, 118, 184, 189, 210, 212, 232, 255, 256, 257, 259, 287, 336, 358, 372, 381, 382, 385, 386, 403, 420, 423, 424, 444], "validationerror": [16, 80, 99, 118, 385], "pydantic_cor": [16, 80, 99, 118], "cannot": [16, 65, 80, 83, 86, 90, 99, 107, 117, 118, 119, 197, 279, 326, 355, 361, 371, 372, 423, 458, 462, 463, 490, 505], "form": [16, 80, 83, 86, 97, 99, 118, 152, 155, 190, 299, 358, 364, 368, 373, 381, 383, 385, 395, 417, 461, 465, 489, 497, 510, 520, 550], "self": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 82, 83, 86, 99, 117, 118, 119, 190, 191, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 247, 248, 250, 251, 252, 253, 256, 260, 358, 359, 369, 370, 372, 375, 381, 382, 385, 386, 405, 460, 463], "explicitli": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 287, 368, 380, 389, 399, 444, 462, 490, 504, 556], "posit": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 86, 89, 90, 91, 97, 98, 99, 100, 103, 117, 118, 119, 120, 121, 124, 125, 127, 140, 141, 147, 150, 152, 155, 165, 168, 170, 179, 181, 182, 183, 185, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 257, 259, 269, 271, 272, 285, 286, 289, 290, 293, 294, 346, 358, 365, 369, 371, 372, 381, 382, 383, 384, 399, 401, 406, 409, 411, 424, 427, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 470, 478, 488, 489, 490, 492, 497, 498, 501, 502, 503, 505, 509, 510, 511, 513, 528, 554], "onli": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 68, 70, 71, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 118, 119, 120, 124, 127, 140, 141, 145, 147, 152, 155, 158, 164, 169, 180, 181, 182, 183, 185, 190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 258, 259, 271, 272, 287, 307, 333, 355, 358, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 391, 399, 401, 405, 409, 411, 412, 417, 421, 423, 424, 428, 429, 431, 432, 433, 436, 437, 439, 440, 442, 443, 444, 445, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 477, 480, 488, 490, 492, 496, 499, 502, 505, 547, 551, 552, 553, 554], "allow": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 80, 83, 86, 99, 112, 117, 118, 119, 126, 127, 152, 155, 181, 310, 358, 359, 361, 363, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 400, 402, 403, 404, 405, 406, 409, 411, 418, 419, 420, 423, 427, 431, 442, 451, 456, 457, 458, 459, 460, 461, 477, 488, 490, 492, 499, 504, 505, 549, 550, 552, 557], "field": [16, 42, 50, 51, 54, 79, 80, 83, 86, 99, 118, 136, 137, 138, 139, 142, 143, 144, 145, 146, 149, 151, 153, 154, 159, 218, 233, 289, 293, 345, 358, 372, 384, 385, 394, 399, 404, 411, 418, 431, 433, 437, 439, 441, 443, 458, 459, 461, 467, 468, 492, 494, 495, 496, 497, 498, 499, 501, 528, 551], "model_computed_field": [16, 80, 99, 118], "classvar": [16, 80, 99, 118], "computedfieldinfo": [16, 80, 99, 118], "A": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 84, 85, 86, 87, 94, 95, 96, 97, 99, 100, 103, 104, 105, 117, 118, 119, 127, 132, 133, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 255, 256, 257, 258, 259, 260, 271, 272, 280, 287, 296, 347, 348, 349, 351, 352, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 396, 398, 402, 403, 404, 405, 406, 409, 411, 412, 415, 416, 417, 418, 420, 422, 423, 424, 427, 428, 431, 433, 435, 439, 441, 442, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 475, 477, 478, 480, 488, 489, 490, 492, 493, 501, 502, 504, 505, 507, 509, 546, 547, 550, 551, 554], "comput": [16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 79, 80, 82, 84, 89, 91, 95, 96, 97, 99, 100, 104, 105, 112, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 168, 169, 171, 174, 175, 176, 177, 179, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 196, 199, 204, 205, 208, 210, 212, 214, 215, 216, 220, 224, 226, 227, 229, 232, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 262, 263, 269, 270, 271, 272, 275, 276, 277, 278, 283, 286, 290, 291, 294, 358, 367, 368, 369, 370, 371, 372, 373, 376, 378, 379, 380, 381, 382, 386, 388, 390, 391, 395, 397, 399, 400, 401, 402, 405, 406, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 433, 435, 439, 440, 444, 445, 448, 449, 450, 452, 454, 456, 459, 462, 463, 464, 465, 468, 469, 470, 476, 478, 480, 488, 490, 492, 497, 501, 528, 550, 551, 552, 553, 554, 555, 556], "correspond": [16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 45, 80, 83, 85, 86, 95, 97, 99, 100, 104, 105, 117, 118, 119, 120, 121, 122, 124, 125, 127, 139, 140, 141, 147, 150, 152, 154, 155, 156, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 204, 205, 208, 212, 214, 215, 216, 219, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 285, 351, 368, 369, 370, 371, 378, 379, 382, 384, 386, 403, 406, 428, 429, 431, 432, 433, 439, 443, 444, 449, 455, 457, 459, 460, 463, 464, 465, 467, 468, 469, 476, 478, 488, 489, 490, 492, 504, 505, 515, 518, 550, 551, 556], "model_config": [16, 80, 99, 118, 436, 476], "configdict": [16, 80, 99, 118], "arbitrary_types_allow": [16, 80, 99, 118, 385], "extra": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 79, 80, 99, 118, 180, 181, 186, 190, 191, 193, 199, 255, 256, 285, 357, 359, 365, 366, 372, 374, 375, 378, 384, 385, 414, 417, 418, 460, 461, 492, 505], "forbid": [16, 80, 99, 118], "json_encod": 16, "lambda": [16, 65, 215, 216, 351, 455, 457, 467, 522, 554], "use_enum_valu": [16, 80, 99, 118], "validate_assign": [16, 80, 99, 118, 385], "validate_default": [16, 80, 99, 118], "should": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 97, 99, 100, 103, 104, 105, 107, 109, 111, 117, 118, 119, 120, 124, 128, 129, 130, 134, 140, 141, 144, 150, 152, 155, 167, 172, 173, 178, 180, 181, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 287, 333, 347, 348, 349, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 387, 388, 390, 392, 393, 394, 399, 401, 423, 433, 439, 442, 443, 444, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 488, 490, 492, 497, 504, 552, 553, 555, 556], "conform": [16, 80, 99, 118, 460], "pydant": [16, 80, 99, 118, 357, 403, 422, 424], "model_extra": [16, 80, 99, 118], "get": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 81, 83, 84, 86, 89, 91, 95, 97, 99, 101, 102, 104, 112, 116, 118, 120, 121, 124, 125, 127, 132, 134, 139, 140, 141, 147, 152, 155, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 198, 201, 203, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 295, 311, 358, 359, 363, 364, 365, 366, 367, 368, 372, 373, 375, 382, 384, 385, 386, 388, 389, 391, 392, 394, 395, 398, 400, 415, 416, 417, 418, 427, 432, 434, 435, 439, 440, 441, 447, 450, 455, 456, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 480, 488, 492, 505, 551, 555], "dure": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 52, 53, 79, 80, 81, 84, 90, 97, 99, 100, 104, 105, 118, 159, 269, 359, 366, 370, 374, 377, 378, 380, 383, 384, 385, 386, 387, 388, 403, 406, 423, 424, 432, 433, 443, 449, 450, 456, 459, 461, 465, 477, 488, 489, 551, 555], "return": [16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 284, 285, 286, 287, 289, 291, 293, 294, 298, 300, 305, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 339, 340, 341, 342, 343, 346, 348, 349, 351, 353, 354, 364, 368, 369, 370, 371, 372, 373, 381, 382, 385, 386, 402, 403, 406, 409, 412, 418, 420, 431, 433, 441, 445, 450, 451, 455, 456, 457, 459, 460, 461, 463, 465, 478, 482, 504, 505, 537, 554], "model_field": [16, 80, 99, 118], "fieldinfo": [16, 80, 99, 118], "annot": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 347, 385, 457, 509], "requir": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 43, 44, 78, 79, 80, 81, 83, 84, 86, 90, 97, 99, 100, 104, 105, 106, 110, 118, 119, 122, 127, 136, 137, 143, 151, 159, 182, 183, 184, 185, 186, 187, 190, 191, 192, 194, 195, 196, 287, 333, 337, 338, 356, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 380, 381, 382, 383, 384, 386, 387, 389, 391, 397, 402, 403, 404, 405, 410, 411, 413, 414, 415, 416, 419, 420, 421, 428, 433, 437, 440, 448, 450, 451, 452, 456, 458, 460, 461, 463, 467, 477, 490, 492, 505], "fals": [16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 78, 79, 80, 82, 83, 84, 86, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 116, 117, 118, 119, 120, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 162, 169, 172, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 287, 317, 325, 327, 355, 358, 372, 374, 381, 386, 417, 418, 424, 427, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 476, 477, 478, 489, 499, 501, 502, 516, 528, 537], "metadata": [16, 79, 80, 81, 83, 84, 86, 99, 101, 117, 118, 119, 136, 137, 138, 142, 143, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195, 340, 362, 364, 375, 424, 432, 443, 463, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "__fields__": [16, 80, 99, 118, 385], "model_fields_set": [16, 80, 99, 118], "have": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 80, 83, 86, 90, 95, 99, 102, 106, 110, 117, 118, 119, 120, 124, 132, 133, 139, 140, 141, 150, 152, 155, 162, 164, 176, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 287, 311, 317, 355, 357, 358, 359, 360, 361, 363, 364, 365, 367, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 403, 406, 409, 411, 412, 415, 417, 418, 419, 420, 421, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 476, 477, 478, 480, 488, 489, 490, 492, 503, 504, 505, 515, 526, 549, 552, 555, 556], "been": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 95, 99, 116, 118, 154, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 287, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 389, 391, 405, 406, 409, 411, 412, 418, 419, 420, 421, 422, 423, 424, 432, 442, 450, 451, 452, 460, 463, 464, 467, 469, 476, 489, 537, 556], "instanc": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 80, 81, 82, 83, 84, 86, 87, 99, 114, 118, 119, 120, 122, 124, 125, 154, 156, 164, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 305, 311, 345, 347, 348, 349, 352, 354, 358, 364, 369, 370, 373, 374, 380, 382, 385, 409, 429, 431, 434, 445, 455, 457, 459, 461, 462, 463, 478, 482, 492, 504, 505, 528], "were": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 128, 276, 358, 363, 364, 365, 366, 371, 373, 374, 375, 376, 377, 378, 379, 381, 383, 386, 388, 398, 401, 402, 403, 404, 405, 406, 409, 412, 417, 418, 421, 440, 452, 461, 465, 467, 555], "fill": [16, 80, 81, 83, 86, 97, 99, 100, 103, 104, 105, 118, 139, 150, 181, 182, 183, 185, 191, 193, 194, 195, 260, 358, 366, 367, 371, 374, 378, 384, 387, 388, 403, 410, 417, 420, 428, 443, 444, 455, 458, 459, 461, 468, 477, 504], "classmethod": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 95, 96, 97, 99, 100, 104, 105, 117, 118, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 385], "construct": [16, 80, 99, 118, 187, 226, 227, 324, 505, 551], "_fields_set": [16, 80, 99, 118], "ani": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 86, 99, 114, 118, 124, 141, 164, 182, 183, 185, 190, 191, 193, 194, 195, 287, 310, 343, 357, 358, 359, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 384, 385, 387, 390, 391, 392, 393, 394, 398, 399, 417, 418, 419, 424, 432, 441, 442, 445, 449, 452, 456, 459, 460, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 489, 490, 502, 504, 505, 520, 552, 556], "includ": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 78, 79, 80, 83, 84, 86, 99, 118, 124, 150, 156, 158, 159, 165, 166, 170, 180, 181, 190, 193, 233, 295, 357, 358, 364, 366, 369, 370, 371, 372, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 399, 401, 406, 417, 422, 423, 424, 427, 440, 442, 443, 445, 451, 454, 455, 457, 459, 461, 462, 463, 467, 469, 480, 482, 488, 490, 491, 502, 504, 549, 553, 556], "abstractsetintstr": [16, 80, 99, 118], "mappingintstrani": [16, 80, 99, 118], "exclud": [16, 80, 96, 97, 99, 100, 104, 105, 118, 123, 163, 165, 201, 203, 210, 232, 364, 421, 459, 461, 501, 502], "deep": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 82, 83, 86, 94, 95, 96, 97, 99, 100, 104, 105, 118, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 439], "deprec": [16, 79, 80, 81, 84, 99, 118, 120, 121, 124, 200, 202, 400, 409, 422, 423, 424, 516], "now": [16, 78, 80, 84, 94, 99, 117, 118, 119, 192, 233, 358, 361, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 386, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433, 434, 436, 437, 439, 440, 442, 443, 444, 445, 447, 449, 450, 451, 452, 456, 457, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 489, 490, 501, 539, 543, 544, 545, 552, 554, 555, 556], "model_copi": [16, 80, 99, 118, 463], "instead": [16, 19, 20, 26, 80, 81, 83, 86, 97, 99, 100, 104, 105, 108, 118, 169, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 358, 359, 361, 363, 365, 366, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 389, 390, 392, 399, 402, 405, 406, 419, 423, 433, 439, 443, 447, 449, 451, 452, 455, 456, 458, 459, 460, 463, 465, 489, 496, 497, 504, 505, 552], "If": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 114, 116, 117, 118, 119, 120, 122, 124, 127, 131, 132, 134, 139, 140, 141, 147, 150, 152, 155, 156, 158, 159, 162, 164, 165, 168, 169, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 270, 284, 287, 299, 300, 305, 344, 347, 351, 352, 353, 354, 358, 359, 360, 361, 363, 365, 366, 371, 372, 374, 375, 376, 379, 380, 381, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 417, 418, 419, 427, 428, 429, 431, 433, 434, 436, 439, 441, 444, 447, 449, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 478, 490, 492, 503, 505, 511, 513, 526, 552, 553, 554, 555], "you": [16, 19, 20, 26, 65, 78, 79, 80, 83, 86, 89, 96, 99, 102, 118, 119, 132, 137, 139, 142, 165, 182, 183, 185, 191, 194, 195, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 262, 269, 357, 358, 359, 360, 361, 363, 365, 368, 372, 375, 376, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 409, 417, 418, 419, 428, 429, 431, 432, 433, 434, 436, 437, 439, 441, 443, 444, 447, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 488, 489, 492, 495, 503, 526, 549, 552, 553, 554, 555, 556], "py": [16, 80, 99, 118, 358, 359, 365, 372, 375, 377, 379, 387, 388, 394, 399, 401, 402, 410, 415, 419, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552], "model_dump": [16, 80, 99, 118], "round_trip": [16, 80, 99, 118], "model_valid": [16, 80, 99, 118], "specifi": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 84, 86, 87, 91, 97, 99, 100, 104, 105, 112, 114, 117, 118, 119, 120, 122, 124, 125, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 157, 168, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 210, 224, 232, 269, 287, 289, 293, 298, 345, 368, 375, 380, 383, 391, 402, 405, 409, 433, 436, 439, 442, 443, 445, 447, 456, 457, 458, 459, 460, 462, 463, 467, 477, 488, 490, 503], "which": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 43, 56, 57, 59, 65, 68, 70, 76, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 99, 100, 102, 104, 105, 112, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 162, 163, 168, 169, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 199, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 263, 269, 271, 272, 276, 277, 278, 285, 299, 309, 319, 320, 336, 345, 347, 352, 354, 357, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 395, 399, 400, 401, 403, 404, 405, 406, 409, 412, 418, 420, 423, 427, 428, 431, 434, 435, 436, 437, 439, 442, 443, 444, 445, 448, 449, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 482, 483, 488, 489, 490, 492, 494, 495, 496, 498, 499, 501, 503, 504, 505, 506, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555], "pair": [16, 80, 97, 99, 100, 104, 105, 117, 118, 119, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 374], "overrid": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 326, 369, 431, 433, 441, 445], "incex": [16, 80, 99, 118], "by_alia": [16, 80, 99, 118], "exclude_unset": [16, 80, 99, 118], "exclude_default": [16, 80, 99, 118], "exclude_non": [16, 80, 99, 118], "from_orm": [16, 80, 99, 118], "obj": [16, 80, 99, 118, 433], "from_yaml": [16, 210, 232, 369, 432], "config_str": 16, "json": [16, 80, 99, 118, 387, 411, 413, 417], "encod": [16, 80, 83, 86, 99, 118], "callabl": [16, 45, 80, 99, 118, 265], "pydanticundefin": [16, 80, 99, 118], "models_as_dict": [16, 80, 99, 118], "dumps_kwarg": [16, 80, 99, 118], "model_construct": [16, 80, 99, 118], "__dict__": [16, 80, 99, 118, 358], "__pydantic_fields_set__": [16, 80, 99, 118], "trust": [16, 80, 99, 118], "pre": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 96, 99, 103, 118, 119, 287, 358, 361, 367, 378, 384, 385, 389, 390, 406, 418, 420, 432, 436, 437, 440, 442, 445, 448, 455, 457, 462, 465, 488, 494], "behav": [16, 80, 99, 118, 358, 368, 423, 436, 555], "wa": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 80, 81, 83, 86, 88, 89, 97, 99, 112, 118, 120, 121, 124, 127, 158, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 351, 358, 361, 363, 364, 365, 366, 367, 368, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 398, 401, 402, 403, 404, 405, 406, 413, 417, 418, 419, 420, 421, 422, 423, 429, 431, 437, 439, 441, 459, 465, 467, 468, 469, 470, 478, 552], "sinc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 51, 79, 80, 83, 84, 86, 99, 118, 120, 121, 124, 183, 193, 200, 202, 333, 358, 359, 364, 368, 372, 374, 375, 376, 377, 378, 382, 384, 385, 386, 388, 409, 419, 420, 421, 422, 423, 424, 433, 437, 439, 451, 456, 462, 463, 465, 467, 469, 524, 527, 553, 556], "accept": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 99, 100, 101, 105, 118, 157, 174, 179, 181, 182, 183, 185, 193, 194, 195, 210, 232, 272, 356, 362, 363, 364, 365, 366, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 410, 414, 423, 427, 432, 433, 434, 437, 441, 444, 456, 459, 460, 468, 488, 504, 510, 528, 553, 554], "usag": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 99, 114, 118, 124, 126, 167, 180, 181, 190, 193, 311, 364, 368, 369, 371, 373, 377, 382, 402, 423, 424, 455, 459, 461, 462, 552], "6": [16, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 50, 52, 53, 65, 80, 82, 83, 86, 95, 97, 99, 104, 106, 110, 118, 119, 124, 133, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195, 224, 263, 346, 349, 362, 365, 370, 374, 375, 378, 383, 391, 394, 407, 409, 411, 417, 418, 422, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 484, 501, 505, 511, 515, 535, 551, 553], "concept": [16, 80, 99, 118, 378, 379, 385, 395, 454, 460, 493], "serial": [16, 80, 83, 86, 94, 95, 96, 97, 99, 100, 104, 105, 118, 364, 369, 373, 374, 379, 382, 402, 405, 409, 411, 418, 420, 421, 422, 423, 424, 460, 463, 465, 480], "changmake": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 46, 59, 78, 80, 83, 86, 90, 96, 99, 118, 157, 158, 162, 163, 164, 165, 167, 168, 169, 172, 173, 178, 179, 181, 182, 183, 186, 187, 190, 192, 193, 194, 195, 258, 317, 319, 320, 329, 357, 359, 360, 363, 364, 365, 368, 370, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 394, 397, 398, 400, 403, 404, 409, 411, 414, 415, 416, 417, 420, 422, 428, 431, 433, 434, 437, 439, 443, 447, 449, 457, 458, 459, 460, 463, 467, 468, 469, 474, 478, 489, 492, 552, 553], "mode": [16, 80, 81, 83, 86, 89, 97, 99, 100, 104, 118, 122, 140, 141, 147, 152, 155, 158, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 257, 385, 404, 417, 420, 424, 451], "liter": [16, 80, 99, 118, 305, 358], "modelmodel_dump": [16, 80, 99, 118], "represent": [16, 19, 20, 26, 79, 80, 82, 83, 86, 99, 118, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 372, 385, 399, 401, 423, 429, 455, 460, 463, 504], "to_python": [16, 80, 99, 118], "run": [16, 78, 79, 80, 84, 88, 96, 98, 99, 103, 112, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 127, 132, 133, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 190, 193, 199, 307, 308, 332, 351, 357, 358, 359, 365, 366, 368, 371, 373, 374, 375, 378, 380, 382, 386, 387, 388, 389, 394, 400, 401, 404, 405, 416, 418, 419, 423, 427, 428, 429, 434, 435, 436, 437, 439, 440, 441, 443, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 477, 478, 488, 489, 490, 492, 497, 499, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "serializ": [16, 80, 99, 118], "mai": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 89, 96, 99, 118, 119, 120, 121, 124, 200, 202, 358, 359, 361, 366, 367, 371, 372, 374, 375, 383, 384, 388, 389, 391, 396, 397, 436, 437, 443, 467, 491, 504, 511, 528, 549, 552, 556], "non": [16, 80, 83, 86, 95, 97, 99, 100, 104, 105, 109, 111, 117, 118, 119, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 168, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 257, 287, 348, 349, 351, 353, 364, 369, 372, 376, 378, 379, 385, 399, 403, 404, 405, 409, 417, 420, 421, 423, 424, 428, 468, 472, 488, 492, 503, 504, 528, 551], "list": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 95, 96, 97, 98, 99, 100, 103, 104, 105, 112, 116, 117, 118, 119, 120, 121, 124, 125, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 157, 158, 162, 163, 165, 166, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 308, 318, 319, 320, 322, 347, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 431, 434, 435, 440, 444, 445, 447, 448, 449, 451, 456, 458, 459, 464, 465, 467, 468, 469, 470, 472, 477, 488, 492, 495, 504, 505, 549, 550, 551, 552], "whether": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 82, 83, 84, 86, 95, 97, 99, 100, 102, 104, 105, 117, 118, 119, 120, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 168, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 200, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 287, 296, 325, 327, 355, 363, 365, 372, 375, 377, 378, 385, 423, 434, 447, 459, 460, 478, 504, 553, 554], "": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 51, 52, 53, 65, 78, 79, 80, 82, 83, 86, 87, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 118, 119, 124, 127, 132, 133, 136, 137, 138, 142, 162, 189, 195, 204, 208, 209, 214, 216, 217, 220, 221, 223, 224, 225, 227, 230, 232, 233, 237, 239, 240, 246, 247, 248, 251, 252, 253, 258, 261, 262, 263, 269, 278, 295, 343, 347, 348, 355, 358, 359, 361, 363, 368, 369, 370, 372, 374, 375, 376, 377, 378, 381, 384, 387, 388, 390, 391, 393, 394, 395, 396, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 471, 472, 474, 477, 478, 484, 485, 486, 487, 489, 490, 492, 497, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 556], "alia": [16, 56, 80, 99, 118, 361, 478], "kei": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 78, 80, 83, 85, 86, 97, 99, 100, 104, 105, 112, 118, 127, 189, 199, 327, 344, 366, 368, 375, 380, 382, 385, 395, 418, 456, 463, 518], "dump": [16, 80, 99, 118, 374], "idempot": [16, 80, 99, 118], "t": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 65, 67, 79, 80, 82, 83, 84, 86, 99, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 125, 127, 134, 139, 179, 192, 210, 224, 232, 269, 271, 272, 285, 330, 334, 357, 358, 359, 361, 363, 365, 366, 368, 370, 372, 374, 375, 376, 377, 378, 381, 382, 383, 385, 388, 389, 390, 392, 394, 406, 410, 413, 414, 415, 418, 423, 427, 428, 431, 436, 439, 441, 442, 445, 447, 448, 449, 452, 454, 455, 457, 459, 460, 461, 463, 464, 465, 467, 468, 480, 484, 485, 486, 488, 490, 492, 501, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 555, 556], "when": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 79, 80, 82, 83, 84, 85, 86, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 116, 117, 118, 119, 131, 140, 141, 147, 152, 154, 155, 165, 168, 182, 183, 185, 187, 189, 191, 194, 195, 199, 204, 205, 208, 210, 212, 214, 215, 216, 220, 224, 226, 227, 229, 232, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 259, 260, 299, 357, 358, 359, 361, 363, 364, 365, 368, 370, 372, 373, 375, 378, 383, 384, 385, 386, 391, 403, 411, 412, 417, 419, 422, 423, 424, 433, 437, 441, 444, 445, 449, 450, 452, 455, 457, 459, 460, 463, 464, 467, 468, 488, 490, 492, 497, 499, 503, 504, 551, 553, 554, 555, 556], "invalid": [16, 80, 99, 118, 344, 358, 372, 385, 386, 409, 443, 470], "encount": [16, 80, 99, 118, 156, 390, 391, 392, 393, 433, 443, 451, 470, 540, 552], "model_dump_json": [16, 80, 99, 118], "indent": [16, 80, 99, 118], "int": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 33, 34, 38, 42, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 78, 79, 80, 81, 83, 84, 86, 88, 89, 97, 98, 99, 100, 103, 104, 105, 107, 112, 114, 118, 119, 120, 121, 124, 125, 127, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 165, 169, 170, 175, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 265, 267, 269, 271, 272, 276, 277, 278, 287, 298, 299, 305, 309, 311, 314, 315, 316, 317, 319, 320, 345, 351, 358, 372, 416, 437, 457, 482], "modelmodel_dump_json": [16, 80, 99, 118], "to_json": [16, 80, 99, 118], "compact": [16, 80, 83, 86, 99, 118], "alias": [16, 56, 80, 99, 118, 457], "model_json_schema": [16, 80, 99, 118], "ref_templ": [16, 80, 99, 118], "def": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 337, 338, 358, 359, 369, 370, 371, 372, 381, 382, 385, 386, 439, 457, 463, 465, 474, 501, 552, 554], "schema_gener": [16, 80, 99, 118], "json_schema": [16, 80, 99, 118], "generatejsonschema": [16, 80, 99, 118], "typing_extens": [16, 80, 99, 118], "refer": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 59, 62, 65, 67, 79, 80, 81, 82, 83, 84, 86, 89, 96, 97, 99, 100, 101, 104, 105, 107, 108, 117, 118, 119, 120, 122, 127, 128, 144, 158, 159, 162, 165, 166, 169, 170, 171, 174, 175, 177, 192, 193, 194, 195, 199, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 263, 273, 277, 278, 279, 284, 314, 315, 339, 340, 341, 342, 358, 359, 364, 366, 369, 370, 372, 374, 376, 381, 382, 383, 384, 385, 388, 395, 409, 416, 417, 428, 429, 431, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 459, 460, 462, 463, 465, 467, 468, 469, 476, 477, 478, 481, 488, 490, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 556], "templat": [16, 26, 57, 68, 80, 99, 100, 105, 109, 111, 118, 159, 167, 181, 182, 183, 185, 186, 187, 193, 194, 195, 210, 224, 232, 255, 256, 257, 258, 259, 260, 266, 268, 280, 283, 363, 369, 370, 374, 381, 406, 420, 423, 424, 426, 434, 435, 437, 444, 460, 461, 462, 463, 480, 501, 504, 506, 517, 524, 527, 532, 538, 546], "To": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 95, 99, 103, 116, 118, 120, 124, 181, 193, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 262, 348, 349, 360, 361, 365, 366, 369, 370, 371, 373, 374, 379, 380, 381, 382, 383, 384, 388, 389, 391, 393, 394, 395, 399, 400, 401, 404, 405, 409, 411, 417, 418, 420, 423, 427, 428, 429, 431, 432, 433, 434, 436, 437, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 472, 476, 478, 488, 489, 490, 493, 497, 499, 501, 502, 509, 550, 552, 553, 554], "logic": [16, 80, 82, 99, 118, 168, 382, 460, 461], "subclass": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 118, 287, 372, 415, 418, 463, 465], "your": [16, 19, 20, 26, 80, 94, 99, 118, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 357, 358, 359, 361, 363, 365, 388, 389, 390, 391, 392, 394, 395, 398, 399, 400, 403, 404, 409, 418, 419, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 487, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 554], "desir": [16, 80, 83, 86, 99, 118, 150, 180, 181, 190, 193, 333, 334, 335, 460, 478, 505], "modif": [16, 80, 83, 86, 99, 118, 358, 361, 380, 387, 420], "given": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 51, 52, 53, 65, 66, 67, 76, 78, 79, 80, 81, 83, 84, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 107, 114, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 164, 165, 168, 170, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 269, 271, 272, 278, 285, 287, 290, 291, 298, 305, 309, 312, 313, 321, 345, 346, 351, 355, 358, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 381, 382, 384, 386, 398, 403, 409, 417, 418, 423, 427, 428, 429, 432, 435, 443, 444, 445, 447, 449, 450, 451, 454, 455, 456, 458, 459, 460, 461, 463, 467, 468, 476, 478, 488, 489, 490, 492, 496, 497, 501, 502, 504, 505, 511, 515, 518, 549, 551, 552, 553, 554], "model_parametrized_nam": [16, 80, 99, 118], "param": [16, 80, 99, 118, 212, 260, 351, 374, 404], "tupl": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 56, 79, 80, 83, 84, 86, 96, 97, 99, 100, 104, 105, 118, 122, 127, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 155, 158, 163, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 257, 260, 271, 272, 275, 299, 309, 316, 358, 460, 504], "parametr": [16, 27, 80, 96, 99, 118, 142, 143, 148, 151, 153, 226, 227, 244, 370, 374, 381, 399, 406, 409, 433, 435, 463, 467, 514, 515, 526], "overridden": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 118, 190, 355], "achiev": [16, 80, 99, 112, 118, 157, 348, 349, 358, 367, 368, 369, 370, 371, 372, 374, 381, 384, 406, 460, 463, 464, 502], "custom": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 85, 99, 118, 123, 367, 368, 369, 374, 376, 381, 385, 389, 403, 404, 406, 418, 427, 434, 436, 439, 441, 447, 451, 456, 458, 460, 467, 492, 537], "scheme": [16, 80, 99, 101, 102, 118, 181, 182, 183, 192, 224, 358, 364, 368, 370, 373, 380, 381, 382, 383, 385, 402, 409, 420, 424, 444, 458, 460, 463, 492, 497, 503, 504, 506], "basemodel": [16, 80, 99, 118, 385], "concret": [16, 80, 99, 118, 375, 378], "would": [16, 80, 83, 86, 90, 99, 118, 182, 183, 185, 191, 194, 195, 358, 361, 364, 365, 366, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 385, 400, 409, 429, 431, 434, 435, 447, 457, 460, 461, 463, 465, 468, 505], "cl": [16, 80, 97, 99, 104, 118, 385], "typeerror": [16, 80, 99, 118, 287, 372, 382, 386], "try": [16, 80, 99, 118, 182, 183, 185, 191, 194, 195, 358, 359, 368, 372, 378, 387, 388, 394, 399, 429, 431, 433, 443, 444, 449, 455, 457, 460, 478, 552], "model_post_init": [16, 80, 99, 118], "_basemodel__context": [16, 80, 99, 118], "addit": [16, 19, 20, 26, 43, 80, 83, 84, 86, 97, 99, 100, 104, 105, 116, 118, 120, 125, 154, 182, 183, 185, 188, 191, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 361, 362, 363, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 382, 383, 384, 385, 387, 388, 389, 390, 391, 400, 401, 403, 405, 406, 409, 410, 417, 418, 420, 423, 424, 429, 433, 445, 452, 455, 456, 457, 460, 462, 463, 465, 467, 468, 477, 478, 488, 490, 492, 499, 504, 505, 549, 555], "after": [16, 45, 50, 51, 52, 53, 80, 86, 95, 97, 99, 100, 104, 118, 152, 155, 278, 299, 317, 339, 342, 358, 361, 363, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 394, 398, 405, 407, 408, 409, 411, 417, 419, 420, 421, 429, 439, 448, 450, 457, 460, 462, 467, 469, 470, 492, 552, 556], "__init__": [16, 80, 99, 118, 190, 259, 358, 364, 370, 382, 420], "want": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 99, 102, 118, 139, 165, 190, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 360, 361, 363, 364, 365, 368, 372, 373, 374, 376, 377, 378, 388, 389, 390, 391, 392, 394, 395, 398, 418, 428, 431, 432, 433, 434, 436, 443, 444, 447, 449, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 476, 477, 478, 496, 549, 552, 553, 554, 555, 556], "entir": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 97, 99, 100, 104, 105, 118, 169, 428, 439, 442, 448], "model_rebuild": [16, 80, 99, 118], "forc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 150, 193, 195, 287, 363, 373, 399], "raise_error": [16, 80, 99, 118], "_parent_namespace_depth": [16, 80, 99, 118], "_types_namespac": [16, 80, 99, 118], "rebuild": [16, 80, 99, 118, 440], "core": [16, 53, 80, 99, 118, 148, 357, 358, 365, 371, 372, 379, 383, 384, 395, 398, 415, 419, 423, 427, 433, 434, 436, 439, 441, 443, 445, 447, 451, 462, 467, 468, 480, 490, 552], "necessari": [16, 80, 99, 118, 361, 368, 373, 384, 411, 428, 431, 433, 434, 437, 443, 444, 447, 450, 451, 459, 460, 462, 463, 477, 488, 489, 492], "one": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 68, 80, 83, 85, 86, 87, 88, 90, 94, 97, 99, 100, 103, 104, 105, 107, 112, 117, 118, 119, 120, 121, 122, 124, 125, 127, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 162, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 265, 269, 271, 272, 295, 300, 316, 329, 345, 351, 352, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 388, 389, 390, 417, 420, 421, 423, 427, 428, 431, 432, 433, 436, 439, 443, 448, 449, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 476, 477, 478, 487, 488, 489, 490, 492, 497, 499, 501, 504, 505, 511, 549, 550, 552, 553, 554, 555, 556], "forwardref": [16, 80, 99, 118], "could": [16, 80, 99, 118, 359, 361, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 428, 431, 439, 441, 455, 467, 468, 476, 491], "resolv": [16, 80, 99, 118, 359, 361, 368, 372, 373, 380, 381, 393, 399, 418], "attempt": [16, 80, 99, 118, 361, 372, 375], "build": [16, 80, 99, 118, 181, 212, 358, 364, 365, 366, 371, 372, 374, 378, 382, 383, 384, 385, 387, 405, 411, 420, 435, 439, 452, 459, 461, 489, 492, 552], "automat": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 99, 107, 118, 120, 124, 152, 155, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 357, 358, 359, 361, 365, 366, 368, 369, 375, 378, 380, 384, 387, 398, 399, 405, 433, 441, 443, 457, 460, 552, 556], "fail": [16, 80, 99, 118, 199, 359, 361, 372, 387, 388, 412, 440, 468], "depth": [16, 80, 99, 118, 326, 390, 395, 448, 518], "parent": [16, 80, 99, 112, 116, 118, 120, 124, 127, 193, 358, 368, 385, 450, 490, 528], "_was_": [16, 80, 99, 118], "success": [16, 80, 96, 99, 117, 118, 119, 120, 121, 124, 125, 127, 199, 386, 409, 428, 429, 431, 432, 433, 435, 439, 440, 441, 445, 449, 452, 457, 462, 468, 476, 477, 516], "otherwis": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 97, 99, 100, 104, 105, 118, 150, 189, 193, 195, 197, 200, 201, 202, 203, 210, 232, 287, 351, 371, 381, 384, 462, 463, 468, 519], "strict": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 97, 99, 100, 118, 140, 141, 147, 152, 155, 158, 193, 195, 257], "from_attribut": [16, 80, 99, 118], "context": [16, 80, 83, 86, 99, 118, 201, 203, 210, 232, 307, 336, 358, 373, 384, 388, 424, 460, 482], "enforc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 361, 385], "strictli": [16, 80, 99, 118, 187], "extract": [16, 80, 95, 97, 99, 100, 104, 105, 117, 118, 119, 124, 140, 141, 147, 152, 155, 158, 163, 164, 169, 171, 179, 182, 183, 184, 185, 187, 192, 193, 194, 195, 257, 358, 368, 373, 382, 384, 385, 411, 412, 423, 424, 427, 428, 431, 432, 433, 434, 439, 440, 443, 444, 445, 447, 456, 460, 476, 488, 496, 501], "model_validate_json": [16, 80, 99, 118], "json_data": [16, 80, 99, 118], "byte": [16, 80, 83, 86, 99, 118, 305, 336, 358], "bytearrai": [16, 80, 99, 118, 305], "against": [16, 80, 99, 118, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195, 359, 361, 375, 381, 388, 455, 468, 476, 487, 490], "valueerror": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 80, 83, 86, 87, 95, 99, 118, 210, 232, 358, 372, 385], "model_validate_str": [16, 80, 99, 118], "parse_fil": [16, 80, 99, 118], "content_typ": [16, 80, 99, 118], "utf8": [16, 80, 99, 118], "proto": [16, 80, 99, 118], "deprecatedparseprotocol": [16, 80, 99, 118], "allow_pickl": [16, 80, 99, 118], "parse_obj": [16, 80, 99, 118], "parse_raw": [16, 80, 99, 118], "b": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 51, 52, 54, 80, 83, 86, 99, 118, 142, 199, 326, 358, 359, 372, 381, 384, 442, 454, 455, 456, 457, 460, 461, 463, 468, 478, 484, 488, 505], "schema_json": [16, 80, 99, 118], "set_log": 16, "call": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 83, 86, 96, 97, 100, 104, 105, 128, 129, 130, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 164, 180, 181, 190, 193, 199, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 299, 311, 330, 336, 344, 347, 355, 358, 359, 361, 363, 364, 367, 370, 371, 372, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 394, 405, 409, 423, 431, 432, 441, 455, 456, 457, 459, 460, 463, 468, 470, 476, 477, 478, 488, 492, 501, 502, 503, 504, 505, 552, 553, 554, 555], "basicconfig": [16, 441, 474], "adjust": [16, 65, 182, 183, 185, 191, 194, 195, 367, 369, 381, 432, 448, 456, 463, 464, 476, 492, 499], "global": [16, 33, 42, 45, 46, 47, 95, 97, 98, 100, 103, 104, 105, 141, 152, 155, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 199, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 311, 314, 315, 316, 317, 358, 362, 364, 406, 423, 431, 441, 442, 452, 462, 465, 490, 550], "state": [16, 45, 47, 192, 199, 358, 364, 368, 370, 374, 378, 380, 382, 432, 476, 497, 518], "to_yaml": [16, 80, 99, 118, 210, 232, 369, 385, 463, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "convert": [16, 19, 23, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 79, 81, 82, 83, 86, 94, 96, 97, 100, 102, 104, 105, 117, 119, 122, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 165, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 210, 224, 232, 269, 284, 287, 288, 292, 305, 321, 339, 341, 342, 359, 364, 372, 373, 382, 385, 388, 410, 422, 423, 424, 427, 437, 442, 450, 451, 456, 457, 461, 462, 467, 478, 490, 496, 501, 504, 554, 556], "syntax": [16, 83, 86, 359, 374, 377, 403, 420, 552], "update_forward_ref": [16, 80, 99, 118], "localn": [16, 80, 99, 118], "r_": [17, 18, 21, 22, 24, 25, 27, 28, 35, 36, 39, 40, 50, 52, 53, 244, 245, 454, 511, 514, 515], "rho_": [17, 21, 22, 24, 25, 27, 52, 53], "gev": [17, 18, 19, 20, 21, 22, 24, 25, 27, 71, 121, 127, 182, 183, 185, 191, 194, 195, 429, 433, 435, 439, 440, 445, 447, 451, 452, 454, 455, 459, 460, 461, 462, 467, 468, 469, 478, 505, 528, 550, 551], "cm3": [17, 18, 19, 21, 22, 24, 25, 27, 52, 454], "dmprofil": [17, 21, 22, 23, 24, 25, 27, 454], "burkert": [17, 480], "profil": [17, 18, 21, 22, 23, 24, 25, 27, 113, 117, 119, 120, 121, 122, 123, 124, 125, 143, 149, 151, 152, 153, 155, 179, 183, 191, 199, 221, 223, 270, 284, 300, 319, 320, 370, 372, 376, 377, 384, 390, 392, 397, 399, 406, 409, 414, 416, 418, 419, 424, 426, 431, 432, 441, 446, 449, 451, 457, 465, 472, 480, 488, 490, 492, 504, 509, 551, 554], "rho": [17, 18, 21, 22, 23, 24, 25, 27], "r": [17, 18, 21, 22, 24, 25, 26, 27, 28, 30, 35, 36, 39, 40, 51, 53, 54, 82, 83, 86, 144, 179, 192, 288, 358, 359, 383, 388, 432, 440, 444, 457, 459, 476, 482, 497, 501, 509, 510, 511, 515, 518], "frac": [17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 54, 100, 105, 139, 142, 198, 216, 220, 237, 239, 251, 276, 278, 286, 381, 488, 496, 497, 509, 510, 511, 514, 515, 519, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 540, 541, 542, 544, 554, 555], "scale": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 52, 53, 65, 82, 84, 91, 95, 99, 100, 105, 112, 118, 120, 121, 124, 143, 159, 187, 191, 192, 193, 195, 200, 202, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 267, 270, 286, 299, 300, 301, 317, 339, 340, 341, 351, 359, 367, 372, 373, 376, 381, 404, 409, 410, 418, 421, 422, 423, 432, 435, 444, 445, 448, 449, 450, 451, 454, 455, 458, 459, 460, 463, 464, 465, 467, 476, 478, 480, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547], "1995apj": 17, "447l": 17, "25b": 17, "2011jcap": [17, 19, 20, 21, 22, 24, 25, 26, 27], "03": [17, 19, 20, 21, 22, 24, 25, 26, 27, 65, 83, 85, 86, 371, 386, 426, 427, 429, 440, 441, 443, 447, 451, 455, 458, 460, 462, 464, 465, 466, 470, 471, 477, 512], "051c": [17, 21, 22, 24, 25, 27], "default_scale_radiu": [17, 21, 22, 24, 25, 27], "12": [17, 38, 42, 65, 82, 83, 86, 97, 100, 107, 119, 133, 152, 155, 181, 182, 183, 185, 191, 194, 195, 204, 208, 214, 216, 220, 227, 237, 239, 248, 251, 252, 253, 263, 362, 364, 365, 366, 367, 369, 370, 375, 378, 381, 397, 401, 402, 403, 415, 420, 426, 427, 429, 431, 432, 433, 434, 435, 436, 439, 441, 442, 443, 447, 448, 449, 450, 451, 455, 456, 457, 460, 462, 463, 465, 466, 468, 476, 478, 479, 490, 501, 504, 505, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 525, 526, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547], "67": [17, 397, 455, 478], "kpc": [17, 18, 21, 22, 24, 25, 27, 29, 33, 34, 38, 233, 287, 290, 454, 455, 486, 528], "distance_gc": [17, 18, 21, 22, 24, 25, 27, 454], "8": [17, 18, 21, 22, 24, 25, 27, 38, 40, 50, 65, 83, 85, 86, 97, 100, 104, 105, 106, 110, 122, 133, 136, 137, 193, 222, 224, 287, 358, 362, 365, 366, 375, 398, 399, 402, 404, 405, 409, 410, 411, 414, 415, 416, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 485, 487, 496, 501, 505, 509, 518, 529, 537, 553], "distanc": [17, 18, 21, 22, 23, 24, 25, 27, 41, 46, 47, 121, 132, 133, 190, 233, 259, 290, 316, 372, 415, 422, 433, 435, 445, 454, 455, 457, 486, 501, 528], "galact": [17, 18, 21, 22, 24, 25, 27, 29, 45, 47, 65, 66, 79, 86, 97, 100, 104, 105, 106, 110, 120, 121, 123, 152, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 211, 219, 222, 236, 244, 245, 294, 321, 358, 359, 369, 372, 378, 397, 399, 416, 428, 431, 434, 435, 436, 439, 441, 442, 443, 445, 447, 451, 454, 455, 456, 460, 461, 462, 463, 467, 478, 480, 483, 487, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 551, 557], "center": [17, 18, 21, 22, 23, 24, 25, 27, 41, 79, 83, 86, 91, 97, 100, 104, 105, 117, 119, 121, 122, 123, 127, 139, 140, 141, 142, 143, 144, 147, 151, 152, 153, 155, 162, 165, 166, 168, 169, 170, 172, 173, 175, 176, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 257, 259, 289, 293, 319, 358, 359, 372, 374, 381, 382, 399, 400, 409, 411, 424, 427, 428, 431, 433, 434, 435, 436, 437, 439, 441, 443, 444, 445, 450, 451, 452, 454, 458, 459, 460, 461, 462, 463, 467, 468, 477, 478, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 509, 510, 513], "local_dens": [17, 18, 21, 22, 24, 25, 27, 454], "39": [17, 18, 21, 22, 24, 25, 27, 59, 454, 455, 460, 468, 516, 537], "local": [17, 18, 21, 22, 24, 25, 27, 83, 86, 132, 133, 167, 180, 181, 190, 191, 193, 358, 359, 361, 366, 372, 387, 388, 391, 395, 399, 409, 432, 435, 436, 437, 442, 443, 454, 459, 472, 476, 492], "densiti": [17, 18, 21, 22, 24, 25, 27, 28, 30, 35, 36, 39, 40, 45, 52, 119, 144, 195, 313, 316, 351, 371, 437, 439, 454, 455, 465, 480, 482, 486, 496, 497, 498, 551], "__call__": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 299, 364, 369, 386, 405], "evalu": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 83, 86, 97, 100, 103, 104, 105, 120, 124, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 169, 175, 190, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 358, 363, 367, 373, 376, 377, 380, 381, 382, 386, 398, 399, 400, 402, 405, 409, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 443, 444, 452, 458, 463, 465, 467, 468, 488, 510, 511, 518, 551, 554], "deriv": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 54, 95, 116, 120, 124, 127, 258, 358, 370, 371, 376, 379, 382, 435, 467, 469, 490, 504, 553, 554], "static": [17, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 98, 101, 102, 103, 112, 116, 117, 119, 120, 121, 124, 125, 127, 143, 151, 162, 168, 169, 181, 182, 183, 185, 191, 192, 194, 195, 204, 206, 207, 208, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 237, 238, 239, 240, 244, 245, 246, 248, 251, 252, 253, 258, 260, 261, 355, 366, 369, 388, 400, 417], "rmin": [17, 18, 21, 22, 24, 25, 27], "rmax": [17, 18, 21, 22, 24, 25, 27], "separ": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 69, 70, 71, 72, 73, 74, 75, 76, 79, 86, 181, 190, 193, 347, 358, 359, 364, 365, 366, 367, 370, 371, 372, 373, 374, 377, 378, 379, 380, 405, 409, 415, 417, 418, 422, 423, 434, 437, 439, 441, 447, 451, 455, 462, 463, 464, 481, 489, 497, 498, 509, 510, 514, 515, 528, 551], "ndecad": [17, 18, 21, 22, 23, 24, 25, 27, 265], "squar": [17, 18, 21, 22, 24, 25, 27, 46, 97, 100, 117, 118, 139, 140, 141, 147, 152, 155, 158, 179, 193, 195, 257, 275, 373, 376, 406, 461, 480, 490, 504, 552, 553, 554, 555], "numer": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 83, 86, 119, 187, 200, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 261, 287, 357, 358, 371, 376, 391, 409, 427, 434, 436, 439, 441, 447, 451, 460, 467], "f": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 127, 135, 189, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 286, 287, 314, 358, 361, 375, 380, 381, 386, 389, 390, 392, 411, 420, 427, 428, 431, 432, 434, 440, 441, 442, 443, 444, 450, 451, 452, 454, 455, 457, 459, 461, 463, 464, 465, 468, 469, 474, 476, 477, 478, 486, 501, 518, 528, 539, 540, 541, 542, 543, 544, 545, 552, 553, 554], "int_": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 204, 205, 208, 212, 214, 215, 216, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 497, 509], "dr": [17, 18, 21, 22, 24, 25, 27, 511], "text": [17, 18, 21, 22, 23, 24, 25, 27, 50, 51, 52, 53, 54, 100, 105, 117, 119, 127, 244, 245, 286, 347, 359, 366, 374, 384, 388, 432, 452, 458, 467, 476, 478, 509, 510, 511, 514, 515, 519, 535, 542, 552, 554], "annihil": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 420, 463, 480], "decai": [17, 18, 20, 21, 22, 23, 24, 25, 27, 217, 223, 240, 381, 443, 448, 451, 463, 480, 542], "lower": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 117, 119, 139, 168, 187, 189, 192, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 358, 372, 377, 378, 385, 445, 459, 477], "upper": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 96, 116, 117, 118, 119, 120, 121, 124, 125, 127, 139, 187, 192, 199, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 270, 271, 272, 385, 394, 405, 409, 416, 417, 418, 424, 431, 445, 449, 456, 459, 476, 488, 490], "bound": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 97, 100, 104, 105, 117, 119, 120, 121, 124, 187, 190, 192, 199, 204, 205, 208, 209, 210, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 232, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 257, 258, 260, 261, 283, 367, 460, 465], "rang": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 65, 69, 71, 72, 76, 79, 83, 86, 87, 95, 96, 97, 100, 104, 105, 120, 139, 152, 154, 155, 168, 180, 181, 184, 186, 187, 190, 191, 193, 200, 202, 204, 205, 208, 209, 211, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 232, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 257, 258, 260, 261, 265, 312, 314, 315, 316, 351, 358, 364, 370, 371, 373, 382, 400, 405, 406, 409, 417, 418, 420, 428, 431, 433, 434, 436, 439, 440, 442, 444, 448, 450, 451, 452, 455, 456, 457, 458, 460, 461, 463, 464, 465, 468, 469, 476, 477, 478, 488, 490, 492, 511, 521, 550, 554], "ndarrai": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 83, 86, 87, 96, 112, 120, 124, 136, 137, 138, 139, 140, 143, 144, 146, 149, 150, 151, 152, 153, 155, 168, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 210, 234, 235, 260, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 284, 287, 298, 299, 300, 309, 314, 316, 347, 351, 352, 358, 456, 460, 478, 504, 505], "radian": [17, 18, 21, 22, 24, 25, 27, 188, 206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259], "grid": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 120, 123, 143, 151, 153, 182, 183, 185, 187, 191, 194, 195, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 265, 351, 358, 369, 374, 401, 403, 457, 504, 505, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545], "per": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 94, 96, 97, 100, 104, 105, 107, 116, 117, 119, 120, 121, 124, 125, 132, 134, 135, 152, 155, 187, 217, 224, 225, 265, 273, 279, 284, 358, 364, 370, 371, 374, 382, 384, 385, 397, 405, 409, 411, 424, 427, 434, 443, 447, 449, 451, 454, 459, 460, 464, 465, 469, 470, 488, 492, 495, 551, 553], "decad": [17, 18, 21, 22, 24, 25, 27, 107, 187, 265, 424, 443], "10000": [17, 18, 21, 22, 23, 24, 25, 27, 98, 103, 141, 152, 155, 165, 455, 468], "integrate_spectrum_separ": [17, 18, 21, 22, 24, 25, 27], "func": [17, 18, 21, 22, 24, 25, 27, 182, 183, 185, 191, 194, 195, 265, 308, 312, 313, 351, 437, 439], "xmin": [17, 18, 21, 22, 24, 25, 27, 191, 386], "xmax": [17, 18, 21, 22, 24, 25, 27, 191, 386], "scale_to_local_dens": [17, 18, 21, 22, 24, 25, 27, 454], "abc": [18, 56, 94, 115, 161, 180, 185, 459], "mass": [19, 20, 26, 52, 371, 405, 424, 454, 480, 513], "channel": [19, 20, 26, 357, 360, 361, 375, 417, 444, 454, 460, 470, 480], "jfactor": [19, 20, 423], "z": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 46, 83, 86, 290, 291, 294, 383, 384, 389, 390, 392, 454, 482, 518], "k": [19, 33, 52, 53, 97, 104, 189, 208, 258, 311, 429, 431, 433, 455, 457, 460, 462, 468, 488, 505, 509, 521, 528, 539], "spectralmodel": [19, 20, 69, 71, 72, 74, 75, 76, 96, 112, 116, 117, 119, 121, 126, 131, 150, 152, 155, 159, 204, 205, 208, 210, 212, 214, 215, 216, 218, 220, 226, 227, 229, 232, 233, 235, 237, 238, 239, 243, 247, 248, 251, 252, 253, 256, 257, 260, 262, 369, 370, 373, 376, 382, 406, 409, 416, 423, 455, 463, 477, 478, 487, 506, 549], "mathrm": [19, 20, 23, 97, 104, 142, 454, 457, 488, 553, 555], "d": [19, 20, 23, 83, 85, 86, 189, 192, 224, 229, 240, 258, 263, 326, 361, 376, 378, 411, 420, 429, 443, 444, 451, 460, 463, 464, 497, 504, 509, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 555], "phi": [19, 20, 26, 188, 204, 205, 208, 211, 212, 214, 215, 216, 219, 222, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 291, 381, 447, 457, 462, 463, 468, 478, 497, 509, 510, 511, 513, 514, 515, 519, 521, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536], "langl": 19, "sigma": [19, 20, 30, 32, 48, 49, 116, 117, 118, 119, 120, 124, 125, 127, 132, 133, 139, 140, 144, 150, 151, 152, 155, 198, 199, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 269, 271, 272, 278, 381, 386, 441, 442, 447, 448, 449, 457, 461, 463, 465, 476, 490, 496, 510, 525, 541, 554], "nu": [19, 26], "rangl": 19, "4": [19, 20, 22, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 52, 54, 60, 65, 79, 83, 86, 96, 97, 100, 104, 105, 109, 111, 122, 127, 133, 134, 139, 142, 150, 162, 165, 181, 182, 183, 185, 191, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 224, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 262, 269, 270, 305, 345, 358, 359, 361, 362, 370, 372, 375, 378, 382, 383, 394, 397, 406, 408, 409, 410, 413, 415, 416, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 476, 477, 478, 480, 485, 486, 487, 501, 504, 505, 509, 510, 513, 518, 523, 536, 537, 545, 551, 552, 553, 554, 555], "pi": [19, 20, 30, 31, 32, 37, 54, 220, 262, 381, 463, 486, 509, 510, 511, 514, 515, 525, 545], "m": [19, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 52, 53, 83, 86, 89, 92, 106, 110, 124, 180, 181, 182, 183, 185, 191, 193, 194, 195, 284, 358, 359, 361, 372, 389, 390, 391, 392, 444, 454, 457, 458, 460, 463, 474, 497, 501, 503, 504, 505, 516, 552, 555], "2_": 19, "dm": [19, 20, 26, 387, 405, 420, 454, 463], "n": [19, 20, 51, 78, 83, 86, 117, 119, 180, 181, 182, 183, 185, 187, 188, 191, 193, 194, 195, 200, 202, 262, 269, 358, 361, 372, 375, 389, 391, 415, 447, 450, 454, 455, 457, 460, 462, 465, 467, 468, 469, 470, 475, 497, 504, 505, 507, 510, 511, 551, 553, 555], "de": [19, 20, 26, 65, 95, 204, 205, 208, 212, 214, 215, 216, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 284, 384, 406, 409, 412, 454, 470, 551], "j": [19, 20, 23, 97, 104, 122, 359, 361, 488], "delta": [19, 20, 23, 83, 86, 116, 117, 122, 125, 127, 144, 192, 238, 239, 270, 423, 457, 465, 490, 497, 498, 510, 511, 513, 554], "omega": [19, 20, 23, 246, 262, 509, 545], "primaryflux": [19, 20, 454, 480], "bbar": [19, 20], "channel_registri": [19, 20, 26], "more": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 71, 72, 74, 83, 86, 94, 95, 96, 97, 100, 104, 105, 132, 139, 182, 183, 185, 194, 195, 204, 205, 206, 207, 208, 209, 211, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 233, 234, 235, 236, 237, 239, 240, 244, 245, 246, 248, 251, 252, 253, 259, 260, 273, 279, 295, 333, 358, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 391, 394, 403, 404, 405, 406, 409, 416, 418, 419, 423, 428, 431, 433, 435, 437, 439, 443, 444, 448, 451, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 472, 478, 488, 489, 490, 492, 501, 502, 504, 505, 510, 549, 550, 552, 554, 556], "float": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 50, 51, 79, 83, 84, 86, 91, 97, 100, 104, 105, 108, 112, 116, 118, 119, 120, 122, 124, 125, 126, 127, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 157, 159, 168, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 269, 270, 271, 272, 275, 280, 287, 298, 305, 314, 316, 347, 348, 349, 459, 465, 467, 468, 552, 556], "factor": [19, 20, 23, 97, 98, 100, 103, 104, 105, 112, 117, 140, 141, 143, 147, 149, 150, 151, 152, 153, 155, 162, 169, 175, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 198, 200, 201, 202, 203, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 234, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 258, 259, 261, 358, 371, 373, 405, 427, 434, 436, 439, 441, 445, 447, 451, 456, 459, 463, 467, 488, 505, 518], "pointspatialmodel": [19, 20, 70, 76, 127, 241, 381, 382, 402, 422, 435, 436, 439, 440, 443, 444, 449, 455, 456, 462, 463, 468, 476, 477, 513], "redshift": [19, 20, 212, 381, 478, 518], "particl": [19, 26, 233, 262, 405, 480, 528], "majorana": 19, "dirac": 19, "051": [19, 20, 26, 462], "how": [19, 20, 78, 79, 81, 94, 119, 121, 123, 162, 183, 193, 195, 311, 317, 360, 363, 366, 370, 372, 374, 375, 377, 380, 381, 384, 385, 388, 389, 390, 394, 395, 398, 399, 400, 403, 404, 411, 413, 416, 417, 418, 423, 424, 427, 429, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 478, 480, 482, 488, 490, 493, 497, 501, 503, 504, 518, 550, 552, 553, 554, 556, 557], "import": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 96, 97, 99, 100, 104, 105, 106, 109, 110, 111, 112, 116, 118, 119, 121, 123, 125, 127, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 150, 152, 162, 165, 181, 182, 183, 185, 188, 191, 193, 194, 195, 201, 203, 204, 205, 208, 212, 214, 215, 216, 220, 224, 226, 227, 229, 230, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 263, 269, 277, 278, 285, 286, 307, 317, 326, 337, 338, 343, 346, 348, 349, 351, 353, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 405, 415, 417, 422, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 481, 482, 484, 485, 486, 488, 489, 490, 492, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 556], "u": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 79, 81, 83, 86, 91, 97, 100, 104, 105, 109, 111, 112, 119, 121, 123, 127, 132, 133, 139, 141, 150, 182, 183, 185, 191, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 224, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 262, 263, 285, 286, 287, 307, 353, 358, 361, 365, 366, 367, 373, 374, 375, 376, 381, 382, 385, 386, 398, 399, 400, 417, 418, 419, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 482, 489, 490, 492, 494, 499, 501, 502, 505, 509, 511, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546], "massdm": [19, 20, 454], "5000": [19, 20, 83, 86, 480], "3": [19, 20, 27, 28, 31, 32, 33, 37, 38, 42, 45, 46, 50, 51, 52, 53, 54, 59, 62, 65, 76, 79, 81, 82, 83, 86, 89, 91, 97, 99, 100, 104, 105, 106, 110, 112, 118, 119, 133, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 165, 168, 182, 183, 185, 188, 191, 193, 194, 195, 201, 203, 212, 219, 222, 230, 252, 258, 260, 262, 263, 271, 272, 277, 285, 286, 307, 316, 335, 346, 351, 353, 355, 358, 359, 361, 362, 364, 369, 370, 372, 373, 374, 375, 377, 382, 383, 384, 389, 394, 395, 397, 398, 399, 401, 402, 407, 409, 411, 414, 415, 416, 417, 418, 419, 420, 422, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 479, 480, 482, 485, 486, 489, 490, 494, 496, 498, 499, 501, 502, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 553, 554], "41e19": [19, 20], "gev2": [19, 454], "cm": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 51, 52, 53, 54, 65, 96, 119, 125, 127, 204, 208, 214, 216, 220, 227, 230, 237, 239, 247, 248, 251, 252, 253, 262, 343, 369, 381, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 447, 451, 452, 454, 455, 457, 463, 465, 467, 468, 476, 478, 485, 486, 490, 492, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551], "modeldm": [19, 20], "noqa": [19, 20, 120, 139, 175, 186, 187, 193, 212, 264, 355], "e501": [19, 20, 120, 139, 175, 186, 187, 193, 212, 264, 355], "thermal_relic_cross_sect": 19, "26": [19, 83, 86, 362, 396, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 480, 528, 546], "thermal": [19, 528, 551], "averag": [19, 97, 100, 104, 105, 162, 169, 172, 173, 175, 176, 409, 428, 431, 488, 551], "cross": [19, 364, 378, 480], "section": [19, 83, 86, 273, 279, 358, 359, 361, 363, 372, 374, 375, 377, 381, 384, 388, 406, 419, 434, 439, 443, 444, 447, 451, 455, 457, 461, 462, 463, 478, 480, 481, 492, 505, 550, 552, 556], "default_paramet": [19, 20, 26, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 386], "frozen": [19, 20, 26, 96, 120, 124, 159, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 373, 381, 386, 401, 424, 428, 429, 431, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 455, 456, 457, 461, 462, 463, 468, 476, 477, 478, 490, 499, 528, 537], "statu": [19, 20, 26, 117, 119, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 358, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 419, 424, 462, 463], "is_norm_spectral_model": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 409, 463], "norm": [19, 20, 26, 116, 117, 119, 120, 121, 124, 127, 133, 159, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 261, 351, 369, 380, 382, 386, 403, 404, 406, 409, 424, 426, 431, 436, 437, 439, 440, 442, 443, 444, 445, 447, 450, 451, 452, 454, 455, 456, 457, 468, 476, 477, 478, 480, 490, 499, 506, 511, 517, 518, 525, 537, 538, 546, 554], "pivot_energi": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "pivot": [19, 20, 26, 65, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 424, 455], "decorrel": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "correl": [19, 20, 26, 116, 122, 198, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 243, 248, 250, 251, 252, 253, 256, 260, 376, 381, 382, 409, 419, 442, 445, 457, 461, 463, 465, 476, 490, 549], "between": [19, 20, 26, 65, 83, 84, 86, 89, 100, 105, 114, 121, 122, 124, 132, 133, 143, 149, 151, 152, 153, 155, 165, 179, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 263, 269, 284, 317, 348, 349, 356, 358, 359, 366, 368, 369, 370, 371, 372, 374, 375, 377, 378, 379, 382, 383, 385, 386, 396, 406, 409, 412, 423, 427, 433, 435, 440, 442, 445, 448, 451, 452, 457, 459, 460, 461, 462, 465, 468, 469, 478, 488, 490, 497, 498, 501, 510, 511, 551, 554, 556], "minim": [19, 20, 26, 107, 126, 182, 183, 185, 190, 191, 194, 195, 196, 199, 204, 205, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 236, 237, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 269, 370, 373, 381, 385, 411, 421, 423, 427, 443, 456, 457, 465, 477, 492, 501, 502, 505, 550, 555], "smallest": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 243, 248, 250, 251, 252, 253, 256, 260, 435], "minimum": [19, 20, 26, 47, 79, 95, 116, 117, 119, 120, 122, 124, 126, 128, 132, 133, 134, 135, 157, 159, 165, 187, 190, 192, 200, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 260, 265, 270, 273, 276, 287, 314, 316, 319, 353, 375, 411, 417, 431, 435, 443, 457, 460, 465, 468, 490, 492, 501, 528, 555], "found": [19, 20, 26, 78, 82, 83, 86, 128, 165, 170, 189, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 276, 361, 362, 366, 373, 383, 384, 403, 406, 407, 408, 412, 437, 443, 448, 463, 465, 470, 489, 490, 501, 502], "nan": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 83, 86, 97, 117, 119, 162, 180, 181, 182, 183, 185, 191, 194, 195, 200, 202, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 381, 386, 431, 432, 433, 436, 437, 439, 440, 445, 447, 449, 455, 456, 458, 459, 460, 461, 462, 463, 476, 477, 478, 528, 537], "ha": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 83, 86, 96, 97, 100, 104, 105, 116, 117, 119, 154, 176, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 200, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 351, 353, 355, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 405, 406, 409, 411, 412, 418, 419, 420, 422, 423, 424, 428, 431, 432, 433, 437, 442, 444, 449, 450, 452, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 469, 470, 476, 488, 489, 492, 497, 501, 502, 505, 509, 510, 537, 549, 552, 554], "split": [19, 20, 83, 86, 87, 109, 111, 117, 119, 182, 183, 185, 191, 194, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 364, 366, 368, 370, 372, 373, 377, 379, 381, 390, 406, 424, 450, 463, 481, 557], "like": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 50, 52, 53, 65, 76, 78, 83, 84, 86, 132, 133, 146, 154, 182, 183, 185, 189, 191, 194, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 287, 307, 317, 357, 358, 359, 361, 363, 364, 365, 366, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 386, 387, 389, 390, 394, 400, 409, 411, 412, 416, 417, 419, 420, 422, 423, 427, 429, 431, 432, 433, 434, 437, 444, 445, 448, 452, 454, 456, 457, 458, 460, 464, 465, 467, 468, 472, 476, 478, 480, 481, 488, 492, 497, 505, 515, 550, 552, 553, 554, 555], "x": [19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 65, 66, 83, 86, 97, 104, 122, 132, 133, 137, 187, 191, 192, 199, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 277, 278, 280, 290, 291, 292, 294, 298, 300, 305, 314, 347, 350, 351, 358, 359, 363, 365, 366, 367, 372, 383, 387, 389, 390, 392, 429, 434, 435, 441, 444, 448, 452, 455, 457, 458, 460, 465, 468, 478, 486, 492, 509, 510, 552, 554], "interact": [19, 20, 83, 86, 152, 155, 182, 183, 185, 191, 194, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 357, 358, 359, 367, 368, 369, 370, 374, 378, 381, 394, 403, 439, 447, 457, 460, 462, 463, 472, 476, 477, 501, 504, 528, 552], "properti": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 91, 117, 159, 193, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 278, 355, 358, 359, 369, 371, 381, 382, 385, 386, 406, 409, 411, 416, 417, 419, 422, 423, 431, 433, 441, 443, 445, 455, 461, 463, 464, 478, 489, 505, 551], "consid": [19, 20, 59, 91, 162, 169, 172, 173, 175, 176, 183, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 269, 354, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 384, 386, 428, 431, 433, 439, 443, 444, 448, 458, 461, 489, 497, 555], "fact": [19, 20, 92, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 384, 428, 505], "implement": [19, 20, 97, 100, 104, 105, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 277, 358, 363, 364, 366, 367, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 385, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 416, 417, 419, 420, 423, 424, 428, 436, 448, 450, 454, 455, 459, 460, 461, 480, 488, 490, 492, 497, 498, 499, 537, 549, 550, 551, 552, 553, 556], "detail": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 95, 97, 100, 105, 119, 120, 140, 141, 147, 152, 155, 158, 181, 193, 195, 199, 200, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 257, 258, 259, 358, 359, 361, 363, 366, 367, 368, 371, 372, 373, 377, 378, 379, 383, 384, 387, 389, 393, 395, 396, 403, 407, 408, 426, 427, 431, 433, 434, 435, 436, 441, 442, 443, 446, 447, 451, 456, 457, 459, 460, 461, 462, 463, 465, 467, 469, 470, 472, 478, 488, 489, 491, 497, 501, 502, 504, 549, 550, 551, 552, 556], "That": [19, 20, 199, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 358, 359, 363, 372, 375, 378, 457, 478, 552], "introduc": [19, 20, 182, 183, 185, 187, 191, 194, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 358, 365, 366, 368, 370, 371, 372, 373, 375, 378, 380, 383, 386, 400, 402, 403, 405, 406, 409, 411, 412, 416, 417, 418, 420, 423, 424, 442, 448, 459, 463, 505, 510, 552, 555], "stabil": [19, 20, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 383, 447], "optimis": [19, 20, 199, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 372, 374, 376, 418, 490, 549], "factor_min": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259], "factor_max": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259], "problem": [19, 20, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 336, 366, 368, 372, 379, 386, 393, 421, 457], "sometim": [19, 20, 79, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 336, 358, 361, 365, 372, 378, 388, 390, 457, 551, 556], "maximum": [19, 20, 45, 46, 47, 79, 83, 86, 95, 117, 119, 120, 122, 124, 152, 155, 157, 165, 168, 174, 177, 181, 187, 192, 193, 200, 202, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 271, 272, 314, 316, 319, 355, 361, 364, 372, 411, 429, 435, 448, 459, 460, 465, 469, 477, 482, 490, 501, 528, 550, 551, 554], "scan_min": [19, 20, 120, 124, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 457], "scan": [19, 20, 90, 117, 119, 120, 121, 124, 125, 199, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 373, 382, 409, 445, 450, 465, 490, 492], "scan_n_sigma": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 457], "scan_max": [19, 20, 120, 124, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 450, 457], "scan_n_valu": [19, 20, 120, 124, 125, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 457, 465], "scan_valu": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 445, 457], "numpi": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 87, 96, 106, 110, 112, 119, 120, 124, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 153, 154, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 197, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 258, 259, 271, 272, 287, 311, 316, 352, 357, 358, 359, 361, 365, 369, 371, 375, 376, 377, 384, 386, 394, 395, 402, 403, 406, 414, 415, 416, 418, 420, 421, 422, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 484, 485, 486, 490, 492, 504, 505, 509, 510, 512, 537, 545], "arrai": [19, 20, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 78, 79, 81, 83, 86, 87, 89, 94, 95, 96, 97, 104, 105, 112, 117, 119, 120, 121, 124, 125, 127, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 200, 204, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 258, 259, 260, 261, 270, 271, 272, 274, 287, 298, 299, 300, 314, 315, 316, 320, 351, 352, 357, 358, 371, 372, 376, 382, 385, 394, 404, 417, 420, 422, 424, 434, 443, 444, 452, 455, 456, 457, 458, 460, 462, 463, 465, 467, 469, 470, 478, 504, 505, 512, 537, 540, 553, 554], "scale_method": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 386, 528], "scale10": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 386, 528], "factor1": [19, 20, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259], "interp": [19, 20, 144, 182, 183, 185, 187, 191, 192, 194, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 300, 353, 381, 386, 422, 424, 434, 440, 444, 447, 451, 458, 459, 460, 463, 468, 469, 470, 504, 505, 528, 529], "lin": [19, 20, 187, 191, 192, 195, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 270, 299, 300, 301, 386, 444, 458, 460, 470, 505, 528], "sqrt": [19, 20, 30, 31, 32, 65, 97, 100, 104, 105, 112, 117, 119, 122, 127, 182, 183, 185, 187, 191, 194, 195, 198, 200, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 270, 278, 299, 300, 301, 370, 428, 431, 435, 439, 445, 447, 448, 452, 455, 457, 459, 460, 462, 468, 476, 477, 478, 490, 510, 511, 514, 515, 525, 554], "is_norm": [19, 20, 96, 200, 202, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 386, 411, 424, 428, 431, 432, 433, 434, 436, 439, 440, 447, 451, 455, 457, 463, 477, 478, 528, 537], "prior": [19, 20, 94, 96, 97, 104, 200, 201, 202, 203, 204, 207, 208, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 251, 252, 253, 258, 259, 362, 367, 390, 392, 424, 426, 428, 431, 432, 433, 434, 436, 439, 440, 445, 447, 451, 455, 457, 463, 466, 472, 477, 478, 504, 537, 549], "tag": [19, 20, 26, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 80, 83, 86, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 182, 183, 185, 191, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 259, 260, 383, 386, 387, 406, 420, 458, 463, 465, 511, 515], "kwarg": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 56, 58, 59, 60, 61, 62, 63, 64, 79, 82, 83, 84, 86, 96, 97, 100, 104, 105, 119, 120, 121, 122, 124, 134, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 164, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 270, 299, 310, 333, 345, 346, 347, 350, 352, 353, 354, 355, 358, 369, 385, 386, 422, 429, 443, 452, 459, 470, 540], "energy_flux": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 463, 478], "energy_min": [19, 20, 26, 52, 53, 79, 95, 97, 100, 104, 105, 117, 119, 120, 121, 124, 139, 180, 181, 187, 190, 193, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 257, 260, 265, 372, 374, 439, 444, 452, 454, 456, 459, 463, 478], "energy_max": [19, 20, 26, 79, 95, 97, 100, 104, 105, 117, 119, 120, 121, 124, 139, 180, 181, 187, 190, 193, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 257, 260, 265, 372, 374, 439, 444, 452, 454, 456, 459, 463, 478], "e_": [19, 20, 26, 50, 52, 53, 139, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 488, 494, 496, 497, 498, 519, 523, 531, 533, 534], "integrate_spectrum": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 400, 406], "energy_flux_error": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "epsilon": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "0001": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 349, 441], "spectrum": [19, 20, 26, 70, 73, 93, 95, 96, 97, 100, 101, 104, 105, 112, 117, 119, 121, 124, 126, 128, 150, 152, 155, 160, 164, 168, 169, 182, 183, 185, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 262, 263, 277, 355, 364, 369, 370, 373, 374, 377, 378, 379, 390, 400, 401, 402, 403, 405, 409, 411, 414, 415, 416, 417, 418, 420, 422, 426, 427, 428, 429, 430, 432, 439, 440, 443, 444, 445, 451, 454, 455, 456, 461, 463, 467, 468, 472, 476, 478, 480, 488, 492, 497, 500, 505, 519, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 549, 552], "step": [19, 20, 26, 116, 120, 124, 125, 127, 199, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 358, 361, 364, 365, 368, 369, 370, 372, 373, 374, 376, 379, 383, 386, 387, 388, 394, 411, 418, 419, 423, 427, 431, 433, 436, 439, 441, 442, 443, 444, 450, 451, 456, 457, 459, 463, 465, 476, 477, 478, 492, 500, 505], "size": [19, 20, 26, 46, 47, 65, 70, 76, 83, 84, 86, 97, 98, 100, 103, 104, 105, 107, 108, 109, 111, 122, 127, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 155, 157, 158, 164, 165, 166, 169, 170, 171, 179, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 204, 205, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 309, 310, 314, 315, 316, 317, 346, 358, 366, 369, 371, 372, 390, 392, 422, 424, 427, 433, 437, 439, 443, 450, 452, 455, 459, 460, 461, 463, 467, 468, 469, 470, 478, 488, 503, 509, 510, 556], "gradient": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "fraction": [19, 20, 26, 50, 52, 53, 79, 84, 85, 116, 126, 130, 143, 149, 151, 152, 153, 155, 190, 196, 197, 204, 205, 208, 211, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 277, 278, 368, 373, 416, 424, 427, 434, 443, 447, 456, 458, 461, 467, 468, 469], "1e": [19, 20, 26, 82, 95, 124, 125, 127, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 230, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 263, 273, 279, 319, 333, 335, 358, 369, 429, 431, 433, 435, 437, 439, 441, 443, 444, 447, 449, 451, 452, 455, 457, 463, 465, 468, 469, 486, 490, 494, 518, 519, 520, 522, 525, 526, 530, 531, 533, 534, 535, 536], "energy_flux_err": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "evaluate_error": [19, 20, 26, 119, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 376], "propag": [19, 20, 26, 53, 122, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 276, 369, 376, 403, 423, 457], "dnde": [19, 20, 26, 65, 117, 118, 119, 126, 128, 129, 130, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 262, 382, 409, 429, 431, 432, 441, 445, 455, 456, 463, 468, 476, 478, 490], "dnde_error": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "freez": [19, 20, 26, 83, 86, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 373, 384, 399, 409, 424, 436, 447, 457, 463, 528], "from_dict": [19, 20, 26, 96, 97, 100, 104, 105, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 402, 409, 465], "from_paramet": [19, 20, 26, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261], "init": [19, 20, 26, 83, 86, 116, 121, 127, 159, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 299, 311, 370, 406, 421, 423, 424, 445, 455, 456, 478], "analyt": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 142, 143, 151, 153, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 371, 376, 424, 458, 463, 490, 511, 555], "solut": [19, 20, 26, 52, 139, 204, 205, 208, 212, 214, 215, 216, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 359, 361, 363, 365, 366, 371, 372, 374, 375, 376, 378, 380, 382, 386, 391, 488, 490, 492, 555], "integral_error": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 376, 406], "flux_err": [19, 20, 26, 117, 119, 127, 133, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 276, 277, 278, 435, 448, 449], "invers": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 193, 204, 205, 208, 212, 214, 215, 216, 220, 223, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 271, 272, 309, 316, 371, 443, 461, 463, 465, 528], "100": [19, 20, 26, 46, 47, 71, 89, 119, 127, 141, 142, 152, 193, 195, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 263, 265, 317, 358, 359, 361, 366, 377, 397, 427, 428, 431, 434, 439, 440, 441, 443, 444, 445, 447, 448, 452, 454, 455, 456, 458, 459, 460, 463, 465, 467, 468, 469, 478, 482, 484, 485, 486, 490, 501, 504, 505, 508, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 553], "scipi": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 195, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 285, 299, 338, 351, 357, 358, 361, 367, 372, 375, 376, 378, 384, 395, 399, 400, 401, 402, 414, 415, 416, 419, 421, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 549, 554], "optim": [19, 20, 26, 96, 125, 127, 198, 199, 200, 201, 202, 203, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 351, 357, 358, 367, 370, 371, 380, 382, 428, 429, 431, 432, 433, 434, 435, 439, 440, 441, 448, 452, 457, 465, 468, 476, 477], "brentq": [19, 20, 26, 119, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 270], "root": [19, 20, 26, 117, 118, 127, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 280, 283, 358, 376, 409, 435, 480, 490, 552, 554], "find": [19, 20, 26, 127, 132, 133, 139, 165, 166, 170, 197, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 280, 358, 363, 369, 371, 377, 387, 388, 389, 409, 411, 417, 418, 423, 424, 429, 431, 435, 455, 456, 460, 463, 467, 470, 478, 552, 554, 555], "inverse_al": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "multipl": [19, 20, 26, 78, 83, 86, 87, 96, 103, 107, 109, 111, 127, 132, 156, 182, 183, 185, 191, 194, 195, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 358, 359, 364, 367, 370, 371, 372, 374, 376, 379, 380, 382, 386, 390, 399, 406, 407, 409, 417, 423, 424, 433, 439, 455, 456, 459, 460, 461, 463, 468, 490, 504, 528, 537, 549, 550, 551, 552, 557], "element": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 95, 97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 351, 376, 423, 455, 460, 504], "energy_bound": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 372, 409, 429, 431, 433, 439, 440, 452, 454, 455, 457, 463, 468, 477, 478, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537], "sed_typ": [19, 20, 26, 117, 118, 119, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 409, 427, 429, 431, 432, 433, 440, 441, 445, 449, 451, 455, 478, 490, 492, 528], "energy_pow": [19, 20, 26, 119, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 267, 439, 452, 457, 477, 478], "n_point": [19, 20, 26, 204, 205, 208, 209, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 258, 260, 261, 386, 546], "By": [19, 20, 26, 50, 63, 83, 86, 96, 97, 100, 104, 105, 116, 120, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 159, 162, 169, 179, 181, 182, 183, 185, 191, 194, 195, 204, 205, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 355, 358, 384, 385, 386, 403, 404, 406, 443, 444, 448, 450, 457, 460, 465, 477, 499, 503, 509, 510, 511, 555], "y": [19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 66, 83, 86, 132, 133, 137, 187, 199, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 290, 291, 292, 294, 298, 300, 350, 358, 372, 383, 389, 390, 392, 423, 427, 435, 441, 444, 457, 465, 486, 492], "axi": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 79, 95, 96, 97, 100, 104, 105, 106, 107, 108, 110, 112, 116, 117, 119, 120, 121, 123, 124, 127, 128, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 229, 232, 233, 235, 237, 238, 239, 240, 243, 246, 248, 250, 251, 252, 253, 256, 257, 258, 260, 261, 267, 271, 272, 276, 277, 278, 298, 299, 309, 346, 351, 352, 353, 354, 364, 367, 380, 382, 401, 404, 405, 406, 409, 411, 416, 418, 419, 420, 423, 427, 428, 432, 433, 434, 436, 437, 439, 441, 443, 444, 445, 447, 448, 450, 451, 455, 456, 458, 459, 460, 467, 468, 469, 476, 477, 478, 488, 490, 492, 496, 501, 504, 505, 547, 551], "linear": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 136, 137, 138, 139, 142, 144, 146, 149, 154, 182, 183, 185, 191, 192, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 255, 256, 258, 259, 260, 299, 358, 420, 426, 439, 444, 445, 447, 460, 463, 468, 476, 477, 506, 548], "expcutoffpowerlawspectralmodel": [19, 20, 26, 76, 204, 205, 208, 212, 214, 215, 220, 226, 227, 229, 233, 235, 237, 238, 239, 242, 243, 248, 250, 251, 252, 253, 256, 260, 381, 429, 431, 439, 463, 522, 524, 528], "pwl": [19, 20, 26, 119, 201, 203, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 263, 369, 381, 386, 429, 443, 463, 465, 490, 508, 509, 510, 511, 513, 514, 515, 516, 518, 520], "set_yscal": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 445, 454, 494], "mapaxi": [19, 20, 26, 97, 100, 104, 105, 106, 107, 108, 110, 117, 119, 121, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 162, 172, 173, 178, 179, 180, 181, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 353, 359, 373, 382, 400, 401, 403, 406, 409, 419, 423, 427, 428, 431, 433, 434, 440, 441, 443, 444, 447, 450, 451, 452, 456, 458, 459, 460, 463, 468, 469, 470, 477, 496, 499, 501, 502, 504, 505], "from_energy_bound": [19, 20, 26, 97, 100, 104, 105, 106, 110, 139, 141, 142, 150, 152, 162, 187, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 359, 427, 428, 431, 433, 440, 441, 443, 444, 450, 452, 456, 458, 459, 463, 468, 469, 477, 496, 499, 501, 502, 505], "matplotlib": [19, 20, 26, 64, 65, 79, 123, 136, 139, 142, 143, 144, 149, 150, 151, 152, 153, 154, 155, 182, 183, 185, 191, 194, 195, 198, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 336, 346, 347, 348, 351, 352, 353, 355, 357, 358, 359, 372, 375, 384, 391, 394, 401, 409, 411, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 484, 485, 486, 492, 494, 495, 496, 498, 501, 509, 511, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 556], "eflux": [19, 20, 26, 117, 118, 119, 128, 129, 130, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 382, 409, 445, 463, 490], "e2dnd": [19, 20, 26, 117, 118, 119, 126, 128, 129, 130, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 382, 409, 416, 427, 429, 431, 432, 433, 440, 455, 478, 490, 492, 528], "power": [19, 20, 26, 27, 96, 116, 117, 119, 121, 126, 131, 150, 152, 155, 181, 200, 202, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 248, 250, 251, 252, 253, 256, 260, 262, 267, 314, 369, 371, 397, 403, 415, 417, 426, 434, 436, 439, 443, 445, 447, 450, 451, 452, 462, 463, 465, 492, 506, 518, 538, 544], "multipli": [19, 20, 26, 119, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 219, 220, 222, 224, 226, 227, 229, 232, 233, 234, 235, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 267, 280, 283, 287, 452, 454, 463, 518, 554], "node": [19, 20, 26, 152, 155, 184, 187, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 234, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 400, 457, 458, 460, 467, 468, 512, 529], "forward": [19, 20, 26, 79, 83, 86, 97, 100, 104, 105, 121, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 164, 186, 190, 191, 192, 199, 204, 205, 208, 209, 212, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 243, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 264, 285, 347, 352, 359, 365, 368, 382, 429, 440, 488, 490, 505], "plot_error": [19, 20, 26, 64, 65, 96, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 219, 220, 222, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 376, 429, 431, 433, 439, 440, 442, 455, 457, 477], "band": [19, 20, 26, 66, 79, 85, 114, 117, 119, 122, 140, 141, 144, 147, 152, 155, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 364, 376, 377, 381, 382, 390, 398, 429, 431, 432, 440, 441, 442, 452, 454, 455, 463, 468, 470, 487, 488, 490, 550], "nonposit": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "clip": [19, 20, 26, 180, 181, 184, 186, 187, 190, 192, 193, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 259, 260, 299, 402, 403, 435], "set_xscal": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "nonposx": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 409], "avoid": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 116, 162, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 359, 364, 365, 366, 368, 372, 376, 377, 380, 381, 383, 384, 386, 409, 411, 420, 422, 423, 461, 465, 489, 501, 552], "artefact": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "neg": [19, 20, 26, 83, 86, 117, 119, 120, 121, 124, 125, 127, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 259, 260, 271, 272, 359, 406, 424, 465, 490, 554, 555], "8623": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "plt": [19, 20, 26, 64, 65, 123, 136, 142, 143, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 346, 355, 358, 359, 394, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 484, 485, 486, 492, 494, 495, 496, 498, 501, 509, 511, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545], "loglog": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 298, 427, 454, 484, 485, 486], "semilogi": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 427, 444], "code": [19, 20, 26, 78, 79, 83, 86, 139, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 353, 361, 362, 363, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 391, 394, 397, 400, 401, 403, 404, 405, 406, 409, 411, 414, 415, 416, 417, 418, 420, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 480, 492, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552], "shown": [19, 20, 26, 79, 150, 190, 191, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 353, 358, 365, 375, 376, 377, 385, 386, 388, 403, 405, 428, 431, 439, 441, 442, 443, 444, 448, 451, 452, 459, 462, 463, 464, 465, 467, 477, 489], "correctli": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 359, 361, 384, 385, 399, 401, 406, 411, 412, 421, 458, 459, 460, 461, 462, 465, 510], "circumv": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "issu": [19, 20, 26, 83, 86, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 358, 359, 361, 366, 367, 369, 370, 372, 375, 378, 383, 384, 385, 386, 387, 390, 391, 392, 399, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 441, 461, 467, 488, 492, 552, 553], "pyplot": [19, 20, 26, 64, 65, 79, 123, 143, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 346, 351, 394, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 484, 485, 486, 492, 494, 495, 496, 498, 501, 509, 511, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545], "fill_between": [19, 20, 26, 122, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 452], "reassign": [19, 20, 26, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261], "datasets_nam": [19, 20, 26, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 405, 440, 462, 476, 512], "new_datasets_nam": [19, 20, 26, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261], "anoth": [19, 20, 26, 79, 82, 83, 86, 97, 100, 104, 105, 140, 141, 142, 147, 152, 154, 155, 184, 187, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 358, 372, 373, 374, 376, 378, 379, 382, 385, 389, 394, 403, 418, 452, 456, 460, 461, 463, 505, 552], "two": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 82, 83, 85, 86, 96, 97, 100, 104, 105, 136, 137, 138, 139, 142, 143, 144, 145, 146, 149, 151, 153, 154, 158, 163, 165, 181, 182, 183, 184, 185, 187, 190, 191, 193, 194, 195, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 269, 317, 326, 347, 352, 355, 357, 358, 359, 361, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 386, 387, 388, 390, 411, 417, 419, 423, 432, 433, 439, 440, 442, 445, 451, 455, 456, 457, 458, 460, 461, 463, 464, 465, 467, 469, 476, 477, 482, 488, 489, 490, 492, 501, 504, 505, 520, 554, 555], "must": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 83, 84, 86, 96, 97, 100, 101, 105, 106, 110, 119, 124, 127, 132, 133, 139, 150, 158, 162, 169, 176, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 277, 278, 287, 305, 353, 358, 363, 369, 370, 373, 382, 383, 384, 385, 427, 436, 456, 459, 461, 462, 463, 467, 468, 477, 478, 492, 504, 551], "length": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 78, 83, 86, 89, 158, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 299, 351, 384, 429, 434, 441, 445, 455, 457, 460, 468, 478, 509], "wise": [19, 20, 26, 83, 86, 132, 133, 183, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 386, 411, 437, 439, 488], "reference_flux": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "energy_axi": [19, 20, 26, 97, 100, 104, 105, 106, 107, 110, 117, 119, 139, 140, 141, 152, 154, 155, 162, 182, 183, 185, 191, 194, 195, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 382, 427, 428, 431, 433, 434, 435, 437, 441, 443, 444, 450, 451, 456, 458, 459, 460, 463, 468, 469, 477, 496, 499, 501, 502, 504, 505], "spectral_index": [19, 20, 26, 52, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "05": [19, 20, 26, 29, 42, 65, 69, 83, 86, 116, 126, 193, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 319, 386, 426, 427, 428, 429, 430, 431, 435, 438, 439, 440, 441, 444, 446, 447, 450, 454, 455, 456, 457, 458, 459, 462, 465, 467, 469, 471, 476, 477, 504, 509, 538], "index": [19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 85, 86, 87, 95, 96, 97, 100, 104, 105, 116, 117, 119, 120, 121, 125, 126, 127, 131, 139, 140, 141, 147, 150, 152, 155, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 201, 203, 204, 205, 208, 210, 212, 214, 215, 216, 220, 226, 227, 229, 230, 232, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 263, 295, 309, 314, 361, 364, 367, 368, 369, 370, 373, 374, 381, 382, 383, 387, 390, 400, 414, 416, 417, 423, 424, 428, 429, 431, 432, 434, 435, 436, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 458, 462, 463, 467, 468, 469, 470, 476, 477, 478, 490, 503, 504, 505, 508, 509, 510, 511, 513, 514, 515, 516, 518, 520, 522, 523, 524, 529, 530, 531, 539, 540, 541, 542, 543, 544, 545, 546, 547], "increment": [19, 20, 26, 112, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 372, 460, 504], "determin": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 107, 126, 143, 149, 151, 153, 165, 166, 168, 170, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 258, 260, 287, 309, 369, 373, 376, 384, 411, 423, 424, 427, 433, 436, 437, 442, 449, 459, 461, 482, 550], "spectral_index_error": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 423], "index_error": [19, 20, 26, 204, 205, 208, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260], "its": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 117, 119, 158, 159, 168, 181, 187, 189, 204, 205, 208, 211, 212, 214, 215, 216, 220, 226, 227, 229, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 256, 260, 269, 358, 361, 364, 367, 368, 370, 373, 374, 375, 377, 382, 384, 385, 388, 391, 409, 423, 424, 428, 432, 433, 436, 443, 444, 448, 449, 450, 455, 457, 459, 460, 461, 462, 463, 465, 476, 478, 481, 497, 499, 501, 503, 504, 505, 551, 554], "to_dict": [19, 20, 26, 94, 96, 97, 100, 104, 105, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 385, 465], "full_output": [19, 20, 26, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261], "unfreez": [19, 20, 26, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 528], "restor": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 462], "m_": [20, 50, 52, 53], "darkmatterannihilationspectralmodel": [20, 242, 420, 454, 463], "lifetime_age_of_univers": 20, "3e": [20, 119, 125, 441, 444, 447, 449, 452, 455, 462], "17": [20, 21, 40, 65, 82, 369, 372, 375, 406, 423, 426, 427, 441, 445, 446, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 468, 469, 478, 554], "ag": [20, 43, 44, 45, 50, 51, 52, 53, 54, 291, 358, 482], "univsers": 20, "lifetim": [20, 424], "serialis": [20, 97, 100, 104, 105, 204, 205, 208, 210, 212, 214, 215, 216, 218, 220, 224, 226, 227, 229, 231, 232, 233, 235, 237, 238, 239, 243, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 370, 372, 374, 377, 379, 380, 381, 401, 403, 405, 409, 414, 417, 419, 420, 422, 423, 424, 465, 476, 492, 505, 547], "alpha": [21, 27, 28, 48, 97, 100, 104, 105, 157, 179, 215, 216, 225, 226, 227, 240, 272, 282, 284, 355, 356, 370, 381, 383, 409, 416, 427, 428, 429, 431, 433, 434, 437, 439, 440, 444, 452, 455, 457, 465, 509, 518, 520, 522, 524, 526, 527, 528, 543, 544, 553, 554, 555], "einasto": [21, 480], "exp": [21, 28, 29, 30, 31, 32, 35, 36, 39, 40, 142, 217, 220, 227, 238, 239, 251, 359, 381, 451, 463, 510, 511, 518, 522, 523, 524, 525, 534, 535, 536, 540, 541, 542, 555], "left": [21, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 83, 86, 97, 104, 117, 119, 124, 127, 140, 142, 182, 183, 185, 191, 194, 195, 216, 220, 239, 251, 273, 279, 358, 366, 368, 372, 374, 377, 381, 394, 435, 441, 449, 451, 462, 490, 499, 502, 510, 511, 518, 519, 522, 523, 525, 526, 528, 530, 533, 534, 535, 536, 540, 541, 542, 544, 553, 554, 555], "right": [21, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 83, 86, 97, 104, 117, 119, 127, 142, 216, 220, 239, 251, 273, 279, 346, 358, 372, 381, 384, 435, 441, 443, 449, 451, 467, 509, 510, 511, 518, 519, 522, 523, 525, 526, 530, 533, 534, 535, 536, 540, 541, 542, 544, 552, 553, 554, 555], "characterist": [21, 25, 27, 51, 52, 53, 54, 128, 276, 369, 423, 448, 551], "1965tralm": 21, "87e": [21, 447], "default_alpha": [21, 27], "28": [21, 24, 65, 89, 132, 133, 367, 396, 429, 432, 433, 434, 435, 441, 443, 447, 451, 455, 459, 460, 462, 467, 478], "44": [21, 50, 82, 326, 434, 450, 452, 460], "isotherm": [22, 480], "1991mnra": 22, "249": [22, 410], "523b": 22, "38": [22, 65, 427, 428, 451, 455, 460, 462, 478, 537], "assum": [23, 50, 51, 52, 53, 65, 78, 79, 81, 90, 116, 117, 119, 127, 131, 142, 154, 165, 179, 181, 182, 183, 185, 188, 192, 194, 195, 199, 253, 259, 262, 269, 314, 317, 358, 361, 370, 371, 373, 381, 382, 386, 394, 395, 427, 428, 431, 433, 434, 437, 443, 444, 445, 447, 450, 454, 458, 460, 463, 465, 468, 482, 488, 490, 497, 549, 554], "wcsgeom": [23, 79, 97, 100, 104, 105, 106, 108, 110, 116, 117, 127, 141, 150, 152, 162, 175, 176, 180, 181, 190, 194, 195, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 359, 364, 372, 399, 402, 403, 404, 409, 422, 424, 431, 436, 441, 443, 444, 445, 447, 452, 454, 456, 458, 459, 460, 461, 463, 468, 469, 470, 477, 478, 488, 490, 499, 501, 502, 505, 508, 510, 511, 512, 513], "geometri": [23, 79, 95, 97, 100, 104, 105, 108, 117, 119, 140, 141, 147, 150, 152, 155, 159, 162, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 259, 354, 364, 370, 373, 374, 403, 409, 420, 431, 432, 433, 434, 436, 437, 439, 443, 444, 447, 456, 459, 468, 469, 488, 490, 492, 500, 504, 550, 551], "angular": [23, 97, 100, 109, 111, 122, 140, 141, 147, 152, 155, 158, 183, 190, 193, 195, 211, 219, 222, 257, 291, 294, 358, 374, 422, 433, 444, 452, 497, 498, 551], "compute_differential_jfactor": 23, "differenti": [23, 75, 117, 119, 126, 182, 183, 185, 187, 191, 194, 195, 233, 247, 262, 263, 314, 364, 369, 376, 382, 416, 460, 463, 468, 478, 490, 551], "j_": 23, "ann": [23, 417], "lo": [23, 416], "l": [23, 26, 51, 54, 96, 97, 104, 105, 162, 355, 359, 372, 381, 384, 428, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 447, 451, 452, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 476, 477, 478, 488, 492, 505, 528, 551, 553, 554, 555], "compute_jfactor": [23, 454], "prime": 23, "moor": 24, "84": [24, 397, 431, 433, 441, 455, 462, 505], "2004mnra": 24, "353": [24, 414, 478], "624d": 24, "30": [24, 52, 65, 79, 91, 97, 107, 132, 142, 181, 285, 286, 365, 366, 371, 378, 385, 396, 398, 427, 428, 431, 432, 435, 436, 441, 444, 447, 450, 451, 452, 455, 456, 457, 460, 462, 463, 464, 465, 467, 468, 478, 490, 496, 501, 502, 509, 510, 524, 527, 528, 529, 532], "nfw": [25, 27, 480], "1997apj": 25, "490": 25, "493": [25, 431], "24": [25, 27, 52, 53, 82, 83, 86, 89, 361, 362, 375, 379, 413, 418, 427, 435, 451, 455, 456, 460, 462, 467, 468, 476, 501, 518, 525, 534, 535, 536], "42": [25, 27, 89, 142, 326, 372, 434, 441, 455, 458, 459, 460, 464, 467, 505, 508], "mdm": [26, 454], "templatendspectralmodel": [26, 242, 411, 422, 463], "spectra": [26, 104, 105, 120, 125, 135, 242, 262, 269, 364, 367, 369, 371, 373, 377, 381, 397, 401, 414, 418, 428, 433, 434, 440, 444, 449, 451, 452, 456, 457, 459, 463, 465, 480, 488, 490, 492, 551], "precomput": [26, 96, 119, 456, 462], "cirelli": [26, 480], "et": [26, 33, 59, 128, 142, 212, 277, 278, 368, 435, 442, 448, 480, 551], "al": [26, 33, 59, 128, 142, 212, 277, 278, 368, 435, 442, 448, 480, 551], "2016": [26, 372, 375, 396, 399, 448, 459], "nearest": [26, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 182, 183, 185, 187, 191, 194, 195, 299, 411, 418, 420, 460, 490, 492, 504], "chosen": [26, 139, 152, 155, 181, 182, 183, 191, 194, 195, 210, 219, 232, 358, 361, 373, 374, 377, 432, 450, 459, 460, 464, 465, 469, 476, 490, 500, 501, 505], "differ": [26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 59, 65, 76, 82, 83, 86, 89, 95, 114, 117, 119, 120, 121, 124, 125, 127, 132, 136, 137, 138, 139, 142, 144, 146, 149, 154, 164, 182, 183, 185, 188, 189, 190, 191, 193, 194, 195, 269, 270, 271, 272, 317, 321, 333, 334, 349, 358, 359, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 384, 386, 388, 390, 392, 401, 404, 406, 416, 419, 420, 421, 423, 427, 431, 432, 433, 436, 439, 442, 443, 444, 445, 448, 449, 451, 455, 456, 457, 459, 461, 462, 463, 464, 465, 468, 469, 472, 476, 478, 480, 488, 490, 492, 497, 504, 505, 510, 511, 550, 552, 553, 554], "rest": [26, 361, 375, 377, 455, 487], "allowed_channel": [26, 454], "www": [26, 65, 83, 86, 378, 467], "marcocirelli": 26, "net": [26, 83, 86, 431], "pppc4dmid": 26, "html": [26, 79, 83, 86, 120, 139, 175, 181, 187, 190, 193, 199, 210, 232, 260, 287, 314, 315, 358, 359, 361, 366, 378, 383, 384, 387, 388, 396, 417, 427, 434, 436, 439, 441, 447, 451, 457, 458, 467, 489, 495, 503, 505, 531], "v": [26, 31, 32, 37, 83, 86, 143, 149, 151, 152, 153, 155, 164, 171, 189, 258, 269, 291, 361, 366, 373, 374, 385, 386, 387, 388, 411, 427, 449, 454, 464, 476], "mu": [26, 271, 272, 273, 351, 386, 454, 465, 496, 497, 554], "tau": [26, 51, 54, 386, 454, 518], "w": [26, 31, 49, 82, 179, 192, 284, 359, 383, 435, 437, 445, 454, 459, 463, 465, 492, 501, 553, 555], "wl": [26, 454], "wt": [26, 454], "zl": [26, 454], "zt": [26, 454], "c": [26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 83, 86, 188, 198, 214, 251, 273, 279, 287, 326, 357, 358, 375, 390, 391, 393, 410, 417, 452, 454, 457, 465, 468, 480, 504, 523, 534, 552, 553, 555], "el": [26, 454], "er": [26, 454], "h": [26, 65, 78, 82, 83, 86, 90, 122, 141, 182, 183, 185, 191, 194, 195, 348, 378, 381, 390, 394, 395, 403, 418, 426, 427, 428, 431, 432, 434, 440, 442, 449, 450, 451, 454, 458, 459, 460, 463, 467, 468, 469, 471, 472, 474, 476, 477, 487, 489, 492, 505, 540, 541, 551, 552], "mul": [26, 454, 463, 518, 524, 527, 529, 532, 537], "mur": [26, 454], "nu_e": [26, 454], "nu_mu": [26, 454], "nu_tau": [26, 454], "q": [26, 79, 83, 86, 353, 454], "taul": [26, 454], "taur": [26, 454], "regionndmap": [26, 101, 104, 105, 126, 163, 164, 169, 171, 182, 183, 185, 190, 194, 195, 207, 211, 219, 222, 224, 234, 244, 245, 249, 255, 256, 259, 355, 372, 390, 405, 406, 409, 412, 420, 423, 444, 468, 488, 547], "table_filenam": 26, "gammapy_data": [26, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 82, 84, 85, 86, 89, 91, 96, 97, 100, 104, 105, 109, 111, 112, 116, 119, 121, 123, 125, 127, 132, 133, 134, 135, 137, 141, 142, 143, 144, 152, 162, 182, 183, 185, 191, 194, 195, 213, 224, 260, 269, 285, 286, 337, 346, 351, 353, 358, 359, 361, 374, 390, 392, 394, 398, 399, 400, 409, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 489, 490, 492, 494, 495, 496, 498, 499, 501, 502, 516, 546, 547], "dark_matter_spectra": 26, "atproduction_gamma": 26, "dat": [26, 83, 86, 210, 232, 432, 476, 480], "pf": 26, "primari": [26, 83, 86, 182, 183, 185, 186, 194, 195, 363, 384, 405, 420, 460], "serilis": [26, 206, 207, 209, 211, 217, 219, 221, 222, 223, 225, 234, 236, 240, 244, 245, 246, 247, 249, 256, 259, 261], "beta": [27, 28, 48, 225, 226, 227, 248, 381, 383, 405, 429, 433, 440, 455, 457, 520, 526, 527, 528, 533, 543], "zhao": [27, 424], "equat": [27, 252, 253, 277, 514, 515, 519, 522, 523, 525, 526, 530, 531, 533, 534, 535, 536, 554, 555], "1996": [27, 435, 448, 551], "volum": [27, 186, 190, 193], "doubl": [27, 116, 128, 276, 384, 416, 424], "law": [27, 96, 116, 117, 119, 121, 126, 131, 150, 152, 155, 204, 214, 215, 216, 237, 238, 239, 240, 248, 251, 252, 253, 262, 314, 371, 397, 403, 417, 426, 434, 436, 439, 443, 445, 447, 450, 451, 452, 462, 463, 465, 492, 506, 518, 538, 544], "radii": [27, 454, 468, 510], "smaller": [27, 141, 152, 155, 170, 181, 182, 183, 185, 191, 194, 195, 351, 361, 399, 418, 443, 448, 450, 457, 460, 465, 510], "than": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 126, 143, 144, 151, 153, 159, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 269, 277, 336, 351, 358, 361, 363, 364, 365, 368, 371, 372, 373, 376, 377, 382, 384, 385, 388, 417, 420, 421, 422, 424, 427, 428, 439, 440, 443, 448, 449, 450, 457, 459, 461, 464, 465, 488, 505, 510, 511, 552, 554], "describ": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 90, 119, 120, 122, 127, 151, 191, 199, 260, 280, 359, 361, 363, 364, 367, 368, 370, 371, 372, 374, 375, 377, 378, 381, 382, 383, 384, 395, 401, 409, 417, 418, 432, 435, 443, 444, 448, 457, 463, 465, 467, 469, 470, 476, 488, 492, 496, 505, 506, 551, 552, 553, 554], "slope": [27, 400], "larger": [27, 126, 269, 277, 359, 366, 377, 423, 427, 428, 431, 456, 459, 460, 461, 465, 489, 505, 511, 553, 554], "measur": [27, 65, 100, 105, 123, 187, 263, 271, 272, 275, 276, 277, 278, 281, 282, 284, 364, 372, 377, 382, 388, 397, 402, 410, 416, 418, 428, 431, 433, 434, 437, 440, 442, 445, 447, 448, 449, 450, 455, 468, 477, 478, 490, 497, 499, 502, 550, 551, 554, 555], "transit": [27, 348, 349, 365, 398, 399, 417, 469], "1996mnra": 27, "278": [27, 413, 434, 447, 455, 462], "488z": 27, "default_beta": 27, "default_gamma": 27, "same": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 83, 86, 90, 95, 97, 100, 101, 104, 105, 116, 132, 133, 143, 144, 150, 151, 152, 153, 155, 156, 158, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195, 263, 277, 351, 358, 361, 366, 368, 370, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 386, 388, 390, 391, 401, 402, 406, 409, 423, 429, 432, 433, 434, 439, 440, 443, 447, 449, 452, 455, 456, 460, 461, 462, 463, 464, 465, 468, 469, 472, 476, 488, 489, 490, 496, 504, 505, 552], "amplitud": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49, 66, 96, 120, 125, 127, 182, 183, 185, 194, 195, 204, 211, 214, 216, 220, 227, 230, 237, 238, 239, 246, 248, 251, 252, 253, 263, 269, 280, 369, 370, 373, 381, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 462, 463, 467, 468, 476, 477, 478, 490, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 523, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554], "53": [28, 441, 465, 509, 518, 528, 529], "fittable1dmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "radial": [28, 30, 35, 36, 39, 40, 45, 123, 179, 183, 313, 358, 369, 377, 382, 399, 414, 416, 424, 443, 445, 459, 467, 480, 482, 498, 501], "surfac": [28, 30, 35, 36, 39, 40, 45, 199, 247, 262, 313, 377, 406, 457, 463, 482], "supernova": [28, 52, 428, 442, 463, 482, 483], "remnant": [28, 52, 428, 442, 463, 483], "galaxi": [28, 30, 35, 39, 40, 41, 212, 277, 278, 397, 428], "odot": [28, 35, 39, 40, 52], "formula": [28, 29, 30, 31, 35, 36, 37, 39, 40, 50, 52, 53, 151, 238, 239, 284, 427, 553], "14": [28, 63, 65, 82, 359, 362, 367, 370, 375, 377, 378, 416, 426, 427, 429, 430, 431, 432, 434, 435, 438, 439, 452, 455, 456, 457, 459, 461, 462, 463, 466, 477, 478, 553], "paczynski1990": [28, 29, 30, 35, 37, 39, 40, 48], "yusifovkucuk2004": [28, 29, 30, 35, 36, 40, 48], "lorimer2006": [28, 29, 30, 36, 39, 40, 48], "yusifovkucuk2004b": [28, 29, 30, 35, 36, 39, 48], "faucherkaspi2006": [28, 29, 31, 35, 36, 39, 40, 48], "exponenti": [28, 30, 36, 39, 40, 214, 215, 216, 217, 251, 252, 253, 359, 369, 403, 426, 439, 443, 451, 506, 538], "ui": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 112, 120, 142, 229, 262, 263, 278], "adsab": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 112, 120, 142, 229, 262, 263, 278], "harvard": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 112, 120, 142, 199, 229, 262, 263, 278, 378, 457], "edu": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 112, 120, 142, 181, 190, 193, 199, 210, 229, 232, 262, 263, 278, 378, 457, 505], "ab": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 63, 79, 84, 112, 120, 142, 195, 200, 202, 229, 262, 263, 278, 454, 455], "1998apj": 28, "504": 28, "761c": 28, "bbox_with_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "n_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 97, 100, 121, 122, 190, 193, 195, 319, 320, 367, 372, 376, 382, 416, 461, 463, 505], "limit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 76, 83, 86, 96, 107, 116, 117, 118, 119, 120, 121, 124, 125, 127, 139, 154, 157, 187, 201, 203, 237, 270, 271, 272, 307, 308, 345, 364, 366, 367, 369, 370, 371, 372, 373, 375, 376, 378, 379, 381, 382, 386, 399, 405, 409, 416, 417, 418, 419, 424, 427, 431, 439, 442, 445, 449, 456, 457, 460, 461, 464, 468, 476, 488, 490, 492, 501, 510, 528, 537, 550, 551, 555], "notimplementederror": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "bodi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "just": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 142, 333, 358, 359, 360, 361, 363, 366, 368, 372, 374, 375, 376, 378, 387, 388, 389, 391, 417, 419, 431, 432, 434, 439, 441, 443, 448, 449, 450, 452, 456, 460, 468, 469, 476, 478, 489, 505, 552], "assign": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 98, 103, 104, 181, 247, 257, 354, 358, 367, 370, 373, 385, 387, 428, 447, 449, 456, 460, 463, 465, 477, 478, 504], "manual": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 365, 370, 380, 387, 443, 492, 500, 552, 553], "shape": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 96, 97, 100, 104, 105, 106, 110, 116, 117, 121, 122, 127, 131, 132, 133, 137, 139, 142, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 195, 198, 222, 270, 287, 300, 316, 369, 372, 376, 407, 422, 429, 431, 433, 436, 441, 444, 445, 448, 450, 455, 456, 458, 459, 460, 461, 463, 467, 468, 478, 490, 504, 505, 506, 511, 515], "effici": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 84, 100, 105, 363, 369, 370, 371, 372, 373, 380, 429, 464, 497, 502, 554], "render": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 336, 358, 366, 417], "order": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 83, 86, 89, 95, 96, 97, 100, 119, 136, 137, 140, 141, 147, 152, 155, 158, 162, 169, 172, 173, 178, 180, 181, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 257, 269, 287, 355, 359, 364, 369, 370, 372, 373, 374, 375, 382, 383, 384, 386, 399, 400, 401, 402, 403, 404, 405, 406, 409, 431, 432, 433, 435, 439, 440, 443, 452, 455, 457, 458, 459, 460, 463, 469, 476, 477, 478, 503, 504, 505, 552, 555], "convent": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 181, 182, 183, 185, 193, 194, 195, 380, 382, 401, 402, 405, 406, 420, 456, 459, 460, 463, 488, 490, 497, 504, 554], "revers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 53, 83, 86, 87, 95, 186, 232, 460, 485], "x_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "x_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 162, 172, 173, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 199, 219, 364, 369, 374, 377, 378, 379, 390, 398, 404, 417, 418, 419, 426, 435, 437, 438, 441, 460, 461, 478, 488, 491, 502, 503, 504, 516], "y_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "y_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 137, 143, 150, 151, 153, 162, 266, 268, 364, 367, 368, 369, 373, 374, 377, 378, 379, 390, 398, 399, 400, 402, 403, 404, 405, 416, 417, 418, 426, 427, 429, 431, 432, 435, 436, 437, 441, 442, 443, 444, 445, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 476, 477, 488, 490, 491, 492, 497, 499, 500, 504, 549, 551], "z_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "z_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "gaussian1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "gaussian2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50], "model_1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 432], "model_2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "x_stddev": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "y_stddev": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "custom_model": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "const3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "amp": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 246, 545], "model_3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "reset": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 218, 257, 359, 406], "delet": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 358, 369, 388, 389, 390, 392, 424, 462], "back": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 83, 86, 183, 299, 361, 368, 369, 372, 378, 431, 432, 434, 460, 463, 476, 552], "del": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 369], "disabl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358, 409], "traceback": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358], "most": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 90, 112, 119, 357, 358, 359, 361, 363, 364, 365, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 409, 416, 417, 419, 420, 423, 424, 436, 437, 445, 449, 451, 455, 457, 458, 459, 460, 461, 467, 468, 472, 478, 480, 490, 491, 492, 497, 505, 549, 551, 552, 555], "recent": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 368, 372, 373, 374, 375, 378, 391, 398, 412, 418, 440, 467, 469], "last": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 87, 89, 95, 182, 183, 184, 185, 187, 191, 194, 195, 232, 317, 355, 365, 368, 370, 380, 384, 387, 388, 390, 392, 398, 399, 448, 501], "No": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 369, 379, 382, 383, 417, 419, 425, 445, 455, 457, 459, 460, 478], "col_fit_deriv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "cov_matrix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "fitter": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 416, 417, 429], "matrix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 106, 110, 139, 140, 141, 144, 198, 199, 201, 210, 232, 271, 272, 351, 375, 376, 386, 419, 420, 423, 457, 458, 488, 490, 496], "eqcon": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "equal": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 112, 116, 120, 124, 127, 139, 187, 358, 368, 371, 419, 431, 449, 450, 461, 465, 488, 504, 555], "constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 492], "evolv": [28, 29, 30, 35, 36, 39, 40, 50, 52, 53, 212, 375, 378, 385, 444, 458], "fit_deriv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "similar": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 349, 358, 361, 370, 371, 372, 373, 374, 377, 378, 379, 382, 409, 423, 433, 448, 460, 464, 465, 478, 488, 496, 552], "algorithm": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 83, 86, 112, 127, 157, 199, 358, 364, 370, 371, 372, 377, 385, 401, 406, 414, 415, 416, 435, 448, 457, 469, 490, 504, 550, 554], "word": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 492], "jacobian": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 405], "fittabl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "fix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 81, 84, 89, 90, 101, 102, 134, 152, 154, 169, 199, 234, 235, 240, 259, 361, 363, 364, 365, 369, 370, 373, 375, 380, 382, 383, 384, 387, 388, 390, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 427, 433, 434, 436, 437, 439, 440, 443, 447, 450, 451, 457, 458, 459, 462, 463, 464, 476, 502, 504, 512, 529], "has_user_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "flag": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 98, 103, 117, 119, 120, 121, 124, 125, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 199, 428, 439, 443, 455, 463], "indic": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 358, 420, 434, 444, 448, 459, 460, 464, 465, 469, 470, 492, 504, 505, 551], "via": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 79, 86, 98, 103, 183, 188, 198, 357, 359, 361, 366, 370, 372, 373, 374, 375, 376, 377, 379, 381, 384, 385, 386, 387, 388, 390, 391, 398, 406, 414, 416, 417, 418, 422, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 492, 496, 501, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 556], "has_user_invers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ineqcon": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "inequ": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "expect": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 100, 103, 105, 117, 167, 172, 173, 178, 193, 271, 272, 273, 275, 279, 284, 317, 358, 363, 371, 373, 374, 375, 378, 383, 385, 427, 428, 433, 434, 435, 437, 443, 444, 448, 449, 454, 457, 460, 461, 465, 468, 470, 488, 490, 553, 554, 555], "input_units_allow_dimensionless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "dimensionless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 144, 252, 253, 286, 445, 463], "gain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 363, 375, 417], "effect": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 46, 78, 83, 84, 86, 100, 102, 141, 142, 168, 169, 174, 176, 177, 190, 210, 232, 348, 349, 358, 363, 368, 369, 371, 372, 382, 413, 415, 431, 443, 445, 448, 449, 465, 469, 470, 472, 476, 497, 505, 510, 511, 551], "input_units_equival": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_units_strict": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "exact": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 376, 460, 468], "thei": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 90, 103, 107, 124, 128, 156, 258, 276, 307, 358, 359, 361, 363, 364, 365, 366, 367, 369, 372, 374, 375, 377, 378, 381, 382, 383, 384, 385, 386, 388, 395, 406, 409, 411, 423, 424, 428, 429, 433, 454, 456, 457, 461, 462, 463, 464, 465, 467, 470, 480, 489, 490, 492, 497, 504, 505, 550, 551, 552, 553, 554, 556], "transform": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 89, 150, 184, 186, 187, 192, 193, 210, 232, 289, 293, 316, 321, 358, 372, 374, 382, 386, 397, 399, 415, 418, 435, 441, 459, 465, 504, 509, 510, 556], "even": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 193, 201, 203, 358, 361, 363, 365, 366, 372, 375, 376, 384, 385, 401, 449, 452, 457, 459, 460, 461, 462, 463, 476, 488, 490, 514, 515, 552], "don": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 139, 357, 358, 361, 363, 365, 366, 375, 385, 388, 428, 431, 436, 441, 449, 461, 463, 480, 550, 552, 555, 556], "experiment": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 374, 552], "often": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 128, 263, 348, 349, 358, 363, 372, 373, 374, 376, 416, 427, 428, 432, 436, 437, 440, 441, 447, 456, 457, 459, 461, 476, 477, 488, 551], "polynomialmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "author": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387], "simpli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 83, 86, 159, 199, 201, 203, 358, 372, 373, 382, 391, 420, 423, 427, 428, 441, 456, 461, 462, 463, 478, 505, 552, 554], "appropri": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 181, 182, 183, 185, 194, 195, 287, 295, 359, 433, 437, 439, 460, 552], "machineri": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 439], "ad": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 59, 78, 79, 83, 86, 97, 100, 104, 105, 109, 111, 119, 182, 183, 185, 190, 191, 194, 195, 358, 359, 361, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 382, 384, 398, 399, 400, 402, 403, 404, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 433, 439, 440, 458, 459, 462, 463, 464, 465, 469, 488, 505, 555], "meta": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 83, 84, 86, 89, 95, 97, 98, 100, 102, 103, 104, 105, 117, 119, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 169, 182, 183, 185, 191, 194, 195, 255, 256, 259, 260, 297, 339, 340, 341, 342, 368, 371, 372, 373, 382, 385, 405, 406, 417, 421, 423, 424, 443, 452, 460, 464, 467, 469, 489, 490, 547], "model_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "primarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "purpos": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 311, 333, 362, 364, 370, 373, 377, 381, 383, 384, 417, 435, 456, 462, 463, 496], "constrain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 384, 436, 440, 459, 465], "model_set_axi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "pertain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "n_output": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "n_submodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "singl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 83, 84, 85, 86, 88, 90, 116, 120, 121, 124, 127, 140, 141, 152, 154, 155, 158, 162, 164, 169, 172, 173, 178, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 210, 232, 358, 364, 365, 368, 370, 371, 372, 373, 374, 375, 379, 380, 385, 386, 390, 397, 399, 404, 405, 417, 423, 424, 427, 431, 433, 435, 436, 437, 449, 451, 455, 456, 459, 460, 462, 465, 469, 470, 476, 478, 488, 490, 502, 504, 505, 549, 551], "obvious": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 480], "param_nam": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "polynomi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 229, 460], "degre": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 107, 108, 114, 117, 119, 181, 182, 183, 185, 188, 193, 194, 195, 210, 232, 236, 247, 258, 424, 427, 428, 432, 437, 442, 450, 455, 459, 460, 461, 467, 476, 490, 504, 505, 554, 555], "param_set": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "pset": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "item": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 95, 189, 232, 378, 385], "across": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 112, 152, 155, 358, 367, 370, 388, 442, 451, 462, 468, 488, 504, 513, 551], "associ": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 83, 86, 95, 97, 100, 117, 126, 128, 129, 130, 140, 141, 152, 155, 172, 173, 178, 191, 258, 287, 364, 374, 382, 383, 384, 385, 386, 423, 424, 428, 429, 431, 435, 440, 455, 456, 459, 460, 462, 463, 469, 478, 489, 490, 492, 505, 554], "parameter_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ti": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 183, 367, 451], "flatten": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 180, 181, 188, 190, 193, 448], "maintain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 358, 360, 375, 377, 378, 379, 383, 387, 388, 418, 459], "modifi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 83, 86, 88, 97, 104, 119, 120, 121, 124, 127, 158, 199, 307, 330, 355, 368, 370, 374, 380, 384, 385, 404, 406, 407, 409, 411, 419, 422, 423, 432, 444, 459, 461, 465, 469, 476, 490, 492, 505, 556], "return_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "standard_broadcast": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "std": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 286, 434, 448, 468], "standard": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 82, 83, 86, 91, 183, 195, 199, 263, 286, 340, 341, 358, 359, 361, 363, 367, 369, 370, 371, 374, 376, 382, 384, 385, 394, 401, 402, 418, 424, 427, 432, 434, 437, 440, 442, 444, 447, 450, 451, 454, 457, 460, 463, 464, 465, 467, 470, 472, 476, 488, 491, 496, 504, 550, 551, 552], "deviat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 120, 183, 195, 199, 275, 457, 465], "sync_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "boolean": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 117, 120, 121, 124, 125, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 199, 210, 232, 247, 374, 406, 439, 455, 460, 461, 462], "access": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 58, 60, 61, 63, 64, 65, 78, 79, 83, 84, 86, 97, 150, 180, 181, 190, 193, 278, 295, 358, 366, 367, 368, 369, 371, 374, 382, 388, 390, 393, 398, 399, 406, 413, 414, 416, 417, 423, 424, 429, 431, 432, 433, 439, 455, 457, 458, 462, 463, 467, 470, 476, 477, 478, 487, 492, 503, 504, 505, 550], "check": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 82, 83, 84, 86, 97, 100, 101, 104, 105, 117, 119, 139, 140, 141, 147, 152, 155, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 201, 203, 210, 232, 247, 332, 334, 361, 374, 380, 384, 387, 388, 390, 391, 392, 395, 404, 409, 417, 429, 447, 458, 472, 480, 492, 496, 505, 549, 552, 553], "constitu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "creation": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 118, 121, 193, 367, 368, 372, 381, 384, 403, 409, 448, 463, 470], "reason": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358, 363, 364, 365, 366, 369, 370, 371, 373, 375, 377, 379, 384, 417, 443, 457, 465, 469, 488, 552], "uses_quant": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "regular": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 181, 189, 193, 367, 386, 411, 423, 447, 460, 461], "with_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "fill_valu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195, 255, 256, 259, 260, 358, 458, 460, 468], "equival": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 117, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 351, 359, 370, 371, 372, 381, 382, 423, 424, 455, 459, 460, 461, 463, 467, 476, 488, 490, 492, 503, 504, 505, 552, 553, 554], "inputs_map": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "new_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "coerce_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "attach": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 81, 89, 210, 218, 232, 247, 257, 369, 379, 422, 451, 457, 462, 463, 552], "unitless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 218, 257], "appli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 83, 85, 86, 96, 97, 98, 100, 104, 105, 106, 109, 110, 111, 112, 116, 119, 120, 124, 127, 139, 140, 141, 147, 152, 154, 155, 159, 165, 168, 169, 182, 183, 185, 186, 190, 191, 193, 194, 195, 200, 202, 210, 218, 232, 247, 260, 270, 271, 272, 299, 300, 343, 347, 355, 358, 364, 365, 368, 369, 371, 373, 376, 382, 383, 384, 406, 411, 416, 417, 418, 419, 423, 427, 431, 433, 443, 450, 451, 452, 456, 459, 460, 461, 462, 463, 465, 467, 470, 477, 478, 490, 492, 537, 550, 553], "compoundmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 411], "compos": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 364, 384], "plu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 211, 378, 384, 463], "unitsmap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "wrap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 243, 295, 372, 402], "polynomial1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "poli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 183], "c0": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "c1": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "21": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 96, 121, 137, 361, 362, 406, 412, 421, 427, 431, 434, 435, 437, 441, 450, 454, 455, 458, 460, 471, 478, 505, 553], "1000": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 183, 188, 358, 361, 429, 455, 456, 458, 465, 468, 478, 504], "still": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 365, 366, 368, 371, 372, 375, 377, 378, 379, 382, 383, 385, 387, 388, 416, 417, 418, 463, 465, 478, 490, 514, 515, 552], "permit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 384], "so": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 90, 100, 105, 116, 120, 122, 124, 125, 127, 135, 179, 182, 183, 185, 187, 191, 194, 195, 199, 200, 202, 222, 259, 269, 333, 341, 348, 349, 358, 359, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 387, 389, 390, 392, 394, 399, 401, 409, 419, 421, 422, 428, 431, 433, 435, 436, 441, 442, 443, 447, 449, 454, 455, 457, 460, 461, 463, 465, 467, 468, 469, 472, 477, 492, 501, 505, 511, 515, 552, 553, 554, 555], "deepcopi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 255, 257, 259], "get_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "with_bbox": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "look": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 79, 84, 97, 100, 104, 105, 119, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 317, 358, 360, 361, 363, 370, 372, 373, 375, 377, 378, 381, 394, 417, 428, 431, 432, 434, 435, 436, 437, 439, 441, 443, 445, 447, 449, 451, 452, 456, 458, 460, 463, 467, 468, 470, 472, 476, 478, 480, 489, 492, 552], "up": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 121, 123, 127, 143, 149, 151, 153, 190, 287, 358, 359, 362, 363, 365, 366, 367, 370, 372, 374, 375, 376, 378, 380, 384, 386, 388, 389, 390, 392, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 409, 413, 415, 416, 417, 418, 419, 431, 432, 439, 442, 443, 465, 467, 468, 505, 552], "risk": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 361, 384], "has_invers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_shap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "output_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "abl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 368, 373, 376, 428, 447, 449, 450, 465, 472, 552], "temporarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 369], "strip": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "awai": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 271, 272], "done": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 117, 120, 351, 358, 359, 361, 363, 364, 365, 369, 371, 372, 373, 374, 376, 377, 378, 381, 382, 384, 390, 394, 418, 423, 428, 434, 439, 440, 444, 445, 447, 451, 452, 456, 459, 460, 463, 464, 488, 492, 500, 501, 505, 537, 554, 556], "mayb": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358, 366, 368, 369, 380], "computation": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 199, 371, 372, 488], "expens": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 431, 444], "prepare_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ensur": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 168, 269, 358, 364, 369, 370, 381, 385, 391, 411, 427, 431, 450, 461, 513], "broadcast": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 182, 183, 185, 188, 191, 194, 195, 247, 299, 444, 458, 460, 504], "compat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 182, 183, 185, 194, 195, 218, 363, 365, 369, 372, 381, 383, 385, 386, 394, 397, 399, 401, 418, 424, 460, 504], "both": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 68, 78, 79, 82, 83, 84, 86, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 139, 140, 141, 147, 152, 155, 179, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 200, 202, 358, 363, 364, 369, 370, 371, 372, 373, 378, 383, 387, 399, 403, 405, 406, 409, 412, 432, 433, 443, 447, 456, 460, 461, 462, 464, 465, 489, 490, 492, 504, 505, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 554], "particularli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sure": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358, 361, 363, 374, 387, 431, 449, 460, 492, 552], "applic": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 83, 86, 358, 369, 384, 386, 405, 448, 457, 504, 551], "prepare_output": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "broadcasted_shap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "renam": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 119, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 361, 368, 369, 377, 378, 381, 397, 400, 402, 403, 404, 405, 409, 419, 420, 423, 552], "rel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 83, 84, 86, 100, 101, 105, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 192, 193, 194, 195, 244, 263, 276, 317, 373, 384, 409, 448, 451, 469, 515, 554], "translat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 374, 490], "yield": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 84, 87, 182, 183, 185, 191, 194, 195, 323, 365, 371, 372, 377, 379, 381, 386, 461, 553, 554, 555], "els": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 117, 119, 127, 189, 358, 361, 372, 375, 382, 385, 386, 388, 390, 392, 464, 552, 554], "over": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 83, 84, 86, 87, 90, 97, 100, 104, 105, 120, 127, 128, 139, 140, 150, 152, 155, 162, 169, 172, 173, 175, 176, 182, 183, 185, 186, 187, 191, 193, 194, 195, 210, 232, 262, 271, 272, 276, 298, 299, 312, 349, 358, 359, 363, 366, 367, 368, 371, 372, 373, 378, 381, 385, 389, 391, 409, 428, 431, 439, 442, 443, 451, 455, 456, 459, 460, 463, 465, 477, 478, 490, 496, 553, 554], "arr": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "set_slice_arg": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "strip_units_from_tre": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sum_of_implicit_term": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sum": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 97, 100, 104, 105, 119, 120, 121, 123, 124, 125, 127, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 262, 271, 272, 274, 354, 358, 368, 369, 371, 380, 382, 386, 400, 424, 439, 443, 452, 454, 456, 465, 468, 476, 477, 478, 488, 498, 551, 553], "implicit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 497], "term": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 225, 281, 284, 361, 363, 365, 367, 368, 372, 375, 378, 383, 385, 407, 411, 420, 435, 457, 458, 552, 554, 555], "prototyp": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 358, 363, 369, 371, 374, 375, 376, 378, 414, 416, 417, 424, 481], "functional_model": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "shift": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 259, 394], "bx": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "intrins": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 233, 278, 369, 373], "correct": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 84, 97, 98, 100, 141, 152, 155, 169, 174, 175, 218, 234, 235, 259, 358, 370, 371, 383, 384, 385, 387, 401, 404, 406, 407, 408, 409, 412, 415, 416, 418, 420, 421, 422, 423, 424, 427, 431, 432, 433, 434, 443, 447, 449, 455, 456, 457, 459, 461, 462, 463, 465, 469, 476, 478, 489, 490, 499, 512, 524, 527, 529, 532, 537], "solv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 361, 366, 368, 369, 370, 371, 411, 492], "remain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 363, 364, 365, 366, 371, 375, 384, 399, 418, 433, 462, 498], "ie": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 384, 462, 463, 488, 551], "with_units_from_data": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "necessarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 373, 436], "presenc": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 435, 448, 460, 528, 551], "_parameter_units_for_data_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "take": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 97, 100, 104, 105, 116, 137, 157, 159, 191, 193, 199, 210, 232, 247, 333, 356, 358, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 382, 388, 404, 405, 406, 409, 411, 419, 420, 422, 423, 424, 427, 428, 433, 434, 443, 444, 445, 451, 452, 457, 459, 460, 461, 463, 464, 465, 467, 477, 478, 489, 492, 505, 521, 553, 554, 555], "target": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 84, 97, 100, 104, 105, 108, 112, 116, 118, 127, 140, 141, 152, 155, 172, 173, 177, 178, 182, 183, 185, 187, 191, 194, 195, 364, 365, 371, 384, 387, 415, 428, 433, 441, 450, 459, 461, 477], "without_units_for_data": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "z_0": 29, "usual": [29, 78, 79, 117, 132, 136, 137, 138, 150, 191, 295, 358, 359, 361, 363, 364, 365, 366, 372, 373, 378, 384, 388, 423, 427, 428, 429, 431, 433, 434, 436, 437, 441, 443, 444, 447, 448, 449, 450, 451, 454, 456, 461, 464, 469, 477, 480, 488, 492, 494, 495, 496, 498, 501, 505, 510, 549, 551, 552, 553], "abov": [29, 44, 52, 53, 79, 116, 118, 119, 122, 126, 127, 132, 133, 157, 192, 347, 349, 358, 359, 364, 367, 368, 370, 372, 374, 375, 376, 377, 378, 382, 390, 391, 394, 427, 441, 443, 444, 445, 449, 452, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 476, 486, 488, 489, 496, 505, 551, 552, 553, 554, 555], "plane": [29, 65, 66, 120, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 378, 454, 455, 460, 467, 487, 502, 505, 510, 551, 557], "commonli": [29, 79, 372, 376, 418, 445, 480, 549, 550, 552, 554, 557], "birth": [29, 30, 36, 50, 51, 52, 53], "casebattacharya1998": [29, 30, 35, 36, 39, 40, 48], "r_0": [30, 33, 38, 48, 211, 222, 244, 462, 509, 511, 515], "7": [30, 31, 38, 52, 53, 65, 83, 86, 119, 125, 132, 162, 165, 222, 348, 349, 358, 362, 363, 370, 374, 375, 378, 394, 398, 399, 401, 402, 408, 409, 414, 415, 416, 418, 419, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 505, 509, 510, 546, 553, 554], "04": [30, 65, 89, 99, 118, 426, 430, 432, 434, 435, 437, 440, 443, 451, 452, 455, 458, 460, 463, 467, 468, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "83": [30, 65, 79, 81, 89, 97, 100, 104, 105, 162, 165, 431, 432, 433, 435, 440, 449, 456, 459, 460, 461, 469, 470, 476, 477, 496, 499, 501, 502, 505], "pulsar": [30, 31, 32, 35, 39, 42, 50, 54, 79, 368, 378, 399, 401, 420, 423, 426, 437, 442, 453, 463, 472, 482, 483, 488, 489, 490, 492, 500, 504, 549], "appendix": [30, 127, 142, 229, 263, 280, 435], "2006apj": [30, 31, 32, 33], "643": [30, 31, 32, 33], "332f": [30, 31, 32, 33], "sigma_1": [31, 49, 143, 458], "160": [31, 119, 397, 406, 445, 462], "sigma_2": [31, 49, 143, 458], "780": [31, 119], "9": [31, 33, 35, 65, 79, 83, 86, 132, 222, 224, 317, 323, 355, 362, 363, 367, 375, 394, 400, 402, 413, 416, 418, 421, 423, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 504, 511, 515, 516, 517, 524, 527, 540, 548, 553], "bimod": 31, "veloc": [31, 32, 37, 45, 49, 291, 294], "faucher": [31, 33, 37, 39, 45], "kaspi": [31, 39, 45], "2006": [31, 33, 373, 435, 442, 450], "sigma1": 31, "sigma2": 31, "One": [31, 32, 37, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 96, 97, 100, 104, 105, 210, 232, 313, 358, 359, 364, 366, 367, 368, 369, 372, 374, 375, 376, 384, 423, 428, 432, 437, 449, 459, 460, 461, 476, 478, 501, 505, 528, 552, 554], "dimension": [31, 32, 37, 66, 83, 86, 180, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 219, 222, 265, 300, 313, 364, 372, 386, 390, 415, 435, 457, 458, 460, 463, 478, 496, 498, 504, 505, 550, 551], "guiger": [31, 39], "265": [32, 133, 372, 427, 435, 441, 462, 478], "maxwellian": 32, "km": [32, 37], "logspir": [33, 38], "milki": [33, 38, 397, 482], "wai": [33, 38, 79, 83, 86, 187, 311, 317, 357, 358, 359, 361, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 378, 379, 382, 384, 390, 391, 392, 394, 397, 401, 417, 418, 429, 431, 433, 436, 439, 448, 455, 456, 457, 459, 460, 461, 462, 464, 467, 468, 469, 470, 472, 482, 489, 491, 492, 496, 505, 550, 552, 554], "spiral": [33, 34, 38, 45, 413], "arm": [33, 34, 38, 45, 413], "25": [33, 52, 83, 86, 96, 132, 141, 152, 165, 273, 279, 362, 375, 382, 396, 417, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 510, 515], "89": [33, 432, 460], "rad": [33, 79, 84, 97, 100, 104, 105, 107, 108, 143, 149, 151, 152, 153, 154, 155, 165, 178, 246, 374, 411, 423, 433, 456, 458, 459, 468, 497, 498, 501, 545], "48": [33, 162, 397, 439, 440, 460, 462, 463, 468, 514, 515, 516], "spiralarm": [33, 38, 45, 417, 482], "norma": [33, 38], "carina": [33, 38], "sagittariu": [33, 38], "perseu": [33, 38], "crux": [33, 38], "scutum": [33, 38], "dtype": [33, 38, 83, 86, 106, 110, 137, 139, 142, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 210, 232, 287, 358, 386, 433, 436, 445, 455, 456, 458, 459, 460, 467, 468, 478, 490], "u18": [33, 38], "theta_0": [33, 38], "57": [33, 431, 435, 437, 441, 452, 460, 539, 540], "71": [33, 434, 462, 554], "09": [33, 99, 118, 119, 162, 395, 426, 432, 435, 437, 439, 446, 455, 456, 458, 459, 476, 477, 478, 554], "95": [33, 65, 143, 149, 151, 152, 153, 155, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 434, 435, 441, 447, 455, 456, 457, 460, 461, 467, 509, 554], "blur": 33, "random_st": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 310, 311, 314, 315, 316, 317, 358, 371, 434, 443, 444], "seed": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 233, 240, 246, 258, 261, 309, 310, 311, 314, 315, 316, 317, 358, 417, 443, 528], "draw": [33, 183, 309, 371, 465], "theta": [33, 34, 38, 52, 53, 143, 149, 151, 153, 157, 165, 179, 188, 288, 291, 358, 406, 433, 468, 478, 509, 510, 514, 515], "possibl": [33, 78, 83, 86, 145, 358, 359, 361, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 385, 388, 390, 400, 401, 409, 416, 418, 423, 435, 436, 437, 442, 445, 456, 457, 458, 459, 460, 468, 478, 490, 492, 499, 504, 505, 528, 552, 553], "rng": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 311, 314, 315, 316, 317, 358], "randomst": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 311, 314, 315, 316, 317, 358], "initialis": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 311, 314, 315, 316, 317, 358, 380, 465], "get_random_st": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 141, 152, 155, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 309, 314, 315, 316, 317, 358], "dx": [33, 291], "dy": [33, 291], "spiralarm_index": [33, 34, 38], "xy_posit": [33, 34, 38], "logarithm": [34, 460, 465, 526], "en": [34, 79, 83, 84, 86, 120, 175, 190, 199, 260, 287, 361, 378, 387, 427, 434, 436, 439, 441, 447, 451, 457, 458, 461, 467, 489, 503, 505], "wikipedia": [34, 79, 84, 316, 372, 376], "wiki": [34, 79, 84, 409, 467], "logarithmic_spir": 34, "2006mnra": [35, 112], "372": [35, 119, 478], "777l": 35, "r_exp": [36, 48], "neutron": 36, "star": [36, 40, 212], "1990apj": [36, 37], "348": [36, 37, 414, 431], "485p": [36, 37], "v_0": [37, 49], "560": [37, 455], "lyne": 37, "1982": 37, "adopt": [37, 371, 374, 379, 433, 443, 444, 454], "paczynski": 37, "1990": [37, 398], "valle": 38, "2008": [38, 82, 212, 260, 468, 480, 518], "2008aj": 38, "135": [38, 96, 133, 429, 455, 457], "1301v": 38, "bar_radiu": 38, "p": [38, 51, 54, 83, 86, 104, 105, 123, 275, 284, 358, 409, 432, 442, 454, 457, 476, 492, 497, 498, 554], "r_sun": 38, "64": [39, 65, 79, 119, 181, 397, 434, 455, 468], "01": [39, 52, 72, 79, 83, 84, 86, 89, 97, 100, 104, 105, 107, 121, 127, 165, 166, 170, 211, 217, 221, 223, 225, 240, 246, 359, 394, 426, 427, 431, 433, 434, 435, 436, 439, 440, 443, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 466, 468, 469, 470, 476, 477, 478, 479, 484, 489, 499, 501, 502, 505, 509, 511, 513, 535, 536, 540, 541, 542, 548, 553, 556], "r_1": [39, 48], "55": [39, 42, 83, 86, 451, 452, 457, 461, 465, 476, 532, 533, 534], "nonzero": 39, "15": [39, 42, 65, 83, 84, 86, 139, 140, 141, 142, 143, 144, 149, 150, 151, 153, 348, 349, 353, 367, 375, 397, 401, 406, 411, 414, 415, 416, 418, 427, 431, 432, 435, 437, 439, 440, 441, 443, 444, 445, 447, 448, 452, 455, 457, 459, 460, 462, 463, 468, 478, 501, 509], "2004a": [39, 40], "26a": [39, 40, 50, 52, 53, 120, 229, 263, 455], "422": [39, 40], "545y": [39, 40], "ob": [40, 78, 79, 84, 85, 86, 87, 91, 152, 162, 285, 286, 370, 371, 374, 375, 380, 394, 412, 413, 422, 427, 428, 431, 434, 435, 441, 443, 447, 450, 451, 452, 459, 464, 467, 468, 469, 470, 474, 477, 489, 492, 497, 499, 501, 502], "empir": 40, "obs_po": [41, 290], "column": [41, 43, 44, 46, 47, 56, 79, 83, 86, 98, 103, 117, 119, 122, 132, 136, 137, 139, 163, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 258, 278, 285, 328, 329, 330, 331, 351, 352, 355, 356, 358, 371, 373, 382, 420, 423, 424, 427, 443, 444, 452, 455, 460, 463, 467, 489, 492], "extens": [41, 79, 139, 182, 183, 185, 187, 194, 195, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 249, 255, 259, 360, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 378, 388, 412, 442, 443, 444, 463, 552], "luminos": [41, 46, 51, 52, 53, 54, 233], "glon": [41, 65, 66, 79, 358, 431, 455, 460, 468], "glat": [41, 65, 66, 79, 358, 431, 455, 460, 468], "angular_extens": 41, "cartesian": [41, 46, 183, 194, 195, 290, 292, 422, 478, 504], "origin": [41, 83, 86, 97, 99, 104, 118, 183, 195, 255, 257, 259, 368, 372, 384, 385, 415, 432, 448, 450, 460, 463, 468, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 555, 556], "goe": [41, 52, 348, 358, 377, 388, 445], "through": [41, 83, 86, 286, 287, 355, 361, 363, 371, 372, 378, 382, 383, 391, 395, 409, 420, 444, 448, 457, 459, 460, 461, 462, 468, 469, 492, 497, 504, 551, 554], "sun": 41, "galactocentr": 41, "earth": [41, 84, 262, 468], "b_mean": 42, "b_stdv": 42, "p_mean": 42, "p_stdv": 42, "normal": [42, 96, 97, 100, 104, 105, 120, 121, 122, 124, 131, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 159, 182, 183, 185, 191, 192, 194, 195, 218, 234, 235, 238, 257, 259, 262, 287, 348, 349, 358, 359, 363, 364, 368, 369, 372, 376, 382, 398, 402, 411, 437, 443, 449, 450, 452, 459, 460, 461, 462, 463, 468, 477, 478, 504, 509, 510, 511, 514, 515, 516, 537, 551, 553, 554], "period": [42, 51, 54, 258, 365, 384, 417, 464, 484], "logb": 42, "mean": [42, 66, 83, 86, 91, 97, 121, 123, 139, 140, 141, 144, 147, 152, 155, 220, 224, 258, 275, 286, 305, 358, 359, 361, 363, 365, 371, 372, 374, 375, 381, 386, 391, 394, 406, 415, 434, 444, 448, 457, 459, 463, 464, 465, 468, 469, 478, 510, 525, 552, 553], "magnet": [42, 50, 51, 54, 528], "gauss": [42, 51, 54, 97, 100, 122, 123, 143, 183, 195, 219, 220, 221, 222, 381, 415, 452, 460, 463, 478, 509, 510], "second": [42, 58, 79, 82, 83, 84, 86, 139, 258, 317, 320, 335, 339, 342, 347, 359, 366, 368, 370, 372, 376, 382, 384, 388, 403, 422, 431, 432, 435, 437, 439, 441, 442, 443, 444, 445, 450, 451, 454, 456, 457, 459, 460, 465, 467, 472, 476, 487, 553, 556], "pwn": [43, 455, 478, 485], "least": [43, 44, 358, 361, 363, 367, 443, 448, 504], "e_sn": [43, 44, 52], "n_ism": [43, 44, 45, 52, 485, 486], "p0_birth": 43, "b_psr": 43, "entri": [43, 44, 83, 86, 89, 114, 117, 120, 121, 124, 125, 199, 210, 232, 269, 326, 358, 370, 378, 382, 385, 387, 390, 392, 409, 420, 428, 432, 455, 457, 460, 463, 464, 492, 493, 505], "r_out_pwn": 43, "outer": [43, 44, 52, 53, 121, 157, 244, 515], "snr": [44, 50, 53, 65, 468, 485, 486], "kinet": 44, "r_out": 44, "r_in": [44, 157, 167, 244, 437, 502], "inner": [44, 52, 53, 121, 157, 167, 245, 437, 478, 515], "l_snr": 44, "photon": [44, 212, 233, 343, 373, 434, 443, 447, 461, 463, 478, 497, 528, 551], "rate": [44, 45, 79, 84, 136, 137, 168, 175, 317, 371, 394, 418, 431, 433, 452, 459, 467, 468, 470, 482, 495, 551], "n_sourc": [45, 482], "rad_di": [45, 482], "yk04": [45, 48], "vel_di": [45, 482], "h05": [45, 49], "max_ag": [45, 482], "1e6": [45, 468, 482, 537], "yr": [45, 52, 53, 482, 484, 485, 486], "basic": [45, 46, 65, 69, 70, 71, 72, 73, 74, 75, 76, 100, 105, 119, 224, 361, 364, 368, 369, 370, 371, 372, 374, 378, 382, 385, 394, 406, 416, 418, 426, 428, 431, 433, 446, 448, 449, 454, 455, 461, 472, 478, 480, 482, 483, 488, 489, 490, 500, 501, 504, 549, 551, 552], "choos": [45, 180, 181, 184, 186, 187, 190, 193, 260, 301, 358, 370, 372, 374, 378, 390, 409, 429, 431, 435, 439, 441, 451, 456, 457, 459, 460, 462, 463, 464, 468, 477, 492, 552], "year": [45, 60, 63, 74, 358, 363, 365, 366, 368, 375, 378, 379, 383, 385, 388, 415, 417, 418, 440, 442, 455, 467, 484, 485, 486, 487], "sn": [45, 50, 52, 53], "sn_rate": [45, 482], "simul": [45, 78, 79, 84, 88, 97, 100, 103, 104, 105, 107, 141, 152, 155, 317, 368, 371, 374, 378, 385, 386, 390, 397, 401, 403, 405, 411, 414, 416, 417, 418, 423, 424, 426, 430, 431, 436, 439, 441, 446, 452, 453, 462, 465, 467, 472, 482, 488, 490, 497, 500, 549, 550], "proper": [45, 95, 373, 384, 422, 423, 433, 439, 492], "motion": [45, 291], "maxim": [45, 78, 86, 107, 168, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 421, 422, 423, 424, 501], "interstellar": [45, 443], "medium": [45, 52, 358, 367], "dimens": [46, 53, 97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 195, 255, 256, 259, 287, 299, 351, 374, 406, 417, 419, 423, 457, 458, 460, 463, 472, 488, 504, 505, 510], "distance_max": [46, 47, 316, 455], "pc": [46, 47, 50, 52, 485, 486], "randomli": [46, 358], "cube": [46, 97, 100, 127, 157, 175, 182, 183, 185, 191, 194, 195, 228, 247, 358, 369, 370, 371, 377, 378, 379, 381, 390, 397, 401, 402, 405, 410, 413, 414, 415, 416, 417, 418, 435, 436, 441, 445, 468, 478, 488, 497, 499, 504, 505, 551], "studi": [46, 262, 371, 374, 382, 391, 418, 428, 429, 440, 441, 442, 445, 447, 450, 451, 457, 460, 463, 467, 482, 492, 501, 553], "result": [46, 71, 82, 83, 86, 87, 96, 97, 100, 104, 105, 112, 114, 116, 117, 119, 120, 121, 123, 124, 125, 127, 132, 144, 150, 152, 155, 168, 172, 173, 178, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 199, 210, 232, 259, 269, 287, 351, 357, 358, 359, 361, 363, 365, 367, 368, 369, 370, 371, 374, 376, 377, 380, 384, 386, 391, 394, 401, 409, 411, 412, 417, 419, 423, 424, 429, 431, 433, 434, 439, 441, 443, 444, 447, 448, 450, 451, 452, 455, 456, 457, 460, 461, 464, 465, 468, 469, 470, 476, 477, 480, 487, 490, 505, 540, 551, 553, 554], "distance_min": [47, 316, 455], "sampl": [47, 88, 98, 103, 127, 141, 143, 149, 151, 152, 153, 155, 182, 183, 185, 191, 193, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 270, 300, 309, 314, 315, 316, 317, 362, 370, 372, 373, 376, 378, 390, 397, 399, 401, 402, 405, 411, 418, 420, 423, 424, 426, 433, 446, 448, 456, 457, 472, 488, 489, 492, 497, 500, 504], "locat": [47, 78, 79, 81, 83, 84, 89, 128, 140, 141, 147, 152, 155, 193, 316, 366, 372, 376, 379, 384, 385, 390, 392, 423, 427, 434, 443, 444, 447, 451, 455, 469, 470, 489, 505, 552], "sphere": [47, 315, 397, 399, 504, 509, 510, 513], "isotrop": [47, 207, 264, 462], "spheric": [47, 358, 399, 504, 550], "cb98": 48, "f06": 48, "l06": [48, 482], "p90": 48, "yk04b": 48, "f06b": [49, 482], "faucherkaspi2006velocitybimod": 49, "f06p": 49, "paczynski1990veloc": 49, "faucherkaspi2006velocitymaxwellian": 49, "snrtruelovemcke": [50, 485, 486], "eta_": 50, "999": [50, 152, 155, 455], "eta_b": 50, "001": [50, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195, 335, 443, 457, 515], "morphologi": [50, 52, 114, 369, 371, 381, 397, 414, 416, 428, 436, 442, 443, 444, 447, 455, 459, 506], "simpl": [50, 52, 132, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 262, 358, 359, 370, 371, 372, 373, 374, 377, 382, 385, 386, 399, 409, 413, 417, 418, 423, 427, 428, 429, 431, 432, 433, 434, 436, 439, 448, 452, 457, 460, 461, 464, 470, 476, 477, 478, 482, 492, 550, 551, 552], "wind": [50, 437, 442, 463, 483], "nebula": [50, 263, 269, 403, 431, 432, 433, 437, 440, 441, 442, 449, 457, 461, 463, 465, 468, 469, 470, 476, 477, 478, 483, 505, 551], "evolut": [50, 52, 53, 212, 364, 378, 426, 446, 472, 485, 486, 488, 489, 497, 500, 504, 506], "go": [50, 83, 86, 361, 368, 378, 383, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 480, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552], "electron": [50, 262, 467, 528], "magnetic_field": [50, 51, 54], "insid": [50, 79, 97, 104, 109, 111, 139, 165, 181, 182, 183, 185, 190, 193, 194, 195, 210, 232, 247, 347, 351, 358, 359, 372, 374, 382, 409, 427, 431, 434, 436, 439, 441, 447, 451, 456, 459, 461, 462, 463, 467, 469, 489, 499, 501, 502, 505], "certain": [50, 79, 83, 86, 199, 276, 357, 372, 374, 376, 382, 427, 454, 459, 460, 468, 487, 505], "spin": [50, 51, 54, 401, 484], "down": [50, 51, 54, 127, 363, 365, 368, 372, 377, 401, 456, 468, 555], "free": [50, 52, 53, 97, 100, 104, 105, 120, 124, 125, 162, 199, 201, 203, 234, 235, 269, 363, 373, 399, 432, 434, 436, 437, 439, 441, 442, 447, 449, 451, 456, 457, 459, 462, 463, 465, 468, 472, 476, 477, 480, 490, 499, 512, 528, 529, 552, 554, 555], "expans": [50, 52, 53], "phase": [50, 52, 53, 85, 160, 163, 258, 363, 368, 369, 372, 373, 375, 377, 382, 394, 399, 418, 420, 423, 426, 463, 481, 492, 506, 548], "dot": [50, 51, 54, 104, 105, 182, 183, 185, 191, 194, 195, 423], "_0": [50, 51], "ej": [50, 52, 53], "collis": 50, "shock": [50, 52, 53, 485], "constant": [50, 51, 52, 53, 97, 104, 112, 142, 182, 183, 185, 191, 193, 194, 195, 206, 207, 208, 209, 211, 223, 225, 316, 371, 372, 377, 417, 426, 449, 468, 485, 488, 506, 517, 538, 548, 551, 555], "radius_reverse_shock": [50, 53, 485], "2006ara": 50, "17g": 50, "p_0": [51, 182, 185, 191, 194, 195, 484], "1e10": [51, 142], "45": [51, 54, 431, 434, 440, 452, 456, 460, 461, 463, 480, 505, 510, 511], "cm2": [51, 54, 65, 102, 119, 133, 142, 195, 263, 343, 427, 429, 432, 434, 435, 439, 440, 441, 443, 444, 447, 449, 450, 451, 452, 454, 455, 456, 460, 462, 463, 465, 468, 476, 477, 478, 490, 505, 521, 524, 527, 532, 537], "1000000": [51, 52, 54, 455, 537], "l_0": [51, 485, 509, 510], "dipol": [51, 54], "strength": [51, 54, 386, 528], "pole": [51, 372, 460], "brake": 51, "inertia": [51, 54], "energy_integr": 51, "total": [51, 65, 94, 96, 97, 100, 104, 105, 120, 121, 124, 125, 131, 162, 177, 181, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 284, 366, 382, 386, 390, 392, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 468, 471, 473, 475, 476, 477, 478, 479, 482, 488, 492, 497, 507, 517, 528, 538, 548, 551], "tau_0": 51, "luminosity_spindown": [51, 54], "polar": [51, 54, 288, 358], "cap": [51, 54], "cdot": [51, 52, 53, 54, 97, 104, 237, 251, 381, 463, 488, 509, 514, 515, 519, 522, 523, 530, 531, 533, 534, 535, 536, 541, 542, 543, 545, 553], "19": [51, 53, 54, 65, 362, 374, 376, 378, 397, 405, 406, 408, 420, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "rotat": [51, 54, 165, 166, 170, 175, 211, 219, 222, 444, 501, 509, 510], "period_dot": 51, "p_dot": [51, 54], "real": [51, 358, 361, 388, 434, 435, 437, 444, 457, 461, 488], "1e51": 52, "erg": [52, 53, 65, 427, 431, 455, 478, 485, 492], "m_ejecta": [52, 485], "iau2015": 52, "solar": 52, "988409870698051e": 52, "uncertainti": [52, 97, 100, 104, 105, 271, 272, 362, 375, 416, 429, 431, 452, 457, 465, 477, 550, 551, 553], "468805426856864e": 52, "kg": 52, "iau": [52, 397, 401], "2015": [52, 82, 372, 375, 396, 468], "resolut": [52, 139, 140, 144, 181, 193, 367, 369, 371, 372, 417, 423, 455, 468], "codata": 52, "2018": [52, 363, 364, 365, 366, 367, 368, 369, 373, 375, 377, 378, 396, 423, 467, 470, 551], "t_stop": [52, 82, 489], "shell2d": 52, "sedov": [52, 53], "taylor": [52, 53], "strong": [52, 371, 378, 431, 465], "explos": 52, "1950rspsa": 52, "201": [52, 460], "159t": 52, "neutrino": 52, "loss": [52, 551], "cosmic": [52, 212, 262, 376, 467], "ism": [52, 53, 528], "ejecta": 52, "post": [52, 367, 385], "temperatur": [52, 53], "emiss": [52, 66, 128, 364, 369, 373, 431, 437, 439, 440, 443, 462, 467, 468, 488, 502, 528, 549], "sedov_taylor_begin": [52, 53, 486], "begin": [52, 83, 86, 97, 104, 117, 119, 127, 378, 381, 384, 431, 433, 460, 463, 509, 514, 515, 519, 535, 554], "condit": [52, 53, 135, 201, 203, 210, 232, 382, 386, 406, 427, 431, 434, 444, 455, 461, 462, 464, 469, 488, 497], "swept": 52, "surround": [52, 305, 358], "eject": 52, "t_": [52, 53, 276, 497, 540, 541, 542, 543, 544, 545, 553], "approx": [52, 53], "200": [52, 83, 86, 127, 193, 382, 410, 431, 432, 435, 441, 445, 447, 455, 460, 463, 478, 553], "51": [52, 53, 65, 431, 439, 445, 476, 522, 523, 524], "sedov_taylor_end": [52, 53, 486], "end": [52, 53, 82, 83, 86, 87, 89, 95, 97, 104, 117, 119, 127, 187, 224, 232, 363, 365, 367, 369, 370, 372, 373, 374, 375, 377, 378, 381, 410, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554], "drop": [52, 53, 97, 100, 104, 105, 117, 119, 124, 140, 141, 147, 152, 155, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 211, 218, 257, 343, 362, 363, 374, 375, 380, 399, 402, 403, 406, 409, 416, 419, 443, 460, 488], "below": [52, 53, 83, 86, 181, 185, 192, 193, 347, 348, 349, 353, 355, 359, 361, 362, 367, 368, 372, 374, 375, 378, 381, 382, 384, 385, 386, 388, 389, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 431, 435, 452, 455, 457, 459, 461, 463, 464, 465, 467, 468, 489, 492, 510, 554], "43000": [52, 53], "66": [52, 53, 397, 400, 434, 447, 456, 457, 462, 465], "luminosity_tev": [52, 53, 486], "interv": [52, 53, 74, 78, 79, 82, 84, 85, 86, 87, 95, 96, 98, 103, 119, 124, 163, 187, 192, 199, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 367, 368, 372, 373, 376, 382, 390, 403, 405, 406, 409, 418, 419, 424, 449, 451, 457, 460, 469, 477, 489, 504, 551, 554], "zero": [52, 53, 65, 83, 86, 95, 97, 100, 104, 105, 127, 132, 139, 140, 141, 144, 147, 152, 168, 182, 183, 185, 191, 194, 195, 236, 257, 259, 260, 299, 305, 317, 358, 402, 405, 420, 455, 459, 460, 465, 555], "l_": [52, 53], "geq": [52, 53], "1tev": [52, 53, 125, 444], "34": [52, 53, 65, 397, 427, 431, 432, 441, 447, 456, 460, 462, 478], "1994a": [52, 53], "287": [52, 53, 451], "959d": [52, 53], "shell": [52, 53, 76, 244, 245, 369, 374, 381, 390, 392, 426, 463, 506, 515, 517, 552], "radius_inn": [52, 53], "0914": [52, 53], "truelov": 53, "mckee": [53, 424], "1999": [53, 359, 556], "1999apj": 53, "120": [53, 373, 426, 433, 468, 512, 548], "299t": 53, "st": [53, 457, 468], "52": [53, 119, 162, 427, 428, 435, 437, 439, 451, 455, 467, 470, 478, 525, 526, 527], "ch": 53, "12r_": 53, "026": [53, 65, 455], "co": [53, 188, 383, 384, 427, 509, 510, 511], "simeq": 53, "25t_": 53, "reach": [53, 126, 196, 363, 368, 371, 463], "49": [53, 435, 439, 451, 455, 462, 466, 468, 476, 504, 518], "46": [53, 65, 104, 105, 372, 455, 460, 468, 508, 509, 510], "ln": [53, 457, 535], "sec": [54, 79, 89, 95, 124, 317], "gammacat": [55, 64, 416, 429], "sourcecataloggammacat": [55, 75, 429, 455], "sourcecataloghgp": [55, 76, 77, 455, 487], "hawc": [55, 59, 62, 70, 73, 92, 395, 403, 409, 417, 420, 421, 423, 426, 471, 472, 487, 488, 489, 500, 504, 551], "sourcecatalog2hwc": [55, 70, 455, 487], "fermi": [55, 58, 60, 61, 63, 67, 69, 71, 72, 74, 79, 82, 120, 121, 123, 127, 182, 183, 185, 191, 192, 194, 195, 212, 262, 264, 269, 365, 366, 367, 368, 370, 371, 374, 375, 378, 388, 390, 395, 397, 398, 401, 403, 406, 410, 413, 414, 415, 416, 417, 418, 426, 429, 435, 443, 445, 455, 460, 461, 462, 463, 471, 472, 478, 480, 488, 489, 492, 497, 504, 516, 526, 531, 549, 556], "sourcecatalog3fgl": [55, 71, 429, 455, 487], "sourcecatalog4fgl": [55, 74, 411, 455, 487], "sourcecatalog2fhl": [55, 69, 455, 487], "sourcecatalog3fhl": [55, 72, 429, 455, 462, 478], "sourcecatalog3hwc": [55, 73, 455, 487], "lhaaso": [55, 57], "sourcecatalog1lhaaso": [55, 68, 455], "registri": [55, 93, 113, 148, 160, 228, 230, 241, 242, 254, 379, 386, 402, 405, 406, 409, 418, 455, 463], "source_name_kei": 56, "source_nam": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 455, 478], "source_name_alia": 56, "mostli": [56, 67, 287, 358, 359, 364, 365, 366, 367, 372, 374, 377, 378, 379, 382, 383, 385, 387, 388, 409, 417, 455, 459, 470, 478, 554, 556], "thin": [56, 299], "wrapper": [56, 233, 243, 299, 372, 373, 400, 403, 480, 492], "around": [56, 132, 158, 181, 183, 193, 195, 299, 372, 373, 433, 452, 454, 457, 461, 469, 478, 492, 501, 504, 505], "row": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 86, 132, 139, 295, 329, 352, 373, 382, 385, 420, 423, 434, 444, 445, 455, 457, 460, 467, 469, 470, 478, 487], "skycoord": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 89, 91, 97, 100, 104, 105, 117, 119, 121, 123, 140, 141, 147, 152, 155, 165, 166, 168, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 196, 206, 207, 210, 211, 219, 222, 232, 234, 236, 244, 245, 247, 249, 255, 257, 259, 285, 286, 319, 320, 334, 354, 359, 369, 372, 382, 385, 427, 428, 431, 433, 434, 437, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 477, 478, 492, 496, 501, 503, 505, 513], "abstract": [56, 57, 59, 94, 115, 153, 161, 166, 180, 182, 185, 194, 369, 405, 504], "descript": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 83, 86, 121, 199, 359, 363, 364, 372, 378, 383, 384, 395, 420, 424, 439, 447, 455, 457, 460, 467, 469, 476, 477, 492], "row_index": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 455], "to_model": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 409, 455], "1lhaaso_catalog": 57, "sourcecatalog": [57, 58, 59, 60, 61, 62, 63, 64, 65, 372, 409, 455, 461, 478, 487], "first": [57, 83, 86, 87, 89, 95, 97, 104, 117, 119, 121, 132, 139, 156, 165, 182, 183, 184, 187, 191, 192, 210, 232, 263, 320, 347, 358, 359, 361, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 388, 389, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 416, 418, 419, 420, 421, 423, 427, 428, 429, 431, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 476, 477, 478, 489, 501, 504, 552], "sourcecatalogobject1lhaaso": 57, "paper": [57, 59, 62, 70, 71, 120, 168, 378, 384, 418, 448, 450, 455, 459, 469, 480], "90": [57, 65, 381, 434, 440, 441, 455, 460, 463, 480], "1lhaaso": [57, 68, 424, 455], "2023arxiv230517030c": 57, "observatori": [57, 59, 62, 78, 79, 81, 84, 89, 371, 385, 387, 390, 410, 467, 469, 470, 487, 492], "composit": [57, 68, 76, 298, 384, 416], "km2a": [57, 68], "wcda": [57, 68], "gll_psch_v09": 58, "gz": [58, 60, 61, 63, 64, 65, 78, 79, 82, 84, 86, 89, 97, 100, 104, 105, 109, 111, 112, 116, 121, 123, 127, 132, 133, 144, 213, 260, 346, 351, 353, 359, 380, 418, 431, 432, 435, 442, 443, 444, 445, 455, 456, 458, 460, 462, 463, 467, 468, 469, 474, 476, 477, 478, 489, 490, 492, 494, 495, 496, 498, 518], "2fhl": [58, 69, 403, 415, 416, 455, 478, 487], "2016apj": 58, "222": [58, 426, 455, 462, 517, 538], "5a": 58, "gsfc": [58, 60, 61, 63, 139, 187, 378, 531], "nasa": [58, 60, 61, 63, 139, 187, 378, 387, 531], "gov": [58, 60, 61, 63, 139, 187, 378, 387, 531], "ssc": [58, 60, 61, 63, 233, 378, 531], "sourcecatalogobject2fhl": 58, "2hwc": [59, 70, 403, 409, 417, 455, 487], "ecsv": [59, 62, 370], "sourcecatalogobject2hwc": 59, "40": [59, 99, 104, 105, 118, 365, 410, 428, 429, 431, 432, 439, 441, 450, 451, 460, 463, 467, 478, 501, 524, 527, 532, 553], "mention": [59, 134, 358, 359, 361, 365, 366, 370, 372, 375, 377, 378, 383, 384, 387, 388, 458, 462, 463, 480, 551], "due": [59, 83, 86, 358, 386, 412, 460, 465, 467, 528, 552], "geminga": 59, "detect": [59, 132, 133, 269, 348, 349, 359, 374, 377, 378, 380, 397, 403, 404, 405, 415, 417, 418, 424, 426, 438, 455, 467, 469, 472, 488, 504, 551, 554], "abeysekara": 59, "On": [59, 157, 163, 164, 167, 278, 358, 359, 364, 366, 373, 374, 387, 389, 390, 391, 392, 413, 439, 440, 457, 472, 554], "2017apj": [59, 61], "843": [59, 427, 452], "40a": 59, "gll_psc_v16": 60, "3fgl": [60, 65, 71, 214, 251, 381, 410, 413, 415, 416, 417, 426, 429, 455, 463, 478, 487, 506, 538], "2015apj": [60, 120], "218": [60, 120, 426, 538], "23a": [60, 120], "4yr_catalog": 60, "sourcecatalogobject3fgl": 60, "gll_psch_v13": 61, "3fhl": [61, 72, 82, 121, 123, 127, 269, 378, 416, 417, 429, 435, 443, 445, 455, 460, 461, 462, 463, 468, 478, 487, 489], "232": 61, "18a": 61, "sourcecatalogobject3fhl": 61, "third": [61, 62, 83, 86, 359, 409, 455, 457, 460, 472, 478, 487], "3hwc": [62, 73, 409, 420, 455, 487], "sourcecatalogobject3hwc": 62, "65": [62, 382, 397, 399, 440, 456, 468], "veri": [62, 83, 86, 132, 199, 348, 357, 358, 359, 360, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 385, 388, 419, 427, 434, 448, 455, 457, 460, 465, 468, 478, 488, 492, 505, 514, 515, 549, 551, 552, 553], "survei": [62, 65, 120, 212, 365, 368, 378, 394, 426, 467, 472, 473, 482, 487, 492, 551], "php": 62, "gll_psc_v32": 63, "4fgl": [63, 74, 252, 253, 381, 401, 403, 409, 411, 424, 426, 440, 455, 461, 463, 487, 506, 538], "arxiv": [63, 168, 238, 239, 252, 253, 440, 454, 455, 459, 535, 536], "1902": [63, 253, 536], "10045": [63, 253, 536], "2005": [63, 551], "11208": 63, "dr2": [63, 253, 409, 426, 506, 538], "2201": [63, 252, 455, 478, 535], "11184": [63, 252, 535], "dr3": [63, 252, 426, 463, 506, 538], "2307": 63, "12546": 63, "dr4": [63, 424], "14yr_catalog": 63, "sourcecatalogobject4fgl": 63, "open": [64, 83, 86, 359, 361, 363, 369, 372, 375, 377, 378, 382, 383, 384, 387, 389, 390, 392, 394, 395, 416, 432, 440, 460, 467, 469, 470, 476, 487, 551, 552], "cat": [64, 65, 75, 366, 388, 416, 417, 429, 455, 463, 487, 551, 552], "sourcecatalogobjectgammacat": 64, "load": [64, 65, 78, 79, 82, 83, 86, 95, 96, 97, 100, 104, 121, 123, 156, 162, 180, 181, 182, 183, 193, 295, 358, 412, 415, 417, 423, 432, 434, 436, 437, 443, 444, 447, 448, 451, 452, 461, 467, 468, 469, 470, 476, 478, 489, 492], "vela": [64, 397, 429, 452, 478], "junior": [64, 378], "subplot": [64, 65, 182, 183, 185, 191, 194, 195, 427, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 441, 445, 449, 451, 452, 454, 457, 458, 460, 461, 462, 464, 465, 492, 494, 501, 511, 515, 518], "energy_rang": [64, 65, 69, 71, 72, 76, 79, 95, 97, 100, 104, 105, 409, 456, 461, 535, 536], "spectral_model": [64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 104, 105, 109, 111, 116, 125, 127, 131, 159, 210, 218, 230, 232, 247, 257, 269, 373, 376, 380, 381, 382, 386, 406, 428, 429, 431, 433, 434, 435, 439, 440, 441, 442, 443, 444, 447, 449, 450, 451, 452, 455, 456, 457, 462, 463, 465, 468, 477, 478, 490, 499, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "hgps_catalog_v1": 65, "hdu": [65, 78, 79, 81, 82, 83, 84, 89, 97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 295, 344, 359, 368, 397, 412, 414, 417, 420, 421, 443, 458, 460, 467, 469, 470, 488, 489, 492, 494, 495, 496, 498, 505, 547], "hgps_sourc": 65, "hgp": [65, 76, 77, 116, 378, 403, 415, 417, 418, 487], "mpi": 65, "hd": 65, "mpg": 65, "hfm": 65, "sourcecatalogobjecthgp": [65, 77, 398, 455], "let": [65, 263, 358, 361, 363, 367, 372, 375, 390, 393, 417, 418, 419, 429, 432, 433, 434, 435, 439, 440, 441, 442, 443, 445, 451, 452, 455, 456, 457, 460, 461, 463, 465, 468, 476, 478, 552], "download": [65, 89, 96, 119, 361, 366, 374, 375, 378, 385, 387, 389, 390, 392, 394, 398, 399, 401, 402, 409, 418, 419, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552], "curl": [65, 375, 389, 390, 392, 467], "o": [65, 78, 83, 86, 96, 189, 358, 367, 372, 375, 379, 382, 389, 390, 392, 401, 409, 412, 415, 416, 417, 423, 427, 428, 431, 435, 441, 448, 449, 450, 451, 460, 464, 465, 467, 492, 551, 552], "Then": [65, 97, 102, 104, 361, 363, 368, 371, 373, 374, 375, 376, 382, 391, 428, 431, 439, 440, 443, 447, 449, 457, 461, 463, 465, 477], "j1843": 65, "033": [65, 455], "unid": 65, "identifi": [65, 84, 98, 103, 181, 247, 358, 368, 369, 371, 374, 383, 384, 388, 404, 435, 443, 448, 455, 456, 463, 467, 469, 491], "id": [65, 76, 78, 79, 83, 84, 86, 87, 107, 371, 374, 394, 432, 434, 443, 445, 447, 452, 455, 463, 467, 468, 469, 470, 476, 489], "126": [65, 429, 455, 457], "ra": [65, 79, 81, 83, 84, 86, 89, 132, 133, 165, 358, 359, 371, 374, 427, 431, 433, 435, 437, 441, 444, 449, 450, 452, 455, 459, 461, 467, 468, 469, 470, 477, 478, 480, 492, 496, 556], "280": [65, 413, 431, 434, 460], "952": 65, "18h43m48": 65, "dec": [65, 79, 81, 83, 84, 86, 89, 132, 133, 165, 358, 359, 363, 367, 369, 371, 374, 375, 378, 396, 422, 427, 431, 433, 435, 437, 441, 444, 449, 450, 452, 455, 459, 461, 467, 468, 469, 470, 477, 478, 480, 492, 496, 501, 556], "554": 65, "3d33m15": 65, "899": [65, 437], "072": 65, "075": 65, "036": 65, "68": [65, 79, 91, 143, 149, 151, 152, 153, 155, 219, 397, 427, 455, 457, 458, 460, 467, 478, 554], "122": [65, 132, 397, 426, 429, 462, 548], "197": [65, 426, 441, 517], "roi": [65, 374, 455, 470, 551], "gaussian": [65, 66, 76, 77, 112, 122, 139, 140, 144, 150, 152, 155, 183, 195, 219, 220, 221, 222, 223, 277, 278, 369, 377, 381, 386, 402, 406, 426, 429, 441, 443, 447, 448, 451, 455, 457, 458, 463, 465, 467, 478, 496, 498, 506, 517, 538, 548], "hgpsc": [65, 455], "083": [65, 455], "084": [65, 426, 432, 438], "256": [65, 413], "239": [65, 441], "063": 65, "ul": [65, 116, 117, 119, 120, 121, 124, 125, 127, 270, 440, 445, 451, 455], "000": [65, 83, 84, 86, 119, 373, 429, 431, 432, 434, 439, 440, 441, 443, 444, 447, 450, 451, 455, 456, 460, 462, 463, 468, 475, 476, 478, 507], "r70": [65, 455], "376": 65, "rspec": [65, 455], "979": [65, 416, 426, 460, 538], "775": [65, 426, 442, 446, 462], "690": 65, "1742": 65, "livetim": [65, 84, 85, 100, 101, 105, 152, 174, 176, 177, 364, 427, 428, 431, 432, 434, 441, 443, 444, 447, 451, 455, 456, 458, 460, 468, 469, 478, 488, 492], "41": [65, 82, 89, 372, 455, 456, 460, 468, 478], "hour": [65, 89, 361, 374, 388, 427, 455, 459, 460, 492], "threshold": [65, 97, 104, 112, 117, 118, 119, 127, 132, 133, 139, 140, 144, 157, 168, 192, 269, 347, 348, 349, 372, 399, 405, 406, 427, 431, 433, 435, 441, 445, 449, 455, 456, 457, 459, 461, 467, 476, 488, 490], "882": [65, 435], "305": [65, 434], "75": [65, 351, 431, 478], "35": [65, 375, 382, 394, 432, 450, 455, 457, 465, 467], "crab": [65, 79, 104, 105, 125, 135, 229, 263, 269, 366, 370, 378, 397, 403, 415, 417, 431, 432, 433, 440, 441, 449, 455, 456, 457, 461, 465, 468, 469, 470, 476, 477, 478, 490, 501, 505, 551], "267": [65, 133, 434, 435, 441, 462, 467], "018": 65, "93": [65, 434, 435, 460, 467], "004": 65, "larg": [65, 83, 86, 182, 183, 185, 191, 194, 195, 255, 257, 259, 358, 361, 363, 364, 372, 378, 379, 399, 409, 418, 419, 424, 427, 431, 437, 450, 455, 461, 467, 468, 469, 478, 488, 490, 492, 493, 505, 511, 549, 552, 557], "361": [65, 414], "60": [65, 86, 144, 422, 432, 435, 455, 457, 468], "383": [65, 414, 455, 460], "54": [65, 99, 118, 431, 455, 458, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "70": [65, 86, 97, 441, 455, 456, 553], "contamin": [65, 437, 455, 461, 501], "121": [65, 426, 441, 462, 548], "82": [65, 397, 455, 505], "22": [65, 79, 81, 84, 97, 100, 104, 105, 127, 157, 162, 165, 362, 396, 409, 431, 432, 433, 434, 435, 440, 449, 451, 455, 456, 459, 460, 461, 469, 470, 476, 477, 478, 489, 496, 499, 501, 502, 505], "61": [65, 404, 432, 447, 455, 462, 554], "5126": 65, "980": 65, "pl": [65, 76, 116, 121, 127, 159, 230, 237, 238, 239, 381, 429, 445, 455, 456, 463, 478], "ecpl": [65, 76, 214, 215, 216, 269, 381, 415, 429, 455, 463], "best": [65, 69, 71, 72, 74, 76, 96, 117, 119, 120, 121, 124, 125, 132, 269, 271, 272, 351, 358, 361, 368, 371, 376, 384, 390, 392, 429, 431, 432, 433, 436, 439, 442, 452, 455, 457, 465, 476, 490, 492, 494, 518, 524, 527, 528, 532, 554, 555, 556], "043": 65, "196": [65, 427, 462], "13": [65, 96, 99, 118, 119, 133, 285, 362, 363, 367, 372, 377, 386, 402, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 486, 554], "47": [65, 451, 455, 460, 463, 478, 511, 512, 513], "87": [65, 441, 460, 477], "918": 65, "733": [65, 415], "914": 65, "058": 65, "505": [65, 455, 456], "247": [65, 410, 432], "00": [65, 83, 84, 85, 86, 96, 359, 373, 426, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 440, 443, 444, 446, 447, 450, 451, 453, 455, 456, 457, 458, 459, 460, 462, 463, 466, 467, 468, 469, 471, 473, 475, 476, 477, 478, 479, 507, 517, 537, 538, 548, 556], "e_cut": [65, 455], "inf": [65, 222, 386, 465], "e_ref": [65, 119, 382, 427, 431, 432, 449, 455, 476, 478, 490], "e_min": [65, 119, 382, 427, 431, 432, 433, 444, 449, 455, 456, 457, 460, 465, 468, 478, 490], "e_max": [65, 119, 382, 427, 431, 432, 433, 444, 449, 455, 456, 457, 460, 465, 478, 490], "dnde_errn": [65, 117, 119, 455], "dnde_errp": [65, 117, 119, 455], "dnde_ul": [65, 117, 119, 455, 478], "is_ul": [65, 117, 119, 409, 424, 455, 478], "332": [65, 414], "215": [65, 410, 424, 426, 455, 538], "511": [65, 414], "048e": 65, "11": [65, 83, 86, 89, 119, 120, 124, 125, 200, 319, 362, 365, 367, 375, 382, 386, 397, 398, 419, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 459, 461, 462, 465, 466, 468, 476, 477, 478, 501, 503, 554], "890e": 65, "010e": 65, "455e": 65, "787": [65, 162], "212": [65, 410, 426, 431, 455, 538], "383e": 65, "655e": 65, "843e": 65, "739e": 65, "957": 65, "162": [65, 451], "160e": 65, "732e": [65, 455], "002e": 65, "120e": [65, 478], "870": [65, 416], "499": [65, 455], "630e": 65, "001e": 65, "097e": 65, "054e": 65, "115": [65, 479], "573": [65, 431, 478], "648e": 65, "124e": 65, "348e": [65, 455], "344e": 65, "142": [65, 397, 429, 455, 478], "416": [65, 455, 459], "777e": [65, 429, 447], "468e": 65, "116e": 65, "883e": 65, "29": [65, 133, 258, 373, 383, 396, 424, 427, 429, 432, 434, 435, 441, 447, 450, 455, 460, 462, 463, 467, 478], "047": 65, "244": [65, 410, 431], "027": 65, "125": [65, 119, 132, 431, 441, 460, 468, 478, 553], "021": [65, 455], "36": [65, 82, 137, 305, 441, 443, 455, 456, 458, 478], "770": 65, "059": 65, "073": 65, "069": 65, "229": [65, 426, 430, 455], "046": 65, "association_catalog": [65, 455], "association_nam": [65, 455], "0322": 65, "178442": 65, "j1844": 65, "0344": 65, "242835": 65, "g28": 65, "330376": 65, "either": [65, 78, 83, 84, 86, 90, 105, 117, 119, 144, 159, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 224, 287, 317, 347, 359, 361, 363, 365, 372, 374, 377, 380, 384, 390, 409, 423, 432, 439, 445, 451, 456, 457, 463, 465, 476, 488, 490, 492, 503, 505, 549, 552], "sourcecatalogobjecthgpscompon": 65, "gaussian_compon": [65, 455], "large_scale_compon": [65, 455], "sourcecataloglargescalehgp": 65, "table_associ": 65, "table_compon": [65, 455], "table_identif": 65, "identif": [65, 364, 455], "table_large_scale_compon": [65, 455], "row_idx": [65, 83], "components_statu": 65, "independ": [65, 120, 124, 284, 298, 358, 364, 368, 369, 370, 371, 372, 373, 376, 379, 380, 381, 382, 384, 390, 399, 409, 427, 432, 449, 455, 460, 461, 462, 463, 469, 476, 477, 487, 492, 497, 551, 555], "link": [65, 67, 76, 96, 210, 212, 232, 269, 361, 363, 366, 367, 370, 378, 384, 388, 394, 395, 406, 409, 411, 415, 416, 417, 428, 431, 432, 433, 434, 436, 439, 440, 447, 451, 455, 457, 463, 467, 477, 478, 492, 537, 549], "merg": [65, 82, 83, 86, 184, 187, 210, 232, 326, 358, 361, 362, 363, 364, 371, 372, 373, 377, 378, 383, 384, 387, 388, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 415, 416, 417, 418, 419], "subcompon": [65, 76], "skymodel": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 97, 100, 104, 105, 109, 111, 117, 119, 125, 127, 159, 210, 228, 232, 264, 269, 369, 370, 371, 373, 379, 381, 382, 399, 403, 404, 405, 409, 418, 424, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 447, 449, 450, 451, 452, 455, 456, 457, 462, 465, 468, 476, 477, 487, 488, 490, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549], "except": [65, 67, 76, 83, 86, 97, 100, 104, 105, 158, 182, 183, 185, 191, 194, 195, 287, 355, 358, 369, 373, 377, 458, 462, 505], "normalis": [65, 76, 124, 136, 137, 138, 139, 142, 144, 146, 149, 150, 154, 159, 179, 182, 183, 185, 191, 194, 195, 234, 235, 247, 356, 432, 436, 437, 451, 461, 462, 463, 468, 476], "templatespatialmodel": [65, 241, 380, 381, 406, 420, 421, 423, 424, 443, 462, 463, 468, 516], "powerlawnormspectralmodel": [65, 218, 237, 239, 242, 257, 380, 381, 386, 406, 424, 439, 440, 443, 444, 447, 456, 462, 463, 468, 476, 499, 512, 532, 537], "weight": [65, 140, 141, 147, 150, 152, 155, 181, 182, 183, 185, 190, 191, 193, 194, 195, 257, 386, 419, 423, 442, 465, 488, 504], "interp_kwarg": [66, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 212, 255, 256, 259, 260, 358, 458, 468], "vari": [66, 98, 103, 124, 150, 199, 299, 326, 370, 372, 373, 383, 403, 406, 426, 436, 441, 442, 444, 453, 459, 463, 465, 468, 472, 488, 490, 497, 500, 549], "diffus": [66, 182, 183, 185, 191, 194, 195, 264, 358, 374, 377, 418, 419, 439, 443, 455, 460, 462, 463, 467, 549], "along": [66, 96, 117, 119, 123, 134, 136, 137, 138, 139, 142, 143, 144, 146, 149, 150, 151, 153, 154, 182, 183, 185, 191, 193, 194, 195, 276, 277, 278, 298, 299, 309, 319, 320, 367, 368, 382, 420, 423, 436, 445, 455, 456, 458, 459, 462, 463, 489, 504, 505, 521, 551], "stddev": 66, "scaledregulargridinterpol": [66, 212, 404, 419], "peak_bright": 66, "peak": [66, 122, 132, 133, 139, 168, 216, 221, 223, 227, 411, 417, 424, 435, 448, 455, 459, 515], "bright": [66, 121, 247, 262, 437, 449, 450, 461, 463, 486, 501], "longitud": [66, 89, 180, 181, 182, 183, 188, 190, 193, 194, 195, 315, 345, 372, 445, 460, 463, 497, 504, 512], "peak_brightness_error": 66, "peak_latitud": 66, "peak_latitude_error": 66, "width_error": 66, "data_extend": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "data_spectr": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "decoupl": 67, "doesn": [67, 358, 359, 363, 365, 366, 372, 375, 376, 378, 467, 468, 552], "hold": [67, 78, 85, 87, 91, 95, 150, 218, 287, 367, 368, 370, 373, 552, 554], "_row_index": 67, "come": [67, 361, 364, 365, 366, 367, 368, 372, 373, 374, 375, 377, 378, 383, 385, 387, 388, 405, 406, 409, 418, 419, 423, 431, 439, 447, 463, 467, 476, 552], "catalof": 67, "2pc": 67, "3pc": 67, "integ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 86, 87, 88, 95, 97, 100, 104, 105, 117, 119, 120, 121, 124, 127, 132, 133, 140, 141, 147, 152, 155, 158, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 201, 203, 210, 232, 287, 305, 311, 358, 364, 372, 437, 504], "sourcecatalogobject": [68, 75, 76, 77, 455, 487], "sky_model": [68, 69, 70, 71, 72, 73, 74, 75, 76, 109, 111, 373, 449, 450, 455, 462, 463, 477, 520], "spatial_model": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 109, 111, 127, 211, 218, 247, 257, 269, 373, 403, 435, 439, 441, 442, 443, 444, 447, 449, 450, 455, 456, 462, 463, 468, 477, 508, 509, 510, 511, 512, 513, 514, 515, 516], "spatialmodel": [68, 69, 70, 71, 72, 73, 74, 75, 76, 206, 207, 211, 218, 219, 222, 234, 236, 244, 245, 247, 255, 257, 259, 369, 381, 403, 418, 422, 455, 463, 477, 480, 487, 506, 549], "powerlawspectralmodel": [68, 70, 73, 76, 96, 104, 105, 109, 111, 119, 125, 127, 201, 203, 237, 238, 242, 263, 381, 382, 386, 428, 429, 432, 434, 435, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 462, 463, 465, 467, 468, 476, 477, 478, 490, 508, 509, 510, 511, 513, 514, 515, 516, 518, 520, 529, 530, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547], "sourcecatalogobjectfermibas": [69, 71, 72, 74], "asso": [69, 71, 72, 74], "assoc": 69, "3fgl_name": 69, "1fhl_name": 69, "tevcat_nam": 69, "fluxpoint": [69, 71, 72, 74, 75, 76, 96, 117, 118, 120, 121, 124, 128, 129, 130, 134, 370, 373, 382, 385, 409, 416, 417, 423, 424, 427, 429, 440, 445, 448, 449, 455, 456, 478, 487, 488, 490, 492], "flux_points_meta": [69, 71, 72, 74], "n_sigma": [69, 71, 72, 74, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 269, 271, 272, 427, 445, 455, 456, 476, 478, 490], "n_sigma_ul": [69, 71, 72, 74, 116, 117, 118, 119, 120, 121, 124, 125, 127, 445, 449, 455, 456, 476, 478, 490], "sed_type_init": [69, 71, 72, 74, 117, 118, 119], "sqrt_ts_threshold_ul": [69, 71, 72, 74, 116, 117, 118, 119, 121, 127, 445, 449, 455, 456, 476, 478], "flux_points_t": [69, 71, 72, 74, 75, 76], "is_pointlik": [69, 71, 72, 73, 74, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 409], "lightcurv": [69, 71, 72, 74, 113, 119, 124, 128, 129, 130, 134, 191, 192, 224, 275, 276, 278, 367, 369, 374, 377, 379, 382, 390, 401, 403, 404, 405, 409, 415, 416, 417, 418, 420, 421, 423, 424, 426, 449, 450, 453, 472, 487, 492, 547], "comma": [69, 70, 71, 72, 73, 74, 75, 76, 455], "sourcecatalogobjecthwcbas": [70, 73], "n_model": [70, 73], "rough": [70, 374], "residu": [70, 96, 97, 100, 104, 105, 159, 369, 370, 374, 401, 406, 412, 419, 437, 456, 457, 468, 488, 501, 551], "diskspatialmodel": [70, 241, 381, 402, 423, 462, 463, 509], "under": [70, 86, 358, 362, 367, 375, 384, 418, 419, 432, 472, 476, 488, 554, 555], "assumpt": [70, 90, 97, 100, 104, 105, 112, 126, 372, 382, 497, 501, 553], "assoc1": [71, 72, 74, 455, 478], "assoc2": [71, 72, 74, 478], "assoc_tev": [71, 72, 74], "assoc_gam1": [71, 74], "assoc_gam2": [71, 74], "assoc_gam3": [71, 74], "100000": [71, 455, 476], "mev": [71, 79, 136, 137, 138, 142, 427, 434, 436, 439, 441, 447, 451, 452, 455, 458, 460, 463, 467, 468, 478, 537], "sai": [71, 363, 377, 552], "300": [71, 83, 86, 434, 436, 440, 443, 444, 447, 451, 455, 468], "quot": [71, 263, 358, 359, 454], "consist": [71, 86, 90, 117, 119, 140, 141, 152, 155, 182, 183, 185, 194, 195, 219, 222, 358, 368, 369, 371, 372, 373, 378, 385, 402, 403, 404, 405, 406, 413, 417, 418, 420, 422, 423, 424, 432, 433, 434, 435, 442, 447, 451, 457, 459, 460, 463, 465, 476, 526, 528, 553], "previou": [71, 83, 86, 358, 361, 372, 378, 379, 383, 387, 400, 406, 424, 433, 442, 443, 460, 463, 464, 465, 478, 487], "assoc_gam": 72, "assoc_fgl": 74, "assoc_fhl": 74, "month": [74, 361, 367, 372, 375, 377, 378, 383, 387, 391, 397, 398, 399, 400, 401, 410, 413, 414, 415, 416, 417, 418, 419], "catalogu": [74, 409, 416], "components_model": 76, "spec": [76, 105, 358, 372, 414, 439, 444, 455, 467, 477], "gaussianspatialmodel": [76, 77, 109, 111, 241, 381, 402, 441, 442, 447, 463, 510], "shellspatialmodel": [76, 241, 244, 381, 409, 463, 514], "hdu_tabl": [78, 469], "obs_tabl": [78, 86, 91, 285, 286, 411, 441, 443, 450, 459, 464, 467, 469, 470, 474, 477, 501], "iact": [78, 79, 81, 89, 162, 165, 169, 364, 367, 368, 369, 370, 372, 374, 378, 395, 400, 414, 416, 418, 429, 435, 437, 459, 460, 462, 467, 468, 470, 489, 494, 495, 496, 498, 549, 551], "happen": [78, 361, 363, 365, 366, 372, 376, 388, 432, 462, 472, 476, 477, 488, 492, 554], "storag": [78, 492], "hduindext": [78, 295, 469], "observationt": [78, 371, 372, 420, 464, 469, 477], "data_stor": [78, 91, 162, 285, 286, 374, 394, 433, 441, 443, 450, 452, 459, 464, 467, 469, 470, 474, 477, 489, 499, 501, 502], "from_dir": [78, 85, 91, 162, 285, 286, 394, 428, 431, 433, 441, 450, 452, 459, 464, 467, 470, 474, 477, 489, 492, 499, 501, 502], "base_dir": [78, 83, 295, 467, 469, 470, 480], "asinha": 78, "630": [78, 462, 470, 476], "20136": [78, 286, 470], "47829": [78, 464, 470], "hdu_typ": [78, 83, 467, 469, 470], "event": [78, 79, 81, 82, 83, 84, 85, 88, 98, 99, 103, 116, 126, 141, 152, 155, 156, 163, 171, 182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 317, 358, 359, 362, 364, 368, 370, 372, 373, 374, 385, 390, 394, 401, 402, 403, 405, 409, 410, 411, 416, 417, 418, 419, 420, 423, 424, 426, 428, 431, 432, 433, 437, 439, 440, 446, 451, 459, 469, 472, 474, 476, 477, 488, 492, 500, 501, 502, 550, 551, 554], "gti": [78, 79, 83, 84, 85, 95, 96, 97, 100, 104, 105, 117, 119, 121, 124, 156, 192, 247, 364, 367, 368, 371, 372, 373, 382, 401, 403, 404, 406, 419, 423, 424, 443, 450, 451, 456, 459, 467, 469, 470, 488, 492, 551], "hdu_class": [78, 83, 295, 467, 469, 470], "aeff_2d": [78, 83, 142, 467, 470], "bkg_3d": [78, 83, 137, 467, 470], "edisp_2d": [78, 83, 144, 467, 470], "psf_tabl": [78, 83, 149, 458, 470], "105": [78, 431, 432, 470], "cta": [78, 79, 85, 97, 100, 104, 105, 109, 111, 112, 116, 132, 133, 137, 141, 142, 143, 152, 162, 212, 262, 346, 351, 353, 358, 362, 365, 366, 367, 371, 374, 377, 378, 387, 390, 395, 398, 399, 409, 415, 416, 417, 418, 426, 427, 432, 434, 436, 439, 441, 443, 444, 447, 451, 452, 456, 458, 462, 464, 469, 470, 471, 472, 476, 480, 489, 490, 492, 494, 497, 550, 551, 556], "tutori": [78, 94, 114, 124, 126, 167, 358, 361, 362, 367, 370, 371, 372, 373, 374, 375, 376, 379, 388, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 492, 493, 495, 504, 549, 552], "default_hdu_t": 78, "default_obs_t": 78, "sort": [78, 79, 83, 86, 96, 132, 327, 358, 375, 400, 478], "copy_ob": [78, 492], "subset": [78, 79, 83, 86, 120, 124, 233, 385, 413, 414, 441, 452, 462, 467, 469, 491, 550], "valid_hdu_class": [78, 83], "hdu_table_filenam": 78, "obs_table_filenam": 78, "absolut": [78, 86, 101, 136, 137, 138, 139, 142, 144, 146, 149, 154, 182, 183, 185, 187, 191, 194, 195, 291, 317, 335, 339, 490], "from_events_fil": [78, 443, 467], "events_path": [78, 443], "irfs_path": 78, "header": [78, 79, 80, 81, 82, 83, 84, 86, 89, 95, 96, 97, 99, 100, 101, 102, 104, 105, 117, 118, 119, 139, 140, 141, 147, 152, 155, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 259, 297, 340, 341, 344, 363, 368, 371, 385, 403, 411, 413, 418, 420, 423, 433, 443, 444, 460, 467, 556], "caldb": [78, 137, 139, 141, 142, 143, 152, 187, 411, 427, 434, 443, 444, 447, 451, 458, 467], "telescop": [78, 79, 81, 86, 90, 99, 142, 371, 372, 385, 390, 394, 395, 443, 449, 452, 464, 467, 468, 470], "1dc": [78, 79, 85, 97, 100, 104, 105, 109, 111, 112, 116, 132, 133, 137, 141, 142, 143, 152, 346, 351, 353, 366, 368, 374, 378, 399, 427, 434, 436, 439, 441, 447, 451, 452, 456, 458, 462, 490], "south_z20_50h": [78, 137, 141, 142, 143, 152, 427, 434, 447, 451, 458, 467], "ctobssim": [78, 371], "baselin": [78, 79, 225, 467], "gp": [78, 79, 85, 359, 368, 374, 436, 439, 441, 452, 467, 469], "gps_baseline_110380": [78, 79, 467], "analys": [78, 357, 358, 367, 368, 369, 370, 372, 376, 378, 380, 381, 386, 394, 395, 401, 402, 403, 405, 406, 416, 418, 421, 431, 432, 439, 450, 451, 454, 455, 461, 463, 467, 468, 476, 477, 480, 488, 552], "glob": [78, 359, 456], "pathlib": [78, 79, 82, 83, 86, 139, 191, 210, 232, 324, 431, 432, 439, 440, 443, 444, 467, 476, 477], "rglob": [78, 443, 467], "lot": [78, 358, 361, 363, 364, 365, 366, 369, 371, 372, 374, 378, 388, 398, 400, 401, 409, 417, 418, 432, 441, 468, 476, 477, 502], "flexibl": [78, 311, 358, 363, 367, 368, 369, 372, 374, 378, 379, 385, 460, 492, 549], "few": [78, 79, 83, 84, 86, 357, 358, 359, 361, 363, 364, 365, 366, 368, 370, 372, 376, 378, 383, 387, 388, 394, 408, 419, 421, 424, 428, 432, 437, 439, 441, 455, 457, 460, 467, 476, 477, 501, 505, 557], "prepar": [78, 162, 368, 369, 387, 432, 440, 457, 459, 463, 468, 476, 500, 549], "disk": [78, 105, 141, 144, 183, 193, 195, 211, 222, 224, 336, 357, 358, 368, 369, 370, 374, 381, 382, 426, 427, 431, 439, 440, 460, 461, 462, 463, 503, 506, 511, 515, 517], "from_fil": [78, 489], "hdu_hdu": 78, "hdu_index": 78, "hdu_ob": 78, "obs_index": 78, "skip_miss": [78, 417], "full": [78, 120, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 183, 210, 232, 295, 354, 357, 358, 363, 367, 368, 371, 373, 374, 378, 384, 386, 389, 396, 399, 409, 411, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 492, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550], "enclosur": [78, 146, 433, 458], "require_ev": 78, "skip": [78, 150, 346, 359, 361, 370, 372, 378, 416, 462], "miss": [78, 83, 86, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 358, 361, 366, 367, 368, 369, 372, 378, 379, 382, 407, 409, 411, 417, 422, 460], "good": [78, 79, 82, 96, 119, 281, 284, 358, 363, 365, 366, 367, 368, 369, 372, 374, 375, 376, 378, 431, 433, 434, 437, 447, 448, 450, 451, 454, 456, 457, 459, 461, 463, 468, 469, 472, 514, 515, 551, 556], "area": [78, 84, 100, 102, 141, 142, 157, 168, 169, 176, 183, 191, 193, 195, 358, 359, 369, 413, 415, 427, 431, 443, 452, 459, 469, 470, 497, 504, 505, 551], "dispers": [78, 84, 97, 98, 100, 102, 103, 104, 105, 106, 108, 110, 139, 140, 141, 144, 162, 168, 169, 172, 173, 176, 358, 364, 369, 370, 371, 403, 405, 415, 416, 417, 419, 427, 428, 431, 432, 439, 443, 459, 469, 470, 476, 477, 488, 497, 500, 551], "spread": [78, 84, 143, 152, 155, 358, 380, 406, 427, 435, 458, 497, 551], "rad_max": [78, 79, 83, 84, 148, 154, 171, 411, 420, 422, 423, 433], "altern": [78, 269, 357, 358, 361, 363, 367, 391, 409, 431, 433, 435, 442, 455, 457, 458, 460, 462, 467, 488, 489, 552], "shortcut": [78, 394, 411], "emit": [78, 200, 201, 202, 203, 344, 358, 399, 417, 497], "among": [78, 83, 86, 97, 100, 104, 105, 374, 378, 379, 381, 386, 406, 457, 551], "member": [79, 359, 363, 372, 384, 385, 417, 423, 467, 470], "reconstruct": [79, 97, 98, 100, 103, 104, 105, 107, 108, 116, 126, 127, 131, 139, 140, 141, 144, 154, 155, 168, 175, 358, 364, 369, 371, 406, 421, 427, 428, 431, 434, 436, 437, 439, 443, 447, 451, 456, 459, 461, 465, 469, 488, 490, 496, 497, 498, 505, 551], "mission": [79, 423, 551], "elaps": [79, 367, 551], "icr": [79, 81, 84, 86, 89, 90, 91, 97, 100, 104, 105, 132, 152, 162, 165, 181, 182, 183, 185, 188, 190, 193, 194, 195, 206, 207, 211, 219, 222, 236, 244, 245, 285, 286, 321, 358, 359, 382, 402, 431, 432, 433, 434, 435, 437, 440, 441, 443, 444, 447, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 476, 477, 489, 492, 496, 501, 505, 509, 510, 511, 513, 514, 515], "detx": [79, 98, 103, 371, 467], "deti": [79, 98, 103, 371, 467], "view": [79, 83, 86, 136, 137, 138, 139, 142, 143, 144, 145, 146, 149, 151, 153, 154, 159, 182, 183, 185, 189, 191, 194, 195, 218, 289, 293, 345, 358, 372, 399, 404, 409, 411, 418, 419, 431, 433, 437, 439, 443, 456, 458, 459, 461, 467, 468, 492, 494, 495, 496, 497, 498, 499, 501, 551], "shouldn": [79, 358, 361], "radec": [79, 89, 136, 137, 138, 139, 142, 143, 144, 145, 146, 149, 151, 153, 154, 358, 359, 458, 460, 478], "eventlistmetadata": [79, 385], "110380": [79, 374, 436, 439, 441, 467], "106217": 79, "59": [79, 437, 447, 449, 455, 459, 470, 478, 545, 546, 547], "273": [79, 413, 429, 435, 478], "59235": [79, 467], "52074074074": 79, "00e": [79, 427, 432, 443, 447, 451, 452, 456, 458, 459, 468, 476], "46e": [79, 436, 441], "median": [79, 152, 155, 394, 452, 464, 468], "02e": 79, "offset": [79, 91, 107, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 158, 162, 168, 169, 174, 177, 182, 183, 185, 187, 191, 194, 195, 358, 364, 372, 394, 403, 413, 415, 417, 422, 423, 424, 427, 433, 434, 436, 439, 440, 441, 447, 452, 458, 459, 464, 467, 470, 477, 489, 497, 499, 502], "altaz": [79, 81, 89, 145, 358, 458, 556], "alt": [79, 81, 84, 89, 90, 358, 556], "az": [79, 81, 84, 89, 90, 358, 556], "altaz_fram": [79, 89], "altaz_from_t": [79, 89], "alwai": [79, 83, 86, 139, 187, 190, 197, 200, 202, 218, 358, 359, 361, 364, 365, 366, 368, 369, 370, 372, 375, 383, 384, 391, 398, 405, 420, 421, 423, 434, 435, 439, 447, 454, 457, 459, 460, 462, 464, 465, 472, 490, 504, 505], "galactic_median": 79, "is_pointed_observ": 79, "observation_dead_time_fract": [79, 84], "dead": [79, 82, 84, 317, 368], "detector": [79, 84, 98, 103, 144, 461, 469, 497, 551], "didn": [79, 84, 365, 368, 372, 375, 480], "record": [79, 84, 358, 363, 364, 384], "dead_tim": [79, 84, 317], "2004aph": [79, 84], "285f": [79, 84], "live": [79, 82, 84, 358, 363, 366, 368, 379, 419, 422], "turn": [79, 84, 359, 361, 372, 467, 549], "observation_live_time_dur": [79, 84], "durat": [79, 82, 84, 89, 434, 443, 447, 450, 467, 489, 492], "t_live": [79, 84], "t_observ": [79, 84], "f_dead": [79, 84], "observation_time_dur": [79, 84], "wall": [79, 84], "observation_time_start": 79, "observation_time_stop": 79, "observatory_earth_loc": [79, 84], "earthloc": [79, 81, 84, 89, 92, 297, 385], "offset_from_median": 79, "pointing_radec": [79, 86, 423, 467], "bit": [79, 132, 359, 361, 365, 366, 372, 376, 377, 385, 452, 460, 505], "With": [79, 358, 367, 368, 384, 405, 418, 465, 488, 554], "32": [79, 132, 181, 426, 435, 437, 439, 450, 451, 453, 456, 459, 460, 478], "incorrect": [79, 358, 385, 393, 402, 420, 421, 459, 465], "time_ref": [79, 81, 82, 86, 89], "from_stack": [79, 82, 87, 117, 119, 182, 183, 184, 185, 187, 191, 194, 195, 198, 201, 203, 423, 424, 489], "event_list": [79, 358, 359, 371], "concaten": [79, 82, 87, 184, 187, 370, 374, 380, 423, 460], "vstack": [79, 82, 371], "map_coord": [79, 141, 152, 155], "mapcoord": [79, 141, 152, 155, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 234, 417, 418, 460, 505, 512], "peek": [79, 84, 97, 100, 104, 105, 122, 123, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 358, 370, 394, 406, 412, 416, 420, 428, 433, 439, 443, 444, 452, 456, 458, 467, 469, 470, 489, 492, 494, 495, 496, 498], "allski": [79, 460], "quick": [79, 84, 97, 100, 104, 105, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 358, 361, 378, 388, 435, 436, 439, 441, 443, 451, 456, 458, 462, 467, 469, 470, 472, 478, 480, 489], "plot_energi": [79, 444], "hist": [79, 104, 105, 191, 195, 351, 434, 465], "plot_energy_offset": 79, "histogram": [79, 104, 105, 187, 191, 195, 351, 423, 452, 505, 551], "pcolormesh": [79, 119, 136, 137, 139, 142, 143, 144, 149, 151, 153, 154, 416, 422, 457, 458], "plot_imag": 79, "plot_offset2_distribut": 79, "max_percentil": 79, "98": [79, 326, 433, 434, 435, 439, 449, 451, 458, 476], "offset2": 79, "quicklook": 79, "As": [79, 287, 317, 358, 359, 361, 366, 370, 371, 372, 374, 376, 384, 385, 387, 394, 399, 418, 427, 428, 431, 432, 433, 435, 436, 437, 441, 443, 444, 448, 449, 450, 451, 454, 455, 456, 457, 459, 460, 463, 465, 468, 470, 476, 478, 492, 501, 554], "percentil": 79, "np": [79, 83, 86, 106, 110, 112, 119, 141, 182, 183, 185, 191, 194, 195, 262, 358, 359, 369, 370, 373, 381, 382, 386, 420, 427, 431, 434, 435, 437, 439, 441, 443, 445, 447, 448, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 469, 484, 485, 486, 490, 492, 504, 505, 509, 510, 512, 537, 545], "r68": [79, 107, 143, 152, 155], "hess_dl3_dr1_obs_id_023523": [79, 82, 489], "wrt": [79, 152, 155, 358, 376, 451, 547], "signal": [79, 97, 100, 103, 104, 105, 167, 195, 246, 271, 272, 284, 382, 427, 431, 432, 437, 440, 449, 461, 476, 480, 495, 499, 501, 551, 553, 554, 555], "63307": 79, "01449": 79, "bin": [79, 82, 84, 97, 100, 103, 104, 105, 107, 112, 114, 116, 117, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 134, 135, 139, 140, 142, 144, 150, 152, 154, 155, 162, 165, 166, 168, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 207, 209, 210, 211, 217, 219, 221, 222, 223, 224, 225, 232, 234, 236, 240, 244, 245, 246, 247, 249, 255, 257, 258, 259, 261, 265, 273, 279, 284, 351, 353, 356, 364, 369, 370, 371, 372, 374, 377, 378, 382, 389, 390, 400, 401, 403, 404, 406, 408, 409, 411, 414, 415, 416, 417, 418, 423, 424, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 488, 490, 492, 496, 500, 550, 551, 552, 553, 555], "linspac": [79, 141, 182, 183, 185, 191, 194, 195, 443, 445, 452, 457, 458, 460, 465, 504, 509], "num": 79, "control": [79, 83, 86, 97, 100, 104, 105, 358, 371, 389, 391, 427, 454, 460, 465, 492, 554], "plot_tim": 79, "errorbar": [79, 96, 97, 100, 104, 105, 187, 191, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 427, 465], "checksum": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 139, 140, 141, 147, 152, 155, 182, 183, 185, 189, 191, 194, 195, 210, 232, 325, 327, 424, 440, 468], "datasum": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 139, 140, 141, 147, 152, 155, 182, 183, 185, 189, 191, 194, 195], "card": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 117, 119, 139, 140, 141, 147, 152, 155, 182, 183, 185, 189, 191, 194, 195, 460], "select_energi": [79, 489], "fermi_3fhl": [79, 182, 183, 185, 191, 194, 195, 462, 468, 478], "fermi_3fhl_events_select": [79, 468], "select_mask": [79, 210, 232, 409, 462], "mask": [79, 83, 86, 94, 96, 97, 100, 104, 105, 116, 120, 121, 123, 124, 125, 127, 140, 141, 147, 152, 155, 157, 159, 164, 165, 166, 167, 168, 170, 180, 181, 182, 183, 185, 188, 190, 191, 193, 194, 195, 201, 203, 210, 232, 247, 370, 386, 403, 405, 406, 407, 409, 412, 418, 420, 421, 422, 423, 426, 427, 428, 439, 441, 459, 462, 466, 469, 472, 488, 499, 501, 504, 551], "region_mask": [79, 181, 193, 372, 431, 437, 441, 456, 459, 461, 477, 499, 501, 502], "circl": [79, 170, 355, 359, 372, 411, 431, 441, 451, 454, 459, 461, 464, 467, 477, 478, 489, 499, 501, 502, 505], "masked_ev": 79, "len": [79, 269, 355, 435, 442, 443, 444, 448, 450, 452, 455, 457, 459, 462, 478, 492], "5594": 79, "select_offset": [79, 443, 470, 489], "offset_band": 79, "offset_min": 79, "selected_ev": 79, "12688": 79, "select_paramet": [79, 85, 452, 489], "zd": 79, "zenith_angl": [79, 385, 468, 478], "123944": 79, "select_rad_max": 79, "radmax2d": [79, 84, 148, 171, 409, 433], "definit": [79, 80, 82, 84, 95, 97, 99, 100, 104, 105, 118, 159, 190, 284, 298, 358, 367, 368, 372, 379, 380, 381, 382, 385, 401, 405, 406, 422, 424, 433, 436, 445, 450, 458, 459, 476, 488, 490, 497, 498, 503, 505, 509, 510, 554], "select_region": [79, 85, 210, 232, 372, 401, 409, 443, 444, 452, 462, 478, 489], "ds9": [79, 181, 190, 193, 197, 210, 232, 358, 359, 372, 401, 461, 463, 505], "si": [79, 181, 190, 193, 210, 232, 262, 505], "ref": [79, 89, 97, 104, 116, 121, 127, 181, 190, 193, 210, 232, 382, 441, 445, 455, 456, 458, 460, 468, 478, 505, 540, 541, 542, 543, 544, 545, 551, 552], "world": [79, 193, 210, 232, 358, 364, 441, 478, 504], "select_row_subset": 79, "row_specifi": [79, 83, 86], "slice": [79, 83, 86, 95, 97, 100, 104, 105, 114, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 199, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 257, 259, 280, 364, 406, 442, 445, 456, 467, 504], "mc_id": [79, 368, 371, 411, 443, 467], "events2": 79, "97978": 79, "idx": [79, 83, 86, 87, 95, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 232, 434, 443, 451, 455, 457, 460, 504], "select_tim": [79, 82, 84, 87, 95, 368, 382, 403, 444, 450, 489], "inclus": [79, 190, 372], "place": [79, 82, 83, 86, 87, 95, 97, 100, 104, 105, 132, 136, 137, 138, 139, 140, 141, 142, 146, 147, 152, 154, 155, 165, 170, 182, 183, 185, 191, 194, 195, 232, 257, 331, 358, 359, 365, 366, 369, 370, 371, 372, 374, 377, 378, 379, 380, 383, 388, 402, 404, 431, 449, 460, 461, 463, 478, 488, 489, 492, 550, 556], "to_table_hdu": [79, 82, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 186, 187, 460], "gadf": [79, 80, 81, 82, 84, 90, 97, 99, 100, 104, 105, 118, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 368, 371, 382, 385, 409, 411, 420, 423, 458, 460, 476, 488, 492, 505, 551], "bintablehdu": [79, 82, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 186, 187, 193, 194, 195, 443, 460, 488], "support": [79, 81, 82, 83, 84, 85, 86, 87, 90, 95, 97, 100, 104, 105, 119, 134, 145, 150, 181, 182, 183, 184, 185, 192, 193, 194, 195, 199, 210, 232, 357, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 385, 391, 395, 398, 399, 401, 402, 403, 404, 405, 406, 409, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 432, 434, 436, 439, 441, 447, 451, 454, 455, 456, 460, 465, 467, 468, 469, 470, 476, 491, 497, 504, 505, 547, 549, 550, 552], "utilis": [79, 133, 359, 427, 431, 435, 442, 448, 460, 464, 489, 492], "include_irf": [79, 84, 489], "written": [79, 84, 95, 96, 97, 100, 102, 104, 105, 117, 119, 140, 141, 147, 152, 155, 182, 183, 185, 189, 191, 194, 195, 197, 358, 359, 361, 363, 367, 368, 378, 384, 386, 421, 427, 444, 462, 465, 480, 488, 489, 492, 505, 551, 556], "event_class": [80, 468, 478], "creatormetadata": [80, 99, 118, 385], "eventlist": [80, 84, 98, 103, 171, 182, 183, 185, 191, 194, 195, 358, 359, 364, 371, 372, 373, 385, 394, 399, 406, 411, 413, 414, 415, 417, 418, 443, 444, 452, 460, 467, 468, 478, 492, 501], "union": [80, 82, 85, 97, 99, 100, 118, 190, 322, 372, 373, 384, 385, 401, 488], "nonetyp": [80, 99, 118], "from_head": [80, 99, 118, 181, 193, 385], "convers": [80, 83, 86, 99, 117, 118, 119, 363, 382, 385, 390, 392, 409, 422, 423, 424, 427, 505], "metadata_fits_export_kei": [80, 99, 118], "to_head": [80, 99, 118, 181, 184, 186, 187, 192, 193, 385], "export": [80, 83, 86, 97, 99, 100, 117, 118, 119, 361, 382, 385, 390, 392, 403, 413, 420, 421, 424, 432, 463, 469, 470, 476], "content": [80, 99, 118, 119, 182, 183, 185, 191, 194, 195, 325, 358, 361, 363, 367, 373, 378, 385, 388, 403, 412, 417, 428, 460, 461, 467, 469, 489, 492, 503, 504], "fixed_icr": [81, 152, 427, 434, 443, 444, 447, 451], "fixed_altaz": 81, "time_start": [81, 82, 86, 373], "time_stop": [81, 82, 86, 373], "legacy_altaz": 81, "from_fits_head": 81, "pointingmod": 81, "drift": [81, 89, 90, 420], "633": [81, 97, 100, 104, 105, 162, 432, 440, 459, 476, 477, 501], "014": [81, 97, 100, 104, 105, 162, 432, 455, 459, 476, 477, 501], "pointing_info": [81, 89, 427], "get_altaz": [81, 89, 423], "obstim": [81, 89, 175, 556], "track": [81, 89, 358, 367, 373, 384, 411, 462], "horizont": [81, 90, 145, 328, 458, 556], "get_icr": [81, 89, 423], "obtain": [81, 97, 100, 103, 128, 276, 368, 373, 375, 376, 382, 419, 431, 432, 433, 437, 443, 444, 448, 450, 457, 460, 461, 465, 476, 478, 488, 492, 496, 497, 551, 553, 554], "pointinginfo": [81, 415], "to_fits_head": 81, "request": [81, 117, 119, 359, 362, 363, 365, 366, 367, 368, 369, 370, 372, 378, 382, 383, 384, 386, 388, 396, 443, 461, 480, 490], "reference_tim": [82, 84, 97, 100, 104, 105, 192, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 422, 423, 444, 448, 451, 459, 460, 547], "deal": [82, 358, 364, 373, 374, 434, 443, 450, 472, 492], "time_ref_default": 82, "1687": 82, "0000000000016": 82, "123890826": 82, "00000001": 82, "met": [82, 339, 423, 450, 551], "2004": [82, 89, 448, 470], "04t22": 82, "08": [82, 353, 394, 426, 433, 434, 436, 437, 439, 440, 447, 455, 456, 457, 459, 466, 468, 476, 477, 518], "184": [82, 89, 411, 415, 435, 443, 450, 451, 461, 462], "tt": [82, 89, 340, 341, 384, 444, 450, 556], "123892513": 82, "gc": [82, 97, 100, 104, 105, 109, 111, 112, 116, 121, 123, 127, 132, 133, 346, 351, 353, 361, 435, 436, 439, 441, 443, 445, 454, 456, 460, 462, 463, 467, 468, 478, 480, 489, 490], "39042": 82, "183139597": 82, "9032163": 82, "239557417": 82, "49417615": 82, "04t15": 82, "678": [82, 442], "460249999": 82, "99999994": 82, "02t23": 82, "met_start": 82, "met_stop": 82, "time_delta": [82, 192, 339, 342], "time_sum": [82, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261], "git": [82, 247, 358, 359, 361, 363, 365, 366, 384, 391, 420], "delete_interv": 82, "crop": [82, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195], "bad": [82, 358, 372], "from_table_hdu": [82, 186, 187], "table_hdu": 82, "from_time_interv": 82, "group_tabl": [82, 187, 192], "atol": [82, 95, 124, 187, 192, 333, 335, 358], "group": [82, 83, 86, 87, 120, 121, 124, 125, 127, 140, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 285, 364, 373, 377, 378, 379, 382, 387, 390, 400, 403, 405, 409, 415, 418, 449, 451, 472, 490, 492, 506, 552], "belong": [82, 382, 405], "t_start": [82, 489], "mjd": [82, 89, 119, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 340, 342, 359, 422, 423, 435, 443, 444, 448, 449, 450, 451, 460, 463, 489, 540, 541, 542, 543, 544, 545, 546, 547, 556], "utc": [82, 84, 99, 118, 339, 443, 449, 450, 460, 463, 539, 540, 541, 542, 543, 544, 545, 546, 547, 556], "lc": [82, 124, 192, 371, 373], "toler": [82, 95, 124, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 335, 457], "comparison": [82, 83, 86, 95, 124, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 187, 190, 191, 193, 194, 195, 317, 414, 482], "overlap_ok": 82, "merge_equ": 82, "overlap": [82, 86, 109, 111, 124, 170, 187, 192, 355, 373, 431], "touch": [82, 398], "writeto": [82, 136, 137, 138, 142, 143, 144, 146, 149, 151, 153, 154, 443], "copy_indic": [83, 86], "columnclass": [83, 86], "psf_3gauss": [83, 143, 467, 498], "psf_king": [83, 151, 498], "bkg_2d": [83, 136], "rad_max_2d": [83, 154, 164, 169, 171, 433], "valid_hdu_typ": 83, "colnam": [83, 86, 182, 183, 185, 191, 194, 195, 468, 478], "has_masked_column": [83, 86], "maskedcolumn": [83, 86], "doe": [83, 86, 120, 124, 142, 152, 155, 189, 224, 258, 269, 358, 359, 365, 366, 368, 370, 372, 373, 375, 377, 378, 381, 382, 384, 385, 400, 409, 420, 427, 431, 434, 436, 439, 441, 442, 455, 457, 458, 459, 460, 461, 469, 480, 492, 501, 552], "mixin": [83, 86], "has_masked_valu": [83, 86], "slow": [83, 86, 199, 365, 374, 432, 457, 476, 477], "has_mixin_column": [83, 86], "hdu_class_uniqu": 83, "uniqu": [83, 86, 95, 139, 181, 182, 183, 184, 185, 191, 193, 194, 195, 201, 203, 210, 232, 351, 368, 369, 370, 371, 381, 384, 404, 432, 456, 463, 469, 505, 549], "hdu_type_uniqu": 83, "iloc": [83, 86], "tableiloc": [83, 86], "retriev": [83, 86, 382, 384, 428, 429, 431, 460, 463, 464, 469, 477, 489, 504, 505], "appear": [83, 86, 358, 359, 366, 372, 385, 412, 423, 455], "tableindic": [83, 86], "loc": [83, 86, 195, 351, 452, 485, 486, 494, 518, 524, 527, 528, 532], "tableloc": [83, 86], "loc_indic": [83, 86], "tablelocindic": [83, 86], "obs_id_uniqu": 83, "pprint_exclude_nam": [83, 86], "visibl": [83, 86, 348, 349, 366, 409, 427, 443, 469, 477, 478, 551], "descriptor": [83, 84, 86, 97, 100, 104, 105, 257, 296, 359, 405], "inherit": [83, 86, 358, 368, 370, 373, 382, 385, 386, 404, 409, 416, 456, 458, 503, 504], "metaattribut": [83, 86], "__attributes__": [83, 86], "pprint_include_nam": [83, 86], "unifi": [83, 86, 362, 367, 372, 398, 401, 403, 404, 405, 406, 409, 418, 419, 551], "layer": [83, 86, 370, 377], "easili": [83, 86, 119, 364, 369, 370, 374, 385, 390, 391, 449, 450, 457, 458, 460, 468, 478, 552], "mani": [83, 86, 299, 358, 359, 361, 363, 365, 367, 370, 372, 373, 374, 375, 378, 379, 384, 388, 394, 400, 401, 406, 409, 415, 416, 417, 418, 419, 422, 423, 428, 431, 434, 442, 447, 448, 460, 470, 472, 480, 488, 490, 502, 505, 549, 550, 551, 552, 556], "ascii": [83, 86, 119, 358], "writer": [83, 86, 378, 385], "list_format": [83, 86], "serialize_method": [83, 86], "explain": [83, 86, 358, 361, 363, 372, 375, 377, 378, 384, 388, 390, 392, 403, 409, 427, 431, 433, 454, 457, 461, 463, 492, 550, 552], "suppli": [83, 86, 233, 451], "add_column": [83, 86], "col": [83, 86, 409], "rename_dupl": [83, 86], "default_nam": [83, 86], "insert": [83, 86, 87, 95, 232, 384, 404, 555], "append": [83, 86, 87, 95, 135, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 232, 370, 371, 373, 404, 423, 428, 431, 433, 434, 439, 440, 441, 443, 450, 451, 452, 456, 457, 459, 462, 463, 464, 465, 501], "scalar": [83, 86, 150, 181, 182, 183, 185, 191, 194, 195, 287, 377, 411, 422, 424, 460, 504], "match": [83, 86, 103, 107, 180, 181, 183, 186, 187, 188, 190, 193, 195, 197, 271, 272, 358, 366, 417, 419, 424, 431, 434, 451, 468, 487, 504], "sever": [83, 86, 164, 363, 364, 365, 372, 373, 374, 377, 382, 385, 403, 404, 405, 409, 412, 421, 422, 423, 434, 440, 455, 467, 468, 469, 492, 552, 554], "onc": [83, 86, 97, 193, 358, 361, 363, 368, 369, 372, 373, 374, 378, 379, 380, 382, 383, 387, 388, 389, 433, 450, 452, 459, 462, 469, 472, 489, 492, 552], "There": [83, 86, 132, 358, 359, 363, 364, 365, 367, 372, 373, 374, 375, 376, 377, 378, 379, 382, 385, 388, 390, 391, 417, 441, 445, 448, 454, 455, 456, 457, 458, 459, 461, 462, 469, 480, 488, 489, 492, 505], "littl": [83, 86, 377, 379, 385, 460, 468, 497, 501, 552], "approach": [83, 86, 127, 358, 364, 366, 370, 374, 379, 382, 383, 385, 423, 427, 431, 459, 472, 551, 554], "uniquifi": [83, 86], "number_of_column": [83, 86], "col_c": [83, 86], "b_1": [83, 86], "unnam": [83, 86, 188], "explicit": [83, 86, 181, 183, 358, 374, 376, 382, 504, 556], "col2": [83, 86], "perspect": [83, 86], "loop": [83, 86, 308, 371, 423, 431, 455, 460, 469, 476, 492], "duplic": [83, 86, 95, 140, 358, 359, 361, 364, 378, 379, 382, 406, 409], "ones": [83, 86, 112, 116, 120, 124, 127, 139, 362, 366, 370, 372, 375, 378, 386, 391, 394, 448, 451, 458, 460, 480, 499, 551, 552], "hstack": [83, 86, 371], "replace_column": [83, 86], "col_d": [83, 86], "col_b": [83, 86], "col0": [83, 86], "add_index": [83, 86], "engin": [83, 86], "sortedarrai": [83, 86], "bst": [83, 86], "scengin": [83, 86], "add_row": [83, 86], "val": [83, 86, 182, 183, 185, 191, 194, 195, 201, 203, 460, 504], "sequenc": [83, 86, 87, 95, 97, 104, 136, 137, 138, 139, 141, 142, 143, 144, 146, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 201, 210, 232, 287, 388], "own": [83, 86, 94, 117, 119, 189, 191, 361, 364, 374, 380, 384, 409, 427, 443, 463, 468, 492, 504, 505], "underli": [83, 86, 190, 371, 429, 455, 460, 465, 478, 480, 489, 492, 501, 504], "particular": [83, 86, 358, 364, 371, 373, 380, 382, 383, 385, 406, 409, 420, 421, 428, 431, 432, 433, 434, 436, 440, 443, 448, 450, 451, 457, 459, 462, 467, 469, 470, 476, 477, 489, 492, 499, 501, 505, 554], "iter": [83, 86, 87, 95, 117, 119, 182, 183, 185, 186, 187, 189, 191, 192, 194, 195, 232, 361, 364, 366, 374, 410, 435, 451], "three": [83, 86, 150, 358, 367, 370, 372, 384, 441, 443, 448, 449, 460, 465, 472, 497, 504, 551], "argsort": [83, 86], "kind": [83, 86, 260, 333, 369, 370, 371, 376, 377, 381, 384, 418], "quicksort": [83, 86], "mergesort": [83, 86], "heapsort": [83, 86], "index_arrai": [83, 86], "as_arrai": [83, 86], "keep_byteord": [83, 86], "structur": [83, 86, 193, 362, 363, 364, 367, 369, 371, 374, 378, 381, 384, 385, 396, 402, 403, 405, 409, 412, 424, 426, 445, 456, 459, 460, 461, 463, 472, 479, 480, 487, 489, 493, 504, 505, 552], "ma": [83, 86, 112, 116, 427, 435, 437, 551, 554], "maskedarrai": [83, 86], "nativ": [83, 86, 188, 370, 375, 409, 460], "howev": [83, 86, 116, 277, 357, 358, 359, 361, 365, 368, 371, 372, 376, 384, 386, 391, 428, 437, 445, 452, 454, 455, 456, 457, 465, 469, 470, 472, 488, 492, 504, 505, 510, 526, 552], "preserv": [83, 86, 100, 182, 183, 185, 187, 191, 194, 195, 375, 456, 461], "table_arrai": [83, 86], "unmask": [83, 86], "convert_bytestring_to_unicod": [83, 86], "bytestr": [83, 86], "unicod": [83, 86, 358], "utf": [83, 86], "charact": [83, 86, 358, 462], "uc": [83, 86], "ineffici": [83, 86, 361], "memori": [83, 84, 86, 87, 95, 97, 98, 100, 103, 104, 105, 180, 181, 190, 193, 255, 257, 259, 336, 358, 368, 370, 371, 374, 380, 382, 403, 409, 424, 434, 447, 492, 551], "manipul": [83, 86, 382, 385, 411, 465, 504], "natur": [83, 86, 358, 364, 381, 384, 463, 526], "convert_unicode_to_bytestr": [83, 86], "copy_data": [83, 86, 210, 218, 232, 247, 255, 257, 259], "regardless": [83, 86], "recarrai": [83, 86, 143, 153], "individu": [83, 86, 103, 114, 122, 354, 364, 370, 371, 373, 378, 381, 382, 386, 428, 431, 434, 442, 445, 450, 455, 456, 457, 459, 462, 463, 478, 488, 492, 497, 551], "filled_t": [83, 86], "from_panda": [83, 86], "datafram": [83, 86], "panda": [83, 86, 357, 375, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "date": [83, 86, 99, 118, 339, 375, 383, 384, 385, 387, 395, 417, 432, 435, 463, 470, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 556], "timedelta": [83, 86, 89, 192, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 317, 339, 342, 556], "importerror": [83, 86], "instal": [83, 86, 357, 358, 361, 365, 366, 367, 375, 387, 388, 389, 392, 394, 395, 398, 399, 409, 413, 416, 417, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 492, 552], "qtabl": [83, 86, 373], "pd": [83, 86], "seri": [83, 86, 119, 276, 317, 367, 372, 373, 409, 448], "1998": [83, 86, 398, 551], "2002": [83, 86, 277, 448], "datetime64": [83, 86], "dt": [83, 86], "timedelta64": [83, 86], "df": [83, 86, 114, 442, 457, 554], "option_context": [83, 86], "max_column": [83, 86], "dai": [83, 86, 192, 217, 221, 223, 240, 246, 361, 372, 378, 387, 388, 460, 545, 552], "float64": [83, 86, 106, 110, 139, 142, 358, 386, 458, 460, 490], "01t00": [83, 86, 89, 359, 435, 443, 556], "group_bi": [83, 86, 382], "tablegroup": [83, 86], "homogen": [83, 86, 406], "hdu_loc": 83, "warn_miss": 83, "hduloc": [83, 97], "index_column": [83, 86], "index_mod": [83, 86], "manag": [83, 86, 201, 203, 210, 232, 307, 336, 357, 358, 361, 366, 374, 375, 377, 380, 384, 385, 387, 409, 414, 416, 420, 424, 460, 462, 552], "copy_on_getitem": [83, 86], "discard_on_copi": [83, 86], "whenev": [83, 86], "refresh": [83, 86], "themselv": [83, 86, 374, 459, 461, 499], "intend": [83, 86, 287, 368, 386, 458], "scenario": [83, 86, 363, 370, 380, 390, 460, 463, 481, 553], "i0": [83, 86], "i1": [83, 86], "insert_row": [83, 86], "itercol": [83, 86], "col1": [83, 86], "syntact": [83, 86], "prefer": [83, 86, 333, 358, 363, 365, 369, 377, 378, 384, 389, 390, 394, 445, 451, 460, 461, 465, 472, 552, 554], "iterrow": [83, 86], "especi": [83, 86, 128, 361, 365, 368, 372, 378, 379, 388, 409, 415, 428, 441, 450, 455, 460, 465, 467, 468], "substanti": [83, 86], "faster": [83, 86, 182, 183, 185, 191, 194, 195, 336, 424, 435], "tbl": [83, 86], "slower": [83, 86, 183, 358, 366, 376], "keep_column": [83, 86], "location_info": 83, "max_lin": [83, 86], "max_width": [83, 86], "show_nam": [83, 86], "show_unit": [83, 86], "show_dtyp": [83, 86], "brows": [83, 86, 359, 394, 478], "space": [83, 86, 97, 100, 104, 105, 192, 195, 255, 256, 298, 316, 357, 358, 368, 374, 380, 452, 456, 457, 460, 504, 528, 537], "next": [83, 86, 97, 358, 359, 363, 374, 378, 379, 383, 386, 387, 415, 416, 427, 439, 442, 443, 445, 447, 455, 456, 459, 460, 463, 464, 465, 468], "quit": [83, 86, 358, 386, 443], "pformat": [83, 86], "tableid": [83, 86], "align": [83, 86, 95, 136, 137, 138, 139, 142, 143, 144, 145, 146, 149, 151, 153, 154, 181, 182, 183, 185, 187, 191, 193, 194, 195, 358, 458, 461, 463], "tableclass": [83, 86], "screen": [83, 86, 460, 478], "termin": [83, 86, 96, 374, 389, 390, 391, 392, 393, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477, 552], "conf": [83, 86, 358, 359, 388, 400, 415], "pad": [83, 86, 97, 100, 104, 105, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 162, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 194, 195, 346, 406, 409], "css": [83, 86, 388], "pformat_al": [83, 86], "pprint": [83, 86, 553], "pprint_al": [83, 86], "restrict": [83, 86, 372, 439, 456, 461], "remove_column": [83, 86], "remove_indic": [83, 86], "involv": [83, 86, 97, 100, 104, 105, 358, 363, 372, 374, 376, 380, 435, 552], "remove_row": [83, 86], "oper": [83, 86, 181, 193, 205, 358, 364, 369, 372, 404, 406, 409, 418, 419, 423, 456, 462, 463, 504, 505, 518, 520, 524, 527, 529, 532, 537], "outsid": [83, 86, 97, 104, 109, 111, 139, 159, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 200, 202, 212, 260, 346, 358, 372, 373, 374, 409, 437, 457, 459, 460, 461, 492, 499, 511, 537, 551], "rename_column": [83, 86, 119], "new_nam": [83, 86, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195], "won": [83, 86, 112, 116, 120, 124, 127, 330, 383, 439, 460, 467, 555], "aa": [83, 86, 287, 384], "bb": [83, 86, 384], "behavior": [83, 86, 90, 382, 408, 412, 423, 469], "itself": [83, 86, 357, 358, 373, 384, 428, 449, 450, 452, 465, 552], "float_a": [83, 86], "astyp": [83, 86], "jo": [83, 86], "john": [83, 86], "miller": [83, 86], "jackson": [83, 86], "firstnam": [83, 86], "tel": [83, 86], "round": [83, 86, 182, 183, 185, 187, 191, 194, 195, 431, 504], "decim": [83, 86], "123": [83, 86, 370, 426, 431, 435, 548], "85": [83, 86, 423, 441, 509, 510], "show_in_brows": [83, 86, 441], "jsviewer": [83, 86, 441], "browser": [83, 86, 361, 388, 394, 414, 417, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "jskwarg": [83, 86], "use_local_fil": [83, 86], "table_class": [83, 86], "show_row_index": [83, 86], "web": [83, 86, 366, 384, 387, 388, 394, 395, 409, 417, 455], "low": [83, 86, 139, 187, 310, 358, 359, 362, 367, 387, 415, 417, 426, 428, 431, 435, 441, 443, 456, 461, 462, 467, 468, 472, 476, 479, 488, 489, 490, 499, 500, 504, 549, 553], "prepend": [83, 86], "javascript": [83, 86], "datat": [83, 86], "search": [83, 86, 271, 272, 323, 358, 359, 394, 417, 418, 432, 435, 441, 442, 454, 455, 464, 476, 477, 478, 480, 492, 552], "legal": [83, 86], "firefox": [83, 86], "chrome": [83, 86], "safari": [83, 86], "mac": [83, 86, 358, 365, 388, 416, 552], "googl": [83, 86, 378, 387], "app": [83, 86, 388, 394, 417], "librari": [83, 86, 358, 363, 364, 368, 378, 384, 395, 428, 431, 443, 463, 467, 477, 480, 489, 492, 550, 552], "serv": [83, 86, 358, 363, 370, 374, 382, 388, 411, 454, 496], "style": [83, 86, 96, 182, 183, 185, 191, 194, 195, 355, 361, 367, 384, 413, 415, 439, 447, 458, 460, 476, 477, 492, 505], "default_css": [83, 86], "re": [83, 86, 91, 119, 120, 125, 159, 182, 183, 185, 191, 194, 195, 199, 285, 286, 351, 358, 359, 361, 363, 365, 366, 372, 373, 374, 376, 379, 380, 381, 382, 390, 392, 393, 397, 409, 411, 418, 429, 431, 432, 437, 439, 440, 441, 451, 457, 458, 462, 464, 468, 476, 478, 490, 492, 513, 552], "show_in_notebook": [83, 86], "display_length": [83, 86], "50": [83, 86, 89, 106, 110, 326, 365, 385, 427, 432, 433, 439, 447, 450, 451, 452, 455, 456, 458, 460, 462, 463, 464, 467, 468, 470, 476, 477, 478, 501, 504, 512, 519, 520, 521, 554], "ipython": [83, 86, 357, 358, 374, 375, 389, 393, 401, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 478, 491, 552], "notebook": [83, 86, 323, 361, 362, 367, 368, 372, 373, 374, 375, 376, 378, 388, 390, 391, 392, 395, 398, 399, 400, 401, 403, 404, 405, 407, 409, 411, 415, 416, 417, 418, 419, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 491, 492, 493, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552], "xxx": [83, 86, 363, 384], "conflict": [83, 86, 358, 361, 384], "special": [83, 86, 222, 358, 368, 370, 372, 373, 381, 384, 385, 398, 436, 443, 455, 456, 462, 463], "default_notebook_table_class": [83, 86], "bootstrap": [83, 86], "default_css_nb": [83, 86], "unlik": [83, 86, 269, 365, 376], "onlin": [83, 86, 359, 363, 366, 378, 394], "repositori": [83, 86, 358, 361, 363, 366, 368, 384, 387, 409, 418, 443, 470], "modern": [83, 86, 376], "henc": [83, 86, 374, 436, 437, 490, 505, 554], "while": [83, 86, 100, 182, 183, 185, 187, 191, 194, 195, 358, 361, 363, 364, 365, 367, 370, 371, 373, 377, 379, 380, 382, 383, 384, 387, 388, 390, 427, 431, 433, 436, 444, 451, 452, 456, 458, 459, 460, 462, 463, 488, 490, 492, 503, 505, 552], "offlin": [83, 86], "cach": [83, 84, 86, 95, 97, 100, 104, 105, 257, 295, 296, 367, 368, 370, 377, 380, 388, 402, 406, 409, 424], "jqueri": [83, 86], "rule": [83, 86, 247, 265, 298, 384, 460, 504], "report": [83, 361, 374, 387, 388, 397, 411, 412, 417], "to_panda": [83, 86], "use_nullable_int": [83, 86], "vanilla": [83, 86], "analog": [83, 86, 182, 183, 185, 191, 194, 195, 505], "nullabl": [83, 86], "multi": [83, 86, 181, 193, 367, 372, 386, 403, 406, 410, 417, 426, 429, 435, 446, 456, 457, 458, 463, 464, 468, 472, 488, 490, 492, 504, 549, 550, 551], "tm": [83, 86], "jyear": [83, 86], "sc": [83, 86], "someth": [83, 86, 358, 359, 360, 361, 363, 366, 372, 375, 376, 378, 388, 390, 392, 434, 455, 505, 552], "possibli": [83, 86, 117, 364, 368, 369, 371, 372, 376, 377, 378, 379, 385, 387, 409, 499], "t1": [83, 86], "foo": [83, 86], "t2": [83, 86], "str3": [83, 86], "values_equ": [83, 86], "compar": [83, 86, 120, 121, 124, 125, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195, 199, 269, 358, 372, 375, 378, 406, 422, 423, 427, 428, 431, 435, 439, 442, 445, 447, 450, 455, 457, 459, 465, 468, 476, 487, 551, 553], "obs_info": [84, 99, 385], "obs_filt": [84, 85], "effectiveareatable2d": [84, 141, 148, 154, 176, 364, 413, 458, 467, 494], "energydispersion2d": [84, 139, 141, 148, 154, 172, 173, 359, 364, 409, 411, 416, 458, 467, 496], "psf3d": [84, 143, 148, 151, 153, 178, 399, 417, 498], "background3d": [84, 136, 148, 175, 364, 405, 409, 417, 418, 419, 458, 467, 495], "observationfilt": [84, 368, 373, 398, 419], "filter": [84, 85, 364, 368, 370, 372, 373, 418, 419, 422, 461, 464, 472, 477, 478], "fixedpointinginfo": [84, 152, 175, 423, 424, 427, 434, 443, 444, 447, 451], "lazi": [84, 95, 97, 100, 104, 105, 257, 296, 417, 492], "available_hdu": 84, "available_irf": 84, "muoneff": [84, 464], "opt": [84, 85, 455, 518, 528], "muon": [84, 464], "target_radec": 84, "tmid": [84, 423, 441, 459, 464, 477], "midpoint": 84, "tstart": [84, 86, 371, 373, 434, 443, 447, 450, 451, 467], "tstop": [84, 371, 373, 434, 443, 447, 450, 467], "in_memori": [84, 492], "hess_dl3_dr1_obs_id_020136": [84, 144, 359, 494, 495, 496, 498], "obs_copi": 84, "1234": 84, "deadtime_fract": 84, "iso": [84, 119, 192, 197, 423, 451, 462, 468, 504, 546], "2000": [84, 97, 100, 104, 105, 121, 217, 221, 223, 225, 240, 246, 398, 443, 444, 445, 459, 468, 478, 551], "deadtim": [84, 175, 434, 443, 447, 467], "memoryobserv": 84, "get_pointing_altaz": [84, 464], "get_pointing_icr": [84, 423, 441, 459, 477], "figsiz": [84, 97, 100, 104, 105, 122, 136, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 155, 182, 183, 185, 191, 194, 195, 346, 428, 431, 434, 435, 437, 439, 440, 441, 442, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 501, 511, 515, 518], "panel": [84, 96, 97, 100, 104, 105, 345, 412, 443, 457], "figur": [84, 97, 100, 104, 105, 122, 136, 137, 139, 140, 141, 142, 143, 149, 150, 151, 152, 153, 155, 182, 183, 185, 191, 194, 195, 336, 345, 346, 352, 358, 359, 363, 378, 388, 431, 435, 439, 441, 442, 443, 445, 448, 449, 450, 454, 456, 457, 459, 460, 462, 463, 468, 469, 470, 552], "event_fil": 84, "irf_fil": [84, 137, 141, 142, 143, 152, 427, 434, 447, 451, 458, 467], "new_ob": [84, 492], "time_filt": 85, "event_filt": 85, "event_filter_typ": 85, "eventlistbas": 85, "intersect": [85, 165, 166, 170, 190, 372, 450], "yet": [85, 357, 358, 361, 363, 365, 372, 375, 378, 379, 425, 429, 432, 476, 556], "2021": [85, 212, 380, 382, 396, 423, 463, 518], "27t20": 85, "phase_filt": 85, "my_obs_filt": 85, "my_ob": 85, "111630": [85, 452, 467], "sky_region": 85, "livetime_fract": 85, "kept": [85, 97, 100, 104, 105, 117, 119, 120, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 358, 364, 378, 382, 490], "filter_ev": 85, "filtered_ev": 85, "filter_gti": 85, "filtered_gti": 85, "pointing_galact": 86, "select_obs_id": [86, 441], "keyerror": [86, 189, 382], "select_observ": [86, 91, 374, 450, 464, 477, 492], "main": [86, 97, 104, 358, 361, 363, 364, 366, 370, 373, 374, 375, 378, 382, 384, 388, 399, 405, 409, 412, 417, 423, 432, 442, 443, 445, 447, 455, 458, 460, 461, 462, 474, 476, 477, 487, 489, 493, 552], "circular": [86, 97, 100, 169, 181, 183, 193, 369, 377, 379, 428, 433, 456, 464, 501, 505], "cast": 86, "interpret": [86, 97, 100, 122, 132, 133, 183, 187, 193, 194, 195, 305, 376, 386, 460, 490, 505], "sky_circl": [86, 91, 450, 464, 477], "mark": [86, 358, 369, 387], "time_box": 86, "criterion": [86, 127, 285, 427, 492], "act": [86, 374, 462, 515], "time_rang": [86, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 444, 539, 540, 541, 542, 543, 544, 545, 546, 547], "select_time_rang": 86, "par_box": 86, "value_rang": 86, "select_rang": 86, "invert": [86, 181, 193, 478], "activ": [86, 278, 361, 375, 389, 390, 392, 393, 394, 403, 420, 448, 492], "border": 86, "selected_obs_t": [86, 464, 477], "2012": [86, 399, 551], "01t01": 86, "01t02": 86, "alt_pnt": 86, "n_tel": 86, "selection_vari": 86, "discret": [86, 371, 457, 504], "cut": [86, 116, 154, 168, 169, 368, 417, 423, 426, 427, 430, 434, 452, 456, 459, 460, 464, 467, 472, 477, 478, 488, 489, 500, 501, 504, 549], "select_sky_circl": [86, 372], "cone": [86, 372, 432, 464, 476, 477, 492], "direct": [86, 99, 154, 172, 173, 176, 178, 187, 211, 219, 222, 291, 294, 359, 364, 370, 372, 377, 379, 382, 385, 409, 426, 430, 434, 459, 472, 488, 489, 497, 498, 500, 501, 504, 509, 549, 550, 551], "partial_overlap": 86, "partial": [86, 97, 100, 140, 141, 147, 152, 155, 158, 181, 193, 195, 257, 372, 376, 404, 418, 503], "mutablesequ": [87, 95, 232], "clear": [87, 95, 189, 232, 358, 363, 365, 369, 372, 373, 377, 378, 379, 417, 442, 556], "occurr": [87, 95, 186, 201, 203, 210, 232], "observations_list": 87, "observation_list": 87, "group_by_label": [87, 464], "label": [87, 184, 187, 192, 210, 232, 285, 346, 347, 352, 355, 358, 359, 362, 367, 371, 372, 387, 388, 409, 411, 420, 421, 423, 427, 429, 431, 433, 437, 439, 440, 444, 445, 448, 449, 450, 452, 454, 457, 460, 463, 464, 465, 478, 485, 486, 494, 518, 524, 527, 528, 532], "obs_clust": [87, 464], "in_memory_gener": 87, "recommend": [87, 95, 169, 210, 232, 270, 299, 300, 357, 358, 359, 361, 365, 367, 375, 384, 388, 389, 391, 394, 401, 418, 432, 433, 442, 456, 457, 459, 463, 468, 476, 492, 499, 504, 505, 552, 553, 556], "pop": [87, 95, 189, 232], "indexerror": [87, 95, 232], "empti": [87, 95, 97, 100, 104, 105, 132, 162, 182, 183, 185, 189, 191, 194, 195, 199, 232, 344, 366, 368, 400, 412, 439, 443, 444, 447, 451, 459, 460, 469, 481, 488, 501, 502, 505], "IN": [87, 95, 232], "new_observ": 87, "sampler_kwarg": 88, "dataset_kwarg": [88, 103], "simulated_data": 88, "parallel_backend": [88, 120, 121, 124, 127, 158, 307, 445], "parallelmixin": [88, 120, 127, 158], "emsembl": 88, "mapdataseteventsampl": [88, 103, 403, 404, 405, 412, 423, 443, 444], "create_map_dataset_from_observ": [88, 103], "unless": [88, 90, 120, 121, 124, 127, 158, 287, 357, 364, 383, 385, 458], "n_jobs_default": [88, 120, 121, 124, 127, 158], "backend": [88, 96, 114, 120, 121, 124, 125, 127, 158, 199, 269, 302, 307, 308, 357, 367, 369, 399, 418, 419, 423, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477, 549, 550], "job": [88, 120, 121, 124, 127, 158, 411], "ensembl": 88, "onserv": 88, "simulate_observ": 88, "pointing_t": 89, "geodeticloc": 89, "50022222": 89, "latitud": [89, 180, 181, 182, 183, 188, 190, 193, 194, 195, 315, 345, 402, 445, 460, 463, 497, 504, 512], "23": [89, 165, 358, 362, 384, 396, 420, 428, 433, 435, 451, 455, 457, 460, 462, 464, 478, 501], "27177778": 89, "1835": 89, "mjdrefi": [89, 339, 342, 444], "mjdreff": [89, 339, 342, 444], "timesi": [89, 421, 423, 443], "51910": 89, "000742870370370241": 89, "2001": [89, 398, 435, 551], "00074287037": [89, 444], "1586": 89, "0000000000018": 89, "44055555555555603": 89, "21t19": 89, "53025": 89, "826414166666": 89, "6333": 89, "5144": [89, 427], "4575": 89, "3409": [89, 409], "21t20": 89, "844770648146": 89, "44573": 89, "1319": [89, 417], "reproduc": [89, 96, 119, 359, 374, 375, 376, 378, 384, 385, 389, 391, 418, 459, 480], "altaz_interpol": 89, "enum": [90, 145, 302, 303], "obs_mod": 90, "ground": [90, 373, 467, 553], "common": [90, 357, 358, 359, 361, 363, 364, 372, 374, 378, 379, 381, 382, 384, 391, 393, 394, 409, 411, 432, 433, 445, 455, 458, 461, 463, 476, 477, 480, 487, 490, 491, 505, 510, 552], "whole": [90, 112, 159, 162, 169, 172, 173, 175, 176, 181, 182, 183, 185, 194, 195, 233, 262, 271, 272, 358, 364, 370, 373, 384, 428, 431, 439, 444, 449, 452, 456, 463, 468, 470, 549], "equatori": [90, 145, 181, 182, 183, 185, 188, 190, 193, 194, 195, 458], "ogip": [90, 101, 102, 105, 139, 184, 186, 187, 190, 191, 192, 370, 373, 416, 431, 440, 488, 496, 505], "raster": [90, 183], "slew": 90, "These": [90, 187, 262, 358, 359, 363, 364, 369, 371, 372, 373, 374, 378, 379, 384, 401, 403, 404, 405, 409, 417, 423, 427, 440, 442, 443, 448, 451, 454, 456, 458, 460, 463, 464, 469, 472, 480, 497, 502, 504, 505, 553, 554, 555], "treat": [90, 390, 422, 423, 431, 443, 555], "v0": [90, 365, 366, 369, 370, 372, 375, 377, 378, 383, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 418, 419, 420, 443, 444, 458, 462], "wobbl": [90, 451, 467], "fixed_offset": [91, 168, 409], "containment_fract": 91, "apply_standard_scal": 91, "neither": [91, 168, 375, 383], "nor": [91, 168, 368, 379, 383, 387], "bia": [91, 139, 140, 144, 168, 417, 423, 459, 465, 496], "varianc": [91, 129, 130, 277, 278, 286, 373, 424, 464], "standard_scal": [91, 285, 464], "329": [91, 285, 286, 450, 455, 464, 492], "716": [91, 285, 286, 460], "225": [91, 285, 286, 382, 410, 455], "features_irf": [91, 285, 286, 464], "11587179071752986": 91, "33787": [91, 464], "368346217294295": 91, "14149953611195087": [91, 464], "04897634344908595": 91, "33788": [91, 464], "33983991887701287": 91, "11553325504064559": [91, 464], "033176650892097": 91, "33789": [91, 464], "32377509405904137": 91, "10262943822890519": [91, 464], "astri": 92, "5390438": 92, "56093766": 92, "1597317": 92, "33800122": 92, "3006942": 92, "84196311": 92, "cta_north": 92, "5326744": 92, "14419991": 92, "1719670": 92, "68542112": 92, "3051852": 92, "61422433": 92, "cta_south": [92, 427, 434, 443, 444, 447, 451], "1953830": 92, "40071076": 92, "5461745": 92, "48215685": 92, "2648150": 92, "15076259": 92, "5326841": 92, "28720322": 92, "1719610": 92, "78188096": 92, "3051827": 92, "86831929": 92, "768048": 92, "67304": 92, "5987726": 92, "52318414": 92, "2064335": 92, "19214093": 92, "hegra": [92, 263], "5324402": 92, "17229679": 92, "2922477": 92, "69543812": 92, "1947565": 92, "59400008": 92, "5622482": 92, "08529426": 92, "1665478": 92, "78910994": 92, "2505121": 92, "94111838": 92, "magic": [92, 390, 395, 411, 417, 420, 433, 468, 551], "5326859": 92, "67992517": 92, "1719502": 92, "15154854": 92, "3051856": 92, "77751797": 92, "milagro": [92, 349], "1485314": 92, "58540702": 92, "4958277": 92, "64987376": 92, "3718745": 92, "87710186": 92, "verita": [92, 390, 395, 468], "1943186": 92, "26739753": 92, "5074834": 92, "80871364": 92, "3330487": 92, "41415047": 92, "whippl": 92, "1936925": 92, "93988308": 92, "5078068": 92, "85469291": 92, "3331761": 92, "38143003": 92, "mapdataset": [93, 94, 98, 100, 103, 104, 105, 107, 108, 109, 111, 112, 116, 121, 124, 127, 131, 132, 133, 157, 158, 159, 162, 163, 167, 168, 218, 351, 354, 371, 373, 379, 380, 399, 400, 401, 402, 403, 404, 405, 406, 409, 423, 424, 435, 436, 440, 441, 442, 444, 445, 447, 449, 451, 452, 457, 459, 461, 462, 468, 476, 477, 490, 492, 499, 502, 551, 553, 554], "mapdatasetonoff": [93, 97, 104, 105, 112, 116, 131, 157, 163, 167, 403, 404, 406, 409, 422, 423, 437, 452, 459, 488, 502, 553], "spectrumdataset": [93, 94, 95, 97, 100, 105, 124, 126, 135, 163, 164, 168, 169, 218, 379, 400, 401, 402, 403, 404, 405, 406, 409, 412, 427, 428, 431, 433, 434, 441, 450, 451, 452, 457, 459, 465, 488, 501, 553], "spectrumdatasetonoff": [93, 100, 101, 102, 104, 125, 126, 135, 163, 164, 269, 355, 373, 400, 401, 402, 404, 405, 421, 422, 423, 427, 428, 431, 432, 434, 440, 441, 449, 452, 456, 457, 459, 465, 490, 553], "fluxpointsdataset": [93, 94, 97, 100, 379, 382, 385, 399, 403, 424, 429, 431, 440, 441, 451, 452, 488], "dl4": [94, 96, 97, 100, 104, 105, 112, 116, 120, 124, 127, 147, 168, 364, 385, 390, 405, 451, 456, 457, 492, 550, 551], "combin": [94, 96, 97, 100, 104, 105, 134, 168, 176, 182, 183, 185, 190, 191, 194, 195, 205, 247, 358, 364, 368, 369, 370, 371, 372, 373, 378, 381, 390, 402, 417, 423, 429, 434, 439, 440, 447, 451, 456, 457, 458, 459, 460, 461, 463, 469, 477, 478, 480, 482, 492, 499, 504, 520, 550, 551], "safe": [94, 96, 97, 100, 104, 105, 140, 141, 147, 152, 155, 160, 168, 358, 370, 372, 384, 403, 405, 406, 420, 421, 422, 423, 428, 431, 456, 461, 477, 488, 550], "stat_arrai": [94, 96, 97, 100, 104, 105, 386], "stat_sum": [94, 95, 96, 97, 100, 104, 105, 386, 422, 423, 439, 451, 456, 462, 492], "contributes_to_stat": 95, "contribut": [95, 109, 111, 210, 218, 232, 247, 354, 358, 360, 367, 372, 380, 382, 388, 395, 398, 409, 411, 413, 459, 493, 528, 549, 552, 553], "likelihood": [95, 97, 100, 105, 116, 117, 118, 119, 121, 127, 270, 284, 358, 364, 367, 370, 371, 374, 376, 378, 379, 380, 382, 390, 397, 399, 400, 403, 410, 413, 416, 418, 419, 424, 429, 431, 432, 433, 435, 441, 445, 449, 450, 452, 456, 457, 459, 465, 468, 476, 477, 480, 488, 490, 492, 528, 550, 551, 553, 554], "energy_axes_are_align": 95, "is_all_same_energy_shap": 95, "is_all_same_shap": 95, "is_all_same_typ": 95, "meta_t": [95, 96, 97, 100, 104, 105, 162, 169, 382, 385, 406, 428, 434, 459, 488], "info_t": [95, 428, 431, 432, 434, 439, 451, 456, 462, 492], "cumul": [95, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195, 309, 371, 431, 443, 462, 492], "lost": [95, 97, 104, 492, 505], "filename_model": [95, 117, 269, 462, 468], "verif": [95, 210, 232, 325, 440, 468], "time_min": [95, 117, 119, 192, 372, 373, 374, 444, 449, 455, 460], "time_max": [95, 117, 119, 192, 372, 373, 374, 444, 449, 455, 460], "slice_by_energi": [95, 97, 100, 104, 105, 117, 119, 257, 406, 456], "dismiss": 95, "stack_reduc": [95, 135, 402, 428, 431, 433, 439, 440, 441, 452, 456, 457, 490], "nan_to_num": [95, 97, 100, 104, 105, 140, 141, 147, 152, 155, 183, 191, 195, 257], "togeth": [95, 97, 100, 104, 105, 120, 124, 210, 232, 355, 358, 371, 375, 378, 389, 401, 437, 439, 440, 445, 450, 456, 457, 459, 462, 463, 464, 465, 470, 477, 488, 489, 552], "finit": [95, 97, 100, 104, 105, 140, 141, 147, 152, 168, 183, 191, 195, 257, 376], "joint": [95, 104, 105, 114, 125, 135, 269, 366, 367, 370, 374, 378, 380, 390, 399, 400, 402, 403, 418, 419, 426, 428, 429, 431, 432, 433, 435, 442, 446, 451, 456, 457, 459, 463, 464, 465, 468, 472, 476, 490, 492, 549, 550, 551], "to_spectrum_dataset": [95, 97, 100, 104, 105, 380, 402, 404, 452, 456, 465], "skyregion": [95, 97, 100, 104, 105, 121, 140, 141, 147, 152, 155, 165, 166, 170, 185, 190, 191, 195, 210, 232, 318, 321, 372, 428, 443, 445, 461, 463, 496, 501, 505], "mask_fit": [96, 97, 100, 104, 105, 109, 111, 370, 403, 420, 433, 439, 452, 456, 457, 461, 465, 488], "mask_saf": [96, 97, 100, 101, 104, 105, 168, 370, 403, 456, 459, 461, 488], "bundl": [96, 97, 100, 104, 105, 367, 370, 388, 410, 418, 441, 456, 459, 488, 505, 550, 551], "chi2": [96, 370, 400, 442, 451, 457, 488, 554], "part": [96, 358, 361, 364, 367, 369, 371, 372, 373, 374, 376, 377, 378, 383, 384, 399, 403, 404, 405, 413, 418, 423, 424, 427, 428, 431, 439, 447, 455, 456, 460, 461, 477, 478, 492, 497, 501], "diff_flux_point": [96, 456], "optimizeresult": [96, 199, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477], "minuit": [96, 114, 199, 369, 376, 403, 418, 419, 423, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477], "migrad": [96, 199, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477], "messag": [96, 361, 372, 374, 381, 407, 422, 428, 429, 431, 432, 433, 439, 440, 441, 451, 452, 457, 468, 476, 477, 492, 552], "successfulli": [96, 428, 429, 431, 432, 433, 439, 440, 441, 451, 452, 457, 468, 476, 477], "nfev": [96, 199, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477], "covarianceresult": [96, 199, 428, 429, 431, 432, 433, 439, 440, 441, 452, 457, 468, 476, 477], "to_tabl": [96, 119, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 186, 187, 191, 201, 203, 224, 409, 429, 431, 432, 441, 445, 447, 449, 451, 455, 463, 478, 490], "2159e": 96, "1619e": 96, "0000e": [96, 428, 431, 432, 433, 434, 436, 439, 447, 451, 457, 463, 477, 537], "stat_typ": [96, 97, 100, 104, 105, 404, 439, 451, 456, 462], "data_shap": [96, 97, 100, 104, 105, 180, 181, 190, 193, 456, 505], "flux_pr": 96, "predict": [96, 97, 100, 103, 104, 105, 116, 117, 119, 120, 121, 124, 125, 131, 159, 162, 168, 175, 236, 247, 274, 309, 354, 364, 369, 370, 371, 406, 423, 424, 432, 434, 436, 437, 439, 441, 443, 445, 447, 456, 459, 465, 476, 477, 490, 492, 496, 499, 518, 551, 554], "plot_fit": [96, 104, 105, 428, 431, 432, 433, 441, 452, 476], "ax_spectrum": [96, 104, 105, 428, 431, 432, 433, 452], "ax_residu": [96, 104, 105, 428, 431, 432, 433, 452, 476], "kwargs_spectrum": [96, 104, 105], "kwargs_residu": [96, 104, 105], "axis_nam": [96, 97, 100, 104, 105, 117, 119, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 195, 445, 449, 450, 451, 456], "plot_spectrum": [96, 136, 439, 451, 456], "plot_residu": [96, 97, 100, 104, 105, 407, 409, 439, 477], "kwargs_model": 96, "color": [96, 104, 105, 136, 137, 195, 347, 348, 349, 352, 355, 359, 427, 429, 431, 432, 433, 434, 435, 437, 439, 441, 442, 445, 449, 452, 454, 457, 459, 462, 464, 465, 492, 501, 505, 509, 510, 528], "red": [96, 277, 348, 427, 434, 437, 439, 442, 454, 464, 465, 509, 510], "kwargs_fp": 96, "green": [96, 104, 105, 417, 442, 464, 465], "marker": [96, 97, 100, 104, 105, 427, 428, 431, 433, 435, 441, 448, 449, 450, 451, 478], "blue": [96, 97, 100, 104, 105, 348, 431, 437, 439, 442, 464, 501], "markers": [96, 97, 100, 104, 105, 465], "diff": [96, 97, 100, 104, 105, 358, 361, 366, 370, 439, 447, 477], "suffix": [96, 117, 359, 369, 381, 387, 463, 504, 506], "cash": [97, 100, 104, 105, 162, 274, 279, 358, 370, 409, 434, 436, 439, 447, 451, 456, 459, 462, 465, 476, 477, 488, 551], "wcsndmap": [97, 100, 106, 110, 112, 127, 132, 150, 152, 155, 157, 159, 164, 165, 166, 167, 170, 175, 176, 181, 182, 183, 185, 191, 193, 194, 196, 197, 210, 232, 247, 255, 345, 351, 353, 364, 402, 403, 404, 406, 409, 411, 418, 420, 423, 424, 435, 436, 445, 454, 456, 459, 460, 461, 468, 478, 488, 490, 498, 501], "psfmap": [97, 98, 100, 103, 104, 105, 140, 141, 147, 148, 150, 155, 162, 169, 178, 370, 371, 379, 399, 402, 403, 405, 406, 418, 424, 435, 456, 468, 492, 498], "kernel": [97, 100, 104, 105, 112, 116, 122, 123, 127, 139, 140, 141, 150, 152, 155, 157, 162, 167, 169, 172, 183, 193, 195, 364, 385, 404, 405, 410, 415, 419, 420, 435, 437, 452, 459, 460, 461, 468, 478, 488, 492, 496], "edispmap": [97, 98, 100, 103, 104, 105, 140, 147, 148, 152, 155, 162, 169, 172, 173, 370, 371, 379, 399, 402, 403, 404, 406, 409, 458, 496], "mapdatasetmetadata": [97, 100, 385], "lazili": 97, "104317": [97, 456, 462], "91507": [97, 456], "12809": [97, 456, 462], "69": [97, 424, 435, 451, 455, 456], "28e": [97, 429, 439, 441, 456], "07": [97, 162, 333, 373, 394, 426, 429, 430, 432, 439, 441, 450, 452, 455, 456, 458, 460, 462, 468, 471, 476], "m2": [97, 142, 162, 432, 434, 436, 437, 439, 441, 447, 456, 458, 459, 467, 476, 477], "90e": [97, 432, 439, 456], "768000": [97, 456], "691680": [97, 456, 462], "background_model": [97, 100, 104, 105, 127, 370, 371, 378, 380, 405, 436, 477, 495], "energy_range_fit": [97, 100, 104, 105, 456], "energy_range_saf": [97, 100, 104, 105, 456], "energy_range_tot": [97, 100, 104, 105], "largest": [97, 100, 104, 105, 195, 358], "mask_fit_imag": [97, 100, 104, 105], "mask_imag": [97, 100, 104, 105], "mask_safe_edisp": [97, 100, 104, 105], "mask_safe_imag": [97, 100, 104, 105, 140, 141, 147, 152, 155], "mask_safe_psf": [97, 100, 104, 105], "energy_axis_tru": [97, 100, 104, 105, 106, 107, 108, 110, 139, 140, 141, 142, 144, 149, 150, 152, 162, 359, 403, 427, 428, 431, 433, 434, 435, 437, 441, 443, 444, 447, 450, 451, 452, 456, 458, 459, 468, 469, 477, 496, 499, 501, 502], "migra_axi": [97, 100, 104, 105, 108, 141, 144, 443, 444, 458, 459], "rad_axi": [97, 100, 104, 105, 108, 149, 152, 155, 456, 458, 459, 492], "binsz_irf": [97, 100, 104, 105, 108, 456, 459, 492], "reco_psf": [97, 100, 104, 105, 108, 459, 469], "reco": [97, 100, 104, 105, 139, 172, 358, 364, 373, 382, 419, 420, 427, 456, 459, 469, 551], "migrat": [97, 100, 104, 105, 108, 144, 367, 402, 409, 418, 443, 459, 496, 497], "edispkernelmap": [97, 100, 101, 104, 105, 108, 141, 147, 148, 152, 155, 162, 169, 172, 405, 406, 435, 459, 468, 492, 496], "binsz_irf_default": [97, 100, 104, 105, 459], "empty_map": [97, 100, 104, 105, 442, 459, 501], "binsz": [97, 100, 104, 105, 106, 110, 141, 150, 152, 162, 165, 166, 170, 181, 182, 183, 185, 190, 191, 193, 194, 195, 374, 431, 441, 442, 443, 444, 447, 452, 454, 456, 458, 459, 460, 461, 463, 468, 469, 477, 499, 501, 502, 504, 505, 508, 510, 511, 512, 513], "proj": [97, 100, 104, 105, 162, 181, 182, 183, 193, 194, 195, 431, 459, 460, 468, 477, 501], "car": [97, 100, 104, 105, 162, 193, 194, 195, 210, 232, 372, 401, 441, 458, 459, 460, 477, 478], "cutout": [97, 100, 104, 105, 109, 111, 140, 141, 147, 152, 155, 158, 181, 183, 191, 193, 195, 257, 364, 370, 399, 404, 409, 415, 418, 436, 437, 439, 441, 445, 456, 459, 468, 477, 478, 488], "trim": [97, 100, 140, 141, 147, 152, 155, 158, 193, 195, 257], "cutout2d": [97, 100, 140, 141, 147, 152, 155, 158, 193, 195, 257, 364], "downsampl": [97, 100, 104, 105, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 400, 406, 415, 456], "fake": [97, 100, 104, 105, 370, 371, 401, 433, 434, 447, 451, 465], "from_geom": [97, 100, 104, 105, 140, 141, 150, 152, 155, 182, 183, 185, 189, 191, 194, 195, 403, 422, 456, 460, 461, 505, 511], "geom_exposur": [97, 100, 104, 105, 422, 456], "geom_psf": [97, 100, 104, 105, 456], "geom_edisp": [97, 100, 104, 105, 456], "migra": [97, 100, 104, 105, 141, 144, 173, 374, 443, 444, 458, 497], "from_hdulist": [97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 460], "hdulist": [97, 100, 102, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 443, 460, 488], "info_dict": [97, 100, 104, 105, 271, 272, 351, 406, 424, 456], "in_safe_data_rang": [97, 100, 104, 105], "npred": [97, 100, 104, 105, 116, 117, 119, 120, 121, 124, 125, 127, 257, 274, 369, 370, 371, 380, 382, 397, 399, 406, 409, 415, 417, 443, 445, 455, 456, 465, 468, 488, 490, 554], "npred_background": [97, 100, 104, 105, 117, 119, 406, 433, 434, 445, 456, 490, 554], "npred_sign": [97, 100, 104, 105, 354, 409, 423, 456, 554], "model_nam": [97, 100, 104, 105, 210, 232, 354, 456], "upon": [97, 100, 104, 105, 367, 436, 462, 467, 488], "npred_sig": [97, 100, 104, 105, 370], "pad_width": [97, 104, 127, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 180, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195], "edg": [97, 100, 104, 105, 112, 114, 116, 120, 123, 124, 127, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 151, 153, 154, 162, 163, 168, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 211, 351, 372, 382, 400, 406, 409, 427, 440, 441, 442, 443, 444, 448, 458, 459, 460, 461, 468, 469, 476, 509], "array_lik": [97, 104, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 273, 279, 284], "ax_spati": [97, 100, 104, 105], "ax_spectr": [97, 100, 104, 105], "kwargs_spati": [97, 100, 104, 105, 439, 477], "kwargs_spectr": [97, 100, 104, 105, 439, 477], "plot_residuals_spati": [97, 100, 104, 105, 439, 447, 477], "plot_residuals_spectr": [97, 100, 104, 105], "outlin": [97, 100, 104, 105, 206, 207, 211, 219, 222, 236, 244, 245, 259, 361, 363, 366, 367, 368, 369, 372, 378, 381], "overlaid": [97, 100, 104, 105, 432], "wcsax": [97, 100, 104, 105, 183, 190, 191, 195, 210, 232, 353, 355, 439, 460, 478, 508, 512, 513, 514], "circleskyregion": [97, 100, 104, 105, 164, 165, 169, 193, 211, 359, 372, 427, 428, 431, 433, 434, 437, 439, 441, 443, 444, 450, 454, 456, 459, 461, 462, 477, 499, 501, 502, 505], "reg": [97, 100, 104, 105, 461, 463], "cmap": [97, 100, 104, 105, 348, 349, 433, 439, 454, 460, 462, 468, 469, 476, 477, 501], "rdbu_r": [97, 100, 104, 105], "vmin": [97, 100, 104, 105, 348, 349, 435, 439, 447, 456, 460, 461, 468, 469, 476, 477, 501], "vmax": [97, 100, 104, 105, 348, 349, 436, 439, 441, 447, 456, 460, 461, 468, 469, 476, 477, 501], "add_cbar": [97, 100, 104, 105, 119, 136, 137, 139, 142, 143, 144, 149, 150, 151, 153, 182, 183, 185, 191, 194, 195, 346, 435, 436, 437, 439, 441, 447, 452, 454, 456, 458, 459, 460, 462, 463, 468, 469, 476, 477, 505, 508, 509, 510, 513, 514, 516], "markerfacecolor": [97, 100, 104, 105], "smooth_kernel": [97, 100], "smooth_radiu": [97, 100], "smooth": [97, 100, 104, 105, 112, 122, 123, 132, 183, 195, 211, 248, 350, 353, 409, 414, 415, 416, 418, 419, 426, 437, 439, 441, 445, 447, 452, 456, 459, 460, 462, 468, 476, 477, 478, 506, 509, 538], "imshow": [97, 100, 150, 183, 195, 346, 352, 416, 460, 478], "symmetr": [97, 100, 104, 105, 116, 125, 127, 170, 179, 183, 219, 358, 369, 399, 411, 414, 429, 451, 459, 465, 467, 480, 490, 498, 509, 510, 554], "resample_energy_axi": [97, 100, 104, 105, 140, 406, 411, 456], "resampl": [97, 100, 104, 105, 119, 134, 135, 140, 180, 181, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 353, 409, 411, 448, 492], "account": [97, 100, 104, 105, 116, 159, 175, 210, 232, 247, 271, 272, 278, 333, 366, 371, 374, 382, 384, 405, 422, 424, 427, 428, 433, 437, 439, 445, 451, 452, 457, 459, 461, 477, 488, 490, 553, 554], "reset_data_cach": [97, 100, 104, 105], "240": [97, 100, 104, 105, 116, 455, 456, 490], "320": [97, 100, 104, 105, 116, 426, 455, 456, 462, 490, 538], "slice_by_idx": [97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 406, 418, 420, 445, 460, 468], "unchang": [97, 100, 104, 105, 109, 111, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 417], "ndim": [97, 104, 106, 110, 137, 139, 142, 181, 188, 193, 433, 436, 441, 445, 456, 458, 459, 460, 467, 468, 478, 490, 505], "project": [97, 104, 121, 159, 165, 181, 182, 183, 185, 190, 191, 193, 194, 195, 207, 210, 211, 219, 222, 232, 234, 244, 245, 249, 255, 259, 294, 320, 358, 359, 360, 361, 363, 365, 372, 374, 375, 378, 384, 401, 409, 417, 423, 432, 435, 437, 441, 445, 452, 458, 460, 461, 462, 467, 468, 474, 476, 477, 478, 480, 501, 504, 505, 514, 515, 550, 552], "denot": [97, 104, 382, 488], "epsilon_": [97, 104, 488], "jk": [97, 104, 488], "mbox": [97, 104], "overlin": [97, 104, 488], "n_": [97, 104, 273, 279, 488, 553, 554, 555], "_k": [97, 104, 488], "_": [97, 104, 122, 220, 239, 358, 372, 382, 384, 434, 437, 454, 455, 457, 462, 465, 488, 501], "1k": [97, 104], "2k": [97, 104], "bkg_": [97, 104], "epsilon_k": [97, 104, 488], "OR": [97, 104, 456, 461, 462], "off": [97, 100, 102, 104, 105, 116, 157, 163, 164, 167, 170, 179, 272, 284, 355, 356, 361, 364, 370, 372, 373, 374, 403, 409, 411, 413, 423, 427, 428, 432, 433, 437, 441, 449, 450, 452, 456, 457, 459, 465, 488, 501, 502, 551, 553, 554, 555], "counts_off": [97, 100, 101, 104, 105, 157, 163, 164, 167, 356, 370, 411, 422, 423, 432, 433, 434, 437, 441, 452, 456, 488, 554], "to_hdulist": [97, 100, 104, 105, 117, 119, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 182, 183, 189, 190, 191, 194, 195, 460], "to_imag": [97, 100, 104, 105, 139, 140, 150, 152, 155, 180, 181, 190, 193, 380, 403, 404, 427, 437, 441, 456, 468, 502, 505], "imag": [97, 100, 104, 105, 112, 122, 123, 132, 141, 142, 143, 149, 151, 152, 153, 155, 157, 167, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 259, 280, 283, 323, 344, 346, 347, 348, 349, 353, 358, 366, 367, 369, 374, 375, 378, 379, 388, 390, 395, 397, 398, 399, 402, 403, 404, 410, 414, 415, 416, 417, 418, 426, 436, 437, 439, 445, 446, 459, 461, 463, 467, 477, 478, 488, 489, 490, 497, 500, 501, 502, 503, 504, 505, 549, 550, 551, 557], "to_mask": [97, 100, 104, 105, 454], "to_region_map_dataset": [97, 100, 104, 105, 456], "again": [97, 100, 104, 105, 152, 361, 368, 370, 372, 374, 379, 385, 389, 404, 405, 408, 415, 420, 429, 431, 432, 439, 444, 445, 460, 463, 465, 468, 476, 478, 505, 552], "ON": [97, 100, 126, 169, 170, 171, 179, 356, 364, 411, 427, 431, 434, 437, 441, 449, 450, 452, 457, 459, 465, 492, 501, 551, 553, 555], "regiongeom": [97, 100, 104, 105, 117, 121, 162, 169, 171, 172, 173, 175, 176, 191, 207, 211, 219, 222, 234, 244, 245, 247, 249, 255, 259, 372, 373, 380, 390, 405, 406, 409, 427, 428, 431, 433, 434, 441, 445, 450, 451, 452, 455, 456, 459, 468, 478, 488, 501, 504], "oversample_energy_factor": [98, 103, 444], "t_delta": [98, 103, 192, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261], "keep_mc_id": [98, 103], "n_event_bunch": [98, 103], "oversampl": [98, 103, 150, 152, 155, 162, 169, 175, 181, 182, 183, 185, 190, 191, 194, 195, 207, 211, 219, 222, 223, 224, 234, 244, 245, 247, 249, 255, 259, 261, 265, 400, 459], "montecarlo": [98, 103, 199], "bunch": [98, 103, 359, 552], "event_det_coord": [98, 103], "event_list_meta": [98, 103, 404], "pleas": [98, 103, 359, 361, 363, 365, 367, 393, 398, 399, 400, 409, 417, 419, 429, 431, 432, 433, 434, 436, 439, 443, 444, 448, 450, 451, 456, 476, 481, 492], "futur": [98, 103, 120, 121, 124, 200, 202, 358, 363, 368, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 417, 439, 443, 460, 468, 481, 490, 549], "sampler": [98, 309, 367, 371, 405, 409, 443], "sample_background": [98, 103, 403], "sample_edisp": [98, 103], "edisp_map": [98, 103, 140, 141, 458, 496], "sample_psf": [98, 103], "psf_map": [98, 103, 152, 155], "sample_sourc": [98, 103], "creator": [99, 118, 361, 385, 432, 463, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "dev154": [99, 118, 395, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "ge23c3ef62": [99, 118, 395, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "datetim": [99, 118, 385], "2024": [99, 118, 395, 396, 432, 463, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "091580": 99, "obsinfometadata": 99, "pointinginfometadata": 99, "event_typ": [99, 468, 478], "coerce_numbers_to_str": 99, "acceptance_off": [100, 101, 105, 157, 167, 370, 427, 428, 431, 434, 437, 488, 554], "wstat": [100, 105, 281, 282, 370, 397, 415, 416, 431, 432, 434, 437, 441, 452, 456, 465, 488, 551], "therefor": [100, 364, 368, 371, 372, 373, 377, 379, 381, 391, 409, 428, 449, 452, 457, 460, 461, 464, 465, 478, 490, 554, 555], "ring": [100, 116, 157, 160, 167, 181, 182, 183, 364, 367, 374, 377, 390, 399, 403, 405, 415, 416, 417, 418, 426, 438, 442, 461, 472, 488, 491, 500, 503, 504, 551], "convolv": [100, 106, 110, 127, 150, 183, 195, 369, 397, 406, 409, 418, 434, 435, 437, 460, 498, 528], "psfkernel": [100, 152, 155, 183, 195, 370, 379, 418, 498], "edispkernel": [100, 106, 110, 140, 144, 172, 404, 496], "ratio": [100, 105, 157, 181, 182, 183, 272, 284, 382, 427, 452, 467, 502, 551, 553, 554, 555, 557], "poisson": [100, 105, 271, 272, 273, 279, 281, 282, 284, 317, 370, 371, 400, 405, 429, 434, 437, 447, 551, 552, 554], "n_off": [100, 105, 272, 281, 282, 284, 553, 554], "from_map_dataset": [100, 105], "etc": [100, 105, 117, 358, 363, 364, 368, 369, 370, 373, 374, 378, 379, 382, 384, 385, 406, 432, 434, 439, 447, 449, 451, 452, 456, 460, 463, 465, 468, 476, 488, 501, 551], "defer": [100, 105], "margin": [100, 105, 109, 111, 181, 183, 193, 195, 210, 232, 247, 369, 461, 509, 551, 553], "npred_off": [100, 105, 554], "mu_bkg": [100, 105, 271, 282, 284, 394, 552, 554], "Not": [100, 104, 105, 184, 190, 192, 366], "map_out": [100, 105, 140, 141, 147, 152, 155, 182, 183, 185, 191, 194, 195], "alpha_": [100, 105], "a_": [100, 105, 142, 494, 497, 554], "alpha_1": [100, 105], "_1": [100, 105, 489], "alpha_2": [100, 105], "_2": [100, 105], "off_2": [100, 105], "to_map_dataset": [100, 105], "datasetread": 101, "arf": [101, 102, 105, 186, 187, 190, 191, 431, 505], "rmf": [101, 102, 105, 139, 140, 141, 415, 431], "pha": [101, 102, 105, 191, 370, 415, 418, 431, 440], "pha_ob": [101, 135, 440, 457], "bkg_ob": 101, "arf_ob": 101, "rmf_ob": 101, "get_filenam": [101, 102], "pha_meta": 101, "arffil": 101, "rmffile": 101, "bkgfile": 101, "get_valid_path": 101, "read_arf": 101, "read_bkg": 101, "read_pha": 101, "read_rmf": 101, "datasetwrit": 102, "sherpa": [102, 105, 139, 186, 187, 190, 191, 199, 273, 279, 357, 358, 367, 375, 376, 378, 379, 389, 390, 392, 399, 413, 414, 415, 416, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 505, 526, 553], "kev": [102, 127, 187, 435, 456, 505], "filename_bkg": 102, "filename_arf": 102, "filename_rmf": 102, "get_ogip_meta": 102, "is_bkg": 102, "to_counts_hdulist": 102, "write_arf": 102, "write_bkg": 102, "write_pha": 102, "write_rmf": 102, "product": [103, 182, 183, 185, 188, 191, 194, 195, 258, 364, 373, 374, 384, 385, 394, 409, 423, 424, 429, 435, 444, 452, 456, 457, 459, 468, 470, 490, 497, 551], "fold": [103, 382, 429, 440, 488, 490], "improv": [103, 269, 360, 362, 363, 364, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 383, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 460, 467, 492, 502, 509], "dataset_nam": [103, 107, 124, 210, 218, 232, 380, 386, 439, 443, 444, 447, 456, 462, 477, 512], "plotmixin": [104, 105], "plot_count": [104, 105], "kwargs_count": [104, 105], "kwargs_background": [104, 105], "plot_excess": [104, 105, 412], "kwargs_excess": [104, 105], "kwargs_npred_sign": [104, 105], "pha_obs23523": [104, 105, 125, 269, 465, 490], "black": [104, 105, 347, 348, 355, 376, 418, 420, 427, 452, 454, 459, 464, 501], "plot_mask": [104, 105, 183, 191, 195, 428, 431, 432, 501], "kwargs_fit": [104, 105, 351], "kwargs_saf": [104, 105], "dummi": [104, 105, 372, 436, 492], "illustr": [104, 105, 359, 368, 370, 371, 372, 374, 377, 433, 435, 440, 445, 456, 459, 460, 462, 463, 468, 482, 488, 501, 502, 509, 510, 518, 550], "top": [104, 105, 345, 354, 358, 363, 374, 378, 380, 391, 417, 433, 435, 441, 445, 448, 449, 451, 455, 459, 478, 492, 505, 550, 552, 556], "optinon": [104, 105], "pink": [104, 105], "from_spectrum_dataset": [105, 427, 434], "ogipdatasetread": 105, "ogipdatasetwrit": [105, 422, 424], "input_map": [106, 110], "e_tru": [106, 110, 144, 452, 468, 551], "e_reco": [106, 110, 139, 144, 452, 551], "from_diagonal_respons": [106, 110, 139, 140, 141, 435, 468], "map_edisp": [106, 110], "energy_bin_per_decade_max": 107, "spatial_width": 107, "spatial_width_max": 107, "spatial_bin_s": 107, "spatial_bin_size_min": 107, "exce": 107, "window": [107, 357, 358, 365, 375, 388, 389, 390, 392, 398, 414, 418, 435, 455, 551, 552, 554], "split_template_model": [109, 111], "interest": [109, 111, 120, 124, 199, 269, 363, 371, 372, 376, 378, 388, 429, 439, 443, 445, 455, 456, 457, 459, 461, 464, 467, 468, 478, 489, 490, 528, 551, 554, 555], "elsewher": [109, 111], "convolut": [112, 116, 122, 127, 150, 183, 195, 357, 370, 376, 397, 404, 406, 415, 417, 418, 424, 437, 460, 488, 505], "gaussian2dkernel": 112, "lima": 112, "adapt": [112, 157, 199, 367, 368, 371, 372, 377, 378, 380, 381, 384, 387, 394, 399, 400, 402, 403, 404, 406, 407, 409, 412, 415, 416, 418, 420, 422, 423, 424, 456, 458, 460, 461, 502], "roughli": [112, 361, 366, 372, 374, 377, 378, 416, 437], "368": 112, "65e": 112, "slightli": [112, 187], "li": [112, 116, 165, 364, 427, 435, 437, 443, 551, 554], "asmooth": [112, 113, 377, 404, 415, 418], "signific": [112, 116, 117, 118, 119, 126, 127, 134, 269, 271, 272, 276, 348, 349, 356, 363, 364, 365, 366, 373, 374, 378, 379, 382, 384, 405, 406, 414, 417, 418, 423, 424, 426, 427, 431, 432, 438, 439, 440, 441, 442, 448, 449, 452, 455, 457, 469, 472, 476, 478, 488, 490, 492, 497, 504, 550, 551, 552], "exactli": [112, 116, 120, 124, 127, 187, 353, 433, 450, 452, 461, 465, 468, 488, 505], "rather": [112, 116, 120, 124, 127, 363, 376, 379, 417, 420, 422, 424, 428, 457, 460, 478, 488, 510, 554], "closest": [112, 116, 120, 124, 127, 181, 182, 183, 185, 191, 194, 195, 461, 490], "explan": [112, 116, 120, 124, 127, 363, 395, 448, 556], "dl5": [112, 116, 120, 124, 127, 385, 424, 451, 457, 550, 551], "dl6": [112, 116, 120, 124, 127, 550, 551], "arang": [112, 373, 435, 450], "config_paramet": [112, 114, 115, 116, 120, 121, 123, 124, 125, 126, 127], "estimate_map": 112, "sqrt_t": [112, 116, 117, 119, 127, 132, 135, 271, 272, 351, 382, 394, 406, 428, 431, 432, 435, 437, 439, 441, 452, 455, 456, 461, 469, 476, 478, 490, 552, 554], "get_kernel": 112, "pixel_scal": [112, 181, 193], "get_scal": 112, "n_scale": 112, "4142135623730951": 112, "selection_al": [112, 127], "excessmapestim": [113, 132, 133, 382, 405, 406, 407, 409, 412, 422, 424, 437, 439, 452, 461, 469, 490], "tsmapestim": [113, 351, 379, 382, 404, 405, 407, 409, 423, 435, 441, 492], "sed": [113, 116, 117, 118, 119, 121, 127, 191, 212, 357, 374, 376, 382, 390, 397, 416, 429, 445, 455, 456, 476, 478, 490], "fluxpointsestim": [113, 121, 124, 307, 379, 380, 382, 390, 400, 405, 406, 409, 423, 424, 431, 440, 441, 452, 476, 477], "asmoothmapestim": [113, 379, 404, 406, 409, 435, 492], "lightcurveestim": [113, 373, 374, 379, 382, 390, 401, 403, 405, 406, 409, 417, 418, 423, 449, 450, 451, 492], "sensit": [113, 116, 117, 118, 119, 126, 263, 371, 378, 404, 406, 416, 417, 423, 424, 426, 430, 447, 467, 472, 480, 488, 497, 500, 504], "sensitivityestim": [113, 398, 404, 427], "fluxprofileestim": [113, 409, 422, 424, 445], "parameterestim": [113, 405, 424], "morpholog": [114, 371, 426, 446, 472, 488, 504], "estimate_energy_depend": 114, "potenti": [114, 366, 374, 442, 492], "delta_t": [114, 270, 442], "freedom": [114, 117, 119, 384, 424, 442, 490, 554, 555], "variou": [114, 120, 121, 124, 125, 127, 133, 358, 364, 368, 370, 373, 382, 385, 388, 390, 409, 410, 424, 429, 432, 435, 440, 442, 449, 457, 476, 488, 492, 550, 556], "correlate_off": 116, "n_sigma_sensit": [116, 117, 118, 119], "gamma_min_sensit": 116, "bkg_syst_fraction_sensit": 116, "apply_threshold_sensit": 116, "artifact": [116, 183], "fov": [116, 136, 137, 159, 160, 174, 175, 177, 179, 218, 358, 364, 372, 414, 417, 418, 436, 458, 461, 462, 467, 500, 551], "lead": [116, 358, 367, 372, 377, 379, 381, 383, 384, 402, 465, 467, 469, 480, 552], "being": [116, 126, 183, 358, 363, 366, 372, 379, 382, 388, 433, 442, 448, 461, 465, 481, 505, 552], "twice": [116, 504, 555], "confid": [116, 199, 200, 202, 271, 272, 369, 376, 400, 405, 419, 551, 554], "asymmetr": [116, 120, 121, 124, 125, 127, 376, 399, 405, 424, 465, 476, 490, 510], "express": [116, 128, 271, 272, 369, 381, 382, 424, 437, 457, 458, 463, 465, 488, 504, 511, 553, 554, 555], "besid": [116, 127, 372, 373, 382, 432, 433, 460, 468, 476, 477, 505], "errn": [116, 120, 124, 125, 127, 199, 420, 554], "errp": [116, 120, 124, 125, 127, 199, 420, 554], "fluxmap": [116, 118, 119, 127, 133, 409, 424, 435, 490], "npred_excess": [116, 117, 119, 121, 127, 437, 445, 452, 490], "norm_err": [116, 117, 119, 121, 127, 133, 382, 445, 456, 490], "estimate_excess_map": 116, "estimate_exposure_reco_energi": 116, "tophat2dkernel": 116, "reco_exposur": 116, "estimate_kernel": [116, 127], "estimate_mask_default": [116, 127], "reference_model": [117, 119, 427, 440], "filter_success_nan": [117, 119], "typic": [117, 364, 367, 369, 376, 380, 381, 382, 383, 385, 390, 391, 428, 433, 437, 445, 447, 449, 450, 455, 456, 458, 461, 463, 464, 480, 487, 488, 489, 497, 501, 550, 551], "raw": [117, 168, 478], "hpxgeom": [117, 180, 182, 183, 404, 409, 420, 468, 503], "reli": [117, 358, 363, 364, 368, 369, 373, 377, 382, 383, 401, 406, 409, 420, 429, 439, 461, 480, 554], "offer": [117, 361, 369, 384, 385, 390, 391, 418, 433, 457, 459, 463, 492], "norm_errn": [117, 119, 455, 478, 490], "norm_errp": [117, 119, 455, 478, 490], "norm_ul": [117, 119, 382, 445, 455, 456, 478, 490], "norm_scan": [117, 382, 431, 432, 490], "stat_scan": [117, 119, 120, 121, 124, 125, 199, 270, 431, 432, 457, 465, 490], "relev": [117, 271, 272, 341, 358, 364, 373, 378, 382, 387, 431, 432, 435, 449, 450, 451, 462, 464, 467, 469, 470, 476, 477, 488, 489, 556], "n_dof": [117, 119, 490], "succeed": 117, "available_quant": [117, 119], "null": [117, 119, 120, 121, 124, 125, 269, 271, 272, 432, 436, 437, 439, 442, 463, 476, 490, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554], "hypothesi": [117, 119, 120, 121, 124, 125, 269, 271, 272, 429, 435, 442, 490, 492, 551, 554], "dnde_err": [117, 119, 490], "dnde_ref": [117, 119, 382], "e2dnde_err": [117, 119], "e2dnde_errn": [117, 119, 455], "e2dnde_errp": [117, 119, 455], "e2dnde_ref": [117, 119], "e2dnde_ul": [117, 119, 455], "eflux_err": [117, 119, 382], "eflux_errn": [117, 119], "eflux_errp": [117, 119], "eflux_ref": [117, 119], "eflux_ul": [117, 119], "energy_ref": [117, 119], "fluxestim": [117, 119, 120, 379, 405, 407, 408, 409, 411, 424], "flux_errn": [117, 119, 455], "flux_errp": [117, 119, 455], "flux_ref": [117, 119, 382], "flux_sensit": [117, 119], "flux_ul": [117, 119, 127, 455], "has_any_t": [117, 119], "has_stat_profil": [117, 119], "has_success": [117, 119], "has_ul": [117, 119], "is_convertible_to_flux_sed_typ": [117, 119], "niter": [117, 119, 127, 435], "norm_sensit": [117, 119], "npred_excess_err": [117, 119], "npred_excess_errn": [117, 119], "npred_excess_errp": [117, 119], "npred_excess_ref": [117, 119], "npred_excess_ul": [117, 119], "reference_model_default": [117, 119], "reference_spectral_model": [117, 119], "sed_type_plot_default": [117, 119], "ll": [117, 119, 127, 361, 363, 375, 391, 427, 428, 431, 433, 436, 437, 441, 448, 449, 450, 451, 452, 552, 554], "stat_nul": [117, 119, 120, 121, 124, 125, 127, 271, 272, 424, 435, 445, 490], "ts_scan": [117, 119], "all_quant": [117, 119], "hdu_band": [117, 119, 140, 141, 147, 152, 155, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 194, 195], "flux_map": [117, 119, 382, 454], "from_map": [117, 119], "infer": [117, 119, 180, 181, 182, 183, 185, 193, 194, 195, 212, 359, 476, 504], "iter_by_axi": [117, 119, 182, 183, 185, 191, 194, 195], "slice_by_coord": [117, 119, 424], "slice_by_tim": [117, 119], "to_map": [117, 119], "_model": 117, "sedtypeenum": 118, "targetmetadata": 118, "155707": 118, "flux_metadata_fits_kei": 118, "hawc_crab": [119, 440, 492], "hawc19_flux_point": [119, 440, 492], "geomspac": [119, 386], "from_tabl": [119, 136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 184, 186, 187, 191, 192, 224, 420, 427], "make_path": [119, 440, 456], "flux_points_ctb_37b": 119, "txt": [119, 383, 385, 462, 468], "csv": 119, "delimit": 119, "comment": [119, 358, 359, 363, 367, 371, 372, 374, 375, 377, 379, 381, 383, 384], "differential_flux": 119, "lower_error": 119, "upper_error": 119, "time_format": [119, 192, 423, 451], "plot_ts_profil": [119, 431, 432, 445, 449], "colorbar": [119, 136, 137, 139, 142, 143, 144, 149, 150, 151, 153, 195, 346, 352, 457, 460], "recompute_ul": 119, "recomput": [119, 382], "binlik": 119, "flux_points_recomput": 119, "95451985e": 119, "22245374e": 119, "resample_axi": [119, 180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 353, 406, 448, 450], "axis_new": [119, 134, 448, 450], "rebin": [119, 134, 373, 411, 424, 448, 450, 456], "flat": [119, 128, 144, 154, 180, 181, 186, 188, 190, 193, 196, 197, 234, 369, 382], "timemapaxi": [119, 134, 184, 409, 424, 448, 450, 451], "generalis": [119, 377, 403, 458], "binnedtimeseri": [119, 373], "guess": [119, 181, 183, 424], "3f": [119, 442, 553, 554], "fp": [119, 134, 382, 476, 490, 492], "334": [119, 468], "423e": 119, "135e": 119, "2734": 119, "288": [119, 434], "780e": 119, "082e": 119, "4112": [119, 420], "sum_over_energy_group": [120, 127, 441, 445], "within": [120, 123, 132, 181, 195, 209, 210, 211, 217, 221, 222, 223, 224, 225, 232, 240, 244, 246, 247, 258, 261, 357, 358, 359, 363, 367, 372, 374, 375, 376, 377, 378, 381, 383, 384, 386, 388, 389, 390, 392, 412, 415, 417, 421, 423, 432, 433, 439, 442, 449, 450, 451, 455, 458, 459, 460, 463, 464, 468, 472, 478, 488, 491, 492, 551], "latest": [120, 175, 260, 287, 361, 365, 378, 383, 384, 387, 391, 420, 427, 434, 436, 439, 440, 441, 447, 451, 457, 467, 489, 505], "binned_likelihood": 120, "2018a": 120, "612a": 120, "1h": [120, 152], "norm_min": [120, 121, 124], "norm_max": [120, 121, 124], "norm_n_valu": [120, 121, 124], "norm_valu": [120, 121, 124], "reoptim": [120, 124, 125, 199, 399, 445, 449, 457, 465, 476], "physic": [120, 121, 124, 127, 307, 308, 357, 382, 386, 400, 432, 440, 460, 463, 465, 467, 476, 490, 492, 528, 551, 554, 555], "cpu": [120, 121, 124, 127, 307, 308, 371], "estimate_best_fit": [120, 121, 124, 125], "name_err": [120, 121, 124, 125], "estimate_count": [120, 121, 124, 125], "estimate_errn_errp": [120, 121, 124, 125], "_errp": [120, 121, 124, 125], "_errn": [120, 121, 124, 125], "estimate_flux_point": [120, 121, 124], "estimate_npr": [120, 121, 124, 125], "estimate_npred_excess": [120, 121, 124], "estimate_scan": [120, 121, 124, 125], "name_scan": [120, 121, 124, 125], "estimate_t": [120, 121, 124, 125], "estimate_ul": [120, 121, 124, 125], "name_ul": [120, 121, 124, 125], "get_scale_model": [120, 121, 124], "scalespectralmodel": [120, 121, 124, 242, 381, 463], "backend_default": [121, 124, 127], "make_orthogonal_rectangle_sky_region": [121, 445], "1e7": [121, 537], "2010": [121, 142, 212, 229, 359, 518, 551, 556], "start_po": [121, 320, 445], "0d": [121, 445, 456, 513], "end_po": [121, 320, 445], "prof_mak": 121, "fermi_prof": 121, "projected_distance_axi": 121, "annulu": [121, 319, 505], "x_ref": [122, 445], "x_min": [122, 312, 314, 445], "x_max": [122, 312, 314, 445], "profile_err": 122, "uniti": [122, 184, 259, 421, 511], "plot_profil": 122, "plot_err": 122, "x_j": 122, "sum_i": 122, "x_": 122, "h_i": 122, "coeffici": [122, 225, 229, 518], "neglect": [122, 168, 427, 459, 490, 555], "_i": 122, "xref": 122, "uniform_filt": [122, 195], "gaussian_filt": [122, 195], "x_edg": 123, "fermi_ct": 123, "image_err": 123, "imageprofil": 123, "fulli": [124, 180, 181, 190, 193, 258, 367, 368, 375, 379, 384, 388, 391, 401, 403, 411, 428, 448, 463, 467, 469, 470, 480], "final": [124, 358, 359, 365, 366, 368, 371, 372, 374, 375, 377, 379, 381, 383, 384, 388, 390, 392, 403, 404, 405, 427, 428, 429, 431, 439, 441, 443, 444, 449, 450, 452, 454, 456, 457, 459, 461, 464, 468, 472, 476, 477, 478, 488, 489, 490], "estimate_time_bin_flux": 124, "expand_map": 124, "expand": [124, 324, 368, 409], "emin": [124, 237, 263, 436, 442, 531], "emax": [124, 237, 263, 436, 442, 531], "null_valu": [125, 269, 445], "150": [125, 132, 133, 397, 429, 431, 443, 444, 460, 478], "addition": [125, 370, 456, 457, 460, 462, 463], "gamma_min": [126, 427], "bkg_syst_fract": [126, 427], "bkg_sy": 126, "percent": 126, "estimate_min_e2dnd": 126, "estimate_min_excess": 126, "kernel_width": [127, 435, 441], "downsampling_factor": [127, 441], "rtol": [127, 333, 358], "simplifi": [127, 189, 365, 367, 369, 376, 382, 399, 402, 403, 404, 406, 409, 413, 420, 429, 435, 497, 555], "stewart": [127, 280, 435, 551], "2009": [127, 280, 399, 435, 551], "spatail": 127, "powerlawspectr": 127, "truncat": [127, 305, 409], "speed": [127, 287, 361, 391, 401, 403, 411, 417, 418, 457], "omit": [127, 359, 439, 467, 552], "precis": [127, 143, 149, 151, 153, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 358, 376, 383, 384, 444], "stewart2009": [127, 551, 554], "400": [127, 436, 441, 445, 455, 460, 478, 546], "estimate_fit_input_map": 127, "estimate_flux_default": 127, "approxim": [127, 168, 169, 181, 182, 183, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 271, 272, 298, 369, 372, 400, 427, 457, 467, 490, 501, 510, 511, 514, 515, 551], "estimate_flux_map": 127, "estimate_pad_width": 127, "properli": [127, 175, 363, 373, 384, 421, 422, 431, 432, 457, 476, 488, 553], "flux_quant": [128, 129, 130, 448], "halv": [128, 276, 424], "compute_flux_doubl": 128, "timescal": [128, 217, 277, 383, 448], "rapid": [128, 277, 364, 367, 382, 383], "variat": [128, 225, 277, 364, 374, 427, 448, 458, 459, 502, 554], "clearli": [128, 358, 363, 364, 372, 375, 383], "evid": [128, 455], "agn": [128, 276, 372, 431, 448, 449, 451, 467], "flare": [128, 276, 390, 403, 404, 426, 448, 449, 451, 453, 472, 488, 489, 490, 500, 501], "episod": 128, "rise": [128, 223, 448, 542], "fall": [128, 165, 192, 210, 232, 358, 365, 367, 368, 375, 418, 419, 448], "brown2013": 128, "\u03b3": [128, 480, 551], "radio": [128, 372, 460], "quasar": 128, "pk": [128, 404, 448, 450, 451, 455, 464, 478, 518], "1510": 128, "089": [128, 426, 457, 466], "brown": [128, 448], "2013": [128, 378, 384, 388, 397, 448], "academ": 128, "oup": 128, "com": [128, 314, 315, 326, 361, 378, 387, 388, 391], "mnra": 128, "articl": [128, 277, 363, 428, 450], "431": [128, 366, 445, 456], "824": [128, 416, 462], "1054498": 128, "compute_fpp": 129, "compute_fvar": [130, 277], "fvar": [130, 278, 373, 416], "min_dist": [132, 133, 165, 435, 441, 501], "finder": [132, 165, 166, 409, 418, 435], "maxima": [132, 201, 203], "spuriou": 132, "increas": [132, 157, 187, 192, 211, 219, 222, 358, 367, 385, 450, 459, 488, 509], "highest": [132, 168, 448, 459, 467, 478], "photutil": [132, 358, 372, 418], "scikit": [132, 358, 372, 375, 378, 418, 461], "191": [132, 410, 426, 548], "161": [132, 366, 431, 441, 455], "118": [132, 439], "266": [132, 133, 372, 434, 435, 441, 443, 447, 460, 462, 478], "41924": 132, "98772": 132, "124": [132, 370, 431, 435, 455, 462], "80571": 132, "14079": 132, "4498": 132, "257": [132, 426, 434, 453], "264": [132, 413, 441], "86178": 132, "97529": 132, "3784": 132, "204": 132, "103": [132, 397, 420], "14201": 132, "10041": 132, "3493": 132, "282": [132, 133], "263": [132, 133, 435, 462], "78083": [132, 133], "31": [132, 133, 367, 368, 381, 382, 394, 421, 426, 429, 431, 434, 435, 438, 439, 442, 445, 446, 450, 451, 455, 456, 459, 460, 462, 465, 469, 476, 478], "12704": [132, 133], "find_peak": [133, 418, 435, 441], "158": [133, 427, 432, 439], "05019": 133, "70181": 133, "28551": 133, "06450": 133, "827e": 133, "385e": 133, "92": [133, 434, 435, 460, 467], "133": 133, "07022": 133, "27": [133, 364, 424, 426, 435, 441, 454, 456, 466, 478, 553], "31834": 133, "37058": 133, "08342": 133, "669e": 133, "259e": 133, "176": [133, 397, 452, 455], "134": [133, 432, 435, 441], "80492": 133, "09805": 133, "30561": 133, "06549": 133, "025e": 133, "484e": 133, "55027": 133, "12611": 133, "448e": [133, 440], "249e": 133, "fixed_bin": 134, "get_edges_fixed_bin": 134, "get_edges_min_t": 134, "group_siz": [134, 450], "ts_threshold": [134, 269], "lc_1d": [134, 448, 449, 450, 451], "pks2155_hess_lc": [134, 448], "adjac": [134, 187, 409, 450, 460, 501], "new_axi": 134, "crab_hess_fp": 134, "satisfi": [135, 159, 181, 182, 183, 287, 462, 492], "counts_min": 135, "background_min": 135, "excess_min": 135, "sqrt_ts_min": [135, 431], "npred_min": 135, "npred_background_min": 135, "npred_signal_min": 135, "23523": [135, 162, 394, 431, 432, 440, 449, 456, 457, 459, 470, 476, 477, 489, 492, 552], "23526": [135, 431, 432, 440, 449, 456, 457, 459, 470, 476, 477, 552], "spectrum_dataset": [135, 370, 452, 456], "resampled_energy_edg": 135, "fov_align": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 458], "fovalign": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 458], "backgroundirf": [136, 137], "mapax": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 406, 409, 411, 460], "sr": [136, 137, 138, 149, 180, 181, 190, 193, 207, 259, 262, 427, 434, 436, 439, 441, 447, 451, 455, 456, 458, 460, 463, 467, 468, 497, 508, 516], "default_interp_kwarg": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 416], "bounds_error": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 358, 458], "values_scal": [136, 137, 138, 191, 195, 224, 255, 259, 260, 299, 421, 423, 444, 458], "extrapol": [136, 137, 138, 162, 182, 183, 185, 191, 194, 195, 212, 260, 299, 409, 414, 416, 417, 458, 460, 467, 468, 504], "default_unit": [136, 137, 142, 144, 149, 154, 458], "has_offset_axi": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154], "pointlik": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 417, 501], "required_ax": [136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 458], "cumsum": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195], "integrate_log_log": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154], "trapezoid": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 265, 298], "interp_missing_data": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154], "is_allclos": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195], "rtol_ax": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195], "atol_ax": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195], "06": [136, 137, 138, 139, 140, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 185, 190, 191, 193, 194, 195, 426, 439, 440, 441, 446, 453, 455, 456, 457, 458, 459, 460, 466, 468, 471, 479], "allclos": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 184, 185, 187, 191, 192, 194, 195, 333], "close": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 259, 333, 334, 335, 367, 372, 387, 412, 423, 424, 457, 537], "axes_loc": [136, 137, 139, 142, 143, 144, 149, 151, 153, 195, 346], "kwargs_colorbar": [136, 137, 139, 142, 143, 144, 149, 151, 153, 195, 346], "append_ax": [136, 137, 139, 142, 143, 144, 149, 151, 153, 195, 346], "plot_at_energi": [136, 137, 467], "ncol": [136, 137, 182, 183, 185, 191, 194, 195, 351, 355, 428, 431, 435, 437, 439, 441, 452, 456, 457, 460, 461, 501, 518], "plot_energy_depend": [136, 142, 467, 494], "versu": [136, 142, 269, 271, 272, 467, 486], "plot_offset_depend": [136, 142], "to_3d": [136, 422, 424], "to_unit": [136, 137, 138, 139, 142, 143, 144, 146, 149, 151, 153, 154, 182, 183, 185, 191, 194, 195], "fov_lon": [137, 458, 467, 497], "fov_lat": [137, 458, 467, 497], "orient": [137, 145, 146, 358, 369], "learn": [137, 142, 358, 375, 378, 387, 390, 392, 394, 418, 429, 431, 435, 441, 442, 443, 445, 448, 455, 456, 457, 460, 463, 465, 467, 472, 478, 552], "bcf": [137, 141, 142, 143, 152, 427, 434, 447, 451, 458, 467], "f4": [137, 142, 433, 456, 458, 460, 467, 468], "background2d": [137, 138, 148, 405, 412, 420, 422, 424, 495], "to_2d": [137, 470], "Its": [139, 370, 384, 385, 409, 411, 445, 450, 465, 477, 494, 495, 496, 498], "from_gauss": [139, 140, 144, 150, 152, 155, 496], "pdf_matrix": 139, "pdf": [139, 143, 168, 238, 239, 252, 253, 309, 351, 359, 440, 443, 454, 459, 482, 484, 485, 486, 488, 489, 494, 495, 496, 498, 501, 505, 535, 536, 554, 557], "edisp_kernel": [139, 456, 496], "diagon": [139, 140, 141, 376, 386, 468], "perfect": 139, "anyth": [139, 374, 552], "energy_true_axi": 139, "from_energy_edg": [139, 187, 353, 456, 458], "plot_matrix": [139, 456, 468], "pdf_threshold": [139, 140, 144], "energydispers": [139, 140, 141, 144, 370, 404, 414, 417, 418], "rm": [139, 140, 144, 381, 433, 457, 494, 496, 497, 498, 511, 540, 541, 542, 543, 544, 545], "suppress": [139, 140, 144, 492], "hdu1": 139, "hdu2": 139, "ebound": [139, 187, 505], "get_bia": 139, "get_bias_energi": 139, "bracket": [139, 199, 421, 423], "bias_energi": 139, "get_mean": 139, "get_resolut": 139, "percentag": [139, 168, 459], "pdf_in_safe_rang": 139, "lo_threshold": 139, "hi_threshold": 139, "plot_bia": [139, 144], "heasarc": [139, 187], "cal_gen_92_002_summari": 139, "ereco": [139, 458], "memo": [139, 187], "cal_gen_92_002": [139, 187], "tab": [139, 363, 439, 445, 449, 465, 501], "edisp_kernel_map": [140, 469], "exposure_map": [140, 141, 147, 152, 155, 172, 173, 178, 458], "irfmap": [140, 141, 152, 155, 390, 406, 492], "from_edisp_kernel": 140, "exposure_hdu": [140, 141, 147, 152, 155], "exposure_hdu_band": [140, 141, 147, 152, 155], "gtpsf": [140, 141, 147, 152, 155, 187, 435, 468], "irf_map": [140, 141, 147, 152, 155], "get_edisp_kernel": [140, 141, 404, 409, 456, 468, 496], "hdu_list": [140, 141, 143, 147, 151, 152, 153, 155, 182, 183, 194, 195], "to_region_nd_map": [140, 141, 147, 152, 155, 183, 191, 195, 406, 409, 468], "make_edisp_map": 141, "make_map_exposure_true_energi": [141, 364, 458], "from_edg": [141, 182, 183, 185, 187, 191, 194, 195, 434, 447, 451, 458, 468, 469], "logspac": [141, 182, 183, 185, 191, 194, 195, 434, 447, 451, 452, 454, 460, 484, 485, 486, 505], "edisp2d": [141, 144, 359], "aeff2d": 141, "exposure_geom": 141, "squash": [141, 180, 181, 184, 186, 187, 190, 192, 193, 423, 427, 437, 456, 460], "po": [141, 193, 501], "sample_coord": [141, 152, 155, 182, 183, 185, 191, 194, 195, 403, 405, 420], "chunk_siz": [141, 152, 155], "chunk": [141, 152, 155], "to_edisp_kernel_map": [141, 409, 496], "offset_axi": [142, 144, 149, 154], "scratch": [142, 358, 368, 372, 388, 439, 461], "from_bound": [142, 144, 152, 181, 187, 193, 382, 440, 443, 444, 456, 458, 459, 460, 470, 504, 505], "from_parametr": [142, 494], "cherenkov": [142, 371, 390, 395, 428, 431, 437, 449, 459, 467, 469, 501, 502, 551], "abramowski": 142, "2010mnra": 142, "402": [142, 432], "1342a": 142, "eff": [142, 494, 497, 510, 511], "g_1": 142, "g_2": 142, "g_3": 142, "hess2": [142, 494], "parametricpsf": [143, 151, 409, 411], "tripl": 143, "plot_containment_radiu": [143, 149, 151, 153], "png": [143, 366, 394, 482, 484, 485, 486, 488, 489, 494, 495, 496, 498, 501, 505, 554, 557], "hire": [143, 378, 482, 484, 485, 486, 488, 489, 494, 495, 496, 498, 501, 505, 554, 557], "required_paramet": [143, 151, 153], "sigma_3": [143, 458], "ampl_2": [143, 458], "ampl_3": [143, 458], "containment_radiu": [143, 149, 151, 152, 153, 155, 427, 456, 458, 461], "psf_valu": [143, 151, 153], "evaluate_contain": [143, 151, 153, 411], "evaluate_direct": [143, 151, 153], "evaluate_paramet": [143, 151, 153], "neighbor": [143, 151, 153, 411, 418], "plot_containment_radius_vs_energi": [143, 149, 151, 152, 153, 155, 467, 468], "plot_psf_vs_rad": [143, 149, 151, 152, 153, 155, 468], "to_psf3d": [143, 151, 153], "to_edisp_kernel": [144, 496], "minu": [144, 452], "plot_migr": 144, "effective_area": [148, 371, 467], "energydependentmultigausspsf": [148, 397, 458, 467, 498], "psfking": [148, 411, 498], "recopsfmap": [148, 420, 423], "dim": [149, 316, 414, 415, 441, 551], "rad_index": 149, "offset_index": 149, "energy_index": 149, "tof": 149, "psf_kernel_map": [150, 468], "some_map": 150, "fill_by_coord": [150, 182, 183, 185, 191, 194, 195, 460, 468, 504], "get_psf_kernel": [150, 152, 155, 424, 468], "max_radiu": [150, 152, 155, 193, 468], "some_map_convolv": 150, "plot_grid": [150, 182, 183, 185, 191, 194, 195, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 382, 411, 422, 439, 456, 458, 459, 460, 461, 463, 469], "doctest": [150, 346, 359], "from_spatial_model": 150, "spatiamodel": 150, "plot_kernel": 150, "keepdim": [150, 152, 155, 182, 183, 185, 191, 194, 195, 398, 403, 459], "uniform": [150, 199, 316, 358, 367, 369, 370, 380, 382, 386, 400, 401, 405, 409, 428, 460, 465, 550], "weighted_kernel": 150, "king": [151, 402, 413, 414, 415, 416, 417, 418, 458, 498], "parametris": [151, 381, 403, 496, 498, 509, 510, 511, 512, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547], "load_irf_dict_from_fil": [152, 423, 427, 434, 443, 444, 447, 451, 467], "mapdatasetmak": [152, 160, 169, 371, 403, 406, 409, 412, 420, 441, 443, 444, 447, 452, 458, 459, 469, 476, 477, 492, 499, 502], "pointing_posit": [152, 434, 444, 447], "make_psf": [152, 162, 169, 419], "upsample_geom": 152, "upsampl": [152, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 400, 420], "psf_kernel": [152, 468], "energy_nam": [152, 155], "containment_radius_map": [152, 155], "precision_factor": [152, 155, 182, 183, 185, 191, 194, 195], "overwritten": [152, 155, 299], "half": [152, 155, 187, 193, 259], "corr_coord": [152, 155], "weigh": [152, 155, 465], "psf_out": [152, 155], "is_fixed_rad_max": 154, "from_irf": 154, "plot_rad_max_vs_energi": [154, 433], "psf_map_reco": [155, 469], "irf_dict": 156, "r_out_max": 157, "stepsiz": 157, "threshold_alpha": 157, "fixed_width": 157, "exclusion_mask": [157, 159, 164, 165, 166, 167, 170, 431, 437, 441, 459, 461, 477, 499, 501, 502], "ringbackgroundmak": [157, 160, 403, 437, 459, 502], "action": [157, 363, 368, 374, 384, 388, 409, 451], "fixed_r_in": 157, "ring2dkernel": [157, 167], "make_cub": 157, "dataset_on_off": [157, 163, 164, 167, 427, 431, 433, 434, 437, 441, 450, 459, 501, 502], "stack_dataset": [158, 452, 459], "cutout_mod": 158, "cutout_width": 158, "chain": [158, 371, 374, 403, 459, 492, 502], "safemaskmak": [158, 160, 379, 403, 404, 409, 411, 412, 424, 428, 431, 433, 441, 447, 450, 452, 459, 461, 469, 476, 477, 499, 500, 501, 502], "safe_mask_mak": [158, 428, 452, 459, 499, 501, 502], "callback": [158, 552], "error_callback": 158, "make_dataset": 158, "min_count": 159, "min_npred_background": 159, "greater": [159, 351], "available_method": [159, 168], "make_background_fit": 159, "make_background_scal": 159, "make_default_fov_background_model": 159, "make_exclusion_mask": 159, "reflect": [160, 164, 165, 166, 170, 179, 367, 372, 374, 377, 379, 390, 402, 409, 411, 414, 415, 418, 428, 431, 432, 433, 441, 450, 461, 500, 551], "reflectedregionsbackgroundmak": [160, 165, 403, 428, 431, 433, 441, 450, 459], "adaptiveringbackgroundmak": [160, 403, 502], "fovbackgroundmak": [160, 404, 409, 459, 476, 477], "phasebackgroundmak": [160, 403, 423, 452], "spectrumdatasetmak": [160, 403, 409, 427, 428, 431, 433, 434, 441, 450, 451, 452, 459, 501], "datasetsmak": [160, 411, 423, 459, 464, 492], "background_oversampl": [162, 169, 459], "background_interp_missing_data": 162, "background_pad_offset": 162, "made": [162, 169, 190, 193, 201, 203, 210, 232, 287, 319, 320, 358, 361, 363, 374, 377, 379, 382, 383, 384, 409, 420, 421, 431, 435, 439, 440, 459, 467, 505, 516, 551], "mapmak": [162, 374, 399, 403, 418], "684": 162, "102": [162, 435, 553, 554], "01e": [162, 394, 427, 455], "10e": [162, 455, 458], "40000": [162, 477], "available_select": [162, 169], "make_background": [162, 169], "make_count": [162, 163, 164, 169], "make_edisp": [162, 169], "make_edisp_kernel": [162, 169], "make_exposur": [162, 169], "use_region_cent": [162, 169, 172, 173, 175, 176, 409, 428], "make_exposure_irf": [162, 169], "make_meta_t": [162, 169], "on_phas": [163, 452], "off_phas": [163, 452], "phase_column_nam": [163, 452], "datastoreobserv": [163, 164, 364, 368, 404, 417], "make_counts_off": [163, 164], "region_find": [164, 433], "regionsfind": [164, 165, 170, 411], "reflectedregionsfind": [164, 170, 401, 501], "hand": [164, 358, 361, 366, 369, 378, 384, 386, 421, 457, 472, 492], "pointskyregion": [164, 169, 190, 236, 412, 433, 444], "angle_incr": 165, "min_distance_input": [165, 501], "max_region_numb": [165, 501], "tangent": [165, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259], "consecut": [165, 317, 358, 383], "target_posit": [165, 428, 431, 433, 441, 449, 450, 477], "80": [165, 431, 433, 434, 435, 456, 460, 468, 501, 528], "19879005": 165, "57300957": 165, "1438": 165, "arcsec": 165, "regionfind": [165, 166, 170], "renormalis": 167, "adaptiveringbackgroundestim": [167, 364], "make_maps_off": 167, "maps_off": 167, "aeff_perc": [168, 428, 431, 432, 441, 450, 459, 469, 501], "bias_perc": 168, "reproject": [168, 182, 183, 185, 191, 194, 195, 354, 358, 364, 372, 375, 382, 403, 410, 418, 420, 424, 460, 461], "make_mask_bkg_invalid": 168, "make_mask_energy_aeff_default": 168, "make_mask_energy_aeff_max": 168, "mandatori": [168, 361, 371, 384, 444, 463], "make_mask_energy_bkg_peak": 168, "powerlaw": [168, 238, 240, 369, 370, 374, 415, 417, 426, 428, 436, 444, 445, 455, 463, 465, 477, 506, 532, 548], "motiv": [168, 363, 365, 366, 372, 375, 377, 387, 463, 492], "1910": [168, 459], "08088": [168, 459], "make_mask_energy_edisp_bia": 168, "make_mask_offset_max": 168, "latter": [169, 199, 369, 371, 373, 379, 382, 385, 403, 433, 434, 443, 444, 447, 461, 462, 499, 501, 551, 553], "theta2": [169, 179, 356, 417], "n_off_region": [170, 433], "simpler": [170, 366, 371, 372, 380], "actual": [170, 333, 334, 335, 357, 358, 359, 363, 367, 369, 371, 373, 374, 382, 383, 385, 387, 434, 444, 447, 450, 456, 457, 459, 460, 461, 465, 468, 469, 477, 478, 499, 501, 551, 552, 554, 556], "rhe": 171, "ontim": [175, 368, 443, 456], "full_enclosur": [175, 458], "theta_squared_axi": [179, 470], "position_off": 179, "on_posit": 179, "mirror": 179, "pos_on": 179, "as_energy_tru": [180, 181, 190, 193], "center_coord": [180, 181, 186, 190, 193], "center_pix": [180, 181, 190, 193], "center_skydir": [180, 181, 190, 193, 459, 460, 468, 469, 499, 501, 502], "has_energy_axi": [180, 181, 190, 193], "is_allski": [180, 181, 190, 193], "is_flat": [180, 181, 186, 190, 193], "is_imag": [180, 181, 190, 193], "contains_pix": [180, 181, 190, 193], "pix": [180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 504], "coord_to_idx": [180, 181, 184, 186, 187, 190, 192, 193, 460], "c_0": [180, 181, 190, 193], "c_n": [180, 181, 190, 193], "c_i": [180, 181, 190, 193], "vector": [180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 460, 496, 504], "coord_to_pix": [180, 181, 184, 186, 187, 190, 192, 193, 460], "constructor": [180, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 423, 477, 503], "crop_width": [180, 181, 182, 183, 185, 190, 191, 193, 194, 195], "data_nbyt": [180, 181, 190, 193], "float32": [180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 436, 441, 460], "megabyt": [180, 181, 190, 193], "mb": [180, 181, 190, 193, 366, 390, 392, 426, 430, 438, 446, 453, 466, 467, 468, 470, 471, 473, 475, 479, 507, 517, 538, 548], "energy_mask": [180, 181, 190, 193, 405, 433, 439, 452, 456, 457, 461, 465], "round_to_edg": [180, 181, 190, 193], "get_coord": [180, 181, 186, 190, 193, 402, 409, 418, 444, 460, 461, 501, 505], "get_idx": [180, 181, 190, 193, 505], "pix_to_coord": [180, 181, 184, 186, 187, 190, 192, 193, 424], "pix_to_idx": [180, 181, 184, 186, 187, 190, 192, 193], "lie": [180, 181, 187, 190, 193], "rename_ax": [180, 181, 182, 183, 185, 186, 190, 191, 193, 194, 195, 420], "replace_axi": [180, 181, 190, 193], "solid_angl": [180, 181, 190, 193, 460, 505], "solid": [180, 181, 190, 193, 207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 262, 374, 397, 399, 400, 401, 418, 437, 459, 460, 467, 495, 501, 551], "to_bands_hdu": [180, 181, 190, 193], "to_cub": [180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 406, 437, 505], "higher": [180, 181, 182, 183, 185, 190, 191, 193, 194, 195, 223, 361, 364, 369, 374, 377, 379, 391, 429, 444, 448, 458, 460, 505], "nside": [181, 182, 183, 420, 468, 503], "less": [181, 183, 187, 224, 258, 279, 358, 363, 365, 376, 388, 417, 457, 463, 464, 465], "encompass": [181, 503, 505], "hpx_reg": 181, "axes_nam": [181, 182, 183, 185, 190, 191, 193, 194, 195], "data_shape_ax": [181, 190, 193], "ipix": 181, "everi": [181, 183, 195, 259, 358, 361, 366, 367, 368, 370, 374, 383, 385, 388, 428, 431, 460, 477, 552], "is_hpx": [181, 190, 193], "is_region": [181, 190, 193], "is_regular": [181, 190, 193], "irregular": [181, 193, 504], "npix": [181, 190, 193, 194, 195, 431, 441, 458, 468, 501, 505, 508, 512], "npix_max": 181, "shape_ax": [181, 193], "supersed": [181, 182, 183, 193, 194, 195], "diamet": [181, 182, 183, 428], "from_hdu": [181, 183, 195], "hpx": [181, 182, 183, 185, 194, 195, 372, 409, 460, 468], "bintabl": [181, 182, 183, 185, 194, 195], "fgst": [181, 182, 183, 185, 186, 187, 193, 194, 195, 460], "ccube": [181, 182, 183, 185, 186, 187, 193, 194, 195, 460], "ltcube": [181, 182, 183, 185, 194, 195, 460], "bexpcub": [181, 182, 183, 185, 194, 195, 460], "srcmap": [181, 182, 183, 185, 194, 195, 460], "spars": [181, 182, 183, 185, 190, 193, 194, 195, 400, 409, 417, 444, 460], "galprop": [181, 182, 183, 185, 194, 195], "galprop2": [181, 182, 183, 185, 194, 195], "healpi": [181, 357, 365, 367, 375, 389, 390, 392, 401, 409, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 503], "get_index_list": 181, "ilist": 181, "global_to_loc": 181, "idx_glob": 181, "ravel": [181, 443], "idx_loc": 181, "interp_weight": 181, "is_align": [181, 187, 192, 193], "local_to_glob": 181, "tild": [181, 193], "ind": [181, 193, 210, 232], "mask_map": [181, 193, 426, 461, 466], "to_binsz": [181, 190, 193, 409], "to_nsid": [181, 183], "upgrad": [181, 357, 383, 391], "downgrad": [181, 357], "to_swap": [181, 182, 183], "swap": 181, "vice": 181, "versa": 181, "to_wcs_geom": [181, 190, 505], "ait": [181, 182, 183, 474], "width_pix": [181, 182, 183], "whichev": [181, 182, 183], "to_wcs_til": [181, 183], "nside_til": [181, 183], "tile": [181, 183], "divid": [181, 187, 192, 379, 382, 443, 464, 469, 470], "superpixel": 181, "tangenti": [181, 505], "super": [181, 183, 251, 252, 253, 426, 443, 470, 506, 538, 540], "wcs_tile": [181, 183], "is_mask": [182, 183, 185, 191, 194, 195], "coadd": [182, 183, 185, 191, 194, 195], "map_in": [182, 183, 185, 191, 194, 195], "map_typ": [182, 183, 185, 191, 194, 195, 460, 504], "factori": [182, 183, 194, 195, 372, 377, 381, 503, 505], "pad_with": [182, 183, 185, 191, 194, 195], "share": [182, 183, 185, 189, 191, 194, 195, 358, 363, 370, 373, 377, 380, 391, 409, 411, 423, 439, 440, 461, 462, 492, 552], "becaus": [182, 183, 185, 189, 191, 194, 195, 358, 359, 361, 363, 365, 369, 370, 372, 373, 377, 381, 382, 385, 388, 409, 411, 428, 429, 432, 445, 450, 452, 459, 460, 461, 462, 467, 468, 469, 476, 477, 478, 488, 492, 552, 555], "preserve_count": [182, 183, 185, 191, 194, 195, 460], "intens": [182, 183, 185, 191, 194, 195, 199, 223, 368, 460, 488], "x_0": [182, 183, 185, 191, 194, 195], "x_n": [182, 183, 185, 191, 194, 195], "x_i": [182, 183, 185, 191, 194, 195], "fill_by_idx": [182, 183, 185, 191, 194, 195, 504], "i_lon": [182, 183, 185, 191, 194, 195], "i_lat": [182, 183, 185, 191, 194, 195], "i_0": [182, 183, 185, 191, 194, 195], "i_n": [182, 183, 185, 191, 194, 195], "i_hpx": [182, 183, 185, 191, 194, 195], "fill_by_pix": [182, 183, 185, 191, 194, 195, 504], "fill_ev": [182, 183, 185, 191, 194, 195, 412, 423, 433, 460, 468, 474], "compliant": [182, 183, 185, 194, 195, 424, 551], "softwar": [182, 183, 185, 194, 195, 372, 373, 375, 384, 385, 388, 460], "scienc": [182, 183, 185, 194, 195, 365, 367, 371, 374, 375, 378, 384, 395, 417, 418, 434, 440, 451, 460, 463, 464, 467, 468, 472, 480, 492, 526, 551, 552], "hpx_map": [182, 183], "get_by_coord": [182, 183, 185, 191, 194, 195, 459, 460, 468, 469, 504], "footprint": [182, 183, 185, 191, 193, 194, 195, 512], "get_by_idx": [182, 183, 185, 191, 194, 195, 460, 504], "get_by_pix": [182, 183, 185, 191, 194, 195, 504], "get_image_by_coord": [182, 183, 185, 191, 194, 195, 460], "axes0": [182, 183, 185, 191, 194, 195], "axesn": [182, 183, 185, 191, 194, 195], "get_image_by_idx": [182, 183, 185, 191, 194, 195], "get_image_by_pix": [182, 183, 185, 191, 194, 195], "time_axi": [182, 183, 185, 191, 194, 195, 444, 460, 505], "m_wc": [182, 183, 185, 191, 194, 195, 460], "500": [182, 183, 185, 191, 194, 195, 435, 441, 443, 444, 460, 467, 468, 478, 509], "get_spectrum": [182, 183, 185, 191, 194, 195], "nansum": [182, 183, 185, 194, 195], "occur": [182, 183, 185, 194, 195, 317, 358, 378, 379, 383, 468], "interp_by_coord": [182, 183, 185, 191, 194, 195, 259, 420, 460], "domain": [182, 183, 185, 191, 194, 195, 358, 372, 448], "interp_by_pix": [182, 183, 185, 191, 194, 195, 255, 256, 460], "p_lon": [182, 185, 191, 194, 195], "p_lat": [182, 185, 191, 194, 195], "p_n": [182, 185, 191, 194, 195], "p_i": [182, 185, 191, 194, 195], "interp_to_geom": [182, 183, 185, 191, 194, 195, 406, 422, 460, 468, 492], "interp_map": [182, 183, 185, 191, 194, 195], "iter_by_imag": [182, 183, 185, 191, 194, 195, 418], "iter_by_image_data": [182, 183, 185, 191, 194, 195, 460], "iter_by_image_index": [182, 183, 185, 191, 194, 195], "mask_nearest_posit": [182, 183, 185, 191, 194, 195], "cval": [182, 183, 185, 191, 194, 195], "consant": [182, 183, 185, 191, 194, 195], "plot_interact": [182, 183, 185, 191, 194, 195, 206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 411, 418, 439, 447, 460, 476, 477], "rc_param": [182, 183, 185, 191, 194, 195, 460], "widget": [182, 183, 185, 191, 194, 195, 439, 447, 460, 476, 477], "explor": [182, 183, 185, 191, 194, 195, 366, 374, 394, 426, 431, 436, 439, 442, 445, 446, 448, 449, 450, 455, 456, 462, 469, 470, 476, 478, 488, 489, 490, 492, 500, 501, 504, 549], "rc_context": [182, 183, 185, 191, 194, 195, 460], "rc": [182, 183, 185, 191, 194, 195, 355, 460], "gll_iem_v06_cutout": [182, 183, 185, 191, 194, 195], "stretch": [182, 183, 185, 191, 194, 195, 348, 349, 353, 435, 439, 445, 447, 459, 460, 462, 468, 476, 477, 478], "font": [182, 183, 185, 191, 194, 195, 359, 460], "auto": [182, 183, 185, 194, 195, 359, 361, 369, 378, 404, 418, 457, 552], "ufunc": [182, 183, 185, 191, 194, 195, 433], "reduce_over_ax": [182, 183, 185, 191, 194, 195, 436, 459, 469], "reorder_ax": [182, 183, 185, 191, 194, 195, 423], "reproject_by_imag": [182, 183, 185, 191, 194, 195, 424], "nd": [182, 183, 185, 191, 194, 195, 255, 256, 379, 460, 505], "reproject_to_geom": [182, 183, 185, 191, 194, 195, 420], "output_map": [182, 183, 185, 191, 194, 195], "resampled_map": [182, 183, 185, 191, 194, 195], "logical_and": [182, 183, 185, 191, 194, 195], "logical_or": [182, 183, 185, 191, 194, 195, 459], "univers": [182, 183, 185, 191, 194, 195, 551], "n_event": [182, 183, 185, 191, 194, 195, 209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 371], "set_by_coord": [182, 183, 185, 191, 194, 195, 460, 504], "set_by_idx": [182, 183, 185, 191, 194, 195, 460, 504], "set_by_pix": [182, 183, 185, 191, 194, 195, 504], "split_by_axi": [182, 183, 185, 191, 194, 195], "sum_over_ax": [182, 183, 185, 191, 194, 195, 346, 418, 437, 439, 445, 452, 456, 459, 461, 462, 468, 477], "reshap": [182, 183, 185, 191, 194, 195, 427, 444, 458, 460], "onto": [182, 183, 185, 191, 193, 194, 195, 345, 364, 477, 488, 492, 504, 550], "to_hdu": [182, 183, 194, 195], "indxschm": [182, 183, 194, 195], "sparsifi": [182, 183, 185, 194, 195], "hdu_out": [182, 183], "imagehdu": [182, 183, 194, 195], "skymap": [182, 183, 185, 191, 194, 195, 372, 414, 415, 444], "opposit": [182, 183], "to_wc": [182, 183], "sum_band": [182, 183], "hpx2wc": [182, 183], "hpxtowcsmap": [182, 183], "wcsmap": [182, 183, 185, 195, 420], "hpxmap": [183, 185, 503], "alloc": [183, 191, 195], "convolution_method": 183, "tan": [183, 190, 372, 401, 431, 460, 468, 501], "likewis": [183, 195], "bigger": 183, "prevent": [183, 212, 287, 409, 439], "convolve_wc": 183, "convolve_ful": 183, "symmetri": [183, 399], "suit": [183, 358, 505], "from_wcs_til": 183, "quickplot": 183, "polygon": [183, 197, 372], "much": [183, 358, 364, 369, 372, 374, 377, 378, 402, 409, 434, 439, 445, 452, 465, 468, 478, 511], "suitabl": 183, "10k": 183, "shade": [183, 191, 195, 457, 550], "nside2resol": 183, "neraest": 183, "fill_nan": 183, "oversampling_factor": [183, 193, 206, 207, 211, 219, 222, 223, 224, 234, 236, 244, 245, 247, 249, 255, 259, 261], "as_plot_cent": [184, 187, 192], "as_plot_edg": [184, 187, 192], "as_plot_label": [184, 187, 192], "as_plot_xerr": [184, 187, 192], "bin_width": [184, 187, 192, 452], "edges_max": [184, 187, 192, 460], "edges_min": [184, 187, 192, 460], "node_typ": [184, 187, 192, 443, 444, 458, 468], "assert_nam": [184, 186, 187, 192], "required_nam": [184, 186, 187, 192], "assert": [184, 186, 187, 192, 333, 334, 335, 361, 369, 381, 460], "agre": [184, 187, 361, 363, 372, 384], "format_plot_xaxi": [184, 187, 192, 458], "n_spatial_ax": 186, "is_unidimension": 186, "unidimension": 186, "iter_with_reshap": 186, "primary_axi": 186, "longest": 186, "bin_volum": [186, 190, 193, 505], "from_default": 186, "bexcub": 186, "index_data": 186, "old": [186, 343, 358, 363, 366, 370, 374, 375, 400, 401, 416, 417, 418, 448], "as_plot_scal": 187, "is_energy_axi": 187, "iter_by_edg": [187, 192], "nbin_per_decad": 187, "use_center_as_plot_label": 187, "contigu": [187, 192, 409], "th": 187, "format_plot_yaxi": [187, 458], "lo_bnd": 187, "hi_bnd": 187, "per_decad": [187, 431, 433, 443, 444, 452, 456, 468, 496, 502], "strict_bound": 187, "frequent": [187, 358, 367, 376, 384, 448, 450, 451, 461, 492, 493, 552], "from_nod": 187, "continu": [187, 365, 367, 368, 371, 372, 374, 375, 377, 378, 383, 394, 397, 398, 401, 409, 414, 415, 416, 418, 431, 444, 461, 504, 551], "column_prefix": 187, "prefix": [187, 369], "coarser": [187, 192, 456], "2e": [187, 427, 428, 429, 443, 444, 450, 455, 457, 462], "to_node_typ": 187, "tth_sec3": 187, "match_by_nam": 188, "arbitrari": [188, 190, 191, 369, 381, 404, 417, 443, 456, 460, 465, 504, 505], "lookup": 188, "apply_mask": 188, "to_fram": 188, "mutablemap": 189, "collect": [189, 232, 358, 360, 385, 388, 416, 417, 432, 456, 462, 480, 489, 493, 497, 551, 556], "kwargs_list": 189, "insensit": 189, "popitem": 189, "setdefault": 189, "lack": [189, 373, 452], "binsz_wc": [190, 191], "adequ": 190, "major": [190, 211, 219, 222, 358, 362, 363, 367, 375, 383, 411, 417, 418, 509, 510, 511], "is_all_point_sky_region": 190, "wish": [190, 361, 376, 442, 457], "contains_wcs_pix": 190, "region_io": 190, "from_region": [190, 211, 423, 501], "compound": [190, 197, 205, 318, 322, 372, 381, 426, 445, 506, 538], "get_wcs_coord_and_weight": 190, "region_coord": 190, "plot_region": [190, 191, 210, 232, 355, 433, 445, 462, 501, 505], "kwargs_point": [190, 210, 232, 433], "path_effect": [190, 210, 232], "line2d": [190, 210, 232], "patheffect": [190, 210, 232], "artist": [190, 210, 232, 509, 510], "as_artist": [190, 191, 463, 505, 509, 510], "sep": [190, 367, 375, 381, 396, 463], "steradian": 190, "to_binsz_wc": 190, "hdu_region": [190, 191], "width_min": 190, "wcs_geom": [190, 210, 232, 460, 505], "ogip_column": 191, "qualiti": [191, 378, 417, 418, 423, 464, 477, 492, 550, 557], "backscal": 191, "region_nd_map": 191, "region_map": [191, 195, 505], "iter_by_axis_data": 191, "plot_hist": [191, 505], "axvspan": [191, 452], "is_contigu": [192, 460], "time_bound": 192, "time_edg": [192, 448, 460], "time_mid": [192, 448], "from_gti": 192, "from_gti_bound": 192, "fgl": [192, 461], "from_time_bound": 192, "linearli": [192, 195, 460, 488], "from_time_edg": [192, 448], "interval_edg": 192, "underflow": 192, "overflow": [192, 433, 451, 540], "outflow": 192, "to_contigu": [192, 460], "to_gti": [192, 424], "cdelt": [193, 195], "crpix": 193, "encapsul": [193, 382, 503], "extent": [193, 210, 232, 372, 435, 463], "data_shape_imag": 193, "footprint_rectangle_sky_region": 193, "rectangleskyregion": [193, 206, 207, 259, 319, 320, 372, 428, 454, 461, 501, 505], "pixel_area": 193, "intermedi": [193, 367, 374, 384, 394, 428, 450], "binary_structur": 193, "binari": [193, 195, 366, 372, 375, 384, 388, 409], "side": [193, 195, 271, 272, 358, 372], "boundary_mask": [193, 461], "eros": [193, 195], "boundari": [193, 259, 386, 414, 457, 463, 504], "refpix": [193, 194, 195], "plate": [193, 460], "carr\u00e9": 193, "1deg": 193, "05deg": 193, "odd_npix": [193, 195], "odd": [193, 195], "cutout_slic": 193, "from_align": [193, 409], "get_pix": 193, "rtol_wc": 193, "region_weight": 193, "to_even_npix": 193, "to_odd_npix": 193, "wcs_map": [194, 195, 351], "commensur": 195, "binary_dil": [195, 461], "use_fft": 195, "dilat": [195, 409], "fftconvolv": 195, "ndimag": [195, 372], "binary_erod": [195, 461], "binary_eros": [195, 409], "erod": 195, "fft": 195, "cutout_and_mask_region": [195, 423], "enclos": [195, 359, 428, 433, 457, 461], "mask_contains_region": 195, "pixregion": 195, "fig": [195, 346, 427, 428, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 445, 449, 451, 452, 454, 457, 461, 465, 501, 502, 511, 515, 518, 550], "simple_norm": 195, "contourf": 195, "to_region_nd_map_histogram": [195, 423], "bins_axi": 195, "map_": [196, 197, 346, 353], "393": [196, 197], "apply_union": 197, "contour": [197, 199, 350, 367, 419], "savez": 197, "polygonskyregion": [197, 372], "compoundskyregion": [197, 318, 322], "c_": 198, "ij": 198, "sigma_": [198, 510], "ii": [198, 415], "jj": 198, "scipy_mvn": 198, "from_factor_matrix": 198, "covar_list": 198, "matric": 198, "covar": [198, 351, 419], "get_subcovari": 198, "plot_correl": [198, 457], "plot_heatmap": 198, "set_subcovari": 198, "optimize_opt": [199, 439, 447, 457, 477], "covariance_opt": 199, "confidence_opt": 199, "store_trac": [199, 457], "iminuit": [199, 357, 375, 384, 409, 411, 418, 422, 423, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 549], "migrad_opt": [199, 457], "simplex": [199, 457], "levmar": [199, 457], "moncar": [199, 457], "gridsearch": [199, 457], "cxc": [199, 378, 457], "cfa": [199, 457], "ahelp": 199, "neldermead": 199, "mino": [199, 457], "maxcal": 199, "trace": [199, 406, 457], "optimize_result": [199, 423], "fit_result": [199, 269, 432, 476], "fitresult": [199, 411, 423, 457, 477], "stat_contour": 199, "numpoint": [199, 457], "mncontour": 199, "par_1": [199, 457], "par_2": [199, 457], "stat_profil": [199, 457, 465, 492], "parameter_name_scan": 199, "stat_surfac": [199, 406, 492], "caveat": [199, 424, 510], "x_valu": [199, 457], "y_valu": [199, 457], "conf_max": [200, 202], "conf_min": [200, 202], "norm_paramet": [200, 201, 202, 203], "autoscal": [200, 201, 202, 203], "sign": [200, 202, 271, 272, 361, 384, 405, 420, 490, 554], "check_limit": [200, 201, 202, 203], "prior_stat_sum": [200, 201, 202, 203, 386, 465], "update_from_dict": [200, 202], "free_paramet": [201, 203, 269, 457, 462], "minima": [201, 203, 465], "unique_paramet": [201, 203], "freeze_al": [201, 203], "parameters_list": [201, 203], "restore_statu": [201, 203, 210, 232, 465], "restore_valu": [201, 203, 210, 232], "enter": [201, 203, 210, 232, 394], "verifi": [201, 203, 222, 269, 358, 371, 455, 492], "tempor": [201, 203, 209, 210, 217, 221, 223, 224, 225, 232, 240, 246, 247, 254, 258, 261, 276, 369, 371, 381, 382, 402, 404, 405, 406, 411, 420, 422, 423, 424, 426, 429, 432, 434, 439, 440, 441, 443, 446, 447, 448, 455, 456, 462, 468, 472, 476, 488, 489, 492, 493, 497, 500, 504, 548, 549, 551], "set_parameter_factor": [201, 203], "unfreeze_al": [201, 203, 462], "broken": [204, 248, 384, 426, 506, 538], "index1": [204, 248, 519, 533], "gamma1": [204, 519, 533], "index2": [204, 248, 519, 533], "gamma2": [204, 519, 533], "phi_0": [204, 206, 207, 211, 214, 215, 216, 219, 222, 226, 227, 234, 236, 238, 239, 244, 245, 248, 249, 251, 252, 253, 255, 259, 381, 457, 519, 522, 523, 526, 530, 533, 534, 535, 536], "ebreak": [204, 248, 519, 533], "break": [204, 248, 364, 372, 374, 383, 403, 404, 405, 519, 533], "smoothbrokenpowerlawspectralmodel": [204, 242, 381, 404, 405, 463, 533], "bpl": [204, 381, 463], "model1": [205, 518, 520, 524, 527, 529, 532], "model2": [205, 451, 518, 520, 524, 527, 529, 532], "arithmet": [205, 369, 419, 460, 461, 463, 520], "evaluation_bin_size_min": [206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259], "evaluation_radiu": [206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 257, 259, 369, 370, 381, 463], "evaluation_region": [206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259], "is_energy_depend": [206, 207, 209, 211, 217, 219, 221, 222, 223, 224, 225, 234, 236, 240, 244, 245, 246, 249, 255, 258, 259, 261, 422, 463], "position_error": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 403], "ellipseskyregion": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 428, 463, 501], "position_lonlat": [206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259], "const": [206, 207, 208, 209, 381, 444, 463, 521, 539], "evaluate_geom": [206, 207, 211, 218, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259, 424, 463, 511], "from_posit": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 444], "integrate_geom": [206, 207, 211, 219, 222, 234, 236, 244, 245, 247, 249, 255, 259, 409, 422, 424], "kwargs_posit": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 442], "kwargs_extens": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259, 442], "plot_position_error": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259], "plot_extension_error": [206, 207, 211, 219, 222, 234, 236, 244, 245, 249, 255, 259], "to_region": [206, 207, 210, 211, 219, 222, 232, 236, 244, 245, 259, 372, 403, 463, 509, 510, 511], "rectangl": [207, 211, 219, 222, 234, 244, 245, 249, 255, 259, 320, 372, 445, 501], "temporalmodel": [209, 217, 221, 223, 224, 225, 240, 246, 247, 258, 369, 382, 405, 420, 422, 423, 506], "t_min": [209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 371, 382], "t_max": [209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 371, 382], "sample_tim": [209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 409, 420], "arriv": [209, 217, 221, 223, 224, 225, 240, 246, 258, 261, 363, 371, 403, 404, 405, 443, 551, 555], "covariance_data": [210, 218, 232, 247, 257], "immut": 210, "parameters_unique_nam": [210, 232, 457], "par_typ": [210, 232], "par_nam": [210, 232], "model_typ": [210, 218, 230, 232, 247, 257, 269, 381, 462], "yaml_str": [210, 232, 432], "plot_posit": [210, 232, 462], "scatter": [210, 232, 379, 435, 441, 509, 510], "read_covari": [210, 232], "_covari": [210, 232], "new_dataset_nam": [210, 232], "name_substr": [210, 232, 462], "meet": [210, 232, 287, 364, 366, 378, 383, 388], "substr": [210, 232], "select_from_geom": [210, 232], "use_evaluation_region": [210, 232], "selection_mask": [210, 232, 462], "set_parameters_bound": [210, 232], "parameters_nam": [210, 232], "overwrite_templ": [210, 232], "to_parameters_t": [210, 232, 428, 431, 432, 433, 436, 439, 457, 477], "to_template_sky_model": [210, 232], "normspectralmodel": [210, 232, 381, 406, 422, 424, 463, 499], "to_template_spectral_model": [210, 232, 381], "templatespectralmodel": [210, 232, 242, 264, 381, 463, 468, 488, 524, 527, 532, 537], "update_link_label": [210, 232], "update_parameters_from_t": [210, 232], "lon_0": [211, 219, 222, 236, 244, 245, 259, 373, 381, 436, 439, 440, 442, 443, 444, 447, 449, 455, 456, 462, 463, 468, 476, 477, 509, 510, 511, 513, 514, 515, 516], "lat_0": [211, 219, 222, 236, 244, 245, 259, 373, 381, 436, 439, 440, 442, 443, 444, 447, 449, 455, 456, 462, 463, 468, 476, 477, 509, 510, 511, 513, 514, 515, 516], "semiaxi": [211, 219, 222, 509, 510, 511], "eccentr": [211, 219, 222, 509, 510, 511], "ellips": [211, 372, 505, 509], "counter": [211, 219, 222, 509], "clockwis": [211, 219, 222, 509], "north": [211, 219, 222, 509], "edge_width": [211, 462, 509], "semi": 211, "alpha_norm": [212, 381, 518], "absorpt": [212, 376, 406, 416, 426, 506, 538], "ebl": [212, 213, 260, 376, 381, 403, 406, 416, 423, 426, 463, 506, 538], "xspec": [212, 260, 284, 416, 553], "read_builtin": [212, 518], "dominguez": [212, 213, 381, 518], "franceschini": [212, 213, 260, 423, 518], "fink": [212, 213, 518], "dominquez": 212, "extragalact": [212, 467], "optic": [212, 372, 518], "infrar": 212, "radiat": [212, 492, 514, 515, 528], "opac": 212, "2011": [212, 480, 518], "aegi": 212, "dust": 212, "2017": [212, 363, 365, 375, 378, 394, 396, 399, 441, 467, 518], "revisit": 212, "saldana": [212, 213, 423, 518], "lopez": [212, 417, 423, 518], "multiwavelength": 212, "hst": 212, "candel": 212, "era": 212, "ebl_dominguez11": [213, 518], "frd_ab": 213, "ebl_franceschini": [213, 260], "franceschini17": [213, 518], "ebl_franceschini_2017": 213, "lopez21": [213, 518], "ebl_saldana": 213, "lopez_2021": 213, "cutoff": [214, 215, 216, 251, 252, 253, 269, 403, 423, 426, 434, 439, 506, 538], "e_0": [214, 215, 216, 226, 227, 238, 239, 248, 251, 252, 253, 522, 523, 526, 528, 530, 533, 534, 535, 536], "ecut": [214, 251, 523, 534], "lambda_": [215, 216, 269, 429, 431, 439, 522, 524], "expcutoffpowerlawnormspectralmodel": [216, 242, 424, 463, 524], "e_peak": [216, 227], "dn": [216, 227, 454], "expdecai": [217, 426, 506, 548], "t0": [217, 240, 443, 450, 451, 540, 544], "t_ref": [217, 221, 223, 224, 225, 240, 246, 258, 422, 423, 443, 444, 451, 463, 540, 541, 542, 543, 544, 545, 546, 547], "modelbas": [218, 247, 249, 250, 257, 261, 386], "api": [218, 362, 364, 367, 368, 369, 370, 371, 372, 374, 377, 378, 379, 383, 384, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 409, 413, 417, 418, 426, 428, 431, 432, 435, 441, 443, 450, 456, 460, 461, 462, 463, 466, 467, 468, 476, 478, 479, 488, 489, 490, 491, 499, 500, 504, 549, 550, 551, 552], "reset_to_default": 218, "x_sigma": 219, "math": [219, 357, 457], "n_0": [220, 525], "erf": [220, 509], "eta": [222, 223, 244, 511, 515, 542], "laplac": [222, 511], "r_eval": 222, "sigma_gauss": 222, "sigma_laplac": 222, "x_r_0": 222, "puls": 223, "t_rise": [223, 542], "t_decai": [223, 542], "sharp": [223, 348, 349, 509], "impli": [223, 358, 377, 488, 551], "gengauss": [223, 463, 511], "suppos": [224, 258, 363, 370, 551, 553], "lightcrv_pksb1222": [224, 547], "216": [224, 426, 431, 432, 460, 462, 538, 547], "59000": [224, 547], "49919925926": [224, 547], "58999": 224, "99919925926": 224, "61862": 224, "01551196351647377": 224, "blanklin": [224, 394, 490, 505], "59001": 224, "195": 224, "02288737": 224, "t_r": 224, "00375698": 224, "0143724": 224, "00688029": 224, "parabola": [226, 227, 426, 440, 457, 506, 538], "logparabolaspectralmodel": [226, 242, 381, 429, 431, 433, 440, 455, 457, 463, 520, 526, 527], "lp": [226, 227, 381, 429, 455, 463, 520], "from_log10": [226, 227, 526], "log_": [226, 227, 463, 526], "logparabolanormspectralmodel": [227, 242, 381, 406, 463, 527], "templatenpredmodel": [228, 409], "meyer": [229, 263, 440, 551], "2010a": [229, 263], "523a": [229, 263], "2m": [229, 263], "00449161": 229, "0473174": 229, "179475": 229, "53616": 229, "2708": 229, "powerlaw2spectralmodel": [230, 238, 239, 242, 381, 429, 436, 463, 478, 531], "datasetmodel": [232, 247, 380, 406, 443, 444, 447], "set_prior": [232, 386], "radiative_model": [233, 528], "nested_model": 233, "use_cach": 233, "naima": [233, 357, 375, 376, 377, 378, 381, 400, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 492, 506, 537, 538], "baseradi": 233, "radi": [233, 528], "inversecompton": [233, 528], "seed_photon_field": [233, 528], "synchrotron": [233, 405, 528], "compton": [233, 405, 528], "include_ssc": 233, "particle_distribut": [233, 528], "ssc_model": 233, "piecewis": [234, 235, 426, 463, 506, 517, 538], "f_0": [237, 531], "evaluate_integr": [237, 238, 239], "tilt": [238, 257, 369, 380, 381, 386, 398, 404, 436, 439, 440, 443, 444, 447, 456, 463, 468, 476, 477, 499, 505, 512, 532, 537], "e_d": [238, 239], "cov": [238, 239, 388], "0910": [238, 239], "4881": [238, 239], "evaluate_energy_flux": [238, 239], "vert": 239, "constantspatialmodel": [241, 381, 463, 468, 508], "templatendspatialmodel": [241, 463], "generalizedgaussianspatialmodel": [241, 406, 463, 511], "piecewisenormspatialmodel": [241, 423, 463, 512], "shell2spatialmodel": [241, 245, 463, 515], "constantspectralmodel": [242, 381, 444, 463, 521], "compoundspectralmodel": [242, 381, 423, 463, 468, 518, 520, 524, 527, 529, 532, 537], "brokenpowerlawspectralmodel": [242, 248, 381, 406, 463, 519], "piecewisenormspectralmodel": [242, 386, 406, 409, 422, 424, 463, 499, 529], "expcutoffpowerlaw3fglspectralmodel": [242, 381, 429, 463, 523], "superexpcutoffpowerlaw3fglspectralmodel": [242, 381, 463, 534], "superexpcutoffpowerlaw4fgldr3spectralmodel": [242, 463, 535], "superexpcutoffpowerlaw4fglspectralmodel": [242, 381, 463, 536], "gaussianspectralmodel": [242, 381, 463, 525], "eblabsorptionnormspectralmodel": [242, 381, 406, 463, 518], "naimaspectralmodel": [242, 381, 409, 463, 492, 528], "darkmatterdecayspectralmodel": [242, 424, 454, 463], "__main__": [242, 358, 465, 474, 552], "mycustomspectralmodel": [242, 463], "shell2": [244, 426, 463, 506, 517], "circleannulusskyregion": [244, 245, 501], "sinusoid": [246, 545], "sine": [246, 369, 426, 506, 548], "pulsat": 246, "sinu": [246, 463], "temporal_model": [247, 371, 443, 444, 451, 463, 539, 540, 541, 542, 543, 544, 545, 546, 547], "apply_irf": [247, 405], "factoris": [247, 381, 463, 549], "At": [247, 372, 375, 384, 385, 388, 402, 443, 460, 467, 497, 550], "gamma_1": [248, 251, 252, 253, 381, 534, 535, 536], "gamma_2": [248, 251, 252, 253, 381, 534, 535, 536], "sbpl": [248, 381, 463], "index_1": [251, 252, 253, 534, 535, 536], "index_2": [251, 252, 253, 534, 535, 536], "secpl": [251, 252, 253, 381, 463], "expfactor": [252, 253, 535, 536], "constanttemporalmodel": [254, 381, 402, 463, 539], "lineartemporalmodel": [254, 463, 543], "lightcurvetemplatetemporalmodel": [254, 381, 420, 423, 444, 463, 547], "expdecaytemporalmodel": [254, 381, 405, 409, 443, 451, 463, 540], "gaussiantemporalmodel": [254, 381, 405, 463, 541], "generalizedgaussiantemporalmodel": [254, 411, 463, 542], "powerlawtemporalmodel": [254, 463, 544], "sinetemporalmodel": [254, 463, 545], "templatephasecurvetemporalmodel": [254, 420, 463, 546], "hpxndmap": [255, 409, 503], "templatend": [255, 256, 463], "energy_cent": 257, "background_map": [257, 369], "phasecurv": [258, 417, 546], "interpolatedunivariatesplin": 258, "liner": [258, 372], "48442": 258, "phi_ref": [258, 546], "f0": [258, 546], "frequenc": [258, 484], "946923": 258, "f1": [258, 546], "f2": [258, 546], "plot_phasogram": 258, "phasogram": [258, 546], "s2": 258, "s3": 258, "bewar": [258, 428, 450], "cover": [258, 358, 360, 372, 373, 374, 382, 428, 449, 450, 456, 460, 472, 478, 493], "fitt": 259, "planar": [259, 369], "map_cent": 259, "regulargridinterpol": [260, 299, 358], "from_region_map": 260, "read_xspec_model": 260, "absorb": [260, 368, 381, 416, 518], "table_model": [260, 381], "proton": [262, 528], "2013aph": 262, "43": [262, 326, 372, 430, 431, 432, 441, 451, 456, 460, 478, 505], "171b": 262, "hadron": [262, 364, 369, 437, 456, 467, 488, 501], "shoulder": 262, "he": [262, 368, 373], "fe": 262, "candl": [263, 551], "2000apj": 263, "539": [263, 462], "317a": 263, "hess_pl": 263, "hess_ecpl": [263, 431], "2006a": 263, "457": [263, 414, 462], "899a": 263, "magic_lp": [263, 433], "magic_ecpl": 263, "2015jheap": 263, "30a": 263, "crab_hess_ecpl": 263, "dnde_cu": 263, "196991563774588": 263, "And": [263, 358, 361, 376, 378, 384, 389, 428, 429, 431, 432, 439, 443, 445, 451, 456, 457, 460, 461, 463, 467, 469, 476, 477, 478], "flux_int_cu": 263, "535058216604496": 263, "diffuse_model": 264, "herm": [266, 268, 424], "n_free_paramet": 269, "switch": [269, 358, 365, 368, 411, 415], "wilk": [269, 490, 554], "theorem": [269, 490, 554], "hypothes": [269, 423, 492, 554], "fit_results_nul": 269, "3fhl_dataset": [269, 440, 461], "3fhl_model": [269, 440, 462], "fermi_dataset": [269, 462, 468], "previous": [269, 375, 405, 417, 418, 427, 431, 439, 440, 455, 459, 461], "weaker": 269, "move": [269, 363, 364, 365, 366, 369, 372, 377, 378, 379, 382, 387, 393, 399, 400, 402, 403, 404, 405, 409, 410, 414, 415, 417, 418, 419, 420, 434], "value_scan": 270, "interp_scal": [270, 300], "parabol": [270, 300, 457], "fine": [270, 300, 371, 437, 456, 468, 505, 552], "n_on": [271, 272, 273, 279, 281, 282, 284, 394, 552, 553, 554], "countsstatist": [271, 272, 382, 405, 406, 409, 420], "known": [271, 272, 287, 371, 431, 435, 437, 442, 449, 459, 460, 461, 478, 492, 502, 552, 553, 554], "n_bkg": [271, 272, 554], "n_sig": [271, 272, 452, 554], "p_valu": [271, 272, 457, 552, 554], "distinguish": [271, 272, 382, 385, 427, 460], "fluctuat": [271, 272, 382, 434, 447, 465, 554], "stat_max": [271, 272], "compute_errn": [271, 272, 420, 554], "downward": [271, 272], "compute_errp": [271, 272, 554], "upward": [271, 272], "compute_upper_limit": [271, 272], "n_sig_matching_signific": [271, 272], "summat": [271, 272, 364], "mu_sig": [272, 282, 284, 553, 554], "unknown": [272, 435, 457, 551, 553, 554], "mu_on": [273, 279, 554], "truncation_valu": [273, 279], "mu_": [273, 279, 553, 554, 555], "1979": [273, 279, 398, 551], "apj": [273, 279], "228": [273, 279, 366, 372, 431, 432, 437, 455, 459, 470], "939": [273, 279], "chi": [275, 373, 553, 554, 555], "chisquar": 275, "chisq": 275, "t_i": 276, "log_2": 276, "f_": [276, 278, 286, 488], "f_i": 276, "subsequ": [276, 367], "doubling_dict": 276, "f_pp": 277, "strongli": [277, 373, 375, 384, 409, 436, 457, 465], "f_var": 277, "probe": [277, 463], "shorter": [277, 358, 359, 372, 378, 383, 406, 434, 450, 463, 552], "white": [277, 347, 348, 441, 452, 457, 462, 480, 505], "nois": [277, 376, 551], "longer": [277, 358, 364, 365, 372, 373, 375, 378, 391, 409, 412, 417, 418, 420, 423, 428, 434, 449], "fpp": 277, "fpp_err": [277, 448], "edelson2002": 277, "soft": 277, "seyfert": 277, "arakelian": 277, "564": [277, 415, 431, 462], "ton": [277, 467], "s180": 277, "edelson": [277, 448], "iopscienc": 277, "iop": 277, "1086": 277, "323779": 277, "var": [278, 390, 392], "fvar_err": [278, 448], "vaughan2003": 278, "character": [278, 382, 443], "vaughan": [278, 448], "2003": [278, 448], "2003mnra": 278, "345": [278, 427, 451, 462], "1271v": 278, "_f_cash_root_cython": 283, "extra_term": 284, "habilit": 284, "nauroi": [284, 551], "141": [284, 441, 455], "linkage_kwarg": 285, "fcluster_kwarg": [285, 464], "hierarchi": [285, 369, 402], "linkag": 285, "ward": 285, "metric": 285, "euclidean": 285, "fcluster": [285, 464], "maxclust": 285, "get_irfs_featur": [285, 286, 423, 464], "scaled_features_irf": [285, 286, 464], "3020791585772495": 285, "20326": [285, 428], "2471938975366008": 285, "3319831545301117": 285, "20327": [285, 428], "4586649826004114": 285, "7763307219821931": 285, "20339": 285, "6705024680435898": 285, "9677107409819438": 285, "20343": 285, "9500979841335693": 285, "820562952023891": 285, "20344": 285, "8160964882165554": 285, "7771617763704126": 285, "20345": 285, "7718272408581743": 285, "8449575657133206": 285, "20346": 285, "8383396349722769": 285, "scaled_featur": 286, "1379190199428797": 286, "18046952655570045": 286, "2878662980210884": 286, "20137": [286, 470], "3049664466089965": 286, "1499472780781963": 286, "20151": 286, "1244969200533408": 286, "unitbas": 287, "parseabl": 287, "introspect": 287, "upcast": 287, "__array__": 287, "care": [287, 358, 367, 374, 383, 428, 433, 439, 460, 552], "subok": 287, "dex": 287, "ndmin": 287, "Ones": 287, "pend": 287, "lon_pnt": [289, 293], "lat_pnt": [289, 293], "lon_t": [289, 293], "lat_t": [289, 293], "dz": 291, "displac": 291, "vx": [291, 294, 383], "vy": [291, 294], "vz": [291, 294], "v_glon": 294, "v_glat": 294, "file_dir": 295, "file_nam": 295, "hdu_nam": 295, "localis": 295, "mapper": 295, "get_hdu": 295, "stdout": [295, 358], "abs_path": 295, "trapz": 298, "points_scal": 299, "magnitud": [299, 443], "x_1": 299, "x_2": 299, "x_3": 299, "neighbour": [299, 513], "interp1d": 300, "parallelbackendenum": 302, "poolmethodenum": 303, "starmap": [303, 307, 308], "pool": [303, 307, 308], "__int__": 305, "toward": [305, 365, 372, 378, 419], "preced": [305, 372, 374, 384, 463], "whitespac": 305, "0b100": 305, "pool_kwarg": [307, 308], "method_kwarg": [307, 308], "apply_async": [307, 308], "fpe": [307, 380, 382, 431, 441, 452, 477], "task_nam": 308, "task": [308, 378, 382, 384, 385, 387, 388, 419, 432, 435, 459, 460, 468, 472, 476, 492, 500, 550, 552, 556], "cdf": [309, 371, 443, 457], "drawn": [309, 371], "sample_axi": 309, "dist": [310, 388], "singleton": 311, "noth": [311, 375, 465], "mathworld": [314, 315], "wolfram": [314, 315], "randomnumb": 314, "lon_rang": 315, "lat_rang": 315, "spherepointpick": 315, "return_diff": 317, "return_delta": 317, "hz": [317, 478], "186484131475074": 317, "radius_max": [319, 445], "radius_min": 319, "concentr": 319, "orthogon": 320, "region_new": 321, "compoundpixelregion": 322, "tox": [323, 359, 361, 420, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 524, 527, 540], "build_doc": [323, 359, 361, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 524, 527, 540], "lib": [323, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 524, 527, 540], "python3": [323, 391, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 524, 527, 540], "site": [323, 388, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 516, 524, 527, 540, 552], "logger": [325, 327, 358, 441], "recurs": [326, 385], "stackoverflow": 326, "question": [326, 361, 363, 365, 366, 367, 369, 370, 371, 372, 375, 377, 382, 393, 398, 399, 417, 418, 419, 441, 478, 492, 493, 552], "3232943": 326, "3233356": 326, "99": [326, 434, 435, 436, 447, 477, 478], "sort_kei": 327, "table_oth": 328, "make_quant": 329, "standardis": [330, 331, 343, 417], "standardise_unit": [330, 344], "ident": [333, 361, 373, 420, 433], "behaviour": [333, 358, 380, 381, 406, 411, 417, 424, 450, 461, 468, 488, 553], "aren": [334, 358, 372, 377, 378, 389, 390, 392], "__enter__": 336, "savefig": [336, 394], "__exit__": 336, "trigger": [336, 358, 387, 469], "buffer": 336, "decor": [337, 338, 358, 385, 552], "test_using_data_fil": 337, "test_using_scipi": 338, "human": [339, 369, 388, 411, 432, 476], "readabl": [339, 369, 411, 432, 476], "isot": [339, 556], "epoch": 341, "default_epoch": 341, "ph": 343, "ct": [343, 418, 457], "shini": 343, "bunit": [344, 418, 460], "xlim": [345, 439, 465, 468, 486], "ylim": [345, 437, 465, 468, 484, 486, 525, 534, 535, 536], "npanel": 345, "plotter": 345, "gridspec": 345, "plot_panel": 345, "panel_fov": 345, "img": [346, 460], "axesimag": [346, 347], "cbar": 346, "add_subplot": 346, "111": [346, 365, 417, 439, 455], "im": [347, 457], "valfmt": 347, "2f": [347, 427, 432, 464, 477, 554], "textcolor": 347, "textkw": 347, "heatmap": [347, 352], "ticker": 347, "formatt": [347, 460], "middl": [347, 374], "colormap": [347, 348, 349, 397, 410, 478], "collabor": [348, 349, 363, 365, 367, 371, 411, 442, 468, 551], "yellow": 348, "imagenorm": [348, 349], "linearsegmentedcolormap": [348, 349], "mpl_normal": [348, 349], "linearstretch": [348, 349], "huestart": 349, "grai": [349, 501, 528], "jet": 349, "criticis": 349, "exagger": 349, "small": [349, 358, 364, 366, 372, 374, 375, 378, 380, 385, 388, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 449, 450, 460, 465, 467, 468, 469, 470, 510, 514, 515, 551, 552], "hue": 349, "kwargs_hist": [351, 437, 439], "kwargs_ax": [351, 437, 439], "_map": 351, "curve_fit": 351, "result_list": 351, "dictionnari": 351, "axis_edg": 351, "infodict": 351, "tsmap_est": 351, "sig": [351, 553, 554, 555], "row_label": 352, "col_label": 352, "cbar_kw": 352, "cbarlabel": 352, "rgb": [353, 355, 423, 427, 431], "make_lupton_rgb": 353, "axis_rgb": 353, "af": 354, "legend": [355, 427, 429, 431, 433, 439, 440, 444, 448, 449, 450, 452, 454, 457, 463, 464, 465, 468, 485, 486, 494, 518, 524, 527, 528, 532], "legend_kwarg": 355, "handler_map": 355, "cycler": [355, 427], "prop_cycl": 355, "prioriti": [355, 367, 369, 370, 372, 384, 387], "edgecolor": [355, 431, 433, 435, 441, 442, 445, 452, 454, 501, 509, 510, 511], "rcparam": 355, "patch": [355, 358, 365, 384, 412, 421, 431, 433, 441, 445, 452], "facecolor": [355, 431, 433, 441, 442, 445, 452, 454, 509, 510, 511], "never": [355, 357, 358, 361, 364, 368, 372, 380, 469], "thick": 355, "linewidth": [355, 359], "visualis": [355, 370, 372, 379, 405, 420, 433, 435, 458, 463, 465, 467, 492], "cycl": [355, 361, 362, 363, 375, 377, 391, 416, 420], "dynam": [355, 489], "datasets1": 355, "datasets2": 355, "columnspac": 355, "fontsiz": [355, 452, 457], "cyan": 355, "datasets3": 355, "magenta": [355, 442, 464], "theta2_min": 356, "theta2_max": 356, "conda": [357, 361, 365, 366, 375, 378, 383, 387, 388, 390, 391, 392, 393, 394, 399, 401, 417, 418, 552], "fingertip": 357, "pip": [357, 361, 365, 375, 389, 390, 392, 399, 418, 467, 552], "pyjok": 357, "rare": [357, 358, 377, 460], "uninstal": 357, "almost": [357, 359, 361, 372, 468, 478], "forg": [357, 375, 387, 388, 390, 391, 394, 417, 467], "click": [357, 374, 375, 394, 402, 417, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 552], "pyyaml": [357, 375, 398, 402], "mix": [357, 358, 374, 456, 460], "jupyt": [357, 365, 374, 375, 378, 389, 390, 392, 393, 395, 400, 415, 416, 417, 419, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552], "jupyterlab": [357, 375, 378, 394, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "later": [358, 363, 364, 365, 369, 370, 371, 374, 375, 376, 377, 378, 379, 397, 399, 409, 410, 412, 413, 419, 431, 433, 439, 440, 456, 459, 460, 463, 468, 478, 488], "psf_theta": 358, "fov_theta": 358, "fov_": 358, "_lon": 358, "_lat": 358, "_phi": 358, "unclear": [358, 368, 369, 375, 385], "postfix": 358, "_true": 358, "_reco": 358, "energy_reco": [358, 447], "pedant": 358, "everywher": [358, 372, 377, 378, 398], "quickli": [358, 359, 361, 363, 374, 375, 378, 384, 388, 390, 416, 431, 439, 448, 469, 496, 552], "becom": [358, 366, 368, 369, 372, 377, 385, 443, 450, 463, 492, 552, 555], "annoi": [358, 552], "why": [358, 359, 363, 365, 372, 457, 505], "ra_tru": [358, 371], "thu": [358, 365, 372, 375, 376, 378, 413, 427, 436, 437, 441, 443, 549, 555], "eventu": [358, 363, 374, 377, 378, 394, 463], "agreement": [358, 361, 379, 452], "seem": [358, 365, 366, 369, 375, 379, 480], "unrealist": 358, "legaci": [358, 417, 418], "our": [358, 361, 367, 372, 374, 375, 377, 380, 381, 382, 384, 399, 400, 416, 427, 428, 431, 432, 433, 436, 437, 439, 440, 441, 444, 450, 451, 452, 460, 461, 465, 469, 476, 477, 552], "strategi": [358, 365, 372, 423, 457, 555], "Of": [358, 361, 394, 439, 456, 460, 468, 552, 555], "cours": [358, 361, 365, 368, 375, 394, 432, 439, 456, 460, 468, 476, 552, 555], "stone": [358, 378], "advoc": 358, "encourag": [358, 363, 384, 387, 417], "realis": [358, 363, 372, 384], "backward": [358, 363, 372, 381, 382, 383, 401, 490], "incompat": [358, 383, 411], "had": [358, 364, 366, 384, 406, 412, 416, 417], "past": [358, 363, 366, 374, 375, 378, 379, 381, 384, 386, 394, 415, 417, 418, 460, 552], "although": [358, 371, 372, 373, 375, 378, 382, 457, 467, 514, 515, 549, 556], "decis": [358, 359], "controversi": [358, 363, 364, 378], "gh": [358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388], "1396": [358, 432], "yt": 358, "gpl3": 358, "lgpl": 358, "upstream": [358, 361], "gammalib": [358, 371], "claus": [358, 384], "standpoint": 358, "wcslib": 358, "fit_statist": 358, "mainten": [358, 365, 384, 388, 400, 422], "easier": [358, 364, 369, 377, 382, 417, 420, 467], "too": [358, 363, 364, 408, 409, 422, 423, 424, 457, 461], "rememb": [358, 372, 457, 472, 552], "privat": [358, 361, 367, 381, 417, 469, 470], "__all__": 358, "decid": [358, 364, 367, 368, 369, 370, 372, 373, 377, 380, 381, 382, 387, 432, 464, 476, 556], "thing": [358, 361, 363, 366, 372, 373, 374, 375, 378, 382, 388, 397, 416, 433, 436, 451, 452, 461, 468], "caller": [358, 369], "namedtupl": 358, "ok": [358, 372, 457], "consent": 358, "adult": 358, "do_someth": 358, "elif": [358, 372, 385], "isinst": [358, 369, 372, 381, 385, 386], "everyth": [358, 376, 377, 492], "asanyarrai": 358, "realli": [358, 365, 372, 375, 434, 447, 457], "put": [358, 359, 361, 363, 365, 366, 369, 378, 387, 388, 394, 400, 434, 443, 461, 468, 552], "boilerpl": 358, "unboundlocalerror": 358, "referenc": [358, 551], "better": [358, 361, 363, 364, 365, 366, 367, 371, 372, 377, 378, 379, 382, 399, 416, 417, 439, 440, 443, 452, 457, 460, 461, 468, 488], "fun": [358, 361], "program": [358, 374], "awar": [358, 363, 370, 378, 384], "million": [358, 385], "billion": 358, "inaccur": 358, "errat": 358, "hard": [358, 359, 381, 386, 404, 465], "But": [358, 363, 366, 372, 377, 385, 388, 394, 418, 431, 432, 457, 465, 467, 476, 480, 552], "docstr": [358, 378, 384, 409, 410, 411, 413, 416, 422, 423, 424, 463], "make_random_stuff": 358, "determinist": 358, "stuff1": 358, "make_some_random_stuff": 358, "stuff2": 358, "make_more_random_stuff": 358, "pattern": [358, 364, 372], "inspir": [358, 382], "sklearn": 358, "check_random_st": 358, "felt": 358, "confus": [358, 359, 364, 377], "statement": [358, 361, 365, 422, 424, 481], "easi": [358, 359, 364, 369, 372, 373, 374, 377, 378, 382, 385, 403, 409, 417, 460, 461, 468, 489, 549, 550, 552, 556], "stderr": 358, "timestamp": 358, "piec": [358, 364, 372, 377, 386], "chatti": [358, 441], "said": [358, 363, 365, 469, 470, 552], "long": [358, 361, 363, 365, 372, 374, 377, 378, 380, 383, 385, 411, 420, 455, 472, 504], "sens": [358, 365, 368, 372, 374, 377, 378, 379, 437], "wrong": [358, 407, 421, 422, 423], "extrem": [358, 385, 460, 511], "complex": [358, 359, 364, 368, 372, 373, 374, 380, 382, 394, 428, 431, 441, 444, 448, 451, 456, 460, 461, 463, 464, 468, 501], "modest": [358, 510], "worth": [358, 480], "captur": [358, 374], "getlogg": [358, 437, 441, 449, 450, 451, 474], "__name__": [358, 437, 449, 450, 451, 454, 474, 486, 552], "process_lots_of_data": 358, "infil": 358, "outfil": 358, "fast": [358, 372, 376, 457], "robust": [358, 418], "fanci": [358, 452], "unstabl": [358, 467], "interp_param": 358, "compromis": [358, 363, 371, 465], "refus": 358, "spot": 358, "lose": 358, "unsaf": 358, "assert_allclos": 358, "dozen": 358, "pytest": [358, 359, 361, 388, 417], "33333333": 358, "digit": 358, "assert_quantity_allclos": [358, 413], "discourag": 358, "establish": [358, 371], "assert_equ": 358, "mpl_check_plot": 358, "stream": 358, "short": [358, 359, 362, 363, 367, 372, 375, 378, 381, 384, 406, 448, 450, 468, 492, 493, 551, 554, 557], "mpl_plot_check": 358, "test_plot": 358, "mpl": 358, "astropy_vers": 358, "minor": [358, 363, 378, 381, 383, 408, 421, 510, 511], "xfail": 358, "test_someth": 358, "levelnam": 358, "host": 358, "push": [358, 361, 387, 420], "pr": [358, 368, 370, 372, 381, 382, 384, 386, 387, 403, 404], "eg": [358, 439, 447, 451, 456, 458, 462, 463], "typo": [358, 395, 421, 422], "ci": [358, 361, 365, 384, 388, 403, 409, 411, 414, 420], "commit": [358, 361, 366, 372, 383, 384, 396, 397, 420], "draft": [358, 362, 363, 386, 418], "incomplet": [358, 388, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "pain": [358, 361, 365], "autopep8": 358, "strang": 358, "clean": [358, 359, 361, 366, 367, 372, 374, 376, 397, 399, 400, 401, 402, 403, 404, 405, 406, 409, 416, 417, 418, 419], "fdx": 358, "print0": 358, "xarg": 358, "dos2unix": 358, "cd": [358, 359, 361, 374, 390, 391, 392], "astropy_help": [358, 399, 400, 401], "checkout": [358, 361, 400, 439, 443, 463], "branch": [358, 361, 365, 372, 383, 388, 397], "bug": [358, 361, 364, 365, 383, 384, 387, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 421, 422], "meeseeksmachin": 358, "forgot": 358, "meeseeksdev": 358, "branchnam": 358, "instruct": [358, 367, 375, 387, 389, 390, 398, 409, 413, 417, 443, 467], "cherri": [358, 365, 372, 383], "pick": [358, 365, 372, 383, 399, 478], "changelog": [358, 387, 410, 418], "pro": [358, 374], "con": [358, 374], "ve": [358, 359, 361, 552], "wait": [358, 387, 388], "until": [358, 361, 365, 372, 383, 416], "contributor": [358, 361, 378, 388, 396, 407, 408], "rebas": [358, 372], "lt": [358, 384, 411, 420, 514, 515], "abruptli": [358, 383], "forecom": [358, 383], "announc": [358, 363, 365, 372, 374, 377, 379, 381, 383, 384, 387, 388], "affect": [358, 366, 370, 372, 383, 400, 401, 412, 421, 465], "deprecated_funct": 358, "new_funct": 358, "deprecated_renamed_argu": 358, "gammapydeprecationwarn": [358, 524, 527], "deprecated_argument_funct": 358, "arg_in_kwarg": 358, "deprecated_argument_function_kwarg": 358, "deprecated_attribut": 358, "some_class": 358, "old_attribut": 358, "new_attribut": 358, "_old_attribut": 358, "_new_attribut": 358, "disable_unicode_literals_warn": 358, "pure": [358, 375, 377, 378, 501], "consol": [358, 552], "seterr": 358, "advic": [358, 384], "sy": [358, 393], "warn_with_traceback": 358, "categori": [358, 369, 382, 409, 461, 463, 506], "lineno": 358, "print_stack": 358, "hasattr": 358, "formatwarn": 358, "showwarn": 358, "guidelin": [358, 362, 395, 417], "__repr__": [358, 404, 418], "__str__": [358, 370, 385, 401], "person": [358, 361, 363, 365, 366, 367, 371, 376, 379], "anna": 358, "0x105fe3b70": 358, "repl": 358, "seen": [358, 372, 379, 428, 435, 440, 450, 460, 463, 468], "0x105fd0cf8": 358, "attr": 358, "dataclass": 358, "mainli": [358, 368, 369, 372, 379, 460], "nice": [358, 363, 369, 375, 377, 385, 401, 409, 435, 439, 455, 552], "__class__": [358, 382, 454, 486], "refactor": [358, 370, 372, 373, 374, 381, 399, 400, 401, 403, 404, 405, 406, 409, 411, 413, 415, 417], "printout": [358, 416, 417, 456], "hi": [358, 416], "my": [358, 380, 381, 389, 443, 444, 456, 463], "heidelberg": 358, "add_loc": 358, "ni": 358, "usabl": 358, "monkei": 358, "summaris": [358, 363, 365, 378], "nameerror": 358, "attributeerror": 358, "forgotten": 358, "test_person_txt": 358, "startswith": 358, "endswith": 358, "rich": [358, 374], "latex": [358, 359], "svg": 358, "_repr_html_": 358, "underscor": 358, "nicer": [358, 394, 457, 478], "tend": [358, 511], "escap": [358, 384], "ultim": 358, "fallback": 358, "0x129602550": 358, "to_html": 358, "nearli": [358, 409, 428], "grand": 358, "implent": 358, "ipynb_to_galleri": 358, "path_to_notebook": 358, "path_to_script": 358, "straight": [359, 390, 492], "Or": [359, 377, 378, 432, 439, 456, 460, 467, 468, 490], "_build": [359, 388], "pdflatex": 359, "nonstopmod": 359, "tex": 359, "repo": [359, 366, 387, 388, 397, 410], "stuff": [359, 388, 492], "texliv": 359, "snippet": [359, 378, 492], "block": [359, 361, 364, 371, 378, 388, 397, 417, 552], "know": [359, 361, 363, 367, 372, 374, 375, 382, 388, 400, 417, 418, 419, 441, 444, 454, 458, 459, 460, 467, 469, 470, 552], "testcod": 359, "testoutput": 359, "contrari": [359, 366], "123456789": [359, 556], "51179": [359, 556], "00000143": [359, 556], "55197": [359, 556], "advis": [359, 384, 457, 465, 472], "whilst": [359, 464, 472], "zsh": 359, "pictur": 359, "orang": [359, 431, 439, 445, 449, 452, 454, 465, 501], "sphinx_gallery_thumbnail_numb": [359, 431, 433, 435, 437, 442, 445, 458, 518], "xlabel": [359, 423, 437, 451, 457, 465, 468, 484, 485, 486, 509, 546], "ylabel": [359, 451, 457, 465, 468, 484, 485, 486, 509, 546], "hover": 359, "edit": [359, 361, 363, 365, 366, 367, 374, 378, 387, 388, 391, 476, 552], "analysis_2": [359, 426, 477, 479], "extern": [359, 384, 410, 414, 415, 418, 467, 492], "linkcheck": 359, "fermi_ts_imag": 359, "restructur": [359, 373, 374, 375, 377, 379, 385, 388, 403, 409, 410, 411, 412, 414, 423], "scientif": [359, 365, 381, 384, 391], "develop": [359, 363, 364, 366, 367, 368, 369, 371, 372, 374, 375, 377, 378, 379, 380, 381, 383, 384, 386, 387, 388, 391, 395, 397, 410, 417, 418, 419, 467], "quickest": 359, "editor": [359, 384, 432, 476, 552], "github": [359, 361, 362, 363, 364, 366, 367, 376, 378, 384, 387, 388, 391, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 414, 415, 416, 417, 418, 419], "ask": [359, 361, 363, 365, 372, 374, 375, 378, 384, 393, 449, 478, 492, 493, 552], "pull": [359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 378, 383, 384, 388, 396], "email": [359, 361, 384, 388], "mail": [359, 361, 363, 365, 372, 374, 377, 379, 381, 384, 387, 393, 398, 399, 478, 552], "repeat": [359, 439, 469], "sidereal_tim": 359, "codebas": [359, 375, 397, 416, 418], "circle_area": 359, "mess": 359, "getter": 359, "setter": [359, 386, 403, 409, 456], "contact": [360, 365, 367, 384, 393, 395, 398, 399, 400, 414, 417], "webpag": [360, 366, 378, 384, 387, 417, 420], "ideal": [360, 361, 368, 372, 373, 382, 386, 387, 429, 468], "join": [360, 369, 370, 467], "slack": [360, 361, 365, 381, 387, 393, 398, 399, 552], "technic": [360, 361, 363, 371, 378, 380, 382, 384, 388, 436, 492], "recip": [360, 374, 395, 409, 452, 493, 554], "propos": [360, 362, 363, 364, 365, 367, 375, 383, 384, 386, 399, 402, 403, 405, 406, 417, 423], "partli": [361, 367, 368, 372, 378, 379], "introduct": [361, 379, 380, 381, 399, 403, 404, 405, 406, 429, 432, 463, 469, 470, 476, 477, 481], "guid": [361, 374, 376, 390, 391, 392, 395, 418, 472, 492, 507, 517, 538, 548], "aspect": [361, 384, 493, 552, 557], "sphinx": [361, 365, 378, 388, 400, 404, 411, 417, 418, 420, 424, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "happi": [361, 365, 378, 398, 399, 418], "skill": [361, 394], "anytim": [361, 400], "exercis": [361, 374, 378, 384], "complain": 361, "tracker": [361, 372], "colleagu": [361, 552], "suggest": [361, 363, 365, 368, 372, 378, 380, 382, 386, 435, 443, 444, 492, 552], "student": 361, "acknowledg": [361, 384, 395], "poster": [361, 384, 388, 413], "concern": [361, 363, 372, 374, 375, 377, 379, 381, 384, 409, 419, 469, 554], "readm": [361, 384], "rst": [361, 363, 378, 384, 387, 388, 404, 409], "shall": 361, "md": [361, 378, 384], "bind": 361, "cite": [361, 384], "willing": 361, "four": [361, 369, 382, 449, 467, 468, 496, 498, 504, 551], "amend": 361, "signoff": 361, "hook": [361, 420], "pseudonym": 361, "anonym": 361, "grant": [361, 384], "ongo": [361, 364, 365, 388], "vain": 361, "talk": [361, 363, 365, 375, 384], "someon": [361, 363, 378], "soon": [361, 372, 388], "anywai": [361, 372], "mentor": [361, 378], "review": [361, 366, 367, 368, 371, 372, 374, 375, 377, 378, 379, 381, 382, 384, 386, 419, 420, 504], "proce": [361, 388, 390, 392, 420, 428, 431, 432, 443, 447, 450, 461, 462, 468, 476, 477], "stage": [361, 374, 437, 439, 451, 456, 488, 551], "feedback": [361, 363, 367, 372, 374, 375, 378, 379, 381, 387, 417, 458, 492], "finish": [361, 365, 367, 387, 415, 417], "mind": [361, 378, 447, 457], "chime": 361, "experi": [361, 363, 367, 369, 373, 386, 388, 417, 480, 551, 556], "confirm": 361, "pleasant": 361, "drag": 361, "worst": 361, "sit": 361, "week": [361, 366, 376, 378, 383, 387], "invest": 361, "regress": 361, "certainli": 361, "isn": [361, 365, 372, 374, 377, 388, 441, 552], "ctapip": [361, 365, 367, 374, 375, 377, 378, 379], "workflow": [361, 366, 367, 374, 379, 383, 388, 403, 432, 437, 472, 476, 477, 493], "get_devel_vers": 361, "workspac": 361, "fork": 361, "somewher": [361, 375, 388], "machin": [361, 365, 366, 371, 375, 388, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "clone": [361, 391, 418], "usernam": 361, "env": [361, 375, 387, 389, 390, 392, 393, 418, 552], "yml": [361, 375, 387, 388, 389, 390, 392, 417], "mamba": [361, 389, 390, 411], "remot": 361, "reliabl": [361, 391, 437, 457, 461, 553], "stick": [361, 381, 399, 418, 457, 551], "prune": 361, "dedic": [361, 372, 373, 382, 384, 385, 388, 404, 405, 406, 424, 431, 432, 433, 439, 452, 457, 476, 477, 489], "compil": [361, 410], "cython": [361, 400, 410], "pyx": [361, 388], "pwd": [361, 390, 392], "adher": 361, "pep8": 361, "virtual": [361, 388, 390, 391, 392, 552], "mutltipl": 361, "codestyl": 361, "py310": 361, "numpy121": 361, "listenv": 361, "suffici": [361, 364, 371, 384, 423], "preview": [361, 470], "flake8": 361, "finalis": 362, "reject": [362, 363, 371], "withdrawn": [362, 363, 368, 369, 370, 373, 380, 382], "organ": [362, 378, 383, 384, 409, 469, 470, 489, 504], "plan": [362, 363, 367, 368, 372, 374, 375, 378, 383, 387, 398, 415, 417, 418, 419, 549], "roadmap": [362, 365, 374, 383, 398, 419], "authorship": 362, "polici": 362, "christoph": [363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 410, 413, 414, 415, 416, 417, 418, 419], "deil": [363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 410, 413, 414, 415, 416, 417, 418, 419], "jan": [363, 364, 367, 370, 375, 379, 396], "1239": 363, "stand": 363, "design": [363, 364, 367, 368, 371, 372, 374, 378, 380, 382, 383, 397, 417, 424], "disambigu": 363, "ap": [363, 375, 383], "pep": 363, "nep": [363, 383], "jep": 363, "enhanc": [363, 367, 394], "goal": [363, 372, 386, 457], "think": [363, 375, 376, 378], "chanc": 363, "topic": [363, 367, 378, 386, 478], "consciou": 363, "parti": 363, "anyon": [363, 365, 467], "welcom": [363, 372, 468], "submit": [363, 384], "face": [363, 366], "bring": 363, "titl": [363, 445, 454], "bullet": 363, "placehold": 363, "peopl": [363, 365, 378, 384, 387, 388, 454, 480, 492, 552], "formal": [363, 386, 435], "sentenc": [363, 378, 384], "interspers": 363, "favour": [363, 371, 386, 465], "timelin": [363, 365, 417], "389": 363, "argpars": [363, 552], "leav": [363, 370, 372, 373, 375, 378, 387, 389, 462], "optpars": 363, "alon": 363, "481": [363, 414], "cpython": 363, "intent": 363, "great": [363, 372, 377, 415, 472], "idea": [363, 366, 373, 377, 378, 379, 432, 458, 464, 468, 476], "vision": 363, "manpow": [363, 375], "hope": 363, "sent": 363, "thought": [363, 372], "inlin": [363, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 460, 461, 462, 463, 467, 468, 470, 476, 477, 478], "spell": [363, 492], "mistak": [363, 383], "committe": [363, 365, 383, 384], "particip": [363, 367, 378], "consensu": [363, 384], "outcom": [363, 372], "unusu": 363, "disagr": 363, "paragraph": 363, "team": [363, 367, 375, 378, 380, 384, 396, 417], "rigid": 363, "bureaucrat": 363, "hasn": [363, 556], "vagu": 363, "clarif": 363, "basi": [363, 364, 374, 377, 387, 411, 413, 452, 454], "aris": [363, 374], "opinion": [363, 552], "friendli": [363, 385, 420, 432, 476, 492], "everyon": 363, "honk": 363, "r\u00e9gi": [364, 367, 368, 372, 373, 375, 377, 379, 380, 381, 382, 383, 385, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "terrier": [364, 367, 368, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 385, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "jul": [364, 373, 375, 377, 396], "1277": 364, "modular": 364, "ten": [364, 378], "similarli": [364, 366, 382, 385, 409, 455, 457, 458, 460, 461, 463, 505], "orchestr": [364, 368, 370, 374, 432, 476, 477], "make_map_xxx": 364, "multidimension": [364, 374, 386, 424, 472, 497, 550], "energydependenttablepsf": [364, 379, 398, 409], "realiz": [364, 551], "reprocess": 364, "databas": [364, 492], "incid": [364, 551], "wherea": [364, 372, 375, 552], "ordereddict": [364, 375, 402], "techniqu": [364, 373, 374, 376, 428, 431, 439, 442, 459, 461, 499, 502, 550], "mosaic": 364, "make_map_cutout": 364, "mapgeom": [364, 419, 420], "make_map_count": 364, "make_map_exposure_reco_energi": 364, "make_map_hadron_accept": 364, "make_map_fov_background": 364, "make_map_ring_background": 364, "ringbackgroundestim": [364, 417], "meant": [364, 423, 427, 434, 436, 439, 441, 447, 451, 467], "skyimag": [364, 377, 415, 416, 417, 418], "skycub": [364, 377, 415, 416, 417, 418], "adonath": 364, "ljouvin": 364, "singleobsimagemak": 364, "stackedobsimagemak": 364, "singleobscubemak": 364, "stackedobscubemak": 364, "iactbasicimageestim": [364, 417], "sequenti": [364, 431, 477], "rid": 364, "bot": 364, "weekli": [364, 367, 371, 372, 449], "feb": [364, 365, 375, 379, 394, 396], "juli": [364, 367, 372, 374, 375, 377, 381, 383, 385, 450], "regi": [364, 369, 370, 374], "notic": [364, 457, 472], "master": [364, 365, 372, 387, 388, 397], "rewrit": [364, 367, 374, 404, 414, 415, 417, 418, 419, 552], "approv": [364, 365, 366], "matthew": [365, 415, 417, 418], "wood": [365, 415, 417, 418], "nov": [365, 370, 375, 376, 378, 382, 396, 420], "1278": 365, "march": [365, 367, 396, 398, 419], "2019": [365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 396, 418, 419, 442, 467, 551], "earlier": [365, 384], "indefinit": 365, "ship": [365, 366, 375, 398, 416, 434, 447, 452, 463, 492], "linux": [365, 375, 388, 391, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478, 552], "older": [365, 375, 391, 416, 455], "fermipi": [365, 367, 370, 374, 378, 382, 415, 417, 468, 480], "backport": [365, 383, 387], "effort": [365, 367, 374, 375, 377, 378, 381, 400, 488], "spent": [365, 459], "life": [365, 457], "languag": [365, 377], "did": [365, 372, 377, 378, 379, 381, 384, 400, 427, 434, 436, 439, 441, 447, 451, 457, 465, 467], "questionnair": [365, 417], "januari": [365, 367, 383], "challeng": [365, 367, 371, 416, 437, 439, 441, 467], "august": [365, 371, 374, 377, 441], "wasn": [365, 418], "becam": 365, "trivial": 365, "big": [365, 368, 375, 387, 419, 468, 553, 555], "impact": [365, 371, 375, 469], "ago": 365, "lst": [365, 467], "harder": [365, 552], "1167": [365, 372], "caus": [365, 372, 418, 421, 492], "shim": 365, "amount": [365, 372, 386, 492], "cleanup": [365, 377, 388, 397, 402, 403, 408, 409, 410, 414, 415, 417], "organis": [365, 374, 377, 384, 417], "bugfix": [365, 367, 383, 416, 417], "hopefulli": 365, "wide": [365, 384, 385, 399, 418, 429, 440, 551], "jos\u00e9": [366, 374, 378, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 417, 418, 419], "enriqu": [366, 374, 378, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 417, 418, 419], "ruiz": [366, 374, 378, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 417, 418, 419], "oct": [366, 368, 369, 373, 375, 378, 384], "1419": [366, 419], "different": 366, "coupl": [366, 372, 377, 388, 406, 418, 460], "kb": 366, "compress": 366, "grow": [366, 377, 417], "gb": [366, 368, 467, 469], "pace": [366, 367], "1237": 366, "1369": [366, 418], "700": [366, 444, 461], "405": 366, "1131": 366, "cell": [366, 394, 420, 440, 452, 460, 467, 468, 478], "advantag": [366, 372, 375, 382, 409, 460, 465, 528, 552], "guarante": [366, 381, 383], "nbstripout": 366, "mechan": [366, 376, 382, 385], "binder": [366, 387, 417, 420, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "ipynb": [366, 378, 400, 403, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 478, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "upcom": [366, 367], "url": 366, "cwd": 366, "subfold": [366, 409], "far": [366, 371, 373, 375, 379, 382, 385, 394, 409, 443, 480], "dockerfil": [366, 387, 388], "somehow": [366, 372, 377, 480], "submodul": [366, 399, 400, 405, 460, 478, 490], "pointer": 366, "mono": 366, "overal": [366, 372, 431], "summer": 366, "tri": [366, 372], "sprint": [366, 367, 371, 374, 375, 376, 377, 379], "axel": [367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "donath": [367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "1841": 367, "anticip": 367, "conclud": 367, "address": [367, 370, 371, 372, 374, 384, 465, 491], "dc1": [367, 378, 419, 443, 452, 458, 462, 467], "slide": [367, 435, 455], "summar": [367, 480], "suss": [367, 384], "workshop": 367, "indico": 367, "novemb": [367, 396, 406, 407, 408, 409], "octob": 367, "envis": 367, "2020": [367, 378, 379, 380, 381, 382, 396, 442, 443, 451, 460, 540, 541, 542], "septemb": [367, 375, 377, 378, 383], "schedul": 367, "aim": [367, 368, 384, 439, 443, 454, 464, 480, 551], "mileston": [367, 387], "fridai": 367, "am": 367, "monthli": [367, 385, 390, 419], "disccus": 367, "tackl": 367, "coverag": [367, 373, 388, 397, 401, 409, 415, 418, 450, 457], "runtim": [367, 385], "experienc": [367, 393], "simpifi": 367, "redesign": 367, "astropy_healpix": 367, "classic": [367, 376, 390, 399, 428, 431, 437, 441, 456, 459, 490, 492, 501, 502, 551, 554], "backround": 367, "enabl": [367, 370, 391, 400, 409, 418, 427, 434, 436, 439, 441, 447, 451, 467], "xml": [367, 368, 369, 402, 416, 418, 467, 480], "baysian": 367, "front": [367, 387, 416], "emce": [367, 375, 399, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "diagnosi": 367, "dc2": 367, "preliminari": [367, 378, 386, 414, 416, 424, 435, 458, 468], "board": [367, 378], "cc": [367, 372, 374, 377, 379, 381, 384, 386], "deadlin": [367, 371], "david": [368, 373, 398, 418, 419], "fidalgo": [368, 373, 398, 418, 419], "1877": 368, "foreseen": [368, 383], "focus": [368, 384], "analyz": [368, 469, 551], "sole": [368, 384], "ctool": [368, 371, 374, 378, 526], "emerg": 368, "spring": [368, 419], "madrid": 368, "deadc": 368, "manifest": 368, "connect": [368, 431, 445, 447, 461, 477, 549], "proxi": 368, "observationcta": 368, "capabl": [368, 468, 480], "superflu": [368, 452], "she": [368, 373], "observationlist": [368, 419], "cumbersom": [368, 376], "3000": [368, 455], "gtselect": [368, 468], "gtmktime": [368, 468], "dss": 368, "csobsselect": 368, "ctselect": 368, "essenti": [368, 370, 373, 403, 404, 405, 445, 460], "fly": 368, "datastoreindex": 368, "datastorexml": 368, "datastoreinmemori": 368, "child": 368, "mere": 368, "focu": [368, 378, 403, 416, 433, 552], "__len__": 368, "__getitem__": [368, 369, 370], "select_phas": 368, "readi": [368, 385, 393, 551], "feel": [368, 552], "withdraw": [368, 369, 370, 373, 380, 382], "room": 368, "gammmapi": [368, 375], "1971": 369, "thereof": 369, "framework": [369, 371, 372, 374, 376, 377, 381, 399, 400, 406, 418, 452, 463, 482, 492], "varieti": [369, 550], "spectraltempl": 369, "tablemodel": [369, 419], "spectralbackground": 369, "logparabola": [369, 527], "skyspatialmodel": [369, 418], "spatialtempl": 369, "skydiffusemap": [369, 400], "spatialbackground": 369, "spatialgaussian": 369, "phasecurvetempl": 369, "lightcurvetempl": 369, "phasecurvetablemodel": [369, 371], "lightcurvetablemodel": [369, 371], "temporalbackground": 369, "sourcetempl": 369, "skydiffusecub": [369, 381, 400, 405, 406, 418], "sourcebackground": 369, "parenthes": [369, 375, 421, 423], "spectralgaussian": [369, 401], "spatialconst": 369, "spectralconst": 369, "arthmet": 369, "autograd": [369, 376], "staticmethod": [369, 381, 386, 463, 465], "apply_psf": [369, 402], "dispatch": 369, "par": [369, 381, 386, 457, 465, 467], "wrap_at": 369, "backgroundtempl": 369, "predic": 369, "countspredictor": 369, "spectral_irf_model": 369, "mapevalu": [369, 370, 402, 403, 406, 409, 420, 421, 422, 424], "hidden": 369, "systemat": [369, 382, 384, 385, 406, 431, 449, 459, 490, 551, 553], "source_irf_model": 369, "compoundskymodel": 369, "difficult": [369, 372, 388], "compoundsourcemodel": 369, "reimplement": 369, "component_1": 369, "component_2": 369, "total_model": 369, "quival": 369, "spectralcompoundmodel": 369, "source_1": [369, 374], "source_2": 369, "cryptic": 369, "par_00x_": 369, "likelihood_profil": [369, 399], "skycood": 369, "pointsourc": [369, 480], "point_sourc": 369, "simplif": [369, 381, 420], "skygaussianelong": 369, "skydiskelong": 369, "loggaussian": 369, "mapfit": [369, 370, 399, 418, 419], "xx": [369, 384], "recognis": [369, 552], "irfmodel": 369, "modelevalu": 369, "spectralevalu": 369, "sourceevalu": 369, "backgroundevalu": 369, "atreye": [370, 373, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424], "sinha": [370, 373, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424], "4th": [370, 396], "30th": 370, "1986": 370, "advanc": [370, 374, 375, 378, 386, 390, 458, 460, 492, 551, 552], "likelhood": 370, "userdataset": 370, "stat_per_bin": 370, "map_dataset": [370, 452], "bkg_model": [370, 380, 386, 439, 443, 444, 447, 462, 477, 512], "backgroundmodel": [370, 380, 381, 402, 404, 405, 406, 409], "spectrum_dataset_1": 370, "spectrum_dataset_2": 370, "flux_point_dataset": 370, "cstat": [370, 403], "dataset_onoff": 370, "aceptance_off": 370, "spectralbackgroundmodel": 370, "countsspectrum": [370, 373, 400, 401, 403, 405, 414], "accordingli": [370, 384, 400, 406, 461], "effectiveareat": [370, 397, 409, 413], "spectrumobserv": [370, 400, 416], "spectrumdatasetsonoff": 370, "ne": 370, "central": [370, 379, 429, 478], "random_se": 370, "unbin": [370, 371, 418], "stai": 370, "serializiaton": 370, "fluxpointfit": 370, "2023": [370, 385, 386, 396, 399], "2026": [370, 399], "2030": [370, 399], "2045": 370, "2071": [370, 399], "2264": [370, 401], "obviou": [370, 377, 378, 379, 385], "inspect": [370, 374, 394, 431, 433, 439, 443, 444, 457, 460, 462, 467, 468], "advanteg": 370, "Such": [370, 458, 496], "un": [370, 384, 406, 462], "fabio": [371, 376, 399, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 416, 418, 420, 422, 423, 424], "pintor": [371, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 420, 422, 423, 424], "andrea": 371, "giuliani": 371, "aug": [371, 374, 375, 377, 396], "2136": [371, 402], "inversecdf": 371, "astrisim": 371, "agil": 371, "choic": [371, 375, 377, 384, 431, 432, 434, 436, 457, 469, 476, 493, 549, 552], "gtobsim": 371, "rej_sampl": 371, "envelop": [371, 457, 477], "spend": [371, 378], "pmf": 371, "practic": [371, 375, 379, 382, 383, 384, 385, 431, 456, 461, 463, 477, 488, 492, 501, 551], "enough": [371, 373, 374, 431, 434, 437, 447, 449, 461], "hli": [371, 404, 405, 409, 420, 426, 430, 472, 491, 551], "procedur": [371, 383, 388, 435, 439], "expomap": 371, "geom_irf": 371, "event_id": [371, 467, 468, 478, 489], "mapdatasetsampl": 371, "events_list": 371, "compute_npr": 371, "events_src": 371, "n_events_bkg": 371, "events_bkg": 371, "events_tot": 371, "get_events_meta_data": 371, "src": [371, 442, 488], "exposure_tim": 371, "irrespect": [371, 439, 460, 504], "inversecdfsampl": [371, 401], "2229": [371, 401], "dec_tru": 371, "uniformli": [371, 490], "pipelin": [371, 373, 405], "monitor": [371, 467, 492], "conception": [371, 380], "scope": [371, 372, 373, 374, 377, 385, 481], "fundament": [371, 380, 385], "expir": 371, "jun": [372, 374, 375, 380, 381], "2129": [372, 401], "subspac": 372, "histori": [372, 384, 420], "ahead": [372, 398], "earli": [372, 377, 378, 467], "pyregion": 372, "affili": [372, 384, 420], "situat": [372, 373, 375, 497], "pretti": [372, 378, 388, 394], "surprisingli": 372, "tricki": 372, "semant": [372, 383], "distort": [372, 401], "aitoff": 372, "disjoint": 372, "exchang": 372, "to_pixel": [372, 431, 441, 454, 459, 463, 501, 509, 510, 511], "skycoord_to_pixel_scale_angl": 372, "circlepixelregion": 372, "shear": 372, "to_polygon": 372, "accuraci": [372, 457, 492], "polygonpixelregion": 372, "vertex": 372, "feasibl": [372, 377, 434, 447, 456], "180": [372, 390, 392, 397, 426, 455, 460, 517], "wedg": 372, "make_region": 372, "ds9parser": 372, "pixcoord": 372, "make_pixel_region": 372, "pixelregion": [372, 501], "gather": [372, 378, 387], "make_sky_coord": 372, "wouldn": 372, "disk_inc": 372, "hpx_pixel": 372, "corner": [372, 375, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "221": [372, 410, 426, 431, 517], "select_sky_box": 372, "skycoord_from_t": 372, "hoc": 372, "berge2007": [372, 501, 502, 551], "ambigu": [372, 417], "2089": [372, 401], "isol": [372, 389, 461], "complic": [372, 505], "fewer": [372, 378], "arctan": 372, "specialis": [372, 378], "anywher": [372, 375, 377, 488], "specutil": 372, "spectralregion": 372, "1805": 372, "beyond": [372, 382, 385, 405, 459, 480], "whatev": [372, 374, 375, 552], "bump": [372, 416], "1172": 372, "360": [372, 460, 480], "1715": 372, "1445": 372, "polygonis": 372, "june": [372, 376, 396], "1451": 373, "spectrumonoffdataset": 373, "fluxpointestim": [373, 400, 406, 419], "night": [373, 450], "elev": 373, "atmospher": [373, 390, 395, 467], "transpar": 373, "pollut": 373, "spectrumextract": [373, 400, 403, 416], "backgroundestim": [373, 403], "apart": 373, "drawback": [373, 377], "rerun": 373, "time_step": 373, "nstep": 373, "time_bin": 373, "tmin": 373, "tmax": 373, "zip": [373, 386, 387, 431, 450, 454, 457, 462, 472, 486, 506, 511, 515, 528], "absenc": [373, 437, 459, 461, 501, 553], "carri": [373, 381, 383, 385, 409, 429, 477], "recurr": 373, "hea": 373, "ftool": 373, "mgtime": 373, "fashion": [373, 378], "lc_estim": 373, "rpovid": 373, "simple_rebin_lc": 373, "min_significance_lc": 373, "min_signific": 373, "timeseri": 373, "time_bin_start": 373, "time_bin_s": 373, "time_bin_end": 373, "distinct": [373, 374, 379, 469, 555], "astropy_timeseri": 373, "lomb": [373, 417], "scargl": [373, 417, 448], "periodogram": [373, 418], "fit_stat_scan": 373, "lar": [374, 398, 399, 400, 416, 417, 418, 421, 423], "mohrmann": [374, 398, 399, 400, 416, 417, 418, 421, 423, 551], "2219": [374, 402], "hap": 374, "commun": [374, 380, 384, 387, 389, 395, 470], "embryon": 374, "demonstr": [374, 399, 402, 403, 404, 405, 406, 411, 423, 424, 448, 449, 460, 462, 472, 504], "pillar": 374, "papermil": 374, "moreov": [374, 455, 459, 488], "benchmark": [374, 384, 388], "atom": 374, "spectrumanalysisiact": [374, 402, 416], "session": [374, 384, 491], "recov": 374, "diagnost": 374, "uncom": [374, 467], "sketch": 374, "understand": [374, 395, 403, 404, 428, 431, 432, 433, 436, 443, 444, 448, 450, 451, 460, 461, 462, 467, 476, 477, 480, 552], "out_fold": 374, "store_per_ob": 374, "max_offset": 374, "energy_saf": 374, "roi_max": 374, "111140": [374, 436, 439, 441], "111159": [374, 436, 439, 441, 467], "conesearch": 374, "gal_diffus": 374, "drive": 374, "agent": 374, "reflectedbgestim": 374, "toolbox": [374, 414], "deliv": 374, "deleg": 374, "mkdir": [374, 431, 432, 439, 440, 443, 476, 477], "gammapy_analysis_config": 374, "juypter": 374, "reduce_data": 374, "supervisor": 374, "source_42": 374, "energy_bin": 374, "spectral_point": 374, "data_reduct": 374, "eager": 374, "incorpor": [374, 378, 386, 551], "skeleton": 374, "proven": 374, "queri": [374, 414, 455], "forens": 374, "research": [374, 384], "reus": [374, 406, 424], "fermitool": 374, "traitlet": [374, 385], "consider": [374, 399, 409, 417, 439], "enrico": 374, "assist": 374, "enrico_config": 374, "enrico_xml": 374, "tweak": [374, 409, 460], "op": 374, "cookiecutt": 374, "unus": [374, 401, 403], "benn": 374, "brigitta": [375, 399, 401, 403, 405, 414, 415, 416, 417, 418, 419, 420], "sipocz": [375, 399, 401, 403, 405, 414, 415, 416, 417, 418, 419], "2218": [375, 402], "macport": [375, 416, 418], "benefit": 375, "exot": 375, "platform": [375, 384, 409], "pypi": [375, 385, 387, 388, 390, 391], "maco": [375, 418], "upload": [375, 387, 467], "anaconda": [375, 389, 390], "vast": [375, 411], "debian": [375, 391, 413], "expertis": 375, "wheel": 375, "homebrew": 375, "mar": [375, 396, 421], "jsonschema": [375, 402, 403], "sunpi": [375, 378, 379], "alphabet": [375, 384, 399, 400, 401, 402, 403, 404, 405, 406, 409], "parfiv": [375, 402], "outdat": [375, 378], "unsupport": 375, "plain": [375, 460], "numba": 375, "somewhat": [375, 467], "modernis": [375, 403], "2279": [375, 402], "docker": [375, 388], "sink": 375, "suffer": [375, 452], "metapackag": 375, "glueviz": 375, "familiar": [375, 376, 460, 461, 478], "newer": [375, 388, 399, 418], "2270": 375, "workaround": 375, "extras_requir": 375, "quentin": [376, 380, 381, 401, 402, 403, 404, 405, 406, 409, 411, 412, 420, 421, 422, 423, 424], "r\u00e9my": [376, 409, 411, 412, 420], "acero": [376, 399, 401, 403, 406, 409, 411, 416, 418, 424], "2255": [376, 464], "autodiff": 376, "mcmc": [376, 378, 399, 404, 406, 528], "bayesian": 376, "uncertaint": 376, "mont": [376, 497], "carlo": [376, 497], "mc": 376, "mcerp": 376, "primer": 376, "accur": [376, 419, 439, 457, 499], "absopt": 376, "complaint": 376, "1046": 376, "2007": [376, 551], "2190": 376, "posterior": [376, 465], "frequentist": 376, "multivari": 376, "jax": 376, "tensorflow": [376, 378], "pytorch": 376, "chainer": 376, "2304": 376, "fitmc": 376, "multinorm": 376, "pymc": 376, "3ml": [376, 468], "receiv": [376, 378, 379, 381, 383], "2274": [377, 402, 427], "six": [377, 383], "inconveni": [377, 418], "make_model": 377, "spectralexponentialcutoffpowerlaw3fgl": 377, "weak": [377, 465], "erlangen": 377, "2290": 377, "background_estim": 377, "background_r": [377, 456], "problemat": [377, 382, 385, 450, 492], "illustrate_colormap": 377, "grayify_colormap": 377, "biggest": 377, "lowest": [377, 448], "energy_logspac": 377, "sqrt_space": [377, 403], "sample_powerlaw": 377, "sphericalcircleskyregion": [377, 452, 478], "alma": 377, "4d": 377, "wavelength": 377, "map_analysi": 377, "tightli": 377, "2463": [378, 403], "grown": 378, "reorganis": 378, "oldest": 378, "readili": 378, "april": [378, 385, 405], "adass": 378, "xviii": 378, "proceed": [378, 384, 469], "autogener": 378, "contrast": [378, 551], "irap": 378, "omp": 378, "eu": 378, "djangoproject": 378, "expert": 378, "undertak": 378, "admit": 378, "bottom": [378, 380, 443, 449, 451, 455], "howto": [378, 420, 421], "subsect": [378, 460], "glossari": [378, 420, 488, 505], "revis": 378, "minut": [378, 388, 417, 431, 435, 437, 439, 441, 442, 443, 445, 450, 451, 454, 456, 457, 459, 465, 476], "plai": [378, 441], "customis": [378, 458], "prod3": 378, "cta_data_analysi": [378, 426, 441, 446], "fermi_lat": [378, 418, 426, 468, 471], "image_analysi": [378, 398], "sed_fitting_gammacat_fermi": 378, "spectrum_simul": [378, 426, 430, 434], "simulate_3d": [378, 418, 426, 446, 447], "cta_sensist": 378, "pulsar_analysi": [378, 426, 452, 453], "complement": 378, "getting_start": 378, "detect_t": 378, "cwt": [378, 403, 415, 418], "mcmc_sampl": [378, 401], "astro_dark_matt": [378, 426, 454, 466], "source_population_model": [378, 403], "image_fitting_with_sherpa": [378, 419], "spectrum_fitting_with_sherpa": 378, "mini": 378, "handbook": [378, 472], "processor": 378, "jupytext": 378, "attract": 378, "season": 378, "ctao": [378, 384, 467, 492], "rearrang": 378, "phone": 378, "2720": [379, 405], "subpackag": [379, 385, 402, 409, 413], "intuit": [379, 555], "analogi": 379, "asmoothestim": 379, "2555": 379, "mappanelplott": [379, 557], "colormap_hess": [379, 557], "limamapestim": [379, 405], "kernelbackgroundmapestim": 379, "tablepsf": [379, 397, 399], "delai": [379, 383], "remi": [380, 381, 401, 402, 403, 404, 405, 406, 409, 420, 421, 422, 423, 424], "apr": [380, 395, 396], "26th": 380, "2942": 380, "indiviud": 380, "resid": [380, 463], "server": [380, 390, 392, 472], "set_models_paramet": 380, "my_sourc": 380, "bkg_maker": [380, 428, 431, 433, 441, 450, 501], "backgroundirfmodel": 380, "implic": 380, "2944": [381, 406], "piecewisebrokenpowerlawnormspectralmodel": 381, "constantnormspectralmodel": 381, "pwl_norm": [381, 463, 532], "log_parabola_norm": 381, "bpwl_norm": 381, "const_norm": 381, "angular_separ": [381, 422, 424, 463], "mycustomgaussianmodel": [381, 463], "sigma_1tev": [381, 463], "sigma_10tev": [381, 463], "energy_nod": [381, 463], "expon": [381, 463], "from_refer": 381, "sersicspatialmodel": 381, "sersic2d": 381, "brokenpowerlaw": 381, "eqnarrai": 381, "e_b": 381, "phasecurvemodel": 381, "piecewisebrokenpowerlawnormspectramodel": 381, "pwbpl": 381, "eblabsorbtionnormspectralmodel": 381, "absorbt": 381, "sersic": 381, "spectral_typ": 381, "spectral_par": 381, "spatial_typ": 381, "spatial_par": 381, "temporal_typ": 381, "0e": [381, 432, 434, 436, 440, 443, 447, 451, 456, 458, 460, 462, 463, 468, 476, 508, 509, 510, 511, 513, 514, 515, 516, 519, 520, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "14th": [382, 385, 396], "3075": 382, "regard": [382, 385, 431], "deduc": [382, 424], "excessprofileestim": [382, 406], "divers": 382, "fp_dnde": 382, "to_sed_typ": 382, "fp_energy_flux": 382, "ingredi": [382, 454], "mappabl": 382, "_data": 382, "fluxpointsetim": 382, "excessestim": 382, "importantli": [382, 418, 428, 552], "sparsif": 382, "my_flux_map": 382, "new_flux_map": 382, "energy_column": 382, "time_column": 382, "_energy_t": 382, "_time_group": 382, "_time_t": 382, "flux_points_at_tim": 382, "lightcurve_at_energi": 382, "abil": [382, 465], "necess": [382, 465], "priori": [382, 437, 461], "fluxmapestim": 382, "excesspointsestim": 382, "clarifi": [382, 423], "thank": [382, 403, 404, 409, 411, 459, 492], "get_group_by_idx": 382, "phase_axi": 382, "group_by_axi": 382, "datasets_in_phase_bin_3": 382, "12th": [383, 396], "2022": [383, 384, 396, 399, 469], "2nd": 383, "3950": [383, 420], "facil": 383, "calendar": [383, 387], "took": 383, "semver": 383, "candid": [383, 411, 455], "0029": 383, "deprecation_polici": 383, "train": 383, "bruno": [384, 401, 403, 406, 409, 412, 416, 417, 418, 420, 421, 422, 423, 424], "kh\u00e9lifi": [384, 420, 422, 423, 424], "thoma": [384, 417], "vuillaum": [384, 417], "25th": 384, "20th": 384, "3970": 384, "recognit": 384, "complianc": [384, 420], "fair": 384, "principl": [384, 386, 431, 502], "fair4r": 384, "licens": [384, 394], "bsd": 384, "remind": [384, 441, 556], "oral": 384, "doi": 384, "consequ": [384, 444, 505], "zenodo": [384, 411], "hal": 384, "swhid": 384, "heritag": 384, "archiv": [384, 470, 477], "who": [384, 454, 480], "deploy": 384, "devop": 384, "school": 384, "social": 384, "media": 384, "aforement": 384, "offici": [384, 493, 552], "regul": 384, "europ": 384, "authoris": 384, "orcid": 384, "certif": 384, "certifi": 384, "wrote": 384, "licenc": 384, "synchronis": 384, "commod": 384, "swh": 384, "whose": [384, 388, 444, 498, 510], "potentiel": 384, "duti": 384, "examin": [384, 496], "facto": 384, "optin": 384, "editori": 384, "journal": 384, "v2": [384, 385, 409, 417, 424, 467], "in2p3": [384, 467], "fr": [384, 467], "fellowship": 384, "oo": 384, "ff": 384, "eco": 384, "268": [384, 426, 435, 441, 455, 462, 478, 538], "famili": 384, "yyyi": 384, "lab": [384, 394, 417], "yy": 384, "0000": 384, "eosc": 384, "elabor": [384, 435], "deposit": 384, "charg": [384, 528], "todai": 384, "tributor": 384, "former": [384, 400, 405, 428, 462, 550, 553], "carefulli": [384, 443, 444, 465], "lts_author": 384, "stipul": 384, "contract": 384, "movement": 384, "settl": [384, 556], "safeti": 384, "optout": 384, "acada": 384, "dpp": 384, "spirit": 384, "respond": 384, "10th": [385, 396], "4491": [385, 424], "crucial": [385, 443, 444, 456], "heterogen": [385, 429, 440], "hardli": 385, "sporad": 385, "aggreg": 385, "transfer": 385, "consortium": [385, 467], "fulfil": [385, 460], "flow": [385, 550, 551], "scriptabl": 385, "plausibl": [385, 442], "30d00m00": 385, "creatormedadata": 385, "observationmetadata": 385, "reader": [385, 427, 434, 436, 439, 441, 444, 447, 451, 467], "hint": [385, 435, 490], "ecosystem": 385, "viabil": 385, "traittyp": 385, "metadatabasemodel": 385, "validate_al": 385, "hdr_dict": 385, "hdr": 385, "arbitrarytypemetadata": 385, "pointing_altaz": [385, 423], "validate_loc": 385, "observatory_loc": [385, 411, 427, 434, 443, 444, 447, 451], "validate_zenith_angl": 385, "metadatabas": 385, "daughter": 385, "datastoremetadata": 385, "pointingmetadata": 385, "gtimetadata": 385, "irfmetadata": 385, "stateless": 385, "fluxpointsdatasetmetadata": 385, "datasetsmetadata": 385, "modelsmetadata": 385, "modelmetadata": 385, "fluxmapsmetadata": 385, "fluxpointsmetadata": 385, "discard": [385, 455], "noah": [386, 424], "biederbeck": [386, 424], "katrin": [386, 422, 423, 424], "streil": [386, 422, 423, 424], "4381": [386, 424], "fledg": 386, "knowledg": [386, 394, 429, 434, 440, 442, 445, 447, 449, 457, 459, 460, 462, 465], "realist": 386, "trustworthi": 386, "regularli": [386, 470], "fovbackground": [386, 405], "gaussianprior": [386, 465], "tilt_prior": 386, "norm_prior": 386, "powerlawspectramodel": 386, "stepprior": 386, "tikonov": 386, "regularis": 386, "covariancegaussianprior": 386, "priorfitstatist": 386, "simultan": [386, 451, 456, 463, 465, 488], "multivariategaussianprior": 386, "from_covariance_matrix": 386, "covariance_typ": 386, "2075": 386, "priormodel": 386, "_weight": 386, "_type": [386, 465], "priorparamet": [386, 465], "getattr": 386, "converg": [386, 400, 421, 431, 433, 439, 457, 488, 492, 509], "uniformprior": [386, 465], "uni": 386, "_prior": 386, "parameters_stat_sum": 386, "writeabl": 386, "testpar": 386, "4620": [386, 424], "whatsnew": 387, "citat": 387, "cff": 387, "0rc1": 387, "1rc1": 387, "succed": 387, "tutorials_jupyt": [387, 472], "0rc": 387, "advertis": 387, "rc1": 387, "switcher": 387, "ot": 387, "feedstock": [387, 388], "send": 387, "forum": 387, "mailman": 387, "listinfo": 387, "wp": [387, 467], "xyz": 387, "her": 387, "him": 387, "tent": 387, "__": 387, "infrastructur": [388, 409, 420, 423], "tar": [388, 467], "makefil": [388, 413], "fit_statistics_cython": 388, "galleri": [388, 404, 406, 409, 420, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 478, 493, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549], "sphinx_gallery_conf": 388, "htmlcov": 388, "lf": 388, "sdist": 388, "cruft": 388, "curat": [388, 398], "logo": 388, "banner": 388, "variant": 388, "huge": [388, 510], "ye": 388, "land": 388, "badli": 388, "mybind": [388, 417], "cloud": [388, 472], "coveral": [388, 397], "lgtm": 388, "codaci": 388, "dashboard": 388, "checklist": 388, "straightforward": [388, 555], "slowest": 388, "miniconda": 389, "deactiv": 389, "appl": [390, 392, 394], "silicon": [390, 392], "m1": [390, 392], "arm64": [390, 392], "architectur": [390, 392], "bash": [390, 392, 552], "dialog": [390, 392], "troubleshoot": [390, 391, 392], "water": [390, 469], "jargon": 390, "mutipl": 390, "nightli": [390, 449], "easiest": 391, "egg": 391, "sudo": 391, "apt": 391, "ipython3": 391, "yearli": [391, 416], "insight": 393, "grep": 393, "__version__": 393, "consult": 393, "cheat": 393, "sheet": [393, 492], "believ": [393, 465], "acquir": 394, "haven": 394, "hello": [394, 441], "keyboard": 394, "gcc": 394, "llvm": 394, "clang": 394, "703": 394, "darwin": 394, "copyright": 394, "credit": 394, "cashcountsstatist": [394, 424, 552, 554], "397918129147546": [394, 552], "39791813": [394, 552], "7613": 394, "513": [394, 460], "53343": [394, 449], "92234009259": [394, 449], "94186555556": [394, 449], "44e": 394, "53e": [394, 434], "58": [394, 397, 434, 439, 442, 455, 459, 460, 462, 470, 476, 541, 542, 543, 544], "418007850646973": 394, "desktop": 395, "quickstart": 395, "saw": 395, "februari": 396, "29th": 396, "13th": 396, "decemb": 396, "6th": 396, "16th": 396, "22nd": 396, "19th": 396, "2014": [396, 480], "rolf": 397, "b\u00fchler": 397, "elli": [397, 410], "owen": [397, 410], "177": [397, 451, 468, 469], "misc": [397, 410, 414, 415, 416], "167": [397, 441, 447], "166": [397, 426, 441, 455, 466], "157": [397, 478], "156": [397, 432, 435, 441, 462], "155": 397, "154": [397, 427, 455], "151": [397, 462], "138": [397, 429, 443, 478], "128": [397, 452, 480], "lafferti": [397, 551], "wyatt": [397, 551], "1995": [397, 398], "117": [397, 431, 518], "synthet": 397, "116": 397, "109": [397, 426, 434, 460, 548], "routin": 397, "96": [397, 434, 456, 460, 518], "88": [397, 419, 431, 433, 441, 442, 455, 460, 478], "pyfact": [397, 415], "tevpi": 397, "wavelet": [397, 415], "blob": 397, "7e955f": 397, "11af4c": 397, "went": 398, "apologis": [398, 399, 418], "disrupt": [398, 399], "gammapy_extra": 398, "cta_simul": 398, "prod": 398, "1994": [398, 551], "1991": 398, "1989": 398, "1988": 398, "1975": 398, "1969": 398, "observationstat": [398, 403], "1966": 398, "1962": 398, "1951": 398, "skyellips": [399, 400, 401, 402], "elong": [399, 402, 403, 509, 510], "skygaussian": 399, "forev": 399, "unmaintain": 399, "hugovk": 399, "jason": 399, "watson": 399, "luca": [399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 420, 423], "giunti": [399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 420, 423], "2098": 399, "2097": [399, 427, 434, 436, 439, 441, 447, 451, 467], "2093": 399, "2085": 399, "2077": 399, "2076": 399, "2069": 399, "2066": 399, "2065": 399, "2064": 399, "simulate_dataset": [399, 403, 404], "2054": 399, "2051": 399, "l\u00e9a": [399, 401, 402, 403, 406, 414, 415, 416, 417, 418], "jouvin": [399, 401, 402, 403, 406, 414, 415, 416, 417, 418], "2050": 399, "2049": [399, 455, 478], "select_map_mask": 399, "2046": 399, "2039": 399, "2038": 399, "marion": [399, 418], "spir": [399, 418], "jacob": [399, 418], "2037": 399, "2035": 399, "2034": 399, "2033": 399, "2031": 399, "2028": 399, "homework": 400, "basement": 400, "trash": 400, "spectrumobservationlist": [400, 415], "spectrumfit": [400, 416, 417, 418], "nddata": [400, 403], "naimamodel": [400, 403, 405], "skydisk": 400, "dirk": [400, 414, 416], "lennarz": [400, 414, 416], "debanjan": 400, "bose": 400, "2171": 400, "2169": 400, "2166": 400, "phacountsspectrumlist": 400, "2163": 400, "2160": 400, "2157": 400, "counts_on": 400, "2154": [400, 455], "datastoremak": [400, 411], "2153": [400, 455], "2152": 400, "2151": 400, "2146": 400, "2145": 400, "2142": 400, "2141": 400, "2140": 400, "2139": 400, "2133": 400, "dataaxi": 400, "binneddataaxi": [400, 416], "2132": 400, "2131": [400, 455], "2130": 400, "2128": 400, "feldman": [400, 406, 414, 416, 551], "cousin": [400, 406, 414, 416, 551], "2126": 400, "2124": 400, "2123": 400, "2121": 400, "2119": 400, "pycharm": 400, "2118": 400, "astropy_introduct": 400, "2115": 400, "spectrumresult": 400, "2114": 400, "2112": [400, 477], "2111": 400, "2108": 400, "2106": 400, "2104": 400, "72": [401, 455, 459, 478], "plsuperexpcutoff4fgl": 401, "phacountsspectrum": 401, "energybound": 401, "khelifi": [401, 403, 406, 409, 412, 416, 417, 418, 420, 421], "kaori": 401, "nakashima": 401, "silvia": 401, "manconi": 401, "yu": 401, "wun": 401, "wong": 401, "2296": 401, "2310": 401, "2305": 401, "spectrumsimul": [401, 415, 418], "2300": 401, "2298": 401, "2297": 401, "2294": 401, "2289": 401, "2287": 401, "methoda": 401, "2278": 401, "crabspectrum": 401, "2277": 401, "2276": 401, "2272": 401, "spectrumstat": 401, "2262": 401, "2259": 401, "minos_contour": [401, 419, 457], "2257": 401, "v3": 401, "2254": 401, "2250": 401, "2244": 401, "2243": 401, "2240": 401, "nddataarrai": [401, 415, 416], "2239": 401, "generalrandom": 401, "2238": 401, "mapeventsampl": [401, 402], "2237": [401, 478], "2235": 401, "2230": 401, "2217": 401, "2206": 401, "iter_by_pix": 401, "iter_by_coord": 401, "2204": 401, "2200": 401, "2192": 401, "101": [402, 452, 455], "clearer": 402, "spectrumdatasetonoffstack": 402, "johann": [402, 409, 413, 414, 415, 416, 417, 418], "2412": 402, "2404": 402, "2401": 402, "2400": 402, "2385": 402, "2381": 402, "2379": 402, "2378": 402, "2377": 402, "2375": 402, "mapmakerob": [402, 403], "2368": 402, "2367": 402, "skypointsourc": 402, "2366": 402, "2365": 402, "2360": 402, "2359": 402, "2358": 402, "2356": 402, "2354": 402, "2351": 402, "2347": 402, "2346": 402, "2345": 402, "2344": 402, "2343": 402, "2342": 402, "2338": 402, "2335": 402, "2334": 402, "2330": 402, "2326": 402, "2323": 402, "2321": 402, "dissolv": 402, "2320": [402, 455, 456], "2314": 402, "2313": 402, "2308": 402, "2292": 402, "187": [403, 410, 441], "newli": [403, 404, 405], "unif": 403, "1fhl": [403, 416], "absorbedspectralmodel": [403, 416], "2660": 403, "2654": 403, "2651": 403, "2645": 403, "chi2assym": 403, "2637": 403, "2635": 403, "2627": 403, "2619": 403, "2620": 403, "2616": 403, "2604": 403, "2595": 403, "fluxpointdataset": 403, "2594": 403, "2587": 403, "2585": 403, "2580": 403, "2574": 403, "2567": 403, "2564": 403, "hpxsparsemap": 403, "2563": 403, "2562": 403, "2561": 403, "2559": 403, "2558": 403, "2557": 403, "2553": 403, "2552": [403, 455], "2551": 403, "2546": 403, "2540": 403, "2538": 403, "2536": [403, 462], "cutout_info": 403, "2535": 403, "2528": 403, "2525": 403, "2523": 403, "2521": 403, "to_sherpa": [403, 417, 418], "2520": 403, "2510": 403, "2505": 403, "2502": [403, 441], "observationssummari": 403, "2501": 403, "quetin": 403, "2499": 403, "2498": 403, "2497": 403, "phasebackgroundestim": 403, "2496": 403, "2493": 403, "2492": 403, "2491": 403, "2490": 403, "2486": 403, "2483": 403, "2481": 403, "2479": [403, 477], "geom_tru": 403, "2478": 403, "2477": 403, "2476": 403, "2475": 403, "2472": 403, "2470": 403, "2468": 403, "2464": 403, "2461": 403, "2459": 403, "2455": 403, "2454": 403, "2450": [403, 462], "2449": 403, "2448": 403, "2446": [403, 462], "2444": [403, 435], "2441": 403, "2435": 403, "2433": 403, "travi": [403, 405, 409], "2405": 403, "logscal": 403, "2350": 403, "coordsi": 404, "2756": 404, "2747": 404, "2752": 404, "2755": 404, "2753": 404, "2751": 404, "2750": 404, "2746": 404, "rework": 404, "2743": 404, "2742": 404, "2741": 404, "2739": 404, "2738": 404, "2737": 404, "2735": 404, "2733": 404, "2731": 404, "2730": 404, "2729": 404, "2728": 404, "2727": 404, "2726": 404, "likelihood_typ": 404, "2725": 404, "trapz_loglog": 404, "2723": 404, "2719": 404, "2718": 404, "2715": 404, "2713": 404, "2712": 404, "2711": 404, "2709": 404, "2707": 404, "2705": 404, "2703": 404, "2697": 404, "2692": 404, "2687": 404, "2685": 404, "2684": 404, "2681": 404, "2674": 404, "2673": 404, "2672": 404, "2155": [404, 448, 450, 451, 455, 464, 478, 518], "2667": 404, "81": [405, 426, 449, 518], "compute_lima_map": 405, "significance_lima": 405, "2846": [405, 441], "2841": 405, "2845": 405, "2842": 405, "2839": 405, "2837": 405, "2832": 405, "2829": 405, "2828": 405, "2827": 405, "2823": 405, "2822": [405, 462], "2820": 405, "2818": 405, "2817": 405, "spectrumevalu": 405, "2816": [405, 462], "2815": 405, "2812": 405, "2811": 405, "2810": 405, "2809": 405, "2808": 405, "2805": 405, "2804": 405, "2803": 405, "2802": 405, "2801": 405, "2799": 405, "2798": 405, "2797": 405, "kernelbackgroundestim": 405, "2796": 405, "2794": 405, "2793": 405, "azur": 405, "2792": 405, "2791": 405, "2790": 405, "2789": 405, "2788": 405, "2787": 405, "2785": 405, "2784": 405, "2783": 405, "2782": 405, "2781": 405, "2779": 405, "2778": 405, "2777": 405, "2776": 405, "2775": 405, "2772": 405, "2771": 405, "2768": 405, "2767": 405, "2765": 405, "2764": 405, "2762": 405, "significancemapestim": 405, "2761": 405, "lazyfitsdata": 405, "2759": 405, "osx": 405, "notat": [406, 494, 496, 502, 555], "piecewisenormsectralmodel": 406, "irfstack": [406, 415], "alexi": [406, 409], "almeida": 406, "coutinho": [406, 409], "cosimo": [406, 409, 411, 417, 418, 420, 423], "nigro": [406, 409, 411, 417, 418, 420, 423], "jalel": [406, 409], "hajlaoui": [406, 409], "laura": [406, 409, 411, 412, 418, 420, 422, 423, 424], "olivera": [406, 409, 411, 412, 420, 422, 423, 424], "nieto": [406, 409, 411, 412, 420, 422, 423, 424], "lea": 406, "noeth": [406, 407], "3106": 406, "3100": 406, "3092": 406, "3091": 406, "3089": 406, "3088": 406, "3086": 406, "3085": 406, "3083": 406, "3081": 406, "3080": 406, "3076": 406, "3074": 406, "3072": 406, "3070": 406, "3069": 406, "3063": 406, "3060": 406, "3058": 406, "3054": 406, "3053": 406, "3052": 406, "3051": 406, "3045": 406, "3042": 406, "3041": 406, "3039": 406, "3038": [406, 478], "3037": 406, "3035": 406, "3032": 406, "3030": 406, "inconsist": [406, 412, 422, 423], "3012": 406, "3007": 406, "3005": 406, "3002": 406, "from_gaussian": 406, "3001": 406, "2999": [406, 455], "e_edg": 406, "2998": 406, "2993": 406, "2992": 406, "2991": 406, "2990": 406, "2984": 406, "2981": 406, "2976": 406, "2974": 406, "2967": 406, "2966": 406, "2965": 406, "2956": 406, "2951": 406, "2950": 406, "2948": 406, "2947": 406, "2945": 406, "2943": 406, "2939": 406, "2938": 406, "2932": 406, "plot_spectrum_datasets_off_region": [406, 422, 423, 431, 433, 441, 501], "2931": 406, "2929": 406, "2927": 406, "2924": 406, "2912": 406, "2907": 406, "2903": [406, 462], "2897": 406, "2896": 406, "pyproject": 406, "toml": 406, "2891": 406, "2885": 406, "2874": [406, 478], "2872": 406, "3116": 407, "3114": 407, "3113": 407, "3112": 407, "3111": 407, "3110": 407, "3130": 408, "3129": 408, "_propagate_error": 408, "3127": 408, "3126": 408, "3123": 408, "3125": 408, "3124": 408, "3122": 408, "excess_matching_signific": [408, 418], "390": 409, "heavili": 409, "significantli": [409, 443, 467, 551], "reorgan": 409, "treatment": [409, 439, 551], "labelmapaxi": [409, 423], "unnecessari": [409, 420, 439], "ly": [409, 462], "dimitri": [409, 411], "papadopoulo": [409, 411], "buchner": 409, "mathieu": [409, 412], "boni": [409, 412], "maximilian": [409, 411, 412, 421, 422, 423, 424], "n\u00f6the": [409, 411, 412], "sebastian": 409, "panni": 409, "vika": 409, "joshi": 409, "3592": 409, "3584": 409, "3568": 409, "3561": 409, "3559": 409, "codespel": 409, "3544": 409, "3529": 409, "overload": 409, "3523": 409, "gaussiantemporalmod": 409, "3515": 409, "3491": 409, "3488": 409, "3480": 409, "3474": 409, "3471": 409, "to_spectrum": 409, "3468": 409, "3466": 409, "3458": 409, "3454": 409, "3453": 409, "3449": 409, "3447": 409, "3446": 409, "3445": 409, "3439": 409, "3438": 409, "3434": 409, "3428": 409, "3426": 409, "3423": 409, "3420": 409, "3418": 409, "3416": 409, "3413": 409, "3406": 409, "3404": 409, "3403": 409, "3402": 409, "3399": 409, "3397": 409, "3395": 409, "3393": 409, "3392": 409, "3390": 409, "3381": 409, "3379": 409, "find_root": 409, "3377": 409, "jose": [409, 411, 417], "3374": 409, "make_theta_squared_t": [409, 470], "3369": 409, "3363": 409, "3358": 409, "3357": 409, "3353": 409, "need_upd": 409, "3349": 409, "3347": 409, "3346": 409, "3343": 409, "3342": 409, "3338": 409, "3337": 409, "3335": 409, "3333": 409, "3328": 409, "3323": [409, 456], "3320": 409, "3319": 409, "3314": 409, "3310": 409, "3309": 409, "3308": 409, "3307": 409, "3306": 409, "3305": 409, "3304": 409, "3303": 409, "3302": 409, "3301": 409, "3293": 409, "thumbnail": 409, "3285": 409, "3284": 409, "3283": 409, "plot_spati": 409, "3281": 409, "shorten": 409, "3279": 409, "3278": 409, "3277": 409, "3276": 409, "3272": 409, "3262": 409, "3258": 409, "3257": 409, "3254": 409, "mailmap": [409, 420], "3246": 409, "3243": 409, "3241": 409, "3238": 409, "3230": 409, "3228": 409, "3222": 409, "3219": 409, "3217": 409, "classproperti": 409, "3216": 409, "3211": 409, "3208": 409, "3207": 409, "3202": 409, "3199": 409, "3197": 409, "3191": 409, "3185": 409, "3182": 409, "3180": 409, "3178": 409, "3173": 409, "3169": 409, "3168": 409, "3165": 409, "3162": 409, "3158": 409, "3155": 409, "layout": [409, 439, 447, 460, 476, 477], "3153": 409, "3152": 409, "3148": 409, "3145": 409, "_compute_flux_spati": 409, "3141": 409, "3140": 409, "3138": 409, "3136": 409, "3131": [409, 462], "manuel": [410, 413, 414], "paz": [410, 413, 414], "arriba": [410, 413, 414], "254": 410, "252": [410, 431, 441, 455], "248": 410, "246": 410, "245": [410, 432], "inset": 410, "236": [410, 455], "235": [410, 431], "234": [410, 426, 452, 453, 538], "231": 410, "230": [410, 435], "setuptool": [410, 552], "entry_point": 410, "xmltodict": [410, 467], "210": [410, 455], "205": [410, 441, 460], "healpix_to_imag": 410, "194": [410, 431], "tevcat": [410, 455], "188": [410, 426, 427, 455, 479], "spectral_cub": 410, "integral_flux_imag": 410, "186": [410, 426, 430, 441, 455], "radmax": [411, 412, 423, 424], "wobbleregionfind": 411, "theme": [411, 418], "pydata": 411, "predefin": [411, 445, 449, 450, 476], "arnau": [411, 420, 421, 422, 423], "aguasca": [411, 420, 421, 422, 423], "tyler": 411, "cahil": 411, "alisha": 411, "chromei": 411, "3941": 411, "3936": 411, "3933": 411, "3918": 411, "3915": 411, "3906": 411, "3905": 411, "3904": 411, "3898": 411, "3895": 411, "__eq__": 411, "__neq__": 411, "3892": 411, "3887": 411, "3876": 411, "3874": 411, "mapdatasetoff": 411, "read_lazi": 411, "3873": 411, "3860": 411, "3856": 411, "3846": 411, "3842": 411, "3837": 411, "3833": 411, "codemeta": 411, "3817": 411, "3810": 411, "3806": 411, "3804": 411, "3802": 411, "3797": 411, "3796": 411, "3783": 411, "3777": 411, "3761": 411, "3760": 411, "pyflak": 411, "3752": 411, "3748": 411, "3740": 411, "3733": 411, "3728": 411, "3722": 411, "3720": 411, "3713": 411, "3712": 411, "3699": 411, "3684": 411, "3669": 411, "3535": 411, "17th": 412, "3990": 412, "3988": 412, "3983": 412, "3987": 412, "3986": 412, "3979": [412, 552], "nmcid": 412, "mid": [412, 423, 467], "3975": 412, "onoff": [412, 488], "3966": 412, "3959": 412, "make_map_background_irf": 412, "3948": 412, "required_hdu": 412, "hspec": [413, 414, 415], "ignasi": 413, "reichardt": 413, "icrc": 413, "jonathan": [413, 414], "harri": [413, 414], "stefan": [413, 424], "klepser": 413, "victor": 413, "zabalza": 413, "326": 413, "318": [413, 426, 431, 538], "317": [413, 434], "312": 413, "306": [413, 553], "301": [413, 434], "299": [413, 434, 455], "296": [413, 432], "fitspectrum": 413, "295": 413, "291": 413, "shower": [413, 467, 497], "289": [413, 434], "286": [413, 434], "285": [413, 434], "283": [413, 431, 434], "sample_spher": [413, 556], "279": 413, "snrcat": [413, 455], "276": 413, "temp": [413, 444], "262": [413, 435, 462, 478], "261": [413, 478], "260": [413, 426, 478], "108": 414, "women": 414, "hack": 414, "appveyor": 414, "luigi": 414, "tibaldo": 414, "olga": [414, 415], "vorokh": [414, 415], "518": [414, 426, 462, 473], "510": 414, "507": 414, "506": 414, "503": 414, "502": 414, "487": [414, 476], "485": 414, "offdatabackgroundmak": 414, "484": 414, "478": 414, "475": [414, 462], "474": 414, "473": 414, "462": [414, 431], "461": 414, "pacman": 414, "459": [414, 456, 462], "456": 414, "455": [414, 429], "447": 414, "436": [414, 431], "435": 414, "421": [414, 445, 478, 551], "403": [414, 441, 462], "415": [414, 528], "414": [414, 439], "398": [414, 439], "396": 414, "395": 414, "394": [414, 431], "392": [414, 432], "387": [414, 478], "energyoffsetarrai": 414, "379": 414, "375": [414, 460], "371": [414, 432], "369": 414, "367": [414, 445, 462], "364": [414, 431], "pipe": [414, 415, 416], "359": [414, 441, 455, 478], "352": [414, 455], "351": [414, 455, 478], "347": [414, 428], "342": 414, "339": [414, 445], "poissonlikelihoodfitt": 414, "338": [414, 455], "337": [414, 434], "335": 414, "330": [414, 434, 451, 462], "319": [414, 468], "290": [414, 431, 434, 442], "domenico": 415, "tiziani": 415, "helen": 415, "poon": 415, "julien": [415, 416, 417], "lefaucheur": [415, 416, 417], "nachiketa": [415, 416], "chakraborti": [415, 416], "790": [415, 431, 451], "789": 415, "783": [415, 455, 478], "778": [415, 431, 455], "777": 415, "774": [415, 447], "772": [415, 427], "767": 415, "checker": [415, 418], "766": [415, 435], "763": 415, "tablepsfcheck": 415, "762": 415, "759": 415, "754": 415, "753": [415, 432], "746": 415, "740": 415, "spectrumobservationstack": 415, "739": [415, 431], "738": [415, 455], "731": 415, "719": [415, 431, 462], "713": [415, 455], "710": 415, "709": 415, "679": 415, "677": 415, "661": 415, "660": 415, "653": [415, 428], "649": 415, "648": 415, "647": 415, "641": [415, 478], "640": 415, "635": 415, "631": [415, 439], "exclusionmask": 415, "628": 415, "622": [415, 429], "599": [415, 445, 450, 462], "594": [415, 431], "configpars": 415, "593": 415, "591": [415, 455], "582": 415, "skyimagelist": 415, "558": 415, "569": 415, "\u00e0": 415, "la": 415, "bgstat": 415, "565": [415, 426, 456, 466], "exptest": 415, "559": 415, "look_up": 415, "557": [415, 462], "556": [415, 431, 554], "549": 415, "547": [415, 427, 455], "546": 415, "545": [415, 431], "544": [415, 455, 468], "541": 415, "535": [415, 431, 455], "531": [415, 445], "observationtablesummari": 415, "530": 415, "529": 415, "data_summari": 415, "527": [415, 468], "526": 415, "to_table_psf": 415, "524": [415, 426, 455, 459, 462, 466], "523": [415, 460], "521": 415, "147": [416, 455, 460], "bi": [416, 419], "port": 416, "py35": 416, "rewritten": [416, 419], "arjun": [416, 417], "voruganti": [416, 417], "arpit": 416, "gogia": 416, "z\u00e9": 416, "vin\u00edciu": 416, "1006": 416, "1002": 416, "areasc": [416, 418], "1001": [416, 443, 444], "997": 416, "compute_chisq": 416, "994": 416, "988": [416, 455, 462], "985": [416, 429], "976": 416, "975": 416, "plsuperexpcutoff3fgl": 416, "966": 416, "skymask": 416, "950": 416, "933": 416, "932": 416, "919": 416, "911": 416, "get_respons": 416, "906": [416, 446, 455], "getitem": 416, "898": 416, "893": 416, "888": 416, "885": [416, 451], "884": 416, "883": 416, "881": [416, 427, 435], "875": 416, "872": 416, "871": 416, "868": [416, 455], "865": [416, 435], "864": [416, 431, 478], "859": [416, 431], "image_profil": 416, "858": 416, "855": 416, "854": 416, "851": 416, "847": 416, "842": [416, 455], "840": [416, 435], "837": [416, 462], "836": [416, 435, 452, 455], "835": 416, "834": [416, 438], "833": [416, 432], "832": 416, "831": 416, "830": 416, "827": 416, "826": 416, "825": [416, 426, 427, 455, 466], "820": [416, 426, 437, 438], "816": [416, 442], "814": 416, "813": 416, "812": [416, 426, 446], "811": 416, "810": [416, 453, 455], "798": 416, "796": [416, 462], "logenergyaxi": 416, "797": 416, "793": 416, "791": 416, "784": [416, 432], "178": 417, "openastronomi": 417, "navig": [417, 419], "servic": 417, "launch": [417, 552], "role": [417, 459], "lemi\u00e8r": 417, "jean": [417, 418], "philipp": [417, 418], "lenain": [417, 418], "kai": [417, 418], "br\u00fcgge": [417, 418], "saha": 417, "matthia": [417, 418], "wegen": [417, 418], "oscar": [417, 418], "blanch": [417, 418], "peter": 417, "deiml": 417, "roberta": [417, 418], "zanin": [417, 418], "rub\u00e9n": 417, "l\u00f3pez": 417, "coto": 417, "armstrong": 417, "yve": 417, "gallant": 417, "spectrumstack": 417, "1318": 417, "1316": 417, "1312": 417, "1305": 417, "1300": 417, "1294": 417, "1291": 417, "1290": 417, "image_pip": 417, "1289": 417, "1287": 417, "1281": 417, "1266": 417, "1268": 417, "to_energy_dependent_table_psf": 417, "1246": 417, "1240": 417, "1238": 417, "1235": 417, "1227": 417, "1226": 417, "1220": 417, "1215": 417, "1211": [417, 455], "1210": 417, "spectrumenergygroup": 417, "1207": 417, "1204": 417, "1195": 417, "1190": 417, "1183": 417, "1179": 417, "1176": 417, "1170": 417, "1169": 417, "1166": 417, "1162": 417, "1150": 417, "1134": 417, "1133": 417, "energy_resolut": 417, "1127": 417, "1115": 417, "1110": 417, "atnf": 417, "1108": 417, "1107": 417, "gaussianband2d": 417, "1105": 417, "1104": 417, "1103": 417, "flask": 417, "1102": 417, "1100": 417, "1098": 417, "1093": [417, 435], "1092": [417, 435], "1090": 417, "1089": 417, "1088": 417, "1087": 417, "1085": 417, "1084": 417, "1083": 417, "1082": 417, "saniti": 417, "1078": 417, "1076": 417, "1073": 417, "1070": [417, 478], "1069": 417, "1067": 417, "tsimageestim": 417, "1065": 417, "obs_list": [417, 419], "1057": 417, "1054": 417, "1053": 417, "1051": 417, "1045": 417, "1043": 417, "1040": 417, "1038": 417, "mpl_style": 417, "1136": 417, "1035": 417, "1032": 417, "1031": 417, "1029": 417, "1027": 417, "resourc": [417, 472], "1026": 417, "1025": 417, "butterfli": [417, 457, 478], "1021": 417, "make_base_catalog_galact": [417, 482], "ruben": 417, "1014": 417, "1013": 417, "845": 417, "314": [418, 426, 538], "intro_map": 418, "heavi": [418, 419], "pin": 418, "analysis_3d": [418, 426, 439, 446, 449], "aplpi": 418, "andrew": 418, "chen": 418, "gabriel": 418, "emeri": 418, "hubert": 418, "siejkowski": 418, "vega": 418, "garcia": 418, "1822": 418, "1821": 418, "1818": 418, "1812": 418, "1808": [418, 455, 478], "1800": [418, 444, 460, 467], "observationtablecheck": 418, "1799": 418, "1791": 418, "1785": [418, 427], "1764": [418, 441], "1761": 418, "1760": 418, "1759": 418, "1755": [418, 435], "1751": 418, "1750": 418, "eventlistdataset": 418, "1748": [418, 462], "datastorecheck": 418, "observationcheck": 418, "1746": [418, 478], "1731": [418, 462], "1711": 418, "1702": 418, "1697": 418, "1696": 418, "1695": 418, "1685": 418, "1681": 418, "make_imag": 418, "1675": 418, "1660": 418, "1658": 418, "skimag": 418, "block_reduc": 418, "1634": 418, "1630": [418, 478], "1616": 418, "1606": 418, "fluxpointfitt": 418, "1605": 418, "1594": 418, "1582": 418, "1576": 418, "1573": 418, "1568": 418, "1564": 418, "1562": 418, "1558": 418, "1556": [418, 455, 478], "sync": 418, "1554": 418, "1543": 418, "1527": 418, "1517": 418, "cta_util": 418, "ctaspectrumobserv": 418, "1515": 418, "1505": 418, "1495": 418, "1492": 418, "1489": 418, "1476": 418, "1475": 418, "1474": 418, "1470": [418, 478], "1456": 418, "1447": 418, "1446": 418, "1444": 418, "1443": 418, "1435": 418, "1433": 418, "1432": 418, "1426": 418, "1421": 418, "1412": 418, "1408": [418, 478], "1406": 418, "1401": 418, "catalogimageestim": 418, "1397": 418, "1395": 418, "1387": 418, "1381": 418, "1386": 418, "1378": 418, "1377": 418, "1376": 418, "1374": 418, "1373": 418, "1372": 418, "1367": [418, 524], "1362": 418, "1360": 418, "rtd": 418, "1357": 418, "1354": 418, "1347": 418, "1346": 418, "transpos": 418, "1345": 418, "1343": 418, "1341": 418, "1339": 418, "1337": 418, "1334": 418, "1331": 418, "1317": 418, "1231": 418, "daniel": [419, 422, 424], "morcuend": [419, 422, 424], "ignacio": 419, "minaya": 419, "lui": 419, "contrera": 419, "1949": 419, "1937": [419, 455], "1934": 419, "1933": 419, "1930": 419, "1929": 419, "1927": 419, "1926": 419, "1922": 419, "1921": 419, "1919": 419, "1918": 419, "1912": 419, "1909": 419, "load_cta_irf": [419, 423], "1908": 419, "1904": 419, "1903": 419, "1898": 419, "1895": 419, "1894": 419, "1893": 419, "1891": 419, "1890": 419, "1888": 419, "1884": 419, "analysis3d": 419, "1883": 419, "1871": 419, "constantmodel": 419, "1862": 419, "make_mean_psf": 419, "make_mean_edisp": 419, "1861": 419, "1859": 419, "1857": 419, "1855": 419, "1854": [419, 455], "fluxpointprofil": 419, "1846": 419, "1845": 419, "1837": 419, "1836": 419, "1807": 419, "1849": 419, "1766": 419, "1763": [419, 455], "1710": 419, "cleaner": 420, "button": [420, 460], "anymor": 420, "incorrectli": [420, 461], "templatelightcurvetemporalmodel": 420, "positv": 420, "mireia": 420, "nieva": 420, "rosillo": 420, "sip\u0151cz": 420, "4119": 420, "4115": 420, "conduct": [420, 451], "4113": 420, "4108": 420, "4107": 420, "4106": 420, "reactiv": 420, "4105": 420, "4103": 420, "4098": 420, "failur": [420, 423], "4095": 420, "4093": 420, "4089": 420, "4088": 420, "4084": 420, "templatetemporalmodel": 420, "4083": 420, "4080": 420, "4079": 420, "4076": 420, "4075": 420, "4073": 420, "4071": 420, "4067": 420, "4058": 420, "4054": 420, "aaguasca": 420, "4051": 420, "4044": 420, "4043": 420, "colour": 420, "blind": [420, 492], "4037": 420, "4026": 420, "4025": 420, "4024": 420, "4022": 420, "4018": 420, "4017": 420, "4015": 420, "4014": 420, "4013": 420, "4000": 420, "mnt": 420, "silent": 420, "3956": 420, "3925": 420, "3862": 420, "linhoff": [421, 422, 423, 424], "regeard": [421, 422, 423, 424], "4359": [421, 423], "4344": 421, "norm_only_chang": 421, "4336": [421, 423], "4324": [421, 423], "4301": [421, 423], "4275": [421, 423], "4268": 421, "4231": [421, 423], "4221": 421, "manner": [422, 423], "array_shap": [422, 424], "kirsti": [422, 423, 424], "feijen": [422, 423, 424], "claudio": [422, 424], "galelli": [422, 424], "simon": [422, 423, 424], "mender": [422, 423, 424], "michael": [422, 424], "punch": [422, 424], "4937": [422, 424], "4936": [422, 424], "4913": 422, "nooverlaperror": 422, "4876": 422, "4772": 422, "4755": 422, "4753": [422, 424], "4728": 422, "4721": 422, "4681": 422, "4677": [422, 424], "4657": [422, 424], "4653": 422, "4631": 422, "impos": [422, 427, 501], "4619": 422, "4593": 422, "4578": 422, "4574": [422, 424], "4524": 422, "4520": 422, "4500": [422, 423], "4486": [422, 423], "4453": [422, 423], "4435": [422, 423], "tick": [422, 423], "4412": [422, 423], "lightcurvetemplatemodel": [422, 423], "4397": [422, 423], "4394": 422, "4393": [422, 423], "4382": 422, "4380": [422, 423], "129": 423, "hierarchical_clust": [423, 464], "select_nested_model": 423, "ins": 423, "plot_map_rgb": 423, "plot_npred_sign": [423, 439, 441, 477], "pointing_zen": 423, "elpas": 423, "table_from_row_data": 423, "to_st": 423, "latex_inlin": 423, "unit_string_format": [423, 427], "gr\u00e9aux": 423, "4545": 423, "4521": 423, "4510": [423, 439, 478], "4508": 423, "4506": 423, "4504": 423, "4495": 423, "move_axi": 423, "4466": [423, 439], "4459": 423, "dep": 423, "4458": 423, "4444": 423, "4430": 423, "4428": 423, "to_str": [423, 427], "4418": 423, "_evaluate_timevar_sourc": 423, "4417": 423, "4409": 423, "4406": 423, "4402": 423, "4395": 423, "4370": 423, "_sample_coord_time_energi": 423, "4369": 423, "4352": 423, "4350": 423, "4346": 423, "4326": 423, "4305": 423, "4294": 423, "4288": 423, "4282": 423, "4280": 423, "4277": 423, "4264": 423, "4252": 423, "4245": 423, "4243": 423, "_check_interv": 423, "4242": 423, "4219": 423, "4216": 423, "teststatisticnest": 423, "4215": 423, "4213": 423, "4212": 423, "unneed": 423, "4210": 423, "plot_rgb": 423, "4209": 423, "4208": 423, "4191": 423, "axisymmetr": 424, "quantifi": [424, 442, 448, 465], "observationeventsampl": 424, "observationseventsampl": 424, "ivoa": 424, "obscor": 424, "energydependentmorphologyestim": [424, 442], "juan": 424, "bernet": 424, "julia": 424, "djuvsland": 424, "fr\u00f6se": 424, "jana": 424, "konrad": 424, "paula": 424, "kornecki": 424, "kurt": 424, "hanna": 424, "stapel": 424, "tim": 424, "unbehaun": 424, "5044": 424, "5040": 424, "5015": 424, "4994": 424, "4992": 424, "4989": 424, "4978": 424, "4975": 424, "4973": 424, "4971": 424, "4970": 424, "4942": 424, "4940": 424, "apply_edisp": 424, "4917": 424, "4904": 424, "4902": 424, "4886": 424, "4879": 424, "4854": 424, "4851": 424, "4850": 424, "4849": [424, 455, 478], "4847": 424, "4845": 424, "4837": 424, "4835": 424, "4834": 424, "4829": 424, "4828": 424, "4822": 424, "4817": 424, "4814": [424, 478], "4810": 424, "4808": 424, "4805": 424, "4802": 424, "4785": 424, "4783": 424, "4770": 424, "4759": 424, "4750": 424, "4741": 424, "4740": 424, "4738": 424, "4729": 424, "4726": 424, "4714": 424, "4703": 424, "4697": 424, "4671": 424, "4669": 424, "4668": 424, "4664": 424, "4660": 424, "4638": 424, "4635": 424, "4628": 424, "pyirf": 424, "jbernet": 424, "4615": 424, "4608": 424, "4599": 424, "4595": 424, "4584": 424, "4567": 424, "4561": 424, "paulakx": 424, "4546": 424, "4540": 424, "4501": 424, "4485": 424, "4432": 424, "4408": 424, "4217": 424, "mem": [426, 430, 438, 446, 453, 466, 471, 473, 475, 479, 507, 517, 538, 548], "662": [426, 455, 465, 466], "light_curve_flar": [426, 450, 453], "612": [426, 450, 453], "656": [426, 439, 446, 553], "927": [426, 454, 466], "event_sampl": [426, 443, 446], "718": [426, 443, 446], "flux_profil": [426, 445, 446], "572": [426, 432, 445, 446], "energy_dependent_estim": [426, 442, 446], "592": [426, 441, 446], "light_curve_simul": [426, 451, 453], "068": [426, 451, 453], "930": [426, 435, 438], "spectral_analysi": [426, 430, 431], "618": [426, 430, 431], "analysis_1": [426, 476, 479], "385": [426, 476, 479], "ring_background": [426, 437, 438], "model_manag": [426, 462, 466], "297": [426, 427, 466], "spectral_analysis_hli": [426, 430, 432], "476": [426, 430], "079": [426, 471], "029": [426, 430], "543": [426, 479], "080": [426, 431, 471], "041": [426, 466, 468], "analysis_mwl": [426, 440, 446], "sed_fit": [426, 429, 430], "172": [426, 445, 471, 517], "modeling_2d": [426, 436, 438], "extended_source_spectral_analysi": [426, 428, 430], "spectral_analysis_rad_max": [426, 430, 433], "179": [426, 430], "observation_clust": [426, 464, 466], "795": [426, 431, 466], "492": [426, 471], "event_sampling_nrg_depend_model": [426, 444, 446], "967": [426, 446], "697": [426, 466], "625": [426, 466], "survey_map": [426, 473, 474], "plot_absorb": [426, 518, 538], "cta_sensit": [426, 427, 430], "817": [426, 430], "plot_constant_tempor": [426, 539, 548], "651": [426, 455, 548], "variability_estim": [426, 448, 453], "638": [426, 453, 462], "plot_naima": [426, 528, 538], "391": [426, 455, 538], "plot_const": [426, 508, 517], "354": [426, 445, 517], "plot_broken_powerlaw": [426, 519, 538], "plot_powerlaw2": [426, 531, 538], "plot_smooth_broken_powerlaw": [426, 533, 538], "plot_compound": [426, 520, 538], "316": [426, 434, 468, 469, 538], "plot_disk": [426, 509, 517], "315": [426, 455, 517], "plot_powerlaw": [426, 530, 538], "plot_powerlaw_norm_spectr": [426, 532, 538], "plot_logparabola_norm_spectr": [426, 527, 538], "plot_constant_spectr": [426, 521, 538], "plot_gen_gauss": [426, 511, 517], "plot_piecewise_norm_spectr": [426, 529, 538], "plot_templ": [426, 516, 517], "plot_exp_cutoff_powerlaw_norm_spectr": [426, 524, 538], "plot_super_exp_cutoff_powerlaw_4fgl": [426, 535, 538], "plot_super_exp_cutoff_powerlaw_4fgl_dr1": [426, 536, 538], "217": [426, 455, 538], "plot_super_exp_cutoff_powerlaw_3fgl": [426, 534, 538], "plot_gauss_spectr": [426, 525, 538], "plot_logparabola": [426, 526, 538], "plot_gauss": [426, 510, 517], "207": [426, 441, 445, 462, 517], "plot_exp_cutoff_powerlaw": [426, 522, 538], "203": [426, 431, 538], "plot_exp_cutoff_powerlaw_3fgl": [426, 523, 538], "199": [426, 441, 462, 538], "plot_template_spectr": [426, 537, 538], "plot_point": [426, 513, 517], "plot_powerlaw_tempor": [426, 544, 548], "plot_shel": [426, 514, 517], "plot_shell2": [426, 515, 517], "plot_piecewise_norm_spati": [426, 512, 517], "140": [426, 431, 469, 517], "plot_gaussian_tempor": [426, 541, 548], "plot_template_tempor": [426, 547, 548], "plot_template_phase_tempor": [426, 546, 548], "plot_expdecay_tempor": [426, 540, 548], "plot_generalized_gaussian_tempor": [426, 542, 548], "110": [426, 455, 468, 548], "plot_sine_tempor": [426, 545, 548], "plot_linear_tempor": [426, 543, 548], "106": [426, 548], "zenith": [427, 440, 464, 467, 468, 469, 497], "check_tutorials_setup": [427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "python_execut": [427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "python_vers": [427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "x86_64": [427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "source_posit": [427, 442, 464], "directional_offset_bi": [427, 434], "on_region_radiu": [427, 431, 434, 443, 444, 450], "empty_dataset": 427, "unitswarn": [427, 434, 436, 439, 441, 447, 451, 467], "def_unit": [427, 434, 436, 439, 441, 447, 451, 467], "recogn": [427, 434, 436, 439, 441, 443, 447, 451, 467], "add_enabled_unit": [427, 434, 436, 439, 441, 447, 451, 467], "combining_and_defin": [427, 434, 436, 439, 441, 447, 451, 467], "msg": [427, 434, 436, 439, 441, 447, 451, 467], "spectrum_mak": 427, "on_radii": 427, "sensitivity_estim": 427, "sensitivity_t": 427, "0356551": 427, "0423761": 427, "0756e": 427, "1642": 427, "32847": 427, "0503641": 427, "0598579": 427, "33368e": 427, "16506": 427, "0711412": 427, "0845515": 427, "70634e": 427, "482": 427, "7567": 427, "56": [427, 432, 452, 460, 469, 535, 536, 537], "10049": 427, "119432": 427, "33055e": 427, "341": 427, "929": [427, 432], "3765": 427, "63": [427, 431, 433, 456, 459, 469, 470, 476, 477, 499, 501, 502, 505], "141945": 427, "168702": 427, "71944e": 427, "237": 427, "200503": 427, "238298": 427, "74542e": 427, "077": 427, "283218": 427, "336606": 427, "21236e": 427, "107": [427, 460], "112": 427, "400056": 427, "475468": 427, "54721e": 427, "73": [427, 478], "7922": 427, "565095": 427, "671616": 427, "81699e": 427, "9343": 427, "74": [427, 437, 478], "1691": 427, "798218": 427, "948683": 427, "53482e": 427, "37": [427, 432, 434, 457, 468, 554], "9876": 427, "654": [427, 455], "12751": 427, "34005": 427, "30015e": 427, "3536": 427, "6033": 427, "59265": 427, "89287": 427, "04939e": 427, "6823": 427, "9845": 427, "24968": 427, "67375": 427, "93128e": 427, "6464": 427, "43113": 427, "17776": 427, "77678": 427, "05637e": 427, "5411": 427, "66104": 427, "48871": 427, "33484": 427, "49078e": 427, "34047": 427, "53566": 427, "4579e": 427, "8669": 427, "95615": 427, "6444": 427, "00931e": 427, "845693": 427, "6509": 427, "0356": 427, "33013e": 427, "447552": 427, "8699": 427, "2384": 427, "59254e": 427, "266192": 427, "2419": 427, "25162e": 427, "126585": 427, "set_prop_cycl": 427, "xerr": [427, 465], "linestyl": [427, 452, 454, 465, 486, 505, 509, 510], "set_xlabel": [427, 428, 431, 434, 452, 457, 464, 465], "set_ylabel": [427, 428, 431, 445, 452, 454, 457, 464, 518], "ax1": [427, 435, 437, 441, 452, 461, 462], "blackground": 427, "ax2": [427, 435, 437, 441, 452, 461, 462], "twinx": 427, "psf68": 427, "tick_param": 427, "labelcolor": 427, "set_ylim": [427, 429, 431, 432, 433, 449, 452, 494, 518], "simplest": [427, 431, 448], "dataset_on_off1": 427, "44749e": 427, "6390": 427, "63902": 427, "squeez": [427, 458], "vhe": [428, 480], "rx": 428, "j1713": 428, "3935": 428, "3945": [428, 455], "20349": 428, "20350": 428, "20396": 428, "20397": 428, "other_id": 428, "20421": 428, "20422": 428, "20517": 428, "20518": 428, "20519": 428, "20521": 428, "20898": 428, "20899": 428, "20900": 428, "dataset_empti": [428, 431, 433, 434, 441, 450, 456, 459, 469, 501], "geolat": 428, "altitud": 428, "271777777777796": 428, "1834": 428, "9999999997835": 428, "1216": 428, "170": 428, "2339": [428, 455, 478], "270": [428, 435, 455, 462, 478], "3521": 428, "480": [428, 455, 462], "4684": 428, "5895": 428, "874": 428, "66650390625": 428, "77358627319336": 428, "45515263080596924": 428, "6985": 428, "993": 428, "16650390625": 428, "48602294921875": 428, "4618695378303528": 428, "ax_excess": [428, 431], "ax_sqrt_t": [428, 431], "nrow": [428, 431, 457, 518], "set_titl": [428, 431, 435, 437, 441, 452, 454, 457, 458, 459, 462, 501, 511, 515, 518], "rxj": 428, "1713": 428, "fit_joint": [428, 431, 439, 440], "result_joint": [428, 431, 439], "79": [428, 455], "1102e": 428, "3576e": 428, "catalog_registri": [429, 455, 461], "j1507": 429, "j1506": 429, "6219": 429, "6228e": 429, "catalog_3fgl": 429, "get_cl": [429, 455, 461], "catalog_3fhl": [429, 455], "catalog_gammacat": [429, 455], "source_fermi_3fgl": 429, "source_fermi_3fhl": 429, "source_gammacat": 429, "dataset_gammacat": 429, "dataset_3fgl": 429, "dataset_3fhl": 429, "e_refe_mine_maxdndednde_errpdnde_errndnde_ulsqrt_tsis_ul": 429, "gevgevgev1": 429, "float64float64float64float64float64float64float64float32bool": 429, "14210": 429, "00020": 429, "0009": 429, "288e": 429, "343e": 429, "128e": 429, "12nan5": 429, "660fals": 429, "62320": 429, "00050": 429, "0002": [429, 478], "572e": 429, "818e": 429, "13nan6": 429, "940fals": 429, "86": [429, 431, 432, 435, 460, 478, 489], "60350": 429, "000150": 429, "335e": 429, "131": [429, 441], "055e": 429, "554e": 429, "14nan3": 429, "835fals": 429, "861150": 429, "000500": 429, "0006": 429, "411e": 429, "697e": 429, "133e": [429, 435], "14nan5": 429, "697fals": 429, "0002000": 429, "188e": 429, "214": [429, 435], "034e": 429, "15nan8": 429, "068e": 429, "000true": 429, "result_pwl": 429, "6e": [429, 455, 462], "yaxi": [429, 492], "set_unit": [429, 492], "1e2": [429, 484, 486], "set_xlim": [429, 432, 440, 452, 494, 518], "result_ecpl": 429, "894": 429, "96e": 429, "9e": [429, 455, 537], "078": 429, "log_parabola": 429, "result_log_parabola": 429, "88e": [429, 455], "8e": [429, 439, 442, 444, 462, 468, 537], "144": [429, 462, 478], "049": [429, 439], "j0835": [429, 478], "534": 430, "devoid": [431, 495], "emitt": 431, "nuisanc": [431, 457, 551, 555], "resample_energy_edg": [431, 492], "create_crab_spectral_model": [431, 433, 440], "23559": [431, 432, 449, 456, 459, 476, 477, 499, 501, 502, 552], "23592": [431, 432, 449, 456, 459, 476, 477, 499, 501, 502, 552], "j0521": 431, "183": [431, 439], "604": 431, "708": [431, 432], "exclusion_region": 431, "dataset_mak": [431, 433, 441, 450, 459, 501], "safe_mask_mask": [431, 433, 441, 450, 459], "userwarn": [431, 433, 440, 441, 445, 468], "xy": [431, 441, 445, 509], "mpl_kwarg": [431, 441, 445], "plot_kwarg": [431, 433, 441], "149": [431, 459, 462], "139": [431, 435, 468], "0833333358168602": 431, "303": [431, 434, 455], "227": 431, "99996948242188": 431, "0833333432674408": 431, "439": 431, "408": [431, 460], "7743835449219": 431, "373": [431, 441], "3919677734375": 431, "05088486522436142": 431, "550": 431, "512": 431, "135498046875": 431, "05487060546875": 431, "04357249662280083": 431, "spectrum_analysi": 431, "exist_ok": [431, 432, 439, 440, 443, 476, 477], "obs_": 431, "model_best_joint": 431, "2727e": 431, "7913e": 431, "2097e": 431, "assess": [431, 433, 448], "dataset_stack": [431, 439], "659": [431, 435], "590": 431, "737": 431, "62": [431, 437, 455, 469, 477], "683": 431, "823": 431, "920": 431, "451": 431, "028": 431, "148": [431, 435], "409": 431, "381": [431, 462], "434": [431, 455], "77": 431, "311": [431, 512, 554], "602": 431, "491": 431, "497": 431, "169": [431, 441], "536": 431, "483": 431, "910": 431, "892": [431, 462], "092": 431, "429": 431, "689": 431, "066": 431, "420": 431, "454": 431, "081": 431, "913": 431, "darkorang": [431, 432], "flux_points_dataset": [431, 441, 452], "stacked_fit": 431, "result_stack": 431, "model_best_stack": 431, "566e": 431, "600e": 431, "000e": [431, 434, 440, 447, 451, 455, 463, 478, 537], "382e": 431, "2785e": 431, "563e": [431, 441], "7800e": 431, "1830e": 431, "329e": [431, 455], "yunit": [431, 433, 454, 455, 468, 529], "midli": 431, "hood": [432, 472, 476], "forget": [432, 442, 476], "exclusion_mask_crab": [432, 476], "427": 432, "401": 432, "64e": 432, "581": 432, "450": [432, 462], "tob": 432, "1f": 432, "hli_spectrum_analysi": 432, "model_str": 432, "600": [432, 435, 440], "6768e": 432, "6795e": 432, "676836990188792": 432, "10350021860740599": 432, "679478012854058e": 432, "678684049503813e": 432, "fit_covari": [432, 476], "09t13": [432, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "477239": 432, "crab_fp": 432, "crab_fp_tabl": 432, "924": 432, "061": [432, 478], "323": [432, 434, 441], "310": 432, "096": 432, "137": [432, 435, 442], "686": 432, "694": 432, "873": 432, "617": 432, "190": [432, 455], "044": 432, "669": 432, "680": [432, 462], "33": [432, 448, 454, 456, 457, 460, 478, 492], "974": 432, "779": [432, 455], "090": 432, "233": 432, "921": 432, "509": 432, "ax_s": [432, 476], "overlai": 432, "subtract": 433, "emploi": 433, "leak": [433, 501], "remark": 433, "fed": 433, "wobbleregionsfind": 433, "5029747": 433, "1e5": [433, 468, 486, 504, 505], "n_off_posit": 433, "tell": 433, "viridi": [433, 454], "best_fit_model": 433, "fromnumer": 433, "runtimewarn": [433, 443, 470, 540], "passkwarg": 433, "213": [433, 466], "2903e": 433, "5819e": 433, "9580e": 433, "xunit": [433, 518], "crab_magic_lp": 433, "lw": [433, 435, 441, 452, 457, 505, 509, 511], "crimson": 433, "bias": [433, 553], "dataset_simul": 433, "simulated_d": 433, "simulated_model": 433, "0859e": 433, "6643e": 433, "1271e": 433, "position_angl": 434, "model_simu": [434, 447, 451], "5e": [434, 444, 455, 462], "5000e": 434, "51544": [434, 443, 444, 447], "3600": [434, 443, 444, 460], "298": [434, 441, 447, 451, 455], "275": [434, 455, 546], "281": [434, 455], "77e": [434, 455], "1811": 434, "50e": [434, 462], "1wqa39of": 434, "n_ob": [434, 443, 451], "dataset_fak": 434, "253": [434, 462], "293": 434, "272": [434, 435, 439, 455, 462], "00000000000001": 434, "19999999999999998": 434, "258": [434, 516], "307": 434, "99999999999999": [434, 455], "20000000000000004": 434, "308": [434, 441, 451, 512], "284": [434, 455, 556], "91": [434, 460, 465, 505], "259": [434, 476, 478], "313": 434, "302": [434, 440], "94": [434, 455, 460, 467, 476, 478], "322": 434, "277": [434, 451], "97": [434, 455, 458, 464, 476, 477], "271": [434, 435, 478], "inject": [434, 447], "axvlin": [434, 454, 464, 465], "0036925550381217": 434, "08081469527619482": 434, "steep": 434, "find_peaks_in_flux_map": 435, "803": [435, 516], "fitsfixedwarn": [435, 516], "datfix": 435, "dateref": 435, "mjdref": [435, 460], "54682": [435, 455, 468, 478], "655283": 435, "57236": [435, 455, 468, 478], "967546": 435, "ebel": 435, "asinh": 435, "mattox": 435, "brent": 435, "ax3": [435, 441], "subplot_kw": [435, 437, 441, 452, 461, 501], "gridspec_kw": [435, 441, 449, 451, 518], "nsou": 435, "get_transform": [435, 441, 509, 510], "206": [435, 455], "41449": 435, "97054": 435, "43197": 435, "54282": 435, "171": 435, "16056": 435, "74479": 435, "143": 435, "40919": 435, "47797": 435, "15899": 435, "98049": 435, "7642": 435, "119": [435, 439], "18257": 435, "52587": 435, "7947": 435, "46711": 435, "63326": 435, "3501": 435, "97596": 435, "77174": 435, "8086": 435, "193": [435, 468], "59696": 435, "69138": 435, "152": [435, 441, 477], "48068": 435, "64323": 435, "8767": 435, "15140": 435, "58926": 435, "6659": 435, "127": 435, "77351": 435, "97934": 435, "6556": 435, "251": [435, 439], "90685": 435, "05853": 435, "4732": 435, "181": 435, "17020": 435, "26173": 435, "4236": 435, "78188": 435, "98429": 435, "82739": 435, "02653": [435, 441], "0674": 435, "132": 435, "12148": 435, "23306": 435, "0447": 435, "37773": 435, "84233": 435, "sources_flux_map": 435, "62111": 435, "167e": 435, "347e": 435, "692": 435, "59451": 435, "923e": 435, "872e": 435, "723": 435, "70546": 435, "614e": 435, "740e": 435, "838": 435, "88781": 435, "765e": 435, "599e": 435, "39224": 435, "295e": [435, 455], "186e": 435, "22149": 435, "708e": 435, "925e": 435, "433": 435, "37517": 435, "357e": 435, "54892": 435, "287e": 435, "058e": 435, "611": [435, 553], "76473": 435, "129e": 435, "889e": 435, "445": 435, "28958": 435, "653e": 435, "721e": 435, "655": 435, "77218": 435, "271e": 435, "137e": 435, "98258": 435, "714e": 435, "070e": 435, "846": [435, 455, 553], "92490": 435, "774e": [435, 455], "965e": 435, "46225": 435, "609e": 435, "312e": 435, "1044": 435, "25763": 435, "586e": 435, "293e": 435, "1036": 435, "42361": 435, "442e": 435, "833e": 435, "41995": 435, "023e": 435, "699e": 435, "30287": 435, "424e": 435, "945e": 435, "resort": 436, "disc": [436, 437, 439, 444], "fov_background": [436, 476], "85625": 436, "85624": 436, "14e": [436, 454], "120000": 436, "96602": 436, "bother": 436, "1496e": 436, "7613e": 436, "3570e": 436, "9445e": 436, "renorm": [437, 499], "msh": [437, 455, 459], "plot_distribut": [437, 439], "1552": 437, "source_po": [437, 441, 459], "from_nam": [437, 441], "geom_imag": [437, 441, 505], "ring_mak": 437, "stacked_on_off": 437, "40051": 437, "39151": 437, "11e": [437, 455], "30e": [437, 458, 462], "22500": 437, "26392": 437, "88113384": 437, "49447596": 437, "lima_map": 437, "significance_map": [437, 439], "significance_map_off": 437, "yscale": [437, 544], "programmat": 439, "config_stack": 439, "config_joint": 439, "clutter": [439, 492], "analysis_stack": 439, "121241": 439, "108043": 439, "13197": 439, "2000000": 439, "1411180": 439, "children": [439, 447, 460, 476, 477], "selectionslid": [439, 447, 460, 476, 477], "continuous_upd": [439, 447, 460, 476, 477], "sliderstyl": [439, 447, 460, 476, 477], "description_width": [439, 447, 460, 476, 477], "radiobutton": [439, 447, 460, 476, 477], "descriptionstyl": [439, 447, 460, 476, 477], "_dom_class": [439, 447, 460, 476, 477], "models_stack": 439, "print_level": [439, 447, 457, 477], "180458": 439, "4144e": 439, "6623e": 439, "3396e": 439, "8069e": 439, "2610e": 439, "3481e": 439, "handi": 439, "coolwarm": [439, 468, 469, 477], "heavier": 439, "breviti": [439, 492], "analysis_joint": 439, "php7hdee": 439, "fpdzq0bf": 439, "c_7ce": 439, "hv": 439, "40481": 439, "36014": 439, "68e": [439, 455], "1085000": 439, "693940": 439, "models_joint": 439, "model_joint": 439, "n_fit_bin": [439, 451, 456, 462], "4930435940405": 439, "40525": 439, "505523195905": 439, "40235": 439, "4220": 439, "480554966147": 439, "66e": [439, 456], "013": 439, "048": [439, 468], "053": 439, "220": [439, 455, 462, 553, 554], "748259": 439, "84e": 439, "039": [439, 440], "dc": [439, 467], "g0": [439, 468], "3fhl_data_fermi": 440, "018182745349064267": 440, "003026327991562108": 440, "054833602905273e": 440, "652368617859867": 440, "05762513693893088": 440, "03921700077803329": 440, "00521472221220211": 440, "63310241699219": 440, "019899368286133": 440, "3004625872247901": 440, "07512322002655547": 440, "82e": 440, "652": [440, 548], "020": [440, 455], "simplic": [440, 443, 450, 457, 463, 465, 468], "datasets_hess": 440, "dataset_hess": [440, 457], "1905": 440, "12518": 440, "flux_points_hawc": 440, "dataset_hawc": 440, "3dataset": 440, "crab_10gev_100tev_dataset": 440, "results_joint": 440, "12697": 440, "crab_spec": 440, "9741e": 440, "125e": 440, "0548e": 440, "2634e": 440, "707e": 440, "1321e": 440, "flux_points_fermi": 440, "flux_points_hess": 440, "tini": [441, 467], "setlevel": 441, "pos_ob": 441, "glon_pnt": [441, 467], "glat_pnt": [441, 467], "pos_target": [441, 452], "obs_col": 441, "9999912037958": 441, "299995937905366": 441, "358": [441, 455, 478], "4999833830074": 441, "3000020211954284": 441, "5000056568267741": 441, "299940468335294": 441, "axis_tru": 441, "maker_safe_mask": [441, 447, 477], "dataset_imag": [441, 456], "ts_image_estim": 441, "images_t": 441, "42400": 441, "00490": 441, "969": [441, 455], "202": 441, "85900": 441, "18386": 441, "16303": 441, "85527": 441, "8673": 441, "79470": 441, "97749": 441, "3585": 441, "42267": 441, "08192": 441, "2695": 441, "94723": 441, "06430": 441, "209": 441, "07455": 441, "10409": 441, "1491": 441, "226": [441, 468], "78333": 441, "87897": 441, "0164": 441, "16511": 441, "09348": 441, "42399798": 441, "00490483": 441, "85900392": 441, "18385658": 441, "16303044": 441, "85527359": 441, "79469899": 441, "97749371": 441, "4226731": 441, "08192101": 441, "94722599": 441, "0643032": 441, "07454639": 441, "10409446": 441, "78332719": 441, "87897418": 441, "16511148": 441, "093477": 441, "on_radiu": [441, 452], "104": [441, 451], "stacked_dataset": [441, 442], "413": 441, "327": 441, "328": 441, "94e": [441, 455], "2095": 441, "744": 441, "e_refe_mine_maxdndednde_errtssqrt_tsnprednpred_excessstatstat_nullcountssuccess": 441, "tevtevtev1": 441, "float64float64float64float64float64float64float64float64": 441, "float64float64float64": 441, "3750": 441, "9462": 441, "447e": [441, 455], "783e": 441, "13152": 441, "51312": 441, "350105": 441, "7752244878226383": 441, "8989213": 441, "412165": 441, "925106": 441, "0true": 441, "6992": 441, "0003": 441, "6413": 441, "835e": 441, "14150": 441, "65412": 441, "27473": 441, "0251191219844263": 441, "132472": 441, "245152": 441, "89873": 441, "2953": 441, "6417": 441, "7007": 441, "332e": 441, "138e": 441, "14121": 441, "57011": 441, "98359208475904647": 441, "4558750": 441, "624122": 441, "19354": 441, "1987": 441, "70016": 441, "353e": 441, "154e": 441, "1521": 441, "7894": 441, "66813": 441, "18842983819716610": 441, "6604475": 441, "74427": 441, "53213": 441, "97116": 441, "28429": 441, "6451": 441, "109e": 441, "938e": [441, 455], "5004": 441, "14531053887243": 441, "1979892": 441, "8999": 441, "1494": 441, "favourit": 441, "investig": 442, "exhibit": 442, "pwne": 442, "j1825": 442, "aharonian": 442, "princip": 442, "mock": 442, "firstli": [442, 443], "energydependentmorphologi": 442, "weighted_chi2_paramet": 442, "ts_to_sigma": [442, 554], "mock_dl4": 442, "dataset_energy_depend": 442, "\u03c3": 442, "table_bkg_src": 442, "src_above_bkg": 442, "998": 442, "0521842481248": 442, "277522957147003": 442, "712": 442, "873581766271": 442, "34613004113985": 442, "41405230487": 442, "56413952067279": 442, "h_0": [442, 554], "h_1": [442, 554], "energy_depend": 442, "u03c3": 442, "results_t": 442, "76": [442, 460], "sigma_err": 442, "h0": 442, "21525376976022406": 442, "005914854792576181": 442, "h1": 442, "2568720263723087": 442, "009431203058496632": 442, "19735897928723367": 442, "008164325487530225": 442, "13500566998758723": 442, "008898002182656187": 442, "56393115380234": 442, "14671140315352": 442, "690311850083152": 442, "6654036168695552": 442, "3035897658854436": 442, "641635917844372": 442, "cautious": 442, "lat_0_err": 442, "lon_0_err": 442, "model_plot": 442, "hereaft": 443, "chose": [443, 468, 469, 554, 556], "south": [443, 444], "hr": [443, 444, 447, 451], "irf_filenam": [443, 444, 458, 467], "prod5": [443, 444], "20deg": [443, 444], "averageaz": [443, 444], "14msts37sst": [443, 444], "180000": [443, 444], "inde": [443, 510], "energet": 443, "finer": [443, 456, 505], "2degx2deg": 443, "evt_sampl": 443, "spectral_model_pwl": 443, "spatial_model_point": 443, "sky_model_pntpwl": 443, "file_model": 443, "15319": 443, "primary_hdu": 443, "primaryhdu": [443, 460], "hdu_evt": 443, "hdu_gti": 443, "hdu_al": 443, "events_0001": 443, "374": [443, 445], "astropydeprecationwarn": 443, "tctypn": 443, "tcunin": 443, "2800": [443, 462, 478], "expdecay_model": [443, 540], "sake": [443, 457], "boost": 443, "pwl_decai": 443, "1523": 443, "15246": 443, "src_posit": [443, 444], "src_event": [443, 444], "trend": 443, "template_model": 443, "gll_iem_v06_gc": [443, 460, 462, 463, 468], "brighter": 443, "artifici": 443, "models_diffus": 443, "062": [443, 462, 463, 468], "irf_path": 443, "enumer": [443, 455, 462, 465], "events_": 443, "04d": 443, "inverse_cdf": 443, "673": [443, 470, 540], "__array_ufunc__": [443, 470, 540], "timeunit": 443, "timeref": 443, "631170005": 443, "631173605": 443, "000000000002": 443, "631177205": 443, "631180805": 443, "3599": 443, "999999999997": 443, "631155605": 443, "631159205": 443, "000000000006": 443, "visit": 444, "720": [444, 455], "temporal_model_map": 444, "skymap_band": [444, 547], "skymap_region": 444, "rotang": 444, "1600": 444, "ga": 445, "annuli": [445, 505], "rectangular": [445, 501, 505], "make_concentric_annulus_sky_region": 445, "counts_imag": [445, 456], "400x200": 445, "i4": 445, "350": [445, 452], "10d": 445, "350d": 445, "flux_profile_estim": 445, "0x7ff954cbc0a0": 445, "0x7ff954cbcf70": 445, "flux_profile_fermi": 445, "profile_new": 445, "1960784313725492": 445, "5882352941176467": 445, "392156862745098": 445, "9803921568627443": 445, "7843137254901955": 445, "163": [445, 553], "3725490196078436": 445, "176470588235294": 445, "448": 445, "764705882352942": 445, "5686274509803928": 445, "15686274509804": 445, "960784313725491": 445, "549019607843138": 445, "3529411764705888": 445, "941176470588236": 445, "745098039215687": 445, "3333333333333344": 445, "137254901960785": 445, "725490196078432": 445, "529411764705883": 445, "458": [445, 455], "882352941176466": 445, "274509803921596": 445, "07843137254903": 445, "321": 445, "666666666666696": 445, "470588235294144": 445, "058823529411775": 445, "862745098039234": 445, "4509803921569": 445, "254901960784338": 445, "843137254902004": 445, "647058823529452": 445, "370": [445, 455, 462], "235294117647083": 445, "039215686274545": 445, "410": 445, "627450980392158": 445, "43137254901962": 445, "336": [445, 455], "01960784313726": 445, "82352941176471": 445, "41176470588239": 445, "215686274509824": 445, "803921568627494": 445, "607843137254942": 445, "gc_imag": 445, "mpatch": 445, "pathpatch": 445, "throught": 445, "profile_high": 445, "simu": [447, 451, 465], "7200": 447, "161250": 447, "08e": [447, 462], "58e": [447, 455], "810000": 447, "804492": 447, "169075": 447, "7824": 447, "169871": 447, "8620": 447, "560419": 447, "464": 447, "models_fit": 447, "007": [447, 455], "098": 447, "0065e": 447, "969e": 447, "8658e": 447, "258e": 447, "0038e": 447, "849e": 447, "8222e": 447, "9764e": 447, "959e": 447, "burst": 448, "grb": [448, 451], "heighten": 448, "304": [448, 450, 451, 455, 464, 478, 518], "trough": 448, "bayesian_block": 448, "compute_lightcurve_doublingtim": 448, "compute_lightcurve_fpp": 448, "compute_lightcurve_fvar": 448, "boller": 448, "tension": 448, "f_mean": 448, "f_mean_err": 448, "f_max": 448, "f_max_err": 448, "argmax": 448, "f_min": 448, "f_min_err": 448, "argmin": 448, "amplitude_maximum_vari": 448, "amplitude_maximum_signific": 448, "41584196": 448, "kovalev": 448, "relative_variability_amplitud": 448, "relative_variability_error": 448, "relative_variability_signific": 448, "613114": 448, "heidt": 448, "wagner": 448, "variability_amplitud": 448, "variability_amplitude_100": 448, "variability_amplitude_error": 448, "ddof": 448, "variability_amplitude_signific": 448, "12525306": 448, "fvar_tabl": 448, "min_energi": 448, "max_energi": 448, "5915030546513255": 448, "184989894219835": 448, "01700709977114979": 448, "082691868487906": 448, "granular": 448, "fpp_tabl": 448, "017442925431194484": 448, "2995484265169": 448, "dtime_t": 448, "halving_err": 448, "halving_coord": 448, "935826709880043": 448, "53946": 448, "00422666667": 448, "oppos": [448, 528, 552], "introductori": 448, "poissonian": [448, 452, 551], "bayesian_edg": 448, "ncp": 448, "coincid": 448, "axis_origin": 448, "0x7ff948673af0": 448, "crabnebula": 449, "conf_3d": 449, "63308": [449, 477], "01450": [449, 477], "702": [449, 455, 477], "712e": [449, 477], "lc_maker_3d": 449, "lc_3d": 449, "1193777560333226e": 449, "95421509259": 449, "97369425926": 449, "140779935183259e": 449, "53345": 449, "96198129629": 449, "98149518518": 449, "7872234642813915e": 449, "53347": 449, "913196574074": 449, "93271046296": 449, "912868843587422e": 449, "conf_1d": 449, "leakag": 449, "analysis_1d": 449, "lc_maker_1d": [449, 450, 451], "4517490659800822": 449, "53344": 449, "53346": 449, "53348": 449, "nightwise_lc": 449, "get_rebinned_axi": 450, "71693826": [450, 464, 492], "2255890": [450, 464], "29t20": 450, "n_time_bin": 450, "53945": 450, "85416667": 450, "86111111": 450, "short_observ": 450, "9999999999978": 450, "207520865": 450, "18400002": 450, "207521465": 450, "wider": [450, 461], "pks2155": 450, "lc_new": 450, "6666666666583865": 450, "overkil": 451, "suffic": 451, "filterwarn": [451, 452], "camera": [451, 458, 459], "gti_t0": 451, "8909e": 451, "lvtm": 451, "empty_i": 451, "769": 451, "6812310184489": 451, "6175": 451, "7708295059365": 451, "76419591747674": 451, "1852": 451, "2935436891955": 451, "3947637541758": 451, "1692": 451, "528568649812": 451, "2227134679628": 451, "2208": 451, "7909948295764": 451, "22271346796282": 451, "8871441935416": 451, "165": [451, 462], "52839183495354": 451, "961": 451, "695102787539": 451, "22271346796283": 451, "14974704703289": 451, "78952750835169": 451, "78": [451, 460, 461, 469, 477], "07183790355433": 451, "114416978060046": 451, "60503898487182": 451, "636688324856333": 451, "76241207272639": 451, "model_fit": 451, "minimis": [451, 464], "dataset_fp": 451, "dataset_lc": 451, "spectral_model1": 451, "temporal_model1": 451, "1441": 451, "58909": 451, "9667e": 451, "746e": 451, "5033e": 451, "189e": 451, "1990e": 451, "215e": [451, 455], "spectral_model2": 451, "temporal_model2": 451, "test2": 451, "9584e": 451, "162e": 451, "5971e": 451, "309e": 451, "2710e": 451, "178e": 451, "vel": 452, "tempo2": [452, 492], "pint": [452, 492], "wstatcountsstatist": [452, 554], "id_obs_vela": 452, "obs_list_vela": 452, "101430": 452, "59300": 452, "833333333336": 452, "854166666664": 452, "52e": [452, 476], "events_vela": 452, "468": [452, 455], "33e": 452, "07e": 452, "81847286": 452, "45646095": 452, "111507416": 452, "43416595": 452, "76837444": 452, "3639946": 452, "58693695": 452, "51095676": 452, "5606985": 452, "2505703": 452, "phase_min": 452, "phase_max": 452, "bin_edg": 452, "bin_cent": 452, "values_err": 452, "yerr": 452, "on_phase_rang": 452, "off_phase_rang": 452, "mask_off": 452, "count_bkg": 452, "zone": 452, "bkg_err": 452, "redo": 452, "x_bkg": 452, "ones_lik": 452, "grei": 452, "on_patch": 452, "royalblu": 452, "ec": [452, 463, 505], "off_patch": 452, "hatch": 452, "895": 452, "region_ev": 452, "on_ev": 452, "off_ev": 452, "pulse_stat": 452, "00000000000003": 452, "211770556360534": 452, "9002269877996247": 452, "003": [452, 462, 468], "map_dataset_empti": 452, "map_dataset_mak": 452, "phase_bkg_mak": 452, "map_dataset_on_off": 452, "excess_map_estim": 452, "estimator_result": 452, "spectrum_dataset_empti": [452, 459], "spectrum_dataset_mak": [452, 459], "spectrum_dataset_on_off": 452, "wo": 452, "psr": [452, 455, 478], "emin_fit": 452, "emax_fit": 452, "joint_fit": 452, "joint_result": 452, "log10": 452, "ts_threshold_ul": [452, 490], "amplitude_ref": 452, "4e": [452, 455, 462, 537], "spec_model_tru": 452, "dash": [452, 454, 465], "indirect": [454, 480], "1012": 454, "4515": 454, "chapter": 454, "lognorm": 454, "jfactori": 454, "__subclasses__": 454, "centr": [454, 461, 480], "nfwprofil": 454, "jfact": 454, "jfact_map": 454, "sky_reg": 454, "pix_reg": 454, "sky_reg_rec": 454, "pix_reg_rec": 454, "1607": 454, "08142": 454, "67e21": 454, "total_jfact": 454, "3g": [454, 455], "36e": [454, 455], "cm5": 454, "jfact_decai": 454, "total_jfact_decai": 454, "rf": 454, "subplots_adjust": 454, "hspace": 454, "diff_flux": 454, "int_flux": 454, "thew": 455, "overplot": [455, 487], "tediou": 455, "crowd": 455, "7195": 455, "gll_psc_v20": 455, "5066": 455, "3034": 455, "catalog_4fgl": 455, "catalog_hgp": 455, "raj2000": [455, 478], "dej2000": [455, 478], "j0001": [455, 478], "0748": [455, 478], "3107": [455, 478], "8075": [455, 478], "4155": [455, 478], "9303": [455, 478], "j0002": [455, 478], "6728": [455, 478], "5283": [455, 478], "4825": [455, 478], "31067517": 455, "8075185": 455, "4848653": 455, "93026": 455, "52826166": 455, "48248": 455, "j0008": [455, 478], "2509": 455, "assoc_prob_bai": 455, "assoc_prob_lr": 455, "class1": 455, "class2": 455, "571": 455, "915": 455, "725": 455, "semimajor": 455, "1553": [455, 478], "semiminor": 455, "2518": 455, "1963": 455, "1344": 455, "407": 455, "889": 455, "85e": 455, "48e": [455, 462, 477], "34e": [455, 462], "97e": 455, "601e": 455, "477e": 455, "086e": 455, "856e": 455, "419e": 455, "015": 455, "539e": 455, "036e": 455, "398e": 455, "498e": [455, 478], "611e": 455, "239e": 455, "810e": 455, "102e": 455, "147e": 455, "852e": 455, "306e": 455, "334e": 455, "905": 455, "227e": 455, "307e": 455, "596e": 455, "706e": 455, "305e": 455, "585": 455, "177e": 455, "940e": 455, "974e": 455, "175e": 455, "432e": 455, "30000": 455, "771e": 455, "719e": 455, "042e": 455, "087e": 455, "142e": 455, "816e": 455, "723e": 455, "548e": 455, "286e": 455, "149e": 455, "211e": 455, "107e": 455, "299e": 455, "426": 455, "j0010": 455, "0008": 455, "59976": 455, "28118133544922": 455, "40050506591797": 455, "28120079": 455, "40051035": 455, "brightest": 455, "mask_bright": 455, "7d": 455, "j0534": [455, 478], "99e": 455, "553": 455, "j0851": 455, "4620e": 455, "24e": [455, 462], "j1036": 455, "5833e": 455, "57e": 455, "691": 455, "j1104": [455, 478], "3812": [455, 478], "1111": [455, 478], "j1653": 455, "27e": 455, "1219": 455, "j1824": 455, "1351e": 455, "1361": 455, "j2028": 455, "4110e": 455, "75e": [455, 477], "catalog_3fhl_bright": 455, "mask_roi": 455, "catalog_4fgl_roi": 455, "j2158": 455, "3013": 455, "26e": [455, 462], "1160": 455, "973": 455, "773": 455, "042": 455, "714": 455, "2971e": 455, "735e": 455, "0225e": 455, "2591e": 455, "317e": 455, "1610e": 455, "7733e": 455, "029e": 455, "1893e": 455, "743e": 455, "models_4fgl_roi": 455, "47e": 455, "4281": 455, "748": 455, "465": [455, 462], "886": 455, "j0003": [455, 478], "1928": 455, "73e": [455, 476], "1064": 455, "136": 455, "211": [455, 456], "j0006": 455, "1813": 455, "578": [455, 553], "4481": 455, "2431": 455, "98e": 455, "344": 455, "39e": 455, "1299": 455, "717": 455, "900": 455, "j0013": 455, "3299": 455, "164": 455, "912": 455, "j0021": 455, "2221": 455, "620": 455, "357": [455, 478], "009": 455, "082": 455, "j0022": 455, "1482": 455, "670": 455, "788": 455, "907": 455, "j0025": 455, "7e": [455, 462, 463], "2399": 455, "2231": 455, "93e": 455, "3071": 455, "533": 455, "j0031": 455, "2327": [455, 462], "1686": 455, "153": 455, "841": 455, "551": [455, 516], "756": 455, "j2357": [455, 478], "59e": [455, 462, 468], "1978": 455, "430": 455, "619": 455, "j2358": [455, 478], "60e": 455, "1980": 455, "032": 455, "074": [455, 468], "639": 455, "j2359": [455, 478], "928": 455, "2930": 455, "819": 455, "retain": [455, 505], "1804": 455, "02432": 455, "discarded_ind": 455, "component_class": 455, "discarded_t": 455, "discarded_spati": 455, "glat_err": 455, "surface_brightness_err": 455, "width_err": 455, "000000": 455, "205357": 455, "251932": 455, "064108e": 455, "269385": 455, "137990": 455, "959198": 455, "120154": 455, "058201": 455, "346488e": 455, "088742": 455, "041882": 455, "918365": 455, "095232": 455, "089881": 455, "117877e": 455, "167219": 455, "111797": 455, "877563": 455, "257642": 455, "065071": 455, "230542e": 455, "156525": 455, "056130": 455, "836731": 455, "283487": 455, "066442": 455, "336444e": 455, "205192": 455, "049676": 455, "71067811865478": 455, "00000000000004": 455, "1173775": 455, "173": 455, "20508075688775": 455, "99999999999994": 455, "332525": 455, "722557505166": 455, "9999999999998": 455, "62258": 455, "1732": 455, "0508075688763": 455, "9999999999977": 455, "84529": 455, "5477": 455, "225575051666": 455, "00000000001": 455, "62503": 455, "17320": 455, "50807568877": 455, "000000000007": 455, "068245": 455, "54772": 455, "255750516626": 455, "05227": 455, "316227": 455, "7660168382": 455, "999999": 455, "9999999995": 455, "402712": 455, "j0349": 455, "2103": 455, "65603794185": 455, "55045": 455, "301668796295": 455, "3872": 455, "9833462074166": 455, "809505": 455, "55410": 455, "57944657407": 455, "118355": 455, "55775": 455, "85722435185": 455, "6116853": 455, "56141": 455, "13500212963": 455, "432878": 455, "56506": 455, "412779907405": 455, "800932": 455, "56871": 455, "690557685186": 455, "687685": 455, "96833546296": [455, 468], "500249": 455, "57602": 455, "24611324074": 455, "146472": 455, "57967": 455, "523891018514": 455, "539397": 455, "58332": 455, "801668796295": 455, "76739": 455, "58698": 455, "07944657407": 455, "498784": 455, "59063": 455, "35722435185": 455, "3674884": 455, "59428": 455, "63500212963": 455, "8593054": 455, "59793": 455, "912779907405": 455, "248122": 455, "j1514": 455, "15h14m00": 455, "59d09m41": 455, "008": [455, 517, 553], "023": 455, "024": 455, "025": [455, 468], "145": 455, "3502": 455, "2440": 455, "2414": 455, "1052": 455, "552": 455, "1825": 455, "2061": 455, "417": 455, "878": [455, 462], "579": 455, "437": [455, 462], "241": 455, "860": 455, "052": 455, "562": 455, "439e": 455, "509e": 455, "489e": 455, "654e": 455, "970e": 455, "788e": 455, "898e": 455, "302e": 455, "085": 455, "220e": 455, "282e": 455, "571e": 455, "991": 455, "994e": 455, "858e": 455, "588e": 455, "623": [455, 478], "474e": 455, "480e": 455, "919e": 455, "005": 455, "057": 455, "168": [455, 478], "055": 455, "5915e": [455, 477], "098903": 455, "j1513": 455, "5908": 455, "026914": 455, "094834": 455, "comp": 455, "g320": 455, "070483": 455, "b1509": 455, "026891": 455, "identified_object": 455, "2005a": 455, "435l": 455, "17a": 455, "distance_refer": 455, "199999809265137": 455, "799999952316284": 455, "599999904632568": 455, "constitut": 456, "coars": 456, "110000": [456, 459], "0x7ff943e98dc0": 456, "0x7ff943e45b80": 456, "0x7ff9437fc670": 456, "0x7ff96c3e68e0": 456, "dataset_cta": 456, "3046875": [456, 462], "41009347393684": 456, "6953125": 456, "68628538586": 456, "exposure_min": 456, "62842028": 456, "exposure_max": 456, "90242058e": 456, "5292": 456, "00010298": 456, "5400": 456, "counts_rat": 456, "71220672": 456, "29170324": 456, "excess_r": 456, "42050348": 456, "n_bin": 456, "08675": 456, "model_bkg": 456, "91719": 456, "424649": 456, "650": 456, "npred_sourc": 456, "mask_spac": 456, "mask_energi": [456, 461], "downsampled_energi": 456, "153600": 456, "22608": 456, "67824": 456, "44318": 456, "energy_axis_new": 456, "reg_dataset": 456, "5644": 456, "89e": 456, "fp_dataset": 456, "313714614138": 456, "324424288934": 456, "pha_": 456, "13e": 456, "63e": 456, "1530": 456, "645": 456, "1149": 456, "datasets_sl": 456, "emphasi": 457, "itertool": 457, "plot_contour_lin": 457, "crab_spectrum": 457, "crab_model": 457, "scipy_opt": 457, "bfg": 457, "ftol": 457, "gtol": 457, "fit_scipi": 457, "result_scipi": 457, "opt_method": 457, "sherpa_opt": 457, "maxfev": 457, "1e4": [457, 468, 469], "fit_sherpa": 457, "results_simplex": 457, "tol": 457, "minuit_opt": 457, "result_minuit": 457, "rel_reduction_of_f_": 457, "_factr": 457, "epsmch": 457, "fcn": 457, "nfcn": 457, "edm": 457, "42e": [457, 462], "err": 457, "par_000_amplitud": 457, "par_001_alpha": 457, "par_002_beta": 457, "0689": 457, "total_stat": [457, 553], "349530550405035": 457, "8122425483643125e": 457, "2264827111476982": 457, "349724940685938": 457, "8157971601581226e": 457, "34971209244579": 457, "808687936570502e": 457, "34953932636892": 457, "812951371538087e": 457, "349536723056637": 457, "8115337251905373e": 457, "35052105086856": 457, "350556388466543": 457, "34953910575007": 457, "349542158419318": 457, "35030398537787": 457, "2278975306934438": 457, "349537804239922": 457, "8122169596532167e": 457, "22662622801631419": 457, "34953807814367": 457, "22635140877790516": 457, "34953077463306": 457, "812358724314062e": 457, "22648881839710966": 457, "34953075819191": 457, "812075194992371e": 457, "349530807529028": 457, "349530725254468": 457, "34953073943366": 457, "2265163003209506": 457, "34953079334042": 457, "22646133647326874": 457, "349535814693404": 457, "8129257829574434e": 457, "349537158300407": 457, "349559366703698": 457, "8122e": 457, "1958e": 457, "2649e": 457, "_scan": 457, "25743553e": 457, "00000000e": [457, 458], "54676837e": 457, "17016482e": 457, "89492144e": 457, "31139074e": 457, "95024543e": 457, "2625818241224747": 457, "ellipsoid": 457, "nsigma": 457, "answer": [457, 492], "make_contour": 457, "npoint": 457, "cts_sigma": 457, "idx1": 457, "idx2": 457, "name1": 457, "name2": 457, "contour_": 457, "tolist": 457, "cx": 457, "contour_alpha_amplitud": 457, "cy": 457, "1e11": 457, "contour_beta_amplitud": 457, "contour_alpha_beta": 457, "tight_layout": [457, 465, 511, 515], "consum": [457, 492], "mathcal": [457, 488], "agnost": 457, "par_alpha": 457, "par_beta": 457, "speak": 457, "gaussian_sigma": 457, "isf": [457, 554], "clabel": 457, "fmt": [457, 465], "0f": [457, 468, 478], "quantity_support": [458, 509], "common_irf_head": 458, "irf_dl3_hdu_specif": 458, "make_edisp_kernel_map": 458, "make_psf_map": 458, "9391360e": 458, "6772235e": 458, "1955810e": 458, "0000000e": 458, "1976572e": 458, "3710784e": 458, "6018166e": 458, "2827988e": 458, "4933657e": 458, "9277492e": 458, "6318811e": 458, "2217412e": 458, "9053906e": 458, "7097381e": 458, "5188338e": 458, "1269263e": 458, "5835918e": 458, "0376213e": 458, "4120719e": 458, "4971704e": 458, "8613613e": 458, "7351418e": 458, "6046689e": 458, "7537086e": 458, "8954039e": 458, "6218742e": 458, "8455480e": 458, "0139252e": 458, "0631757e": 458, "4360750e": 458, "2121164e": 458, "4875723e": 458, "4225631e": 458, "2825456e": 458, "6194453e": 458, "0149044e": 458, "8893600e": 458, "7755386e": 458, "4428634e": 458, "2362506e": 458, "2068682e": 458, "3058422e": 458, "1899070e": 458, "8349780e": 458, "8943121e": 458, "1567629e": 458, "8908866e": 458, "7990194e": 458, "3380311e": 458, "3812160e": 458, "5692809e": 458, "7190994e": 458, "4834488e": 458, "9489822e": 458, "9163195e": 458, "5162628e": 458, "3302565e": 458, "1554106e": 458, "9529719e": 458, "3659253e": 458, "4420073e": 458, "4303606e": 458, "9977859e": 458, "9269494e": 458, "0322775e": 458, "9834338e": 458, "1456479e": 458, "9969731e": 458, "8570719e": 458, "8037638e": 458, "6652219e": 458, "7997221e": 458, "0902437e": 458, "7681656e": 458, "6181862e": 458, "3499075e": 458, "2443672e": 458, "7385727e": 458, "8062607e": 458, "1099306e": 458, "7395744e": 458, "1618850e": 458, "8555500e": 458, "0076540e": 458, "7876233e": 458, "5867488e": 458, "9280475e": 458, "2040469e": 458, "5892966e": 458, "5842497e": 458, "7765957e": 458, "2162670e": 458, "1264500e": 458, "0183519e": 458, "3590188e": 458, "2699878e": 458, "5607778e": 458, "5719922e": 458, "4968236e": 458, "2062580e": 458, "4819444e": 458, "9215375e": 458, "0505949e": 458, "0122385e": 458, "8475576e": 458, "5297030e": 458, "8799800e": 458, "7284447e": 458, "0520119e": 458, "4420222e": 458, "3037632e": 458, "9053655e": 458, "5194769e": 458, "5951631e": 458, "8031431e": 458, "7887840e": 458, "6253652e": 458, "2635108e": 458, "2041222e": 458, "3117988e": 458, "5779092e": 458, "0016288e": 458, "9912648e": 458, "5768262e": 458, "5230376e": 458, "9205875e": 458, "4480056e": 458, "3368855e": 458, "1926520e": 458, "8515948e": 458, "8699165e": 458, "9847406e": 458, "2104353e": 458, "4212028e": 458, "4642048e": 458, "0395135e": 458, "1510240e": 458, "4647544e": 458, "1629219e": 458, "6419578e": 458, "5427520e": 458, "3886270e": 458, "4904078e": 458, "1061971e": 458, "8834862e": 458, "8369650e": 458, "7596682e": 458, "4080942e": 458, "6554088e": 458, "3962942e": 458, "9074812e": 458, "6556248e": 458, "9023670e": 458, "7240965e": 458, "9912712e": 458, "7479085e": 458, "0375512e": 458, "0462798e": 458, "1072542e": 458, "8377268e": 458, "0739282e": 458, "9910796e": 458, "9608912e": 458, "7580410e": 458, "2058705e": 458, "5561760e": 458, "2560538e": 458, "3279955e": 458, "1768896e": 458, "5545130e": 458, "4198250e": 458, "8441040e": 458, "3812120e": 458, "5538942e": 458, "6402822e": 458, "7350380e": 458, "7123895e": 458, "2164425e": 458, "5192420e": 458, "7652512e": 458, "9816452e": 458, "8769240e": 458, "7692170e": 458, "2880470e": 458, "5438860e": 458, "0800792e": 458, "2079930e": 458, "5754970e": 458, "8475650e": 458, "2628525e": 458, "8222980e": 458, "0025508e": 458, "4225498e": 458, "9606540e": 458, "5763635e": 458, "6471115e": 458, "7471700e": 458, "1438465e": 458, "7804888e": 458, "6909290e": 458, "0354700e": 458, "0028272e": 458, "3364130e": 458, "3689322e": 458, "1486415e": 458, "0064830e": 458, "0474750e": 458, "1556008e": 458, "8290458e": 458, "0894640e": 458, "9776920e": 458, "2465055e": 458, "5345275e": 458, "1062535e": 458, "8885138e": 458, "2021345e": 458, "0907128e": 458, "6105760e": 458, "3715810e": 458, "0482342e": 458, "6259962e": 458, "3739292e": 458, "9499210e": 458, "900269": 458, "83242471": 458, "3398360": 458, "62514628": 458, "coordiant": 458, "ev": [458, 492, 528], "27093776e": 458, "12423250e": 458, "85188496e": 458, "67759236e": 458, "01235137e": 458, "05901956e": 458, "74465974e": 458, "24685677e": 458, "65357608e": 458, "ev2": 458, "189": 458, "80982039": 458, "28382603": 458, "pointspreadfunct": 458, "05075": 458, "08075": 458, "66984341": 458, "35569283": 458, "effectivearea3d": 458, "aeff_3d": 458, "fov_lon_axi": 458, "fov_lat_axi": 458, "aeff_ev": 458, "cax": 458, "12493874": 458, "80683246": 458, "extnam": 458, "column_nam": 458, "effarea": 458, "mandatory_keyword": 458, "hduclas2": 458, "eff_area": 458, "hduclas3": 458, "hduclasn": 458, "hduclas4": 458, "test_aeff3d": 458, "aeff_new": 458, "f8": [458, 468], "energydispersion3d": 458, "edisp_3d": 458, "20e": 458, "edisp3d": 458, "edisp_ev": 458, "61489": 458, "620398": 458, "60075": 458, "597774": 458, "617835": 458, "623397": 458, "603625": 458, "600661": 458, "69735": 458, "70437": 458, "68125": 458, "67861": 458, "test_edisp": 458, "edisp_new": 458, "x27": 458, "gt": 458, "etru": 458, "20097159": 458, "2009851": 458, "20099855": 458, "20072608": 458, "20009124": 458, "19932878": 458, "asymmetri": 458, "psf_assym": 458, "18921591": 458, "23905561": 458, "psfnd": 458, "test_psf": 458, "psf_new": 458, "make_effective_livetime_map": 459, "make_observation_time_map": 459, "xo7drbx6": 459, "abcmeta": 459, "yyk9gmdb": 459, "1866": 459, "19e": 459, "09e": [459, 468], "spill": 459, "poorli": 459, "rescal": 459, "fov_bkg_mak": [459, 499], "imperfect": 459, "local_dataset": 459, "mbbfq": 459, "7t": 459, "7972": 459, "7555": 459, "04e": 459, "22e": 459, "687500": 459, "687214": 459, "global_dataset": 459, "datasets_mak": 459, "babi": 459, "d4d": 459, "pweg9wvk": 459, "b_mpdz6": 459, "dcxwcjiu": 459, "implicitli": 459, "exclusion_mask_2d": 459, "reflected_bkg_mak": 459, "total_obstim": 459, "effective_livetim": 459, "obs_time_src": 459, "effective_times_src": 459, "250185": 459, "316227766016838": 459, "249965667724609": 459, "1622776601683795": [459, 460, 476], "234359264373779": 459, "thorough": [460, 480], "pixilis": 460, "hypercub": [460, 504, 505], "lengthi": 460, "m_allski": 460, "m_hpx": 460, "m_gc": 460, "250": [460, 551], "quadrat": [460, 470, 478, 555], "anti": [460, 461], "21731921e": 460, "21733761e": 460, "21735587e": 460, "m_cube": 460, "m_4d": 460, "16227766": 460, "6227766": 460, "77827941": 460, "62341325": 460, "7827941": 460, "23413252": 460, "time_map_axi": 460, "map_4d": 460, "attrribut": 460, "time_map_axis_contigu": 460, "label_axi": 460, "label_axis2": 460, "778279410038923": 460, "623413251903492": 460, "78279410038923": 460, "000000000000002": 460, "234132519034915": 460, "62277660168379": 460, "transport": 460, "m_3fhl_gc": 460, "i8": [460, 478], "ver": 460, "example_cub": 460, "example_cube_fgst": 460, "primary_band": 460, "96r": 460, "7c": 460, "bitpix": 460, "naxi": 460, "naxis1": 460, "naxis2": 460, "naxis3": 460, "naxis4": 460, "crpix1": 460, "crpix2": 460, "cdelt1": 460, "cdelt2": 460, "cunit1": 460, "cunit2": 460, "ctype1": 460, "ctype2": 460, "crval1": 460, "crval2": 460, "lonpol": 460, "celesti": [460, 504, 509, 513, 556], "latpol": 460, "fiduci": 460, "axcols1": 460, "interp1": 460, "axcols2": 460, "interp2": 460, "wcsshape": 460, "bandshdu": 460, "accessor": 460, "m_sub": 460, "axis1": 460, "axis2": 460, "isnan": [460, 461], "xxx_by_coord": 460, "2e3": 460, "counts_3d": 460, "reference_map": 460, "cubic": 460, "m_iem_gc": 460, "wcs_geom_cel": 460, "m_iem_10gev": 460, "wcs_geom_3d": 460, "m_iem_interp": 460, "iem_plus_iem": 460, "iem_minus_iem": 460, "iem_times_two": 460, "is_nul": 460, "m_iem_cutout": 460, "inferno": 460, "ipywidget": 460, "274": 460, "slider": 460, "lai": 461, "secur": 461, "ndmap": 461, "0x7ff96d3332e0": 461, "0x7ff94835a7f0": 461, "0x7ff94835a160": 461, "0x7ff94835aa60": 461, "mask_data": 461, "Their": 461, "633083": 461, "0145": 461, "regions_ds9": 461, "185": 461, "inside_geom": 461, "exclusion_radiu": 461, "mask_map_catalog": 461, "significance_mask": 461, "invalid_pixel": 461, "weakli": 461, "overcom": 461, "apply_hysteresis_threshold": 461, "AND": [461, 462], "NOT": [461, 492], "symbol": 461, "significance_mask_inv": 461, "psf_r95": 461, "thaw": 462, "create_fermi_isotropic_diffuse_model": [462, 468], "cta_dataset": 462, "27727": 462, "3792": 462, "244140625": 462, "633600": 462, "diffuse_iso": [462, 468], "iso_p8r2_source_v6_v06": [462, 468], "fermi_bkg_model": 462, "diffuse_galactic_fermi": 462, "template_diffus": [462, 468], "diffuse_iem": [462, 468], "iem": [462, 468], "fit2": 462, "result2": 462, "gc_sep": 462, "models_3fhl": 462, "models_select": 462, "j1731": 462, "3003": 462, "j1732": 462, "j1741": 462, "j1744": 462, "2609": 462, "j1745": 462, "2900": 462, "3028e": 462, "j1746": 462, "2852": 462, "j1747": 462, "2959": 462, "j1748": 462, "j1753": 462, "2537": 462, "j1800": 462, "2343e": 462, "2357": 462, "j1801": 462, "j1802": 462, "3043": 462, "j1809": 462, "2332": 462, "j1811": 462, "742": 462, "603": [462, 478], "949": 462, "687": 462, "596": 462, "037": 462, "76e": 462, "models_or": 462, "17e": 462, "012": 462, "forbidden": 462, "afmhot": [462, 478], "models_gc": 462, "datasets_read": [462, 468], "78e": 462, "25e": 462, "438": 462, "610": 462, "727": 462, "54e": 462, "419": 462, "011": 462, "453": 462, "528": 462, "010": 462, "43e": 462, "704": 462, "624": 462, "802": [462, 478], "995": 462, "91e": 462, "658": 462, "346": 462, "576": 462, "223": 462, "953": 462, "050": 462, "876": 462, "722": 462, "446": [462, 554], "804": 462, "spectral_model_registri": 463, "2000e": 463, "7000e": 463, "70000000e": 463, "40822469e": 463, "70358483e": 463, "51948705e": 463, "108034597491956e": 463, "982075849517389e": 463, "64794383e": 463, "60090769e": 463, "03978226e": 463, "12794487": 463, "89595846": 463, "79432823": 463, "7116851": 463, "tabular": [463, 537], "normed_templ": 463, "model_add": [463, 520], "spatial_model_registri": 463, "flux_per_omega": 463, "13061": 463, "88470839": 463, "10172": 463, "60603928": 463, "6000000000000001": 463, "gauss_elong": 463, "region_pix": 463, "add_artist": [463, 509, 510], "fc": [463, 505], "write_ds9": 463, "gauss_temp": 463, "59240": 463, "9240e": 463, "temporal_model_registri": 463, "32465247": 463, "59233": 463, "59250": 463, "70e": 463, "meaning": 463, "model_without_nam": 463, "7wqnbwhi": 463, "customari": 463, "compulsori": 463, "model_spectrum": 463, "diffuse_cub": 463, "ya8gifa5": 463, "unambigu": 463, "thrown": 463, "models_yaml": 463, "0625": 463, "09t14": 463, "828156": 463, "models_read": 463, "pwl2": 463, "0x7ff948696040": 463, "unique_id": 463, "source1": 463, "source2": 463, "ve2pfnyr": 463, "010562": 463, "mathemat": [463, 465], "my_custom_model": 463, "1442739329466746e": 463, "regist": 463, "tradition": [463, 553], "parameter": 463, "sigma_nod": 463, "log_en": 463, "highli": 463, "span": 464, "sensibl": 464, "obs_zenith": 464, "zen_pnt": 464, "obs_muoneff": 464, "median_zenith": 464, "zen": 464, "low_zenith": 464, "high_zenith": 464, "grouped_observ": 464, "group_high_zenith": 464, "0x7ff957bbf6d0": 464, "group_low_zenith": 464, "0x7ff957bbf3d0": 464, "diamond": 464, "36834038301420274": 464, "339835555384604": 464, "3237948931463171": 464, "30535345877453707": 464, "33790": 464, "09426693227142095": 464, "28755283551095173": 464, "33791": 464, "08894569035619496": 464, "27409496735322464": 464, "33792": 464, "08447355125099419": 464, "26665050077722524": 464, "33793": 464, "0811551760882139": 464, "26272868097919794": 464, "33794": 464, "07943648658692837": 464, "2639554729438709": 464, "33795": 464, "0799109224230051": 464, "26887783978974283": 464, "33796": 464, "08191603310406206": 464, "2777074437073429": 464, "33797": 464, "0855013383552432": 464, "29355238360800506": 464, "33798": 464, "0897868126630783": 464, "31186857659616535": 464, "33799": 464, "09623312838375568": 464, "33164865722698683": 464, "33800": 464, "10470702368766069": 464, "3503706026275275": 464, "33801": 464, "12276676166802643": 464, "3011061699260256": 464, "47802": 464, "09740295372903346": 464, "2861432787940619": 464, "47803": 464, "08880368117243051": 464, "27057337686547633": 464, "47804": 464, "08388624433428049": 464, "29882214027996945": 464, "47827": 464, "09610314778983592": 464, "28385358839966657": 464, "47828": 464, "08795162606984375": 464, "268663733018811": 464, "08328557573258877": 464, "3885947175689592": 464, "053212009682775": 464, "4351637481047363": 464, "363472509034498": 464, "8986348363207728": 464, "5237647004325865": 464, "2818047723094509": 464, "020420144596410953": 464, "3135914081482271": 464, "36669663417038234": 464, "7637308880733709": 464, "6577182894355391": 464, "012733796525585": 464, "873659477745188": 464, "1439110308062257": 464, "985502122122975": 464, "102877228833871": 464, "9546285068162436": 464, "9382336444241555": 464, "8241471833009617": 464, "6429005895278312": 464, "590835686434463": 464, "11291820875721864": 464, "3119611261122878": 464, "49972277488662115": 464, "10752883769757363": 464, "1613279491744304": 464, "6589622747787678": 464, "7875405607868806": 464, "8341884287660133": 464, "1397412321592923": 464, "1836544903987521": 464, "36073833513766157": 464, "3759377929871826": 464, "8815212313941426": 464, "6959369197218669": 464, "06334488877417636": 464, "09907043184188653": 464, "4373240195300975": 464, "4313847458879893": 464, "9453950989269149": 464, "7350250533013533": 464, "feature_irf": 464, "mask_1": 464, "mask_2": 464, "group_1": 464, "0x7ff954d0cd90": 464, "group_2": 464, "0x7ff954d0cac0": 464, "jointli": [464, 469], "pl_spectrum": 465, "asimov": 465, "dataset1": [465, 488], "theoret": 465, "stronger": 465, "model_prior": 465, "i_scan": 465, "dataset1_prior": 465, "results_prior": 465, "herebi": 465, "scan_prior": 465, "posteriori": 465, "truth": 465, "belief": 465, "index_scan": 465, "capsiz": 465, "darkblu": 465, "darkgreen": 465, "arb": 465, "critic": 465, "falsifi": 465, "model_weak": 465, "model_weak_prior": 465, "infin": 465, "influenc": 465, "uni_prior_stat_sum": 465, "a_scan": 465, "showcas": 465, "dataset2": [465, 488], "dataset2_prior": 465, "fit_prior": 465, "parnam": 465, "specfif": 465, "jeffrei": 465, "quar": 465, "mycustomprior": 465, "maxmimum": 465, "costom": 465, "prior_registri": 465, "costomprior": 465, "costum": 465, "model_read": 465, "0x7ff957bafac0": 465, "2017icrc": 467, "766d": 467, "press": 467, "ran": 467, "prod3b": 467, "egal": 467, "untar": 467, "ctadata": 467, "publicli": [467, 469, 470], "southern": 467, "got": 467, "mst": 467, "664502403": 467, "0454683": 467, "63541": 467, "514854": 467, "9077294": 467, "2727693": 467, "664502405": 467, "2579999": 467, "64103": 467, "262728": 467, "3443842": 467, "2838398": 467, "664502408": 467, "8205513": 467, "20372": 467, "599625": 467, "0049409": 467, "7769775": 467, "664502409": 467, "0143764": 467, "03383": 467, "269627": 467, "32684833": 467, "496021": 467, "664502414": 467, "8090746": 467, "330505": 467, "319725": 467, "716062": 467, "8733348": 467, "air": 467, "noisi": 467, "unreli": 467, "furthermor": 467, "0x7ff9571ccfa0": 467, "0x7ff96c143fa0": 467, "0x7ff96c17b340": 467, "0x7ff96c143a00": 467, "km2": 467, "783587001383003": 467, "2053315944536949e": 467, "useless": 467, "elementtre": 467, "tail": [467, 552], "models_gp": 467, "source_librari": 467, "par_to_v": 467, "xf": 467, "irfs1": 467, "irfs2": 467, "south_z40_50h": 467, "roll": 468, "gtexpcube2": 468, "glast": 468, "697317": 468, "65603222222": 468, "azimuth": 468, "earth_azimuth_angl": [468, 478], "run_id": [468, 478], "recon_vers": [468, 478], "calib_vers": [468, 478], "conversion_typ": [468, 478], "difrsp0": [468, 478], "difrsp1": [468, 478], "difrsp2": [468, 478], "difrsp3": [468, 478], "difrsp4": [468, 478], "12856": 468, "5205": 468, "64438": 468, "93702": 468, "14773": 468, "04454": 468, "55275": 468, "23273": 468, "21325": 468, "002018": 468, "41866": 468, "85287": 468, "577398": 468, "42463": 468, "86676": 468, "152477": 468, "782": 468, "28905": 468, "61051": 468, "99848e": 468, "n_bad": 468, "23628": 468, "gc_po": 468, "3e4": 468, "3e5": 468, "2e6": 468, "accident": [468, 552], "watch": [468, 556], "exposure_hpx": 468, "fermi_3fhl_exposure_cube_hpx": 468, "49152": 468, "22974080e": 468, "29585273e": 468, "90605275e": 468, "tke": 468, "fermi_3fhl_psf_gc": 468, "psf_mean": 468, "1e3": [468, 494], "19646": 468, "776": 468, "597": 468, "fermi_model": 468, "449": 468, "mexico": 469, "hundr": 469, "pass4": 469, "briefli": [469, 470], "nn": 469, "plot_theta_squared_t": [469, 470], "energy_estim": 469, "classifi": 469, "fhit": 469, "data_path": 469, "crab_events_pass4": 469, "hdu_filenam": 469, "obs_filenam": 469, "103000133": 469, "unexpect": 469, "safemask_mak": 469, "safemask": 469, "45\u00ba": 469, "6h": 469, "compris": 469, "transit_map": 469, "transitsmap_crab": 469, "transit_numb": 469, "glimps": [469, 472], "excess_estim": 469, "excess_estimator_integr": 469, "excess_integr": 469, "namibia": 470, "confluenc": 470, "desi": 470, "excerpt": 470, "ra_pnt": 470, "dec_pnt": 470, "6125": 470, "771667": 470, "msh15": 470, "theta2_axi": 470, "deg2": 470, "theta2_t": 470, "822": 471, "temporari": 472, "whirlwind": 472, "tour": 472, "devot": 472, "tutorials_python": 472, "2485": 476, "1997": 476, "19991": 476, "5563052715230388": 476, "10317325958321796": 476, "55026401977972e": 476, "733360190578827e": 476, "619794257232": 476, "003131946268913696": 476, "024551293715163": 476, "0029490222317034775": 476, "9864771491419372": 476, "023473560586078527": 476, "362611": 476, "config_dict": 476, "2589254117941673": 476, "356263170943497e": 476, "264516271942103": 476, "9952623149688797": 476, "855887646638273e": 476, "400023002295445": 476, "4888969467051004e": 476, "7660365375951": 476, "011872336272724": 476, "15228678433255e": 476, "908700583573673": 476, "943282347242818": 476, "439306769641669e": 476, "300451666228708": 476, "rdbu": 476, "maker_fov": 477, "366": 477, "16240": 477, "6002e": 477, "3619e": 477, "2024e": 477, "3485e": 477, "gc_3fhl": 478, "closer": 478, "ordinari": 478, "32684": 478, "gc_3fhl_smooth": 478, "gc_3fhl_cutout": 478, "sgr": 478, "events_3fhl": 478, "12186": 478, "642": 478, "45935": 478, "553337": 478, "36273": 478, "25496": 478, "598": 478, "37506": 478, "395004": 478, "09607": 478, "15621": 478, "498": 478, "56973": 478, "409416": 478, "05673": 478, "12816": 478, "95883": 478, "340391": 478, "45856": 478, "18988": 478, "8568": 478, "355804": 478, "23734": 478, "11610": 478, "15518": 478, "224436": 478, "1986027": 478, "13960": 478, "44742": 478, "615316": 478, "6267247": 478, "10477": 478, "3981": 478, "96814": 478, "97003": 478, "13030": 478, "70428": 478, "632627": 478, "59348": 478, "11517": 478, "904": 478, "00894": 478, "065119": 478, "40112": 478, "387834": 478, "3779": 478, "56711": 478, "171749": 478, "20559": 478, "5538": 478, "345692": 478, "200638": 478, "27209": 478, "146": 478, "59344": 478, "52607": 478, "72775": 478, "13911": 478, "269": 478, "30997": 478, "239439": 478, "7684028": 478, "13226": 478, "425": 478, "16287": 478, "344238": 478, "7796942": 478, "17445": 478, "463": 478, "63342": 478, "807201": 478, "21464892": 478, "13133": 478, "42474": 478, "651058": 478, "251185": 478, "32095": 478, "705": 478, "77206": 478, "1034": 478, "18465": 478, "39728": 478, "105953": 478, "85202": 478, "14457": 478, "72217": 478, "388405": 478, "7184": 478, "32843": 478, "event_3fhl": 478, "186643": 478, "4966": 478, "621499": 478, "095707": 478, "465784": 478, "457251": 478, "36228879": 478, "75408483": 478, "09562941": 478, "6522806": 478, "05628243": 478, "44528685": 478, "10295505": 478, "1359316": 478, "85157506": 478, "08269984": 478, "71795506": 478, "26883694": 478, "82946153": 478, "89243456": 478, "89709472": 478, "75267735": 478, "57233": 478, "37455141": 478, "44802852": 478, "events_gc_3fhl": 478, "1917": 478, "85925": 478, "builtin": 478, "nupeak_ob": 478, "306196370000000": 478, "6309576500000000": 478, "4466832000000000": 478, "5248": 478, "8300": 478, "8150": 478, "079464e": 478, "j0007": 478, "7303": 478, "7647": 478, "0560": 478, "4711": 478, "9931": 478, "1920": 478, "2511884200000000": 478, "1243": 478, "6514": 478, "524807800000000": 478, "j0009": 478, "0628": 478, "663742400000000": 478, "5030": 478, "3504": 478, "5049": 478, "1412536400000000": 478, "4319": 478, "4450": 478, "3195": 478, "j2347": 478, "356": 478, "9978": 478, "5106": 478, "5760": 478, "9332549000000": 478, "j2350": 478, "3006": 478, "6354": 478, "3981075200000000": 478, "j2351": 478, "7559": 478, "8926": 478, "9890": 478, "j2352": 478, "1753": 478, "0415": 478, "8865": 478, "1737799900000000": 478, "j2356": 478, "4035": 478, "0746": 478, "5985": 478, "1310": 478, "1717": 478, "3690": 478, "2996": 478, "912525e": 478, "6205": 478, "3829": 478, "6266": 478, "4963": 478, "7760": 478, "6397": 478, "1650": 478, "818388e": 478, "8293": 478, "8256": 478, "0960": 478, "4073799600000000": 478, "signif_avg": 478, "top_five_ts_3fhl": 478, "five": 478, "mkn": [478, 551], "bll": 478, "406": 478, "801": [478, 501], "j0633": 478, "734": 478, "j1555": 478, "pg": 478, "113": 478, "411": 478, "mkn_421_3fhl": 478, "40611": 478, "6803": 478, "3331": 478, "crab_3fhl": 478, "crab_3fhl_spec": 478, "2202e": 478, "7132e": 478, "389e": 478, "2726e": 478, "ax_crab_3fhl": 478, "3848912826152664e": 478, "67457342435522e": 478, "convinc": 478, "ourself": 478, "658909145253801e": 478, "311489174710791e": 478, "359e": 478, "715": 478, "024e": 478, "087": 478, "861": 478, "660e": 478, "076": 478, "291e": 478, "aka": 478, "halo": 480, "navarro": 480, "frenk": 480, "cuspi": 480, "tabul": 480, "gmodelspatialradialprofiledmburkert": 480, "gmodelspatialradialprofiledmeinasto": 480, "gmodelspatialradialprofiledmzhao": 480, "1520": 480, "superfici": 480, "dmfitfunct": 480, "dm_exampl": 480, "gammamc_dif": 480, "sigmav": 480, "bratio": 480, "channel0": 480, "channel1": 480, "skydirfunct": 480, "8272": 480, "1762": 480, "dmsky": 480, "literatur": [480, 482, 551], "dmpipe": 480, "jeltema": 480, "profuma": 480, "darksusi": 480, "astromodel": 480, "sight": 480, "cern": 480, "dwarf": 480, "tandem": 480, "gambit": 480, "darkbit": 480, "synthesi": [482, 483], "besancon": 482, "valleespir": 482, "faucherspir": 482, "1e12": [484, 494], "cg": 484, "1e0": 484, "m_sun": 485, "1e40": 485, "snr_model": 486, "vline": [486, 509, 510], "1kpc": 486, "pred": 488, "sum_": 488, "psf_": 488, "circledast": 488, "edisp_": 488, "sum_j": 488, "t_j": 488, "_l": 488, "jl": 488, "sum_k": 488, "kl": 488, "jkl": 488, "edispersionmap": 488, "conserv": [488, 513], "strike": 488, "balanc": 488, "eventlistlat": 489, "data_storag": 489, "selected_energi": 489, "57185": 489, "selected_tim": 489, "selected_offset": 489, "selected_region": 489, "selected_id": 489, "5407363826067": 489, "5407363826070": 489, "filename_1": 489, "filename_2": 489, "hess_dl3_dr1_obs_id_023526": 489, "events_1": 489, "events_2": 489, "gti_1": 489, "gti_2": 489, "combined_ev": 489, "test_gti": 489, "test_events_with_gti": 489, "overestim": [490, 554], "lima1983": [490, 551, 554], "hessian": 490, "underestim": 490, "dataset_1": 490, "dataset_2": 490, "pha_obs23592": 490, "automatis": 491, "pronounc": 492, "pronunci": 492, "\u0261\u00e6m\u0259pa\u026a": 492, "syllabl": 492, "english": 492, "pie": 492, "listen": 492, "xaxi": 492, "s_0": 492, "s_1": 492, "glue": 492, "18392464": 492, "tip": 492, "budget": 492, "verifywarn": 492, "catch_warn": 492, "simplefilt": 492, "tqdm": 492, "pbar": 492, "show_progress_bar": 492, "progress_download": 492, "run_multiprocess": 492, "xxxx": 492, "tableau": 492, "colorblind10": 492, "seaborn": 492, "colorblind": 492, "prohibit": 492, "events_new": 492, "o2": 492, "p_": [494, 496, 497, 498], "parameteris": [494, 496], "disp": [496, 497], "redistribut": 496, "depriv": 499, "unfrozen": 499, "abdalla2018": [501, 502, 551], "ellipseannulusskyregion": [501, 505], "on_circl": 501, "on_ellipse_annulu": 501, "inner_width": [501, 505], "outer_width": [501, 505], "inner_height": [501, 505], "outer_height": [501, 505], "130": 501, "another_posit": 501, "on_rectangl": 501, "701": 501, "target_nam": 501, "crab_posit": 501, "enlarg": 502, "ring_bkg_mak": 502, "interchang": 504, "obei": 504, "axis0": 504, "deform": 505, "ellipt": [505, 511], "center_ski": 505, "fk5": [505, 516], "angular_s": 505, "geom_24_energy_bin": 505, "geom_6_energy_bin": 505, "geom_energi": 505, "purpl": 505, "perhap": 505, "region_map_2": 505, "region_map_1": 505, "gallery_python": 506, "gallery_jupyt": 506, "047945": 508, "leq": [509, 514, 515], "b_0": [509, 510], "sin": [509, 510, 511, 545], "ymin": [509, 510], "ymax": [509, 510], "edge_min": 509, "edge_max": 509, "xytext": 509, "arrowprop": 509, "arrowstyl": 509, "hline": 509, "va": 509, "476550": 509, "sigma_m": 510, "perfectli": [510, 552], "797610": 510, "r_m": 511, "reval": 511, "eta_rang": [511, 515], "meval": 511, "pixreg": 511, "set_xtick": [511, 515], "set_ytick": [511, 515], "140705": 511, "optionali": 512, "norm_0": [512, 529], "norm_1": [512, 529], "norm_2": [512, 529], "norm_3": [512, 529], "21500000000003": 512, "78499999999997": 512, "785": 512, "405995": 512, "726063": 513, "018049": 514, "rightarrow": [515, 555], "308672": 515, "extended_archive_v18": 516, "rxj1713_2016_250gev": 516, "radecsi": 516, "radesysa": 516, "wcsprm": 516, "_wc": 516, "celfix": 516, "388": 516, "762199399999986": 516, "640157": 516, "ebl_data_builtin": 518, "saldana21": 518, "ax_ebl": 518, "ax_model": 518, "franceschni": 518, "quiescent": 518, "dict_kei": 518, "81e": 518, "742053": 518, "196380": 519, "633542": 520, "986962": 521, "303333": 522, "611745": 523, "ecpl_norm": 524, "expcutoffpowerlaw": 524, "937680": 524, "270688": 525, "593635": 526, "lp_norm": 527, "1678": 527, "1684": 527, "972713": 527, "relativist": 528, "exponentialcutoffpowerlaw": 528, "1e30": 528, "cmb": 528, "fir": 528, "eemin": 528, "ic": 528, "e_cutoff": 528, "486404": 528, "norm_4": 529, "norm_5": 529, "829854": 529, "256993": 530, "scitool": 531, "source_model": 531, "law2": 531, "695906": 531, "085165": 532, "526200": 533, "864784": 534, "196320": 535, "527841": 536, "3e6": 537, "3e7": 537, "new_model": 537, "3000000": 537, "10000000": 537, "30000000": 537, "851420": 537, "848": 538, "constant_model": 539, "617701": 539, "59123": [540, 541, 542], "864686": 540, "gaussian_model": 541, "112635": 541, "gen_gaussian_model": 542, "generalized_gaussian_model": 542, "6666666666666666": 542, "359746": 542, "linear_model": 543, "60409": [543, 544, 545], "479843659305": 543, "595573": 543, "t_0": 544, "pl_model": 544, "479846417074": 544, "919706": 544, "sine_model": 545, "7853981633974483": 545, "47984993521": 545, "141569": 545, "phasecurve_lsi_dc": 546, "43366": 546, "phase_model": 546, "59100": [546, 547], "59200": 546, "phase_curve_model": 546, "03745318352059925": 546, "387404": 546, "59365": 547, "light_curve_model": 547, "633803": 547, "icon": 550, "arrow": 550, "apertur": 551, "acquisit": 551, "cost": 551, "bibliographi": 551, "albert2007": 551, "albert": 551, "unfold": 551, "berg": 551, "cash1979": [551, 554], "cousins2007": [551, 554], "feldman1998": [551, 554], "lafferty1994": 551, "1983": 551, "meyer2010": 551, "mohrmann2019": 551, "naurois2012": 551, "piron2001": 551, "piron": 551, "rolke2005": [551, 554], "rolk": 551, "foremost": 552, "discov": 552, "prompt": 552, "imagin": 552, "n_observ": 552, "mu_background": 552, "4f": [552, 553, 554], "usr": 552, "chmod": 552, "disadvantag": 552, "tast": 552, "highlight": 552, "01648855015875024": 552, "popular": 552, "pymotw": 552, "parser": 552, "parse_arg": 552, "yourself": [552, 553], "csh": 552, "unheard": 552, "troubl": 552, "echo": 552, "stuck": 552, "56353481": 553, "56922612": 553, "54566271": 553, "6784": 553, "faint": 553, "736": [553, 554], "034": 553, "663": 553, "substitut": 553, "m_i": 553, "t_b": 553, "m_b": 553, "mu_off": 554, "a_on": 554, "a_off": 554, "mu_x": 554, "heart": 554, "asymptot": [554, 555], "dof": 554, "sigma_to_t": 554, "sf": 554, "suspect": 554, "0033": 554, "count_statist": 554, "errn_2sigma": 554, "errp_2sigma": 554, "750": 554, "580": 554, "undefin": 555, "ever": 555, "unphys": 555, "unrel": 556, "terrestri": 556, "julian": 556, "plot_dat": 556, "10592": 556, "14610": 556, "diagram": 556, "sider": 556, "nutshel": 556, "brief": 556, "ut1": 556, "time_ref_from_dict": 556, "time_relative_to_ref": 556, "absolute_tim": 556, "colormap_milagro": 557}, "objects": {"gammapy": [[0, 0, 0, "-", "analysis"], [2, 0, 0, "-", "catalog"], [3, 0, 0, "-", "data"], [4, 0, 0, "-", "datasets"], [5, 0, 0, "-", "estimators"], [7, 0, 0, "-", "irf"], [8, 0, 0, "-", "makers"], [9, 0, 0, "-", "maps"], [10, 0, 0, "-", "modeling"], [12, 0, 0, "-", "stats"], [14, 0, 0, "-", "visualization"], [11, 6, 1, "cmdoption-gammapy-ignore-warnings", "--ignore-warnings"], [11, 6, 1, "cmdoption-gammapy-log-level", "--log-level"], [11, 6, 1, "cmdoption-gammapy-version", "--version"]], "gammapy.analysis": [[15, 1, 1, "", "Analysis"], [16, 1, 1, "", "AnalysisConfig"]], "gammapy.analysis.Analysis": [[15, 2, 1, "", "config"], [15, 3, 1, "", "get_datasets"], [15, 3, 1, "", "get_excess_map"], [15, 3, 1, "", "get_flux_points"], [15, 3, 1, "", "get_light_curve"], [15, 3, 1, "", "get_observations"], [15, 2, 1, "", "models"], [15, 3, 1, "", "read_datasets"], [15, 3, 1, "", "read_models"], [15, 3, 1, "", "run_fit"], [15, 3, 1, "", "set_models"], [15, 3, 1, "", "update_config"], [15, 3, 1, "", "write_datasets"], [15, 3, 1, "", "write_models"]], "gammapy.analysis.AnalysisConfig": [[16, 3, 1, "", "construct"], [16, 3, 1, "", "copy"], [16, 3, 1, "", "dict"], [16, 3, 1, "", "from_orm"], [16, 3, 1, "", "from_yaml"], [16, 3, 1, "", "json"], [16, 2, 1, "", "model_computed_fields"], [16, 2, 1, "", "model_config"], [16, 3, 1, "", "model_construct"], [16, 3, 1, "", "model_copy"], [16, 3, 1, "", "model_dump"], [16, 3, 1, "", "model_dump_json"], [16, 2, 1, "", "model_extra"], [16, 2, 1, "", "model_fields"], [16, 2, 1, "", "model_fields_set"], [16, 3, 1, "", "model_json_schema"], [16, 3, 1, "", "model_parametrized_name"], [16, 3, 1, "", "model_post_init"], [16, 3, 1, "", "model_rebuild"], [16, 3, 1, "", "model_validate"], [16, 3, 1, "", "model_validate_json"], [16, 3, 1, "", "model_validate_strings"], [16, 3, 1, "", "parse_file"], [16, 3, 1, "", "parse_obj"], [16, 3, 1, "", "parse_raw"], [16, 3, 1, "", "read"], [16, 3, 1, "", "schema"], [16, 3, 1, "", "schema_json"], [16, 3, 1, "", "set_logging"], [16, 3, 1, "", "to_yaml"], [16, 3, 1, "", "update"], [16, 3, 1, "", "update_forward_refs"], [16, 3, 1, "", "validate"], [16, 3, 1, "", "write"]], "gammapy.astro": [[1, 0, 0, "-", "darkmatter"], [1, 0, 0, "-", "population"], [1, 0, 0, "-", "source"]], "gammapy.astro.darkmatter": [[17, 1, 1, "", "BurkertProfile"], [18, 1, 1, "", "DMProfile"], [19, 1, 1, "", "DarkMatterAnnihilationSpectralModel"], [20, 1, 1, "", "DarkMatterDecaySpectralModel"], [21, 1, 1, "", "EinastoProfile"], [22, 1, 1, "", "IsothermalProfile"], [23, 1, 1, "", "JFactory"], [24, 1, 1, "", "MooreProfile"], [25, 1, 1, "", "NFWProfile"], [26, 1, 1, "", "PrimaryFlux"], [27, 1, 1, "", "ZhaoProfile"]], "gammapy.astro.darkmatter.BurkertProfile": [[17, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [17, 2, 1, "", "DISTANCE_GC"], [17, 2, 1, "", "LOCAL_DENSITY"], [17, 3, 1, "", "__call__"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "integral"], [17, 3, 1, "", "integrate_spectrum_separation"], [17, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.DMProfile": [[18, 2, 1, "", "DISTANCE_GC"], [18, 2, 1, "", "LOCAL_DENSITY"], [18, 3, 1, "", "__call__"], [18, 3, 1, "", "integral"], [18, 3, 1, "", "integrate_spectrum_separation"], [18, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel": [[19, 2, 1, "", "THERMAL_RELIC_CROSS_SECTION"], [19, 3, 1, "", "__call__"], [19, 3, 1, "", "copy"], [19, 2, 1, "", "covariance"], [19, 2, 1, "", "default_parameters"], [19, 3, 1, "", "energy_flux"], [19, 3, 1, "", "energy_flux_error"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "evaluate_error"], [19, 3, 1, "", "freeze"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_parameters"], [19, 2, 1, "", "frozen"], [19, 3, 1, "", "integral"], [19, 3, 1, "", "integral_error"], [19, 3, 1, "", "inverse"], [19, 3, 1, "", "inverse_all"], [19, 2, 1, "", "is_norm_spectral_model"], [19, 2, 1, "", "parameters"], [19, 2, 1, "", "pivot_energy"], [19, 3, 1, "", "plot"], [19, 3, 1, "", "plot_error"], [19, 3, 1, "", "reassign"], [19, 3, 1, "", "reference_fluxes"], [19, 2, 1, "", "scale"], [19, 3, 1, "", "spectral_index"], [19, 3, 1, "", "spectral_index_error"], [19, 2, 1, "", "tag"], [19, 3, 1, "", "to_dict"], [19, 2, 1, "", "type"], [19, 3, 1, "", "unfreeze"]], "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel": [[20, 2, 1, "", "LIFETIME_AGE_OF_UNIVERSE"], [20, 3, 1, "", "__call__"], [20, 3, 1, "", "copy"], [20, 2, 1, "", "covariance"], [20, 2, 1, "", "default_parameters"], [20, 3, 1, "", "energy_flux"], [20, 3, 1, "", "energy_flux_error"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "evaluate_error"], [20, 3, 1, "", "freeze"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_parameters"], [20, 2, 1, "", "frozen"], [20, 3, 1, "", "integral"], [20, 3, 1, "", "integral_error"], [20, 3, 1, "", "inverse"], [20, 3, 1, "", "inverse_all"], [20, 2, 1, "", "is_norm_spectral_model"], [20, 2, 1, "", "parameters"], [20, 2, 1, "", "pivot_energy"], [20, 3, 1, "", "plot"], [20, 3, 1, "", "plot_error"], [20, 3, 1, "", "reassign"], [20, 3, 1, "", "reference_fluxes"], [20, 2, 1, "", "scale"], [20, 3, 1, "", "spectral_index"], [20, 3, 1, "", "spectral_index_error"], [20, 2, 1, "", "tag"], [20, 3, 1, "", "to_dict"], [20, 2, 1, "", "type"], [20, 3, 1, "", "unfreeze"]], "gammapy.astro.darkmatter.EinastoProfile": [[21, 2, 1, "", "DEFAULT_ALPHA"], [21, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [21, 2, 1, "", "DISTANCE_GC"], [21, 2, 1, "", "LOCAL_DENSITY"], [21, 3, 1, "", "__call__"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "integral"], [21, 3, 1, "", "integrate_spectrum_separation"], [21, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.IsothermalProfile": [[22, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [22, 2, 1, "", "DISTANCE_GC"], [22, 2, 1, "", "LOCAL_DENSITY"], [22, 3, 1, "", "__call__"], [22, 3, 1, "", "evaluate"], [22, 3, 1, "", "integral"], [22, 3, 1, "", "integrate_spectrum_separation"], [22, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.JFactory": [[23, 3, 1, "", "compute_differential_jfactor"], [23, 3, 1, "", "compute_jfactor"]], "gammapy.astro.darkmatter.MooreProfile": [[24, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [24, 2, 1, "", "DISTANCE_GC"], [24, 2, 1, "", "LOCAL_DENSITY"], [24, 3, 1, "", "__call__"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "integral"], [24, 3, 1, "", "integrate_spectrum_separation"], [24, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.NFWProfile": [[25, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [25, 2, 1, "", "DISTANCE_GC"], [25, 2, 1, "", "LOCAL_DENSITY"], [25, 3, 1, "", "__call__"], [25, 3, 1, "", "evaluate"], [25, 3, 1, "", "integral"], [25, 3, 1, "", "integrate_spectrum_separation"], [25, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.PrimaryFlux": [[26, 3, 1, "", "__call__"], [26, 2, 1, "", "allowed_channels"], [26, 2, 1, "", "channel"], [26, 2, 1, "", "channel_registry"], [26, 3, 1, "", "copy"], [26, 2, 1, "", "covariance"], [26, 2, 1, "", "default_parameters"], [26, 3, 1, "", "energy_flux"], [26, 3, 1, "", "energy_flux_error"], [26, 3, 1, "", "evaluate"], [26, 3, 1, "", "evaluate_error"], [26, 3, 1, "", "freeze"], [26, 3, 1, "", "from_dict"], [26, 3, 1, "", "from_parameters"], [26, 2, 1, "", "frozen"], [26, 3, 1, "", "integral"], [26, 3, 1, "", "integral_error"], [26, 3, 1, "", "inverse"], [26, 3, 1, "", "inverse_all"], [26, 2, 1, "", "is_norm_spectral_model"], [26, 2, 1, "", "mDM"], [26, 2, 1, "", "map"], [26, 2, 1, "", "parameters"], [26, 2, 1, "", "pivot_energy"], [26, 3, 1, "", "plot"], [26, 3, 1, "", "plot_error"], [26, 3, 1, "", "reassign"], [26, 3, 1, "", "reference_fluxes"], [26, 3, 1, "", "spectral_index"], [26, 3, 1, "", "spectral_index_error"], [26, 2, 1, "", "table_filename"], [26, 2, 1, "", "tag"], [26, 3, 1, "", "to_dict"], [26, 2, 1, "", "type"], [26, 3, 1, "", "unfreeze"], [26, 3, 1, "", "write"]], "gammapy.astro.darkmatter.ZhaoProfile": [[27, 2, 1, "", "DEFAULT_ALPHA"], [27, 2, 1, "", "DEFAULT_BETA"], [27, 2, 1, "", "DEFAULT_GAMMA"], [27, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [27, 2, 1, "", "DISTANCE_GC"], [27, 2, 1, "", "LOCAL_DENSITY"], [27, 3, 1, "", "__call__"], [27, 3, 1, "", "evaluate"], [27, 3, 1, "", "integral"], [27, 3, 1, "", "integrate_spectrum_separation"], [27, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.population": [[28, 1, 1, "", "CaseBattacharya1998"], [29, 1, 1, "", "Exponential"], [30, 1, 1, "", "FaucherKaspi2006"], [31, 1, 1, "", "FaucherKaspi2006VelocityBimodal"], [32, 1, 1, "", "FaucherKaspi2006VelocityMaxwellian"], [33, 1, 1, "", "FaucherSpiral"], [34, 1, 1, "", "LogSpiral"], [35, 1, 1, "", "Lorimer2006"], [36, 1, 1, "", "Paczynski1990"], [37, 1, 1, "", "Paczynski1990Velocity"], [38, 1, 1, "", "ValleeSpiral"], [39, 1, 1, "", "YusifovKucuk2004"], [40, 1, 1, "", "YusifovKucuk2004B"], [41, 4, 1, "", "add_observed_parameters"], [42, 4, 1, "", "add_pulsar_parameters"], [43, 4, 1, "", "add_pwn_parameters"], [44, 4, 1, "", "add_snr_parameters"], [45, 4, 1, "", "make_base_catalog_galactic"], [46, 4, 1, "", "make_catalog_random_positions_cube"], [47, 4, 1, "", "make_catalog_random_positions_sphere"], [48, 5, 1, "", "radial_distributions"], [49, 5, 1, "", "velocity_distributions"]], "gammapy.astro.population.CaseBattacharya1998": [[28, 3, 1, "", "__call__"], [28, 2, 1, "", "alpha"], [28, 2, 1, "", "amplitude"], [28, 2, 1, "", "bbox_with_units"], [28, 2, 1, "", "beta"], [28, 2, 1, "", "bounding_box"], [28, 2, 1, "", "bounds"], [28, 3, 1, "", "coerce_units"], [28, 2, 1, "", "col_fit_deriv"], [28, 3, 1, "", "copy"], [28, 2, 1, "", "cov_matrix"], [28, 3, 1, "", "deepcopy"], [28, 2, 1, "", "eqcons"], [28, 3, 1, "", "evaluate"], [28, 2, 1, "", "evolved"], [28, 2, 1, "", "fit_deriv"], [28, 2, 1, "", "fittable"], [28, 2, 1, "", "fixed"], [28, 3, 1, "", "get_bounding_box"], [28, 3, 1, "", "has_inverse"], [28, 2, 1, "", "has_user_bounding_box"], [28, 2, 1, "", "has_user_inverse"], [28, 2, 1, "", "ineqcons"], [28, 3, 1, "", "input_shape"], [28, 2, 1, "", "input_units"], [28, 2, 1, "", "input_units_allow_dimensionless"], [28, 2, 1, "", "input_units_equivalencies"], [28, 2, 1, "", "input_units_strict"], [28, 2, 1, "", "inputs"], [28, 2, 1, "", "inverse"], [28, 2, 1, "", "linear"], [28, 2, 1, "", "meta"], [28, 2, 1, "", "model_constraints"], [28, 2, 1, "", "model_set_axis"], [28, 2, 1, "", "n_inputs"], [28, 2, 1, "", "n_outputs"], [28, 2, 1, "", "n_submodels"], [28, 2, 1, "", "name"], [28, 3, 1, "", "output_units"], [28, 2, 1, "", "outputs"], [28, 2, 1, "", "param_names"], [28, 2, 1, "", "param_sets"], [28, 2, 1, "", "parameter_constraints"], [28, 2, 1, "", "parameters"], [28, 3, 1, "", "prepare_inputs"], [28, 3, 1, "", "prepare_outputs"], [28, 3, 1, "", "rename"], [28, 3, 1, "", "render"], [28, 2, 1, "", "return_units"], [28, 2, 1, "", "separable"], [28, 3, 1, "", "set_slice_args"], [28, 2, 1, "", "standard_broadcasting"], [28, 2, 1, "", "stds"], [28, 3, 1, "", "strip_units_from_tree"], [28, 3, 1, "", "sum_of_implicit_terms"], [28, 2, 1, "", "sync_constraints"], [28, 2, 1, "", "tied"], [28, 2, 1, "", "uses_quantity"], [28, 3, 1, "", "with_units_from_data"], [28, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Exponential": [[29, 3, 1, "", "__call__"], [29, 2, 1, "", "amplitude"], [29, 2, 1, "", "bbox_with_units"], [29, 2, 1, "", "bounding_box"], [29, 2, 1, "", "bounds"], [29, 3, 1, "", "coerce_units"], [29, 2, 1, "", "col_fit_deriv"], [29, 3, 1, "", "copy"], [29, 2, 1, "", "cov_matrix"], [29, 3, 1, "", "deepcopy"], [29, 2, 1, "", "eqcons"], [29, 3, 1, "", "evaluate"], [29, 2, 1, "", "evolved"], [29, 2, 1, "", "fit_deriv"], [29, 2, 1, "", "fittable"], [29, 2, 1, "", "fixed"], [29, 3, 1, "", "get_bounding_box"], [29, 3, 1, "", "has_inverse"], [29, 2, 1, "", "has_user_bounding_box"], [29, 2, 1, "", "has_user_inverse"], [29, 2, 1, "", "ineqcons"], [29, 3, 1, "", "input_shape"], [29, 2, 1, "", "input_units"], [29, 2, 1, "", "input_units_allow_dimensionless"], [29, 2, 1, "", "input_units_equivalencies"], [29, 2, 1, "", "input_units_strict"], [29, 2, 1, "", "inputs"], [29, 2, 1, "", "inverse"], [29, 2, 1, "", "linear"], [29, 2, 1, "", "meta"], [29, 2, 1, "", "model_constraints"], [29, 2, 1, "", "model_set_axis"], [29, 2, 1, "", "n_inputs"], [29, 2, 1, "", "n_outputs"], [29, 2, 1, "", "n_submodels"], [29, 2, 1, "", "name"], [29, 3, 1, "", "output_units"], [29, 2, 1, "", "outputs"], [29, 2, 1, "", "param_names"], [29, 2, 1, "", "param_sets"], [29, 2, 1, "", "parameter_constraints"], [29, 2, 1, "", "parameters"], [29, 3, 1, "", "prepare_inputs"], [29, 3, 1, "", "prepare_outputs"], [29, 3, 1, "", "rename"], [29, 3, 1, "", "render"], [29, 2, 1, "", "return_units"], [29, 2, 1, "", "separable"], [29, 3, 1, "", "set_slice_args"], [29, 2, 1, "", "standard_broadcasting"], [29, 2, 1, "", "stds"], [29, 3, 1, "", "strip_units_from_tree"], [29, 3, 1, "", "sum_of_implicit_terms"], [29, 2, 1, "", "sync_constraints"], [29, 2, 1, "", "tied"], [29, 2, 1, "", "uses_quantity"], [29, 3, 1, "", "with_units_from_data"], [29, 3, 1, "", "without_units_for_data"], [29, 2, 1, "", "z_0"]], "gammapy.astro.population.FaucherKaspi2006": [[30, 3, 1, "", "__call__"], [30, 2, 1, "", "amplitude"], [30, 2, 1, "", "bbox_with_units"], [30, 2, 1, "", "bounding_box"], [30, 2, 1, "", "bounds"], [30, 3, 1, "", "coerce_units"], [30, 2, 1, "", "col_fit_deriv"], [30, 3, 1, "", "copy"], [30, 2, 1, "", "cov_matrix"], [30, 3, 1, "", "deepcopy"], [30, 2, 1, "", "eqcons"], [30, 3, 1, "", "evaluate"], [30, 2, 1, "", "evolved"], [30, 2, 1, "", "fit_deriv"], [30, 2, 1, "", "fittable"], [30, 2, 1, "", "fixed"], [30, 3, 1, "", "get_bounding_box"], [30, 3, 1, "", "has_inverse"], [30, 2, 1, "", "has_user_bounding_box"], [30, 2, 1, "", "has_user_inverse"], [30, 2, 1, "", "ineqcons"], [30, 3, 1, "", "input_shape"], [30, 2, 1, "", "input_units"], [30, 2, 1, "", "input_units_allow_dimensionless"], [30, 2, 1, "", "input_units_equivalencies"], [30, 2, 1, "", "input_units_strict"], [30, 2, 1, "", "inputs"], [30, 2, 1, "", "inverse"], [30, 2, 1, "", "linear"], [30, 2, 1, "", "meta"], [30, 2, 1, "", "model_constraints"], [30, 2, 1, "", "model_set_axis"], [30, 2, 1, "", "n_inputs"], [30, 2, 1, "", "n_outputs"], [30, 2, 1, "", "n_submodels"], [30, 2, 1, "", "name"], [30, 3, 1, "", "output_units"], [30, 2, 1, "", "outputs"], [30, 2, 1, "", "param_names"], [30, 2, 1, "", "param_sets"], [30, 2, 1, "", "parameter_constraints"], [30, 2, 1, "", "parameters"], [30, 3, 1, "", "prepare_inputs"], [30, 3, 1, "", "prepare_outputs"], [30, 2, 1, "", "r_0"], [30, 3, 1, "", "rename"], [30, 3, 1, "", "render"], [30, 2, 1, "", "return_units"], [30, 2, 1, "", "separable"], [30, 3, 1, "", "set_slice_args"], [30, 2, 1, "", "sigma"], [30, 2, 1, "", "standard_broadcasting"], [30, 2, 1, "", "stds"], [30, 3, 1, "", "strip_units_from_tree"], [30, 3, 1, "", "sum_of_implicit_terms"], [30, 2, 1, "", "sync_constraints"], [30, 2, 1, "", "tied"], [30, 2, 1, "", "uses_quantity"], [30, 3, 1, "", "with_units_from_data"], [30, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherKaspi2006VelocityBimodal": [[31, 3, 1, "", "__call__"], [31, 2, 1, "", "amplitude"], [31, 2, 1, "", "bbox_with_units"], [31, 2, 1, "", "bounding_box"], [31, 2, 1, "", "bounds"], [31, 3, 1, "", "coerce_units"], [31, 2, 1, "", "col_fit_deriv"], [31, 3, 1, "", "copy"], [31, 2, 1, "", "cov_matrix"], [31, 3, 1, "", "deepcopy"], [31, 2, 1, "", "eqcons"], [31, 3, 1, "", "evaluate"], [31, 2, 1, "", "fit_deriv"], [31, 2, 1, "", "fittable"], [31, 2, 1, "", "fixed"], [31, 3, 1, "", "get_bounding_box"], [31, 3, 1, "", "has_inverse"], [31, 2, 1, "", "has_user_bounding_box"], [31, 2, 1, "", "has_user_inverse"], [31, 2, 1, "", "ineqcons"], [31, 3, 1, "", "input_shape"], [31, 2, 1, "", "input_units"], [31, 2, 1, "", "input_units_allow_dimensionless"], [31, 2, 1, "", "input_units_equivalencies"], [31, 2, 1, "", "input_units_strict"], [31, 2, 1, "", "inputs"], [31, 2, 1, "", "inverse"], [31, 2, 1, "", "linear"], [31, 2, 1, "", "meta"], [31, 2, 1, "", "model_constraints"], [31, 2, 1, "", "model_set_axis"], [31, 2, 1, "", "n_inputs"], [31, 2, 1, "", "n_outputs"], [31, 2, 1, "", "n_submodels"], [31, 2, 1, "", "name"], [31, 3, 1, "", "output_units"], [31, 2, 1, "", "outputs"], [31, 2, 1, "", "param_names"], [31, 2, 1, "", "param_sets"], [31, 2, 1, "", "parameter_constraints"], [31, 2, 1, "", "parameters"], [31, 3, 1, "", "prepare_inputs"], [31, 3, 1, "", "prepare_outputs"], [31, 3, 1, "", "rename"], [31, 3, 1, "", "render"], [31, 2, 1, "", "return_units"], [31, 2, 1, "", "separable"], [31, 3, 1, "", "set_slice_args"], [31, 2, 1, "", "sigma_1"], [31, 2, 1, "", "sigma_2"], [31, 2, 1, "", "standard_broadcasting"], [31, 2, 1, "", "stds"], [31, 3, 1, "", "strip_units_from_tree"], [31, 3, 1, "", "sum_of_implicit_terms"], [31, 2, 1, "", "sync_constraints"], [31, 2, 1, "", "tied"], [31, 2, 1, "", "uses_quantity"], [31, 2, 1, "", "w"], [31, 3, 1, "", "with_units_from_data"], [31, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian": [[32, 3, 1, "", "__call__"], [32, 2, 1, "", "amplitude"], [32, 2, 1, "", "bbox_with_units"], [32, 2, 1, "", "bounding_box"], [32, 2, 1, "", "bounds"], [32, 3, 1, "", "coerce_units"], [32, 2, 1, "", "col_fit_deriv"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "cov_matrix"], [32, 3, 1, "", "deepcopy"], [32, 2, 1, "", "eqcons"], [32, 3, 1, "", "evaluate"], [32, 2, 1, "", "fit_deriv"], [32, 2, 1, "", "fittable"], [32, 2, 1, "", "fixed"], [32, 3, 1, "", "get_bounding_box"], [32, 3, 1, "", "has_inverse"], [32, 2, 1, "", "has_user_bounding_box"], [32, 2, 1, "", "has_user_inverse"], [32, 2, 1, "", "ineqcons"], [32, 3, 1, "", "input_shape"], [32, 2, 1, "", "input_units"], [32, 2, 1, "", "input_units_allow_dimensionless"], [32, 2, 1, "", "input_units_equivalencies"], [32, 2, 1, "", "input_units_strict"], [32, 2, 1, "", "inputs"], [32, 2, 1, "", "inverse"], [32, 2, 1, "", "linear"], [32, 2, 1, "", "meta"], [32, 2, 1, "", "model_constraints"], [32, 2, 1, "", "model_set_axis"], [32, 2, 1, "", "n_inputs"], [32, 2, 1, "", "n_outputs"], [32, 2, 1, "", "n_submodels"], [32, 2, 1, "", "name"], [32, 3, 1, "", "output_units"], [32, 2, 1, "", "outputs"], [32, 2, 1, "", "param_names"], [32, 2, 1, "", "param_sets"], [32, 2, 1, "", "parameter_constraints"], [32, 2, 1, "", "parameters"], [32, 3, 1, "", "prepare_inputs"], [32, 3, 1, "", "prepare_outputs"], [32, 3, 1, "", "rename"], [32, 3, 1, "", "render"], [32, 2, 1, "", "return_units"], [32, 2, 1, "", "separable"], [32, 3, 1, "", "set_slice_args"], [32, 2, 1, "", "sigma"], [32, 2, 1, "", "standard_broadcasting"], [32, 2, 1, "", "stds"], [32, 3, 1, "", "strip_units_from_tree"], [32, 3, 1, "", "sum_of_implicit_terms"], [32, 2, 1, "", "sync_constraints"], [32, 2, 1, "", "tied"], [32, 2, 1, "", "uses_quantity"], [32, 3, 1, "", "with_units_from_data"], [32, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherSpiral": [[33, 3, 1, "", "__call__"], [33, 2, 1, "", "k"], [33, 2, 1, "", "r_0"], [33, 3, 1, "", "radius"], [33, 2, 1, "", "spiralarms"], [33, 3, 1, "", "theta"], [33, 2, 1, "", "theta_0"], [33, 3, 1, "", "xy_position"]], "gammapy.astro.population.LogSpiral": [[34, 3, 1, "", "radius"], [34, 3, 1, "", "theta"], [34, 3, 1, "", "xy_position"]], "gammapy.astro.population.Lorimer2006": [[35, 2, 1, "", "B"], [35, 2, 1, "", "C"], [35, 3, 1, "", "__call__"], [35, 2, 1, "", "amplitude"], [35, 2, 1, "", "bbox_with_units"], [35, 2, 1, "", "bounding_box"], [35, 2, 1, "", "bounds"], [35, 3, 1, "", "coerce_units"], [35, 2, 1, "", "col_fit_deriv"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "cov_matrix"], [35, 3, 1, "", "deepcopy"], [35, 2, 1, "", "eqcons"], [35, 3, 1, "", "evaluate"], [35, 2, 1, "", "evolved"], [35, 2, 1, "", "fit_deriv"], [35, 2, 1, "", "fittable"], [35, 2, 1, "", "fixed"], [35, 3, 1, "", "get_bounding_box"], [35, 3, 1, "", "has_inverse"], [35, 2, 1, "", "has_user_bounding_box"], [35, 2, 1, "", "has_user_inverse"], [35, 2, 1, "", "ineqcons"], [35, 3, 1, "", "input_shape"], [35, 2, 1, "", "input_units"], [35, 2, 1, "", "input_units_allow_dimensionless"], [35, 2, 1, "", "input_units_equivalencies"], [35, 2, 1, "", "input_units_strict"], [35, 2, 1, "", "inputs"], [35, 2, 1, "", "inverse"], [35, 2, 1, "", "linear"], [35, 2, 1, "", "meta"], [35, 2, 1, "", "model_constraints"], [35, 2, 1, "", "model_set_axis"], [35, 2, 1, "", "n_inputs"], [35, 2, 1, "", "n_outputs"], [35, 2, 1, "", "n_submodels"], [35, 2, 1, "", "name"], [35, 3, 1, "", "output_units"], [35, 2, 1, "", "outputs"], [35, 2, 1, "", "param_names"], [35, 2, 1, "", "param_sets"], [35, 2, 1, "", "parameter_constraints"], [35, 2, 1, "", "parameters"], [35, 3, 1, "", "prepare_inputs"], [35, 3, 1, "", "prepare_outputs"], [35, 3, 1, "", "rename"], [35, 3, 1, "", "render"], [35, 2, 1, "", "return_units"], [35, 2, 1, "", "separable"], [35, 3, 1, "", "set_slice_args"], [35, 2, 1, "", "standard_broadcasting"], [35, 2, 1, "", "stds"], [35, 3, 1, "", "strip_units_from_tree"], [35, 3, 1, "", "sum_of_implicit_terms"], [35, 2, 1, "", "sync_constraints"], [35, 2, 1, "", "tied"], [35, 2, 1, "", "uses_quantity"], [35, 3, 1, "", "with_units_from_data"], [35, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Paczynski1990": [[36, 3, 1, "", "__call__"], [36, 2, 1, "", "amplitude"], [36, 2, 1, "", "bbox_with_units"], [36, 2, 1, "", "bounding_box"], [36, 2, 1, "", "bounds"], [36, 3, 1, "", "coerce_units"], [36, 2, 1, "", "col_fit_deriv"], [36, 3, 1, "", "copy"], [36, 2, 1, "", "cov_matrix"], [36, 3, 1, "", "deepcopy"], [36, 2, 1, "", "eqcons"], [36, 3, 1, "", "evaluate"], [36, 2, 1, "", "evolved"], [36, 2, 1, "", "fit_deriv"], [36, 2, 1, "", "fittable"], [36, 2, 1, "", "fixed"], [36, 3, 1, "", "get_bounding_box"], [36, 3, 1, "", "has_inverse"], [36, 2, 1, "", "has_user_bounding_box"], [36, 2, 1, "", "has_user_inverse"], [36, 2, 1, "", "ineqcons"], [36, 3, 1, "", "input_shape"], [36, 2, 1, "", "input_units"], [36, 2, 1, "", "input_units_allow_dimensionless"], [36, 2, 1, "", "input_units_equivalencies"], [36, 2, 1, "", "input_units_strict"], [36, 2, 1, "", "inputs"], [36, 2, 1, "", "inverse"], [36, 2, 1, "", "linear"], [36, 2, 1, "", "meta"], [36, 2, 1, "", "model_constraints"], [36, 2, 1, "", "model_set_axis"], [36, 2, 1, "", "n_inputs"], [36, 2, 1, "", "n_outputs"], [36, 2, 1, "", "n_submodels"], [36, 2, 1, "", "name"], [36, 3, 1, "", "output_units"], [36, 2, 1, "", "outputs"], [36, 2, 1, "", "param_names"], [36, 2, 1, "", "param_sets"], [36, 2, 1, "", "parameter_constraints"], [36, 2, 1, "", "parameters"], [36, 3, 1, "", "prepare_inputs"], [36, 3, 1, "", "prepare_outputs"], [36, 2, 1, "", "r_exp"], [36, 3, 1, "", "rename"], [36, 3, 1, "", "render"], [36, 2, 1, "", "return_units"], [36, 2, 1, "", "separable"], [36, 3, 1, "", "set_slice_args"], [36, 2, 1, "", "standard_broadcasting"], [36, 2, 1, "", "stds"], [36, 3, 1, "", "strip_units_from_tree"], [36, 3, 1, "", "sum_of_implicit_terms"], [36, 2, 1, "", "sync_constraints"], [36, 2, 1, "", "tied"], [36, 2, 1, "", "uses_quantity"], [36, 3, 1, "", "with_units_from_data"], [36, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Paczynski1990Velocity": [[37, 3, 1, "", "__call__"], [37, 2, 1, "", "amplitude"], [37, 2, 1, "", "bbox_with_units"], [37, 2, 1, "", "bounding_box"], [37, 2, 1, "", "bounds"], [37, 3, 1, "", "coerce_units"], [37, 2, 1, "", "col_fit_deriv"], [37, 3, 1, "", "copy"], [37, 2, 1, "", "cov_matrix"], [37, 3, 1, "", "deepcopy"], [37, 2, 1, "", "eqcons"], [37, 3, 1, "", "evaluate"], [37, 2, 1, "", "fit_deriv"], [37, 2, 1, "", "fittable"], [37, 2, 1, "", "fixed"], [37, 3, 1, "", "get_bounding_box"], [37, 3, 1, "", "has_inverse"], [37, 2, 1, "", "has_user_bounding_box"], [37, 2, 1, "", "has_user_inverse"], [37, 2, 1, "", "ineqcons"], [37, 3, 1, "", "input_shape"], [37, 2, 1, "", "input_units"], [37, 2, 1, "", "input_units_allow_dimensionless"], [37, 2, 1, "", "input_units_equivalencies"], [37, 2, 1, "", "input_units_strict"], [37, 2, 1, "", "inputs"], [37, 2, 1, "", "inverse"], [37, 2, 1, "", "linear"], [37, 2, 1, "", "meta"], [37, 2, 1, "", "model_constraints"], [37, 2, 1, "", "model_set_axis"], [37, 2, 1, "", "n_inputs"], [37, 2, 1, "", "n_outputs"], [37, 2, 1, "", "n_submodels"], [37, 2, 1, "", "name"], [37, 3, 1, "", "output_units"], [37, 2, 1, "", "outputs"], [37, 2, 1, "", "param_names"], [37, 2, 1, "", "param_sets"], [37, 2, 1, "", "parameter_constraints"], [37, 2, 1, "", "parameters"], [37, 3, 1, "", "prepare_inputs"], [37, 3, 1, "", "prepare_outputs"], [37, 3, 1, "", "rename"], [37, 3, 1, "", "render"], [37, 2, 1, "", "return_units"], [37, 2, 1, "", "separable"], [37, 3, 1, "", "set_slice_args"], [37, 2, 1, "", "standard_broadcasting"], [37, 2, 1, "", "stds"], [37, 3, 1, "", "strip_units_from_tree"], [37, 3, 1, "", "sum_of_implicit_terms"], [37, 2, 1, "", "sync_constraints"], [37, 2, 1, "", "tied"], [37, 2, 1, "", "uses_quantity"], [37, 2, 1, "", "v_0"], [37, 3, 1, "", "with_units_from_data"], [37, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.ValleeSpiral": [[38, 2, 1, "", "bar_radius"], [38, 2, 1, "", "m"], [38, 2, 1, "", "p"], [38, 2, 1, "", "r_0"], [38, 2, 1, "", "r_sun"], [38, 3, 1, "", "radius"], [38, 2, 1, "", "spiralarms"], [38, 3, 1, "", "theta"], [38, 2, 1, "", "theta_0"], [38, 3, 1, "", "xy_position"]], "gammapy.astro.population.YusifovKucuk2004": [[39, 3, 1, "", "__call__"], [39, 2, 1, "", "a"], [39, 2, 1, "", "amplitude"], [39, 2, 1, "", "b"], [39, 2, 1, "", "bbox_with_units"], [39, 2, 1, "", "bounding_box"], [39, 2, 1, "", "bounds"], [39, 3, 1, "", "coerce_units"], [39, 2, 1, "", "col_fit_deriv"], [39, 3, 1, "", "copy"], [39, 2, 1, "", "cov_matrix"], [39, 3, 1, "", "deepcopy"], [39, 2, 1, "", "eqcons"], [39, 3, 1, "", "evaluate"], [39, 2, 1, "", "evolved"], [39, 2, 1, "", "fit_deriv"], [39, 2, 1, "", "fittable"], [39, 2, 1, "", "fixed"], [39, 3, 1, "", "get_bounding_box"], [39, 3, 1, "", "has_inverse"], [39, 2, 1, "", "has_user_bounding_box"], [39, 2, 1, "", "has_user_inverse"], [39, 2, 1, "", "ineqcons"], [39, 3, 1, "", "input_shape"], [39, 2, 1, "", "input_units"], [39, 2, 1, "", "input_units_allow_dimensionless"], [39, 2, 1, "", "input_units_equivalencies"], [39, 2, 1, "", "input_units_strict"], [39, 2, 1, "", "inputs"], [39, 2, 1, "", "inverse"], [39, 2, 1, "", "linear"], [39, 2, 1, "", "meta"], [39, 2, 1, "", "model_constraints"], [39, 2, 1, "", "model_set_axis"], [39, 2, 1, "", "n_inputs"], [39, 2, 1, "", "n_outputs"], [39, 2, 1, "", "n_submodels"], [39, 2, 1, "", "name"], [39, 3, 1, "", "output_units"], [39, 2, 1, "", "outputs"], [39, 2, 1, "", "param_names"], [39, 2, 1, "", "param_sets"], [39, 2, 1, "", "parameter_constraints"], [39, 2, 1, "", "parameters"], [39, 3, 1, "", "prepare_inputs"], [39, 3, 1, "", "prepare_outputs"], [39, 2, 1, "", "r_1"], [39, 3, 1, "", "rename"], [39, 3, 1, "", "render"], [39, 2, 1, "", "return_units"], [39, 2, 1, "", "separable"], [39, 3, 1, "", "set_slice_args"], [39, 2, 1, "", "standard_broadcasting"], [39, 2, 1, "", "stds"], [39, 3, 1, "", "strip_units_from_tree"], [39, 3, 1, "", "sum_of_implicit_terms"], [39, 2, 1, "", "sync_constraints"], [39, 2, 1, "", "tied"], [39, 2, 1, "", "uses_quantity"], [39, 3, 1, "", "with_units_from_data"], [39, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.YusifovKucuk2004B": [[40, 3, 1, "", "__call__"], [40, 2, 1, "", "a"], [40, 2, 1, "", "amplitude"], [40, 2, 1, "", "b"], [40, 2, 1, "", "bbox_with_units"], [40, 2, 1, "", "bounding_box"], [40, 2, 1, "", "bounds"], [40, 3, 1, "", "coerce_units"], [40, 2, 1, "", "col_fit_deriv"], [40, 3, 1, "", "copy"], [40, 2, 1, "", "cov_matrix"], [40, 3, 1, "", "deepcopy"], [40, 2, 1, "", "eqcons"], [40, 3, 1, "", "evaluate"], [40, 2, 1, "", "evolved"], [40, 2, 1, "", "fit_deriv"], [40, 2, 1, "", "fittable"], [40, 2, 1, "", "fixed"], [40, 3, 1, "", "get_bounding_box"], [40, 3, 1, "", "has_inverse"], [40, 2, 1, "", "has_user_bounding_box"], [40, 2, 1, "", "has_user_inverse"], [40, 2, 1, "", "ineqcons"], [40, 3, 1, "", "input_shape"], [40, 2, 1, "", "input_units"], [40, 2, 1, "", "input_units_allow_dimensionless"], [40, 2, 1, "", "input_units_equivalencies"], [40, 2, 1, "", "input_units_strict"], [40, 2, 1, "", "inputs"], [40, 2, 1, "", "inverse"], [40, 2, 1, "", "linear"], [40, 2, 1, "", "meta"], [40, 2, 1, "", "model_constraints"], [40, 2, 1, "", "model_set_axis"], [40, 2, 1, "", "n_inputs"], [40, 2, 1, "", "n_outputs"], [40, 2, 1, "", "n_submodels"], [40, 2, 1, "", "name"], [40, 3, 1, "", "output_units"], [40, 2, 1, "", "outputs"], [40, 2, 1, "", "param_names"], [40, 2, 1, "", "param_sets"], [40, 2, 1, "", "parameter_constraints"], [40, 2, 1, "", "parameters"], [40, 3, 1, "", "prepare_inputs"], [40, 3, 1, "", "prepare_outputs"], [40, 3, 1, "", "rename"], [40, 3, 1, "", "render"], [40, 2, 1, "", "return_units"], [40, 2, 1, "", "separable"], [40, 3, 1, "", "set_slice_args"], [40, 2, 1, "", "standard_broadcasting"], [40, 2, 1, "", "stds"], [40, 3, 1, "", "strip_units_from_tree"], [40, 3, 1, "", "sum_of_implicit_terms"], [40, 2, 1, "", "sync_constraints"], [40, 2, 1, "", "tied"], [40, 2, 1, "", "uses_quantity"], [40, 3, 1, "", "with_units_from_data"], [40, 3, 1, "", "without_units_for_data"]], "gammapy.astro.source": [[50, 1, 1, "", "PWN"], [51, 1, 1, "", "Pulsar"], [52, 1, 1, "", "SNR"], [53, 1, 1, "", "SNRTrueloveMcKee"], [54, 1, 1, "", "SimplePulsar"]], "gammapy.astro.source.PWN": [[50, 3, 1, "", "magnetic_field"], [50, 3, 1, "", "radius"]], "gammapy.astro.source.Pulsar": [[51, 3, 1, "", "energy_integrated"], [51, 3, 1, "", "luminosity_spindown"], [51, 3, 1, "", "magnetic_field"], [51, 3, 1, "", "period"], [51, 3, 1, "", "period_dot"], [51, 3, 1, "", "tau"]], "gammapy.astro.source.SNR": [[52, 3, 1, "", "luminosity_tev"], [52, 3, 1, "", "radius"], [52, 3, 1, "", "radius_inner"], [52, 2, 1, "", "sedov_taylor_begin"], [52, 2, 1, "", "sedov_taylor_end"]], "gammapy.astro.source.SNRTrueloveMcKee": [[53, 3, 1, "", "luminosity_tev"], [53, 3, 1, "", "radius"], [53, 3, 1, "", "radius_inner"], [53, 3, 1, "", "radius_reverse_shock"], [53, 2, 1, "", "sedov_taylor_begin"], [53, 2, 1, "", "sedov_taylor_end"]], "gammapy.astro.source.SimplePulsar": [[54, 2, 1, "", "luminosity_spindown"], [54, 2, 1, "", "magnetic_field"], [54, 2, 1, "", "tau"]], "gammapy.catalog": [[55, 5, 1, "", "CATALOG_REGISTRY"], [56, 1, 1, "", "SourceCatalog"], [57, 1, 1, "", "SourceCatalog1LHAASO"], [58, 1, 1, "", "SourceCatalog2FHL"], [59, 1, 1, "", "SourceCatalog2HWC"], [60, 1, 1, "", "SourceCatalog3FGL"], [61, 1, 1, "", "SourceCatalog3FHL"], [62, 1, 1, "", "SourceCatalog3HWC"], [63, 1, 1, "", "SourceCatalog4FGL"], [64, 1, 1, "", "SourceCatalogGammaCat"], [65, 1, 1, "", "SourceCatalogHGPS"], [66, 1, 1, "", "SourceCatalogLargeScaleHGPS"], [67, 1, 1, "", "SourceCatalogObject"], [68, 1, 1, "", "SourceCatalogObject1LHAASO"], [69, 1, 1, "", "SourceCatalogObject2FHL"], [70, 1, 1, "", "SourceCatalogObject2HWC"], [71, 1, 1, "", "SourceCatalogObject3FGL"], [72, 1, 1, "", "SourceCatalogObject3FHL"], [73, 1, 1, "", "SourceCatalogObject3HWC"], [74, 1, 1, "", "SourceCatalogObject4FGL"], [75, 1, 1, "", "SourceCatalogObjectGammaCat"], [76, 1, 1, "", "SourceCatalogObjectHGPS"], [77, 1, 1, "", "SourceCatalogObjectHGPSComponent"]], "gammapy.catalog.SourceCatalog": [[56, 3, 1, "", "description"], [56, 2, 1, "", "positions"], [56, 3, 1, "", "row_index"], [56, 3, 1, "", "source_name"], [56, 2, 1, "", "tag"], [56, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog1LHAASO": [[57, 2, 1, "", "description"], [57, 2, 1, "", "positions"], [57, 3, 1, "", "row_index"], [57, 3, 1, "", "source_name"], [57, 2, 1, "", "tag"], [57, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog2FHL": [[58, 2, 1, "", "description"], [58, 2, 1, "", "positions"], [58, 3, 1, "", "row_index"], [58, 3, 1, "", "source_name"], [58, 2, 1, "", "tag"], [58, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog2HWC": [[59, 2, 1, "", "description"], [59, 2, 1, "", "positions"], [59, 3, 1, "", "row_index"], [59, 3, 1, "", "source_name"], [59, 2, 1, "", "tag"], [59, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3FGL": [[60, 2, 1, "", "description"], [60, 2, 1, "", "positions"], [60, 3, 1, "", "row_index"], [60, 3, 1, "", "source_name"], [60, 2, 1, "", "tag"], [60, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3FHL": [[61, 2, 1, "", "description"], [61, 2, 1, "", "positions"], [61, 3, 1, "", "row_index"], [61, 3, 1, "", "source_name"], [61, 2, 1, "", "tag"], [61, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3HWC": [[62, 2, 1, "", "description"], [62, 2, 1, "", "positions"], [62, 3, 1, "", "row_index"], [62, 3, 1, "", "source_name"], [62, 2, 1, "", "tag"], [62, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog4FGL": [[63, 2, 1, "", "description"], [63, 2, 1, "", "positions"], [63, 3, 1, "", "row_index"], [63, 3, 1, "", "source_name"], [63, 2, 1, "", "tag"], [63, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogGammaCat": [[64, 2, 1, "", "description"], [64, 2, 1, "", "positions"], [64, 3, 1, "", "row_index"], [64, 3, 1, "", "source_name"], [64, 2, 1, "", "tag"], [64, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogHGPS": [[65, 2, 1, "", "description"], [65, 3, 1, "", "gaussian_component"], [65, 2, 1, "", "large_scale_component"], [65, 2, 1, "", "positions"], [65, 3, 1, "", "row_index"], [65, 3, 1, "", "source_name"], [65, 2, 1, "", "table_associations"], [65, 2, 1, "", "table_components"], [65, 2, 1, "", "table_identifications"], [65, 2, 1, "", "table_large_scale_component"], [65, 2, 1, "", "tag"], [65, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogLargeScaleHGPS": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "peak_brightness"], [66, 3, 1, "", "peak_brightness_error"], [66, 3, 1, "", "peak_latitude"], [66, 3, 1, "", "peak_latitude_error"], [66, 3, 1, "", "width"], [66, 3, 1, "", "width_error"]], "gammapy.catalog.SourceCatalogObject": [[67, 2, 1, "", "name"], [67, 2, 1, "", "position"], [67, 2, 1, "", "row_index"]], "gammapy.catalog.SourceCatalogObject1LHAASO": [[68, 2, 1, "", "name"], [68, 2, 1, "", "position"], [68, 2, 1, "", "row_index"], [68, 3, 1, "", "sky_model"], [68, 3, 1, "", "spatial_model"], [68, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject2FHL": [[69, 2, 1, "", "asso"], [69, 2, 1, "", "energy_range"], [69, 2, 1, "", "flux_points"], [69, 2, 1, "", "flux_points_meta"], [69, 2, 1, "", "flux_points_table"], [69, 3, 1, "", "info"], [69, 2, 1, "", "is_pointlike"], [69, 2, 1, "", "name"], [69, 2, 1, "", "position"], [69, 2, 1, "", "row_index"], [69, 3, 1, "", "sky_model"], [69, 3, 1, "", "spatial_model"], [69, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject2HWC": [[70, 3, 1, "", "info"], [70, 2, 1, "", "n_models"], [70, 2, 1, "", "name"], [70, 2, 1, "", "position"], [70, 2, 1, "", "row_index"], [70, 3, 1, "", "sky_model"], [70, 3, 1, "", "spatial_model"], [70, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3FGL": [[71, 2, 1, "", "asso"], [71, 2, 1, "", "energy_range"], [71, 2, 1, "", "flux_points"], [71, 2, 1, "", "flux_points_meta"], [71, 2, 1, "", "flux_points_table"], [71, 3, 1, "", "info"], [71, 2, 1, "", "is_pointlike"], [71, 3, 1, "", "lightcurve"], [71, 2, 1, "", "name"], [71, 2, 1, "", "position"], [71, 2, 1, "", "row_index"], [71, 3, 1, "", "sky_model"], [71, 3, 1, "", "spatial_model"], [71, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3FHL": [[72, 2, 1, "", "asso"], [72, 2, 1, "", "energy_range"], [72, 2, 1, "", "flux_points"], [72, 2, 1, "", "flux_points_meta"], [72, 2, 1, "", "flux_points_table"], [72, 3, 1, "", "info"], [72, 2, 1, "", "is_pointlike"], [72, 2, 1, "", "name"], [72, 2, 1, "", "position"], [72, 2, 1, "", "row_index"], [72, 3, 1, "", "sky_model"], [72, 3, 1, "", "spatial_model"], [72, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3HWC": [[73, 3, 1, "", "info"], [73, 2, 1, "", "is_pointlike"], [73, 2, 1, "", "n_models"], [73, 2, 1, "", "name"], [73, 2, 1, "", "position"], [73, 2, 1, "", "row_index"], [73, 3, 1, "", "sky_model"], [73, 3, 1, "", "spatial_model"], [73, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject4FGL": [[74, 2, 1, "", "asso"], [74, 2, 1, "", "flux_points"], [74, 2, 1, "", "flux_points_meta"], [74, 2, 1, "", "flux_points_table"], [74, 3, 1, "", "info"], [74, 2, 1, "", "is_pointlike"], [74, 3, 1, "", "lightcurve"], [74, 2, 1, "", "name"], [74, 2, 1, "", "position"], [74, 2, 1, "", "row_index"], [74, 3, 1, "", "sky_model"], [74, 3, 1, "", "spatial_model"], [74, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectGammaCat": [[75, 2, 1, "", "flux_points"], [75, 2, 1, "", "flux_points_table"], [75, 3, 1, "", "info"], [75, 2, 1, "", "name"], [75, 2, 1, "", "position"], [75, 2, 1, "", "row_index"], [75, 3, 1, "", "sky_model"], [75, 3, 1, "", "spatial_model"], [75, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectHGPS": [[76, 3, 1, "", "components_models"], [76, 2, 1, "", "energy_range"], [76, 2, 1, "", "flux_points"], [76, 2, 1, "", "flux_points_table"], [76, 3, 1, "", "info"], [76, 2, 1, "", "name"], [76, 2, 1, "", "position"], [76, 2, 1, "", "row_index"], [76, 3, 1, "", "sky_model"], [76, 3, 1, "", "spatial_model"], [76, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectHGPSComponent": [[77, 2, 1, "", "name"], [77, 2, 1, "", "position"], [77, 2, 1, "", "row_index"], [77, 3, 1, "", "spatial_model"]], "gammapy.data": [[78, 1, 1, "", "DataStore"], [79, 1, 1, "", "EventList"], [80, 1, 1, "", "EventListMetaData"], [81, 1, 1, "", "FixedPointingInfo"], [82, 1, 1, "", "GTI"], [83, 1, 1, "", "HDUIndexTable"], [84, 1, 1, "", "Observation"], [85, 1, 1, "", "ObservationFilter"], [86, 1, 1, "", "ObservationTable"], [87, 1, 1, "", "Observations"], [88, 1, 1, "", "ObservationsEventsSampler"], [89, 1, 1, "", "PointingInfo"], [90, 1, 1, "", "PointingMode"], [91, 4, 1, "", "get_irfs_features"], [92, 5, 1, "", "observatory_locations"]], "gammapy.data.DataStore": [[78, 2, 1, "", "DEFAULT_HDU_TABLE"], [78, 2, 1, "", "DEFAULT_OBS_TABLE"], [78, 3, 1, "", "check"], [78, 3, 1, "", "copy_obs"], [78, 3, 1, "", "from_dir"], [78, 3, 1, "", "from_events_files"], [78, 3, 1, "", "from_file"], [78, 3, 1, "", "get_observations"], [78, 3, 1, "", "info"], [78, 3, 1, "", "obs"], [78, 2, 1, "", "obs_ids"]], "gammapy.data.EventList": [[79, 2, 1, "", "altaz"], [79, 2, 1, "", "altaz_frame"], [79, 2, 1, "", "altaz_from_table"], [79, 3, 1, "", "check"], [79, 3, 1, "", "copy"], [79, 2, 1, "", "energy"], [79, 3, 1, "", "from_stack"], [79, 2, 1, "", "galactic"], [79, 2, 1, "", "galactic_median"], [79, 2, 1, "", "is_pointed_observation"], [79, 3, 1, "", "map_coord"], [79, 2, 1, "", "observation_dead_time_fraction"], [79, 2, 1, "", "observation_live_time_duration"], [79, 2, 1, "", "observation_time_duration"], [79, 2, 1, "", "observation_time_start"], [79, 2, 1, "", "observation_time_stop"], [79, 2, 1, "", "observatory_earth_location"], [79, 2, 1, "", "offset"], [79, 2, 1, "", "offset_from_median"], [79, 3, 1, "", "peek"], [79, 3, 1, "", "plot_energy"], [79, 3, 1, "", "plot_energy_offset"], [79, 3, 1, "", "plot_image"], [79, 3, 1, "", "plot_offset2_distribution"], [79, 3, 1, "", "plot_time"], [79, 2, 1, "", "pointing_radec"], [79, 2, 1, "", "radec"], [79, 3, 1, "", "read"], [79, 3, 1, "", "select_energy"], [79, 3, 1, "", "select_mask"], [79, 3, 1, "", "select_offset"], [79, 3, 1, "", "select_parameter"], [79, 3, 1, "", "select_rad_max"], [79, 3, 1, "", "select_region"], [79, 3, 1, "", "select_row_subset"], [79, 3, 1, "", "select_time"], [79, 3, 1, "", "stack"], [79, 2, 1, "", "time"], [79, 2, 1, "", "time_ref"], [79, 3, 1, "", "to_table_hdu"], [79, 3, 1, "", "write"]], "gammapy.data.EventListMetaData": [[80, 3, 1, "", "construct"], [80, 3, 1, "", "copy"], [80, 3, 1, "", "dict"], [80, 3, 1, "", "from_header"], [80, 3, 1, "", "from_orm"], [80, 3, 1, "", "json"], [80, 2, 1, "", "model_computed_fields"], [80, 2, 1, "", "model_config"], [80, 3, 1, "", "model_construct"], [80, 3, 1, "", "model_copy"], [80, 3, 1, "", "model_dump"], [80, 3, 1, "", "model_dump_json"], [80, 2, 1, "", "model_extra"], [80, 2, 1, "", "model_fields"], [80, 2, 1, "", "model_fields_set"], [80, 3, 1, "", "model_json_schema"], [80, 3, 1, "", "model_parametrized_name"], [80, 3, 1, "", "model_post_init"], [80, 3, 1, "", "model_rebuild"], [80, 3, 1, "", "model_validate"], [80, 3, 1, "", "model_validate_json"], [80, 3, 1, "", "model_validate_strings"], [80, 3, 1, "", "parse_file"], [80, 3, 1, "", "parse_obj"], [80, 3, 1, "", "parse_raw"], [80, 3, 1, "", "schema"], [80, 3, 1, "", "schema_json"], [80, 2, 1, "", "tag"], [80, 3, 1, "", "to_header"], [80, 3, 1, "", "to_yaml"], [80, 3, 1, "", "update_forward_refs"], [80, 3, 1, "", "validate"]], "gammapy.data.FixedPointingInfo": [[81, 2, 1, "", "fixed_altaz"], [81, 2, 1, "", "fixed_icrs"], [81, 3, 1, "", "from_fits_header"], [81, 3, 1, "", "get_altaz"], [81, 3, 1, "", "get_icrs"], [81, 2, 1, "", "mode"], [81, 3, 1, "", "read"], [81, 3, 1, "", "to_fits_header"]], "gammapy.data.GTI": [[82, 3, 1, "", "copy"], [82, 3, 1, "", "create"], [82, 3, 1, "", "delete_interval"], [82, 3, 1, "", "from_stack"], [82, 3, 1, "", "from_table_hdu"], [82, 3, 1, "", "from_time_intervals"], [82, 3, 1, "", "group_table"], [82, 2, 1, "", "met_start"], [82, 2, 1, "", "met_stop"], [82, 3, 1, "", "read"], [82, 3, 1, "", "select_time"], [82, 3, 1, "", "stack"], [82, 2, 1, "", "time_delta"], [82, 2, 1, "", "time_intervals"], [82, 2, 1, "", "time_ref"], [82, 2, 1, "", "time_start"], [82, 2, 1, "", "time_stop"], [82, 2, 1, "", "time_sum"], [82, 3, 1, "", "to_table_hdu"], [82, 3, 1, "", "union"], [82, 3, 1, "", "write"]], "gammapy.data.HDUIndexTable": [[83, 2, 1, "", "ColumnClass"], [83, 2, 1, "", "VALID_HDU_CLASS"], [83, 2, 1, "", "VALID_HDU_TYPE"], [83, 3, 1, "", "add_column"], [83, 3, 1, "", "add_columns"], [83, 3, 1, "", "add_index"], [83, 3, 1, "", "add_row"], [83, 3, 1, "", "argsort"], [83, 3, 1, "", "as_array"], [83, 2, 1, "", "base_dir"], [83, 2, 1, "", "colnames"], [83, 3, 1, "", "convert_bytestring_to_unicode"], [83, 3, 1, "", "convert_unicode_to_bytestring"], [83, 3, 1, "", "copy"], [83, 2, 1, "", "dtype"], [83, 3, 1, "", "field"], [83, 3, 1, "", "filled"], [83, 3, 1, "", "from_pandas"], [83, 3, 1, "", "group_by"], [83, 2, 1, "", "groups"], [83, 2, 1, "", "has_masked_columns"], [83, 2, 1, "", "has_masked_values"], [83, 2, 1, "", "has_mixin_columns"], [83, 2, 1, "", "hdu_class_unique"], [83, 3, 1, "", "hdu_location"], [83, 2, 1, "", "hdu_type_unique"], [83, 2, 1, "", "iloc"], [83, 3, 1, "", "index_column"], [83, 3, 1, "", "index_mode"], [83, 2, 1, "", "indices"], [83, 2, 1, "", "info"], [83, 3, 1, "", "insert_row"], [83, 3, 1, "", "items"], [83, 3, 1, "", "itercols"], [83, 3, 1, "", "iterrows"], [83, 3, 1, "", "keep_columns"], [83, 3, 1, "", "keys"], [83, 2, 1, "", "loc"], [83, 2, 1, "", "loc_indices"], [83, 3, 1, "", "location_info"], [83, 2, 1, "", "mask"], [83, 2, 1, "", "masked"], [83, 2, 1, "", "meta"], [83, 3, 1, "", "more"], [83, 2, 1, "", "obs_id_unique"], [83, 3, 1, "", "pformat"], [83, 3, 1, "", "pformat_all"], [83, 3, 1, "", "pprint"], [83, 3, 1, "", "pprint_all"], [83, 2, 1, "", "pprint_exclude_names"], [83, 2, 1, "", "pprint_include_names"], [83, 3, 1, "", "read"], [83, 3, 1, "", "remove_column"], [83, 3, 1, "", "remove_columns"], [83, 3, 1, "", "remove_indices"], [83, 3, 1, "", "remove_row"], [83, 3, 1, "", "remove_rows"], [83, 3, 1, "", "rename_column"], [83, 3, 1, "", "rename_columns"], [83, 3, 1, "", "replace_column"], [83, 3, 1, "", "reverse"], [83, 3, 1, "", "round"], [83, 3, 1, "", "row_idx"], [83, 3, 1, "", "show_in_browser"], [83, 3, 1, "", "show_in_notebook"], [83, 3, 1, "", "sort"], [83, 3, 1, "", "summary"], [83, 3, 1, "", "to_pandas"], [83, 3, 1, "", "update"], [83, 3, 1, "", "values"], [83, 3, 1, "", "values_equal"], [83, 2, 1, "", "write"]], "gammapy.data.Observation": [[84, 2, 1, "", "aeff"], [84, 2, 1, "", "available_hdus"], [84, 2, 1, "", "available_irfs"], [84, 2, 1, "", "bkg"], [84, 3, 1, "", "check"], [84, 3, 1, "", "copy"], [84, 3, 1, "", "create"], [84, 2, 1, "", "edisp"], [84, 2, 1, "", "events"], [84, 3, 1, "", "get_pointing_altaz"], [84, 3, 1, "", "get_pointing_icrs"], [84, 2, 1, "", "gti"], [84, 2, 1, "", "meta"], [84, 2, 1, "", "muoneff"], [84, 2, 1, "", "obs_info"], [84, 2, 1, "", "observation_dead_time_fraction"], [84, 2, 1, "", "observation_live_time_duration"], [84, 2, 1, "", "observation_time_duration"], [84, 2, 1, "", "observatory_earth_location"], [84, 3, 1, "", "peek"], [84, 2, 1, "", "pointing"], [84, 2, 1, "", "psf"], [84, 2, 1, "", "rad_max"], [84, 3, 1, "", "read"], [84, 3, 1, "", "select_time"], [84, 2, 1, "", "target_radec"], [84, 2, 1, "", "tmid"], [84, 2, 1, "", "tstart"], [84, 2, 1, "", "tstop"], [84, 3, 1, "", "write"]], "gammapy.data.ObservationFilter": [[85, 2, 1, "", "EVENT_FILTER_TYPES"], [85, 3, 1, "", "copy"], [85, 3, 1, "", "filter_events"], [85, 3, 1, "", "filter_gti"], [85, 2, 1, "", "livetime_fraction"]], "gammapy.data.ObservationTable": [[86, 2, 1, "", "ColumnClass"], [86, 3, 1, "", "add_column"], [86, 3, 1, "", "add_columns"], [86, 3, 1, "", "add_index"], [86, 3, 1, "", "add_row"], [86, 3, 1, "", "argsort"], [86, 3, 1, "", "as_array"], [86, 2, 1, "", "colnames"], [86, 3, 1, "", "convert_bytestring_to_unicode"], [86, 3, 1, "", "convert_unicode_to_bytestring"], [86, 3, 1, "", "copy"], [86, 2, 1, "", "dtype"], [86, 3, 1, "", "field"], [86, 3, 1, "", "filled"], [86, 3, 1, "", "from_pandas"], [86, 3, 1, "", "group_by"], [86, 2, 1, "", "groups"], [86, 2, 1, "", "has_masked_columns"], [86, 2, 1, "", "has_masked_values"], [86, 2, 1, "", "has_mixin_columns"], [86, 2, 1, "", "iloc"], [86, 3, 1, "", "index_column"], [86, 3, 1, "", "index_mode"], [86, 2, 1, "", "indices"], [86, 2, 1, "", "info"], [86, 3, 1, "", "insert_row"], [86, 3, 1, "", "items"], [86, 3, 1, "", "itercols"], [86, 3, 1, "", "iterrows"], [86, 3, 1, "", "keep_columns"], [86, 3, 1, "", "keys"], [86, 2, 1, "", "loc"], [86, 2, 1, "", "loc_indices"], [86, 2, 1, "", "mask"], [86, 2, 1, "", "masked"], [86, 2, 1, "", "meta"], [86, 3, 1, "", "more"], [86, 3, 1, "", "pformat"], [86, 3, 1, "", "pformat_all"], [86, 2, 1, "", "pointing_galactic"], [86, 2, 1, "", "pointing_radec"], [86, 3, 1, "", "pprint"], [86, 3, 1, "", "pprint_all"], [86, 2, 1, "", "pprint_exclude_names"], [86, 2, 1, "", "pprint_include_names"], [86, 3, 1, "", "read"], [86, 3, 1, "", "remove_column"], [86, 3, 1, "", "remove_columns"], [86, 3, 1, "", "remove_indices"], [86, 3, 1, "", "remove_row"], [86, 3, 1, "", "remove_rows"], [86, 3, 1, "", "rename_column"], [86, 3, 1, "", "rename_columns"], [86, 3, 1, "", "replace_column"], [86, 3, 1, "", "reverse"], [86, 3, 1, "", "round"], [86, 3, 1, "", "select_obs_id"], [86, 3, 1, "", "select_observations"], [86, 3, 1, "", "select_range"], [86, 3, 1, "", "select_sky_circle"], [86, 3, 1, "", "select_time_range"], [86, 3, 1, "", "show_in_browser"], [86, 3, 1, "", "show_in_notebook"], [86, 3, 1, "", "sort"], [86, 3, 1, "", "summary"], [86, 2, 1, "", "time_ref"], [86, 2, 1, "", "time_start"], [86, 2, 1, "", "time_stop"], [86, 3, 1, "", "to_pandas"], [86, 3, 1, "", "update"], [86, 3, 1, "", "values"], [86, 3, 1, "", "values_equal"], [86, 2, 1, "", "write"]], "gammapy.data.Observations": [[87, 3, 1, "", "append"], [87, 3, 1, "", "clear"], [87, 3, 1, "", "count"], [87, 3, 1, "", "extend"], [87, 3, 1, "", "from_stack"], [87, 3, 1, "", "group_by_label"], [87, 2, 1, "", "ids"], [87, 3, 1, "", "in_memory_generator"], [87, 3, 1, "", "index"], [87, 3, 1, "", "insert"], [87, 3, 1, "", "pop"], [87, 3, 1, "", "remove"], [87, 3, 1, "", "reverse"], [87, 3, 1, "", "select_time"]], "gammapy.data.ObservationsEventsSampler": [[88, 2, 1, "", "n_jobs"], [88, 2, 1, "", "parallel_backend"], [88, 3, 1, "", "run"], [88, 3, 1, "", "simulate_observation"]], "gammapy.data.PointingInfo": [[89, 2, 1, "", "altaz"], [89, 2, 1, "", "altaz_frame"], [89, 2, 1, "", "altaz_from_table"], [89, 3, 1, "", "altaz_interpolate"], [89, 2, 1, "", "duration"], [89, 3, 1, "", "get_altaz"], [89, 3, 1, "", "get_icrs"], [89, 2, 1, "", "location"], [89, 2, 1, "", "radec"], [89, 3, 1, "", "read"], [89, 2, 1, "", "time"], [89, 2, 1, "", "time_ref"]], "gammapy.data.PointingMode": [[90, 2, 1, "", "DRIFT"], [90, 2, 1, "", "POINTING"]], "gammapy.datasets": [[93, 5, 1, "", "DATASET_REGISTRY"], [94, 1, 1, "", "Dataset"], [95, 1, 1, "", "Datasets"], [96, 1, 1, "", "FluxPointsDataset"], [97, 1, 1, "", "MapDataset"], [98, 1, 1, "", "MapDatasetEventSampler"], [99, 1, 1, "", "MapDatasetMetaData"], [100, 1, 1, "", "MapDatasetOnOff"], [101, 1, 1, "", "OGIPDatasetReader"], [102, 1, 1, "", "OGIPDatasetWriter"], [103, 1, 1, "", "ObservationEventSampler"], [104, 1, 1, "", "SpectrumDataset"], [105, 1, 1, "", "SpectrumDatasetOnOff"], [106, 4, 1, "", "apply_edisp"], [107, 4, 1, "", "create_map_dataset_from_observation"], [108, 4, 1, "", "create_map_dataset_geoms"], [109, 4, 1, "", "split_dataset"], [4, 0, 0, "-", "utils"]], "gammapy.datasets.Dataset": [[94, 3, 1, "", "copy"], [94, 2, 1, "", "mask"], [94, 2, 1, "", "name"], [94, 3, 1, "", "stat_array"], [94, 3, 1, "", "stat_sum"], [94, 2, 1, "", "tag"], [94, 3, 1, "", "to_dict"]], "gammapy.datasets.Datasets": [[95, 3, 1, "", "append"], [95, 3, 1, "", "clear"], [95, 2, 1, "", "contributes_to_stat"], [95, 3, 1, "", "copy"], [95, 3, 1, "", "count"], [95, 2, 1, "", "energy_axes_are_aligned"], [95, 2, 1, "", "energy_ranges"], [95, 3, 1, "", "extend"], [95, 2, 1, "", "gti"], [95, 3, 1, "", "index"], [95, 3, 1, "", "info_table"], [95, 3, 1, "", "insert"], [95, 2, 1, "", "is_all_same_energy_shape"], [95, 2, 1, "", "is_all_same_shape"], [95, 2, 1, "", "is_all_same_type"], [95, 2, 1, "", "meta_table"], [95, 2, 1, "", "models"], [95, 2, 1, "", "names"], [95, 2, 1, "", "parameters"], [95, 3, 1, "", "pop"], [95, 3, 1, "", "read"], [95, 3, 1, "", "remove"], [95, 3, 1, "", "reverse"], [95, 3, 1, "", "select_time"], [95, 3, 1, "", "slice_by_energy"], [95, 3, 1, "", "stack_reduce"], [95, 3, 1, "", "stat_sum"], [95, 3, 1, "", "to_spectrum_datasets"], [95, 3, 1, "", "write"]], "gammapy.datasets.FluxPointsDataset": [[96, 3, 1, "", "copy"], [96, 3, 1, "", "data_shape"], [96, 3, 1, "", "flux_pred"], [96, 3, 1, "", "from_dict"], [96, 2, 1, "", "gti"], [96, 2, 1, "", "mask"], [96, 2, 1, "", "models"], [96, 2, 1, "", "name"], [96, 3, 1, "", "plot_fit"], [96, 3, 1, "", "plot_residuals"], [96, 3, 1, "", "plot_spectrum"], [96, 3, 1, "", "read"], [96, 3, 1, "", "residuals"], [96, 3, 1, "", "stat_array"], [96, 3, 1, "", "stat_sum"], [96, 2, 1, "", "stat_type"], [96, 2, 1, "", "tag"], [96, 3, 1, "", "to_dict"], [96, 3, 1, "", "write"]], "gammapy.datasets.MapDataset": [[97, 2, 1, "", "background"], [97, 2, 1, "", "background_model"], [97, 3, 1, "", "copy"], [97, 2, 1, "", "counts"], [97, 3, 1, "", "create"], [97, 3, 1, "", "cutout"], [97, 2, 1, "", "data_shape"], [97, 3, 1, "", "downsample"], [97, 2, 1, "", "edisp"], [97, 2, 1, "", "energy_range"], [97, 2, 1, "", "energy_range_fit"], [97, 2, 1, "", "energy_range_safe"], [97, 2, 1, "", "energy_range_total"], [97, 2, 1, "", "evaluators"], [97, 2, 1, "", "excess"], [97, 2, 1, "", "exposure"], [97, 3, 1, "", "fake"], [97, 3, 1, "", "from_dict"], [97, 3, 1, "", "from_geoms"], [97, 3, 1, "", "from_hdulist"], [97, 2, 1, "", "geoms"], [97, 2, 1, "", "gti"], [97, 3, 1, "", "info_dict"], [97, 2, 1, "", "mask"], [97, 2, 1, "", "mask_fit"], [97, 2, 1, "", "mask_fit_image"], [97, 2, 1, "", "mask_image"], [97, 2, 1, "", "mask_safe"], [97, 2, 1, "", "mask_safe_edisp"], [97, 2, 1, "", "mask_safe_image"], [97, 2, 1, "", "mask_safe_psf"], [97, 2, 1, "", "meta"], [97, 2, 1, "", "meta_table"], [97, 2, 1, "", "models"], [97, 2, 1, "", "name"], [97, 3, 1, "", "npred"], [97, 3, 1, "", "npred_background"], [97, 3, 1, "", "npred_signal"], [97, 3, 1, "", "pad"], [97, 3, 1, "", "peek"], [97, 3, 1, "", "plot_residuals"], [97, 3, 1, "", "plot_residuals_spatial"], [97, 3, 1, "", "plot_residuals_spectral"], [97, 2, 1, "", "psf"], [97, 3, 1, "", "read"], [97, 3, 1, "", "resample_energy_axis"], [97, 3, 1, "", "reset_data_cache"], [97, 3, 1, "", "residuals"], [97, 3, 1, "", "slice_by_energy"], [97, 3, 1, "", "slice_by_idx"], [97, 3, 1, "", "stack"], [97, 3, 1, "", "stat_array"], [97, 3, 1, "", "stat_sum"], [97, 2, 1, "", "stat_type"], [97, 2, 1, "", "tag"], [97, 3, 1, "", "to_dict"], [97, 3, 1, "", "to_hdulist"], [97, 3, 1, "", "to_image"], [97, 3, 1, "", "to_masked"], [97, 3, 1, "", "to_region_map_dataset"], [97, 3, 1, "", "to_spectrum_dataset"], [97, 3, 1, "", "write"]], "gammapy.datasets.MapDatasetEventSampler": [[98, 3, 1, "", "event_det_coords"], [98, 3, 1, "", "event_list_meta"], [98, 3, 1, "", "run"], [98, 3, 1, "", "sample_background"], [98, 3, 1, "", "sample_edisp"], [98, 3, 1, "", "sample_psf"], [98, 3, 1, "", "sample_sources"]], "gammapy.datasets.MapDatasetMetaData": [[99, 3, 1, "", "construct"], [99, 3, 1, "", "copy"], [99, 3, 1, "", "dict"], [99, 3, 1, "", "from_header"], [99, 3, 1, "", "from_orm"], [99, 3, 1, "", "json"], [99, 2, 1, "", "model_computed_fields"], [99, 2, 1, "", "model_config"], [99, 3, 1, "", "model_construct"], [99, 3, 1, "", "model_copy"], [99, 3, 1, "", "model_dump"], [99, 3, 1, "", "model_dump_json"], [99, 2, 1, "", "model_extra"], [99, 2, 1, "", "model_fields"], [99, 2, 1, "", "model_fields_set"], [99, 3, 1, "", "model_json_schema"], [99, 3, 1, "", "model_parametrized_name"], [99, 3, 1, "", "model_post_init"], [99, 3, 1, "", "model_rebuild"], [99, 3, 1, "", "model_validate"], [99, 3, 1, "", "model_validate_json"], [99, 3, 1, "", "model_validate_strings"], [99, 3, 1, "", "parse_file"], [99, 3, 1, "", "parse_obj"], [99, 3, 1, "", "parse_raw"], [99, 3, 1, "", "schema"], [99, 3, 1, "", "schema_json"], [99, 3, 1, "", "stack"], [99, 2, 1, "", "tag"], [99, 3, 1, "", "to_header"], [99, 3, 1, "", "to_yaml"], [99, 3, 1, "", "update_forward_refs"], [99, 3, 1, "", "validate"]], "gammapy.datasets.MapDatasetOnOff": [[100, 2, 1, "", "alpha"], [100, 2, 1, "", "background"], [100, 2, 1, "", "background_model"], [100, 3, 1, "", "copy"], [100, 2, 1, "", "counts"], [100, 3, 1, "", "create"], [100, 3, 1, "", "cutout"], [100, 2, 1, "", "data_shape"], [100, 3, 1, "", "downsample"], [100, 2, 1, "", "edisp"], [100, 2, 1, "", "energy_range"], [100, 2, 1, "", "energy_range_fit"], [100, 2, 1, "", "energy_range_safe"], [100, 2, 1, "", "energy_range_total"], [100, 2, 1, "", "evaluators"], [100, 2, 1, "", "excess"], [100, 2, 1, "", "exposure"], [100, 3, 1, "", "fake"], [100, 3, 1, "", "from_dict"], [100, 3, 1, "", "from_geoms"], [100, 3, 1, "", "from_hdulist"], [100, 3, 1, "", "from_map_dataset"], [100, 2, 1, "", "geoms"], [100, 2, 1, "", "gti"], [100, 3, 1, "", "info_dict"], [100, 2, 1, "", "mask"], [100, 2, 1, "", "mask_fit"], [100, 2, 1, "", "mask_fit_image"], [100, 2, 1, "", "mask_image"], [100, 2, 1, "", "mask_safe"], [100, 2, 1, "", "mask_safe_edisp"], [100, 2, 1, "", "mask_safe_image"], [100, 2, 1, "", "mask_safe_psf"], [100, 2, 1, "", "meta"], [100, 2, 1, "", "meta_table"], [100, 2, 1, "", "models"], [100, 2, 1, "", "name"], [100, 3, 1, "", "npred"], [100, 3, 1, "", "npred_background"], [100, 3, 1, "", "npred_off"], [100, 3, 1, "", "npred_signal"], [100, 3, 1, "", "pad"], [100, 3, 1, "", "peek"], [100, 3, 1, "", "plot_residuals"], [100, 3, 1, "", "plot_residuals_spatial"], [100, 3, 1, "", "plot_residuals_spectral"], [100, 2, 1, "", "psf"], [100, 3, 1, "", "read"], [100, 3, 1, "", "resample_energy_axis"], [100, 3, 1, "", "reset_data_cache"], [100, 3, 1, "", "residuals"], [100, 3, 1, "", "slice_by_energy"], [100, 3, 1, "", "slice_by_idx"], [100, 3, 1, "", "stack"], [100, 3, 1, "", "stat_array"], [100, 3, 1, "", "stat_sum"], [100, 2, 1, "", "stat_type"], [100, 2, 1, "", "tag"], [100, 3, 1, "", "to_dict"], [100, 3, 1, "", "to_hdulist"], [100, 3, 1, "", "to_image"], [100, 3, 1, "", "to_map_dataset"], [100, 3, 1, "", "to_masked"], [100, 3, 1, "", "to_region_map_dataset"], [100, 3, 1, "", "to_spectrum_dataset"], [100, 3, 1, "", "write"]], "gammapy.datasets.OGIPDatasetReader": [[101, 3, 1, "", "get_filenames"], [101, 3, 1, "", "get_valid_path"], [101, 3, 1, "", "read"], [101, 3, 1, "", "read_arf"], [101, 3, 1, "", "read_bkg"], [101, 3, 1, "", "read_pha"], [101, 3, 1, "", "read_rmf"], [101, 2, 1, "", "tag"]], "gammapy.datasets.OGIPDatasetWriter": [[102, 3, 1, "", "get_filenames"], [102, 3, 1, "", "get_ogip_meta"], [102, 2, 1, "", "tag"], [102, 3, 1, "", "to_counts_hdulist"], [102, 3, 1, "", "write"], [102, 3, 1, "", "write_arf"], [102, 3, 1, "", "write_bkg"], [102, 3, 1, "", "write_pha"], [102, 3, 1, "", "write_rmf"]], "gammapy.datasets.ObservationEventSampler": [[103, 3, 1, "", "event_det_coords"], [103, 3, 1, "", "event_list_meta"], [103, 3, 1, "", "run"], [103, 3, 1, "", "sample_background"], [103, 3, 1, "", "sample_edisp"], [103, 3, 1, "", "sample_psf"], [103, 3, 1, "", "sample_sources"]], "gammapy.datasets.SpectrumDataset": [[104, 2, 1, "", "background"], [104, 2, 1, "", "background_model"], [104, 3, 1, "", "copy"], [104, 2, 1, "", "counts"], [104, 3, 1, "", "create"], [104, 3, 1, "", "cutout"], [104, 2, 1, "", "data_shape"], [104, 3, 1, "", "downsample"], [104, 2, 1, "", "edisp"], [104, 2, 1, "", "energy_range"], [104, 2, 1, "", "energy_range_fit"], [104, 2, 1, "", "energy_range_safe"], [104, 2, 1, "", "energy_range_total"], [104, 2, 1, "", "evaluators"], [104, 2, 1, "", "excess"], [104, 2, 1, "", "exposure"], [104, 3, 1, "", "fake"], [104, 3, 1, "", "from_dict"], [104, 3, 1, "", "from_geoms"], [104, 3, 1, "", "from_hdulist"], [104, 2, 1, "", "geoms"], [104, 2, 1, "", "gti"], [104, 3, 1, "", "info_dict"], [104, 2, 1, "", "mask"], [104, 2, 1, "", "mask_fit"], [104, 2, 1, "", "mask_fit_image"], [104, 2, 1, "", "mask_image"], [104, 2, 1, "", "mask_safe"], [104, 2, 1, "", "mask_safe_edisp"], [104, 2, 1, "", "mask_safe_image"], [104, 2, 1, "", "mask_safe_psf"], [104, 2, 1, "", "meta"], [104, 2, 1, "", "meta_table"], [104, 2, 1, "", "models"], [104, 2, 1, "", "name"], [104, 3, 1, "", "npred"], [104, 3, 1, "", "npred_background"], [104, 3, 1, "", "npred_signal"], [104, 3, 1, "", "pad"], [104, 3, 1, "", "peek"], [104, 3, 1, "", "plot_counts"], [104, 3, 1, "", "plot_excess"], [104, 3, 1, "", "plot_fit"], [104, 3, 1, "", "plot_masks"], [104, 3, 1, "", "plot_residuals"], [104, 3, 1, "", "plot_residuals_spatial"], [104, 3, 1, "", "plot_residuals_spectral"], [104, 2, 1, "", "psf"], [104, 3, 1, "", "read"], [104, 3, 1, "", "resample_energy_axis"], [104, 3, 1, "", "reset_data_cache"], [104, 3, 1, "", "residuals"], [104, 3, 1, "", "slice_by_energy"], [104, 3, 1, "", "slice_by_idx"], [104, 3, 1, "", "stack"], [104, 3, 1, "", "stat_array"], [104, 3, 1, "", "stat_sum"], [104, 2, 1, "", "stat_type"], [104, 2, 1, "", "tag"], [104, 3, 1, "", "to_dict"], [104, 3, 1, "", "to_hdulist"], [104, 3, 1, "", "to_image"], [104, 3, 1, "", "to_masked"], [104, 3, 1, "", "to_region_map_dataset"], [104, 3, 1, "", "to_spectrum_dataset"], [104, 3, 1, "", "write"]], "gammapy.datasets.SpectrumDatasetOnOff": [[105, 2, 1, "", "alpha"], [105, 2, 1, "", "background"], [105, 2, 1, "", "background_model"], [105, 3, 1, "", "copy"], [105, 2, 1, "", "counts"], [105, 3, 1, "", "create"], [105, 3, 1, "", "cutout"], [105, 2, 1, "", "data_shape"], [105, 3, 1, "", "downsample"], [105, 2, 1, "", "edisp"], [105, 2, 1, "", "energy_range"], [105, 2, 1, "", "energy_range_fit"], [105, 2, 1, "", "energy_range_safe"], [105, 2, 1, "", "energy_range_total"], [105, 2, 1, "", "evaluators"], [105, 2, 1, "", "excess"], [105, 2, 1, "", "exposure"], [105, 3, 1, "", "fake"], [105, 3, 1, "", "from_dict"], [105, 3, 1, "", "from_geoms"], [105, 3, 1, "", "from_hdulist"], [105, 3, 1, "", "from_map_dataset"], [105, 3, 1, "", "from_spectrum_dataset"], [105, 2, 1, "", "geoms"], [105, 2, 1, "", "gti"], [105, 3, 1, "", "info_dict"], [105, 2, 1, "", "mask"], [105, 2, 1, "", "mask_fit"], [105, 2, 1, "", "mask_fit_image"], [105, 2, 1, "", "mask_image"], [105, 2, 1, "", "mask_safe"], [105, 2, 1, "", "mask_safe_edisp"], [105, 2, 1, "", "mask_safe_image"], [105, 2, 1, "", "mask_safe_psf"], [105, 2, 1, "", "meta"], [105, 2, 1, "", "meta_table"], [105, 2, 1, "", "models"], [105, 2, 1, "", "name"], [105, 3, 1, "", "npred"], [105, 3, 1, "", "npred_background"], [105, 3, 1, "", "npred_off"], [105, 3, 1, "", "npred_signal"], [105, 3, 1, "", "pad"], [105, 3, 1, "", "peek"], [105, 3, 1, "", "plot_counts"], [105, 3, 1, "", "plot_excess"], [105, 3, 1, "", "plot_fit"], [105, 3, 1, "", "plot_masks"], [105, 3, 1, "", "plot_residuals"], [105, 3, 1, "", "plot_residuals_spatial"], [105, 3, 1, "", "plot_residuals_spectral"], [105, 2, 1, "", "psf"], [105, 3, 1, "", "read"], [105, 3, 1, "", "resample_energy_axis"], [105, 3, 1, "", "reset_data_cache"], [105, 3, 1, "", "residuals"], [105, 3, 1, "", "slice_by_energy"], [105, 3, 1, "", "slice_by_idx"], [105, 3, 1, "", "stack"], [105, 3, 1, "", "stat_array"], [105, 3, 1, "", "stat_sum"], [105, 2, 1, "", "stat_type"], [105, 2, 1, "", "tag"], [105, 3, 1, "", "to_dict"], [105, 3, 1, "", "to_hdulist"], [105, 3, 1, "", "to_image"], [105, 3, 1, "", "to_map_dataset"], [105, 3, 1, "", "to_masked"], [105, 3, 1, "", "to_region_map_dataset"], [105, 3, 1, "", "to_spectrum_dataset"], [105, 3, 1, "", "write"]], "gammapy.datasets.utils": [[110, 4, 1, "", "apply_edisp"], [111, 4, 1, "", "split_dataset"]], "gammapy.estimators": [[112, 1, 1, "", "ASmoothMapEstimator"], [113, 5, 1, "", "ESTIMATOR_REGISTRY"], [114, 1, 1, "", "EnergyDependentMorphologyEstimator"], [115, 1, 1, "", "Estimator"], [116, 1, 1, "", "ExcessMapEstimator"], [117, 1, 1, "", "FluxMaps"], [118, 1, 1, "", "FluxMetaData"], [119, 1, 1, "", "FluxPoints"], [120, 1, 1, "", "FluxPointsEstimator"], [121, 1, 1, "", "FluxProfileEstimator"], [122, 1, 1, "", "ImageProfile"], [123, 1, 1, "", "ImageProfileEstimator"], [124, 1, 1, "", "LightCurveEstimator"], [125, 1, 1, "", "ParameterEstimator"], [126, 1, 1, "", "SensitivityEstimator"], [127, 1, 1, "", "TSMapEstimator"], [5, 0, 0, "-", "utils"]], "gammapy.estimators.ASmoothMapEstimator": [[112, 2, 1, "", "config_parameters"], [112, 3, 1, "", "copy"], [112, 3, 1, "", "estimate_maps"], [112, 3, 1, "", "get_kernels"], [112, 3, 1, "", "get_scales"], [112, 3, 1, "", "run"], [112, 3, 1, "", "selection_all"], [112, 2, 1, "", "selection_optional"], [112, 2, 1, "", "tag"]], "gammapy.estimators.EnergyDependentMorphologyEstimator": [[114, 2, 1, "", "config_parameters"], [114, 3, 1, "", "copy"], [114, 3, 1, "", "estimate_energy_dependence"], [114, 3, 1, "", "run"], [114, 2, 1, "", "selection_optional"], [114, 2, 1, "", "tag"]], "gammapy.estimators.Estimator": [[115, 2, 1, "", "config_parameters"], [115, 3, 1, "", "copy"], [115, 3, 1, "", "run"], [115, 2, 1, "", "selection_optional"], [115, 2, 1, "", "tag"]], "gammapy.estimators.ExcessMapEstimator": [[116, 2, 1, "", "config_parameters"], [116, 3, 1, "", "copy"], [116, 2, 1, "", "correlation_radius"], [116, 3, 1, "", "estimate_excess_map"], [116, 3, 1, "", "estimate_exposure_reco_energy"], [116, 3, 1, "", "estimate_kernel"], [116, 3, 1, "", "estimate_mask_default"], [116, 3, 1, "", "run"], [116, 2, 1, "", "selection_optional"], [116, 2, 1, "", "tag"]], "gammapy.estimators.FluxMaps": [[117, 3, 1, "", "all_quantities"], [117, 2, 1, "", "available_quantities"], [117, 2, 1, "", "counts"], [117, 2, 1, "", "dnde"], [117, 2, 1, "", "dnde_err"], [117, 2, 1, "", "dnde_errn"], [117, 2, 1, "", "dnde_errp"], [117, 2, 1, "", "dnde_ref"], [117, 2, 1, "", "dnde_ul"], [117, 2, 1, "", "e2dnde"], [117, 2, 1, "", "e2dnde_err"], [117, 2, 1, "", "e2dnde_errn"], [117, 2, 1, "", "e2dnde_errp"], [117, 2, 1, "", "e2dnde_ref"], [117, 2, 1, "", "e2dnde_ul"], [117, 2, 1, "", "eflux"], [117, 2, 1, "", "eflux_err"], [117, 2, 1, "", "eflux_errn"], [117, 2, 1, "", "eflux_errp"], [117, 2, 1, "", "eflux_ref"], [117, 2, 1, "", "eflux_ul"], [117, 2, 1, "", "energy_axis"], [117, 2, 1, "", "energy_max"], [117, 2, 1, "", "energy_min"], [117, 2, 1, "", "energy_ref"], [117, 2, 1, "", "filter_success_nan"], [117, 2, 1, "", "flux"], [117, 2, 1, "", "flux_err"], [117, 2, 1, "", "flux_errn"], [117, 2, 1, "", "flux_errp"], [117, 2, 1, "", "flux_ref"], [117, 2, 1, "", "flux_sensitivity"], [117, 2, 1, "", "flux_ul"], [117, 3, 1, "", "from_hdulist"], [117, 3, 1, "", "from_maps"], [117, 3, 1, "", "from_stack"], [117, 2, 1, "", "geom"], [117, 3, 1, "", "get_flux_points"], [117, 2, 1, "", "has_any_ts"], [117, 2, 1, "", "has_stat_profiles"], [117, 2, 1, "", "has_success"], [117, 2, 1, "", "has_ul"], [117, 2, 1, "", "is_convertible_to_flux_sed_type"], [117, 2, 1, "", "is_ul"], [117, 3, 1, "", "iter_by_axis"], [117, 2, 1, "", "n_dof"], [117, 2, 1, "", "n_sigma"], [117, 2, 1, "", "n_sigma_ul"], [117, 2, 1, "", "niter"], [117, 2, 1, "", "norm"], [117, 2, 1, "", "norm_err"], [117, 2, 1, "", "norm_errn"], [117, 2, 1, "", "norm_errp"], [117, 2, 1, "", "norm_sensitivity"], [117, 2, 1, "", "norm_ul"], [117, 2, 1, "", "npred"], [117, 2, 1, "", "npred_background"], [117, 2, 1, "", "npred_excess"], [117, 2, 1, "", "npred_excess_err"], [117, 2, 1, "", "npred_excess_errn"], [117, 2, 1, "", "npred_excess_errp"], [117, 2, 1, "", "npred_excess_ref"], [117, 2, 1, "", "npred_excess_ul"], [117, 3, 1, "", "read"], [117, 2, 1, "", "reference_model"], [117, 2, 1, "", "reference_model_default"], [117, 2, 1, "", "reference_spectral_model"], [117, 2, 1, "", "sed_type_init"], [117, 2, 1, "", "sed_type_plot_default"], [117, 3, 1, "", "slice_by_coord"], [117, 3, 1, "", "slice_by_energy"], [117, 3, 1, "", "slice_by_idx"], [117, 3, 1, "", "slice_by_time"], [117, 2, 1, "", "sqrt_ts"], [117, 2, 1, "", "sqrt_ts_threshold_ul"], [117, 2, 1, "", "stat"], [117, 2, 1, "", "stat_null"], [117, 2, 1, "", "stat_scan"], [117, 2, 1, "", "success"], [117, 3, 1, "", "to_hdulist"], [117, 3, 1, "", "to_maps"], [117, 2, 1, "", "ts"], [117, 2, 1, "", "ts_scan"], [117, 3, 1, "", "write"]], "gammapy.estimators.FluxMetaData": [[118, 3, 1, "", "construct"], [118, 3, 1, "", "copy"], [118, 3, 1, "", "dict"], [118, 3, 1, "", "from_header"], [118, 3, 1, "", "from_orm"], [118, 3, 1, "", "json"], [118, 2, 1, "", "model_computed_fields"], [118, 2, 1, "", "model_config"], [118, 3, 1, "", "model_construct"], [118, 3, 1, "", "model_copy"], [118, 3, 1, "", "model_dump"], [118, 3, 1, "", "model_dump_json"], [118, 2, 1, "", "model_extra"], [118, 2, 1, "", "model_fields"], [118, 2, 1, "", "model_fields_set"], [118, 3, 1, "", "model_json_schema"], [118, 3, 1, "", "model_parametrized_name"], [118, 3, 1, "", "model_post_init"], [118, 3, 1, "", "model_rebuild"], [118, 3, 1, "", "model_validate"], [118, 3, 1, "", "model_validate_json"], [118, 3, 1, "", "model_validate_strings"], [118, 3, 1, "", "parse_file"], [118, 3, 1, "", "parse_obj"], [118, 3, 1, "", "parse_raw"], [118, 3, 1, "", "schema"], [118, 3, 1, "", "schema_json"], [118, 2, 1, "", "tag"], [118, 3, 1, "", "to_header"], [118, 3, 1, "", "to_yaml"], [118, 3, 1, "", "update_forward_refs"], [118, 3, 1, "", "validate"]], "gammapy.estimators.FluxPoints": [[119, 3, 1, "", "all_quantities"], [119, 2, 1, "", "available_quantities"], [119, 2, 1, "", "counts"], [119, 2, 1, "", "dnde"], [119, 2, 1, "", "dnde_err"], [119, 2, 1, "", "dnde_errn"], [119, 2, 1, "", "dnde_errp"], [119, 2, 1, "", "dnde_ref"], [119, 2, 1, "", "dnde_ul"], [119, 2, 1, "", "e2dnde"], [119, 2, 1, "", "e2dnde_err"], [119, 2, 1, "", "e2dnde_errn"], [119, 2, 1, "", "e2dnde_errp"], [119, 2, 1, "", "e2dnde_ref"], [119, 2, 1, "", "e2dnde_ul"], [119, 2, 1, "", "eflux"], [119, 2, 1, "", "eflux_err"], [119, 2, 1, "", "eflux_errn"], [119, 2, 1, "", "eflux_errp"], [119, 2, 1, "", "eflux_ref"], [119, 2, 1, "", "eflux_ul"], [119, 2, 1, "", "energy_axis"], [119, 2, 1, "", "energy_max"], [119, 2, 1, "", "energy_min"], [119, 2, 1, "", "energy_ref"], [119, 2, 1, "", "filter_success_nan"], [119, 2, 1, "", "flux"], [119, 2, 1, "", "flux_err"], [119, 2, 1, "", "flux_errn"], [119, 2, 1, "", "flux_errp"], [119, 2, 1, "", "flux_ref"], [119, 2, 1, "", "flux_sensitivity"], [119, 2, 1, "", "flux_ul"], [119, 3, 1, "", "from_hdulist"], [119, 3, 1, "", "from_maps"], [119, 3, 1, "", "from_stack"], [119, 3, 1, "", "from_table"], [119, 2, 1, "", "geom"], [119, 3, 1, "", "get_flux_points"], [119, 2, 1, "", "has_any_ts"], [119, 2, 1, "", "has_stat_profiles"], [119, 2, 1, "", "has_success"], [119, 2, 1, "", "has_ul"], [119, 2, 1, "", "is_convertible_to_flux_sed_type"], [119, 2, 1, "", "is_ul"], [119, 3, 1, "", "iter_by_axis"], [119, 2, 1, "", "n_dof"], [119, 2, 1, "", "n_sigma"], [119, 2, 1, "", "n_sigma_ul"], [119, 2, 1, "", "niter"], [119, 2, 1, "", "norm"], [119, 2, 1, "", "norm_err"], [119, 2, 1, "", "norm_errn"], [119, 2, 1, "", "norm_errp"], [119, 2, 1, "", "norm_sensitivity"], [119, 2, 1, "", "norm_ul"], [119, 2, 1, "", "npred"], [119, 2, 1, "", "npred_background"], [119, 2, 1, "", "npred_excess"], [119, 2, 1, "", "npred_excess_err"], [119, 2, 1, "", "npred_excess_errn"], [119, 2, 1, "", "npred_excess_errp"], [119, 2, 1, "", "npred_excess_ref"], [119, 2, 1, "", "npred_excess_ul"], [119, 3, 1, "", "plot"], [119, 3, 1, "", "plot_ts_profiles"], [119, 3, 1, "", "read"], [119, 3, 1, "", "recompute_ul"], [119, 2, 1, "", "reference_model"], [119, 2, 1, "", "reference_model_default"], [119, 2, 1, "", "reference_spectral_model"], [119, 3, 1, "", "resample_axis"], [119, 2, 1, "", "sed_type_init"], [119, 2, 1, "", "sed_type_plot_default"], [119, 3, 1, "", "slice_by_coord"], [119, 3, 1, "", "slice_by_energy"], [119, 3, 1, "", "slice_by_idx"], [119, 3, 1, "", "slice_by_time"], [119, 2, 1, "", "sqrt_ts"], [119, 2, 1, "", "sqrt_ts_threshold_ul"], [119, 2, 1, "", "stat"], [119, 2, 1, "", "stat_null"], [119, 2, 1, "", "stat_scan"], [119, 2, 1, "", "success"], [119, 3, 1, "", "to_hdulist"], [119, 3, 1, "", "to_maps"], [119, 3, 1, "", "to_table"], [119, 2, 1, "", "ts"], [119, 2, 1, "", "ts_scan"], [119, 3, 1, "", "write"]], "gammapy.estimators.FluxPointsEstimator": [[120, 2, 1, "", "config_parameters"], [120, 3, 1, "", "copy"], [120, 3, 1, "", "estimate_best_fit"], [120, 3, 1, "", "estimate_counts"], [120, 3, 1, "", "estimate_errn_errp"], [120, 3, 1, "", "estimate_flux_point"], [120, 3, 1, "", "estimate_npred"], [120, 3, 1, "", "estimate_npred_excess"], [120, 3, 1, "", "estimate_scan"], [120, 3, 1, "", "estimate_ts"], [120, 3, 1, "", "estimate_ul"], [120, 3, 1, "", "get_scale_model"], [120, 2, 1, "", "n_jobs"], [120, 2, 1, "", "norm_max"], [120, 2, 1, "", "norm_min"], [120, 2, 1, "", "norm_n_values"], [120, 2, 1, "", "norm_values"], [120, 2, 1, "", "parallel_backend"], [120, 3, 1, "", "run"], [120, 2, 1, "", "selection_optional"], [120, 2, 1, "", "tag"]], "gammapy.estimators.FluxProfileEstimator": [[121, 2, 1, "", "config_parameters"], [121, 3, 1, "", "copy"], [121, 3, 1, "", "estimate_best_fit"], [121, 3, 1, "", "estimate_counts"], [121, 3, 1, "", "estimate_errn_errp"], [121, 3, 1, "", "estimate_flux_point"], [121, 3, 1, "", "estimate_npred"], [121, 3, 1, "", "estimate_npred_excess"], [121, 3, 1, "", "estimate_scan"], [121, 3, 1, "", "estimate_ts"], [121, 3, 1, "", "estimate_ul"], [121, 3, 1, "", "get_scale_model"], [121, 2, 1, "", "n_jobs"], [121, 2, 1, "", "norm_max"], [121, 2, 1, "", "norm_min"], [121, 2, 1, "", "norm_n_values"], [121, 2, 1, "", "norm_values"], [121, 2, 1, "", "parallel_backend"], [121, 2, 1, "", "projected_distance_axis"], [121, 3, 1, "", "run"], [121, 2, 1, "", "selection_optional"], [121, 2, 1, "", "tag"]], "gammapy.estimators.ImageProfile": [[122, 3, 1, "", "normalize"], [122, 3, 1, "", "peek"], [122, 3, 1, "", "plot"], [122, 3, 1, "", "plot_err"], [122, 2, 1, "", "profile"], [122, 2, 1, "", "profile_err"], [122, 3, 1, "", "smooth"], [122, 2, 1, "", "x_max"], [122, 2, 1, "", "x_min"], [122, 2, 1, "", "x_ref"]], "gammapy.estimators.ImageProfileEstimator": [[123, 2, 1, "", "config_parameters"], [123, 3, 1, "", "copy"], [123, 3, 1, "", "run"], [123, 2, 1, "", "selection_optional"], [123, 2, 1, "", "tag"]], "gammapy.estimators.LightCurveEstimator": [[124, 2, 1, "", "config_parameters"], [124, 3, 1, "", "copy"], [124, 3, 1, "", "estimate_best_fit"], [124, 3, 1, "", "estimate_counts"], [124, 3, 1, "", "estimate_errn_errp"], [124, 3, 1, "", "estimate_flux_point"], [124, 3, 1, "", "estimate_npred"], [124, 3, 1, "", "estimate_npred_excess"], [124, 3, 1, "", "estimate_scan"], [124, 3, 1, "", "estimate_time_bin_flux"], [124, 3, 1, "", "estimate_ts"], [124, 3, 1, "", "estimate_ul"], [124, 3, 1, "", "expand_map"], [124, 3, 1, "", "get_scale_model"], [124, 2, 1, "", "n_jobs"], [124, 2, 1, "", "norm_max"], [124, 2, 1, "", "norm_min"], [124, 2, 1, "", "norm_n_values"], [124, 2, 1, "", "norm_values"], [124, 2, 1, "", "parallel_backend"], [124, 3, 1, "", "run"], [124, 2, 1, "", "selection_optional"], [124, 2, 1, "", "tag"]], "gammapy.estimators.ParameterEstimator": [[125, 2, 1, "", "config_parameters"], [125, 3, 1, "", "copy"], [125, 3, 1, "", "estimate_best_fit"], [125, 3, 1, "", "estimate_counts"], [125, 3, 1, "", "estimate_errn_errp"], [125, 3, 1, "", "estimate_npred"], [125, 3, 1, "", "estimate_scan"], [125, 3, 1, "", "estimate_ts"], [125, 3, 1, "", "estimate_ul"], [125, 3, 1, "", "run"], [125, 2, 1, "", "selection_optional"], [125, 2, 1, "", "tag"]], "gammapy.estimators.SensitivityEstimator": [[126, 2, 1, "", "config_parameters"], [126, 3, 1, "", "copy"], [126, 3, 1, "", "estimate_min_e2dnde"], [126, 3, 1, "", "estimate_min_excess"], [126, 3, 1, "", "run"], [126, 2, 1, "", "selection_optional"], [126, 2, 1, "", "tag"]], "gammapy.estimators.TSMapEstimator": [[127, 2, 1, "", "config_parameters"], [127, 3, 1, "", "copy"], [127, 3, 1, "", "estimate_fit_input_maps"], [127, 3, 1, "", "estimate_flux_default"], [127, 3, 1, "", "estimate_flux_map"], [127, 3, 1, "", "estimate_kernel"], [127, 3, 1, "", "estimate_mask_default"], [127, 3, 1, "", "estimate_pad_width"], [127, 2, 1, "", "n_jobs"], [127, 2, 1, "", "parallel_backend"], [127, 3, 1, "", "run"], [127, 2, 1, "", "selection_all"], [127, 2, 1, "", "selection_optional"], [127, 2, 1, "", "tag"]], "gammapy.estimators.utils": [[128, 4, 1, "", "compute_lightcurve_doublingtime"], [129, 4, 1, "", "compute_lightcurve_fpp"], [130, 4, 1, "", "compute_lightcurve_fvar"], [131, 4, 1, "", "estimate_exposure_reco_energy"], [132, 4, 1, "", "find_peaks"], [133, 4, 1, "", "find_peaks_in_flux_map"], [134, 4, 1, "", "get_rebinned_axis"], [135, 4, 1, "", "resample_energy_edges"]], "gammapy.irf": [[136, 1, 1, "", "Background2D"], [137, 1, 1, "", "Background3D"], [138, 1, 1, "", "BackgroundIRF"], [139, 1, 1, "", "EDispKernel"], [140, 1, 1, "", "EDispKernelMap"], [141, 1, 1, "", "EDispMap"], [142, 1, 1, "", "EffectiveAreaTable2D"], [143, 1, 1, "", "EnergyDependentMultiGaussPSF"], [144, 1, 1, "", "EnergyDispersion2D"], [145, 1, 1, "", "FoVAlignment"], [146, 1, 1, "", "IRF"], [147, 1, 1, "", "IRFMap"], [148, 5, 1, "", "IRF_REGISTRY"], [149, 1, 1, "", "PSF3D"], [150, 1, 1, "", "PSFKernel"], [151, 1, 1, "", "PSFKing"], [152, 1, 1, "", "PSFMap"], [153, 1, 1, "", "ParametricPSF"], [154, 1, 1, "", "RadMax2D"], [155, 1, 1, "", "RecoPSFMap"], [156, 4, 1, "", "load_irf_dict_from_file"]], "gammapy.irf.Background2D": [[136, 2, 1, "", "axes"], [136, 3, 1, "", "cumsum"], [136, 2, 1, "", "data"], [136, 2, 1, "", "default_interp_kwargs"], [136, 2, 1, "", "default_unit"], [136, 3, 1, "", "evaluate"], [136, 2, 1, "", "fov_alignment"], [136, 3, 1, "", "from_hdulist"], [136, 3, 1, "", "from_table"], [136, 2, 1, "", "has_offset_axis"], [136, 3, 1, "", "integral"], [136, 3, 1, "", "integrate_log_log"], [136, 3, 1, "", "interp_missing_data"], [136, 3, 1, "", "is_allclose"], [136, 2, 1, "", "is_pointlike"], [136, 3, 1, "", "normalize"], [136, 3, 1, "", "pad"], [136, 3, 1, "", "peek"], [136, 3, 1, "", "plot"], [136, 3, 1, "", "plot_at_energy"], [136, 3, 1, "", "plot_energy_dependence"], [136, 3, 1, "", "plot_offset_dependence"], [136, 3, 1, "", "plot_spectrum"], [136, 2, 1, "", "quantity"], [136, 3, 1, "", "read"], [136, 2, 1, "", "required_axes"], [136, 3, 1, "", "slice_by_idx"], [136, 2, 1, "", "tag"], [136, 3, 1, "", "to_3d"], [136, 3, 1, "", "to_hdulist"], [136, 3, 1, "", "to_table"], [136, 3, 1, "", "to_table_hdu"], [136, 3, 1, "", "to_unit"], [136, 2, 1, "", "unit"], [136, 3, 1, "", "write"]], "gammapy.irf.Background3D": [[137, 2, 1, "", "axes"], [137, 3, 1, "", "cumsum"], [137, 2, 1, "", "data"], [137, 2, 1, "", "default_interp_kwargs"], [137, 2, 1, "", "default_unit"], [137, 3, 1, "", "evaluate"], [137, 2, 1, "", "fov_alignment"], [137, 3, 1, "", "from_hdulist"], [137, 3, 1, "", "from_table"], [137, 2, 1, "", "has_offset_axis"], [137, 3, 1, "", "integral"], [137, 3, 1, "", "integrate_log_log"], [137, 3, 1, "", "interp_missing_data"], [137, 3, 1, "", "is_allclose"], [137, 2, 1, "", "is_pointlike"], [137, 3, 1, "", "normalize"], [137, 3, 1, "", "pad"], [137, 3, 1, "", "peek"], [137, 3, 1, "", "plot_at_energy"], [137, 2, 1, "", "quantity"], [137, 3, 1, "", "read"], [137, 2, 1, "", "required_axes"], [137, 3, 1, "", "slice_by_idx"], [137, 2, 1, "", "tag"], [137, 3, 1, "", "to_2d"], [137, 3, 1, "", "to_hdulist"], [137, 3, 1, "", "to_table"], [137, 3, 1, "", "to_table_hdu"], [137, 3, 1, "", "to_unit"], [137, 2, 1, "", "unit"], [137, 3, 1, "", "write"]], "gammapy.irf.BackgroundIRF": [[138, 2, 1, "", "axes"], [138, 3, 1, "", "cumsum"], [138, 2, 1, "", "data"], [138, 2, 1, "", "default_interp_kwargs"], [138, 3, 1, "", "evaluate"], [138, 2, 1, "", "fov_alignment"], [138, 3, 1, "", "from_hdulist"], [138, 3, 1, "", "from_table"], [138, 2, 1, "", "has_offset_axis"], [138, 3, 1, "", "integral"], [138, 3, 1, "", "integrate_log_log"], [138, 3, 1, "", "interp_missing_data"], [138, 3, 1, "", "is_allclose"], [138, 2, 1, "", "is_pointlike"], [138, 3, 1, "", "normalize"], [138, 3, 1, "", "pad"], [138, 2, 1, "", "quantity"], [138, 3, 1, "", "read"], [138, 2, 1, "", "required_axes"], [138, 3, 1, "", "slice_by_idx"], [138, 2, 1, "", "tag"], [138, 3, 1, "", "to_hdulist"], [138, 3, 1, "", "to_table"], [138, 3, 1, "", "to_table_hdu"], [138, 3, 1, "", "to_unit"], [138, 2, 1, "", "unit"], [138, 3, 1, "", "write"]], "gammapy.irf.EDispKernel": [[139, 2, 1, "", "axes"], [139, 3, 1, "", "cumsum"], [139, 2, 1, "", "data"], [139, 2, 1, "", "default_interp_kwargs"], [139, 3, 1, "", "evaluate"], [139, 2, 1, "", "fov_alignment"], [139, 3, 1, "", "from_diagonal_response"], [139, 3, 1, "", "from_gauss"], [139, 3, 1, "", "from_hdulist"], [139, 3, 1, "", "from_table"], [139, 3, 1, "", "get_bias"], [139, 3, 1, "", "get_bias_energy"], [139, 3, 1, "", "get_mean"], [139, 3, 1, "", "get_resolution"], [139, 2, 1, "", "has_offset_axis"], [139, 3, 1, "", "integral"], [139, 3, 1, "", "integrate_log_log"], [139, 3, 1, "", "interp_missing_data"], [139, 3, 1, "", "is_allclose"], [139, 2, 1, "", "is_pointlike"], [139, 3, 1, "", "normalize"], [139, 3, 1, "", "pad"], [139, 3, 1, "", "pdf_in_safe_range"], [139, 2, 1, "", "pdf_matrix"], [139, 3, 1, "", "peek"], [139, 3, 1, "", "plot_bias"], [139, 3, 1, "", "plot_matrix"], [139, 2, 1, "", "quantity"], [139, 3, 1, "", "read"], [139, 2, 1, "", "required_axes"], [139, 3, 1, "", "slice_by_idx"], [139, 2, 1, "", "tag"], [139, 3, 1, "", "to_hdulist"], [139, 3, 1, "", "to_image"], [139, 3, 1, "", "to_table"], [139, 3, 1, "", "to_table_hdu"], [139, 3, 1, "", "to_unit"], [139, 2, 1, "", "unit"], [139, 3, 1, "", "write"]], "gammapy.irf.EDispKernelMap": [[140, 3, 1, "", "copy"], [140, 3, 1, "", "cutout"], [140, 3, 1, "", "downsample"], [140, 2, 1, "", "edisp_map"], [140, 3, 1, "", "from_diagonal_response"], [140, 3, 1, "", "from_edisp_kernel"], [140, 3, 1, "", "from_gauss"], [140, 3, 1, "", "from_geom"], [140, 3, 1, "", "from_hdulist"], [140, 3, 1, "", "get_edisp_kernel"], [140, 2, 1, "", "mask_safe_image"], [140, 3, 1, "", "peek"], [140, 3, 1, "", "read"], [140, 2, 1, "", "required_axes"], [140, 3, 1, "", "resample_energy_axis"], [140, 3, 1, "", "slice_by_idx"], [140, 3, 1, "", "stack"], [140, 2, 1, "", "tag"], [140, 3, 1, "", "to_hdulist"], [140, 3, 1, "", "to_image"], [140, 3, 1, "", "to_region_nd_map"], [140, 3, 1, "", "write"]], "gammapy.irf.EDispMap": [[141, 3, 1, "", "copy"], [141, 3, 1, "", "cutout"], [141, 3, 1, "", "downsample"], [141, 2, 1, "", "edisp_map"], [141, 3, 1, "", "from_diagonal_response"], [141, 3, 1, "", "from_geom"], [141, 3, 1, "", "from_hdulist"], [141, 3, 1, "", "get_edisp_kernel"], [141, 2, 1, "", "mask_safe_image"], [141, 3, 1, "", "normalize"], [141, 3, 1, "", "peek"], [141, 3, 1, "", "read"], [141, 2, 1, "", "required_axes"], [141, 3, 1, "", "sample_coord"], [141, 3, 1, "", "slice_by_idx"], [141, 3, 1, "", "stack"], [141, 2, 1, "", "tag"], [141, 3, 1, "", "to_edisp_kernel_map"], [141, 3, 1, "", "to_hdulist"], [141, 3, 1, "", "to_region_nd_map"], [141, 3, 1, "", "write"]], "gammapy.irf.EffectiveAreaTable2D": [[142, 2, 1, "", "axes"], [142, 3, 1, "", "cumsum"], [142, 2, 1, "", "data"], [142, 2, 1, "", "default_interp_kwargs"], [142, 2, 1, "", "default_unit"], [142, 3, 1, "", "evaluate"], [142, 2, 1, "", "fov_alignment"], [142, 3, 1, "", "from_hdulist"], [142, 3, 1, "", "from_parametrization"], [142, 3, 1, "", "from_table"], [142, 2, 1, "", "has_offset_axis"], [142, 3, 1, "", "integral"], [142, 3, 1, "", "integrate_log_log"], [142, 3, 1, "", "interp_missing_data"], [142, 3, 1, "", "is_allclose"], [142, 2, 1, "", "is_pointlike"], [142, 3, 1, "", "normalize"], [142, 3, 1, "", "pad"], [142, 3, 1, "", "peek"], [142, 3, 1, "", "plot"], [142, 3, 1, "", "plot_energy_dependence"], [142, 3, 1, "", "plot_offset_dependence"], [142, 2, 1, "", "quantity"], [142, 3, 1, "", "read"], [142, 2, 1, "", "required_axes"], [142, 3, 1, "", "slice_by_idx"], [142, 2, 1, "", "tag"], [142, 3, 1, "", "to_hdulist"], [142, 3, 1, "", "to_table"], [142, 3, 1, "", "to_table_hdu"], [142, 3, 1, "", "to_unit"], [142, 2, 1, "", "unit"], [142, 3, 1, "", "write"]], "gammapy.irf.EnergyDependentMultiGaussPSF": [[143, 2, 1, "", "axes"], [143, 3, 1, "", "containment"], [143, 3, 1, "", "containment_radius"], [143, 3, 1, "", "cumsum"], [143, 2, 1, "", "data"], [143, 2, 1, "", "default_interp_kwargs"], [143, 3, 1, "", "evaluate"], [143, 3, 1, "", "evaluate_containment"], [143, 3, 1, "", "evaluate_direct"], [143, 3, 1, "", "evaluate_parameters"], [143, 2, 1, "", "fov_alignment"], [143, 3, 1, "", "from_hdulist"], [143, 3, 1, "", "from_table"], [143, 2, 1, "", "has_offset_axis"], [143, 3, 1, "", "info"], [143, 3, 1, "", "integral"], [143, 3, 1, "", "integrate_log_log"], [143, 3, 1, "", "interp_missing_data"], [143, 3, 1, "", "is_allclose"], [143, 2, 1, "", "is_pointlike"], [143, 3, 1, "", "normalize"], [143, 3, 1, "", "pad"], [143, 3, 1, "", "peek"], [143, 3, 1, "", "plot_containment_radius"], [143, 3, 1, "", "plot_containment_radius_vs_energy"], [143, 3, 1, "", "plot_psf_vs_rad"], [143, 2, 1, "", "quantity"], [143, 3, 1, "", "read"], [143, 2, 1, "", "required_axes"], [143, 2, 1, "", "required_parameters"], [143, 3, 1, "", "slice_by_idx"], [143, 2, 1, "", "tag"], [143, 3, 1, "", "to_hdulist"], [143, 3, 1, "", "to_psf3d"], [143, 3, 1, "", "to_table"], [143, 3, 1, "", "to_table_hdu"], [143, 3, 1, "", "to_unit"], [143, 2, 1, "", "unit"], [143, 3, 1, "", "write"]], "gammapy.irf.EnergyDispersion2D": [[144, 2, 1, "", "axes"], [144, 3, 1, "", "cumsum"], [144, 2, 1, "", "data"], [144, 2, 1, "", "default_interp_kwargs"], [144, 2, 1, "", "default_unit"], [144, 3, 1, "", "evaluate"], [144, 2, 1, "", "fov_alignment"], [144, 3, 1, "", "from_gauss"], [144, 3, 1, "", "from_hdulist"], [144, 3, 1, "", "from_table"], [144, 2, 1, "", "has_offset_axis"], [144, 3, 1, "", "integral"], [144, 3, 1, "", "integrate_log_log"], [144, 3, 1, "", "interp_missing_data"], [144, 3, 1, "", "is_allclose"], [144, 2, 1, "", "is_pointlike"], [144, 3, 1, "", "normalize"], [144, 3, 1, "", "pad"], [144, 3, 1, "", "peek"], [144, 3, 1, "", "plot_bias"], [144, 3, 1, "", "plot_migration"], [144, 2, 1, "", "quantity"], [144, 3, 1, "", "read"], [144, 2, 1, "", "required_axes"], [144, 3, 1, "", "slice_by_idx"], [144, 2, 1, "", "tag"], [144, 3, 1, "", "to_edisp_kernel"], [144, 3, 1, "", "to_hdulist"], [144, 3, 1, "", "to_table"], [144, 3, 1, "", "to_table_hdu"], [144, 3, 1, "", "to_unit"], [144, 2, 1, "", "unit"], [144, 3, 1, "", "write"]], "gammapy.irf.FoVAlignment": [[145, 2, 1, "", "ALTAZ"], [145, 2, 1, "", "RADEC"]], "gammapy.irf.IRF": [[146, 2, 1, "", "axes"], [146, 3, 1, "", "cumsum"], [146, 2, 1, "", "data"], [146, 2, 1, "", "default_interp_kwargs"], [146, 3, 1, "", "evaluate"], [146, 2, 1, "", "fov_alignment"], [146, 3, 1, "", "from_hdulist"], [146, 3, 1, "", "from_table"], [146, 2, 1, "", "has_offset_axis"], [146, 3, 1, "", "integral"], [146, 3, 1, "", "integrate_log_log"], [146, 3, 1, "", "interp_missing_data"], [146, 3, 1, "", "is_allclose"], [146, 2, 1, "", "is_pointlike"], [146, 3, 1, "", "normalize"], [146, 3, 1, "", "pad"], [146, 2, 1, "", "quantity"], [146, 3, 1, "", "read"], [146, 2, 1, "", "required_axes"], [146, 3, 1, "", "slice_by_idx"], [146, 2, 1, "", "tag"], [146, 3, 1, "", "to_hdulist"], [146, 3, 1, "", "to_table"], [146, 3, 1, "", "to_table_hdu"], [146, 3, 1, "", "to_unit"], [146, 2, 1, "", "unit"], [146, 3, 1, "", "write"]], "gammapy.irf.IRFMap": [[147, 3, 1, "", "copy"], [147, 3, 1, "", "cutout"], [147, 3, 1, "", "downsample"], [147, 3, 1, "", "from_hdulist"], [147, 2, 1, "", "mask_safe_image"], [147, 3, 1, "", "read"], [147, 2, 1, "", "required_axes"], [147, 3, 1, "", "slice_by_idx"], [147, 3, 1, "", "stack"], [147, 2, 1, "", "tag"], [147, 3, 1, "", "to_hdulist"], [147, 3, 1, "", "to_region_nd_map"], [147, 3, 1, "", "write"]], "gammapy.irf.PSF3D": [[149, 2, 1, "", "axes"], [149, 3, 1, "", "containment"], [149, 3, 1, "", "containment_radius"], [149, 3, 1, "", "cumsum"], [149, 2, 1, "", "data"], [149, 2, 1, "", "default_interp_kwargs"], [149, 2, 1, "", "default_unit"], [149, 3, 1, "", "evaluate"], [149, 2, 1, "", "fov_alignment"], [149, 3, 1, "", "from_hdulist"], [149, 3, 1, "", "from_table"], [149, 2, 1, "", "has_offset_axis"], [149, 3, 1, "", "info"], [149, 3, 1, "", "integral"], [149, 3, 1, "", "integrate_log_log"], [149, 3, 1, "", "interp_missing_data"], [149, 3, 1, "", "is_allclose"], [149, 2, 1, "", "is_pointlike"], [149, 3, 1, "", "normalize"], [149, 3, 1, "", "pad"], [149, 3, 1, "", "peek"], [149, 3, 1, "", "plot_containment_radius"], [149, 3, 1, "", "plot_containment_radius_vs_energy"], [149, 3, 1, "", "plot_psf_vs_rad"], [149, 2, 1, "", "quantity"], [149, 3, 1, "", "read"], [149, 2, 1, "", "required_axes"], [149, 3, 1, "", "slice_by_idx"], [149, 2, 1, "", "tag"], [149, 3, 1, "", "to_hdulist"], [149, 3, 1, "", "to_table"], [149, 3, 1, "", "to_table_hdu"], [149, 3, 1, "", "to_unit"], [149, 2, 1, "", "unit"], [149, 3, 1, "", "write"]], "gammapy.irf.PSFKernel": [[150, 2, 1, "", "data"], [150, 3, 1, "", "from_gauss"], [150, 3, 1, "", "from_spatial_model"], [150, 3, 1, "", "normalize"], [150, 3, 1, "", "peek"], [150, 3, 1, "", "plot_kernel"], [150, 2, 1, "", "psf_kernel_map"], [150, 3, 1, "", "read"], [150, 3, 1, "", "slice_by_idx"], [150, 3, 1, "", "to_image"], [150, 3, 1, "", "write"]], "gammapy.irf.PSFKing": [[151, 2, 1, "", "axes"], [151, 3, 1, "", "containment"], [151, 3, 1, "", "containment_radius"], [151, 3, 1, "", "cumsum"], [151, 2, 1, "", "data"], [151, 2, 1, "", "default_interp_kwargs"], [151, 3, 1, "", "evaluate"], [151, 3, 1, "", "evaluate_containment"], [151, 3, 1, "", "evaluate_direct"], [151, 3, 1, "", "evaluate_parameters"], [151, 2, 1, "", "fov_alignment"], [151, 3, 1, "", "from_hdulist"], [151, 3, 1, "", "from_table"], [151, 2, 1, "", "has_offset_axis"], [151, 3, 1, "", "info"], [151, 3, 1, "", "integral"], [151, 3, 1, "", "integrate_log_log"], [151, 3, 1, "", "interp_missing_data"], [151, 3, 1, "", "is_allclose"], [151, 2, 1, "", "is_pointlike"], [151, 3, 1, "", "normalize"], [151, 3, 1, "", "pad"], [151, 3, 1, "", "peek"], [151, 3, 1, "", "plot_containment_radius"], [151, 3, 1, "", "plot_containment_radius_vs_energy"], [151, 3, 1, "", "plot_psf_vs_rad"], [151, 2, 1, "", "quantity"], [151, 3, 1, "", "read"], [151, 2, 1, "", "required_axes"], [151, 2, 1, "", "required_parameters"], [151, 3, 1, "", "slice_by_idx"], [151, 2, 1, "", "tag"], [151, 3, 1, "", "to_hdulist"], [151, 3, 1, "", "to_psf3d"], [151, 3, 1, "", "to_table"], [151, 3, 1, "", "to_table_hdu"], [151, 3, 1, "", "to_unit"], [151, 2, 1, "", "unit"], [151, 3, 1, "", "write"]], "gammapy.irf.PSFMap": [[152, 3, 1, "", "containment"], [152, 3, 1, "", "containment_radius"], [152, 3, 1, "", "containment_radius_map"], [152, 3, 1, "", "copy"], [152, 3, 1, "", "cutout"], [152, 3, 1, "", "downsample"], [152, 2, 1, "", "energy_name"], [152, 3, 1, "", "from_gauss"], [152, 3, 1, "", "from_geom"], [152, 3, 1, "", "from_hdulist"], [152, 3, 1, "", "get_psf_kernel"], [152, 2, 1, "", "mask_safe_image"], [152, 3, 1, "", "normalize"], [152, 3, 1, "", "peek"], [152, 3, 1, "", "plot_containment_radius_vs_energy"], [152, 3, 1, "", "plot_psf_vs_rad"], [152, 2, 1, "", "psf_map"], [152, 3, 1, "", "read"], [152, 2, 1, "", "required_axes"], [152, 3, 1, "", "sample_coord"], [152, 3, 1, "", "slice_by_idx"], [152, 3, 1, "", "stack"], [152, 2, 1, "", "tag"], [152, 3, 1, "", "to_hdulist"], [152, 3, 1, "", "to_image"], [152, 3, 1, "", "to_region_nd_map"], [152, 3, 1, "", "write"]], "gammapy.irf.ParametricPSF": [[153, 2, 1, "", "axes"], [153, 3, 1, "", "containment"], [153, 3, 1, "", "containment_radius"], [153, 3, 1, "", "cumsum"], [153, 2, 1, "", "data"], [153, 2, 1, "", "default_interp_kwargs"], [153, 3, 1, "", "evaluate"], [153, 3, 1, "", "evaluate_containment"], [153, 3, 1, "", "evaluate_direct"], [153, 3, 1, "", "evaluate_parameters"], [153, 2, 1, "", "fov_alignment"], [153, 3, 1, "", "from_hdulist"], [153, 3, 1, "", "from_table"], [153, 2, 1, "", "has_offset_axis"], [153, 3, 1, "", "info"], [153, 3, 1, "", "integral"], [153, 3, 1, "", "integrate_log_log"], [153, 3, 1, "", "interp_missing_data"], [153, 3, 1, "", "is_allclose"], [153, 2, 1, "", "is_pointlike"], [153, 3, 1, "", "normalize"], [153, 3, 1, "", "pad"], [153, 3, 1, "", "peek"], [153, 3, 1, "", "plot_containment_radius"], [153, 3, 1, "", "plot_containment_radius_vs_energy"], [153, 3, 1, "", "plot_psf_vs_rad"], [153, 2, 1, "", "quantity"], [153, 3, 1, "", "read"], [153, 2, 1, "", "required_axes"], [153, 2, 1, "", "required_parameters"], [153, 3, 1, "", "slice_by_idx"], [153, 2, 1, "", "tag"], [153, 3, 1, "", "to_hdulist"], [153, 3, 1, "", "to_psf3d"], [153, 3, 1, "", "to_table"], [153, 3, 1, "", "to_table_hdu"], [153, 3, 1, "", "to_unit"], [153, 2, 1, "", "unit"], [153, 3, 1, "", "write"]], "gammapy.irf.RadMax2D": [[154, 2, 1, "", "axes"], [154, 3, 1, "", "cumsum"], [154, 2, 1, "", "data"], [154, 2, 1, "", "default_interp_kwargs"], [154, 2, 1, "", "default_unit"], [154, 3, 1, "", "evaluate"], [154, 2, 1, "", "fov_alignment"], [154, 3, 1, "", "from_hdulist"], [154, 3, 1, "", "from_irf"], [154, 3, 1, "", "from_table"], [154, 2, 1, "", "has_offset_axis"], [154, 3, 1, "", "integral"], [154, 3, 1, "", "integrate_log_log"], [154, 3, 1, "", "interp_missing_data"], [154, 3, 1, "", "is_allclose"], [154, 2, 1, "", "is_fixed_rad_max"], [154, 2, 1, "", "is_pointlike"], [154, 3, 1, "", "normalize"], [154, 3, 1, "", "pad"], [154, 3, 1, "", "plot_rad_max_vs_energy"], [154, 2, 1, "", "quantity"], [154, 3, 1, "", "read"], [154, 2, 1, "", "required_axes"], [154, 3, 1, "", "slice_by_idx"], [154, 2, 1, "", "tag"], [154, 3, 1, "", "to_hdulist"], [154, 3, 1, "", "to_table"], [154, 3, 1, "", "to_table_hdu"], [154, 3, 1, "", "to_unit"], [154, 2, 1, "", "unit"], [154, 3, 1, "", "write"]], "gammapy.irf.RecoPSFMap": [[155, 3, 1, "", "containment"], [155, 3, 1, "", "containment_radius"], [155, 3, 1, "", "containment_radius_map"], [155, 3, 1, "", "copy"], [155, 3, 1, "", "cutout"], [155, 3, 1, "", "downsample"], [155, 2, 1, "", "energy_name"], [155, 3, 1, "", "from_gauss"], [155, 3, 1, "", "from_geom"], [155, 3, 1, "", "from_hdulist"], [155, 3, 1, "", "get_psf_kernel"], [155, 2, 1, "", "mask_safe_image"], [155, 3, 1, "", "normalize"], [155, 3, 1, "", "peek"], [155, 3, 1, "", "plot_containment_radius_vs_energy"], [155, 3, 1, "", "plot_psf_vs_rad"], [155, 2, 1, "", "psf_map"], [155, 3, 1, "", "read"], [155, 2, 1, "", "required_axes"], [155, 3, 1, "", "sample_coord"], [155, 3, 1, "", "slice_by_idx"], [155, 3, 1, "", "stack"], [155, 2, 1, "", "tag"], [155, 3, 1, "", "to_hdulist"], [155, 3, 1, "", "to_image"], [155, 3, 1, "", "to_region_nd_map"], [155, 3, 1, "", "write"]], "gammapy.makers": [[157, 1, 1, "", "AdaptiveRingBackgroundMaker"], [158, 1, 1, "", "DatasetsMaker"], [159, 1, 1, "", "FoVBackgroundMaker"], [160, 5, 1, "", "MAKER_REGISTRY"], [161, 1, 1, "", "Maker"], [162, 1, 1, "", "MapDatasetMaker"], [163, 1, 1, "", "PhaseBackgroundMaker"], [164, 1, 1, "", "ReflectedRegionsBackgroundMaker"], [165, 1, 1, "", "ReflectedRegionsFinder"], [166, 1, 1, "", "RegionsFinder"], [167, 1, 1, "", "RingBackgroundMaker"], [168, 1, 1, "", "SafeMaskMaker"], [169, 1, 1, "", "SpectrumDatasetMaker"], [170, 1, 1, "", "WobbleRegionsFinder"], [8, 0, 0, "-", "utils"]], "gammapy.makers.AdaptiveRingBackgroundMaker": [[157, 3, 1, "", "kernels"], [157, 3, 1, "", "make_cubes"], [157, 3, 1, "", "run"], [157, 2, 1, "", "tag"]], "gammapy.makers.DatasetsMaker": [[158, 3, 1, "", "callback"], [158, 3, 1, "", "error_callback"], [158, 3, 1, "", "make_dataset"], [158, 2, 1, "", "n_jobs"], [158, 2, 1, "", "offset_max"], [158, 2, 1, "", "parallel_backend"], [158, 3, 1, "", "run"], [158, 2, 1, "", "safe_mask_maker"], [158, 2, 1, "", "tag"]], "gammapy.makers.FoVBackgroundMaker": [[159, 2, 1, "", "available_methods"], [159, 3, 1, "", "make_background_fit"], [159, 3, 1, "", "make_background_scale"], [159, 3, 1, "", "make_default_fov_background_model"], [159, 3, 1, "", "make_exclusion_mask"], [159, 2, 1, "", "method"], [159, 3, 1, "", "run"], [159, 2, 1, "", "tag"]], "gammapy.makers.Maker": [[161, 3, 1, "", "run"], [161, 2, 1, "", "tag"]], "gammapy.makers.MapDatasetMaker": [[162, 2, 1, "", "available_selection"], [162, 3, 1, "", "make_background"], [162, 3, 1, "", "make_counts"], [162, 3, 1, "", "make_edisp"], [162, 3, 1, "", "make_edisp_kernel"], [162, 3, 1, "", "make_exposure"], [162, 3, 1, "", "make_exposure_irf"], [162, 3, 1, "", "make_meta_table"], [162, 3, 1, "", "make_psf"], [162, 3, 1, "", "run"], [162, 2, 1, "", "tag"]], "gammapy.makers.PhaseBackgroundMaker": [[163, 3, 1, "", "make_counts"], [163, 3, 1, "", "make_counts_off"], [163, 3, 1, "", "run"], [163, 2, 1, "", "tag"]], "gammapy.makers.ReflectedRegionsBackgroundMaker": [[164, 3, 1, "", "make_counts_off"], [164, 3, 1, "", "run"], [164, 2, 1, "", "tag"]], "gammapy.makers.ReflectedRegionsFinder": [[165, 3, 1, "", "run"]], "gammapy.makers.RegionsFinder": [[166, 3, 1, "", "run"]], "gammapy.makers.RingBackgroundMaker": [[167, 3, 1, "", "kernel"], [167, 3, 1, "", "make_maps_off"], [167, 3, 1, "", "run"], [167, 2, 1, "", "tag"]], "gammapy.makers.SafeMaskMaker": [[168, 2, 1, "", "available_methods"], [168, 3, 1, "", "make_mask_bkg_invalid"], [168, 3, 1, "", "make_mask_energy_aeff_default"], [168, 3, 1, "", "make_mask_energy_aeff_max"], [168, 3, 1, "", "make_mask_energy_bkg_peak"], [168, 3, 1, "", "make_mask_energy_edisp_bias"], [168, 3, 1, "", "make_mask_offset_max"], [168, 3, 1, "", "run"], [168, 2, 1, "", "tag"]], "gammapy.makers.SpectrumDatasetMaker": [[169, 2, 1, "", "available_selection"], [169, 3, 1, "", "make_background"], [169, 3, 1, "", "make_counts"], [169, 3, 1, "", "make_edisp"], [169, 3, 1, "", "make_edisp_kernel"], [169, 3, 1, "", "make_exposure"], [169, 3, 1, "", "make_exposure_irf"], [169, 3, 1, "", "make_meta_table"], [169, 3, 1, "", "make_psf"], [169, 3, 1, "", "run"], [169, 2, 1, "", "tag"]], "gammapy.makers.WobbleRegionsFinder": [[170, 3, 1, "", "run"]], "gammapy.makers.utils": [[171, 4, 1, "", "make_counts_rad_max"], [172, 4, 1, "", "make_edisp_kernel_map"], [173, 4, 1, "", "make_edisp_map"], [174, 4, 1, "", "make_effective_livetime_map"], [175, 4, 1, "", "make_map_background_irf"], [176, 4, 1, "", "make_map_exposure_true_energy"], [177, 4, 1, "", "make_observation_time_map"], [178, 4, 1, "", "make_psf_map"], [179, 4, 1, "", "make_theta_squared_table"]], "gammapy.maps": [[180, 1, 1, "", "Geom"], [181, 1, 1, "", "HpxGeom"], [182, 1, 1, "", "HpxMap"], [183, 1, 1, "", "HpxNDMap"], [184, 1, 1, "", "LabelMapAxis"], [185, 1, 1, "", "Map"], [186, 1, 1, "", "MapAxes"], [187, 1, 1, "", "MapAxis"], [188, 1, 1, "", "MapCoord"], [189, 1, 1, "", "Maps"], [190, 1, 1, "", "RegionGeom"], [191, 1, 1, "", "RegionNDMap"], [192, 1, 1, "", "TimeMapAxis"], [193, 1, 1, "", "WcsGeom"], [194, 1, 1, "", "WcsMap"], [195, 1, 1, "", "WcsNDMap"], [196, 4, 1, "", "containment_radius"], [197, 4, 1, "", "containment_region"]], "gammapy.maps.Geom": [[180, 2, 1, "", "as_energy_true"], [180, 2, 1, "", "center_coord"], [180, 2, 1, "", "center_pix"], [180, 2, 1, "", "center_skydir"], [180, 3, 1, "", "contains"], [180, 3, 1, "", "contains_pix"], [180, 3, 1, "", "coord_to_idx"], [180, 3, 1, "", "coord_to_pix"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "crop"], [180, 3, 1, "", "data_nbytes"], [180, 2, 1, "", "data_shape"], [180, 3, 1, "", "downsample"], [180, 3, 1, "", "drop"], [180, 3, 1, "", "energy_mask"], [180, 3, 1, "", "from_hdulist"], [180, 3, 1, "", "get_coord"], [180, 3, 1, "", "get_idx"], [180, 2, 1, "", "has_energy_axis"], [180, 2, 1, "", "is_allsky"], [180, 2, 1, "", "is_flat"], [180, 2, 1, "", "is_image"], [180, 3, 1, "", "pad"], [180, 3, 1, "", "pix_to_coord"], [180, 3, 1, "", "pix_to_idx"], [180, 3, 1, "", "rename_axes"], [180, 3, 1, "", "replace_axis"], [180, 3, 1, "", "resample_axis"], [180, 3, 1, "", "slice_by_idx"], [180, 3, 1, "", "solid_angle"], [180, 3, 1, "", "squash"], [180, 3, 1, "", "to_bands_hdu"], [180, 3, 1, "", "to_cube"], [180, 3, 1, "", "to_image"], [180, 3, 1, "", "upsample"]], "gammapy.maps.HpxGeom": [[181, 2, 1, "", "as_energy_true"], [181, 2, 1, "", "axes"], [181, 2, 1, "", "axes_names"], [181, 2, 1, "", "center_coord"], [181, 2, 1, "", "center_pix"], [181, 2, 1, "", "center_skydir"], [181, 3, 1, "", "contains"], [181, 3, 1, "", "contains_pix"], [181, 3, 1, "", "coord_to_idx"], [181, 3, 1, "", "coord_to_pix"], [181, 3, 1, "", "copy"], [181, 3, 1, "", "create"], [181, 3, 1, "", "crop"], [181, 3, 1, "", "cutout"], [181, 3, 1, "", "data_nbytes"], [181, 2, 1, "", "data_shape"], [181, 2, 1, "", "data_shape_axes"], [181, 3, 1, "", "downsample"], [181, 3, 1, "", "drop"], [181, 3, 1, "", "energy_mask"], [181, 2, 1, "", "frame"], [181, 3, 1, "", "from_hdu"], [181, 3, 1, "", "from_hdulist"], [181, 3, 1, "", "from_header"], [181, 3, 1, "", "get_coord"], [181, 3, 1, "", "get_idx"], [181, 3, 1, "", "get_index_list"], [181, 3, 1, "", "global_to_local"], [181, 2, 1, "", "has_energy_axis"], [181, 3, 1, "", "interp_weights"], [181, 2, 1, "", "ipix"], [181, 3, 1, "", "is_aligned"], [181, 3, 1, "", "is_allclose"], [181, 2, 1, "", "is_allsky"], [181, 2, 1, "", "is_flat"], [181, 2, 1, "", "is_hpx"], [181, 2, 1, "", "is_image"], [181, 2, 1, "", "is_region"], [181, 2, 1, "", "is_regular"], [181, 3, 1, "", "local_to_global"], [181, 2, 1, "", "ndim"], [181, 2, 1, "", "nest"], [181, 2, 1, "", "npix"], [181, 2, 1, "", "npix_max"], [181, 2, 1, "", "nside"], [181, 2, 1, "", "order"], [181, 2, 1, "", "ordering"], [181, 3, 1, "", "pad"], [181, 3, 1, "", "pix_to_coord"], [181, 3, 1, "", "pix_to_idx"], [181, 2, 1, "", "pixel_scales"], [181, 2, 1, "", "projection"], [181, 2, 1, "", "region"], [181, 3, 1, "", "region_mask"], [181, 3, 1, "", "rename_axes"], [181, 3, 1, "", "replace_axis"], [181, 3, 1, "", "resample_axis"], [181, 3, 1, "", "separation"], [181, 2, 1, "", "shape_axes"], [181, 3, 1, "", "slice_by_idx"], [181, 3, 1, "", "solid_angle"], [181, 3, 1, "", "squash"], [181, 3, 1, "", "to_bands_hdu"], [181, 3, 1, "", "to_binsz"], [181, 3, 1, "", "to_cube"], [181, 3, 1, "", "to_header"], [181, 3, 1, "", "to_image"], [181, 3, 1, "", "to_nside"], [181, 3, 1, "", "to_swapped"], [181, 3, 1, "", "to_wcs_geom"], [181, 3, 1, "", "to_wcs_tiles"], [181, 3, 1, "", "upsample"], [181, 2, 1, "", "width"]], "gammapy.maps.HpxMap": [[182, 3, 1, "", "coadd"], [182, 3, 1, "", "copy"], [182, 3, 1, "", "create"], [182, 3, 1, "", "crop"], [182, 3, 1, "", "cumsum"], [182, 2, 1, "", "data"], [182, 3, 1, "", "dot"], [182, 3, 1, "", "downsample"], [182, 3, 1, "", "fill_by_coord"], [182, 3, 1, "", "fill_by_idx"], [182, 3, 1, "", "fill_by_pix"], [182, 3, 1, "", "fill_events"], [182, 3, 1, "", "from_geom"], [182, 3, 1, "", "from_hdulist"], [182, 3, 1, "", "from_stack"], [182, 2, 1, "", "geom"], [182, 3, 1, "", "get_by_coord"], [182, 3, 1, "", "get_by_idx"], [182, 3, 1, "", "get_by_pix"], [182, 3, 1, "", "get_image_by_coord"], [182, 3, 1, "", "get_image_by_idx"], [182, 3, 1, "", "get_image_by_pix"], [182, 3, 1, "", "get_spectrum"], [182, 3, 1, "", "integral"], [182, 3, 1, "", "interp_by_coord"], [182, 3, 1, "", "interp_by_pix"], [182, 3, 1, "", "interp_to_geom"], [182, 3, 1, "", "is_allclose"], [182, 2, 1, "", "is_mask"], [182, 3, 1, "", "iter_by_axis"], [182, 3, 1, "", "iter_by_image"], [182, 3, 1, "", "iter_by_image_data"], [182, 3, 1, "", "iter_by_image_index"], [182, 3, 1, "", "mask_nearest_position"], [182, 2, 1, "", "meta"], [182, 3, 1, "", "normalize"], [182, 3, 1, "", "pad"], [182, 3, 1, "", "plot_grid"], [182, 3, 1, "", "plot_interactive"], [182, 2, 1, "", "quantity"], [182, 3, 1, "", "read"], [182, 3, 1, "", "reduce"], [182, 3, 1, "", "reduce_over_axes"], [182, 3, 1, "", "rename_axes"], [182, 3, 1, "", "reorder_axes"], [182, 3, 1, "", "reproject_by_image"], [182, 3, 1, "", "reproject_to_geom"], [182, 3, 1, "", "resample"], [182, 3, 1, "", "resample_axis"], [182, 3, 1, "", "sample_coord"], [182, 3, 1, "", "set_by_coord"], [182, 3, 1, "", "set_by_idx"], [182, 3, 1, "", "set_by_pix"], [182, 3, 1, "", "slice_by_idx"], [182, 3, 1, "", "split_by_axis"], [182, 3, 1, "", "sum_over_axes"], [182, 2, 1, "", "tag"], [182, 3, 1, "", "to_cube"], [182, 3, 1, "", "to_hdu"], [182, 3, 1, "", "to_hdulist"], [182, 3, 1, "", "to_swapped"], [182, 3, 1, "", "to_unit"], [182, 3, 1, "", "to_wcs"], [182, 2, 1, "", "unit"], [182, 3, 1, "", "upsample"], [182, 3, 1, "", "write"]], "gammapy.maps.HpxNDMap": [[183, 3, 1, "", "coadd"], [183, 3, 1, "", "convolve"], [183, 3, 1, "", "convolve_full"], [183, 3, 1, "", "convolve_wcs"], [183, 3, 1, "", "copy"], [183, 3, 1, "", "create"], [183, 3, 1, "", "crop"], [183, 3, 1, "", "cumsum"], [183, 3, 1, "", "cutout"], [183, 2, 1, "", "data"], [183, 3, 1, "", "dot"], [183, 3, 1, "", "downsample"], [183, 3, 1, "", "fill_by_coord"], [183, 3, 1, "", "fill_by_idx"], [183, 3, 1, "", "fill_by_pix"], [183, 3, 1, "", "fill_events"], [183, 3, 1, "", "from_geom"], [183, 3, 1, "", "from_hdu"], [183, 3, 1, "", "from_hdulist"], [183, 3, 1, "", "from_stack"], [183, 3, 1, "", "from_wcs_tiles"], [183, 2, 1, "", "geom"], [183, 3, 1, "", "get_by_coord"], [183, 3, 1, "", "get_by_idx"], [183, 3, 1, "", "get_by_pix"], [183, 3, 1, "", "get_image_by_coord"], [183, 3, 1, "", "get_image_by_idx"], [183, 3, 1, "", "get_image_by_pix"], [183, 3, 1, "", "get_spectrum"], [183, 3, 1, "", "integral"], [183, 3, 1, "", "interp_by_coord"], [183, 3, 1, "", "interp_by_pix"], [183, 3, 1, "", "interp_to_geom"], [183, 3, 1, "", "is_allclose"], [183, 2, 1, "", "is_mask"], [183, 3, 1, "", "iter_by_axis"], [183, 3, 1, "", "iter_by_image"], [183, 3, 1, "", "iter_by_image_data"], [183, 3, 1, "", "iter_by_image_index"], [183, 3, 1, "", "mask_nearest_position"], [183, 2, 1, "", "meta"], [183, 3, 1, "", "normalize"], [183, 3, 1, "", "pad"], [183, 3, 1, "", "plot"], [183, 3, 1, "", "plot_grid"], [183, 3, 1, "", "plot_interactive"], [183, 3, 1, "", "plot_mask"], [183, 2, 1, "", "quantity"], [183, 3, 1, "", "read"], [183, 3, 1, "", "reduce"], [183, 3, 1, "", "reduce_over_axes"], [183, 3, 1, "", "rename_axes"], [183, 3, 1, "", "reorder_axes"], [183, 3, 1, "", "reproject_by_image"], [183, 3, 1, "", "reproject_to_geom"], [183, 3, 1, "", "resample"], [183, 3, 1, "", "resample_axis"], [183, 3, 1, "", "sample_coord"], [183, 3, 1, "", "set_by_coord"], [183, 3, 1, "", "set_by_idx"], [183, 3, 1, "", "set_by_pix"], [183, 3, 1, "", "slice_by_idx"], [183, 3, 1, "", "smooth"], [183, 3, 1, "", "split_by_axis"], [183, 3, 1, "", "stack"], [183, 3, 1, "", "sum_over_axes"], [183, 2, 1, "", "tag"], [183, 3, 1, "", "to_cube"], [183, 3, 1, "", "to_hdu"], [183, 3, 1, "", "to_hdulist"], [183, 3, 1, "", "to_nside"], [183, 3, 1, "", "to_region_nd_map"], [183, 3, 1, "", "to_swapped"], [183, 3, 1, "", "to_unit"], [183, 3, 1, "", "to_wcs"], [183, 3, 1, "", "to_wcs_tiles"], [183, 2, 1, "", "unit"], [183, 3, 1, "", "upsample"], [183, 3, 1, "", "write"]], "gammapy.maps.LabelMapAxis": [[184, 2, 1, "", "as_plot_center"], [184, 2, 1, "", "as_plot_edges"], [184, 2, 1, "", "as_plot_labels"], [184, 2, 1, "", "as_plot_xerr"], [184, 3, 1, "", "assert_name"], [184, 2, 1, "", "bin_width"], [184, 2, 1, "", "center"], [184, 3, 1, "", "concatenate"], [184, 3, 1, "", "coord_to_idx"], [184, 3, 1, "", "coord_to_pix"], [184, 3, 1, "", "copy"], [184, 3, 1, "", "downsample"], [184, 2, 1, "", "edges"], [184, 2, 1, "", "edges_max"], [184, 2, 1, "", "edges_min"], [184, 3, 1, "", "format_plot_xaxis"], [184, 3, 1, "", "from_stack"], [184, 3, 1, "", "from_table"], [184, 3, 1, "", "is_allclose"], [184, 2, 1, "", "name"], [184, 2, 1, "", "nbin"], [184, 2, 1, "", "node_type"], [184, 3, 1, "", "pad"], [184, 3, 1, "", "pix_to_coord"], [184, 3, 1, "", "pix_to_idx"], [184, 3, 1, "", "resample"], [184, 3, 1, "", "slice"], [184, 3, 1, "", "squash"], [184, 3, 1, "", "to_header"], [184, 2, 1, "", "unit"], [184, 3, 1, "", "upsample"]], "gammapy.maps.Map": [[185, 3, 1, "", "coadd"], [185, 3, 1, "", "copy"], [185, 3, 1, "", "create"], [185, 3, 1, "", "crop"], [185, 3, 1, "", "cumsum"], [185, 2, 1, "", "data"], [185, 3, 1, "", "dot"], [185, 3, 1, "", "downsample"], [185, 3, 1, "", "fill_by_coord"], [185, 3, 1, "", "fill_by_idx"], [185, 3, 1, "", "fill_by_pix"], [185, 3, 1, "", "fill_events"], [185, 3, 1, "", "from_geom"], [185, 3, 1, "", "from_hdulist"], [185, 3, 1, "", "from_stack"], [185, 2, 1, "", "geom"], [185, 3, 1, "", "get_by_coord"], [185, 3, 1, "", "get_by_idx"], [185, 3, 1, "", "get_by_pix"], [185, 3, 1, "", "get_image_by_coord"], [185, 3, 1, "", "get_image_by_idx"], [185, 3, 1, "", "get_image_by_pix"], [185, 3, 1, "", "get_spectrum"], [185, 3, 1, "", "integral"], [185, 3, 1, "", "interp_by_coord"], [185, 3, 1, "", "interp_by_pix"], [185, 3, 1, "", "interp_to_geom"], [185, 3, 1, "", "is_allclose"], [185, 2, 1, "", "is_mask"], [185, 3, 1, "", "iter_by_axis"], [185, 3, 1, "", "iter_by_image"], [185, 3, 1, "", "iter_by_image_data"], [185, 3, 1, "", "iter_by_image_index"], [185, 3, 1, "", "mask_nearest_position"], [185, 2, 1, "", "meta"], [185, 3, 1, "", "normalize"], [185, 3, 1, "", "pad"], [185, 3, 1, "", "plot_grid"], [185, 3, 1, "", "plot_interactive"], [185, 2, 1, "", "quantity"], [185, 3, 1, "", "read"], [185, 3, 1, "", "reduce"], [185, 3, 1, "", "reduce_over_axes"], [185, 3, 1, "", "rename_axes"], [185, 3, 1, "", "reorder_axes"], [185, 3, 1, "", "reproject_by_image"], [185, 3, 1, "", "reproject_to_geom"], [185, 3, 1, "", "resample"], [185, 3, 1, "", "resample_axis"], [185, 3, 1, "", "sample_coord"], [185, 3, 1, "", "set_by_coord"], [185, 3, 1, "", "set_by_idx"], [185, 3, 1, "", "set_by_pix"], [185, 3, 1, "", "slice_by_idx"], [185, 3, 1, "", "split_by_axis"], [185, 3, 1, "", "sum_over_axes"], [185, 2, 1, "", "tag"], [185, 3, 1, "", "to_cube"], [185, 3, 1, "", "to_unit"], [185, 2, 1, "", "unit"], [185, 3, 1, "", "upsample"], [185, 3, 1, "", "write"]], "gammapy.maps.MapAxes": [[186, 3, 1, "", "assert_names"], [186, 3, 1, "", "bin_volume"], [186, 2, 1, "", "center_coord"], [186, 3, 1, "", "coord_to_idx"], [186, 3, 1, "", "coord_to_pix"], [186, 3, 1, "", "copy"], [186, 3, 1, "", "count"], [186, 3, 1, "", "downsample"], [186, 3, 1, "", "drop"], [186, 3, 1, "", "from_default"], [186, 3, 1, "", "from_table"], [186, 3, 1, "", "from_table_hdu"], [186, 3, 1, "", "get_coord"], [186, 3, 1, "", "index"], [186, 3, 1, "", "index_data"], [186, 3, 1, "", "is_allclose"], [186, 2, 1, "", "is_flat"], [186, 2, 1, "", "is_unidimensional"], [186, 2, 1, "", "iter_with_reshape"], [186, 2, 1, "", "names"], [186, 3, 1, "", "pad"], [186, 3, 1, "", "pix_to_coord"], [186, 3, 1, "", "pix_to_idx"], [186, 2, 1, "", "primary_axis"], [186, 3, 1, "", "rename_axes"], [186, 3, 1, "", "replace"], [186, 3, 1, "", "resample"], [186, 2, 1, "", "reverse"], [186, 2, 1, "", "shape"], [186, 3, 1, "", "slice_by_idx"], [186, 3, 1, "", "squash"], [186, 3, 1, "", "to_header"], [186, 3, 1, "", "to_table"], [186, 3, 1, "", "to_table_hdu"], [186, 3, 1, "", "upsample"]], "gammapy.maps.MapAxis": [[187, 2, 1, "", "as_plot_center"], [187, 2, 1, "", "as_plot_edges"], [187, 2, 1, "", "as_plot_labels"], [187, 2, 1, "", "as_plot_scale"], [187, 2, 1, "", "as_plot_xerr"], [187, 3, 1, "", "assert_name"], [187, 2, 1, "", "bin_width"], [187, 2, 1, "", "bounds"], [187, 2, 1, "", "center"], [187, 3, 1, "", "concatenate"], [187, 3, 1, "", "coord_to_idx"], [187, 3, 1, "", "coord_to_pix"], [187, 3, 1, "", "copy"], [187, 3, 1, "", "downsample"], [187, 2, 1, "", "edges"], [187, 2, 1, "", "edges_max"], [187, 2, 1, "", "edges_min"], [187, 3, 1, "", "format_plot_xaxis"], [187, 3, 1, "", "format_plot_yaxis"], [187, 3, 1, "", "from_bounds"], [187, 3, 1, "", "from_edges"], [187, 3, 1, "", "from_energy_bounds"], [187, 3, 1, "", "from_energy_edges"], [187, 3, 1, "", "from_nodes"], [187, 3, 1, "", "from_stack"], [187, 3, 1, "", "from_table"], [187, 3, 1, "", "from_table_hdu"], [187, 3, 1, "", "group_table"], [187, 2, 1, "", "interp"], [187, 3, 1, "", "is_aligned"], [187, 3, 1, "", "is_allclose"], [187, 2, 1, "", "is_energy_axis"], [187, 2, 1, "", "iter_by_edges"], [187, 2, 1, "", "name"], [187, 2, 1, "", "nbin"], [187, 2, 1, "", "nbin_per_decade"], [187, 2, 1, "", "node_type"], [187, 3, 1, "", "pad"], [187, 3, 1, "", "pix_to_coord"], [187, 3, 1, "", "pix_to_idx"], [187, 3, 1, "", "rename"], [187, 3, 1, "", "round"], [187, 3, 1, "", "slice"], [187, 3, 1, "", "squash"], [187, 3, 1, "", "to_header"], [187, 3, 1, "", "to_node_type"], [187, 3, 1, "", "to_table"], [187, 3, 1, "", "to_table_hdu"], [187, 2, 1, "", "unit"], [187, 3, 1, "", "upsample"], [187, 2, 1, "", "use_center_as_plot_labels"]], "gammapy.maps.MapCoord": [[188, 3, 1, "", "apply_mask"], [188, 2, 1, "", "axis_names"], [188, 2, 1, "", "broadcasted"], [188, 3, 1, "", "copy"], [188, 3, 1, "", "create"], [188, 2, 1, "", "flat"], [188, 2, 1, "", "frame"], [188, 2, 1, "", "lat"], [188, 2, 1, "", "lon"], [188, 2, 1, "", "match_by_name"], [188, 2, 1, "", "ndim"], [188, 2, 1, "", "phi"], [188, 2, 1, "", "shape"], [188, 2, 1, "", "size"], [188, 2, 1, "", "skycoord"], [188, 2, 1, "", "theta"], [188, 3, 1, "", "to_frame"]], "gammapy.maps.Maps": [[189, 3, 1, "", "clear"], [189, 3, 1, "", "from_geom"], [189, 3, 1, "", "from_hdulist"], [189, 2, 1, "", "geom"], [189, 3, 1, "", "get"], [189, 3, 1, "", "items"], [189, 3, 1, "", "keys"], [189, 3, 1, "", "pop"], [189, 3, 1, "", "popitem"], [189, 3, 1, "", "read"], [189, 3, 1, "", "setdefault"], [189, 3, 1, "", "to_hdulist"], [189, 3, 1, "", "update"], [189, 3, 1, "", "values"], [189, 3, 1, "", "write"]], "gammapy.maps.RegionGeom": [[190, 2, 1, "", "as_energy_true"], [190, 2, 1, "", "axes"], [190, 2, 1, "", "axes_names"], [190, 3, 1, "", "bin_volume"], [190, 2, 1, "", "binsz_wcs"], [190, 2, 1, "", "center_coord"], [190, 2, 1, "", "center_pix"], [190, 2, 1, "", "center_skydir"], [190, 3, 1, "", "contains"], [190, 3, 1, "", "contains_pix"], [190, 3, 1, "", "contains_wcs_pix"], [190, 3, 1, "", "coord_to_idx"], [190, 3, 1, "", "coord_to_pix"], [190, 3, 1, "", "copy"], [190, 3, 1, "", "create"], [190, 3, 1, "", "crop"], [190, 3, 1, "", "data_nbytes"], [190, 2, 1, "", "data_shape"], [190, 2, 1, "", "data_shape_axes"], [190, 3, 1, "", "downsample"], [190, 3, 1, "", "drop"], [190, 3, 1, "", "energy_mask"], [190, 2, 1, "", "frame"], [190, 3, 1, "", "from_hdulist"], [190, 3, 1, "", "from_regions"], [190, 3, 1, "", "get_coord"], [190, 3, 1, "", "get_idx"], [190, 3, 1, "", "get_wcs_coord_and_weights"], [190, 2, 1, "", "has_energy_axis"], [190, 2, 1, "", "is_all_point_sky_regions"], [190, 3, 1, "", "is_allclose"], [190, 2, 1, "", "is_allsky"], [190, 2, 1, "", "is_flat"], [190, 2, 1, "", "is_hpx"], [190, 2, 1, "", "is_image"], [190, 2, 1, "", "is_region"], [190, 2, 1, "", "is_regular"], [190, 2, 1, "", "npix"], [190, 3, 1, "", "pad"], [190, 3, 1, "", "pix_to_coord"], [190, 3, 1, "", "pix_to_idx"], [190, 3, 1, "", "plot_region"], [190, 2, 1, "", "projection"], [190, 2, 1, "", "region"], [190, 3, 1, "", "rename_axes"], [190, 3, 1, "", "replace_axis"], [190, 3, 1, "", "resample_axis"], [190, 3, 1, "", "separation"], [190, 3, 1, "", "slice_by_idx"], [190, 3, 1, "", "solid_angle"], [190, 3, 1, "", "squash"], [190, 3, 1, "", "to_bands_hdu"], [190, 3, 1, "", "to_binsz"], [190, 3, 1, "", "to_binsz_wcs"], [190, 3, 1, "", "to_cube"], [190, 3, 1, "", "to_hdulist"], [190, 3, 1, "", "to_image"], [190, 3, 1, "", "to_wcs_geom"], [190, 3, 1, "", "union"], [190, 3, 1, "", "upsample"], [190, 2, 1, "", "wcs"], [190, 2, 1, "", "width"]], "gammapy.maps.RegionNDMap": [[191, 3, 1, "", "coadd"], [191, 3, 1, "", "copy"], [191, 3, 1, "", "create"], [191, 3, 1, "", "crop"], [191, 3, 1, "", "cumsum"], [191, 3, 1, "", "cutout"], [191, 2, 1, "", "data"], [191, 3, 1, "", "dot"], [191, 3, 1, "", "downsample"], [191, 3, 1, "", "fill_by_coord"], [191, 3, 1, "", "fill_by_idx"], [191, 3, 1, "", "fill_by_pix"], [191, 3, 1, "", "fill_events"], [191, 3, 1, "", "from_geom"], [191, 3, 1, "", "from_hdulist"], [191, 3, 1, "", "from_stack"], [191, 3, 1, "", "from_table"], [191, 2, 1, "", "geom"], [191, 3, 1, "", "get_by_coord"], [191, 3, 1, "", "get_by_idx"], [191, 3, 1, "", "get_by_pix"], [191, 3, 1, "", "get_image_by_coord"], [191, 3, 1, "", "get_image_by_idx"], [191, 3, 1, "", "get_image_by_pix"], [191, 3, 1, "", "get_spectrum"], [191, 3, 1, "", "integral"], [191, 3, 1, "", "interp_by_coord"], [191, 3, 1, "", "interp_by_pix"], [191, 3, 1, "", "interp_to_geom"], [191, 3, 1, "", "is_allclose"], [191, 2, 1, "", "is_mask"], [191, 3, 1, "", "iter_by_axis"], [191, 3, 1, "", "iter_by_axis_data"], [191, 3, 1, "", "iter_by_image"], [191, 3, 1, "", "iter_by_image_data"], [191, 3, 1, "", "iter_by_image_index"], [191, 3, 1, "", "mask_nearest_position"], [191, 2, 1, "", "meta"], [191, 3, 1, "", "normalize"], [191, 3, 1, "", "pad"], [191, 3, 1, "", "plot"], [191, 3, 1, "", "plot_grid"], [191, 3, 1, "", "plot_hist"], [191, 3, 1, "", "plot_interactive"], [191, 3, 1, "", "plot_mask"], [191, 3, 1, "", "plot_region"], [191, 2, 1, "", "quantity"], [191, 3, 1, "", "read"], [191, 3, 1, "", "reduce"], [191, 3, 1, "", "reduce_over_axes"], [191, 3, 1, "", "rename_axes"], [191, 3, 1, "", "reorder_axes"], [191, 3, 1, "", "reproject_by_image"], [191, 3, 1, "", "reproject_to_geom"], [191, 3, 1, "", "resample"], [191, 3, 1, "", "resample_axis"], [191, 3, 1, "", "sample_coord"], [191, 3, 1, "", "set_by_coord"], [191, 3, 1, "", "set_by_idx"], [191, 3, 1, "", "set_by_pix"], [191, 3, 1, "", "slice_by_idx"], [191, 3, 1, "", "split_by_axis"], [191, 3, 1, "", "stack"], [191, 3, 1, "", "sum_over_axes"], [191, 2, 1, "", "tag"], [191, 3, 1, "", "to_cube"], [191, 3, 1, "", "to_hdulist"], [191, 3, 1, "", "to_region_nd_map"], [191, 3, 1, "", "to_table"], [191, 3, 1, "", "to_unit"], [191, 2, 1, "", "unit"], [191, 3, 1, "", "upsample"], [191, 3, 1, "", "write"]], "gammapy.maps.TimeMapAxis": [[192, 2, 1, "", "as_plot_center"], [192, 2, 1, "", "as_plot_edges"], [192, 2, 1, "", "as_plot_labels"], [192, 2, 1, "", "as_plot_xerr"], [192, 3, 1, "", "assert_name"], [192, 2, 1, "", "bin_width"], [192, 2, 1, "", "bounds"], [192, 2, 1, "", "center"], [192, 3, 1, "", "coord_to_idx"], [192, 3, 1, "", "coord_to_pix"], [192, 3, 1, "", "copy"], [192, 3, 1, "", "downsample"], [192, 2, 1, "", "edges"], [192, 2, 1, "", "edges_max"], [192, 2, 1, "", "edges_min"], [192, 3, 1, "", "format_plot_xaxis"], [192, 3, 1, "", "from_gti"], [192, 3, 1, "", "from_gti_bounds"], [192, 3, 1, "", "from_table"], [192, 3, 1, "", "from_time_bounds"], [192, 3, 1, "", "from_time_edges"], [192, 3, 1, "", "group_table"], [192, 2, 1, "", "interp"], [192, 3, 1, "", "is_aligned"], [192, 3, 1, "", "is_allclose"], [192, 2, 1, "", "is_contiguous"], [192, 2, 1, "", "iter_by_edges"], [192, 2, 1, "", "name"], [192, 2, 1, "", "nbin"], [192, 2, 1, "", "node_type"], [192, 3, 1, "", "pix_to_coord"], [192, 3, 1, "", "pix_to_idx"], [192, 2, 1, "", "reference_time"], [192, 3, 1, "", "slice"], [192, 3, 1, "", "squash"], [192, 2, 1, "", "time_bounds"], [192, 2, 1, "", "time_delta"], [192, 2, 1, "", "time_edges"], [192, 2, 1, "", "time_format"], [192, 2, 1, "", "time_max"], [192, 2, 1, "", "time_mid"], [192, 2, 1, "", "time_min"], [192, 3, 1, "", "to_contiguous"], [192, 3, 1, "", "to_gti"], [192, 3, 1, "", "to_header"], [192, 2, 1, "", "unit"], [192, 3, 1, "", "upsample"]], "gammapy.maps.WcsGeom": [[193, 2, 1, "", "as_energy_true"], [193, 2, 1, "", "axes"], [193, 2, 1, "", "axes_names"], [193, 3, 1, "", "bin_volume"], [193, 3, 1, "", "binary_structure"], [193, 3, 1, "", "boundary_mask"], [193, 2, 1, "", "center_coord"], [193, 2, 1, "", "center_pix"], [193, 2, 1, "", "center_skydir"], [193, 3, 1, "", "contains"], [193, 3, 1, "", "contains_pix"], [193, 3, 1, "", "coord_to_idx"], [193, 3, 1, "", "coord_to_pix"], [193, 3, 1, "", "copy"], [193, 3, 1, "", "create"], [193, 3, 1, "", "crop"], [193, 3, 1, "", "cutout"], [193, 3, 1, "", "cutout_slices"], [193, 3, 1, "", "data_nbytes"], [193, 2, 1, "", "data_shape"], [193, 2, 1, "", "data_shape_axes"], [193, 2, 1, "", "data_shape_image"], [193, 3, 1, "", "downsample"], [193, 3, 1, "", "drop"], [193, 3, 1, "", "energy_mask"], [193, 2, 1, "", "footprint"], [193, 2, 1, "", "footprint_rectangle_sky_region"], [193, 2, 1, "", "frame"], [193, 3, 1, "", "from_aligned"], [193, 3, 1, "", "from_hdulist"], [193, 3, 1, "", "from_header"], [193, 3, 1, "", "get_coord"], [193, 3, 1, "", "get_idx"], [193, 3, 1, "", "get_pix"], [193, 2, 1, "", "has_energy_axis"], [193, 3, 1, "", "is_aligned"], [193, 3, 1, "", "is_allclose"], [193, 2, 1, "", "is_allsky"], [193, 2, 1, "", "is_flat"], [193, 2, 1, "", "is_hpx"], [193, 2, 1, "", "is_image"], [193, 2, 1, "", "is_region"], [193, 2, 1, "", "is_regular"], [193, 2, 1, "", "ndim"], [193, 2, 1, "", "npix"], [193, 3, 1, "", "pad"], [193, 3, 1, "", "pix_to_coord"], [193, 3, 1, "", "pix_to_idx"], [193, 2, 1, "", "pixel_area"], [193, 2, 1, "", "pixel_scales"], [193, 2, 1, "", "projection"], [193, 3, 1, "", "region_mask"], [193, 3, 1, "", "region_weights"], [193, 3, 1, "", "rename_axes"], [193, 3, 1, "", "replace_axis"], [193, 3, 1, "", "resample_axis"], [193, 3, 1, "", "separation"], [193, 2, 1, "", "shape_axes"], [193, 3, 1, "", "slice_by_idx"], [193, 3, 1, "", "solid_angle"], [193, 3, 1, "", "squash"], [193, 3, 1, "", "to_bands_hdu"], [193, 3, 1, "", "to_binsz"], [193, 3, 1, "", "to_cube"], [193, 3, 1, "", "to_even_npix"], [193, 3, 1, "", "to_header"], [193, 3, 1, "", "to_image"], [193, 3, 1, "", "to_odd_npix"], [193, 3, 1, "", "upsample"], [193, 2, 1, "", "wcs"], [193, 2, 1, "", "width"]], "gammapy.maps.WcsMap": [[194, 3, 1, "", "coadd"], [194, 3, 1, "", "copy"], [194, 3, 1, "", "create"], [194, 3, 1, "", "crop"], [194, 3, 1, "", "cumsum"], [194, 2, 1, "", "data"], [194, 3, 1, "", "dot"], [194, 3, 1, "", "downsample"], [194, 3, 1, "", "fill_by_coord"], [194, 3, 1, "", "fill_by_idx"], [194, 3, 1, "", "fill_by_pix"], [194, 3, 1, "", "fill_events"], [194, 3, 1, "", "from_geom"], [194, 3, 1, "", "from_hdulist"], [194, 3, 1, "", "from_stack"], [194, 2, 1, "", "geom"], [194, 3, 1, "", "get_by_coord"], [194, 3, 1, "", "get_by_idx"], [194, 3, 1, "", "get_by_pix"], [194, 3, 1, "", "get_image_by_coord"], [194, 3, 1, "", "get_image_by_idx"], [194, 3, 1, "", "get_image_by_pix"], [194, 3, 1, "", "get_spectrum"], [194, 3, 1, "", "integral"], [194, 3, 1, "", "interp_by_coord"], [194, 3, 1, "", "interp_by_pix"], [194, 3, 1, "", "interp_to_geom"], [194, 3, 1, "", "is_allclose"], [194, 2, 1, "", "is_mask"], [194, 3, 1, "", "iter_by_axis"], [194, 3, 1, "", "iter_by_image"], [194, 3, 1, "", "iter_by_image_data"], [194, 3, 1, "", "iter_by_image_index"], [194, 3, 1, "", "mask_nearest_position"], [194, 2, 1, "", "meta"], [194, 3, 1, "", "normalize"], [194, 3, 1, "", "pad"], [194, 3, 1, "", "plot_grid"], [194, 3, 1, "", "plot_interactive"], [194, 2, 1, "", "quantity"], [194, 3, 1, "", "read"], [194, 3, 1, "", "reduce"], [194, 3, 1, "", "reduce_over_axes"], [194, 3, 1, "", "rename_axes"], [194, 3, 1, "", "reorder_axes"], [194, 3, 1, "", "reproject_by_image"], [194, 3, 1, "", "reproject_to_geom"], [194, 3, 1, "", "resample"], [194, 3, 1, "", "resample_axis"], [194, 3, 1, "", "sample_coord"], [194, 3, 1, "", "set_by_coord"], [194, 3, 1, "", "set_by_idx"], [194, 3, 1, "", "set_by_pix"], [194, 3, 1, "", "slice_by_idx"], [194, 3, 1, "", "split_by_axis"], [194, 3, 1, "", "sum_over_axes"], [194, 2, 1, "", "tag"], [194, 3, 1, "", "to_cube"], [194, 3, 1, "", "to_hdu"], [194, 3, 1, "", "to_hdulist"], [194, 3, 1, "", "to_unit"], [194, 2, 1, "", "unit"], [194, 3, 1, "", "upsample"], [194, 3, 1, "", "write"]], "gammapy.maps.WcsNDMap": [[195, 3, 1, "", "binary_dilate"], [195, 3, 1, "", "binary_erode"], [195, 3, 1, "", "coadd"], [195, 3, 1, "", "convolve"], [195, 3, 1, "", "copy"], [195, 3, 1, "", "create"], [195, 3, 1, "", "crop"], [195, 3, 1, "", "cumsum"], [195, 3, 1, "", "cutout"], [195, 3, 1, "", "cutout_and_mask_region"], [195, 2, 1, "", "data"], [195, 3, 1, "", "dot"], [195, 3, 1, "", "downsample"], [195, 3, 1, "", "fill_by_coord"], [195, 3, 1, "", "fill_by_idx"], [195, 3, 1, "", "fill_by_pix"], [195, 3, 1, "", "fill_events"], [195, 3, 1, "", "from_geom"], [195, 3, 1, "", "from_hdu"], [195, 3, 1, "", "from_hdulist"], [195, 3, 1, "", "from_stack"], [195, 2, 1, "", "geom"], [195, 3, 1, "", "get_by_coord"], [195, 3, 1, "", "get_by_idx"], [195, 3, 1, "", "get_by_pix"], [195, 3, 1, "", "get_image_by_coord"], [195, 3, 1, "", "get_image_by_idx"], [195, 3, 1, "", "get_image_by_pix"], [195, 3, 1, "", "get_spectrum"], [195, 3, 1, "", "integral"], [195, 3, 1, "", "interp_by_coord"], [195, 3, 1, "", "interp_by_pix"], [195, 3, 1, "", "interp_to_geom"], [195, 3, 1, "", "is_allclose"], [195, 2, 1, "", "is_mask"], [195, 3, 1, "", "iter_by_axis"], [195, 3, 1, "", "iter_by_image"], [195, 3, 1, "", "iter_by_image_data"], [195, 3, 1, "", "iter_by_image_index"], [195, 3, 1, "", "mask_contains_region"], [195, 3, 1, "", "mask_nearest_position"], [195, 2, 1, "", "meta"], [195, 3, 1, "", "normalize"], [195, 3, 1, "", "pad"], [195, 3, 1, "", "plot"], [195, 3, 1, "", "plot_grid"], [195, 3, 1, "", "plot_interactive"], [195, 3, 1, "", "plot_mask"], [195, 2, 1, "", "quantity"], [195, 3, 1, "", "read"], [195, 3, 1, "", "reduce"], [195, 3, 1, "", "reduce_over_axes"], [195, 3, 1, "", "rename_axes"], [195, 3, 1, "", "reorder_axes"], [195, 3, 1, "", "reproject_by_image"], [195, 3, 1, "", "reproject_to_geom"], [195, 3, 1, "", "resample"], [195, 3, 1, "", "resample_axis"], [195, 3, 1, "", "sample_coord"], [195, 3, 1, "", "set_by_coord"], [195, 3, 1, "", "set_by_idx"], [195, 3, 1, "", "set_by_pix"], [195, 3, 1, "", "slice_by_idx"], [195, 3, 1, "", "smooth"], [195, 3, 1, "", "split_by_axis"], [195, 3, 1, "", "stack"], [195, 3, 1, "", "sum_over_axes"], [195, 2, 1, "", "tag"], [195, 3, 1, "", "to_cube"], [195, 3, 1, "", "to_hdu"], [195, 3, 1, "", "to_hdulist"], [195, 3, 1, "", "to_region_nd_map"], [195, 3, 1, "", "to_region_nd_map_histogram"], [195, 3, 1, "", "to_unit"], [195, 2, 1, "", "unit"], [195, 3, 1, "", "upsample"], [195, 3, 1, "", "write"]], "gammapy.modeling": [[198, 1, 1, "", "Covariance"], [199, 1, 1, "", "Fit"], [200, 1, 1, "", "Parameter"], [201, 1, 1, "", "Parameters"], [202, 1, 1, "", "PriorParameter"], [203, 1, 1, "", "PriorParameters"], [10, 0, 0, "-", "models"], [269, 4, 1, "", "select_nested_models"], [270, 4, 1, "", "stat_profile_ul_scipy"]], "gammapy.modeling.Covariance": [[198, 2, 1, "", "correlation"], [198, 2, 1, "", "data"], [198, 3, 1, "", "from_factor_matrix"], [198, 3, 1, "", "from_stack"], [198, 3, 1, "", "get_subcovariance"], [198, 3, 1, "", "plot_correlation"], [198, 2, 1, "", "scipy_mvn"], [198, 3, 1, "", "set_subcovariance"], [198, 2, 1, "", "shape"]], "gammapy.modeling.Fit": [[199, 3, 1, "", "confidence"], [199, 3, 1, "", "covariance"], [199, 3, 1, "", "optimize"], [199, 3, 1, "", "run"], [199, 3, 1, "", "stat_contour"], [199, 3, 1, "", "stat_profile"], [199, 3, 1, "", "stat_surface"]], "gammapy.modeling.Parameter": [[200, 3, 1, "", "autoscale"], [200, 3, 1, "", "check_limits"], [200, 2, 1, "", "conf_max"], [200, 2, 1, "", "conf_min"], [200, 3, 1, "", "copy"], [200, 2, 1, "", "error"], [200, 2, 1, "", "factor"], [200, 2, 1, "", "factor_max"], [200, 2, 1, "", "factor_min"], [200, 2, 1, "", "frozen"], [200, 2, 1, "", "is_norm"], [200, 2, 1, "", "max"], [200, 2, 1, "", "min"], [200, 2, 1, "", "name"], [200, 2, 1, "", "norm_parameters"], [200, 2, 1, "", "prior"], [200, 3, 1, "", "prior_stat_sum"], [200, 2, 1, "", "quantity"], [200, 2, 1, "", "scale"], [200, 2, 1, "", "scale_method"], [200, 2, 1, "", "scan_max"], [200, 2, 1, "", "scan_min"], [200, 2, 1, "", "scan_n_sigma"], [200, 2, 1, "", "scan_values"], [200, 3, 1, "", "to_dict"], [200, 2, 1, "", "type"], [200, 2, 1, "", "unit"], [200, 3, 1, "", "update_from_dict"], [200, 2, 1, "", "value"]], "gammapy.modeling.Parameters": [[201, 3, 1, "", "autoscale"], [201, 3, 1, "", "check_limits"], [201, 3, 1, "", "copy"], [201, 3, 1, "", "count"], [201, 2, 1, "", "free_parameters"], [201, 3, 1, "", "freeze_all"], [201, 3, 1, "", "from_dict"], [201, 3, 1, "", "from_stack"], [201, 3, 1, "", "index"], [201, 2, 1, "", "max"], [201, 2, 1, "", "min"], [201, 2, 1, "", "names"], [201, 2, 1, "", "norm_parameters"], [201, 2, 1, "", "prior"], [201, 3, 1, "", "prior_stat_sum"], [201, 3, 1, "", "restore_status"], [201, 3, 1, "", "select"], [201, 3, 1, "", "set_parameter_factors"], [201, 3, 1, "", "to_dict"], [201, 3, 1, "", "to_table"], [201, 2, 1, "", "types"], [201, 3, 1, "", "unfreeze_all"], [201, 2, 1, "", "unique_parameters"], [201, 2, 1, "", "value"]], "gammapy.modeling.PriorParameter": [[202, 3, 1, "", "autoscale"], [202, 3, 1, "", "check_limits"], [202, 2, 1, "", "conf_max"], [202, 2, 1, "", "conf_min"], [202, 3, 1, "", "copy"], [202, 2, 1, "", "error"], [202, 2, 1, "", "factor"], [202, 2, 1, "", "factor_max"], [202, 2, 1, "", "factor_min"], [202, 2, 1, "", "frozen"], [202, 2, 1, "", "is_norm"], [202, 2, 1, "", "max"], [202, 2, 1, "", "min"], [202, 2, 1, "", "name"], [202, 2, 1, "", "norm_parameters"], [202, 2, 1, "", "prior"], [202, 3, 1, "", "prior_stat_sum"], [202, 2, 1, "", "quantity"], [202, 2, 1, "", "scale"], [202, 2, 1, "", "scale_method"], [202, 2, 1, "", "scan_max"], [202, 2, 1, "", "scan_min"], [202, 2, 1, "", "scan_n_sigma"], [202, 2, 1, "", "scan_values"], [202, 3, 1, "", "to_dict"], [202, 2, 1, "", "type"], [202, 2, 1, "", "unit"], [202, 3, 1, "", "update_from_dict"], [202, 2, 1, "", "value"]], "gammapy.modeling.PriorParameters": [[203, 3, 1, "", "autoscale"], [203, 3, 1, "", "check_limits"], [203, 3, 1, "", "copy"], [203, 3, 1, "", "count"], [203, 2, 1, "", "free_parameters"], [203, 3, 1, "", "freeze_all"], [203, 3, 1, "", "from_dict"], [203, 3, 1, "", "from_stack"], [203, 3, 1, "", "index"], [203, 2, 1, "", "max"], [203, 2, 1, "", "min"], [203, 2, 1, "", "names"], [203, 2, 1, "", "norm_parameters"], [203, 2, 1, "", "prior"], [203, 3, 1, "", "prior_stat_sum"], [203, 3, 1, "", "restore_status"], [203, 3, 1, "", "select"], [203, 3, 1, "", "set_parameter_factors"], [203, 3, 1, "", "to_dict"], [203, 3, 1, "", "to_table"], [203, 2, 1, "", "types"], [203, 3, 1, "", "unfreeze_all"], [203, 2, 1, "", "unique_parameters"], [203, 2, 1, "", "value"]], "gammapy.modeling.models": [[204, 1, 1, "", "BrokenPowerLawSpectralModel"], [205, 1, 1, "", "CompoundSpectralModel"], [206, 1, 1, "", "ConstantFluxSpatialModel"], [207, 1, 1, "", "ConstantSpatialModel"], [208, 1, 1, "", "ConstantSpectralModel"], [209, 1, 1, "", "ConstantTemporalModel"], [210, 1, 1, "", "DatasetModels"], [211, 1, 1, "", "DiskSpatialModel"], [212, 1, 1, "", "EBLAbsorptionNormSpectralModel"], [213, 5, 1, "", "EBL_DATA_BUILTIN"], [214, 1, 1, "", "ExpCutoffPowerLaw3FGLSpectralModel"], [215, 1, 1, "", "ExpCutoffPowerLawNormSpectralModel"], [216, 1, 1, "", "ExpCutoffPowerLawSpectralModel"], [217, 1, 1, "", "ExpDecayTemporalModel"], [218, 1, 1, "", "FoVBackgroundModel"], [219, 1, 1, "", "GaussianSpatialModel"], [220, 1, 1, "", "GaussianSpectralModel"], [221, 1, 1, "", "GaussianTemporalModel"], [222, 1, 1, "", "GeneralizedGaussianSpatialModel"], [223, 1, 1, "", "GeneralizedGaussianTemporalModel"], [224, 1, 1, "", "LightCurveTemplateTemporalModel"], [225, 1, 1, "", "LinearTemporalModel"], [226, 1, 1, "", "LogParabolaNormSpectralModel"], [227, 1, 1, "", "LogParabolaSpectralModel"], [228, 5, 1, "", "MODEL_REGISTRY"], [229, 1, 1, "", "MeyerCrabSpectralModel"], [230, 1, 1, "", "Model"], [231, 1, 1, "", "ModelBase"], [232, 1, 1, "", "Models"], [233, 1, 1, "", "NaimaSpectralModel"], [234, 1, 1, "", "PiecewiseNormSpatialModel"], [235, 1, 1, "", "PiecewiseNormSpectralModel"], [236, 1, 1, "", "PointSpatialModel"], [237, 1, 1, "", "PowerLaw2SpectralModel"], [238, 1, 1, "", "PowerLawNormSpectralModel"], [239, 1, 1, "", "PowerLawSpectralModel"], [240, 1, 1, "", "PowerLawTemporalModel"], [241, 5, 1, "", "SPATIAL_MODEL_REGISTRY"], [242, 5, 1, "", "SPECTRAL_MODEL_REGISTRY"], [243, 1, 1, "", "ScaleSpectralModel"], [244, 1, 1, "", "Shell2SpatialModel"], [245, 1, 1, "", "ShellSpatialModel"], [246, 1, 1, "", "SineTemporalModel"], [247, 1, 1, "", "SkyModel"], [248, 1, 1, "", "SmoothBrokenPowerLawSpectralModel"], [249, 1, 1, "", "SpatialModel"], [250, 1, 1, "", "SpectralModel"], [251, 1, 1, "", "SuperExpCutoffPowerLaw3FGLSpectralModel"], [252, 1, 1, "", "SuperExpCutoffPowerLaw4FGLDR3SpectralModel"], [253, 1, 1, "", "SuperExpCutoffPowerLaw4FGLSpectralModel"], [254, 5, 1, "", "TEMPORAL_MODEL_REGISTRY"], [255, 1, 1, "", "TemplateNDSpatialModel"], [256, 1, 1, "", "TemplateNDSpectralModel"], [257, 1, 1, "", "TemplateNPredModel"], [258, 1, 1, "", "TemplatePhaseCurveTemporalModel"], [259, 1, 1, "", "TemplateSpatialModel"], [260, 1, 1, "", "TemplateSpectralModel"], [261, 1, 1, "", "TemporalModel"], [262, 4, 1, "", "create_cosmic_ray_spectral_model"], [263, 4, 1, "", "create_crab_spectral_model"], [264, 4, 1, "", "create_fermi_isotropic_diffuse_model"], [265, 4, 1, "", "integrate_spectrum"], [266, 4, 1, "", "read_hermes_cube"], [267, 4, 1, "", "scale_plot_flux"], [10, 0, 0, "-", "utils"]], "gammapy.modeling.models.BrokenPowerLawSpectralModel": [[204, 3, 1, "", "__call__"], [204, 2, 1, "", "amplitude"], [204, 3, 1, "", "copy"], [204, 2, 1, "", "covariance"], [204, 2, 1, "", "default_parameters"], [204, 2, 1, "", "ebreak"], [204, 3, 1, "", "energy_flux"], [204, 3, 1, "", "energy_flux_error"], [204, 3, 1, "", "evaluate"], [204, 3, 1, "", "evaluate_error"], [204, 3, 1, "", "freeze"], [204, 3, 1, "", "from_dict"], [204, 3, 1, "", "from_parameters"], [204, 2, 1, "", "frozen"], [204, 2, 1, "", "index1"], [204, 2, 1, "", "index2"], [204, 3, 1, "", "integral"], [204, 3, 1, "", "integral_error"], [204, 3, 1, "", "inverse"], [204, 3, 1, "", "inverse_all"], [204, 2, 1, "", "is_norm_spectral_model"], [204, 2, 1, "", "parameters"], [204, 2, 1, "", "pivot_energy"], [204, 3, 1, "", "plot"], [204, 3, 1, "", "plot_error"], [204, 3, 1, "", "reassign"], [204, 3, 1, "", "reference_fluxes"], [204, 3, 1, "", "spectral_index"], [204, 3, 1, "", "spectral_index_error"], [204, 2, 1, "", "tag"], [204, 3, 1, "", "to_dict"], [204, 2, 1, "", "type"], [204, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.CompoundSpectralModel": [[205, 3, 1, "", "__call__"], [205, 3, 1, "", "copy"], [205, 2, 1, "", "covariance"], [205, 2, 1, "", "default_parameters"], [205, 3, 1, "", "energy_flux"], [205, 3, 1, "", "energy_flux_error"], [205, 3, 1, "", "evaluate"], [205, 3, 1, "", "evaluate_error"], [205, 3, 1, "", "freeze"], [205, 3, 1, "", "from_dict"], [205, 3, 1, "", "from_parameters"], [205, 2, 1, "", "frozen"], [205, 3, 1, "", "integral"], [205, 3, 1, "", "integral_error"], [205, 3, 1, "", "inverse"], [205, 3, 1, "", "inverse_all"], [205, 2, 1, "", "is_norm_spectral_model"], [205, 2, 1, "", "parameters"], [205, 2, 1, "", "pivot_energy"], [205, 3, 1, "", "plot"], [205, 3, 1, "", "plot_error"], [205, 3, 1, "", "reassign"], [205, 3, 1, "", "reference_fluxes"], [205, 3, 1, "", "spectral_index"], [205, 3, 1, "", "spectral_index_error"], [205, 2, 1, "", "tag"], [205, 3, 1, "", "to_dict"], [205, 2, 1, "", "type"], [205, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantFluxSpatialModel": [[206, 3, 1, "", "__call__"], [206, 3, 1, "", "copy"], [206, 2, 1, "", "covariance"], [206, 2, 1, "", "default_parameters"], [206, 3, 1, "", "evaluate"], [206, 3, 1, "", "evaluate_geom"], [206, 2, 1, "", "evaluation_bin_size_min"], [206, 2, 1, "", "evaluation_radius"], [206, 2, 1, "", "evaluation_region"], [206, 2, 1, "", "frame"], [206, 3, 1, "", "freeze"], [206, 3, 1, "", "from_dict"], [206, 3, 1, "", "from_parameters"], [206, 3, 1, "", "from_position"], [206, 2, 1, "", "frozen"], [206, 3, 1, "", "integrate_geom"], [206, 2, 1, "", "is_energy_dependent"], [206, 2, 1, "", "parameters"], [206, 2, 1, "", "phi_0"], [206, 3, 1, "", "plot"], [206, 3, 1, "", "plot_error"], [206, 3, 1, "", "plot_grid"], [206, 3, 1, "", "plot_interactive"], [206, 3, 1, "", "plot_position_error"], [206, 2, 1, "", "position"], [206, 2, 1, "", "position_error"], [206, 2, 1, "", "position_lonlat"], [206, 3, 1, "", "reassign"], [206, 2, 1, "", "tag"], [206, 3, 1, "", "to_dict"], [206, 3, 1, "", "to_region"], [206, 2, 1, "", "type"], [206, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantSpatialModel": [[207, 3, 1, "", "__call__"], [207, 3, 1, "", "copy"], [207, 2, 1, "", "covariance"], [207, 2, 1, "", "default_parameters"], [207, 3, 1, "", "evaluate"], [207, 3, 1, "", "evaluate_geom"], [207, 2, 1, "", "evaluation_bin_size_min"], [207, 2, 1, "", "evaluation_radius"], [207, 2, 1, "", "evaluation_region"], [207, 2, 1, "", "frame"], [207, 3, 1, "", "freeze"], [207, 3, 1, "", "from_dict"], [207, 3, 1, "", "from_parameters"], [207, 3, 1, "", "from_position"], [207, 2, 1, "", "frozen"], [207, 3, 1, "", "integrate_geom"], [207, 2, 1, "", "is_energy_dependent"], [207, 2, 1, "", "parameters"], [207, 2, 1, "", "phi_0"], [207, 3, 1, "", "plot"], [207, 3, 1, "", "plot_error"], [207, 3, 1, "", "plot_grid"], [207, 3, 1, "", "plot_interactive"], [207, 3, 1, "", "plot_position_error"], [207, 2, 1, "", "position"], [207, 2, 1, "", "position_error"], [207, 2, 1, "", "position_lonlat"], [207, 3, 1, "", "reassign"], [207, 2, 1, "", "tag"], [207, 3, 1, "", "to_dict"], [207, 3, 1, "", "to_region"], [207, 2, 1, "", "type"], [207, 3, 1, "", "unfreeze"], [207, 2, 1, "", "value"]], "gammapy.modeling.models.ConstantSpectralModel": [[208, 3, 1, "", "__call__"], [208, 2, 1, "", "const"], [208, 3, 1, "", "copy"], [208, 2, 1, "", "covariance"], [208, 2, 1, "", "default_parameters"], [208, 3, 1, "", "energy_flux"], [208, 3, 1, "", "energy_flux_error"], [208, 3, 1, "", "evaluate"], [208, 3, 1, "", "evaluate_error"], [208, 3, 1, "", "freeze"], [208, 3, 1, "", "from_dict"], [208, 3, 1, "", "from_parameters"], [208, 2, 1, "", "frozen"], [208, 3, 1, "", "integral"], [208, 3, 1, "", "integral_error"], [208, 3, 1, "", "inverse"], [208, 3, 1, "", "inverse_all"], [208, 2, 1, "", "is_norm_spectral_model"], [208, 2, 1, "", "parameters"], [208, 2, 1, "", "pivot_energy"], [208, 3, 1, "", "plot"], [208, 3, 1, "", "plot_error"], [208, 3, 1, "", "reassign"], [208, 3, 1, "", "reference_fluxes"], [208, 3, 1, "", "spectral_index"], [208, 3, 1, "", "spectral_index_error"], [208, 2, 1, "", "tag"], [208, 3, 1, "", "to_dict"], [208, 2, 1, "", "type"], [208, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantTemporalModel": [[209, 3, 1, "", "__call__"], [209, 3, 1, "", "copy"], [209, 2, 1, "", "covariance"], [209, 2, 1, "", "default_parameters"], [209, 3, 1, "", "evaluate"], [209, 3, 1, "", "freeze"], [209, 3, 1, "", "from_dict"], [209, 3, 1, "", "from_parameters"], [209, 2, 1, "", "frozen"], [209, 3, 1, "", "integral"], [209, 2, 1, "", "is_energy_dependent"], [209, 2, 1, "", "parameters"], [209, 3, 1, "", "plot"], [209, 3, 1, "", "reassign"], [209, 2, 1, "", "reference_time"], [209, 3, 1, "", "sample_time"], [209, 2, 1, "", "tag"], [209, 3, 1, "", "time_sum"], [209, 3, 1, "", "to_dict"], [209, 2, 1, "", "type"], [209, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.DatasetModels": [[210, 3, 1, "", "copy"], [210, 3, 1, "", "count"], [210, 2, 1, "", "covariance"], [210, 3, 1, "", "freeze"], [210, 3, 1, "", "from_dict"], [210, 3, 1, "", "from_yaml"], [210, 2, 1, "", "frozen"], [210, 3, 1, "", "index"], [210, 2, 1, "", "names"], [210, 2, 1, "", "parameters"], [210, 2, 1, "", "parameters_unique_names"], [210, 3, 1, "", "plot_positions"], [210, 3, 1, "", "plot_regions"], [210, 2, 1, "", "positions"], [210, 3, 1, "", "read"], [210, 3, 1, "", "read_covariance"], [210, 3, 1, "", "reassign"], [210, 3, 1, "", "restore_status"], [210, 3, 1, "", "select"], [210, 3, 1, "", "select_from_geom"], [210, 3, 1, "", "select_mask"], [210, 3, 1, "", "select_region"], [210, 3, 1, "", "selection_mask"], [210, 3, 1, "", "set_parameters_bounds"], [210, 3, 1, "", "to_dict"], [210, 3, 1, "", "to_parameters_table"], [210, 3, 1, "", "to_regions"], [210, 3, 1, "", "to_template_sky_model"], [210, 3, 1, "", "to_template_spectral_model"], [210, 3, 1, "", "to_yaml"], [210, 3, 1, "", "unfreeze"], [210, 3, 1, "", "update_link_label"], [210, 3, 1, "", "update_parameters_from_table"], [210, 2, 1, "", "wcs_geom"], [210, 3, 1, "", "write"], [210, 3, 1, "", "write_covariance"]], "gammapy.modeling.models.DiskSpatialModel": [[211, 3, 1, "", "__call__"], [211, 3, 1, "", "copy"], [211, 2, 1, "", "covariance"], [211, 2, 1, "", "default_parameters"], [211, 2, 1, "", "e"], [211, 2, 1, "", "edge_width"], [211, 3, 1, "", "evaluate"], [211, 3, 1, "", "evaluate_geom"], [211, 2, 1, "", "evaluation_bin_size_min"], [211, 2, 1, "", "evaluation_radius"], [211, 2, 1, "", "evaluation_region"], [211, 3, 1, "", "freeze"], [211, 3, 1, "", "from_dict"], [211, 3, 1, "", "from_parameters"], [211, 3, 1, "", "from_position"], [211, 3, 1, "", "from_region"], [211, 2, 1, "", "frozen"], [211, 3, 1, "", "integrate_geom"], [211, 2, 1, "", "is_energy_dependent"], [211, 2, 1, "", "lat_0"], [211, 2, 1, "", "lon_0"], [211, 2, 1, "", "parameters"], [211, 2, 1, "", "phi"], [211, 2, 1, "", "phi_0"], [211, 3, 1, "", "plot"], [211, 3, 1, "", "plot_error"], [211, 3, 1, "", "plot_grid"], [211, 3, 1, "", "plot_interactive"], [211, 3, 1, "", "plot_position_error"], [211, 2, 1, "", "position"], [211, 2, 1, "", "position_error"], [211, 2, 1, "", "position_lonlat"], [211, 2, 1, "", "r_0"], [211, 3, 1, "", "reassign"], [211, 2, 1, "", "tag"], [211, 3, 1, "", "to_dict"], [211, 3, 1, "", "to_region"], [211, 2, 1, "", "type"], [211, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.EBLAbsorptionNormSpectralModel": [[212, 3, 1, "", "__call__"], [212, 2, 1, "", "alpha_norm"], [212, 3, 1, "", "copy"], [212, 2, 1, "", "covariance"], [212, 2, 1, "", "default_parameters"], [212, 3, 1, "", "energy_flux"], [212, 3, 1, "", "energy_flux_error"], [212, 3, 1, "", "evaluate"], [212, 3, 1, "", "evaluate_error"], [212, 3, 1, "", "freeze"], [212, 3, 1, "", "from_dict"], [212, 3, 1, "", "from_parameters"], [212, 2, 1, "", "frozen"], [212, 3, 1, "", "integral"], [212, 3, 1, "", "integral_error"], [212, 3, 1, "", "inverse"], [212, 3, 1, "", "inverse_all"], [212, 2, 1, "", "is_norm_spectral_model"], [212, 2, 1, "", "parameters"], [212, 2, 1, "", "pivot_energy"], [212, 3, 1, "", "plot"], [212, 3, 1, "", "plot_error"], [212, 3, 1, "", "read"], [212, 3, 1, "", "read_builtin"], [212, 3, 1, "", "reassign"], [212, 2, 1, "", "redshift"], [212, 3, 1, "", "reference_fluxes"], [212, 3, 1, "", "spectral_index"], [212, 3, 1, "", "spectral_index_error"], [212, 2, 1, "", "tag"], [212, 3, 1, "", "to_dict"], [212, 2, 1, "", "type"], [212, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel": [[214, 3, 1, "", "__call__"], [214, 2, 1, "", "amplitude"], [214, 3, 1, "", "copy"], [214, 2, 1, "", "covariance"], [214, 2, 1, "", "default_parameters"], [214, 2, 1, "", "ecut"], [214, 3, 1, "", "energy_flux"], [214, 3, 1, "", "energy_flux_error"], [214, 3, 1, "", "evaluate"], [214, 3, 1, "", "evaluate_error"], [214, 3, 1, "", "freeze"], [214, 3, 1, "", "from_dict"], [214, 3, 1, "", "from_parameters"], [214, 2, 1, "", "frozen"], [214, 2, 1, "", "index"], [214, 3, 1, "", "integral"], [214, 3, 1, "", "integral_error"], [214, 3, 1, "", "inverse"], [214, 3, 1, "", "inverse_all"], [214, 2, 1, "", "is_norm_spectral_model"], [214, 2, 1, "", "parameters"], [214, 2, 1, "", "pivot_energy"], [214, 3, 1, "", "plot"], [214, 3, 1, "", "plot_error"], [214, 3, 1, "", "reassign"], [214, 2, 1, "", "reference"], [214, 3, 1, "", "reference_fluxes"], [214, 3, 1, "", "spectral_index"], [214, 3, 1, "", "spectral_index_error"], [214, 2, 1, "", "tag"], [214, 3, 1, "", "to_dict"], [214, 2, 1, "", "type"], [214, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel": [[215, 3, 1, "", "__call__"], [215, 2, 1, "", "alpha"], [215, 3, 1, "", "copy"], [215, 2, 1, "", "covariance"], [215, 2, 1, "", "default_parameters"], [215, 3, 1, "", "energy_flux"], [215, 3, 1, "", "energy_flux_error"], [215, 3, 1, "", "evaluate"], [215, 3, 1, "", "evaluate_error"], [215, 3, 1, "", "freeze"], [215, 3, 1, "", "from_dict"], [215, 3, 1, "", "from_parameters"], [215, 2, 1, "", "frozen"], [215, 2, 1, "", "index"], [215, 3, 1, "", "integral"], [215, 3, 1, "", "integral_error"], [215, 3, 1, "", "inverse"], [215, 3, 1, "", "inverse_all"], [215, 2, 1, "", "is_norm_spectral_model"], [215, 2, 1, "", "lambda_"], [215, 2, 1, "", "norm"], [215, 2, 1, "", "parameters"], [215, 2, 1, "", "pivot_energy"], [215, 3, 1, "", "plot"], [215, 3, 1, "", "plot_error"], [215, 3, 1, "", "reassign"], [215, 2, 1, "", "reference"], [215, 3, 1, "", "reference_fluxes"], [215, 3, 1, "", "spectral_index"], [215, 3, 1, "", "spectral_index_error"], [215, 2, 1, "", "tag"], [215, 3, 1, "", "to_dict"], [215, 2, 1, "", "type"], [215, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel": [[216, 3, 1, "", "__call__"], [216, 2, 1, "", "alpha"], [216, 2, 1, "", "amplitude"], [216, 3, 1, "", "copy"], [216, 2, 1, "", "covariance"], [216, 2, 1, "", "default_parameters"], [216, 2, 1, "", "e_peak"], [216, 3, 1, "", "energy_flux"], [216, 3, 1, "", "energy_flux_error"], [216, 3, 1, "", "evaluate"], [216, 3, 1, "", "evaluate_error"], [216, 3, 1, "", "freeze"], [216, 3, 1, "", "from_dict"], [216, 3, 1, "", "from_parameters"], [216, 2, 1, "", "frozen"], [216, 2, 1, "", "index"], [216, 3, 1, "", "integral"], [216, 3, 1, "", "integral_error"], [216, 3, 1, "", "inverse"], [216, 3, 1, "", "inverse_all"], [216, 2, 1, "", "is_norm_spectral_model"], [216, 2, 1, "", "lambda_"], [216, 2, 1, "", "parameters"], [216, 2, 1, "", "pivot_energy"], [216, 3, 1, "", "plot"], [216, 3, 1, "", "plot_error"], [216, 3, 1, "", "reassign"], [216, 2, 1, "", "reference"], [216, 3, 1, "", "reference_fluxes"], [216, 3, 1, "", "spectral_index"], [216, 3, 1, "", "spectral_index_error"], [216, 2, 1, "", "tag"], [216, 3, 1, "", "to_dict"], [216, 2, 1, "", "type"], [216, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpDecayTemporalModel": [[217, 3, 1, "", "__call__"], [217, 3, 1, "", "copy"], [217, 2, 1, "", "covariance"], [217, 2, 1, "", "default_parameters"], [217, 3, 1, "", "evaluate"], [217, 3, 1, "", "freeze"], [217, 3, 1, "", "from_dict"], [217, 3, 1, "", "from_parameters"], [217, 2, 1, "", "frozen"], [217, 3, 1, "", "integral"], [217, 2, 1, "", "is_energy_dependent"], [217, 2, 1, "", "parameters"], [217, 3, 1, "", "plot"], [217, 3, 1, "", "reassign"], [217, 2, 1, "", "reference_time"], [217, 3, 1, "", "sample_time"], [217, 2, 1, "", "t0"], [217, 2, 1, "", "t_ref"], [217, 2, 1, "", "tag"], [217, 3, 1, "", "time_sum"], [217, 3, 1, "", "to_dict"], [217, 2, 1, "", "type"], [217, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.FoVBackgroundModel": [[218, 3, 1, "", "contributes"], [218, 3, 1, "", "copy"], [218, 2, 1, "", "covariance"], [218, 2, 1, "", "default_parameters"], [218, 3, 1, "", "evaluate"], [218, 3, 1, "", "evaluate_geom"], [218, 3, 1, "", "freeze"], [218, 3, 1, "", "from_dict"], [218, 3, 1, "", "from_parameters"], [218, 2, 1, "", "frozen"], [218, 2, 1, "", "name"], [218, 2, 1, "", "parameters"], [218, 3, 1, "", "reassign"], [218, 3, 1, "", "reset_to_default"], [218, 2, 1, "", "spatial_model"], [218, 2, 1, "", "spectral_model"], [218, 2, 1, "", "tag"], [218, 3, 1, "", "to_dict"], [218, 2, 1, "", "type"], [218, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianSpatialModel": [[219, 3, 1, "", "__call__"], [219, 3, 1, "", "copy"], [219, 2, 1, "", "covariance"], [219, 2, 1, "", "default_parameters"], [219, 2, 1, "", "e"], [219, 3, 1, "", "evaluate"], [219, 3, 1, "", "evaluate_geom"], [219, 2, 1, "", "evaluation_bin_size_min"], [219, 2, 1, "", "evaluation_radius"], [219, 2, 1, "", "evaluation_region"], [219, 3, 1, "", "freeze"], [219, 3, 1, "", "from_dict"], [219, 3, 1, "", "from_parameters"], [219, 3, 1, "", "from_position"], [219, 2, 1, "", "frozen"], [219, 3, 1, "", "integrate_geom"], [219, 2, 1, "", "is_energy_dependent"], [219, 2, 1, "", "lat_0"], [219, 2, 1, "", "lon_0"], [219, 2, 1, "", "parameters"], [219, 2, 1, "", "phi"], [219, 2, 1, "", "phi_0"], [219, 3, 1, "", "plot"], [219, 3, 1, "", "plot_error"], [219, 3, 1, "", "plot_grid"], [219, 3, 1, "", "plot_interactive"], [219, 3, 1, "", "plot_position_error"], [219, 2, 1, "", "position"], [219, 2, 1, "", "position_error"], [219, 2, 1, "", "position_lonlat"], [219, 3, 1, "", "reassign"], [219, 2, 1, "", "sigma"], [219, 2, 1, "", "tag"], [219, 3, 1, "", "to_dict"], [219, 3, 1, "", "to_region"], [219, 2, 1, "", "type"], [219, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianSpectralModel": [[220, 3, 1, "", "__call__"], [220, 2, 1, "", "amplitude"], [220, 3, 1, "", "copy"], [220, 2, 1, "", "covariance"], [220, 2, 1, "", "default_parameters"], [220, 3, 1, "", "energy_flux"], [220, 3, 1, "", "energy_flux_error"], [220, 3, 1, "", "evaluate"], [220, 3, 1, "", "evaluate_error"], [220, 3, 1, "", "freeze"], [220, 3, 1, "", "from_dict"], [220, 3, 1, "", "from_parameters"], [220, 2, 1, "", "frozen"], [220, 3, 1, "", "integral"], [220, 3, 1, "", "integral_error"], [220, 3, 1, "", "inverse"], [220, 3, 1, "", "inverse_all"], [220, 2, 1, "", "is_norm_spectral_model"], [220, 2, 1, "", "mean"], [220, 2, 1, "", "parameters"], [220, 2, 1, "", "pivot_energy"], [220, 3, 1, "", "plot"], [220, 3, 1, "", "plot_error"], [220, 3, 1, "", "reassign"], [220, 3, 1, "", "reference_fluxes"], [220, 2, 1, "", "sigma"], [220, 3, 1, "", "spectral_index"], [220, 3, 1, "", "spectral_index_error"], [220, 2, 1, "", "tag"], [220, 3, 1, "", "to_dict"], [220, 2, 1, "", "type"], [220, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianTemporalModel": [[221, 3, 1, "", "__call__"], [221, 3, 1, "", "copy"], [221, 2, 1, "", "covariance"], [221, 2, 1, "", "default_parameters"], [221, 3, 1, "", "evaluate"], [221, 3, 1, "", "freeze"], [221, 3, 1, "", "from_dict"], [221, 3, 1, "", "from_parameters"], [221, 2, 1, "", "frozen"], [221, 3, 1, "", "integral"], [221, 2, 1, "", "is_energy_dependent"], [221, 2, 1, "", "parameters"], [221, 3, 1, "", "plot"], [221, 3, 1, "", "reassign"], [221, 2, 1, "", "reference_time"], [221, 3, 1, "", "sample_time"], [221, 2, 1, "", "sigma"], [221, 2, 1, "", "t_ref"], [221, 2, 1, "", "tag"], [221, 3, 1, "", "time_sum"], [221, 3, 1, "", "to_dict"], [221, 2, 1, "", "type"], [221, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GeneralizedGaussianSpatialModel": [[222, 3, 1, "", "__call__"], [222, 3, 1, "", "copy"], [222, 2, 1, "", "covariance"], [222, 2, 1, "", "default_parameters"], [222, 2, 1, "", "e"], [222, 2, 1, "", "eta"], [222, 3, 1, "", "evaluate"], [222, 3, 1, "", "evaluate_geom"], [222, 2, 1, "", "evaluation_bin_size_min"], [222, 2, 1, "", "evaluation_radius"], [222, 2, 1, "", "evaluation_region"], [222, 3, 1, "", "freeze"], [222, 3, 1, "", "from_dict"], [222, 3, 1, "", "from_parameters"], [222, 3, 1, "", "from_position"], [222, 2, 1, "", "frozen"], [222, 3, 1, "", "integrate_geom"], [222, 2, 1, "", "is_energy_dependent"], [222, 2, 1, "", "lat_0"], [222, 2, 1, "", "lon_0"], [222, 2, 1, "", "parameters"], [222, 2, 1, "", "phi"], [222, 2, 1, "", "phi_0"], [222, 3, 1, "", "plot"], [222, 3, 1, "", "plot_error"], [222, 3, 1, "", "plot_grid"], [222, 3, 1, "", "plot_interactive"], [222, 3, 1, "", "plot_position_error"], [222, 2, 1, "", "position"], [222, 2, 1, "", "position_error"], [222, 2, 1, "", "position_lonlat"], [222, 2, 1, "", "r_0"], [222, 3, 1, "", "reassign"], [222, 2, 1, "", "tag"], [222, 3, 1, "", "to_dict"], [222, 3, 1, "", "to_region"], [222, 2, 1, "", "type"], [222, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GeneralizedGaussianTemporalModel": [[223, 3, 1, "", "__call__"], [223, 3, 1, "", "copy"], [223, 2, 1, "", "covariance"], [223, 2, 1, "", "default_parameters"], [223, 2, 1, "", "eta"], [223, 3, 1, "", "evaluate"], [223, 3, 1, "", "freeze"], [223, 3, 1, "", "from_dict"], [223, 3, 1, "", "from_parameters"], [223, 2, 1, "", "frozen"], [223, 3, 1, "", "integral"], [223, 2, 1, "", "is_energy_dependent"], [223, 2, 1, "", "parameters"], [223, 3, 1, "", "plot"], [223, 3, 1, "", "reassign"], [223, 2, 1, "", "reference_time"], [223, 3, 1, "", "sample_time"], [223, 2, 1, "", "t_decay"], [223, 2, 1, "", "t_ref"], [223, 2, 1, "", "t_rise"], [223, 2, 1, "", "tag"], [223, 3, 1, "", "time_sum"], [223, 3, 1, "", "to_dict"], [223, 2, 1, "", "type"], [223, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LightCurveTemplateTemporalModel": [[224, 3, 1, "", "__call__"], [224, 3, 1, "", "copy"], [224, 2, 1, "", "covariance"], [224, 2, 1, "", "default_parameters"], [224, 3, 1, "", "evaluate"], [224, 3, 1, "", "freeze"], [224, 3, 1, "", "from_dict"], [224, 3, 1, "", "from_parameters"], [224, 3, 1, "", "from_table"], [224, 2, 1, "", "frozen"], [224, 3, 1, "", "integral"], [224, 2, 1, "", "is_energy_dependent"], [224, 2, 1, "", "parameters"], [224, 3, 1, "", "plot"], [224, 3, 1, "", "read"], [224, 3, 1, "", "reassign"], [224, 2, 1, "", "reference_time"], [224, 3, 1, "", "sample_time"], [224, 2, 1, "", "t_ref"], [224, 2, 1, "", "tag"], [224, 3, 1, "", "time_sum"], [224, 3, 1, "", "to_dict"], [224, 3, 1, "", "to_table"], [224, 2, 1, "", "type"], [224, 3, 1, "", "unfreeze"], [224, 3, 1, "", "write"]], "gammapy.modeling.models.LinearTemporalModel": [[225, 3, 1, "", "__call__"], [225, 2, 1, "", "alpha"], [225, 2, 1, "", "beta"], [225, 3, 1, "", "copy"], [225, 2, 1, "", "covariance"], [225, 2, 1, "", "default_parameters"], [225, 3, 1, "", "evaluate"], [225, 3, 1, "", "freeze"], [225, 3, 1, "", "from_dict"], [225, 3, 1, "", "from_parameters"], [225, 2, 1, "", "frozen"], [225, 3, 1, "", "integral"], [225, 2, 1, "", "is_energy_dependent"], [225, 2, 1, "", "parameters"], [225, 3, 1, "", "plot"], [225, 3, 1, "", "reassign"], [225, 2, 1, "", "reference_time"], [225, 3, 1, "", "sample_time"], [225, 2, 1, "", "t_ref"], [225, 2, 1, "", "tag"], [225, 3, 1, "", "time_sum"], [225, 3, 1, "", "to_dict"], [225, 2, 1, "", "type"], [225, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LogParabolaNormSpectralModel": [[226, 3, 1, "", "__call__"], [226, 2, 1, "", "alpha"], [226, 2, 1, "", "beta"], [226, 3, 1, "", "copy"], [226, 2, 1, "", "covariance"], [226, 2, 1, "", "default_parameters"], [226, 3, 1, "", "energy_flux"], [226, 3, 1, "", "energy_flux_error"], [226, 3, 1, "", "evaluate"], [226, 3, 1, "", "evaluate_error"], [226, 3, 1, "", "freeze"], [226, 3, 1, "", "from_dict"], [226, 3, 1, "", "from_log10"], [226, 3, 1, "", "from_parameters"], [226, 2, 1, "", "frozen"], [226, 3, 1, "", "integral"], [226, 3, 1, "", "integral_error"], [226, 3, 1, "", "inverse"], [226, 3, 1, "", "inverse_all"], [226, 2, 1, "", "is_norm_spectral_model"], [226, 2, 1, "", "norm"], [226, 2, 1, "", "parameters"], [226, 2, 1, "", "pivot_energy"], [226, 3, 1, "", "plot"], [226, 3, 1, "", "plot_error"], [226, 3, 1, "", "reassign"], [226, 2, 1, "", "reference"], [226, 3, 1, "", "reference_fluxes"], [226, 3, 1, "", "spectral_index"], [226, 3, 1, "", "spectral_index_error"], [226, 2, 1, "", "tag"], [226, 3, 1, "", "to_dict"], [226, 2, 1, "", "type"], [226, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LogParabolaSpectralModel": [[227, 3, 1, "", "__call__"], [227, 2, 1, "", "alpha"], [227, 2, 1, "", "amplitude"], [227, 2, 1, "", "beta"], [227, 3, 1, "", "copy"], [227, 2, 1, "", "covariance"], [227, 2, 1, "", "default_parameters"], [227, 2, 1, "", "e_peak"], [227, 3, 1, "", "energy_flux"], [227, 3, 1, "", "energy_flux_error"], [227, 3, 1, "", "evaluate"], [227, 3, 1, "", "evaluate_error"], [227, 3, 1, "", "freeze"], [227, 3, 1, "", "from_dict"], [227, 3, 1, "", "from_log10"], [227, 3, 1, "", "from_parameters"], [227, 2, 1, "", "frozen"], [227, 3, 1, "", "integral"], [227, 3, 1, "", "integral_error"], [227, 3, 1, "", "inverse"], [227, 3, 1, "", "inverse_all"], [227, 2, 1, "", "is_norm_spectral_model"], [227, 2, 1, "", "parameters"], [227, 2, 1, "", "pivot_energy"], [227, 3, 1, "", "plot"], [227, 3, 1, "", "plot_error"], [227, 3, 1, "", "reassign"], [227, 2, 1, "", "reference"], [227, 3, 1, "", "reference_fluxes"], [227, 3, 1, "", "spectral_index"], [227, 3, 1, "", "spectral_index_error"], [227, 2, 1, "", "tag"], [227, 3, 1, "", "to_dict"], [227, 2, 1, "", "type"], [227, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.MeyerCrabSpectralModel": [[229, 3, 1, "", "__call__"], [229, 2, 1, "", "coefficients"], [229, 3, 1, "", "copy"], [229, 2, 1, "", "covariance"], [229, 2, 1, "", "default_parameters"], [229, 3, 1, "", "energy_flux"], [229, 3, 1, "", "energy_flux_error"], [229, 3, 1, "", "evaluate"], [229, 3, 1, "", "evaluate_error"], [229, 3, 1, "", "freeze"], [229, 3, 1, "", "from_dict"], [229, 3, 1, "", "from_parameters"], [229, 2, 1, "", "frozen"], [229, 3, 1, "", "integral"], [229, 3, 1, "", "integral_error"], [229, 3, 1, "", "inverse"], [229, 3, 1, "", "inverse_all"], [229, 2, 1, "", "is_norm_spectral_model"], [229, 2, 1, "", "norm"], [229, 2, 1, "", "parameters"], [229, 2, 1, "", "pivot_energy"], [229, 3, 1, "", "plot"], [229, 3, 1, "", "plot_error"], [229, 3, 1, "", "reassign"], [229, 3, 1, "", "reference_fluxes"], [229, 3, 1, "", "spectral_index"], [229, 3, 1, "", "spectral_index_error"], [229, 3, 1, "", "to_dict"], [229, 2, 1, "", "type"], [229, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Model": [[230, 3, 1, "", "create"], [230, 3, 1, "", "from_dict"]], "gammapy.modeling.models.ModelBase": [[231, 3, 1, "", "copy"], [231, 2, 1, "", "covariance"], [231, 3, 1, "", "freeze"], [231, 3, 1, "", "from_dict"], [231, 3, 1, "", "from_parameters"], [231, 2, 1, "", "frozen"], [231, 2, 1, "", "parameters"], [231, 3, 1, "", "reassign"], [231, 3, 1, "", "to_dict"], [231, 2, 1, "", "type"], [231, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Models": [[232, 3, 1, "", "append"], [232, 3, 1, "", "clear"], [232, 3, 1, "", "copy"], [232, 3, 1, "", "count"], [232, 2, 1, "", "covariance"], [232, 3, 1, "", "extend"], [232, 3, 1, "", "freeze"], [232, 3, 1, "", "from_dict"], [232, 3, 1, "", "from_yaml"], [232, 2, 1, "", "frozen"], [232, 3, 1, "", "index"], [232, 3, 1, "", "insert"], [232, 2, 1, "", "names"], [232, 2, 1, "", "parameters"], [232, 2, 1, "", "parameters_unique_names"], [232, 3, 1, "", "plot_positions"], [232, 3, 1, "", "plot_regions"], [232, 3, 1, "", "pop"], [232, 2, 1, "", "positions"], [232, 3, 1, "", "read"], [232, 3, 1, "", "read_covariance"], [232, 3, 1, "", "reassign"], [232, 3, 1, "", "remove"], [232, 3, 1, "", "restore_status"], [232, 3, 1, "", "reverse"], [232, 3, 1, "", "select"], [232, 3, 1, "", "select_from_geom"], [232, 3, 1, "", "select_mask"], [232, 3, 1, "", "select_region"], [232, 3, 1, "", "selection_mask"], [232, 3, 1, "", "set_parameters_bounds"], [232, 3, 1, "", "set_prior"], [232, 3, 1, "", "to_dict"], [232, 3, 1, "", "to_parameters_table"], [232, 3, 1, "", "to_regions"], [232, 3, 1, "", "to_template_sky_model"], [232, 3, 1, "", "to_template_spectral_model"], [232, 3, 1, "", "to_yaml"], [232, 3, 1, "", "unfreeze"], [232, 3, 1, "", "update_link_label"], [232, 3, 1, "", "update_parameters_from_table"], [232, 2, 1, "", "wcs_geom"], [232, 3, 1, "", "write"], [232, 3, 1, "", "write_covariance"]], "gammapy.modeling.models.NaimaSpectralModel": [[233, 3, 1, "", "__call__"], [233, 3, 1, "", "copy"], [233, 2, 1, "", "covariance"], [233, 2, 1, "", "default_parameters"], [233, 3, 1, "", "energy_flux"], [233, 3, 1, "", "energy_flux_error"], [233, 3, 1, "", "evaluate"], [233, 3, 1, "", "evaluate_error"], [233, 3, 1, "", "freeze"], [233, 3, 1, "", "from_dict"], [233, 3, 1, "", "from_parameters"], [233, 2, 1, "", "frozen"], [233, 2, 1, "", "include_ssc"], [233, 3, 1, "", "integral"], [233, 3, 1, "", "integral_error"], [233, 3, 1, "", "inverse"], [233, 3, 1, "", "inverse_all"], [233, 2, 1, "", "is_norm_spectral_model"], [233, 2, 1, "", "parameters"], [233, 2, 1, "", "particle_distribution"], [233, 2, 1, "", "pivot_energy"], [233, 3, 1, "", "plot"], [233, 3, 1, "", "plot_error"], [233, 3, 1, "", "reassign"], [233, 3, 1, "", "reference_fluxes"], [233, 3, 1, "", "spectral_index"], [233, 3, 1, "", "spectral_index_error"], [233, 2, 1, "", "ssc_model"], [233, 2, 1, "", "tag"], [233, 3, 1, "", "to_dict"], [233, 2, 1, "", "type"], [233, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PiecewiseNormSpatialModel": [[234, 3, 1, "", "__call__"], [234, 2, 1, "", "coords"], [234, 3, 1, "", "copy"], [234, 2, 1, "", "covariance"], [234, 2, 1, "", "default_parameters"], [234, 3, 1, "", "evaluate"], [234, 3, 1, "", "evaluate_geom"], [234, 2, 1, "", "evaluation_bin_size_min"], [234, 2, 1, "", "evaluation_radius"], [234, 2, 1, "", "evaluation_region"], [234, 3, 1, "", "freeze"], [234, 3, 1, "", "from_dict"], [234, 3, 1, "", "from_parameters"], [234, 3, 1, "", "from_position"], [234, 2, 1, "", "frozen"], [234, 3, 1, "", "integrate_geom"], [234, 2, 1, "", "is_energy_dependent"], [234, 2, 1, "", "norms"], [234, 2, 1, "", "parameters"], [234, 2, 1, "", "phi_0"], [234, 3, 1, "", "plot"], [234, 3, 1, "", "plot_error"], [234, 3, 1, "", "plot_grid"], [234, 3, 1, "", "plot_interactive"], [234, 3, 1, "", "plot_position_error"], [234, 2, 1, "", "position"], [234, 2, 1, "", "position_error"], [234, 2, 1, "", "position_lonlat"], [234, 3, 1, "", "reassign"], [234, 2, 1, "", "tag"], [234, 3, 1, "", "to_dict"], [234, 2, 1, "", "type"], [234, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PiecewiseNormSpectralModel": [[235, 3, 1, "", "__call__"], [235, 3, 1, "", "copy"], [235, 2, 1, "", "covariance"], [235, 2, 1, "", "default_parameters"], [235, 2, 1, "", "energy"], [235, 3, 1, "", "energy_flux"], [235, 3, 1, "", "energy_flux_error"], [235, 3, 1, "", "evaluate"], [235, 3, 1, "", "evaluate_error"], [235, 3, 1, "", "freeze"], [235, 3, 1, "", "from_dict"], [235, 3, 1, "", "from_parameters"], [235, 2, 1, "", "frozen"], [235, 3, 1, "", "integral"], [235, 3, 1, "", "integral_error"], [235, 3, 1, "", "inverse"], [235, 3, 1, "", "inverse_all"], [235, 2, 1, "", "is_norm_spectral_model"], [235, 2, 1, "", "norms"], [235, 2, 1, "", "parameters"], [235, 2, 1, "", "pivot_energy"], [235, 3, 1, "", "plot"], [235, 3, 1, "", "plot_error"], [235, 3, 1, "", "reassign"], [235, 3, 1, "", "reference_fluxes"], [235, 3, 1, "", "spectral_index"], [235, 3, 1, "", "spectral_index_error"], [235, 2, 1, "", "tag"], [235, 3, 1, "", "to_dict"], [235, 2, 1, "", "type"], [235, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PointSpatialModel": [[236, 3, 1, "", "__call__"], [236, 3, 1, "", "copy"], [236, 2, 1, "", "covariance"], [236, 2, 1, "", "default_parameters"], [236, 3, 1, "", "evaluate_geom"], [236, 2, 1, "", "evaluation_bin_size_min"], [236, 2, 1, "", "evaluation_radius"], [236, 2, 1, "", "evaluation_region"], [236, 3, 1, "", "freeze"], [236, 3, 1, "", "from_dict"], [236, 3, 1, "", "from_parameters"], [236, 3, 1, "", "from_position"], [236, 2, 1, "", "frozen"], [236, 3, 1, "", "integrate_geom"], [236, 2, 1, "", "is_energy_dependent"], [236, 2, 1, "", "lat_0"], [236, 2, 1, "", "lon_0"], [236, 2, 1, "", "parameters"], [236, 2, 1, "", "phi_0"], [236, 3, 1, "", "plot"], [236, 3, 1, "", "plot_error"], [236, 3, 1, "", "plot_grid"], [236, 3, 1, "", "plot_interactive"], [236, 3, 1, "", "plot_position_error"], [236, 2, 1, "", "position"], [236, 2, 1, "", "position_error"], [236, 2, 1, "", "position_lonlat"], [236, 3, 1, "", "reassign"], [236, 2, 1, "", "tag"], [236, 3, 1, "", "to_dict"], [236, 3, 1, "", "to_region"], [236, 2, 1, "", "type"], [236, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLaw2SpectralModel": [[237, 3, 1, "", "__call__"], [237, 2, 1, "", "amplitude"], [237, 3, 1, "", "copy"], [237, 2, 1, "", "covariance"], [237, 2, 1, "", "default_parameters"], [237, 2, 1, "", "emax"], [237, 2, 1, "", "emin"], [237, 3, 1, "", "energy_flux"], [237, 3, 1, "", "energy_flux_error"], [237, 3, 1, "", "evaluate"], [237, 3, 1, "", "evaluate_error"], [237, 3, 1, "", "evaluate_integral"], [237, 3, 1, "", "freeze"], [237, 3, 1, "", "from_dict"], [237, 3, 1, "", "from_parameters"], [237, 2, 1, "", "frozen"], [237, 2, 1, "", "index"], [237, 3, 1, "", "integral"], [237, 3, 1, "", "integral_error"], [237, 3, 1, "", "inverse"], [237, 3, 1, "", "inverse_all"], [237, 2, 1, "", "is_norm_spectral_model"], [237, 2, 1, "", "parameters"], [237, 2, 1, "", "pivot_energy"], [237, 3, 1, "", "plot"], [237, 3, 1, "", "plot_error"], [237, 3, 1, "", "reassign"], [237, 3, 1, "", "reference_fluxes"], [237, 3, 1, "", "spectral_index"], [237, 3, 1, "", "spectral_index_error"], [237, 2, 1, "", "tag"], [237, 3, 1, "", "to_dict"], [237, 2, 1, "", "type"], [237, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawNormSpectralModel": [[238, 3, 1, "", "__call__"], [238, 3, 1, "", "copy"], [238, 2, 1, "", "covariance"], [238, 2, 1, "", "default_parameters"], [238, 3, 1, "", "energy_flux"], [238, 3, 1, "", "energy_flux_error"], [238, 3, 1, "", "evaluate"], [238, 3, 1, "", "evaluate_energy_flux"], [238, 3, 1, "", "evaluate_error"], [238, 3, 1, "", "evaluate_integral"], [238, 3, 1, "", "freeze"], [238, 3, 1, "", "from_dict"], [238, 3, 1, "", "from_parameters"], [238, 2, 1, "", "frozen"], [238, 3, 1, "", "integral"], [238, 3, 1, "", "integral_error"], [238, 3, 1, "", "inverse"], [238, 3, 1, "", "inverse_all"], [238, 2, 1, "", "is_norm_spectral_model"], [238, 2, 1, "", "norm"], [238, 2, 1, "", "parameters"], [238, 2, 1, "", "pivot_energy"], [238, 3, 1, "", "plot"], [238, 3, 1, "", "plot_error"], [238, 3, 1, "", "reassign"], [238, 2, 1, "", "reference"], [238, 3, 1, "", "reference_fluxes"], [238, 3, 1, "", "spectral_index"], [238, 3, 1, "", "spectral_index_error"], [238, 2, 1, "", "tag"], [238, 2, 1, "", "tilt"], [238, 3, 1, "", "to_dict"], [238, 2, 1, "", "type"], [238, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawSpectralModel": [[239, 3, 1, "", "__call__"], [239, 2, 1, "", "amplitude"], [239, 3, 1, "", "copy"], [239, 2, 1, "", "covariance"], [239, 2, 1, "", "default_parameters"], [239, 3, 1, "", "energy_flux"], [239, 3, 1, "", "energy_flux_error"], [239, 3, 1, "", "evaluate"], [239, 3, 1, "", "evaluate_energy_flux"], [239, 3, 1, "", "evaluate_error"], [239, 3, 1, "", "evaluate_integral"], [239, 3, 1, "", "freeze"], [239, 3, 1, "", "from_dict"], [239, 3, 1, "", "from_parameters"], [239, 2, 1, "", "frozen"], [239, 2, 1, "", "index"], [239, 3, 1, "", "integral"], [239, 3, 1, "", "integral_error"], [239, 3, 1, "", "inverse"], [239, 3, 1, "", "inverse_all"], [239, 2, 1, "", "is_norm_spectral_model"], [239, 2, 1, "", "parameters"], [239, 2, 1, "", "pivot_energy"], [239, 3, 1, "", "plot"], [239, 3, 1, "", "plot_error"], [239, 3, 1, "", "reassign"], [239, 2, 1, "", "reference"], [239, 3, 1, "", "reference_fluxes"], [239, 3, 1, "", "spectral_index"], [239, 3, 1, "", "spectral_index_error"], [239, 2, 1, "", "tag"], [239, 3, 1, "", "to_dict"], [239, 2, 1, "", "type"], [239, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawTemporalModel": [[240, 3, 1, "", "__call__"], [240, 2, 1, "", "alpha"], [240, 3, 1, "", "copy"], [240, 2, 1, "", "covariance"], [240, 2, 1, "", "default_parameters"], [240, 3, 1, "", "evaluate"], [240, 3, 1, "", "freeze"], [240, 3, 1, "", "from_dict"], [240, 3, 1, "", "from_parameters"], [240, 2, 1, "", "frozen"], [240, 3, 1, "", "integral"], [240, 2, 1, "", "is_energy_dependent"], [240, 2, 1, "", "parameters"], [240, 3, 1, "", "plot"], [240, 3, 1, "", "reassign"], [240, 2, 1, "", "reference_time"], [240, 3, 1, "", "sample_time"], [240, 2, 1, "", "t0"], [240, 2, 1, "", "t_ref"], [240, 2, 1, "", "tag"], [240, 3, 1, "", "time_sum"], [240, 3, 1, "", "to_dict"], [240, 2, 1, "", "type"], [240, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ScaleSpectralModel": [[243, 3, 1, "", "__call__"], [243, 3, 1, "", "copy"], [243, 2, 1, "", "covariance"], [243, 2, 1, "", "default_parameters"], [243, 3, 1, "", "energy_flux"], [243, 3, 1, "", "energy_flux_error"], [243, 3, 1, "", "evaluate"], [243, 3, 1, "", "evaluate_error"], [243, 3, 1, "", "freeze"], [243, 3, 1, "", "from_dict"], [243, 3, 1, "", "from_parameters"], [243, 2, 1, "", "frozen"], [243, 3, 1, "", "integral"], [243, 3, 1, "", "integral_error"], [243, 3, 1, "", "inverse"], [243, 3, 1, "", "inverse_all"], [243, 2, 1, "", "is_norm_spectral_model"], [243, 2, 1, "", "norm"], [243, 2, 1, "", "parameters"], [243, 2, 1, "", "pivot_energy"], [243, 3, 1, "", "plot"], [243, 3, 1, "", "plot_error"], [243, 3, 1, "", "reassign"], [243, 3, 1, "", "reference_fluxes"], [243, 3, 1, "", "spectral_index"], [243, 3, 1, "", "spectral_index_error"], [243, 2, 1, "", "tag"], [243, 3, 1, "", "to_dict"], [243, 2, 1, "", "type"], [243, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Shell2SpatialModel": [[244, 3, 1, "", "__call__"], [244, 3, 1, "", "copy"], [244, 2, 1, "", "covariance"], [244, 2, 1, "", "default_parameters"], [244, 2, 1, "", "eta"], [244, 3, 1, "", "evaluate"], [244, 3, 1, "", "evaluate_geom"], [244, 2, 1, "", "evaluation_bin_size_min"], [244, 2, 1, "", "evaluation_radius"], [244, 2, 1, "", "evaluation_region"], [244, 3, 1, "", "freeze"], [244, 3, 1, "", "from_dict"], [244, 3, 1, "", "from_parameters"], [244, 3, 1, "", "from_position"], [244, 2, 1, "", "frozen"], [244, 3, 1, "", "integrate_geom"], [244, 2, 1, "", "is_energy_dependent"], [244, 2, 1, "", "lat_0"], [244, 2, 1, "", "lon_0"], [244, 2, 1, "", "parameters"], [244, 2, 1, "", "phi_0"], [244, 3, 1, "", "plot"], [244, 3, 1, "", "plot_error"], [244, 3, 1, "", "plot_grid"], [244, 3, 1, "", "plot_interactive"], [244, 3, 1, "", "plot_position_error"], [244, 2, 1, "", "position"], [244, 2, 1, "", "position_error"], [244, 2, 1, "", "position_lonlat"], [244, 2, 1, "", "r_0"], [244, 2, 1, "", "r_in"], [244, 3, 1, "", "reassign"], [244, 2, 1, "", "tag"], [244, 3, 1, "", "to_dict"], [244, 3, 1, "", "to_region"], [244, 2, 1, "", "type"], [244, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ShellSpatialModel": [[245, 3, 1, "", "__call__"], [245, 3, 1, "", "copy"], [245, 2, 1, "", "covariance"], [245, 2, 1, "", "default_parameters"], [245, 3, 1, "", "evaluate"], [245, 3, 1, "", "evaluate_geom"], [245, 2, 1, "", "evaluation_bin_size_min"], [245, 2, 1, "", "evaluation_radius"], [245, 2, 1, "", "evaluation_region"], [245, 3, 1, "", "freeze"], [245, 3, 1, "", "from_dict"], [245, 3, 1, "", "from_parameters"], [245, 3, 1, "", "from_position"], [245, 2, 1, "", "frozen"], [245, 3, 1, "", "integrate_geom"], [245, 2, 1, "", "is_energy_dependent"], [245, 2, 1, "", "lat_0"], [245, 2, 1, "", "lon_0"], [245, 2, 1, "", "parameters"], [245, 2, 1, "", "phi_0"], [245, 3, 1, "", "plot"], [245, 3, 1, "", "plot_error"], [245, 3, 1, "", "plot_grid"], [245, 3, 1, "", "plot_interactive"], [245, 3, 1, "", "plot_position_error"], [245, 2, 1, "", "position"], [245, 2, 1, "", "position_error"], [245, 2, 1, "", "position_lonlat"], [245, 2, 1, "", "radius"], [245, 3, 1, "", "reassign"], [245, 2, 1, "", "tag"], [245, 3, 1, "", "to_dict"], [245, 3, 1, "", "to_region"], [245, 2, 1, "", "type"], [245, 3, 1, "", "unfreeze"], [245, 2, 1, "", "width"]], "gammapy.modeling.models.SineTemporalModel": [[246, 3, 1, "", "__call__"], [246, 2, 1, "", "amp"], [246, 3, 1, "", "copy"], [246, 2, 1, "", "covariance"], [246, 2, 1, "", "default_parameters"], [246, 3, 1, "", "evaluate"], [246, 3, 1, "", "freeze"], [246, 3, 1, "", "from_dict"], [246, 3, 1, "", "from_parameters"], [246, 2, 1, "", "frozen"], [246, 3, 1, "", "integral"], [246, 2, 1, "", "is_energy_dependent"], [246, 2, 1, "", "omega"], [246, 2, 1, "", "parameters"], [246, 3, 1, "", "plot"], [246, 3, 1, "", "reassign"], [246, 2, 1, "", "reference_time"], [246, 3, 1, "", "sample_time"], [246, 2, 1, "", "t_ref"], [246, 2, 1, "", "tag"], [246, 3, 1, "", "time_sum"], [246, 3, 1, "", "to_dict"], [246, 2, 1, "", "type"], [246, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SkyModel": [[247, 3, 1, "", "__call__"], [247, 3, 1, "", "contributes"], [247, 3, 1, "", "copy"], [247, 2, 1, "", "covariance"], [247, 3, 1, "", "create"], [247, 2, 1, "", "default_parameters"], [247, 3, 1, "", "evaluate"], [247, 3, 1, "", "evaluate_geom"], [247, 2, 1, "", "evaluation_bin_size_min"], [247, 2, 1, "", "evaluation_radius"], [247, 2, 1, "", "evaluation_region"], [247, 2, 1, "", "frame"], [247, 3, 1, "", "freeze"], [247, 3, 1, "", "from_dict"], [247, 3, 1, "", "from_parameters"], [247, 2, 1, "", "frozen"], [247, 3, 1, "", "integrate_geom"], [247, 2, 1, "", "name"], [247, 2, 1, "", "parameters"], [247, 2, 1, "", "position"], [247, 2, 1, "", "position_lonlat"], [247, 3, 1, "", "reassign"], [247, 2, 1, "", "spatial_model"], [247, 2, 1, "", "spectral_model"], [247, 2, 1, "", "tag"], [247, 2, 1, "", "temporal_model"], [247, 3, 1, "", "to_dict"], [247, 2, 1, "", "type"], [247, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel": [[248, 3, 1, "", "__call__"], [248, 2, 1, "", "amplitude"], [248, 2, 1, "", "beta"], [248, 3, 1, "", "copy"], [248, 2, 1, "", "covariance"], [248, 2, 1, "", "default_parameters"], [248, 2, 1, "", "ebreak"], [248, 3, 1, "", "energy_flux"], [248, 3, 1, "", "energy_flux_error"], [248, 3, 1, "", "evaluate"], [248, 3, 1, "", "evaluate_error"], [248, 3, 1, "", "freeze"], [248, 3, 1, "", "from_dict"], [248, 3, 1, "", "from_parameters"], [248, 2, 1, "", "frozen"], [248, 2, 1, "", "index1"], [248, 2, 1, "", "index2"], [248, 3, 1, "", "integral"], [248, 3, 1, "", "integral_error"], [248, 3, 1, "", "inverse"], [248, 3, 1, "", "inverse_all"], [248, 2, 1, "", "is_norm_spectral_model"], [248, 2, 1, "", "parameters"], [248, 2, 1, "", "pivot_energy"], [248, 3, 1, "", "plot"], [248, 3, 1, "", "plot_error"], [248, 3, 1, "", "reassign"], [248, 2, 1, "", "reference"], [248, 3, 1, "", "reference_fluxes"], [248, 3, 1, "", "spectral_index"], [248, 3, 1, "", "spectral_index_error"], [248, 2, 1, "", "tag"], [248, 3, 1, "", "to_dict"], [248, 2, 1, "", "type"], [248, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SpatialModel": [[249, 3, 1, "", "__call__"], [249, 3, 1, "", "copy"], [249, 2, 1, "", "covariance"], [249, 2, 1, "", "default_parameters"], [249, 3, 1, "", "evaluate_geom"], [249, 2, 1, "", "evaluation_bin_size_min"], [249, 2, 1, "", "evaluation_radius"], [249, 2, 1, "", "evaluation_region"], [249, 3, 1, "", "freeze"], [249, 3, 1, "", "from_dict"], [249, 3, 1, "", "from_parameters"], [249, 3, 1, "", "from_position"], [249, 2, 1, "", "frozen"], [249, 3, 1, "", "integrate_geom"], [249, 2, 1, "", "is_energy_dependent"], [249, 2, 1, "", "parameters"], [249, 2, 1, "", "phi_0"], [249, 3, 1, "", "plot"], [249, 3, 1, "", "plot_error"], [249, 3, 1, "", "plot_grid"], [249, 3, 1, "", "plot_interactive"], [249, 3, 1, "", "plot_position_error"], [249, 2, 1, "", "position"], [249, 2, 1, "", "position_error"], [249, 2, 1, "", "position_lonlat"], [249, 3, 1, "", "reassign"], [249, 3, 1, "", "to_dict"], [249, 2, 1, "", "type"], [249, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SpectralModel": [[250, 3, 1, "", "__call__"], [250, 3, 1, "", "copy"], [250, 2, 1, "", "covariance"], [250, 2, 1, "", "default_parameters"], [250, 3, 1, "", "energy_flux"], [250, 3, 1, "", "energy_flux_error"], [250, 3, 1, "", "evaluate_error"], [250, 3, 1, "", "freeze"], [250, 3, 1, "", "from_dict"], [250, 3, 1, "", "from_parameters"], [250, 2, 1, "", "frozen"], [250, 3, 1, "", "integral"], [250, 3, 1, "", "integral_error"], [250, 3, 1, "", "inverse"], [250, 3, 1, "", "inverse_all"], [250, 2, 1, "", "is_norm_spectral_model"], [250, 2, 1, "", "parameters"], [250, 2, 1, "", "pivot_energy"], [250, 3, 1, "", "plot"], [250, 3, 1, "", "plot_error"], [250, 3, 1, "", "reassign"], [250, 3, 1, "", "reference_fluxes"], [250, 3, 1, "", "spectral_index"], [250, 3, 1, "", "spectral_index_error"], [250, 3, 1, "", "to_dict"], [250, 2, 1, "", "type"], [250, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel": [[251, 3, 1, "", "__call__"], [251, 2, 1, "", "amplitude"], [251, 3, 1, "", "copy"], [251, 2, 1, "", "covariance"], [251, 2, 1, "", "default_parameters"], [251, 2, 1, "", "ecut"], [251, 3, 1, "", "energy_flux"], [251, 3, 1, "", "energy_flux_error"], [251, 3, 1, "", "evaluate"], [251, 3, 1, "", "evaluate_error"], [251, 3, 1, "", "freeze"], [251, 3, 1, "", "from_dict"], [251, 3, 1, "", "from_parameters"], [251, 2, 1, "", "frozen"], [251, 2, 1, "", "index_1"], [251, 2, 1, "", "index_2"], [251, 3, 1, "", "integral"], [251, 3, 1, "", "integral_error"], [251, 3, 1, "", "inverse"], [251, 3, 1, "", "inverse_all"], [251, 2, 1, "", "is_norm_spectral_model"], [251, 2, 1, "", "parameters"], [251, 2, 1, "", "pivot_energy"], [251, 3, 1, "", "plot"], [251, 3, 1, "", "plot_error"], [251, 3, 1, "", "reassign"], [251, 2, 1, "", "reference"], [251, 3, 1, "", "reference_fluxes"], [251, 3, 1, "", "spectral_index"], [251, 3, 1, "", "spectral_index_error"], [251, 2, 1, "", "tag"], [251, 3, 1, "", "to_dict"], [251, 2, 1, "", "type"], [251, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel": [[252, 3, 1, "", "__call__"], [252, 2, 1, "", "amplitude"], [252, 3, 1, "", "copy"], [252, 2, 1, "", "covariance"], [252, 2, 1, "", "default_parameters"], [252, 3, 1, "", "energy_flux"], [252, 3, 1, "", "energy_flux_error"], [252, 3, 1, "", "evaluate"], [252, 3, 1, "", "evaluate_error"], [252, 2, 1, "", "expfactor"], [252, 3, 1, "", "freeze"], [252, 3, 1, "", "from_dict"], [252, 3, 1, "", "from_parameters"], [252, 2, 1, "", "frozen"], [252, 2, 1, "", "index_1"], [252, 2, 1, "", "index_2"], [252, 3, 1, "", "integral"], [252, 3, 1, "", "integral_error"], [252, 3, 1, "", "inverse"], [252, 3, 1, "", "inverse_all"], [252, 2, 1, "", "is_norm_spectral_model"], [252, 2, 1, "", "parameters"], [252, 2, 1, "", "pivot_energy"], [252, 3, 1, "", "plot"], [252, 3, 1, "", "plot_error"], [252, 3, 1, "", "reassign"], [252, 2, 1, "", "reference"], [252, 3, 1, "", "reference_fluxes"], [252, 3, 1, "", "spectral_index"], [252, 3, 1, "", "spectral_index_error"], [252, 2, 1, "", "tag"], [252, 3, 1, "", "to_dict"], [252, 2, 1, "", "type"], [252, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel": [[253, 3, 1, "", "__call__"], [253, 2, 1, "", "amplitude"], [253, 3, 1, "", "copy"], [253, 2, 1, "", "covariance"], [253, 2, 1, "", "default_parameters"], [253, 3, 1, "", "energy_flux"], [253, 3, 1, "", "energy_flux_error"], [253, 3, 1, "", "evaluate"], [253, 3, 1, "", "evaluate_error"], [253, 2, 1, "", "expfactor"], [253, 3, 1, "", "freeze"], [253, 3, 1, "", "from_dict"], [253, 3, 1, "", "from_parameters"], [253, 2, 1, "", "frozen"], [253, 2, 1, "", "index_1"], [253, 2, 1, "", "index_2"], [253, 3, 1, "", "integral"], [253, 3, 1, "", "integral_error"], [253, 3, 1, "", "inverse"], [253, 3, 1, "", "inverse_all"], [253, 2, 1, "", "is_norm_spectral_model"], [253, 2, 1, "", "parameters"], [253, 2, 1, "", "pivot_energy"], [253, 3, 1, "", "plot"], [253, 3, 1, "", "plot_error"], [253, 3, 1, "", "reassign"], [253, 2, 1, "", "reference"], [253, 3, 1, "", "reference_fluxes"], [253, 3, 1, "", "spectral_index"], [253, 3, 1, "", "spectral_index_error"], [253, 2, 1, "", "tag"], [253, 3, 1, "", "to_dict"], [253, 2, 1, "", "type"], [253, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.TemplateNDSpatialModel": [[255, 3, 1, "", "__call__"], [255, 3, 1, "", "copy"], [255, 2, 1, "", "covariance"], [255, 2, 1, "", "default_parameters"], [255, 3, 1, "", "evaluate"], [255, 3, 1, "", "evaluate_geom"], [255, 2, 1, "", "evaluation_bin_size_min"], [255, 2, 1, "", "evaluation_radius"], [255, 2, 1, "", "evaluation_region"], [255, 3, 1, "", "freeze"], [255, 3, 1, "", "from_dict"], [255, 3, 1, "", "from_parameters"], [255, 3, 1, "", "from_position"], [255, 2, 1, "", "frozen"], [255, 3, 1, "", "integrate_geom"], [255, 2, 1, "", "is_energy_dependent"], [255, 2, 1, "", "map"], [255, 2, 1, "", "parameters"], [255, 2, 1, "", "phi_0"], [255, 3, 1, "", "plot"], [255, 3, 1, "", "plot_error"], [255, 3, 1, "", "plot_grid"], [255, 3, 1, "", "plot_interactive"], [255, 3, 1, "", "plot_position_error"], [255, 2, 1, "", "position"], [255, 2, 1, "", "position_error"], [255, 2, 1, "", "position_lonlat"], [255, 3, 1, "", "reassign"], [255, 2, 1, "", "tag"], [255, 3, 1, "", "to_dict"], [255, 2, 1, "", "type"], [255, 3, 1, "", "unfreeze"], [255, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateNDSpectralModel": [[256, 3, 1, "", "__call__"], [256, 3, 1, "", "copy"], [256, 2, 1, "", "covariance"], [256, 2, 1, "", "default_parameters"], [256, 3, 1, "", "energy_flux"], [256, 3, 1, "", "energy_flux_error"], [256, 3, 1, "", "evaluate"], [256, 3, 1, "", "evaluate_error"], [256, 3, 1, "", "freeze"], [256, 3, 1, "", "from_dict"], [256, 3, 1, "", "from_parameters"], [256, 2, 1, "", "frozen"], [256, 3, 1, "", "integral"], [256, 3, 1, "", "integral_error"], [256, 3, 1, "", "inverse"], [256, 3, 1, "", "inverse_all"], [256, 2, 1, "", "is_norm_spectral_model"], [256, 2, 1, "", "map"], [256, 2, 1, "", "parameters"], [256, 2, 1, "", "pivot_energy"], [256, 3, 1, "", "plot"], [256, 3, 1, "", "plot_error"], [256, 3, 1, "", "reassign"], [256, 3, 1, "", "reference_fluxes"], [256, 3, 1, "", "spectral_index"], [256, 3, 1, "", "spectral_index_error"], [256, 2, 1, "", "tag"], [256, 3, 1, "", "to_dict"], [256, 2, 1, "", "type"], [256, 3, 1, "", "unfreeze"], [256, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateNPredModel": [[257, 3, 1, "", "copy"], [257, 2, 1, "", "covariance"], [257, 3, 1, "", "cutout"], [257, 2, 1, "", "default_parameters"], [257, 2, 1, "", "energy_center"], [257, 3, 1, "", "evaluate"], [257, 2, 1, "", "evaluation_radius"], [257, 3, 1, "", "freeze"], [257, 3, 1, "", "from_dict"], [257, 3, 1, "", "from_parameters"], [257, 2, 1, "", "frozen"], [257, 2, 1, "", "map"], [257, 2, 1, "", "name"], [257, 2, 1, "", "parameters"], [257, 2, 1, "", "position"], [257, 3, 1, "", "reassign"], [257, 3, 1, "", "slice_by_energy"], [257, 2, 1, "", "spectral_model"], [257, 3, 1, "", "stack"], [257, 2, 1, "", "tag"], [257, 3, 1, "", "to_dict"], [257, 2, 1, "", "type"], [257, 3, 1, "", "unfreeze"], [257, 3, 1, "", "write"]], "gammapy.modeling.models.TemplatePhaseCurveTemporalModel": [[258, 3, 1, "", "__call__"], [258, 3, 1, "", "copy"], [258, 2, 1, "", "covariance"], [258, 2, 1, "", "default_parameters"], [258, 3, 1, "", "evaluate"], [258, 2, 1, "", "f0"], [258, 2, 1, "", "f1"], [258, 2, 1, "", "f2"], [258, 3, 1, "", "freeze"], [258, 3, 1, "", "from_dict"], [258, 3, 1, "", "from_parameters"], [258, 2, 1, "", "frozen"], [258, 3, 1, "", "integral"], [258, 2, 1, "", "is_energy_dependent"], [258, 2, 1, "", "parameters"], [258, 2, 1, "", "phi_ref"], [258, 3, 1, "", "plot"], [258, 3, 1, "", "plot_phasogram"], [258, 3, 1, "", "read"], [258, 3, 1, "", "reassign"], [258, 2, 1, "", "reference_time"], [258, 3, 1, "", "sample_time"], [258, 2, 1, "", "t_ref"], [258, 2, 1, "", "tag"], [258, 3, 1, "", "time_sum"], [258, 3, 1, "", "to_dict"], [258, 2, 1, "", "type"], [258, 3, 1, "", "unfreeze"], [258, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateSpatialModel": [[259, 3, 1, "", "__call__"], [259, 3, 1, "", "copy"], [259, 2, 1, "", "covariance"], [259, 2, 1, "", "default_parameters"], [259, 3, 1, "", "evaluate"], [259, 3, 1, "", "evaluate_geom"], [259, 2, 1, "", "evaluation_bin_size_min"], [259, 2, 1, "", "evaluation_radius"], [259, 2, 1, "", "evaluation_region"], [259, 3, 1, "", "freeze"], [259, 3, 1, "", "from_dict"], [259, 3, 1, "", "from_parameters"], [259, 3, 1, "", "from_position"], [259, 2, 1, "", "frozen"], [259, 3, 1, "", "integrate_geom"], [259, 2, 1, "", "is_energy_dependent"], [259, 2, 1, "", "lat_0"], [259, 2, 1, "", "lon_0"], [259, 2, 1, "", "map"], [259, 2, 1, "", "map_center"], [259, 2, 1, "", "parameters"], [259, 2, 1, "", "phi_0"], [259, 3, 1, "", "plot"], [259, 3, 1, "", "plot_error"], [259, 3, 1, "", "plot_grid"], [259, 3, 1, "", "plot_interactive"], [259, 3, 1, "", "plot_position_error"], [259, 2, 1, "", "position"], [259, 2, 1, "", "position_error"], [259, 2, 1, "", "position_lonlat"], [259, 3, 1, "", "read"], [259, 3, 1, "", "reassign"], [259, 2, 1, "", "tag"], [259, 3, 1, "", "to_dict"], [259, 3, 1, "", "to_region"], [259, 2, 1, "", "type"], [259, 3, 1, "", "unfreeze"], [259, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateSpectralModel": [[260, 3, 1, "", "__call__"], [260, 3, 1, "", "copy"], [260, 2, 1, "", "covariance"], [260, 2, 1, "", "default_parameters"], [260, 3, 1, "", "energy_flux"], [260, 3, 1, "", "energy_flux_error"], [260, 3, 1, "", "evaluate"], [260, 3, 1, "", "evaluate_error"], [260, 3, 1, "", "freeze"], [260, 3, 1, "", "from_dict"], [260, 3, 1, "", "from_parameters"], [260, 3, 1, "", "from_region_map"], [260, 2, 1, "", "frozen"], [260, 3, 1, "", "integral"], [260, 3, 1, "", "integral_error"], [260, 3, 1, "", "inverse"], [260, 3, 1, "", "inverse_all"], [260, 2, 1, "", "is_norm_spectral_model"], [260, 2, 1, "", "parameters"], [260, 2, 1, "", "pivot_energy"], [260, 3, 1, "", "plot"], [260, 3, 1, "", "plot_error"], [260, 3, 1, "", "read_xspec_model"], [260, 3, 1, "", "reassign"], [260, 3, 1, "", "reference_fluxes"], [260, 3, 1, "", "spectral_index"], [260, 3, 1, "", "spectral_index_error"], [260, 2, 1, "", "tag"], [260, 3, 1, "", "to_dict"], [260, 2, 1, "", "type"], [260, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.TemporalModel": [[261, 3, 1, "", "__call__"], [261, 3, 1, "", "copy"], [261, 2, 1, "", "covariance"], [261, 2, 1, "", "default_parameters"], [261, 3, 1, "", "freeze"], [261, 3, 1, "", "from_dict"], [261, 3, 1, "", "from_parameters"], [261, 2, 1, "", "frozen"], [261, 3, 1, "", "integral"], [261, 2, 1, "", "is_energy_dependent"], [261, 2, 1, "", "parameters"], [261, 3, 1, "", "plot"], [261, 3, 1, "", "reassign"], [261, 2, 1, "", "reference_time"], [261, 3, 1, "", "sample_time"], [261, 3, 1, "", "time_sum"], [261, 3, 1, "", "to_dict"], [261, 2, 1, "", "type"], [261, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.utils": [[268, 4, 1, "", "read_hermes_cube"]], "gammapy.stats": [[271, 1, 1, "", "CashCountsStatistic"], [272, 1, 1, "", "WStatCountsStatistic"], [273, 4, 1, "", "cash"], [274, 4, 1, "", "cash_sum_cython"], [275, 4, 1, "", "compute_chisq"], [276, 4, 1, "", "compute_flux_doubling"], [277, 4, 1, "", "compute_fpp"], [278, 4, 1, "", "compute_fvar"], [279, 4, 1, "", "cstat"], [280, 4, 1, "", "f_cash_root_cython"], [281, 4, 1, "", "get_wstat_gof_terms"], [282, 4, 1, "", "get_wstat_mu_bkg"], [283, 4, 1, "", "norm_bounds_cython"], [284, 4, 1, "", "wstat"]], "gammapy.stats.CashCountsStatistic": [[271, 3, 1, "", "compute_errn"], [271, 3, 1, "", "compute_errp"], [271, 3, 1, "", "compute_upper_limit"], [271, 2, 1, "", "error"], [271, 3, 1, "", "info_dict"], [271, 2, 1, "", "n_bkg"], [271, 2, 1, "", "n_sig"], [271, 3, 1, "", "n_sig_matching_significance"], [271, 2, 1, "", "p_value"], [271, 2, 1, "", "sqrt_ts"], [271, 2, 1, "", "stat_max"], [271, 2, 1, "", "stat_null"], [271, 3, 1, "", "sum"], [271, 2, 1, "", "ts"]], "gammapy.stats.WStatCountsStatistic": [[272, 3, 1, "", "compute_errn"], [272, 3, 1, "", "compute_errp"], [272, 3, 1, "", "compute_upper_limit"], [272, 2, 1, "", "error"], [272, 3, 1, "", "info_dict"], [272, 2, 1, "", "n_bkg"], [272, 2, 1, "", "n_sig"], [272, 3, 1, "", "n_sig_matching_significance"], [272, 2, 1, "", "p_value"], [272, 2, 1, "", "sqrt_ts"], [272, 2, 1, "", "stat_max"], [272, 2, 1, "", "stat_null"], [272, 3, 1, "", "sum"], [272, 2, 1, "", "ts"]], "gammapy.utils": [[13, 0, 0, "-", "cluster"], [13, 0, 0, "-", "coordinates"], [13, 0, 0, "-", "fits"], [13, 0, 0, "-", "integrate"], [13, 0, 0, "-", "interpolation"], [13, 0, 0, "-", "parallel"], [13, 0, 0, "-", "random"], [13, 0, 0, "-", "regions"], [13, 0, 0, "-", "scripts"], [13, 0, 0, "-", "table"], [13, 0, 0, "-", "testing"], [13, 0, 0, "-", "time"], [13, 0, 0, "-", "units"]], "gammapy.utils.cluster": [[285, 4, 1, "", "hierarchical_clustering"], [286, 4, 1, "", "standard_scaler"]], "gammapy.utils.coordinates": [[287, 5, 1, "", "D_SUN_TO_GALACTIC_CENTER"], [288, 4, 1, "", "cartesian"], [289, 4, 1, "", "fov_to_sky"], [290, 4, 1, "", "galactic"], [291, 4, 1, "", "motion_since_birth"], [292, 4, 1, "", "polar"], [293, 4, 1, "", "sky_to_fov"], [294, 4, 1, "", "velocity_glon_glat"]], "gammapy.utils.fits": [[295, 1, 1, "", "HDULocation"], [296, 1, 1, "", "LazyFitsData"], [297, 4, 1, "", "earth_location_from_dict"]], "gammapy.utils.fits.HDULocation": [[295, 3, 1, "", "get_hdu"], [295, 3, 1, "", "info"], [295, 3, 1, "", "load"], [295, 3, 1, "", "path"]], "gammapy.utils.integrate": [[298, 4, 1, "", "trapz_loglog"]], "gammapy.utils.interpolation": [[299, 1, 1, "", "ScaledRegularGridInterpolator"], [300, 4, 1, "", "interpolate_profile"], [301, 4, 1, "", "interpolation_scale"]], "gammapy.utils.interpolation.ScaledRegularGridInterpolator": [[299, 3, 1, "", "__call__"]], "gammapy.utils.parallel": [[302, 5, 1, "", "BACKEND_DEFAULT"], [303, 5, 1, "", "METHOD_DEFAULT"], [304, 5, 1, "", "METHOD_KWARGS_DEFAULT"], [305, 5, 1, "", "N_JOBS_DEFAULT"], [306, 5, 1, "", "POOL_KWARGS_DEFAULT"], [307, 1, 1, "", "multiprocessing_manager"], [308, 4, 1, "", "run_multiprocessing"]], "gammapy.utils.random": [[309, 1, 1, "", "InverseCDFSampler"], [310, 4, 1, "", "draw"], [311, 4, 1, "", "get_random_state"], [312, 4, 1, "", "normalize"], [313, 4, 1, "", "pdf"], [314, 4, 1, "", "sample_powerlaw"], [315, 4, 1, "", "sample_sphere"], [316, 4, 1, "", "sample_sphere_distance"], [317, 4, 1, "", "sample_times"]], "gammapy.utils.random.InverseCDFSampler": [[309, 3, 1, "", "sample"], [309, 3, 1, "", "sample_axis"]], "gammapy.utils.regions": [[318, 4, 1, "", "compound_region_to_regions"], [319, 4, 1, "", "make_concentric_annulus_sky_regions"], [320, 4, 1, "", "make_orthogonal_rectangle_sky_regions"], [321, 4, 1, "", "region_to_frame"], [322, 4, 1, "", "regions_to_compound_region"]], "gammapy.utils.scripts": [[323, 4, 1, "", "get_images_paths"], [324, 4, 1, "", "make_path"], [325, 4, 1, "", "read_yaml"], [326, 4, 1, "", "recursive_merge_dicts"], [327, 4, 1, "", "write_yaml"]], "gammapy.utils.table": [[328, 4, 1, "", "hstack_columns"], [329, 4, 1, "", "table_row_to_dict"], [330, 4, 1, "", "table_standardise_units_copy"], [331, 4, 1, "", "table_standardise_units_inplace"]], "gammapy.utils.testing": [[332, 1, 1, "", "Checker"], [333, 4, 1, "", "assert_quantity_allclose"], [334, 4, 1, "", "assert_skycoord_allclose"], [335, 4, 1, "", "assert_time_allclose"], [336, 4, 1, "", "mpl_plot_check"], [337, 4, 1, "", "requires_data"], [338, 4, 1, "", "requires_dependency"]], "gammapy.utils.testing.Checker": [[332, 3, 1, "", "run"]], "gammapy.utils.time": [[339, 4, 1, "", "absolute_time"], [340, 4, 1, "", "time_ref_from_dict"], [341, 4, 1, "", "time_ref_to_dict"], [342, 4, 1, "", "time_relative_to_ref"]], "gammapy.utils.units": [[343, 4, 1, "", "standardise_unit"], [344, 4, 1, "", "unit_from_fits_image_hdu"]], "gammapy.visualization": [[345, 1, 1, "", "MapPanelPlotter"], [346, 4, 1, "", "add_colorbar"], [347, 4, 1, "", "annotate_heatmap"], [348, 4, 1, "", "colormap_hess"], [349, 4, 1, "", "colormap_milagro"], [350, 4, 1, "", "plot_contour_line"], [351, 4, 1, "", "plot_distribution"], [352, 4, 1, "", "plot_heatmap"], [353, 4, 1, "", "plot_map_rgb"], [354, 4, 1, "", "plot_npred_signal"], [355, 4, 1, "", "plot_spectrum_datasets_off_regions"], [356, 4, 1, "", "plot_theta_squared_table"]], "gammapy.visualization.MapPanelPlotter": [[345, 3, 1, "", "plot"], [345, 3, 1, "", "plot_panel"]], "gammapy-analysis-config": [[11, 6, 1, "cmdoption-gammapy-analysis-config-filename", "--filename"], [11, 6, 1, "cmdoption-gammapy-analysis-config-overwrite", "--overwrite"]], "gammapy-analysis-run": [[11, 6, 1, "cmdoption-gammapy-analysis-run-filename", "--filename"], [11, 6, 1, "cmdoption-gammapy-analysis-run-out", "--out"], [11, 6, 1, "cmdoption-gammapy-analysis-run-overwrite", "--overwrite"]], "gammapy-download-datasets": [[11, 6, 1, "cmdoption-gammapy-download-datasets-out", "--out"], [11, 6, 1, "cmdoption-gammapy-download-datasets-release", "--release"]], "gammapy-download-notebooks": [[11, 6, 1, "cmdoption-gammapy-download-notebooks-out", "--out"], [11, 6, 1, "cmdoption-gammapy-download-notebooks-release", "--release"]], "gammapy-info": [[11, 6, 1, "cmdoption-gammapy-info-dependencies", "--dependencies"], [11, 6, 1, "cmdoption-gammapy-info-envvar", "--envvar"], [11, 6, 1, "cmdoption-gammapy-info-dependencies", "--no-dependencies"], [11, 6, 1, "cmdoption-gammapy-info-envvar", "--no-envvar"], [11, 6, 1, "cmdoption-gammapy-info-system", "--no-system"], [11, 6, 1, "cmdoption-gammapy-info-version", "--no-version"], [11, 6, 1, "cmdoption-gammapy-info-system", "--system"], [11, 6, 1, "cmdoption-gammapy-info-version", "--version"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function", "5": "py:data", "6": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["std", "cmdoption", "program option"]}, "titleterms": {"analysi": [0, 11, 15, 364, 367, 427, 428, 431, 432, 433, 434, 439, 440, 441, 449, 452, 472, 476, 488, 491, 550], "high": [0, 5, 367, 374, 476, 491], "level": [0, 5, 364, 367, 374, 476, 477, 491], "interfac": [0, 367, 369, 374, 476, 491, 504], "gammapi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 358, 361, 364, 367, 375, 377, 378, 379, 383, 384, 385, 387, 388, 394, 395, 458, 467, 468, 469, 470, 480, 483, 487, 488, 489, 490, 491, 497, 499, 500, 501, 504, 549, 550, 556], "packag": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 377, 379, 388, 391, 411, 472, 480, 481, 550], "class": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 358, 359, 368, 369, 382, 385, 477, 498, 554], "astro": [1, 480, 483], "astrophys": [1, 481, 482, 483], "darkmatt": [1, 480], "popul": [1, 482], "function": [1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 358, 359, 467, 494, 495, 496, 497, 498, 554, 556], "variabl": [1, 2, 3, 4, 5, 7, 8, 10, 13, 443, 448], "sourc": [1, 2, 427, 428, 431, 435, 441, 442, 443, 444, 451, 455, 461, 465, 467, 478, 482, 483, 484, 485, 487], "catalog": [2, 455, 461, 462, 478, 487], "data": [3, 8, 358, 364, 366, 367, 373, 385, 388, 428, 431, 432, 433, 439, 440, 442, 445, 449, 450, 452, 456, 459, 460, 469, 472, 476, 477, 478, 489, 500, 552, 553], "dl3": [3, 440, 470, 489, 497, 500], "observ": [3, 84, 87, 367, 368, 431, 432, 441, 443, 444, 449, 450, 459, 464, 476, 477], "dataset": [4, 11, 94, 95, 358, 367, 370, 379, 380, 385, 427, 428, 432, 433, 436, 437, 439, 440, 444, 449, 450, 451, 456, 457, 459, 461, 462, 465, 469, 476, 477, 488, 491], "reduc": [4, 436, 437, 456, 476, 477], "util": [4, 5, 8, 10, 13, 377, 550, 554, 556], "modul": [4, 5, 8, 10, 13], "estim": [5, 115, 376, 379, 382, 385, 432, 435, 442, 445, 448, 449, 459, 490, 500, 501, 554], "api": [6, 358, 359, 380, 382, 385, 386, 420, 423, 424, 472, 477], "refer": [6, 378, 551, 552, 553], "irf": [7, 146, 367, 385, 427, 456, 458, 467, 497], "instrument": [7, 440, 497], "respons": [7, 497], "maker": [8, 161, 379, 385, 428, 450, 459, 476, 477, 499, 500, 501], "reduct": [8, 367, 373, 428, 431, 432, 433, 439, 449, 450, 459, 469, 476, 477, 500, 552], "map": [9, 185, 189, 364, 367, 368, 435, 436, 437, 440, 441, 447, 452, 454, 458, 460, 461, 462, 474, 478, 490, 503, 504, 505], "sky": [9, 369, 372, 441, 443, 461, 496, 504], "model": [10, 230, 232, 367, 369, 377, 380, 381, 385, 386, 428, 431, 432, 433, 436, 439, 440, 441, 443, 444, 449, 450, 451, 454, 455, 456, 457, 462, 463, 465, 467, 476, 477, 478, 482, 483, 484, 485, 486, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 553], "fit": [10, 13, 199, 367, 373, 428, 429, 431, 432, 433, 436, 439, 440, 441, 447, 451, 457, 461, 465, 468, 476, 477, 505, 549, 553, 554, 555], "script": [11, 13, 358, 394, 472, 474], "command": [11, 358, 552], "line": [11, 358, 552], "tool": [11, 358, 552], "config": [11, 436, 437, 552], "run": [11, 361, 431, 432, 433, 442, 444, 445, 449, 476, 552], "check": [11, 358, 359, 393, 427, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "log": [11, 358, 429, 526, 527], "download": [11, 388], "notebook": [11, 358, 366, 394], "info": [11, 358], "stat": 12, "statist": [12, 431, 461, 553, 554], "cluster": [13, 464], "coordin": [13, 358, 369, 495, 505], "integr": [13, 388, 427], "interpol": [13, 358, 460], "random": [13, 358], "region": [13, 369, 372, 427, 428, 431, 433, 459, 461, 462, 501, 505], "parallel": [13, 370], "tabl": [13, 442, 455, 489], "test": [13, 358, 361, 442, 452], "time": [13, 367, 373, 426, 430, 438, 443, 446, 448, 450, 451, 453, 466, 471, 472, 473, 475, 479, 507, 517, 538, 548, 556], "unit": [13, 358], "visual": [14, 379, 460, 505, 557], "plot": [14, 358, 431, 432, 435, 441, 442, 445, 460, 462, 477, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 557], "featur": [14, 383, 387, 420, 423, 424], "analysisconfig": 16, "burkertprofil": 17, "dmprofil": 18, "darkmatterannihilationspectralmodel": [19, 480], "darkmatterdecayspectralmodel": 20, "einastoprofil": 21, "isothermalprofil": 22, "jfactori": 23, "mooreprofil": 24, "nfwprofil": 25, "primaryflux": 26, "zhaoprofil": 27, "casebattacharya1998": 28, "exponenti": [29, 429, 522, 523, 524, 534, 535, 536], "faucherkaspi2006": 30, "faucherkaspi2006velocitybimod": 31, "faucherkaspi2006velocitymaxwellian": 32, "faucherspir": 33, "logspir": 34, "lorimer2006": 35, "paczynski1990": 36, "paczynski1990veloc": 37, "valleespir": 38, "yusifovkucuk2004": 39, "yusifovkucuk2004b": 40, "add_observed_paramet": 41, "add_pulsar_paramet": 42, "add_pwn_paramet": 43, "add_snr_paramet": 44, "make_base_catalog_galact": 45, "make_catalog_random_positions_cub": 46, "make_catalog_random_positions_spher": 47, "radial_distribut": 48, "velocity_distribut": 49, "pwn": 50, "pulsar": [51, 452, 484, 485], "snr": 52, "snrtruelovemcke": 53, "simplepulsar": 54, "catalog_registri": 55, "sourcecatalog": 56, "sourcecatalog1lhaaso": 57, "sourcecatalog2fhl": 58, "sourcecatalog2hwc": 59, "sourcecatalog3fgl": 60, "sourcecatalog3fhl": [61, 487], "sourcecatalog3hwc": 62, "sourcecatalog4fgl": 63, "sourcecataloggammacat": [64, 487], "sourcecataloghgp": 65, "sourcecataloglargescalehgp": 66, "sourcecatalogobject": 67, "sourcecatalogobject1lhaaso": 68, "sourcecatalogobject2fhl": 69, "sourcecatalogobject2hwc": 70, "sourcecatalogobject3fgl": 71, "sourcecatalogobject3fhl": 72, "sourcecatalogobject3hwc": 73, "sourcecatalogobject4fgl": 74, "sourcecatalogobjectgammacat": 75, "sourcecatalogobjecthgp": 76, "sourcecatalogobjecthgpscompon": 77, "datastor": [78, 467, 477, 489], "eventlist": [79, 489], "eventlistmetadata": 80, "fixedpointinginfo": 81, "gti": [82, 489], "hduindext": 83, "observationfilt": 85, "observationt": 86, "observationseventssampl": 88, "pointinginfo": 89, "pointingmod": 90, "get_irfs_featur": 91, "observatory_loc": 92, "dataset_registri": 93, "fluxpointsdataset": [96, 370, 456], "mapdataset": [97, 370, 439, 443, 456, 469, 488], "mapdataseteventsampl": [98, 371], "mapdatasetmetadata": 99, "mapdatasetonoff": [100, 370], "ogipdatasetread": 101, "ogipdatasetwrit": 102, "observationeventsampl": 103, "spectrumdataset": [104, 370, 456], "spectrumdatasetonoff": [105, 370, 488], "apply_edisp": [106, 110], "create_map_dataset_from_observ": 107, "create_map_dataset_geom": 108, "split_dataset": [109, 111], "asmoothmapestim": 112, "estimator_registri": 113, "energydependentmorphologyestim": 114, "excessmapestim": 116, "fluxmap": [117, 382], "fluxmetadata": 118, "fluxpoint": 119, "fluxpointsestim": [120, 490], "fluxprofileestim": 121, "imageprofil": 122, "imageprofileestim": 123, "lightcurveestim": [124, 490], "parameterestim": 125, "sensitivityestim": 126, "tsmapestim": 127, "compute_lightcurve_doublingtim": 128, "compute_lightcurve_fpp": 129, "compute_lightcurve_fvar": 130, "estimate_exposure_reco_energi": 131, "find_peak": 132, "find_peaks_in_flux_map": 133, "get_rebinned_axi": 134, "resample_energy_edg": 135, "background2d": 136, "background3d": 137, "backgroundirf": 138, "edispkernel": 139, "edispkernelmap": [140, 497], "edispmap": 141, "effectiveareatable2d": 142, "energydependentmultigausspsf": 143, "energydispersion2d": 144, "fovalign": 145, "irfmap": 147, "irf_registri": 148, "psf3d": 149, "psfkernel": 150, "psfking": 151, "psfmap": [152, 458, 497], "parametricpsf": 153, "radmax2d": 154, "recopsfmap": 155, "load_irf_dict_from_fil": [156, 497], "adaptiveringbackgroundmak": 157, "datasetsmak": 158, "fovbackgroundmak": [159, 499], "maker_registri": 160, "mapdatasetmak": [162, 500], "phasebackgroundmak": 163, "reflectedregionsbackgroundmak": [164, 501], "reflectedregionsfind": 165, "regionsfind": 166, "ringbackgroundmak": 167, "safemaskmak": 168, "spectrumdatasetmak": [169, 500], "wobbleregionsfind": 170, "make_counts_rad_max": 171, "make_edisp_kernel_map": 172, "make_edisp_map": 173, "make_effective_livetime_map": 174, "make_map_background_irf": 175, "make_map_exposure_true_energi": 176, "make_observation_time_map": 177, "make_psf_map": 178, "make_theta_squared_t": 179, "geom": 180, "hpxgeom": 181, "hpxmap": 182, "hpxndmap": [183, 504], "labelmapaxi": [184, 460], "mapax": 186, "mapaxi": 187, "mapcoord": [188, 504], "regiongeom": [190, 505], "regionndmap": [191, 504, 505], "timemapaxi": [192, 460], "wcsgeom": 193, "wcsmap": 194, "wcsndmap": [195, 504], "containment_radiu": 196, "containment_region": 197, "covari": [198, 457], "paramet": [200, 201, 369, 381, 386, 432, 442, 457, 462, 463, 476], "priorparamet": [202, 203], "brokenpowerlawspectralmodel": 204, "compoundspectralmodel": 205, "constantfluxspatialmodel": 206, "constantspatialmodel": 207, "constantspectralmodel": 208, "constanttemporalmodel": 209, "datasetmodel": 210, "diskspatialmodel": 211, "eblabsorptionnormspectralmodel": 212, "ebl_data_builtin": 213, "expcutoffpowerlaw3fglspectralmodel": 214, "expcutoffpowerlawnormspectralmodel": 215, "expcutoffpowerlawspectralmodel": 216, "expdecaytemporalmodel": 217, "fovbackgroundmodel": 218, "gaussianspatialmodel": 219, "gaussianspectralmodel": 220, "gaussiantemporalmodel": 221, "generalizedgaussianspatialmodel": 222, "generalizedgaussiantemporalmodel": 223, "lightcurvetemplatetemporalmodel": 224, "lineartemporalmodel": 225, "logparabolanormspectralmodel": 226, "logparabolaspectralmodel": 227, "model_registri": 228, "meyercrabspectralmodel": 229, "modelbas": 231, "naimaspectralmodel": 233, "piecewisenormspatialmodel": 234, "piecewisenormspectralmodel": 235, "pointspatialmodel": 236, "powerlaw2spectralmodel": 237, "powerlawnormspectralmodel": 238, "powerlawspectralmodel": 239, "powerlawtemporalmodel": 240, "spatial_model_registri": 241, "spectral_model_registri": 242, "scalespectralmodel": 243, "shell2spatialmodel": 244, "shellspatialmodel": 245, "sinetemporalmodel": 246, "skymodel": [247, 463], "smoothbrokenpowerlawspectralmodel": 248, "spatialmodel": 249, "spectralmodel": 250, "superexpcutoffpowerlaw3fglspectralmodel": 251, "superexpcutoffpowerlaw4fgldr3spectralmodel": 252, "superexpcutoffpowerlaw4fglspectralmodel": 253, "temporal_model_registri": 254, "templatendspatialmodel": 255, "templatendspectralmodel": 256, "templatenpredmodel": 257, "templatephasecurvetemporalmodel": 258, "templatespatialmodel": 259, "templatespectralmodel": 260, "temporalmodel": 261, "create_cosmic_ray_spectral_model": 262, "create_crab_spectral_model": 263, "create_fermi_isotropic_diffuse_model": 264, "integrate_spectrum": 265, "read_hermes_cub": [266, 268], "scale_plot_flux": 267, "select_nested_model": 269, "stat_profile_ul_scipi": 270, "cashcountsstatist": 271, "wstatcountsstatist": 272, "cash": [273, 553, 554], "cash_sum_cython": 274, "compute_chisq": 275, "compute_flux_doubl": 276, "compute_fpp": 277, "compute_fvar": 278, "cstat": 279, "f_cash_root_cython": 280, "get_wstat_gof_term": 281, "get_wstat_mu_bkg": 282, "norm_bounds_cython": 283, "wstat": [284, 553, 554, 555], "hierarchical_clust": 285, "standard_scal": 286, "d_sun_to_galactic_cent": 287, "cartesian": 288, "fov_to_ski": 289, "galact": [290, 468], "motion_since_birth": 291, "polar": 292, "sky_to_fov": 293, "velocity_glon_glat": 294, "hduloc": 295, "lazyfitsdata": 296, "earth_location_from_dict": 297, "trapz_loglog": 298, "scaledregulargridinterpol": 299, "interpolate_profil": 300, "interpolation_scal": 301, "backend_default": 302, "method_default": 303, "method_kwargs_default": 304, "n_jobs_default": 305, "pool_kwargs_default": 306, "multiprocessing_manag": 307, "run_multiprocess": 308, "inversecdfsampl": 309, "draw": 310, "get_random_st": 311, "normal": [312, 476], "pdf": 313, "sample_powerlaw": 314, "sample_spher": 315, "sample_sphere_dist": 316, "sample_tim": 317, "compound_region_to_region": 318, "make_concentric_annulus_sky_region": 319, "make_orthogonal_rectangle_sky_region": 320, "region_to_fram": 321, "regions_to_compound_region": 322, "get_images_path": 323, "make_path": 324, "read_yaml": 325, "recursive_merge_dict": 326, "write_yaml": 327, "hstack_column": 328, "table_row_to_dict": 329, "table_standardise_units_copi": 330, "table_standardise_units_inplac": 331, "checker": 332, "assert_quantity_allclos": 333, "note": [333, 358, 396, 553], "assert_skycoord_allclos": 334, "assert_time_allclos": 335, "mpl_plot_check": 336, "requires_data": 337, "requires_depend": 338, "absolute_tim": 339, "time_ref_from_dict": 340, "time_ref_to_dict": 341, "time_relative_to_ref": 342, "standardise_unit": 343, "unit_from_fits_image_hdu": 344, "mappanelplott": 345, "add_colorbar": 346, "annotate_heatmap": 347, "colormap_hess": 348, "colormap_milagro": 349, "plot_contour_lin": 350, "plot_distribut": 351, "plot_heatmap": 352, "plot_map_rgb": 353, "plot_npred_sign": 354, "plot_spectrum_datasets_off_region": 355, "plot_theta_squared_t": 356, "depend": [357, 375, 381, 411, 433, 442, 444, 463], "requir": [357, 358, 375, 385], "option": [357, 375, 457], "develop": [358, 360, 361, 365], "how": [358, 359, 361, 378, 387, 460, 492], "To": [358, 359, 378, 492], "gener": [358, 364, 368, 373, 384, 385, 490, 511, 542], "convent": 358, "python": [358, 359, 365, 383, 394], "version": [358, 383, 387, 396, 447], "support": [358, 365, 383, 384, 386, 458, 488], "axi": [358, 497], "name": [358, 369, 497], "clobber": 358, "overwrit": 358, "pixel": [358, 372, 461], "bsd": 358, "gpl": 358, "licens": 358, "write": [358, 363, 432, 444, 460, 461, 489, 505, 552], "code": [358, 359, 364, 367, 388], "where": 358, "should": 358, "i": [358, 361, 363, 445], "import": [358, 447], "from": [358, 450, 460, 461, 462, 505], "return": [358, 359], "sever": 358, "valu": [358, 386, 442, 460, 465], "what": [358, 361, 363, 366, 368, 373, 374, 382, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 429, 431, 432, 435, 441, 449, 476, 478], "convers": 358, "do": 358, "input": [358, 385, 435], "float": 358, "type": [358, 385, 488], "32": 358, "bit": 358, "64": 358, "us": [358, 368, 386, 391, 394, 432, 442, 443, 449, 456, 457, 458, 460, 476, 477, 480, 483, 487, 488, 489, 490, 491, 497, 499, 500, 501, 504, 523, 534, 535, 536, 549], "number": [358, 383, 497], "messag": 358, "extrapol": 358, "assert": 358, "skip": 358, "some": [358, 368, 461], "astropi": [358, 383], "caplog": 358, "fixtur": 358, "make": [358, 361, 387, 441, 444, 452, 477], "pull": [358, 361, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "request": [358, 361, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "new": [358, 369, 373, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 450], "modifi": [358, 460, 463], "which": 358, "github": 358, "action": [358, 378], "fix": [358, 411, 420, 423, 424], "non": [358, 460, 505], "unix": 358, "end": 358, "backport": 358, "releas": [358, 367, 383, 384, 387, 388, 396], "handl": [358, 367, 368, 369, 380, 384, 459, 556], "break": 358, "chang": [358, 379, 420, 423, 424], "deprec": [358, 383], "renam": 358, "an": [358, 427, 443, 444, 456, 461], "argument": [358, 372], "remov": [358, 462], "attribut": [358, 359, 369], "other": [358, 359, 368, 388, 391, 480], "click": 358, "bundl": 358, "extern": 358, "locat": 358, "origin": [358, 361], "warn": 358, "object": [358, 359, 368, 380, 436, 437, 443, 444, 455, 464], "text": 358, "repr": 358, "str": 358, "output": 358, "jupyt": [358, 394], "cell": 358, "convert": 358, "sphinx": [358, 359], "galleri": [358, 359, 506], "format": [358, 556], "document": [359, 361, 367, 378, 424], "build": [359, 361, 388, 449, 450], "rst": 359, "file": [359, 384, 432, 436, 437, 440, 467, 476, 489, 505], "docstr": 359, "extens": 359, "choos": 359, "thumbnail": 359, "tooltip": 359, "tutori": [359, 366, 378, 390, 442, 467, 472], "deal": 359, "link": 359, "broken": [359, 519, 533], "includ": [359, 465], "png": 359, "imag": [359, 364, 372, 377, 435, 441, 460, 472], "In": 359, "guidelin": [359, 363, 364, 378], "method": [359, 370, 371, 386, 448, 460, 490, 504], "singl": [359, 434], "guid": [360, 493], "contribut": [361, 384, 462], "thi": 361, "accept": 361, "certif": 361, "dco": [361, 384], "get": [361, 378, 390, 436, 437, 460, 481, 482, 483, 489, 504], "touch": 361, "earli": 361, "small": 361, "set": [361, 432, 460, 476], "up": [361, 377, 379], "pig": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "1": [363, 367, 386, 396, 397, 404, 405, 407, 412, 420, 421, 422, 423, 424, 425, 465], "purpos": 363, "abstract": [363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "review": 363, "statu": [363, 368, 377, 383], "final": [363, 387, 432, 555], "remark": 363, "decis": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "2": [364, 365, 386, 396, 408, 410, 422, 424, 465, 531], "organ": [364, 373], "low": [364, 477], "The": [364, 388, 440, 442, 457, 465, 489, 501], "case": [364, 368, 386, 555], "cube": [364, 460, 472], "style": 364, "subpackag": 364, "exist": 364, "3": [365, 386, 396, 403, 413, 425], "plan": 365, "drop": 365, "7": [365, 369, 396, 417], "user": [365, 493], "perspect": 365, "maintain": [365, 384], "detail": [365, 439], "4": [366, 396, 414], "setup": [366, 388, 390, 392, 393, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 476, 477, 478], "we": [366, 373, 374, 382, 469], "have": [366, 368, 373, 374, 382], "propos": [366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 385, 428, 429, 432, 434, 435, 436, 437, 440, 443, 444, 445, 447, 448, 449, 450, 451, 457, 461, 462, 464, 476, 477], "altern": [366, 369, 371, 372, 373, 374, 375, 376, 378, 379, 382, 385], "5": [367, 396, 415], "0": [367, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "roadmap": 367, "meet": 367, "project": [367, 388], "mainten": 367, "qualiti": [367, 388, 431, 433, 439, 457], "event": [367, 371, 443, 444, 452, 460, 467, 468, 470, 478, 489, 497], "simul": [367, 370, 433, 434, 443, 444, 447, 451], "paper": 367, "manag": [367, 391], "6": [368, 396, 416], "cta": [368, 467], "terminologi": 368, "limit": 368, "scenario": 368, "idea": 368, "diagram": 368, "implement": [368, 369, 378, 384, 386, 463, 465], "road": 368, "introduct": [369, 372, 373, 375, 376, 378, 382, 384, 385, 427, 431, 433, 441, 452, 454, 455, 456, 459, 460, 467, 468, 472, 478, 480, 482, 483, 553], "introduc": [369, 377, 379, 381, 382, 445], "scheme": [369, 384], "unifi": [369, 382], "call": 369, "background": [369, 373, 377, 380, 386, 437, 442, 443, 459, 462, 467, 468, 476, 495, 499, 500, 501, 502, 553], "backgroundmodel": 369, "backgroundirfmodel": 369, "forward": 369, "fold": 369, "spectralirfmodel": 369, "spatialirfmodel": 369, "sourceirfmodel": 369, "improv": [369, 381, 411, 420, 423, 424], "sourcemodel": 369, "seril": 369, "spatial": [369, 381, 441, 454, 460, 463, 482, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516], "default": 369, "evalu": [369, 370, 371], "specif": [369, 378, 455], "expos": 369, "add": [369, 462], "parametr": 369, "task": [369, 370, 371, 372, 373, 374, 375], "list": [369, 370, 371, 372, 373, 374, 375, 443, 450, 455, 460, 461, 462, 463, 478, 489], "8": [370, 396, 418], "helper": 370, "conveni": 370, "serial": [370, 385, 440], "outlook": [370, 371, 372, 374, 375, 377, 378, 379, 382], "lazi": 370, "load": [370, 427, 429, 431, 433, 455, 462], "9": [371, 396, 419], "sampl": [371, 443, 444], "perform": [371, 428, 467, 477], "precis": 371, "10": [372, 396, 398], "rotat": 372, "mask": [372, 431, 432, 437, 456, 461, 476], "11": [373, 396, 399], "light": [373, 449, 450, 451, 547], "curv": [373, 449, 450, 451, 546, 547], "lightcurv": [373, 443, 448, 451, 455], "gamma": [373, 454], "rai": [373, 454], "astronomi": 373, "now": 373, "approach": [373, 428, 429, 432, 434, 435, 436, 437, 440, 443, 444, 445, 447, 448, 449, 450, 451, 457, 461, 462, 464, 476, 477], "bin": [373, 427, 442, 505], "prepar": [373, 383, 427, 428, 444, 477], "store": [373, 432, 496], "result": [373, 382, 427, 428, 432, 435, 442, 445, 449, 555], "further": [373, 553], "studi": 373, "discuss": 373, "12": [374, 396, 400], "13": [375, 396, 401, 410, 413], "distribut": [375, 470, 482], "14": [376, 396, 402], "uncertainti": 376, "16": [377, 396, 404], "structur": [377, 379, 411, 478, 550], "dissolv": 377, "clean": 377, "18": [378, 396, 406, 407, 408], "start": [378, 390, 481, 482, 483, 489, 504], "section": 378, "restructur": 378, "overview": [378, 390, 442, 467, 499, 501, 502], "instal": [378, 390, 391, 393], "changelog": 378, "19": [379, 396, 409], "follow": 379, "resolv": [379, 452], "detect": [379, 435, 441, 497], "minor": 379, "20": [380, 396, 411, 412, 414], "global": 380, "interact": 380, "between": 380, "21": 381, "spectral": [381, 386, 428, 429, 431, 432, 433, 440, 441, 454, 463, 472, 478, 506, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537], "norm": [381, 463, 512, 524, 527, 529, 532], "energi": [381, 427, 433, 442, 444, 458, 461, 463, 467, 468, 490, 494, 495, 496, 498], "absorpt": [381, 518], "addit": [381, 386, 498, 550], "simplifi": 381, "yaml": [381, 432, 476, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "represent": [381, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547], "shorter": 381, "alia": 381, "tag": 381, "22": [382, 415], "flux": [382, 386, 427, 429, 431, 432, 440, 445, 454, 455, 476, 477, 478, 490], "fluxestim": 382, "base": [382, 385, 503], "fluxpointscollect": 382, "unif": 382, "excess": [382, 428, 437, 448, 554], "generalist": 382, "23": [383, 418], "cycl": 383, "current": 383, "schedul": 383, "lt": 383, "freez": [383, 387, 462], "cython": [383, 388], "numpi": 383, "24": 384, "authorship": 384, "polici": 384, "citat": 384, "definit": [384, 449, 500], "contributor": [384, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "long": 384, "term": 384, "public": 384, "confer": 384, "metadata": [384, 385], "cff": 384, "codemeta": 384, "json": 384, "possibl": 384, "collect": 384, "person": 384, "inform": [384, 455, 465, 496], "author": 384, "materi": 384, "suggest": 384, "25": [385, 397], "contain": 385, "valid": 385, "hierarchi": 385, "solut": 385, "pydant": 385, "arbitrari": 385, "propag": 385, "along": 385, "dataflow": 385, "26": [386, 401], "prior": [386, 465], "motiv": 386, "systemat": 386, "nuisanc": 386, "3955": 386, "favor": 386, "posit": [386, 465, 496], "amplitud": [386, 465], "unfold": 386, "point": [386, 427, 429, 431, 432, 440, 441, 443, 448, 455, 467, 476, 477, 478, 490, 498, 513], "4122": 386, "exemplari": 386, "subclass": 386, "serialis": [386, 432, 445, 458, 462, 463, 468, 488], "outlin": 386, "branch": 387, "first": [387, 432], "major": 387, "candid": [387, 435], "post": 387, "bugfix": 387, "repositori": 388, "doc": 388, "extra": 388, "old": 388, "exampl": [388, 465, 480, 487, 488, 489, 490, 491, 497, 499, 500, 501, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 549, 553], "folder": 388, "webpag": 388, "org": 388, "binder": 388, "continu": 388, "virtual": 389, "environ": 389, "conda": 389, "venv": 389, "recommend": [390, 392], "anaconda": 391, "miniconda": 391, "mamba": 391, "pip": 391, "troubleshoot": [393, 552], "your": [393, 432, 552], "issu": 393, "help": 393, "ipython": 394, "17": [396, 405], "15": [396, 403], "aug": [397, 413], "2014": 397, "summari": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 439, 468], "jan": 398, "28": [398, 416, 417], "2019": [398, 399, 400, 401, 402, 403], "": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 432, 444, 470, 476], "mar": 399, "29": [399, 419], "mai": [400, 411], "30": [400, 402], "jul": 401, "sep": [402, 418], "dec": 403, "feb": [404, 417], "2020": [404, 405, 406, 407, 408], "apr": [405, 410, 414, 416], "nov": [406, 407, 408, 409, 415, 419], "4th": 406, "6th": [407, 422], "19th": 408, "22nd": 409, "2021": 409, "2015": [410, 413], "12th": 411, "2022": [411, 412, 420], "bug": [411, 420, 423, 424], "june": [412, 423], "16th": 412, "2016": [414, 415], "2017": 416, "2018": [417, 418, 419], "novemb": 420, "10th": 420, "march": 421, "14th": 421, "2023": [421, 422, 423], "decemb": 422, "13th": 423, "februari": 424, "29th": 424, "2024": 424, "unreleas": 425, "comput": [426, 427, 430, 431, 432, 437, 438, 441, 446, 453, 457, 466, 471, 473, 475, 477, 479, 507, 517, 538, 548], "sensit": 427, "defin": [427, 428, 431, 433, 441, 443, 444, 449, 450, 461, 477, 505], "obtain": [427, 442, 451, 464], "exercis": [427, 429, 431, 434, 439, 441, 443, 444, 451, 467, 468, 469, 470, 478], "extend": [428, 443], "prerequisit": [428, 429, 431, 432, 433, 434, 436, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 457, 461, 462, 465, 476, 477], "context": [428, 429, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 445, 447, 448, 449, 450, 451, 461, 464, 465, 476, 477], "select": [428, 432, 441, 449, 450, 455, 462, 476, 477, 489], "creation": [428, 432, 450], "ON": [428, 433, 440], "geometri": [428, 441, 449, 450, 460, 461, 476, 477, 503, 505], "creat": [428, 431, 436, 437, 444, 456, 458, 460, 461, 477, 505], "loop": [428, 459, 477], "explor": [428, 432, 441, 472], "cumul": 428, "signific": [428, 435, 437, 461, 554], "power": [429, 519, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536], "law": [429, 519, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536], "cut": [429, 433], "off": [429, 431, 434, 440], "powerlaw": [429, 544], "parabola": [429, 526, 527], "next": [429, 431, 432, 435, 441, 449, 467, 469, 470, 476, 478], "target": 431, "exclus": [431, 432, 437, 461, 476], "chain": [431, 433], "spectrum": [431, 433, 434, 441, 452, 459, 477], "residu": [431, 433, 439, 477], "stack": [431, 437, 439, 488], "hli": 432, "configur": [432, 439, 445, 449, 476, 550], "step": [432, 467, 469, 470, 550], "save": [432, 476, 477], "disk": [432, 444, 476, 477, 509], "1d": [432, 434, 440, 449, 450, 472], "direct": 433, "compar": [433, 449], "against": 433, "literatur": 433, "On": 434, "read": [435, 440, 444, 445, 460, 461, 462, 505], "adapt": 435, "smooth": [435, 533], "t": [435, 554], "2d": [436, 472], "ring": [437, 459, 502], "extract": [437, 449, 450, 451], "correl": 437, "3d": [439, 440, 447, 449, 472], "joint": [439, 440, 488], "assess": [439, 457], "multi": 440, "differ": [440, 460, 556], "fermi": [440, 468], "lat": [440, 468], "3fhl": 440, "hess": 440, "hawc": [440, 469], "basic": [441, 460], "show": [441, 442, 464], "morpholog": 442, "signal": 442, "abov": 442, "each": 442, "chi": 442, "squar": [442, 470], "interest": 442, "like": 443, "templat": [443, 516, 537], "multipl": [443, 462, 465, 488], "tempor": [444, 451, 463, 506, 539, 540, 541, 542, 543, 544, 545, 546, 547], "evolut": 444, "sampler": 444, "let": 444, "profil": [445, 454, 555], "o": 445, "character": 448, "fraction": 448, "varianc": 448, "doubl": 448, "halv": 448, "bayesian": 448, "block": 448, "night": 449, "wise": 449, "lc": 449, "flare": 450, "interv": 450, "filter": 450, "assign": [450, 462], "all": 450, "vari": 451, "open": 452, "phasogram": 452, "li": 452, "ma": 452, "over": 452, "phase": [452, 546], "dark": [454, 480], "matter": [454, 480], "j": 454, "factor": 454, "spectra": 454, "product": [454, 458], "annihil": 454, "decai": 454, "avail": 455, "subset": 455, "hgp": 455, "pretti": 455, "print": 455, "empti": 456, "access": [456, 460, 469, 489], "content": [456, 505], "resampl": 456, "error": [457, 554], "confid": 457, "contour": 457, "stat_contour": 457, "stat_surfac": 457, "inbuilt": 458, "asymmetr": 458, "effect": [458, 459, 467, 494], "area": [458, 467, 494], "exposur": [458, 468], "dispers": [458, 467, 468, 496], "edisp": 458, "kernel": 458, "psf": [458, 468, 498], "dl4": [458, 488, 490, 500, 504, 549], "safe": [459, 500], "rang": [459, 500], "fov": [459, 499], "reflect": [459, 501], "durat": 459, "livetim": 459, "wc": [460, 505], "factori": 460, "ad": 460, "ax": [460, 505], "contigu": 460, "index": [460, 465, 489], "slice": 460, "sub": [460, 481], "iter": 460, "fill": [460, 505], "onto": 460, "oper": [460, 461], "cutout": 460, "manual": [461, 464], "modif": 461, "dilat": 461, "eros": 461, "boundari": 461, "aim": 462, "given": 462, "combin": [462, 489], "two": 462, "count": [462, 468, 488, 554], "unfreez": 462, "compound": [463, 520], "share": 463, "custom": [463, 465, 549], "morphologi": 463, "variou": 464, "quantiti": [464, 490], "group": 464, "hierarch": 464, "about": 465, "without": 465, "encourag": 465, "1dc": 467, "spread": [467, 498], "diffus": 468, "isotrop": 468, "produc": 469, "h": 470, "e": 470, "dr1": [470, 536], "theta": 470, "survei": [474, 557], "inspect": 477, "butterfli": 477, "gammalib": 480, "fermist": 480, "clumpi": 480, "gamlik": 480, "galactocentr": 482, "spiral": 482, "arm": 482, "veloc": 482, "wind": 485, "nebula": 485, "supernova": 486, "remnant": 486, "predict": 488, "work": 489, "dl5": [490, 549], "dl6": 490, "edg": 490, "true": [494, 496, 498], "offset": [494, 495, 496, 498], "angl": [494, 495, 496, 498], "aeff_2d": 494, "reconstruct": 495, "detector": 495, "bkg_3d": 495, "radial": 495, "symmetr": 495, "bkg_2d": 495, "edisp_2d": 496, "rmf": 496, "expect": 497, "factoris": 497, "As": 498, "psf_tabl": 498, "finder": 501, "healpix": 503, "accessor": 504, "skycoord": 504, "volum": 505, "angular": 505, "size": 505, "upsampl": 505, "downsampl": 505, "relat": 505, "underli": 505, "constant": [508, 521, 539], "gaussian": [510, 511, 525, 541, 542], "piecewis": [512, 529], "shell": 514, "shell2": 515, "ebl": 518, "cutoff": [522, 523, 524, 534, 535, 536], "3fgl": [523, 534], "naima": 528, "super": [534, 535, 536], "4fgl": [535, 536], "dr3": 535, "dr2": 536, "expdecai": 540, "linear": 543, "sine": 545, "built": 549, "workflow": 550, "glossari": 551, "execut": 552, "driven": 552, "own": 552, "cli": 552, "found": 552, "poisson": 553, "measur": 553, "caveat": 553, "notat": 554, "deriv": 555, "formula": 555, "likelihood": 555, "good": 555, "special": 555, "scale": 556, "mission": 556, "elaps": 556, "met": 556, "colormap": 557, "panel": 557}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"analysis - High level interface": [[0, "analysis-high-level-interface"]], "gammapy.analysis Package": [[0, "module-gammapy.analysis"]], "Classes": [[0, "classes"], [1, "classes"], [1, "id1"], [1, "id2"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [10, "id2"], [12, "classes"], [13, "classes"], [13, "id5"], [13, "id7"], [13, "id10"], [13, "id15"], [14, "classes"]], "astro - Astrophysics": [[1, "astro-astrophysics"]], "gammapy.astro.darkmatter Package": [[1, "module-gammapy.astro.darkmatter"]], "gammapy.astro.population Package": [[1, "module-gammapy.astro.population"]], "Functions": [[1, "functions"], [3, "functions"], [4, "functions"], [4, "id1"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [10, "id1"], [10, "id3"], [12, "functions"], [13, "functions"], [13, "id1"], [13, "id2"], [13, "id3"], [13, "id4"], [13, "id6"], [13, "id8"], [13, "id9"], [13, "id12"], [13, "id13"], [13, "id14"], [13, "id16"], [13, "id17"], [14, "functions"]], "Variables": [[1, "variables"], [2, "variables"], [3, "variables"], [4, "variables"], [5, "variables"], [7, "variables"], [8, "variables"], [10, "variables"], [13, "variables"], [13, "id11"]], "gammapy.astro.source Package": [[1, "module-gammapy.astro.source"]], "catalog - Source catalogs": [[2, "catalog-source-catalogs"]], "gammapy.catalog Package": [[2, "module-gammapy.catalog"]], "data - DL3 data and observations": [[3, "data-dl3-data-and-observations"]], "gammapy.data Package": [[3, "module-gammapy.data"]], "datasets - Reduced datasets": [[4, "datasets-reduced-datasets"]], "gammapy.datasets Package": [[4, "module-gammapy.datasets"]], "gammapy.datasets.utils Module": [[4, "module-gammapy.datasets.utils"]], "estimators - High level estimators": [[5, "estimators-high-level-estimators"]], "gammapy.estimators Package": [[5, "module-gammapy.estimators"]], "gammapy.estimators.utils Module": [[5, "module-gammapy.estimators.utils"]], "API reference": [[6, "api-reference"]], "irf - Instrument response functions": [[7, "irf-instrument-response-functions"]], "gammapy.irf Package": [[7, "module-gammapy.irf"]], "makers - Data reduction": [[8, "makers-data-reduction"]], "gammapy.makers Package": [[8, "module-gammapy.makers"]], "gammapy.makers.utils Module": [[8, "module-gammapy.makers.utils"]], "maps - Sky maps": [[9, "maps-sky-maps"]], "gammapy.maps Package": [[9, "module-gammapy.maps"]], "modeling - Models and fitting": [[10, "modeling-models-and-fitting"]], "gammapy.modeling Package": [[10, "module-gammapy.modeling"]], "gammapy.modeling.models Package": [[10, "module-gammapy.modeling.models"]], "gammapy.modeling.models.utils Module": [[10, "module-gammapy.modeling.models.utils"]], "scripts - Command line tools": [[11, "scripts-command-line-tools"]], "gammapy": [[11, "gammapy"]], "analysis": [[11, "gammapy-analysis"]], "config": [[11, "gammapy-analysis-config"]], "run": [[11, "gammapy-analysis-run"]], "check": [[11, "gammapy-check"]], "logging": [[11, "gammapy-check-logging"]], "download": [[11, "gammapy-download"]], "datasets": [[11, "gammapy-download-datasets"]], "notebooks": [[11, "gammapy-download-notebooks"]], "info": [[11, "gammapy-info"]], "stats - Statistics": [[12, "stats-statistics"]], "gammapy.stats Package": [[12, "module-gammapy.stats"]], "utils - Utilities": [[13, "utils-utilities"]], "gammapy.utils.cluster Module": [[13, "module-gammapy.utils.cluster"]], "gammapy.utils.coordinates Package": [[13, "module-gammapy.utils.coordinates"]], "gammapy.utils.integrate Module": [[13, "module-gammapy.utils.integrate"]], "gammapy.utils.interpolation Module": [[13, "module-gammapy.utils.interpolation"]], "gammapy.utils.fits Module": [[13, "module-gammapy.utils.fits"]], "gammapy.utils.random Package": [[13, "module-gammapy.utils.random"]], "gammapy.utils.regions Module": [[13, "module-gammapy.utils.regions"]], "gammapy.utils.parallel Module": [[13, "module-gammapy.utils.parallel"]], "gammapy.utils.scripts Module": [[13, "module-gammapy.utils.scripts"]], "gammapy.utils.table Module": [[13, "module-gammapy.utils.table"]], "gammapy.utils.testing Module": [[13, "module-gammapy.utils.testing"]], "gammapy.utils.time Module": [[13, "module-gammapy.utils.time"]], "gammapy.utils.units Module": [[13, "module-gammapy.utils.units"]], "visualization - Plotting features": [[14, "visualization-plotting-features"]], "gammapy.visualization Package": [[14, "module-gammapy.visualization"]], "Analysis": [[15, "analysis"]], "AnalysisConfig": [[16, "analysisconfig"]], "BurkertProfile": [[17, "burkertprofile"]], "DMProfile": [[18, "dmprofile"]], "DarkMatterAnnihilationSpectralModel": [[19, "darkmatterannihilationspectralmodel"]], "DarkMatterDecaySpectralModel": [[20, "darkmatterdecayspectralmodel"]], "EinastoProfile": [[21, "einastoprofile"]], "IsothermalProfile": [[22, "isothermalprofile"]], "JFactory": [[23, "jfactory"]], "MooreProfile": [[24, "mooreprofile"]], "NFWProfile": [[25, "nfwprofile"]], "PrimaryFlux": [[26, "primaryflux"]], "ZhaoProfile": [[27, "zhaoprofile"]], "CaseBattacharya1998": [[28, "casebattacharya1998"]], "Exponential": [[29, "exponential"]], "FaucherKaspi2006": [[30, "faucherkaspi2006"]], "FaucherKaspi2006VelocityBimodal": [[31, "faucherkaspi2006velocitybimodal"]], "FaucherKaspi2006VelocityMaxwellian": [[32, "faucherkaspi2006velocitymaxwellian"]], "FaucherSpiral": [[33, "faucherspiral"]], "LogSpiral": [[34, "logspiral"]], "Lorimer2006": [[35, "lorimer2006"]], "Paczynski1990": [[36, "paczynski1990"]], "Paczynski1990Velocity": [[37, "paczynski1990velocity"]], "ValleeSpiral": [[38, "valleespiral"]], "YusifovKucuk2004": [[39, "yusifovkucuk2004"]], "YusifovKucuk2004B": [[40, "yusifovkucuk2004b"]], "add_observed_parameters": [[41, "add-observed-parameters"]], "add_pulsar_parameters": [[42, "add-pulsar-parameters"]], "add_pwn_parameters": [[43, "add-pwn-parameters"]], "add_snr_parameters": [[44, "add-snr-parameters"]], "make_base_catalog_galactic": [[45, "make-base-catalog-galactic"]], "make_catalog_random_positions_cube": [[46, "make-catalog-random-positions-cube"]], "make_catalog_random_positions_sphere": [[47, "make-catalog-random-positions-sphere"]], "radial_distributions": [[48, "radial-distributions"]], "velocity_distributions": [[49, "velocity-distributions"]], "PWN": [[50, "pwn"]], "Pulsar": [[51, "pulsar"]], "SNR": [[52, "snr"]], "SNRTrueloveMcKee": [[53, "snrtruelovemckee"]], "SimplePulsar": [[54, "simplepulsar"]], "CATALOG_REGISTRY": [[55, "catalog-registry"]], "SourceCatalog": [[56, "sourcecatalog"]], "SourceCatalog1LHAASO": [[57, "sourcecatalog1lhaaso"]], "SourceCatalog2FHL": [[58, "sourcecatalog2fhl"]], "SourceCatalog2HWC": [[59, "sourcecatalog2hwc"]], "SourceCatalog3FGL": [[60, "sourcecatalog3fgl"]], "SourceCatalog3FHL": [[61, "sourcecatalog3fhl"]], "SourceCatalog3HWC": [[62, "sourcecatalog3hwc"]], "SourceCatalog4FGL": [[63, "sourcecatalog4fgl"]], "SourceCatalogGammaCat": [[64, "sourcecataloggammacat"]], "SourceCatalogHGPS": [[65, "sourcecataloghgps"]], "SourceCatalogLargeScaleHGPS": [[66, "sourcecataloglargescalehgps"]], "SourceCatalogObject": [[67, "sourcecatalogobject"]], "SourceCatalogObject1LHAASO": [[68, "sourcecatalogobject1lhaaso"]], "SourceCatalogObject2FHL": [[69, "sourcecatalogobject2fhl"]], "SourceCatalogObject2HWC": [[70, "sourcecatalogobject2hwc"]], "SourceCatalogObject3FGL": [[71, "sourcecatalogobject3fgl"]], "SourceCatalogObject3FHL": [[72, "sourcecatalogobject3fhl"]], "SourceCatalogObject3HWC": [[73, "sourcecatalogobject3hwc"]], "SourceCatalogObject4FGL": [[74, "sourcecatalogobject4fgl"]], "SourceCatalogObjectGammaCat": [[75, "sourcecatalogobjectgammacat"]], "SourceCatalogObjectHGPS": [[76, "sourcecatalogobjecthgps"]], "SourceCatalogObjectHGPSComponent": [[77, "sourcecatalogobjecthgpscomponent"]], "DataStore": [[78, "datastore"]], "EventList": [[79, "eventlist"]], "EventListMetaData": [[80, "eventlistmetadata"]], "FixedPointingInfo": [[81, "fixedpointinginfo"]], "GTI": [[82, "gti"]], "HDUIndexTable": [[83, "hduindextable"]], "Observation": [[84, "observation"]], "ObservationFilter": [[85, "observationfilter"]], "ObservationTable": [[86, "observationtable"]], "Observations": [[87, "observations"]], "ObservationsEventsSampler": [[88, "observationseventssampler"]], "PointingInfo": [[89, "pointinginfo"]], "PointingMode": [[90, "pointingmode"]], "get_irfs_features": [[91, "get-irfs-features"]], "observatory_locations": [[92, "observatory-locations"]], "DATASET_REGISTRY": [[93, "dataset-registry"]], "Dataset": [[94, "dataset"], [370, "dataset"], [459, "dataset"]], "Datasets": [[95, "datasets"], [367, "datasets"], [370, "datasets"], [385, "datasets"], [456, "datasets"]], "FluxPointsDataset": [[96, "fluxpointsdataset"], [370, "fluxpointsdataset"], [456, "fluxpointsdataset"]], "MapDataset": [[97, "mapdataset"], [370, "mapdataset"], [456, "mapdataset"]], "MapDatasetEventSampler": [[98, "mapdataseteventsampler"], [371, "mapdataseteventsampler"]], "MapDatasetMetaData": [[99, "mapdatasetmetadata"]], "MapDatasetOnOff": [[100, "mapdatasetonoff"], [370, "mapdatasetonoff"]], "OGIPDatasetReader": [[101, "ogipdatasetreader"]], "OGIPDatasetWriter": [[102, "ogipdatasetwriter"]], "ObservationEventSampler": [[103, "observationeventsampler"]], "SpectrumDataset": [[104, "spectrumdataset"], [370, "spectrumdataset"], [456, "spectrumdataset"]], "SpectrumDatasetOnOff": [[105, "spectrumdatasetonoff"], [370, "spectrumdatasetonoff"]], "apply_edisp": [[106, "apply-edisp"], [110, "apply-edisp"]], "create_map_dataset_from_observation": [[107, "create-map-dataset-from-observation"]], "create_map_dataset_geoms": [[108, "create-map-dataset-geoms"]], "split_dataset": [[109, "split-dataset"], [111, "split-dataset"]], "ASmoothMapEstimator": [[112, "asmoothmapestimator"]], "ESTIMATOR_REGISTRY": [[113, "estimator-registry"]], "EnergyDependentMorphologyEstimator": [[114, "energydependentmorphologyestimator"]], "Estimator": [[115, "estimator"]], "ExcessMapEstimator": [[116, "excessmapestimator"]], "FluxMaps": [[117, "fluxmaps"]], "FluxMetaData": [[118, "fluxmetadata"]], "FluxPoints": [[119, "fluxpoints"]], "FluxPointsEstimator": [[120, "fluxpointsestimator"]], "FluxProfileEstimator": [[121, "fluxprofileestimator"]], "ImageProfile": [[122, "imageprofile"]], "ImageProfileEstimator": [[123, "imageprofileestimator"]], "LightCurveEstimator": [[124, "lightcurveestimator"]], "ParameterEstimator": [[125, "parameterestimator"]], "SensitivityEstimator": [[126, "sensitivityestimator"]], "TSMapEstimator": [[127, "tsmapestimator"]], "compute_lightcurve_doublingtime": [[128, "compute-lightcurve-doublingtime"]], "compute_lightcurve_fpp": [[129, "compute-lightcurve-fpp"]], "compute_lightcurve_fvar": [[130, "compute-lightcurve-fvar"]], "estimate_exposure_reco_energy": [[131, "estimate-exposure-reco-energy"]], "find_peaks": [[132, "find-peaks"]], "find_peaks_in_flux_map": [[133, "find-peaks-in-flux-map"]], "get_rebinned_axis": [[134, "get-rebinned-axis"]], "resample_energy_edges": [[135, "resample-energy-edges"]], "Background2D": [[136, "background2d"]], "Background3D": [[137, "background3d"]], "BackgroundIRF": [[138, "backgroundirf"]], "EDispKernel": [[139, "edispkernel"]], "EDispKernelMap": [[140, "edispkernelmap"]], "EDispMap": [[141, "edispmap"]], "EffectiveAreaTable2D": [[142, "effectiveareatable2d"]], "EnergyDependentMultiGaussPSF": [[143, "energydependentmultigausspsf"]], "EnergyDispersion2D": [[144, "energydispersion2d"]], "FoVAlignment": [[145, "fovalignment"]], "IRF": [[146, "irf"], [385, "irf"]], "IRFMap": [[147, "irfmap"]], "IRF_REGISTRY": [[148, "irf-registry"]], "PSF3D": [[149, "psf3d"]], "PSFKernel": [[150, "psfkernel"]], "PSFKing": [[151, "psfking"]], "PSFMap": [[152, "psfmap"]], "ParametricPSF": [[153, "parametricpsf"]], "RadMax2D": [[154, "radmax2d"]], "RecoPSFMap": [[155, "recopsfmap"]], "load_irf_dict_from_file": [[156, "load-irf-dict-from-file"]], "AdaptiveRingBackgroundMaker": [[157, "adaptiveringbackgroundmaker"]], "DatasetsMaker": [[158, "datasetsmaker"]], "FoVBackgroundMaker": [[159, "fovbackgroundmaker"]], "MAKER_REGISTRY": [[160, "maker-registry"]], "Maker": [[161, "maker"]], "MapDatasetMaker": [[162, "mapdatasetmaker"]], "PhaseBackgroundMaker": [[163, "phasebackgroundmaker"]], "ReflectedRegionsBackgroundMaker": [[164, "reflectedregionsbackgroundmaker"]], "ReflectedRegionsFinder": [[165, "reflectedregionsfinder"]], "RegionsFinder": [[166, "regionsfinder"]], "RingBackgroundMaker": [[167, "ringbackgroundmaker"]], "SafeMaskMaker": [[168, "safemaskmaker"]], "SpectrumDatasetMaker": [[169, "spectrumdatasetmaker"]], "WobbleRegionsFinder": [[170, "wobbleregionsfinder"]], "make_counts_rad_max": [[171, "make-counts-rad-max"]], "make_edisp_kernel_map": [[172, "make-edisp-kernel-map"]], "make_edisp_map": [[173, "make-edisp-map"]], "make_effective_livetime_map": [[174, "make-effective-livetime-map"]], "make_map_background_irf": [[175, "make-map-background-irf"]], "make_map_exposure_true_energy": [[176, "make-map-exposure-true-energy"]], "make_observation_time_map": [[177, "make-observation-time-map"]], "make_psf_map": [[178, "make-psf-map"]], "make_theta_squared_table": [[179, "make-theta-squared-table"]], "Geom": [[180, "geom"]], "HpxGeom": [[181, "hpxgeom"]], "HpxMap": [[182, "hpxmap"]], "HpxNDMap": [[183, "hpxndmap"]], "LabelMapAxis": [[184, "labelmapaxis"], [460, "labelmapaxis"]], "Map": [[185, "map"]], "MapAxes": [[186, "mapaxes"]], "MapAxis": [[187, "mapaxis"]], "MapCoord": [[188, "mapcoord"], [504, "mapcoord"]], "Maps": [[189, "maps"], [367, "maps"], [460, "maps"], [478, "maps"]], "RegionGeom": [[190, "regiongeom"], [505, "regiongeom"]], "RegionNDMap": [[191, "regionndmap"], [505, "regionndmap"]], "TimeMapAxis": [[192, "timemapaxis"], [460, "timemapaxis"]], "WcsGeom": [[193, "wcsgeom"]], "WcsMap": [[194, "wcsmap"]], "WcsNDMap": [[195, "wcsndmap"]], "containment_radius": [[196, "containment-radius"]], "containment_region": [[197, "containment-region"]], "Covariance": [[198, "covariance"]], "Fit": [[199, "fit"], [447, "fit"], [468, "fit"]], "Parameter": [[200, "parameter"]], "Parameters": [[201, "parameters"]], "PriorParameter": [[202, "priorparameter"]], "PriorParameters": [[203, "priorparameters"]], "BrokenPowerLawSpectralModel": [[204, "brokenpowerlawspectralmodel"]], "CompoundSpectralModel": [[205, "compoundspectralmodel"]], "ConstantFluxSpatialModel": [[206, "constantfluxspatialmodel"]], "ConstantSpatialModel": [[207, "constantspatialmodel"]], "ConstantSpectralModel": [[208, "constantspectralmodel"]], "ConstantTemporalModel": [[209, "constanttemporalmodel"]], "DatasetModels": [[210, "datasetmodels"]], "DiskSpatialModel": [[211, "diskspatialmodel"]], "EBLAbsorptionNormSpectralModel": [[212, "eblabsorptionnormspectralmodel"]], "EBL_DATA_BUILTIN": [[213, "ebl-data-builtin"]], "ExpCutoffPowerLaw3FGLSpectralModel": [[214, "expcutoffpowerlaw3fglspectralmodel"]], "ExpCutoffPowerLawNormSpectralModel": [[215, "expcutoffpowerlawnormspectralmodel"]], "ExpCutoffPowerLawSpectralModel": [[216, "expcutoffpowerlawspectralmodel"]], "ExpDecayTemporalModel": [[217, "expdecaytemporalmodel"]], "FoVBackgroundModel": [[218, "fovbackgroundmodel"]], "GaussianSpatialModel": [[219, "gaussianspatialmodel"]], "GaussianSpectralModel": [[220, "gaussianspectralmodel"]], "GaussianTemporalModel": [[221, "gaussiantemporalmodel"]], "GeneralizedGaussianSpatialModel": [[222, "generalizedgaussianspatialmodel"]], "GeneralizedGaussianTemporalModel": [[223, "generalizedgaussiantemporalmodel"]], "LightCurveTemplateTemporalModel": [[224, "lightcurvetemplatetemporalmodel"]], "LinearTemporalModel": [[225, "lineartemporalmodel"]], "LogParabolaNormSpectralModel": [[226, "logparabolanormspectralmodel"]], "LogParabolaSpectralModel": [[227, "logparabolaspectralmodel"]], "MODEL_REGISTRY": [[228, "model-registry"]], "MeyerCrabSpectralModel": [[229, "meyercrabspectralmodel"]], "Model": [[230, "model"]], "ModelBase": [[231, "modelbase"]], "Models": [[232, "models"], [463, "models"]], "NaimaSpectralModel": [[233, "naimaspectralmodel"]], "PiecewiseNormSpatialModel": [[234, "piecewisenormspatialmodel"]], "PiecewiseNormSpectralModel": [[235, "piecewisenormspectralmodel"]], "PointSpatialModel": [[236, "pointspatialmodel"]], "PowerLaw2SpectralModel": [[237, "powerlaw2spectralmodel"]], "PowerLawNormSpectralModel": [[238, "powerlawnormspectralmodel"]], "PowerLawSpectralModel": [[239, "powerlawspectralmodel"]], "PowerLawTemporalModel": [[240, "powerlawtemporalmodel"]], "SPATIAL_MODEL_REGISTRY": [[241, "spatial-model-registry"]], "SPECTRAL_MODEL_REGISTRY": [[242, "spectral-model-registry"]], "ScaleSpectralModel": [[243, "scalespectralmodel"]], "Shell2SpatialModel": [[244, "shell2spatialmodel"]], "ShellSpatialModel": [[245, "shellspatialmodel"]], "SineTemporalModel": [[246, "sinetemporalmodel"]], "SkyModel": [[247, "skymodel"], [463, "skymodel"]], "SmoothBrokenPowerLawSpectralModel": [[248, "smoothbrokenpowerlawspectralmodel"]], "SpatialModel": [[249, "spatialmodel"]], "SpectralModel": [[250, "spectralmodel"]], "SuperExpCutoffPowerLaw3FGLSpectralModel": [[251, "superexpcutoffpowerlaw3fglspectralmodel"]], "SuperExpCutoffPowerLaw4FGLDR3SpectralModel": [[252, "superexpcutoffpowerlaw4fgldr3spectralmodel"]], "SuperExpCutoffPowerLaw4FGLSpectralModel": [[253, "superexpcutoffpowerlaw4fglspectralmodel"]], "TEMPORAL_MODEL_REGISTRY": [[254, "temporal-model-registry"]], "TemplateNDSpatialModel": [[255, "templatendspatialmodel"]], "TemplateNDSpectralModel": [[256, "templatendspectralmodel"]], "TemplateNPredModel": [[257, "templatenpredmodel"]], "TemplatePhaseCurveTemporalModel": [[258, "templatephasecurvetemporalmodel"]], "TemplateSpatialModel": [[259, "templatespatialmodel"]], "TemplateSpectralModel": [[260, "templatespectralmodel"]], "TemporalModel": [[261, "temporalmodel"]], "create_cosmic_ray_spectral_model": [[262, "create-cosmic-ray-spectral-model"]], "create_crab_spectral_model": [[263, "create-crab-spectral-model"]], "create_fermi_isotropic_diffuse_model": [[264, "create-fermi-isotropic-diffuse-model"]], "integrate_spectrum": [[265, "integrate-spectrum"]], "read_hermes_cube": [[266, "read-hermes-cube"], [268, "read-hermes-cube"]], "scale_plot_flux": [[267, "scale-plot-flux"]], "select_nested_models": [[269, "select-nested-models"]], "stat_profile_ul_scipy": [[270, "stat-profile-ul-scipy"]], "CashCountsStatistic": [[271, "cashcountsstatistic"]], "WStatCountsStatistic": [[272, "wstatcountsstatistic"]], "cash": [[273, "cash"]], "cash_sum_cython": [[274, "cash-sum-cython"]], "compute_chisq": [[275, "compute-chisq"]], "compute_flux_doubling": [[276, "compute-flux-doubling"]], "compute_fpp": [[277, "compute-fpp"]], "compute_fvar": [[278, "compute-fvar"]], "cstat": [[279, "cstat"]], "f_cash_root_cython": [[280, "f-cash-root-cython"]], "get_wstat_gof_terms": [[281, "get-wstat-gof-terms"]], "get_wstat_mu_bkg": [[282, "get-wstat-mu-bkg"]], "norm_bounds_cython": [[283, "norm-bounds-cython"]], "wstat": [[284, "wstat"]], "hierarchical_clustering": [[285, "hierarchical-clustering"]], "standard_scaler": [[286, "standard-scaler"]], "D_SUN_TO_GALACTIC_CENTER": [[287, "d-sun-to-galactic-center"]], "cartesian": [[288, "cartesian"]], "fov_to_sky": [[289, "fov-to-sky"]], "galactic": [[290, "galactic"]], "motion_since_birth": [[291, "motion-since-birth"]], "polar": [[292, "polar"]], "sky_to_fov": [[293, "sky-to-fov"]], "velocity_glon_glat": [[294, "velocity-glon-glat"]], "HDULocation": [[295, "hdulocation"]], "LazyFitsData": [[296, "lazyfitsdata"]], "earth_location_from_dict": [[297, "earth-location-from-dict"]], "trapz_loglog": [[298, "trapz-loglog"]], "ScaledRegularGridInterpolator": [[299, "scaledregulargridinterpolator"]], "interpolate_profile": [[300, "interpolate-profile"]], "interpolation_scale": [[301, "interpolation-scale"]], "BACKEND_DEFAULT": [[302, "backend-default"]], "METHOD_DEFAULT": [[303, "method-default"]], "METHOD_KWARGS_DEFAULT": [[304, "method-kwargs-default"]], "N_JOBS_DEFAULT": [[305, "n-jobs-default"]], "POOL_KWARGS_DEFAULT": [[306, "pool-kwargs-default"]], "multiprocessing_manager": [[307, "multiprocessing-manager"]], "run_multiprocessing": [[308, "run-multiprocessing"]], "InverseCDFSampler": [[309, "inversecdfsampler"]], "draw": [[310, "draw"]], "get_random_state": [[311, "get-random-state"]], "normalize": [[312, "normalize"]], "pdf": [[313, "pdf"]], "sample_powerlaw": [[314, "sample-powerlaw"]], "sample_sphere": [[315, "sample-sphere"]], "sample_sphere_distance": [[316, "sample-sphere-distance"]], "sample_times": [[317, "sample-times"]], "compound_region_to_regions": [[318, "compound-region-to-regions"]], "make_concentric_annulus_sky_regions": [[319, "make-concentric-annulus-sky-regions"]], "make_orthogonal_rectangle_sky_regions": [[320, "make-orthogonal-rectangle-sky-regions"]], "region_to_frame": [[321, "region-to-frame"]], "regions_to_compound_region": [[322, "regions-to-compound-region"]], "get_images_paths": [[323, "get-images-paths"]], "make_path": [[324, "make-path"]], "read_yaml": [[325, "read-yaml"]], "recursive_merge_dicts": [[326, "recursive-merge-dicts"]], "write_yaml": [[327, "write-yaml"]], "hstack_columns": [[328, "hstack-columns"]], "table_row_to_dict": [[329, "table-row-to-dict"]], "table_standardise_units_copy": [[330, "table-standardise-units-copy"]], "table_standardise_units_inplace": [[331, "table-standardise-units-inplace"]], "Checker": [[332, "checker"]], "assert_quantity_allclose": [[333, "assert-quantity-allclose"]], "Notes": [[333, "notes"], [553, "notes"]], "assert_skycoord_allclose": [[334, "assert-skycoord-allclose"]], "assert_time_allclose": [[335, "assert-time-allclose"]], "mpl_plot_check": [[336, "mpl-plot-check"]], "requires_data": [[337, "requires-data"]], "requires_dependency": [[338, "requires-dependency"]], "absolute_time": [[339, "absolute-time"]], "time_ref_from_dict": [[340, "time-ref-from-dict"]], "time_ref_to_dict": [[341, "time-ref-to-dict"]], "time_relative_to_ref": [[342, "time-relative-to-ref"]], "standardise_unit": [[343, "standardise-unit"]], "unit_from_fits_image_hdu": [[344, "unit-from-fits-image-hdu"]], "MapPanelPlotter": [[345, "mappanelplotter"]], "add_colorbar": [[346, "add-colorbar"]], "annotate_heatmap": [[347, "annotate-heatmap"]], "colormap_hess": [[348, "colormap-hess"]], "colormap_milagro": [[349, "colormap-milagro"]], "plot_contour_line": [[350, "plot-contour-line"]], "plot_distribution": [[351, "plot-distribution"]], "plot_heatmap": [[352, "plot-heatmap"]], "plot_map_rgb": [[353, "plot-map-rgb"]], "plot_npred_signal": [[354, "plot-npred-signal"]], "plot_spectrum_datasets_off_regions": [[355, "plot-spectrum-datasets-off-regions"]], "plot_theta_squared_table": [[356, "plot-theta-squared-table"]], "Dependencies": [[357, "dependencies"], [375, "dependencies"]], "Required dependencies": [[357, "required-dependencies"], [375, "required-dependencies"]], "Optional dependencies": [[357, "optional-dependencies"], [375, "optional-dependencies"]], "Developer How To": [[358, "developer-how-to"]], "General conventions": [[358, "general-conventions"]], "Python version support": [[358, "python-version-support"]], "Coordinate and axis names": [[358, "coordinate-and-axis-names"]], "Clobber or overwrite?": [[358, "clobber-or-overwrite"]], "Pixel coordinate convention": [[358, "pixel-coordinate-convention"]], "BSD or GPL license?": [[358, "bsd-or-gpl-license"]], "How to write code": [[358, "how-to-write-code"]], "Where should I import from?": [[358, "where-should-i-import-from"]], "Functions returning several values": [[358, "functions-returning-several-values"]], "What checks and conversions should I do for inputs?": [[358, "what-checks-and-conversions-should-i-do-for-inputs"]], "Float data type: 32 bit or 64 bit?": [[358, "float-data-type-32-bit-or-64-bit"]], "How to use random numbers": [[358, "how-to-use-random-numbers"]], "How to use logging": [[358, "how-to-use-logging"]], "Generating log messages": [[358, "generating-log-messages"]], "Interpolation and extrapolation": [[358, "interpolation-and-extrapolation"]], "How to write tests": [[358, "how-to-write-tests"]], "Assert convention": [[358, "assert-convention"]], "Testing of plotting functions": [[358, "testing-of-plotting-functions"]], "Skip unit tests for some Astropy versions": [[358, "skip-unit-tests-for-some-astropy-versions"]], "Caplog fixture": [[358, "caplog-fixture"]], "How to make a pull request": [[358, "how-to-make-a-pull-request"]], "Making a pull request with new or modified datasets": [[358, "making-a-pull-request-with-new-or-modified-datasets"]], "Making a pull request which skips GitHub Actions": [[358, "making-a-pull-request-which-skips-github-actions"]], "Fix non-Unix line endings": [[358, "fix-non-unix-line-endings"]], "Making a pull request that requires backport": [[358, "making-a-pull-request-that-requires-backport"]], "Release notes": [[358, "release-notes"], [396, "release-notes"]], "How to handle API breaking changes?": [[358, "how-to-handle-api-breaking-changes"]], "Deprecating a function or a class": [[358, "deprecating-a-function-or-a-class"]], "Renaming an argument": [[358, "renaming-an-argument"]], "Removing an attribute": [[358, "removing-an-attribute"]], "Others": [[358, "others"], [388, "others"]], "Command line tools using click": [[358, "command-line-tools-using-click"]], "Bundled gammapy.extern code": [[358, "bundled-gammapy-extern-code"]], "Locate origin of warnings": [[358, "locate-origin-of-warnings"]], "Object text repr, str and info": [[358, "object-text-repr-str-and-info"]], "Output in Jupyter notebook cells": [[358, "output-in-jupyter-notebook-cells"]], "Convert a jupyter notebook to python script in the sphinx-gallery format": [[358, "convert-a-jupyter-notebook-to-python-script-in-the-sphinx-gallery-format"]], "Documentation How To": [[359, "documentation-how-to"]], "Documentation building": [[359, "documentation-building"]], "Check Python code": [[359, "check-python-code"]], "Code in RST files": [[359, "code-in-rst-files"]], "Code in docstrings in Python files": [[359, "code-in-docstrings-in-python-files"]], "Sphinx gallery extension": [[359, "sphinx-gallery-extension"]], "Choose a thumbnail and tooltip for the tutorial gallery": [[359, "choose-a-thumbnail-and-tooltip-for-the-tutorial-gallery"]], "Dealing with links": [[359, "dealing-with-links"]], "Links to other tutorials": [[359, "links-to-other-tutorials"]], "API Links": [[359, "api-links"]], "Check broken links": [[359, "check-broken-links"]], "Include png files as images": [[359, "include-png-files-as-images"]], "In the RST files": [[359, "in-the-rst-files"]], "Documentation guidelines": [[359, "documentation-guidelines"]], "Functions or class methods that return a single object": [[359, "functions-or-class-methods-that-return-a-single-object"]], "Class attributes": [[359, "class-attributes"]], "Developer guide": [[360, "developer-guide"]], "How to contribute to Gammapy": [[361, "how-to-contribute-to-gammapy"]], "What is this?": [[361, "what-is-this"]], "Acceptation of the Developer Certificate of Origin (DCO)": [[361, "acceptation-of-the-developer-certificate-of-origin-dco"]], "Get in touch early": [[361, "get-in-touch-early"]], "Make small pull requests": [[361, "make-small-pull-requests"]], "Get set up": [[361, "get-set-up"]], "Running tests & building Documentation": [[361, "running-tests-building-documentation"]], "PIGs": [[362, "pigs"]], "PIG 1 - PIG purpose and guidelines": [[363, "pig-1-pig-purpose-and-guidelines"]], "Abstract": [[363, "abstract"], [364, "abstract"], [365, "abstract"], [366, "abstract"], [367, "abstract"], [368, "abstract"], [370, "abstract"], [371, "abstract"], [372, "abstract"], [373, "abstract"], [374, "abstract"], [375, "abstract"], [376, "abstract"], [377, "abstract"], [378, "abstract"], [379, "abstract"], [380, "abstract"], [381, "abstract"], [382, "abstract"], [383, "abstract"], [384, "abstract"], [385, "abstract"], [386, "abstract"]], "What is a PIG?": [[363, "what-is-a-pig"]], "Writing a PIG": [[363, "writing-a-pig"]], "PIG review": [[363, "pig-review"]], "PIG status": [[363, "pig-status"]], "Final remarks": [[363, "final-remarks"]], "Decision": [[363, "decision"], [364, "decision"], [365, "decision"], [366, "decision"], [367, "decision"], [368, "decision"], [369, "decision"], [370, "decision"], [371, "decision"], [372, "decision"], [373, "decision"], [374, "decision"], [375, "decision"], [376, "decision"], [377, "decision"], [378, "decision"], [379, "decision"], [380, "decision"], [381, "decision"], [382, "decision"], [383, "decision"], [384, "decision"], [385, "decision"], [386, "decision"]], "PIG 2 - Organization of low level analysis code": [[364, "pig-2-organization-of-low-level-analysis-code"]], "The case of image and cube analysis": [[364, "the-case-of-image-and-cube-analysis"]], "General code style guidelines": [[364, "general-code-style-guidelines"]], "Data analysis subpackages in gammapy": [[364, "data-analysis-subpackages-in-gammapy"]], "Low level map and cube analysis": [[364, "low-level-map-and-cube-analysis"]], "Existing code": [[364, "existing-code"]], "PIG 3 - Plan for dropping Python 2.7 support": [[365, "pig-3-plan-for-dropping-python-2-7-support"]], "User perspective": [[365, "user-perspective"]], "Maintainer and developer perspective": [[365, "maintainer-and-developer-perspective"]], "Detailed plan": [[365, "detailed-plan"]], "PIG 4 - Setup for tutorial notebooks and data": [[366, "pig-4-setup-for-tutorial-notebooks-and-data"]], "What we have": [[366, "what-we-have"], [374, "what-we-have"], [382, "what-we-have"]], "Proposal": [[366, "proposal"], [368, "proposal"], [369, "proposal"], [370, "proposal"], [371, "proposal"], [372, "proposal"], [373, "proposal"], [374, "proposal"], [376, "proposal"], [377, "proposal"], [378, "proposal"], [379, "proposal"], [380, "proposal"], [381, "proposal"]], "Alternatives": [[366, "alternatives"], [369, "alternatives"], [372, "alternatives"], [374, "alternatives"], [375, "alternatives"], [376, "alternatives"], [378, "alternatives"], [379, "alternatives"], [385, "alternatives"]], "PIG 5 - Gammapy 1.0 roadmap": [[367, "pig-5-gammapy-1-0-roadmap"]], "Releases": [[367, "releases"], [384, "releases"], [388, "releases"]], "Meetings": [[367, "meetings"]], "Projects": [[367, "projects"]], "Maintenance and Code Quality": [[367, "maintenance-and-code-quality"]], "Documentation": [[367, "documentation"], [424, "documentation"]], "Data and Observation handling": [[367, "data-and-observation-handling"]], "IRFs": [[367, "irfs"], [467, "irfs"]], "Map Analysis / Data Reduction": [[367, "map-analysis-data-reduction"]], "Modeling": [[367, "modeling"], [385, "modeling"]], "Fitting": [[367, "fitting"], [457, "fitting"]], "Event Simulation": [[367, "event-simulation"]], "Timing Analysis": [[367, "timing-analysis"]], "High level interface": [[367, "high-level-interface"], [476, "high-level-interface"]], "Papers": [[367, "papers"]], "Project Management": [[367, "project-management"]], "PIG 6 - CTA observation handling": [[368, "pig-6-cta-observation-handling"]], "Some terminology": [[368, "some-terminology"]], "Status": [[368, "status"], [377, "status"]], "Limitations": [[368, "limitations"]], "Objectives": [[368, "objectives"]], "Use cases / scenarios": [[368, "use-cases-scenarios"]], "What others have": [[368, "what-others-have"]], "General idea and class diagram": [[368, "general-idea-and-class-diagram"]], "Implementation road map": [[368, "implementation-road-map"]], "Proposed class diagram": [[368, "proposed-class-diagram"]], "PIG 7 - Models": [[369, "pig-7-models"]], "Introduction": [[369, "introduction"], [372, "introduction"], [373, "introduction"], [375, "introduction"], [376, "introduction"], [378, "introduction"], [382, "introduction"], [384, "introduction"], [385, "introduction"], [427, "introduction"], [431, "introduction"], [433, "introduction"], [441, "introduction"], [452, "introduction"], [454, "introduction"], [455, "introduction"], [456, "introduction"], [459, "introduction"], [460, "introduction"], [467, "introduction"], [468, "introduction"], [472, "introduction"], [478, "introduction"], [480, "introduction"], [482, "introduction"], [483, "introduction"], [553, "introduction"]], "Introduce naming scheme for models": [[369, "introduce-naming-scheme-for-models"]], "Unify calling interface for models": [[369, "unify-calling-interface-for-models"]], "Introduction of background models": [[369, "introduction-of-background-models"]], "BackgroundModel": [[369, "backgroundmodel"]], "BackgroundIRFModel": [[369, "backgroundirfmodel"]], "Introduction of \u201cforward folded\u201d models": [[369, "introduction-of-forward-folded-models"]], "SpectralIRFModel": [[369, "spectralirfmodel"]], "SpatialIRFModel": [[369, "spatialirfmodel"]], "SourceIRFModel": [[369, "sourceirfmodel"]], "Improve SourceModels class": [[369, "improve-sourcemodels-class"]], "Introduction of model name attributes": [[369, "introduction-of-model-name-attributes"]], "Improve and implement model serilization": [[369, "improve-and-implement-model-serilization"]], "Improve spatial models": [[369, "improve-spatial-models"]], "Implement sky coordinate handling": [[369, "implement-sky-coordinate-handling"]], "Implement default parameters": [[369, "implement-default-parameters"]], "Implement evaluation region specifications": [[369, "implement-evaluation-region-specifications"]], "Expose model parameters as attributes": [[369, "expose-model-parameters-as-attributes"]], "Add new parametric models": [[369, "add-new-parametric-models"]], "Task list": [[369, "task-list"], [371, "task-list"], [372, "task-list"], [373, "task-list"], [374, "task-list"], [375, "task-list"]], "PIG 8 - Datasets": [[370, "pig-8-datasets"]], "Dataset helper / convenience methods": [[370, "dataset-helper-convenience-methods"]], "Simulation of MapDataset and SpectrumDataset": [[370, "simulation-of-mapdataset-and-spectrumdataset"]], "Dataset serialization": [[370, "dataset-serialization"]], "Task List": [[370, "task-list"]], "Outlook": [[370, "outlook"], [372, "outlook"], [374, "outlook"], [375, "outlook"], [377, "outlook"], [378, "outlook"], [379, "outlook"], [382, "outlook"]], "Parallel evaluation of datasets": [[370, "parallel-evaluation-of-datasets"]], "Lazy loading of Datasets": [[370, "lazy-loading-of-datasets"]], "PIG 9 - Event sampling": [[371, "pig-9-event-sampling"]], "Sampling methods": [[371, "sampling-methods"]], "Performance and precision evaluation": [[371, "performance-and-precision-evaluation"]], "Alternatives / Outlook": [[371, "alternatives-outlook"]], "PIG 10 - Regions": [[372, "pig-10-regions"]], "Region arguments": [[372, "region-arguments"]], "Sky and pixel regions": [[372, "sky-and-pixel-regions"]], "Rotated regions": [[372, "rotated-regions"]], "Images and masks": [[372, "images-and-masks"]], "PIG 11 - Light curves": [[373, "pig-11-light-curves"]], "Lightcurves in gamma-ray astronomy": [[373, "lightcurves-in-gamma-ray-astronomy"]], "Background / What we have now": [[373, "background-what-we-have-now"]], "General organization of the new approach": [[373, "general-organization-of-the-new-approach"]], "Time bin preparation": [[373, "time-bin-preparation"]], "Data reduction": [[373, "data-reduction"], [439, "data-reduction"], [439, "id1"], [476, "data-reduction"], [477, "data-reduction"]], "Data Fitting": [[373, "data-fitting"]], "Storing the results and further studies": [[373, "storing-the-results-and-further-studies"]], "Discussion / Alternatives": [[373, "discussion-alternatives"]], "Time bins": [[373, "time-bins"]], "Light Curve Fitting": [[373, "light-curve-fitting"]], "Lightcurve": [[373, "lightcurve"]], "PIG 12 - High level interface": [[374, "pig-12-high-level-interface"]], "PIG 13 - Gammapy dependencies and distribution": [[375, "pig-13-gammapy-dependencies-and-distribution"]], "Distributions": [[375, "distributions"], [375, "id1"]], "PIG 14 - Uncertainty estimation": [[376, "pig-14-uncertainty-estimation"]], "PIG 16 - Gammapy package structure": [[377, "pig-16-gammapy-package-structure"]], "Introduce gammapy.modeling": [[377, "introduce-gammapy-modeling"]], "Dissolve gammapy.background": [[377, "dissolve-gammapy-background"]], "Dissolve gammapy.image": [[377, "dissolve-gammapy-image"]], "Clean up gammapy.utils": [[377, "clean-up-gammapy-utils"]], "PIG 18 - Documentation": [[378, "pig-18-documentation"]], "Guidelines and specific actions": [[378, "guidelines-and-specific-actions"]], "Getting started section restructuring": [[378, "getting-started-section-restructuring"]], "Gammapy overview": [[378, "gammapy-overview"]], "Installation": [[378, "installation"], [390, "installation"], [391, "installation"]], "Getting started": [[378, "getting-started"], [390, "getting-started"], [481, "getting-started"], [482, "getting-started"], [483, "getting-started"]], "Tutorials": [[378, "tutorials"], [472, "tutorials"]], "How To": [[378, "how-to"], [492, "how-to"]], "Reference": [[378, "reference"], [552, "reference"]], "Changelog": [[378, "changelog"]], "Implementation": [[378, "implementation"], [386, "implementation"]], "PIG 19 - Gammapy package structure follow up": [[379, "pig-19-gammapy-package-structure-follow-up"]], "Introduce gammapy.datasets": [[379, "introduce-gammapy-datasets"]], "Introduce gammapy.makers": [[379, "introduce-gammapy-makers"]], "Introduce gammapy.estimators": [[379, "introduce-gammapy-estimators"]], "Introduce gammapy.visualization": [[379, "introduce-gammapy-visualization"]], "Resolve gammapy.detect": [[379, "resolve-gammapy-detect"]], "Minor changes": [[379, "minor-changes"]], "PIG 20 - Global Model API": [[380, "pig-20-global-model-api"]], "Global Model Handling": [[380, "global-model-handling"]], "Interaction Between Models and Dataset Objects": [[380, "interaction-between-models-and-dataset-objects"]], "Background Model Handling": [[380, "background-model-handling"]], "PIG 21 - Models improvements": [[381, "pig-21-models-improvements"]], "Spectral Norm Models": [[381, "spectral-norm-models"]], "Energy Dependent Spatial Models": [[381, "energy-dependent-spatial-models"]], "Spectral Absorption Model": [[381, "spectral-absorption-model"]], "Additional Models": [[381, "additional-models"]], "Simplify YAML Representation": [[381, "simplify-yaml-representation"]], "Introduce Shorter YAML Alias Tags": [[381, "introduce-shorter-yaml-alias-tags"]], "Simplify YAML Parameter Representation": [[381, "simplify-yaml-parameter-representation"]], "PIG 22 - Unified flux estimators API": [[382, "pig-22-unified-flux-estimators-api"]], "Proposal of API for flux estimate results": [[382, "proposal-of-api-for-flux-estimate-results"]], "Introduce a FluxEstimate base class": [[382, "introduce-a-fluxestimate-base-class"]], "Introduce a FluxMap API": [[382, "introduce-a-fluxmap-api"]], "Introduce a FluxPointsCollection API": [[382, "introduce-a-fluxpointscollection-api"]], "Unification of flux estimators?": [[382, "unification-of-flux-estimators"]], "Excess estimators": [[382, "excess-estimators"]], "Generalist estimators": [[382, "generalist-estimators"]], "Alternative": [[382, "alternative"]], "PIG 23 - Gammapy release cycle and version numbering": [[383, "pig-23-gammapy-release-cycle-and-version-numbering"]], "Current status": [[383, "current-status"]], "Release scheduling and LTS": [[383, "release-scheduling-and-lts"]], "Version numbering": [[383, "version-numbering"]], "Release preparation, feature freeze": [[383, "release-preparation-feature-freeze"]], "Deprecation": [[383, "deprecation"]], "Support of python Cython, numpy and astropy versions": [[383, "support-of-python-cython-numpy-and-astropy-versions"]], "PIG 24 - Authorship policy": [[384, "pig-24-authorship-policy"]], "Citation scheme": [[384, "citation-scheme"]], "Authorship policy": [[384, "authorship-policy"]], "Definition of a Contributor": [[384, "definition-of-a-contributor"]], "Long Term Support releases": [[384, "long-term-support-releases"]], "General Gammapy publications": [[384, "general-gammapy-publications"]], "Contribution in conferences": [[384, "contribution-in-conferences"]], "Metadata files": [[384, "metadata-files"]], "CITATION.cff": [[384, "citation-cff"]], "codemeta.json": [[384, "codemeta-json"]], "Definition of the Maintainer": [[384, "definition-of-the-maintainer"]], "Possible implementations": [[384, "possible-implementations"]], "DCO implementation": [[384, "dco-implementation"]], "Collection of the personal information of authors": [[384, "collection-of-the-personal-information-of-authors"]], "Handling of conference material": [[384, "handling-of-conference-material"]], "Suggestions": [[384, "suggestions"]], "PIG 25 - Metadata container for Gammapy": [[385, "pig-25-metadata-container-for-gammapy"]], "Requirements": [[385, "requirements"]], "Metadata API": [[385, "metadata-api"]], "Type validation": [[385, "type-validation"]], "Hierarchy": [[385, "hierarchy"]], "Serialization": [[385, "serialization"]], "Proposed solution": [[385, "proposed-solution"]], "pydantic": [[385, "pydantic"]], "the base class": [[385, "the-base-class"]], "arbitrary type input and validation": [[385, "arbitrary-type-input-and-validation"]], "Proposed metadata classes": [[385, "proposed-metadata-classes"]], "data": [[385, "data"]], "Makers": [[385, "makers"]], "Estimators": [[385, "estimators"]], "Metadata generation and propagation along the dataflow": [[385, "metadata-generation-and-propagation-along-the-dataflow"]], "PIG 26 - Model Priors API": [[386, "pig-26-model-priors-api"]], "Motivation": [[386, "motivation"]], "Use cases": [[386, "use-cases"]], "Case 1: Background systematics as a nuisance parameter #3955": [[386, "case-1-background-systematics-as-a-nuisance-parameter-3955"]], "Case 2: Favoring positive values for flux amplitudes": [[386, "case-2-favoring-positive-values-for-flux-amplitudes"]], "Case 3: Support unfolding methods for spectral flux points #4122": [[386, "case-3-support-unfolding-methods-for-spectral-flux-points-4122"]], "Exemplary additional prior subclasses:": [[386, "exemplary-additional-prior-subclasses"]], "Serialisation": [[386, "serialisation"], [458, "serialisation"], [458, "id1"], [458, "id2"], [468, "serialisation"]], "Implementation Outline": [[386, "implementation-outline"]], "How to make a Gammapy release": [[387, "how-to-make-a-gammapy-release"]], "Feature Freeze and Branching": [[387, "feature-freeze-and-branching"]], "Releasing the first major release candidate": [[387, "releasing-the-first-major-release-candidate"]], "Releasing the final version of the major release": [[387, "releasing-the-final-version-of-the-major-release"]], "Post release": [[387, "post-release"]], "Make a Bugfix release": [[387, "make-a-bugfix-release"]], "Project setup": [[388, "project-setup"]], "Gammapy repository": [[388, "gammapy-repository"]], "Package and docs": [[388, "package-and-docs"]], "Download": [[388, "download"]], "Build": [[388, "build"]], "Cython": [[388, "cython"]], "The gammapy-data repository": [[388, "the-gammapy-data-repository"]], "The gammapy-extra repository": [[388, "the-gammapy-extra-repository"]], "Old example data": [[388, "old-example-data"]], "Other folders": [[388, "other-folders"]], "Other repositories": [[388, "other-repositories"]], "Gammapy webpages": [[388, "gammapy-webpages"]], "gammapy.org": [[388, "gammapy-org"]], "docs.gammapy.org": [[388, "docs-gammapy-org"]], "Gammapy Binder": [[388, "id1"]], "Continuous integration": [[388, "continuous-integration"]], "Code quality": [[388, "code-quality"]], "Virtual Environments": [[389, "virtual-environments"]], "Conda Environments": [[389, "conda-environments"]], "Venv Environments": [[389, "venv-environments"]], "Recommended Setup": [[390, "recommended-setup"], [392, "recommended-setup"]], "Tutorials Overview": [[390, "tutorials-overview"]], "Using Anaconda / Miniconda": [[391, "using-anaconda-miniconda"]], "Using Mamba": [[391, "using-mamba"]], "Using pip": [[391, "using-pip"]], "Using other package managers": [[391, "using-other-package-managers"]], "Troubleshooting": [[393, "troubleshooting"], [552, "troubleshooting"]], "Check your setup": [[393, "check-your-setup"]], "Install issues": [[393, "install-issues"]], "Help!?": [[393, "help"]], "Using Gammapy": [[394, "using-gammapy"]], "Jupyter notebooks": [[394, "jupyter-notebooks"]], "Python": [[394, "id2"]], "IPython": [[394, "id3"]], "Python scripts": [[394, "python-scripts"]], "Gammapy": [[395, "gammapy"]], "Version 1.2": [[396, "version-1-2"]], "Version 1.1": [[396, "version-1-1"]], "Version 1.0.2": [[396, "version-1-0-2"]], "Version 1.0.1": [[396, "version-1-0-1"]], "Version 1.0": [[396, "version-1-0"]], "Version 0.20.1": [[396, "version-0-20-1"]], "Version 0.20": [[396, "version-0-20"]], "Version 0.19": [[396, "version-0-19"]], "Version 0.18": [[396, "version-0-18"]], "Version 0.17": [[396, "version-0-17"]], "Version 0.16": [[396, "version-0-16"]], "Version 0.15": [[396, "version-0-15"]], "Version 0.14": [[396, "version-0-14"]], "Version 0.13": [[396, "version-0-13"]], "Version 0.12": [[396, "version-0-12"]], "Version 0.11": [[396, "version-0-11"]], "Version 0.10": [[396, "version-0-10"]], "Version 0.9": [[396, "version-0-9"]], "Version 0.8": [[396, "version-0-8"]], "Version 0.7": [[396, "version-0-7"]], "Version 0.6": [[396, "version-0-6"]], "Version 0.5": [[396, "version-0-5"]], "Version 0.4": [[396, "version-0-4"]], "Version 0.3": [[396, "version-0-3"]], "Version 0.2": [[396, "version-0-2"]], "Version 0.1": [[396, "version-0-1"]], "0.1 (Aug 25, 2014)": [[397, "aug-25-2014"]], "Summary": [[397, "summary"], [398, "summary"], [399, "summary"], [400, "summary"], [401, "summary"], [402, "summary"], [403, "summary"], [404, "summary"], [405, "summary"], [406, "summary"], [407, "summary"], [408, "summary"], [409, "summary"], [410, "summary"], [411, "summary"], [412, "summary"], [413, "summary"], [414, "summary"], [415, "summary"], [416, "summary"], [417, "summary"], [418, "summary"], [419, "summary"], [420, "summary"], [421, "summary"], [422, "summary"], [423, "summary"], [424, "summary"], [439, "summary"], [468, "summary"]], "Contributors": [[397, "contributors"], [398, "contributors"], [399, "contributors"], [400, "contributors"], [401, "contributors"], [402, "contributors"], [403, "contributors"], [404, "contributors"], [405, "contributors"], [406, "contributors"], [409, "contributors"], [410, "contributors"], [411, "contributors"], [412, "contributors"], [413, "contributors"], [414, "contributors"], [415, "contributors"], [416, "contributors"], [417, "contributors"], [418, "contributors"], [419, "contributors"], [420, "contributors"], [421, "contributors"], [422, "contributors"], [423, "contributors"], [424, "contributors"]], "Pull requests": [[397, "pull-requests"], [398, "pull-requests"], [399, "pull-requests"], [400, "pull-requests"], [401, "pull-requests"], [402, "pull-requests"], [403, "pull-requests"], [404, "pull-requests"], [405, "pull-requests"], [406, "pull-requests"], [407, "pull-requests"], [408, "pull-requests"], [409, "pull-requests"], [410, "pull-requests"], [413, "pull-requests"], [414, "pull-requests"], [415, "pull-requests"], [416, "pull-requests"], [417, "pull-requests"], [418, "pull-requests"], [419, "pull-requests"]], "0.10 (Jan 28, 2019)": [[398, "jan-28-2019"]], "What\u2019s new?": [[398, "what-s-new"], [399, "what-s-new"], [400, "what-s-new"], [401, "what-s-new"], [402, "what-s-new"], [403, "what-s-new"], [404, "what-s-new"], [405, "what-s-new"], [406, "what-s-new"], [407, "what-s-new"], [408, "what-s-new"], [409, "what-s-new"], [411, "what-s-new"], [412, "what-s-new"], [414, "what-s-new"], [415, "what-s-new"], [416, "what-s-new"], [417, "what-s-new"], [418, "what-s-new"], [419, "what-s-new"]], "0.11 (Mar 29, 2019)": [[399, "mar-29-2019"]], "0.12 (May 30, 2019)": [[400, "may-30-2019"]], "0.13 (Jul 26, 2019)": [[401, "jul-26-2019"]], "0.14 (Sep 30, 2019)": [[402, "sep-30-2019"]], "0.15 (Dec 3, 2019)": [[403, "dec-3-2019"]], "0.16 (Feb 1, 2020)": [[404, "feb-1-2020"]], "0.17 (Apr 1, 2020)": [[405, "apr-1-2020"]], "0.18 (Nov 4th, 2020)": [[406, "nov-4th-2020"]], "0.18.1 (Nov 6th, 2020)": [[407, "nov-6th-2020"]], "0.18.2 (Nov 19th, 2020)": [[408, "nov-19th-2020"]], "0.19 (Nov 22nd, 2021)": [[409, "nov-22nd-2021"]], "0.2 (Apr 13, 2015)": [[410, "apr-13-2015"]], "0.20 (May 12th, 2022)": [[411, "may-12th-2022"]], "Package structure and dependencies": [[411, "package-structure-and-dependencies"]], "Bug fixes and improvements": [[411, "bug-fixes-and-improvements"], [420, "bug-fixes-and-improvements"], [423, "bug-fixes-and-improvements"], [424, "bug-fixes-and-improvements"]], "Pull Requests": [[411, "pull-requests"], [412, "pull-requests"], [420, "pull-requests"], [421, "pull-requests"], [422, "pull-requests"], [423, "pull-requests"], [424, "pull-requests"]], "0.20.1 (June 16th, 2022)": [[412, "june-16th-2022"]], "0.3 (Aug 13, 2015)": [[413, "aug-13-2015"]], "0.4 (Apr 20, 2016)": [[414, "apr-20-2016"]], "0.5 (Nov 22, 2016)": [[415, "nov-22-2016"]], "0.6 (Apr 28, 2017)": [[416, "apr-28-2017"]], "0.7 (Feb 28, 2018)": [[417, "feb-28-2018"]], "0.8 (Sep 23, 2018)": [[418, "sep-23-2018"]], "0.9 (Nov 29, 2018)": [[419, "nov-29-2018"]], "1.0 (November 10th, 2022)": [[420, "november-10th-2022"]], "New features": [[420, "new-features"], [423, "new-features"], [424, "new-features"]], "API changes": [[420, "api-changes"], [423, "api-changes"], [424, "api-changes"]], "1.0.1 (March 14th, 2023)": [[421, "march-14th-2023"]], "1.0.2 (December 6th, 2023)": [[422, "december-6th-2023"]], "1.1 (June 13th 2023)": [[423, "june-13th-2023"]], "1.2 (February 29th 2024)": [[424, "february-29th-2024"]], "1.3 (unreleased)": [[425, "unreleased"]], "Computation times": [[426, "computation-times"], [430, "computation-times"], [438, "computation-times"], [446, "computation-times"], [453, "computation-times"], [466, "computation-times"], [471, "computation-times"], [473, "computation-times"], [475, "computation-times"], [479, "computation-times"], [507, "computation-times"], [517, "computation-times"], [538, "computation-times"], [548, "computation-times"]], "Point source sensitivity": [[427, "point-source-sensitivity"]], "Setup": [[427, "setup"], [428, "setup"], [429, "setup"], [431, "setup"], [432, "setup"], [433, "setup"], [434, "setup"], [435, "setup"], [436, "setup"], [437, "setup"], [441, "setup"], [442, "setup"], [443, "setup"], [444, "setup"], [445, "setup"], [448, "setup"], [449, "setup"], [450, "setup"], [451, "setup"], [454, "setup"], [456, "setup"], [459, "setup"], [460, "setup"], [461, "setup"], [462, "setup"], [463, "setup"], [467, "setup"], [468, "setup"], [476, "setup"], [477, "setup"], [478, "setup"]], "Check setup": [[427, "check-setup"], [428, "check-setup"], [431, "check-setup"], [432, "check-setup"], [433, "check-setup"], [434, "check-setup"], [435, "check-setup"], [436, "check-setup"], [437, "check-setup"], [439, "check-setup"], [440, "check-setup"], [441, "check-setup"], [442, "check-setup"], [443, "check-setup"], [444, "check-setup"], [445, "check-setup"], [449, "check-setup"], [450, "check-setup"], [451, "check-setup"], [452, "check-setup"], [454, "check-setup"], [455, "check-setup"], [456, "check-setup"], [457, "check-setup"], [459, "check-setup"], [460, "check-setup"], [461, "check-setup"], [462, "check-setup"], [463, "check-setup"], [465, "check-setup"], [467, "check-setup"], [468, "check-setup"], [469, "check-setup"], [470, "check-setup"], [476, "check-setup"], [477, "check-setup"], [478, "check-setup"]], "Define analysis region and energy binning": [[427, "define-analysis-region-and-energy-binning"]], "Load IRFs and prepare dataset": [[427, "load-irfs-and-prepare-dataset"]], "Compute sensitivity": [[427, "compute-sensitivity"]], "Results": [[427, "results"]], "Obtaining an integral flux sensitivity": [[427, "obtaining-an-integral-flux-sensitivity"]], "Exercises": [[427, "exercises"], [429, "exercises"], [431, "exercises"], [434, "exercises"], [439, "exercises"], [441, "exercises"], [443, "exercises"], [444, "exercises"], [451, "exercises"], [467, "exercises"], [468, "exercises"], [469, "exercises"], [470, "exercises"], [478, "exercises"], [478, "id1"], [478, "id2"], [478, "id3"]], "Spectral analysis of extended sources": [[428, "spectral-analysis-of-extended-sources"]], "Prerequisites": [[428, "prerequisites"], [429, "prerequisites"], [431, "prerequisites"], [432, "prerequisites"], [433, "prerequisites"], [434, "prerequisites"], [436, "prerequisites"], [440, "prerequisites"], [442, "prerequisites"], [443, "prerequisites"], [444, "prerequisites"], [445, "prerequisites"], [447, "prerequisites"], [448, "prerequisites"], [449, "prerequisites"], [450, "prerequisites"], [451, "prerequisites"], [457, "prerequisites"], [461, "prerequisites"], [462, "prerequisites"], [465, "prerequisites"], [476, "prerequisites"], [477, "prerequisites"]], "Context": [[428, "context"], [429, "context"], [431, "context"], [432, "context"], [433, "context"], [434, "context"], [435, "context"], [436, "context"], [437, "context"], [440, "context"], [442, "context"], [443, "context"], [445, "context"], [447, "context"], [448, "context"], [449, "context"], [450, "context"], [451, "context"], [461, "context"], [464, "context"], [465, "context"], [476, "context"], [477, "context"]], "Proposed approach": [[428, "proposed-approach"], [429, "proposed-approach"], [432, "proposed-approach"], [434, "proposed-approach"], [435, "proposed-approach"], [436, "proposed-approach"], [437, "proposed-approach"], [440, "proposed-approach"], [443, "proposed-approach"], [444, "proposed-approach"], [447, "proposed-approach"], [448, "proposed-approach"], [449, "proposed-approach"], [450, "proposed-approach"], [451, "proposed-approach"], [457, "proposed-approach"], [461, "proposed-approach"], [462, "proposed-approach"], [464, "proposed-approach"], [476, "proposed-approach"], [477, "proposed-approach"]], "Select the data": [[428, "select-the-data"], [450, "select-the-data"]], "Prepare the datasets creation": [[428, "prepare-the-datasets-creation"]], "Select the ON region": [[428, "select-the-on-region"]], "Define the geometries": [[428, "define-the-geometries"]], "Create the makers": [[428, "create-the-makers"]], "Perform the data reduction loop.": [[428, "perform-the-data-reduction-loop"]], "Explore the results": [[428, "explore-the-results"]], "Cumulative excess and significance": [[428, "cumulative-excess-and-significance"]], "Perform spectral model fitting": [[428, "perform-spectral-model-fitting"]], "Explore the fit results": [[428, "explore-the-fit-results"]], "Flux point fitting": [[429, "flux-point-fitting"]], "Load spectral points": [[429, "load-spectral-points"]], "Power Law Fit": [[429, "power-law-fit"]], "Exponential Cut-Off Powerlaw Fit": [[429, "exponential-cut-off-powerlaw-fit"]], "Log-Parabola Fit": [[429, "log-parabola-fit"]], "What next?": [[429, "what-next"], [431, "what-next"], [435, "what-next"], [441, "what-next"], [449, "what-next"], [478, "what-next"]], "Spectral analysis": [[431, "spectral-analysis"]], "Load Data": [[431, "load-data"]], "Define Target Region": [[431, "define-target-region"]], "Create exclusion mask": [[431, "create-exclusion-mask"], [437, "create-exclusion-mask"]], "Run data reduction chain": [[431, "run-data-reduction-chain"], [433, "run-data-reduction-chain"]], "Plot off regions": [[431, "plot-off-regions"]], "Source statistic": [[431, "source-statistic"]], "Fit spectrum": [[431, "fit-spectrum"], [433, "fit-spectrum"]], "Fit quality and model residuals": [[431, "fit-quality-and-model-residuals"], [433, "fit-quality-and-model-residuals"]], "Compute Flux Points": [[431, "compute-flux-points"]], "Stack observations": [[431, "stack-observations"]], "Spectral analysis with the HLI": [[432, "spectral-analysis-with-the-hli"]], "Analysis configuration": [[432, "analysis-configuration"], [439, "analysis-configuration"], [449, "analysis-configuration"], [476, "analysis-configuration"]], "Using data stored into your computer": [[432, "using-data-stored-into-your-computer"]], "Setting the exclusion mask": [[432, "setting-the-exclusion-mask"], [476, "setting-the-exclusion-mask"]], "Using YAML configuration files for setting/writing the Data Reduction parameters": [[432, "using-yaml-configuration-files-for-setting-writing-the-data-reduction-parameters"]], "Running the first step of the analysis: the Data Reduction": [[432, "running-the-first-step-of-the-analysis-the-data-reduction"]], "Configuration of the analysis": [[432, "configuration-of-the-analysis"]], "Observation selection": [[432, "observation-selection"], [476, "observation-selection"]], "Running the Data Reduction": [[432, "running-the-data-reduction"]], "Results exploration": [[432, "results-exploration"]], "Save dataset to disk": [[432, "save-dataset-to-disk"], [476, "save-dataset-to-disk"], [477, "save-dataset-to-disk"]], "Model fitting": [[432, "model-fitting"], [476, "model-fitting"]], "Creation of the model": [[432, "creation-of-the-model"]], "Setting fitting parameters": [[432, "setting-fitting-parameters"]], "Running the fit": [[432, "running-the-fit"]], "Exploration of the fit results": [[432, "exploration-of-the-fit-results"]], "Serialisation of the fit result": [[432, "serialisation-of-the-fit-result"]], "Creation of the Flux points": [[432, "creation-of-the-flux-points"]], "Running the estimation": [[432, "running-the-estimation"]], "Serialisation of the results": [[432, "serialisation-of-the-results"]], "Plotting the final results of the 1D Analysis": [[432, "plotting-the-final-results-of-the-1d-analysis"]], "What\u2019s next?": [[432, "whats-next"]], "Spectral analysis with energy-dependent directional cuts": [[433, "spectral-analysis-with-energy-dependent-directional-cuts"]], "Load data": [[433, "load-data"]], "Define the ON region": [[433, "define-the-on-region"]], "Compare against the literature": [[433, "compare-against-the-literature"]], "Dataset simulations": [[433, "dataset-simulations"]], "1D spectrum simulation": [[434, "d-spectrum-simulation"]], "Simulation of a single spectrum": [[434, "simulation-of-a-single-spectrum"]], "On-Off analysis": [[434, "on-off-analysis"]], "Source detection and significance maps": [[435, "source-detection-and-significance-maps"]], "Read in input images": [[435, "read-in-input-images"]], "Adaptive smoothing": [[435, "adaptive-smoothing"]], "TS map estimation": [[435, "ts-map-estimation"]], "Plot resulting images": [[435, "plot-resulting-images"]], "Source candidates": [[435, "source-candidates"]], "2D map fitting": [[436, "d-map-fitting"]], "Objective": [[436, "objective"], [437, "objective"], [443, "objective"], [444, "objective"], [464, "objective"]], "Creating the config file": [[436, "creating-the-config-file"], [437, "creating-the-config-file"]], "Getting the reduced dataset": [[436, "getting-the-reduced-dataset"], [437, "getting-the-reduced-dataset"]], "Modelling": [[436, "modelling"], [462, "modelling"]], "Ring background map": [[437, "ring-background-map"]], "Extracting the ring background": [[437, "extracting-the-ring-background"]], "Create a stacked dataset": [[437, "create-a-stacked-dataset"]], "Compute correlated significance and correlated excess maps": [[437, "compute-correlated-significance-and-correlated-excess-maps"]], "3D detailed analysis": [[439, "d-detailed-analysis"]], "Configuration for stacked and joint analysis": [[439, "configuration-for-stacked-and-joint-analysis"]], "Stacked analysis": [[439, "stacked-analysis"]], "Modeling and fitting": [[439, "modeling-and-fitting"]], "Fit quality assessment and model residuals for a MapDataset": [[439, "fit-quality-assessment-and-model-residuals-for-a-mapdataset"]], "Joint analysis": [[439, "joint-analysis"], [440, "joint-analysis"]], "Fit quality assessment and model residuals for a joint Datasets": [[439, "fit-quality-assessment-and-model-residuals-for-a-joint-datasets"]], "Multi instrument joint 3D and 1D analysis": [[440, "multi-instrument-joint-3d-and-1d-analysis"]], "The setup": [[440, "the-setup"], [457, "the-setup"], [465, "the-setup"]], "Data and models files": [[440, "data-and-models-files"]], "Reading different datasets": [[440, "reading-different-datasets"]], "Fermi-LAT 3FHL: map dataset for 3D analysis": [[440, "fermi-lat-3fhl-map-dataset-for-3d-analysis"]], "HESS-DL3: 1D ON/OFF dataset for spectral fitting": [[440, "hess-dl3-1d-on-off-dataset-for-spectral-fitting"]], "HAWC: 1D dataset for flux point fitting": [[440, "hawc-1d-dataset-for-flux-point-fitting"]], "Datasets serialization": [[440, "datasets-serialization"]], "Basic image exploration and fitting": [[441, "basic-image-exploration-and-fitting"]], "Select observations": [[441, "select-observations"]], "Make sky images": [[441, "make-sky-images"]], "Define map geometry": [[441, "define-map-geometry"]], "Compute images": [[441, "compute-images"]], "Show images": [[441, "show-images"]], "Source Detection": [[441, "source-detection"]], "Spatial analysis": [[441, "spatial-analysis"]], "Spectrum": [[441, "spectrum"]], "Model fit": [[441, "model-fit"]], "Spectral points": [[441, "spectral-points"]], "Plot": [[441, "plot"]], "Morphological energy dependence estimation": [[442, "morphological-energy-dependence-estimation"]], "Tutorial overview": [[442, "tutorial-overview"], [467, "tutorial-overview"]], "Obtain the data to use": [[442, "obtain-the-data-to-use"]], "Run Estimator": [[442, "run-estimator"]], "Show the results tables": [[442, "show-the-results-tables"]], "The results of the source signal above the background in each energy bin": [[442, "the-results-of-the-source-signal-above-the-background-in-each-energy-bin"]], "The results for testing energy dependence": [[442, "the-results-for-testing-energy-dependence"]], "The chi-squared value for each parameter of interest": [[442, "the-chi-squared-value-for-each-parameter-of-interest"]], "Plotting the results": [[442, "plotting-the-results"]], "Event sampling": [[443, "event-sampling"]], "Define an Observation": [[443, "define-an-observation"]], "Define the MapDataset": [[443, "define-the-mapdataset"]], "Define the Sky model: a point-like source": [[443, "define-the-sky-model-a-point-like-source"]], "Sampling the source and background events": [[443, "sampling-the-source-and-background-events"]], "Time variable source using a lightcurve": [[443, "time-variable-source-using-a-lightcurve"]], "Extended source using a template": [[443, "extended-source-using-a-template"]], "Simulate multiple event lists": [[443, "simulate-multiple-event-lists"]], "Sample a source with energy-dependent temporal evolution": [[444, "sample-a-source-with-energy-dependent-temporal-evolution"]], "Create the energy-dependent temporal model": [[444, "create-the-energy-dependent-temporal-model"]], "Create the temporal model and write it to disk": [[444, "create-the-temporal-model-and-write-it-to-disk"]], "Read the energy-dependent model": [[444, "read-the-energy-dependent-model"]], "Prepare and run the event sampler": [[444, "prepare-and-run-the-event-sampler"]], "Define the simulation source model": [[444, "define-the-simulation-source-model"]], "Define an observation and make a dataset": [[444, "define-an-observation-and-make-a-dataset"]], "Let\u2019s simulate the model": [[444, "let-s-simulate-the-model"]], "Flux Profile Estimation": [[445, "flux-profile-estimation"]], "Proposed Approach": [[445, "proposed-approach"]], "Read and Introduce Data": [[445, "read-and-introduce-data"]], "Profile Estimation": [[445, "profile-estimation"]], "Configuration": [[445, "configuration"]], "Run Estimation": [[445, "run-estimation"]], "Plotting Results": [[445, "plotting-results"]], "Serialisation and I/O": [[445, "serialisation-and-i-o"]], "3D map simulation": [[447, "d-map-simulation"]], "Imports and versions": [[447, "imports-and-versions"]], "Simulation": [[447, "simulation"]], "Estimation of time variability in a lightcurve": [[448, "estimation-of-time-variability-in-a-lightcurve"]], "Methods to characterize variability": [[448, "methods-to-characterize-variability"]], "Fractional excess variance, point-to-point fractional variance and doubling/halving time": [[448, "fractional-excess-variance-point-to-point-fractional-variance-and-doubling-halving-time"]], "Bayesian blocks": [[448, "bayesian-blocks"]], "Light curves": [[449, "light-curves"]], "Building the 3D analysis configuration": [[449, "building-the-3d-analysis-configuration"]], "Definition of the data selection": [[449, "definition-of-the-data-selection"], [449, "id1"]], "Definition of the dataset geometry": [[449, "definition-of-the-dataset-geometry"], [449, "id2"]], "Run the 3D data reduction": [[449, "run-the-3d-data-reduction"]], "Define the model to be used": [[449, "define-the-model-to-be-used"], [449, "id3"]], "Light Curve estimation by observation": [[449, "light-curve-estimation-by-observation"]], "Running the light curve extraction in 1D": [[449, "running-the-light-curve-extraction-in-1d"]], "Building the 1D analysis configuration": [[449, "building-the-1d-analysis-configuration"]], "Run the 1D data reduction": [[449, "run-the-1d-data-reduction"]], "Extracting the light curve": [[449, "extracting-the-light-curve"]], "Compare results": [[449, "compare-results"]], "Night-wise LC estimation": [[449, "night-wise-lc-estimation"]], "Light curves for flares": [[450, "light-curves-for-flares"]], "Define time intervals": [[450, "define-time-intervals"]], "Filter the observations list in time intervals": [[450, "filter-the-observations-list-in-time-intervals"]], "Building 1D datasets from the new observations": [[450, "building-1d-datasets-from-the-new-observations"]], "Defining the geometry": [[450, "defining-the-geometry"]], "Creation of the data reduction makers": [[450, "creation-of-the-data-reduction-makers"]], "Creation of the datasets": [[450, "creation-of-the-datasets"]], "Define the Model": [[450, "define-the-model"]], "Assign to model to all datasets": [[450, "assign-to-model-to-all-datasets"]], "Extract the light curve": [[450, "extract-the-light-curve"]], "Simulating and fitting a time varying source": [[451, "simulating-and-fitting-a-time-varying-source"]], "Simulating a light curve": [[451, "simulating-a-light-curve"]], "Extract the lightcurve": [[451, "extract-the-lightcurve"]], "Fitting temporal models": [[451, "fitting-temporal-models"]], "Fitting the obtained light curve": [[451, "fitting-the-obtained-light-curve"]], "Fit the datasets": [[451, "fit-the-datasets"]], "Pulsar analysis": [[452, "pulsar-analysis"]], "Opening the data": [[452, "opening-the-data"]], "Phasogram": [[452, "phasogram"]], "Make a Li&Ma test over the events": [[452, "make-a-li-ma-test-over-the-events"]], "Phase-resolved map": [[452, "phase-resolved-map"]], "Phase-resolved spectrum": [[452, "phase-resolved-spectrum"]], "Dark matter spatial and spectral models": [[454, "dark-matter-spatial-and-spectral-models"]], "Profiles": [[454, "profiles"]], "J Factors": [[454, "j-factors"]], "Gamma-ray spectra at production": [[454, "gamma-ray-spectra-at-production"]], "Flux maps for annihilation": [[454, "flux-maps-for-annihilation"]], "Flux maps for decay": [[454, "flux-maps-for-decay"]], "Source catalogs": [[455, "source-catalogs"], [478, "source-catalogs"], [487, "source-catalogs"]], "List available catalogs": [[455, "list-available-catalogs"]], "Load catalogs": [[455, "load-catalogs"]], "Catalog table": [[455, "catalog-table"]], "Source object": [[455, "source-object"]], "Select a source": [[455, "select-a-source"]], "Source information": [[455, "source-information"]], "Select a catalog subset": [[455, "select-a-catalog-subset"]], "Source models": [[455, "source-models"], [467, "source-models"]], "Specificities of the HGPS catalog": [[455, "specificities-of-the-hgps-catalog"]], "Flux points": [[455, "flux-points"], [476, "flux-points"], [490, "flux-points"]], "Lightcurves": [[455, "lightcurves"]], "Pretty-print source information": [[455, "pretty-print-source-information"]], "Datasets - Reduced data, IRFs, models": [[456, "datasets-reduced-data-irfs-models"]], "Creating an empty dataset": [[456, "creating-an-empty-dataset"]], "Accessing contents of a dataset": [[456, "accessing-contents-of-a-dataset"]], "Using masks": [[456, "using-masks"]], "Resampling datasets": [[456, "resampling-datasets"]], "Model and dataset": [[457, "model-and-dataset"], [465, "model-and-dataset"]], "Fitting options": [[457, "fitting-options"]], "Fit quality assessment": [[457, "fit-quality-assessment"]], "Covariance and parameters errors": [[457, "covariance-and-parameters-errors"]], "Confidence contours": [[457, "confidence-contours"]], "Computing contours using stat_contour": [[457, "computing-contours-using-stat-contour"]], "Computing contours using stat_surface": [[457, "computing-contours-using-stat-surface"]], "Using Gammapy IRFs": [[458, "using-gammapy-irfs"]], "Inbuilt Gammapy IRFs": [[458, "inbuilt-gammapy-irfs"]], "Support for Asymmetric IRFs": [[458, "support-for-asymmetric-irfs"]], "Effective Area": [[458, "effective-area"]], "Create exposure map": [[458, "create-exposure-map"]], "Energy Dispersion": [[458, "energy-dispersion"], [468, "energy-dispersion"], [496, "energy-dispersion"]], "Create edisp kernel map": [[458, "create-edisp-kernel-map"]], "PSF": [[458, "psf"], [468, "psf"]], "Create DL4 product - PSFMap": [[458, "create-dl4-product-psfmap"]], "Makers - Data reduction": [[459, "makers-data-reduction"]], "Safe data range handling": [[459, "safe-data-range-handling"]], "Background estimation": [[459, "background-estimation"], [500, "background-estimation"]], "FoV background": [[459, "fov-background"], [499, "fov-background"]], "Ring background": [[459, "ring-background"], [502, "ring-background"]], "Reflected regions background": [[459, "reflected-regions-background"], [501, "reflected-regions-background"]], "Data reduction loop": [[459, "data-reduction-loop"]], "Spectrum dataset": [[459, "spectrum-dataset"]], "Observation duration and effective livetime": [[459, "observation-duration-and-effective-livetime"]], "Creating WCS Maps": [[460, "creating-wcs-maps"]], "Using Factory Methods": [[460, "using-factory-methods"]], "Creating from a Map Geometry": [[460, "creating-from-a-map-geometry"]], "Adding Non-Spatial Axes": [[460, "adding-non-spatial-axes"]], "Adding Non-contiguous axes": [[460, "adding-non-contiguous-axes"]], "Reading and Writing": [[460, "reading-and-writing"]], "Reading Maps": [[460, "reading-maps"]], "Writing Maps": [[460, "writing-maps"]], "Accessing Data": [[460, "accessing-data"]], "How to get data values": [[460, "how-to-get-data-values"]], "Indexing and Slicing Sub-Maps": [[460, "indexing-and-slicing-sub-maps"]], "Iterating by image": [[460, "iterating-by-image"]], "Modifying Data": [[460, "modifying-data"]], "How to set data values": [[460, "how-to-set-data-values"]], "Filling maps from event lists": [[460, "filling-maps-from-event-lists"]], "Filling maps from interpolation": [[460, "filling-maps-from-interpolation"]], "Interpolating onto a different geometry": [[460, "interpolating-onto-a-different-geometry"]], "Maps operations": [[460, "maps-operations"]], "Basic operators": [[460, "basic-operators"]], "Cutouts": [[460, "cutouts"]], "Visualizing and Plotting": [[460, "visualizing-and-plotting"]], "Image Plotting": [[460, "image-plotting"]], "Cube plotting": [[460, "cube-plotting"]], "Mask maps": [[461, "mask-maps"]], "Masks for fitting": [[461, "masks-for-fitting"]], "Exclusion masks": [[461, "exclusion-masks"]], "Creating a mask for fitting": [[461, "creating-a-mask-for-fitting"]], "Create a mask in energy": [[461, "create-a-mask-in-energy"]], "Mask some sky regions": [[461, "mask-some-sky-regions"]], "Creating a mask manually": [[461, "creating-a-mask-manually"]], "Creating an exclusion mask": [[461, "creating-an-exclusion-mask"]], "Define the geometry": [[461, "define-the-geometry"]], "Create the mask from a list of regions": [[461, "create-the-mask-from-a-list-of-regions"]], "Create the mask map": [[461, "create-the-mask-map"]], "Create the mask from a catalog of sources": [[461, "create-the-mask-from-a-catalog-of-sources"]], "Create the mask from statistically significant pixels in a dataset": [[461, "create-the-mask-from-statistically-significant-pixels-in-a-dataset"]], "Masks operations": [[461, "masks-operations"]], "Mask modifications": [[461, "mask-modifications"]], "Mask dilation and erosion": [[461, "mask-dilation-and-erosion"]], "Boundary mask": [[461, "boundary-mask"]], "Reading and writing masks": [[461, "reading-and-writing-masks"]], "Aim": [[462, "aim"]], "Read the datasets": [[462, "read-the-datasets"]], "Assigning background models to datasets": [[462, "assigning-background-models-to-datasets"]], "Add a model on multiple datasets": [[462, "add-a-model-on-multiple-datasets"]], "Loading models from a catalog": [[462, "loading-models-from-a-catalog"]], "Selecting models contributing to a given region": [[462, "selecting-models-contributing-to-a-given-region"]], "Combining two Models": [[462, "combining-two-models"]], "Selecting models from a list": [[462, "selecting-models-from-a-list"]], "Removing a model from a dataset": [[462, "removing-a-model-from-a-dataset"]], "Plotting models on a (counts) map": [[462, "plotting-models-on-a-counts-map"]], "Freezing and unfreezing model parameters": [[462, "freezing-and-unfreezing-model-parameters"]], "Serialising models": [[462, "serialising-models"]], "Spectral models": [[463, "spectral-models"], [506, "spectral-models"]], "Norm Spectral Models": [[463, "norm-spectral-models"]], "Compound Spectral Model": [[463, "compound-spectral-model"]], "Spatial models": [[463, "spatial-models"], [506, "spatial-models"]], "Temporal models": [[463, "temporal-models"], [506, "temporal-models"]], "Modifying model parameters": [[463, "modifying-model-parameters"]], "Model lists and serialisation": [[463, "model-lists-and-serialisation"]], "Models with shared parameter": [[463, "models-with-shared-parameter"]], "Implementing a custom model": [[463, "implementing-a-custom-model"]], "Models with energy dependent morphology": [[463, "models-with-energy-dependent-morphology"]], "Observational clustering": [[464, "observational-clustering"]], "Obtain the observations": [[464, "obtain-the-observations"]], "Show various observation quantities": [[464, "show-various-observation-quantities"]], "Manual grouping of observations": [[464, "manual-grouping-of-observations"]], "Hierarchical clustering of observations": [[464, "hierarchical-clustering-of-observations"]], "Priors": [[465, "priors"]], "Example 1: Including Prior Information about the Sources Index": [[465, "example-1-including-prior-information-about-the-sources-index"]], "Fitting a Dataset with and without the Prior": [[465, "fitting-a-dataset-with-and-without-the-prior"]], "Example 2: Encouraging Positive Amplitude Values": [[465, "example-2-encouraging-positive-amplitude-values"]], "Fitting Multiple Datasets with and without the Prior": [[465, "fitting-multiple-datasets-with-and-without-the-prior"]], "Implementing a custom prior": [[465, "implementing-a-custom-prior"]], "CTA with Gammapy": [[467, "cta-with-gammapy"]], "CTA 1DC": [[467, "cta-1dc"]], "Files": [[467, "files"]], "Datastore": [[467, "datastore"]], "Events": [[467, "events"], [468, "events"]], "Effective area": [[467, "effective-area"], [494, "effective-area"]], "Energy dispersion": [[467, "energy-dispersion"]], "Point spread function": [[467, "point-spread-function"]], "Background": [[467, "background"], [495, "background"]], "CTA performance files": [[467, "cta-performance-files"]], "Next steps": [[467, "next-steps"], [469, "next-steps"], [470, "next-steps"]], "Fermi-LAT with Gammapy": [[468, "fermi-lat-with-gammapy"]], "Counts": [[468, "counts"]], "Exposure": [[468, "exposure"]], "Galactic diffuse background": [[468, "galactic-diffuse-background"]], "Isotropic diffuse background": [[468, "isotropic-diffuse-background"]], "HAWC with Gammapy": [[469, "hawc-with-gammapy"]], "HAWC data access and reduction": [[469, "hawc-data-access-and-reduction"]], "Data reduction into a MapDataset": [[469, "data-reduction-into-a-mapdataset"]], "Check the dataset we produced": [[469, "check-the-dataset-we-produced"]], "H.E.S.S. with Gammapy": [[470, "h-e-s-s-with-gammapy"]], "DL3 DR1": [[470, "dl3-dr1"]], "Theta squared event distribution": [[470, "theta-squared-event-distribution"]], "Data exploration": [[472, "data-exploration"]], "Data analysis": [[472, "data-analysis"]], "1D Spectral": [[472, "d-spectral"]], "2D Image": [[472, "d-image"]], "3D Cube": [[472, "d-cube"]], "Time": [[472, "time"]], "Package / API": [[472, "package-api"]], "Scripts": [[472, "scripts"]], "Survey Map Script": [[474, "survey-map-script"]], "Setting the data to use": [[476, "setting-the-data-to-use"]], "Setting the reduced datasets geometry": [[476, "setting-the-reduced-datasets-geometry"]], "Setting the background normalization maker": [[476, "setting-the-background-normalization-maker"]], "Setting modeling and fitting parameters": [[476, "setting-modeling-and-fitting-parameters"]], "Using YAML configuration files": [[476, "using-yaml-configuration-files"]], "Running the analysis": [[476, "running-the-analysis"]], "What\u2019s next": [[476, "whats-next"]], "Low level API": [[477, "low-level-api"]], "Defining the datastore and selecting observations": [[477, "defining-the-datastore-and-selecting-observations"]], "Preparing reduced datasets geometry": [[477, "preparing-reduced-datasets-geometry"]], "Create the maker classes to be used": [[477, "create-the-maker-classes-to-be-used"]], "Perform the data reduction loop": [[477, "perform-the-data-reduction-loop"]], "Inspect the reduced dataset": [[477, "inspect-the-reduced-dataset"]], "Define the model": [[477, "define-the-model"]], "Fit the model": [[477, "fit-the-model"]], "Inspecting residuals": [[477, "inspecting-residuals"]], "Plot the fitted spectrum": [[477, "plot-the-fitted-spectrum"]], "Making a butterfly plot": [[477, "making-a-butterfly-plot"]], "Computing flux points": [[477, "computing-flux-points"]], "Data structures": [[478, "data-structures"]], "Event lists": [[478, "event-lists"]], "Spectral models and flux points": [[478, "spectral-models-and-flux-points"]], "Dark matter": [[480, "dark-matter"]], "Other packages": [[480, "other-packages"]], "GammaLib": [[480, "gammalib"]], "FermiST": [[480, "fermist"]], "CLUMPY": [[480, "clumpy"]], "gamLike": [[480, "gamlike"]], "Examples using gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel": [[480, "examples-using-gammapy-astro-darkmatter-darkmatterannihilationspectralmodel"]], "Astrophysics": [[481, "astrophysics"]], "Sub-packages": [[481, "sub-packages"]], "Astrophysical source population models": [[482, "astrophysical-source-population-models"]], "Galactocentric spatial distributions": [[482, "galactocentric-spatial-distributions"]], "Spiral arm models": [[482, "spiral-arm-models"]], "Velocity distributions": [[482, "velocity-distributions"]], "Astrophysical source models": [[483, "astrophysical-source-models"]], "Using gammapy.astro.source": [[483, "using-gammapy-astro-source"]], "Pulsar Source Models": [[484, "pulsar-source-models"]], "Pulsar Wind Nebula Source Models": [[485, "pulsar-wind-nebula-source-models"]], "Supernova Remnant Models": [[486, "supernova-remnant-models"]], "Using gammapy.catalog": [[487, "using-gammapy-catalog"]], "Examples using gammapy.catalog.SourceCatalog3FHL": [[487, "examples-using-gammapy-catalog-sourcecatalog3fhl"]], "Examples using gammapy.catalog.SourceCatalogGammaCat": [[487, "examples-using-gammapy-catalog-sourcecataloggammacat"]], "Datasets (DL4)": [[488, "datasets-dl4"]], "Types of supported datasets": [[488, "types-of-supported-datasets"]], "Predicted counts": [[488, "predicted-counts"]], "Stacking Multiple Datasets": [[488, "stacking-multiple-datasets"]], "Joint Analysis": [[488, "joint-analysis"]], "Serialisation of datasets": [[488, "serialisation-of-datasets"]], "Using gammapy.datasets": [[488, "using-gammapy-datasets"], [491, "using-gammapy-datasets"]], "Examples using gammapy.datasets.MapDataset": [[488, "examples-using-gammapy-datasets-mapdataset"]], "Examples using gammapy.datasets.SpectrumDatasetOnOff": [[488, "examples-using-gammapy-datasets-spectrumdatasetonoff"]], "Data access and selection (DL3)": [[489, "data-access-and-selection-dl3"]], "Getting started with data": [[489, "getting-started-with-data"]], "The index tables": [[489, "the-index-tables"]], "Working with event lists": [[489, "working-with-event-lists"]], "Combining event lists and GTIs": [[489, "combining-event-lists-and-gtis"]], "Writing event lists and GTIs to file": [[489, "writing-event-lists-and-gtis-to-file"]], "Using gammapy.data": [[489, "using-gammapy-data"]], "Examples using gammapy.data.EventList": [[489, "examples-using-gammapy-data-eventlist"]], "Examples using gammapy.data.DataStore": [[489, "examples-using-gammapy-data-datastore"]], "Estimators (DL4 to DL5, and DL6)": [[490, "estimators-dl4-to-dl5-and-dl6"]], "General method": [[490, "general-method"]], "Energy edges": [[490, "energy-edges"]], "Flux quantities": [[490, "flux-quantities"]], "Flux maps": [[490, "flux-maps"]], "Using gammapy.estimators": [[490, "using-gammapy-estimators"]], "Examples using gammapy.estimators.FluxPointsEstimator": [[490, "examples-using-gammapy-estimators-fluxpointsestimator"]], "Examples using gammapy.estimators.LightCurveEstimator": [[490, "examples-using-gammapy-estimators-lightcurveestimator"]], "High Level Analysis Interface": [[491, "high-level-analysis-interface"]], "Examples using gammapy.analysis.Analysis": [[491, "examples-using-gammapy-analysis-analysis"]], "User guide": [[493, "user-guide"]], "as a function of true energy and offset angle (AEFF_2D)": [[494, "as-a-function-of-true-energy-and-offset-angle-gadf-aeff-2d"]], "as a function of reconstructed energy and detector coordinates (BKG_3D)": [[495, "as-a-function-of-reconstructed-energy-and-detector-coordinates-gadf-bkg-3d"]], "as a function of reconstructed energy and offset angle, radially symmetric (BKG_2D)": [[495, "as-a-function-of-reconstructed-energy-and-offset-angle-radially-symmetric-gadf-bkg-2d"]], "as a function of of true energy and offset angle (EDISP_2D)": [[496, "as-a-function-of-of-true-energy-and-offset-angle-gadf-edisp-2d"]], "as a function of true energy (RMF)": [[496, "as-a-function-of-true-energy-gadf-ogip-rmf"]], "Storing the energy dispersion information as a function of sky position": [[496, "storing-the-energy-dispersion-information-as-a-function-of-sky-position"]], "Instrument Response Functions (DL3)": [[497, "instrument-response-functions-dl3"]], "Expected number of detected events": [[497, "expected-number-of-detected-events"]], "Factorisation of the IRFs": [[497, "factorisation-of-the-irfs"]], "IRF axis naming": [[497, "irf-axis-naming"]], "Using gammapy.irf": [[497, "using-gammapy-irf"]], "Examples using gammapy.irf.PSFMap": [[497, "examples-using-gammapy-irf-psfmap"]], "Examples using gammapy.irf.EDispKernelMap": [[497, "examples-using-gammapy-irf-edispkernelmap"]], "Examples using gammapy.irf.load_irf_dict_from_file": [[497, "examples-using-gammapy-irf-load-irf-dict-from-file"]], "Point Spread Function": [[498, "point-spread-function"]], "As a function of of true energy and offset angle (PSF_TABLE)": [[498, "as-a-function-of-of-true-energy-and-offset-angle-gadf-psf-table"]], "Additional PSF classes": [[498, "additional-psf-classes"]], "Overview": [[499, "overview"], [501, "overview"], [502, "overview"]], "Examples using gammapy.makers.FoVBackgroundMaker": [[499, "examples-using-gammapy-makers-fovbackgroundmaker"]], "Data reduction (DL3 to DL4)": [[500, "data-reduction-dl3-to-dl4"]], "Safe data range definition": [[500, "safe-data-range-definition"]], "Using gammapy.makers": [[500, "using-gammapy-makers"]], "Examples using gammapy.makers.MapDatasetMaker": [[500, "examples-using-gammapy-makers-mapdatasetmaker"]], "Examples using gammapy.makers.SpectrumDatasetMaker": [[500, "examples-using-gammapy-makers-spectrumdatasetmaker"]], "Using regions": [[501, "using-regions"]], "The reflected region finder": [[501, "the-reflected-region-finder"]], "Using the reflected background estimator": [[501, "using-the-reflected-background-estimator"]], "Examples using gammapy.makers.ReflectedRegionsBackgroundMaker": [[501, "examples-using-gammapy-makers-reflectedregionsbackgroundmaker"]], "HEALPix-based maps": [[503, "healpix-based-maps"]], "HEALPix geometry": [[503, "healpix-geometry"]], "Sky maps (DL4)": [[504, "sky-maps-dl4"]], "Getting started with maps": [[504, "getting-started-with-maps"]], "Accessor methods": [[504, "accessor-methods"]], "Interface with MapCoord and SkyCoord": [[504, "interface-with-mapcoord-and-skycoord"]], "Using gammapy.maps": [[504, "using-gammapy-maps"]], "Examples using gammapy.maps.WcsNDMap": [[504, "examples-using-gammapy-maps-wcsndmap"]], "Examples using gammapy.maps.RegionNDMap": [[504, "examples-using-gammapy-maps-regionndmap"]], "Examples using gammapy.maps.HpxNDMap": [[504, "examples-using-gammapy-maps-hpxndmap"]], "RegionGeom and RegionNDMap": [[505, "regiongeom-and-regionndmap"]], "Creating a RegionGeom": [[505, "creating-a-regiongeom"]], "RegionGeom and coordinates": [[505, "regiongeom-and-coordinates"]], "Bin volume and angular size": [[505, "bin-volume-and-angular-size"]], "Coordinates defined by the RegionGeom": [[505, "coordinates-defined-by-the-regiongeom"]], "Upsampling and downsampling non-spatial axes": [[505, "upsampling-and-downsampling-non-spatial-axes"]], "Relation to WCS geometries": [[505, "relation-to-wcs-geometries"]], "Plotting a RegionGeom": [[505, "plotting-a-regiongeom"]], "Creating a RegionNDMap": [[505, "creating-a-regionndmap"]], "Filling a RegionNDMap": [[505, "filling-a-regionndmap"]], "Visualing a RegionNDMap": [[505, "visualing-a-regionndmap"]], "Plotting the underlying region": [[505, "plotting-the-underlying-region"]], "Plotting the map content": [[505, "plotting-the-map-content"]], "Writing and reading a RegionNDMap to/from a FITS file": [[505, "writing-and-reading-a-regionndmap-to-from-a-fits-file"]], "Model gallery": [[506, "model-gallery"]], "Constant spatial model": [[508, "constant-spatial-model"]], "Example plot": [[508, "example-plot"], [509, "example-plot"], [510, "example-plot"], [511, "example-plot"], [512, "example-plot"], [513, "example-plot"], [514, "example-plot"], [515, "example-plot"], [516, "example-plot"], [518, "example-plot"], [519, "example-plot"], [520, "example-plot"], [521, "example-plot"], [522, "example-plot"], [523, "example-plot"], [524, "example-plot"], [525, "example-plot"], [526, "example-plot"], [527, "example-plot"], [528, "example-plot"], [529, "example-plot"], [530, "example-plot"], [531, "example-plot"], [532, "example-plot"], [533, "example-plot"], [534, "example-plot"], [535, "example-plot"], [536, "example-plot"], [537, "example-plot"], [539, "example-plot"], [540, "example-plot"], [541, "example-plot"], [542, "example-plot"], [543, "example-plot"], [544, "example-plot"], [545, "example-plot"]], "YAML representation": [[508, "yaml-representation"], [509, "yaml-representation"], [510, "yaml-representation"], [511, "yaml-representation"], [512, "yaml-representation"], [513, "yaml-representation"], [514, "yaml-representation"], [515, "yaml-representation"], [516, "yaml-representation"], [518, "yaml-representation"], [519, "yaml-representation"], [520, "yaml-representation"], [521, "yaml-representation"], [522, "yaml-representation"], [523, "yaml-representation"], [524, "yaml-representation"], [525, "yaml-representation"], [526, "yaml-representation"], [527, "yaml-representation"], [528, "yaml-representation"], [529, "yaml-representation"], [530, "yaml-representation"], [531, "yaml-representation"], [532, "yaml-representation"], [533, "yaml-representation"], [534, "yaml-representation"], [535, "yaml-representation"], [536, "yaml-representation"], [537, "yaml-representation"], [539, "yaml-representation"], [540, "yaml-representation"], [541, "yaml-representation"], [542, "yaml-representation"], [543, "yaml-representation"], [544, "yaml-representation"], [545, "yaml-representation"], [546, "yaml-representation"], [547, "yaml-representation"]], "Disk spatial model": [[509, "disk-spatial-model"]], "Gaussian spatial model": [[510, "gaussian-spatial-model"]], "Generalized gaussian spatial model": [[511, "generalized-gaussian-spatial-model"]], "Piecewise norm spatial model": [[512, "piecewise-norm-spatial-model"]], "Point spatial model": [[513, "point-spatial-model"]], "Shell spatial model": [[514, "shell-spatial-model"]], "Shell2 spatial model": [[515, "shell2-spatial-model"]], "Template spatial model": [[516, "template-spatial-model"]], "EBL absorption spectral model": [[518, "ebl-absorption-spectral-model"]], "Broken power law spectral model": [[519, "broken-power-law-spectral-model"]], "Compound spectral model": [[520, "compound-spectral-model"]], "Constant spectral model": [[521, "constant-spectral-model"]], "Exponential cutoff power law spectral model": [[522, "exponential-cutoff-power-law-spectral-model"]], "Exponential cutoff power law spectral model used for 3FGL": [[523, "exponential-cutoff-power-law-spectral-model-used-for-3fgl"]], "Exponential cutoff power law norm spectral model": [[524, "exponential-cutoff-power-law-norm-spectral-model"]], "Gaussian spectral model": [[525, "gaussian-spectral-model"]], "Log parabola spectral model": [[526, "log-parabola-spectral-model"]], "Log parabola spectral norm model": [[527, "log-parabola-spectral-norm-model"]], "Naima spectral model": [[528, "naima-spectral-model"]], "Piecewise  norm spectral model": [[529, "piecewise-norm-spectral-model"]], "Power law spectral model": [[530, "power-law-spectral-model"]], "Power law 2 spectral model": [[531, "power-law-2-spectral-model"]], "Power law norm spectral model": [[532, "power-law-norm-spectral-model"]], "Smooth broken power law spectral model": [[533, "smooth-broken-power-law-spectral-model"]], "Super exponential cutoff power law model used for 3FGL": [[534, "super-exponential-cutoff-power-law-model-used-for-3fgl"]], "Super Exponential Cutoff Power Law Model used for 4FGL-DR3": [[535, "super-exponential-cutoff-power-law-model-used-for-4fgl-dr3"]], "Super Exponential Cutoff Power Law Model used for 4FGL-DR1 (and DR2)": [[536, "super-exponential-cutoff-power-law-model-used-for-4fgl-dr1-and-dr2"]], "Template spectral model": [[537, "template-spectral-model"]], "Constant temporal model": [[539, "constant-temporal-model"]], "ExpDecay temporal model": [[540, "expdecay-temporal-model"]], "Gaussian temporal model": [[541, "gaussian-temporal-model"]], "Generalized Gaussian temporal model": [[542, "generalized-gaussian-temporal-model"]], "Linear temporal model": [[543, "linear-temporal-model"]], "PowerLaw temporal model": [[544, "powerlaw-temporal-model"]], "Sine temporal model": [[545, "sine-temporal-model"]], "Phase curve temporal model": [[546, "phase-curve-temporal-model"]], "Light curve temporal model": [[547, "light-curve-temporal-model"]], "Modeling and Fitting (DL4 to DL5)": [[549, "modeling-and-fitting-dl4-to-dl5"]], "Built-in models": [[549, "built-in-models"]], "Custom models": [[549, "custom-models"]], "Using gammapy.modeling": [[549, "using-gammapy-modeling"]], "Examples using gammapy.modeling.Fit": [[549, "examples-using-gammapy-modeling-fit"]], "Gammapy analysis workflow and package structure": [[550, "gammapy-analysis-workflow-and-package-structure"]], "Analysis workflow": [[550, "analysis-workflow"]], "Analysis steps": [[550, "analysis-steps"]], "Configurable analysis": [[550, "configurable-analysis"]], "Additional utilities": [[550, "additional-utilities"]], "Glossary and references": [[551, "glossary-and-references"]], "Glossary": [[551, "glossary"]], "References": [[551, "publications"]], "Command line tools": [[552, "command-line-tools"]], "Execution": [[552, "execution"]], "Running config driven data reduction": [[552, "running-config-driven-data-reduction"]], "Write your own CLI": [[552, "write-your-own-cli"]], "Command not found": [[552, "command-not-found"]], "Fit statistics": [[553, "fit-statistics"]], "Cash : Poisson data with background model": [[553, "cash-poisson-data-with-background-model"]], "Example": [[553, "example"], [553, "id2"]], "WStat : Poisson data with background measurement": [[553, "wstat-poisson-data-with-background-measurement"]], "Caveat": [[553, "caveat"]], "Further references": [[553, "further-references"]], "Statistical utility functions": [[554, "statistical-utility-functions"]], "Notations": [[554, "notations"]], "Counts and fit statistics": [[554, "counts-and-fit-statistics"]], "Estimating TS": [[554, "estimating-ts"]], "Counts statistics classes": [[554, "counts-statistics-classes"]], "Cash counts statistic": [[554, "cash-counts-statistic"]], "Excess and Significance": [[554, "excess-and-significance"], [554, "id2"]], "Excess errors": [[554, "excess-errors"], [554, "id4"]], "WStat counts statistic": [[554, "wstat-counts-statistic"]], "Derivation of the WStat formula": [[555, "derivation-of-the-wstat-formula"]], "Profile Likelihood": [[555, "profile-likelihood"]], "Goodness of fit": [[555, "goodness-of-fit"]], "Final result": [[555, "final-result"]], "Special cases": [[555, "special-cases"]], "Utility functions": [[556, "utility-functions"]], "Time handling in Gammapy": [[556, "time-handling-in-gammapy"]], "Time format and scale": [[556, "time-format-and-scale"]], "Mission elapsed times (MET)": [[556, "mission-elapsed-times-met"]], "Time differences": [[556, "time-differences"]], "Visualization": [[557, "visualization"]], "Colormaps": [[557, "colormaps"]], "Survey panel plots": [[557, "survey-panel-plots"]]}, "indexentries": {"gammapy.analysis": [[0, "module-gammapy.analysis"]], "module": [[0, "module-gammapy.analysis"], [1, "module-gammapy.astro.darkmatter"], [1, "module-gammapy.astro.population"], [1, "module-gammapy.astro.source"], [2, "module-gammapy.catalog"], [3, "module-gammapy.data"], [4, "module-gammapy.datasets"], [4, "module-gammapy.datasets.utils"], [5, "module-gammapy.estimators"], [5, "module-gammapy.estimators.utils"], [7, "module-gammapy.irf"], [8, "module-gammapy.makers"], [8, "module-gammapy.makers.utils"], [9, "module-gammapy.maps"], [10, "module-gammapy.modeling"], [10, "module-gammapy.modeling.models"], [10, "module-gammapy.modeling.models.utils"], [12, "module-gammapy.stats"], [13, "module-gammapy.utils.cluster"], [13, "module-gammapy.utils.coordinates"], [13, "module-gammapy.utils.fits"], [13, "module-gammapy.utils.integrate"], [13, "module-gammapy.utils.interpolation"], [13, "module-gammapy.utils.parallel"], [13, "module-gammapy.utils.random"], [13, "module-gammapy.utils.regions"], [13, "module-gammapy.utils.scripts"], [13, "module-gammapy.utils.table"], [13, "module-gammapy.utils.testing"], [13, "module-gammapy.utils.time"], [13, "module-gammapy.utils.units"], [14, "module-gammapy.visualization"]], "gammapy.astro.darkmatter": [[1, "module-gammapy.astro.darkmatter"]], "gammapy.astro.population": [[1, "module-gammapy.astro.population"]], "gammapy.astro.source": [[1, "module-gammapy.astro.source"]], "gammapy.catalog": [[2, "module-gammapy.catalog"]], "gammapy.data": [[3, "module-gammapy.data"]], "gammapy.datasets": [[4, "module-gammapy.datasets"]], "gammapy.datasets.utils": [[4, "module-gammapy.datasets.utils"]], "gammapy.estimators": [[5, "module-gammapy.estimators"]], "gammapy.estimators.utils": [[5, "module-gammapy.estimators.utils"]], "gammapy.irf": [[7, "module-gammapy.irf"]], "gammapy.makers": [[8, "module-gammapy.makers"]], "gammapy.makers.utils": [[8, "module-gammapy.makers.utils"]], "gammapy.maps": [[9, "module-gammapy.maps"]], "gammapy.modeling": [[10, "module-gammapy.modeling"]], "gammapy.modeling.models": [[10, "module-gammapy.modeling.models"]], "gammapy.modeling.models.utils": [[10, "module-gammapy.modeling.models.utils"]], "--dependencies": [[11, "cmdoption-gammapy-info-dependencies"]], "--envvar": [[11, "cmdoption-gammapy-info-envvar"]], "--filename": [[11, "cmdoption-gammapy-analysis-config-filename"], [11, "cmdoption-gammapy-analysis-run-filename"]], "--ignore-warnings": [[11, "cmdoption-gammapy-ignore-warnings"]], "--log-level": [[11, "cmdoption-gammapy-log-level"]], "--no-dependencies": [[11, "cmdoption-gammapy-info-dependencies"]], "--no-envvar": [[11, "cmdoption-gammapy-info-envvar"]], "--no-system": [[11, "cmdoption-gammapy-info-system"]], "--no-version": [[11, "cmdoption-gammapy-info-version"]], "--out": [[11, "cmdoption-gammapy-analysis-run-out"], [11, "cmdoption-gammapy-download-datasets-out"], [11, "cmdoption-gammapy-download-notebooks-out"]], "--overwrite": [[11, "cmdoption-gammapy-analysis-config-overwrite"], [11, "cmdoption-gammapy-analysis-run-overwrite"]], "--release": [[11, "cmdoption-gammapy-download-datasets-release"], [11, "cmdoption-gammapy-download-notebooks-release"]], "--system": [[11, "cmdoption-gammapy-info-system"]], "--version": [[11, "cmdoption-gammapy-info-version"], [11, "cmdoption-gammapy-version"]], "gammapy command line option": [[11, "cmdoption-gammapy-ignore-warnings"], [11, "cmdoption-gammapy-log-level"], [11, "cmdoption-gammapy-version"]], "gammapy-analysis-config command line option": [[11, "cmdoption-gammapy-analysis-config-filename"], [11, "cmdoption-gammapy-analysis-config-overwrite"]], "gammapy-analysis-run command line option": [[11, "cmdoption-gammapy-analysis-run-filename"], [11, "cmdoption-gammapy-analysis-run-out"], [11, "cmdoption-gammapy-analysis-run-overwrite"]], "gammapy-download-datasets command line option": [[11, "cmdoption-gammapy-download-datasets-out"], [11, "cmdoption-gammapy-download-datasets-release"]], "gammapy-download-notebooks command line option": [[11, "cmdoption-gammapy-download-notebooks-out"], [11, "cmdoption-gammapy-download-notebooks-release"]], "gammapy-info command line option": [[11, "cmdoption-gammapy-info-dependencies"], [11, "cmdoption-gammapy-info-envvar"], [11, "cmdoption-gammapy-info-system"], [11, "cmdoption-gammapy-info-version"]], "gammapy.stats": [[12, "module-gammapy.stats"]], "gammapy.utils.cluster": [[13, "module-gammapy.utils.cluster"]], "gammapy.utils.coordinates": [[13, "module-gammapy.utils.coordinates"]], "gammapy.utils.fits": [[13, "module-gammapy.utils.fits"]], "gammapy.utils.integrate": [[13, "module-gammapy.utils.integrate"]], "gammapy.utils.interpolation": [[13, "module-gammapy.utils.interpolation"]], "gammapy.utils.parallel": [[13, "module-gammapy.utils.parallel"]], "gammapy.utils.random": [[13, "module-gammapy.utils.random"]], "gammapy.utils.regions": [[13, "module-gammapy.utils.regions"]], "gammapy.utils.scripts": [[13, "module-gammapy.utils.scripts"]], "gammapy.utils.table": [[13, "module-gammapy.utils.table"]], "gammapy.utils.testing": [[13, "module-gammapy.utils.testing"]], "gammapy.utils.time": [[13, "module-gammapy.utils.time"]], "gammapy.utils.units": [[13, "module-gammapy.utils.units"]], "gammapy.visualization": [[14, "module-gammapy.visualization"]], "analysis (class in gammapy.analysis)": [[15, "gammapy.analysis.Analysis"]], "config (gammapy.analysis.analysis attribute)": [[15, "gammapy.analysis.Analysis.config"]], "get_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_datasets"]], "get_excess_map() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_excess_map"]], "get_flux_points() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_flux_points"]], "get_light_curve() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_light_curve"]], "get_observations() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_observations"]], "models (gammapy.analysis.analysis attribute)": [[15, "gammapy.analysis.Analysis.models"]], "read_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.read_datasets"]], "read_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.read_models"]], "run_fit() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.run_fit"]], "set_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.set_models"]], "update_config() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.update_config"]], "write_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.write_datasets"]], "write_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.write_models"]], "analysisconfig (class in gammapy.analysis)": [[16, "gammapy.analysis.AnalysisConfig"]], "construct() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.construct"]], "copy() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.copy"]], "dict() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.dict"]], "from_orm() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.from_orm"]], "from_yaml() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.from_yaml"]], "json() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.json"]], "model_computed_fields (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_computed_fields"]], "model_config (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_config"]], "model_construct() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_construct"]], "model_copy() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_copy"]], "model_dump() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_dump"]], "model_dump_json() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_dump_json"]], "model_extra (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_extra"]], "model_fields (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_fields"]], "model_fields_set (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_fields_set"]], "model_json_schema() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_json_schema"]], "model_parametrized_name() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_parametrized_name"]], "model_post_init() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_post_init"]], "model_rebuild() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_rebuild"]], "model_validate() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate"]], "model_validate_json() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate_json"]], "model_validate_strings() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate_strings"]], "parse_file() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_file"]], "parse_obj() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_obj"]], "parse_raw() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_raw"]], "read() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.read"]], "schema() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.schema"]], "schema_json() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.schema_json"]], "set_logging() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.set_logging"]], "to_yaml() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.to_yaml"]], "update() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.update"]], "update_forward_refs() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.update_forward_refs"]], "validate() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.validate"]], "write() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.write"]], "burkertprofile (class in gammapy.astro.darkmatter)": [[17, "gammapy.astro.darkmatter.BurkertProfile"]], "default_scale_radius (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.burkertprofile static method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.scale_to_local_density"]], "distance_gc (gammapy.astro.darkmatter.dmprofile attribute)": [[18, "gammapy.astro.darkmatter.DMProfile.DISTANCE_GC"]], "dmprofile (class in gammapy.astro.darkmatter)": [[18, "gammapy.astro.darkmatter.DMProfile"]], "local_density (gammapy.astro.darkmatter.dmprofile attribute)": [[18, "gammapy.astro.darkmatter.DMProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.__call__"]], "integral() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.scale_to_local_density"]], "darkmatterannihilationspectralmodel (class in gammapy.astro.darkmatter)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel"]], "thermal_relic_cross_section (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.THERMAL_RELIC_CROSS_SECTION"]], "__call__() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.__call__"]], "copy() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.copy"]], "covariance (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.covariance"]], "default_parameters (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.freeze"]], "from_dict() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel class method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel class method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.from_parameters"]], "frozen (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.frozen"]], "integral() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.integral"]], "integral_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.integral_error"]], "inverse() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.inverse"]], "inverse_all() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.parameters"]], "pivot_energy (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.pivot_energy"]], "plot() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.plot"]], "plot_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.plot_error"]], "reassign() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.reference_fluxes"]], "scale (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.scale"]], "spectral_index() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.spectral_index_error"]], "tag (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.tag"]], "to_dict() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.to_dict"]], "type (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.type"]], "unfreeze() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.unfreeze"]], "darkmatterdecayspectralmodel (class in gammapy.astro.darkmatter)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel"]], "lifetime_age_of_universe (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.LIFETIME_AGE_OF_UNIVERSE"]], "__call__() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.__call__"]], "copy() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.copy"]], "covariance (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.covariance"]], "default_parameters (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.freeze"]], "from_dict() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel class method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel class method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.from_parameters"]], "frozen (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.frozen"]], "integral() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.integral"]], "integral_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.integral_error"]], "inverse() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.inverse"]], "inverse_all() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.is_norm_spectral_model"]], "parameters (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.parameters"]], "pivot_energy (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.pivot_energy"]], "plot() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.plot"]], "plot_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.plot_error"]], "reassign() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.reference_fluxes"]], "scale (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.scale"]], "spectral_index() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.spectral_index_error"]], "tag (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.tag"]], "to_dict() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.to_dict"]], "type (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.type"]], "unfreeze() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.unfreeze"]], "default_alpha (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DEFAULT_ALPHA"]], "default_scale_radius (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DISTANCE_GC"]], "einastoprofile (class in gammapy.astro.darkmatter)": [[21, "gammapy.astro.darkmatter.EinastoProfile"]], "local_density (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.einastoprofile static method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.scale_to_local_density"]], "default_scale_radius (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.DISTANCE_GC"]], "isothermalprofile (class in gammapy.astro.darkmatter)": [[22, "gammapy.astro.darkmatter.IsothermalProfile"]], "local_density (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.isothermalprofile static method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.scale_to_local_density"]], "jfactory (class in gammapy.astro.darkmatter)": [[23, "gammapy.astro.darkmatter.JFactory"]], "compute_differential_jfactor() (gammapy.astro.darkmatter.jfactory method)": [[23, "gammapy.astro.darkmatter.JFactory.compute_differential_jfactor"]], "compute_jfactor() (gammapy.astro.darkmatter.jfactory method)": [[23, "gammapy.astro.darkmatter.JFactory.compute_jfactor"]], "default_scale_radius (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.LOCAL_DENSITY"]], "mooreprofile (class in gammapy.astro.darkmatter)": [[24, "gammapy.astro.darkmatter.MooreProfile"]], "__call__() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.mooreprofile static method)": [[24, "gammapy.astro.darkmatter.MooreProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.scale_to_local_density"]], "default_scale_radius (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.LOCAL_DENSITY"]], "nfwprofile (class in gammapy.astro.darkmatter)": [[25, "gammapy.astro.darkmatter.NFWProfile"]], "__call__() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.nfwprofile static method)": [[25, "gammapy.astro.darkmatter.NFWProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.scale_to_local_density"]], "primaryflux (class in gammapy.astro.darkmatter)": [[26, "gammapy.astro.darkmatter.PrimaryFlux"]], "__call__() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.__call__"]], "allowed_channels (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.allowed_channels"]], "channel (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.channel"]], "channel_registry (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.channel_registry"]], "copy() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.copy"]], "covariance (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.covariance"]], "default_parameters (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.freeze"]], "from_dict() (gammapy.astro.darkmatter.primaryflux class method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.primaryflux class method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.from_parameters"]], "frozen (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.frozen"]], "integral() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.integral"]], "integral_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.integral_error"]], "inverse() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.inverse"]], "inverse_all() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.is_norm_spectral_model"]], "mdm (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.mDM"]], "map (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.map"]], "parameters (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.parameters"]], "pivot_energy (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.pivot_energy"]], "plot() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.plot"]], "plot_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.plot_error"]], "reassign() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.reference_fluxes"]], "spectral_index() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.spectral_index_error"]], "table_filename (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.table_filename"]], "tag (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.tag"]], "to_dict() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.to_dict"]], "type (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.type"]], "unfreeze() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.unfreeze"]], "write() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.write"]], "default_alpha (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_ALPHA"]], "default_beta (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_BETA"]], "default_gamma (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_GAMMA"]], "default_scale_radius (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.LOCAL_DENSITY"]], "zhaoprofile (class in gammapy.astro.darkmatter)": [[27, "gammapy.astro.darkmatter.ZhaoProfile"]], "__call__() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.zhaoprofile static method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.scale_to_local_density"]], "casebattacharya1998 (class in gammapy.astro.population)": [[28, "gammapy.astro.population.CaseBattacharya1998"]], "__call__() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.__call__"]], "alpha (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.alpha"]], "amplitude (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.amplitude"]], "bbox_with_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bbox_with_units"]], "beta (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.beta"]], "bounding_box (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bounding_box"]], "bounds (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bounds"]], "coerce_units() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.coerce_units"]], "col_fit_deriv (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.col_fit_deriv"]], "copy() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.copy"]], "cov_matrix (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.cov_matrix"]], "deepcopy() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.deepcopy"]], "eqcons (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.eqcons"]], "evaluate() (gammapy.astro.population.casebattacharya1998 static method)": [[28, "gammapy.astro.population.CaseBattacharya1998.evaluate"]], "evolved (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.evolved"]], "fit_deriv (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fit_deriv"]], "fittable (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fittable"]], "fixed (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fixed"]], "get_bounding_box() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.get_bounding_box"]], "has_inverse() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_user_inverse"]], "ineqcons (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.ineqcons"]], "input_shape() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_shape"]], "input_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_strict"]], "inputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.inputs"]], "inverse (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.inverse"]], "linear (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.linear"]], "meta (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.meta"]], "model_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.model_constraints"]], "model_set_axis (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.model_set_axis"]], "n_inputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_inputs"]], "n_outputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_outputs"]], "n_submodels (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_submodels"]], "name (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.name"]], "output_units() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.output_units"]], "outputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.outputs"]], "param_names (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.param_names"]], "param_sets (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.param_sets"]], "parameter_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.parameter_constraints"]], "parameters (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.parameters"]], "prepare_inputs() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.prepare_outputs"]], "rename() (gammapy.astro.population.casebattacharya1998 class method)": [[28, "gammapy.astro.population.CaseBattacharya1998.rename"]], "render() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.render"]], "return_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.return_units"]], "separable (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.separable"]], "set_slice_args() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.standard_broadcasting"]], "stds (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.stds"]], "strip_units_from_tree() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.sync_constraints"]], "tied (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.tied"]], "uses_quantity (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.without_units_for_data"]], "exponential (class in gammapy.astro.population)": [[29, "gammapy.astro.population.Exponential"]], "__call__() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.__call__"]], "amplitude (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.amplitude"]], "bbox_with_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bbox_with_units"]], "bounding_box (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bounding_box"]], "bounds (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bounds"]], "coerce_units() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.coerce_units"]], "col_fit_deriv (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.col_fit_deriv"]], "copy() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.copy"]], "cov_matrix (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.cov_matrix"]], "deepcopy() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.deepcopy"]], "eqcons (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.eqcons"]], "evaluate() (gammapy.astro.population.exponential static method)": [[29, "gammapy.astro.population.Exponential.evaluate"]], "evolved (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.evolved"]], "fit_deriv (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fit_deriv"]], "fittable (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fittable"]], "fixed (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fixed"]], "get_bounding_box() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.get_bounding_box"]], "has_inverse() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.has_user_inverse"]], "ineqcons (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.ineqcons"]], "input_shape() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.input_shape"]], "input_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_strict"]], "inputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.inputs"]], "inverse (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.inverse"]], "linear (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.linear"]], "meta (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.meta"]], "model_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.model_constraints"]], "model_set_axis (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.model_set_axis"]], "n_inputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_inputs"]], "n_outputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_outputs"]], "n_submodels (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_submodels"]], "name (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.name"]], "output_units() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.output_units"]], "outputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.outputs"]], "param_names (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.param_names"]], "param_sets (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.param_sets"]], "parameter_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.parameter_constraints"]], "parameters (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.parameters"]], "prepare_inputs() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.prepare_outputs"]], "rename() (gammapy.astro.population.exponential class method)": [[29, "gammapy.astro.population.Exponential.rename"]], "render() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.render"]], "return_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.return_units"]], "separable (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.separable"]], "set_slice_args() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.standard_broadcasting"]], "stds (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.stds"]], "strip_units_from_tree() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.sync_constraints"]], "tied (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.tied"]], "uses_quantity (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.without_units_for_data"]], "z_0 (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.z_0"]], "faucherkaspi2006 (class in gammapy.astro.population)": [[30, "gammapy.astro.population.FaucherKaspi2006"]], "__call__() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006 static method)": [[30, "gammapy.astro.population.FaucherKaspi2006.evaluate"]], "evolved (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.evolved"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.linear"]], "meta (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.prepare_outputs"]], "r_0 (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.r_0"]], "rename() (gammapy.astro.population.faucherkaspi2006 class method)": [[30, "gammapy.astro.population.FaucherKaspi2006.rename"]], "render() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.render"]], "return_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.set_slice_args"]], "sigma (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.sigma"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.without_units_for_data"]], "faucherkaspi2006velocitybimodal (class in gammapy.astro.population)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal"]], "__call__() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006velocitybimodal static method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.evaluate"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.linear"]], "meta (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.prepare_outputs"]], "rename() (gammapy.astro.population.faucherkaspi2006velocitybimodal class method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.rename"]], "render() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.render"]], "return_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.set_slice_args"]], "sigma_1 (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sigma_1"]], "sigma_2 (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sigma_2"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.uses_quantity"]], "w (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.w"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.without_units_for_data"]], "faucherkaspi2006velocitymaxwellian (class in gammapy.astro.population)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian"]], "__call__() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian static method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.evaluate"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.linear"]], "meta (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.prepare_outputs"]], "rename() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian class method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.rename"]], "render() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.render"]], "return_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.set_slice_args"]], "sigma (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sigma"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.without_units_for_data"]], "faucherspiral (class in gammapy.astro.population)": [[33, "gammapy.astro.population.FaucherSpiral"]], "__call__() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.__call__"]], "k (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.k"]], "r_0 (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.r_0"]], "radius() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.radius"]], "spiralarms (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.spiralarms"]], "theta() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.theta"]], "theta_0 (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.theta_0"]], "xy_position() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.xy_position"]], "logspiral (class in gammapy.astro.population)": [[34, "gammapy.astro.population.LogSpiral"]], "radius() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.radius"]], "theta() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.theta"]], "xy_position() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.xy_position"]], "b (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.B"]], "c (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.C"]], "lorimer2006 (class in gammapy.astro.population)": [[35, "gammapy.astro.population.Lorimer2006"]], "__call__() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.__call__"]], "amplitude (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.amplitude"]], "bbox_with_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bbox_with_units"]], "bounding_box (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bounding_box"]], "bounds (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bounds"]], "coerce_units() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.coerce_units"]], "col_fit_deriv (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.col_fit_deriv"]], "copy() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.copy"]], "cov_matrix (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.cov_matrix"]], "deepcopy() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.deepcopy"]], "eqcons (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.eqcons"]], "evaluate() (gammapy.astro.population.lorimer2006 static method)": [[35, "gammapy.astro.population.Lorimer2006.evaluate"]], "evolved (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.evolved"]], "fit_deriv (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fit_deriv"]], "fittable (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fittable"]], "fixed (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fixed"]], "get_bounding_box() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.get_bounding_box"]], "has_inverse() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.has_user_inverse"]], "ineqcons (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.ineqcons"]], "input_shape() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.input_shape"]], "input_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_strict"]], "inputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.inputs"]], "inverse (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.inverse"]], "linear (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.linear"]], "meta (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.meta"]], "model_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.model_constraints"]], "model_set_axis (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.model_set_axis"]], "n_inputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_inputs"]], "n_outputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_outputs"]], "n_submodels (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_submodels"]], "name (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.name"]], "output_units() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.output_units"]], "outputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.outputs"]], "param_names (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.param_names"]], "param_sets (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.param_sets"]], "parameter_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.parameter_constraints"]], "parameters (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.parameters"]], "prepare_inputs() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.prepare_outputs"]], "rename() (gammapy.astro.population.lorimer2006 class method)": [[35, "gammapy.astro.population.Lorimer2006.rename"]], "render() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.render"]], "return_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.return_units"]], "separable (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.separable"]], "set_slice_args() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.standard_broadcasting"]], "stds (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.stds"]], "strip_units_from_tree() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.sync_constraints"]], "tied (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.tied"]], "uses_quantity (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.without_units_for_data"]], "paczynski1990 (class in gammapy.astro.population)": [[36, "gammapy.astro.population.Paczynski1990"]], "__call__() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.__call__"]], "amplitude (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.amplitude"]], "bbox_with_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bbox_with_units"]], "bounding_box (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bounding_box"]], "bounds (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bounds"]], "coerce_units() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.coerce_units"]], "col_fit_deriv (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.col_fit_deriv"]], "copy() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.copy"]], "cov_matrix (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.cov_matrix"]], "deepcopy() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.deepcopy"]], "eqcons (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.eqcons"]], "evaluate() (gammapy.astro.population.paczynski1990 static method)": [[36, "gammapy.astro.population.Paczynski1990.evaluate"]], "evolved (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.evolved"]], "fit_deriv (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fit_deriv"]], "fittable (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fittable"]], "fixed (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fixed"]], "get_bounding_box() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.get_bounding_box"]], "has_inverse() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.has_user_inverse"]], "ineqcons (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.ineqcons"]], "input_shape() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.input_shape"]], "input_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_strict"]], "inputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.inputs"]], "inverse (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.inverse"]], "linear (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.linear"]], "meta (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.meta"]], "model_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.model_constraints"]], "model_set_axis (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.model_set_axis"]], "n_inputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_inputs"]], "n_outputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_outputs"]], "n_submodels (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_submodels"]], "name (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.name"]], "output_units() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.output_units"]], "outputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.outputs"]], "param_names (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.param_names"]], "param_sets (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.param_sets"]], "parameter_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.parameter_constraints"]], "parameters (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.parameters"]], "prepare_inputs() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.prepare_outputs"]], "r_exp (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.r_exp"]], "rename() (gammapy.astro.population.paczynski1990 class method)": [[36, "gammapy.astro.population.Paczynski1990.rename"]], "render() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.render"]], "return_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.return_units"]], "separable (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.separable"]], "set_slice_args() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.standard_broadcasting"]], "stds (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.stds"]], "strip_units_from_tree() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.sync_constraints"]], "tied (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.tied"]], "uses_quantity (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.without_units_for_data"]], "paczynski1990velocity (class in gammapy.astro.population)": [[37, "gammapy.astro.population.Paczynski1990Velocity"]], "__call__() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.__call__"]], "amplitude (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.amplitude"]], "bbox_with_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bbox_with_units"]], "bounding_box (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bounding_box"]], "bounds (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bounds"]], "coerce_units() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.coerce_units"]], "col_fit_deriv (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.col_fit_deriv"]], "copy() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.copy"]], "cov_matrix (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.cov_matrix"]], "deepcopy() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.deepcopy"]], "eqcons (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.eqcons"]], "evaluate() (gammapy.astro.population.paczynski1990velocity static method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.evaluate"]], "fit_deriv (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fit_deriv"]], "fittable (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fittable"]], "fixed (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fixed"]], "get_bounding_box() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.get_bounding_box"]], "has_inverse() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_user_inverse"]], "ineqcons (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.ineqcons"]], "input_shape() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_shape"]], "input_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_strict"]], "inputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.inputs"]], "inverse (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.inverse"]], "linear (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.linear"]], "meta (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.meta"]], "model_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.model_constraints"]], "model_set_axis (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.model_set_axis"]], "n_inputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_inputs"]], "n_outputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_outputs"]], "n_submodels (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_submodels"]], "name (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.name"]], "output_units() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.output_units"]], "outputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.outputs"]], "param_names (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.param_names"]], "param_sets (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.param_sets"]], "parameter_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.parameter_constraints"]], "parameters (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.parameters"]], "prepare_inputs() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.prepare_outputs"]], "rename() (gammapy.astro.population.paczynski1990velocity class method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.rename"]], "render() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.render"]], "return_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.return_units"]], "separable (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.separable"]], "set_slice_args() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.standard_broadcasting"]], "stds (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.stds"]], "strip_units_from_tree() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.sync_constraints"]], "tied (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.tied"]], "uses_quantity (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.uses_quantity"]], "v_0 (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.v_0"]], "with_units_from_data() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.without_units_for_data"]], "valleespiral (class in gammapy.astro.population)": [[38, "gammapy.astro.population.ValleeSpiral"]], "bar_radius (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.bar_radius"]], "m (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.m"]], "p (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.p"]], "r_0 (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.r_0"]], "r_sun (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.r_sun"]], "radius() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.radius"]], "spiralarms (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.spiralarms"]], "theta() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.theta"]], "theta_0 (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.theta_0"]], "xy_position() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.xy_position"]], "yusifovkucuk2004 (class in gammapy.astro.population)": [[39, "gammapy.astro.population.YusifovKucuk2004"]], "__call__() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.__call__"]], "a (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.a"]], "amplitude (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.amplitude"]], "b (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.b"]], "bbox_with_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bbox_with_units"]], "bounding_box (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bounding_box"]], "bounds (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bounds"]], "coerce_units() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.coerce_units"]], "col_fit_deriv (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.col_fit_deriv"]], "copy() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.copy"]], "cov_matrix (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.cov_matrix"]], "deepcopy() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.deepcopy"]], "eqcons (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.eqcons"]], "evaluate() (gammapy.astro.population.yusifovkucuk2004 static method)": [[39, "gammapy.astro.population.YusifovKucuk2004.evaluate"]], "evolved (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.evolved"]], "fit_deriv (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fit_deriv"]], "fittable (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fittable"]], "fixed (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fixed"]], "get_bounding_box() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.get_bounding_box"]], "has_inverse() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_user_inverse"]], "ineqcons (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.ineqcons"]], "input_shape() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_shape"]], "input_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_strict"]], "inputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.inputs"]], "inverse (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.inverse"]], "linear (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.linear"]], "meta (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.meta"]], "model_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.model_constraints"]], "model_set_axis (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.model_set_axis"]], "n_inputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_inputs"]], "n_outputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_outputs"]], "n_submodels (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_submodels"]], "name (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.name"]], "output_units() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.output_units"]], "outputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.outputs"]], "param_names (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.param_names"]], "param_sets (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.param_sets"]], "parameter_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.parameter_constraints"]], "parameters (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.parameters"]], "prepare_inputs() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.prepare_outputs"]], "r_1 (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.r_1"]], "rename() (gammapy.astro.population.yusifovkucuk2004 class method)": [[39, "gammapy.astro.population.YusifovKucuk2004.rename"]], "render() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.render"]], "return_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.return_units"]], "separable (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.separable"]], "set_slice_args() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.standard_broadcasting"]], "stds (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.stds"]], "strip_units_from_tree() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.sync_constraints"]], "tied (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.tied"]], "uses_quantity (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.without_units_for_data"]], "yusifovkucuk2004b (class in gammapy.astro.population)": [[40, "gammapy.astro.population.YusifovKucuk2004B"]], "__call__() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.__call__"]], "a (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.a"]], "amplitude (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.amplitude"]], "b (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.b"]], "bbox_with_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bbox_with_units"]], "bounding_box (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bounding_box"]], "bounds (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bounds"]], "coerce_units() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.coerce_units"]], "col_fit_deriv (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.col_fit_deriv"]], "copy() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.copy"]], "cov_matrix (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.cov_matrix"]], "deepcopy() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.deepcopy"]], "eqcons (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.eqcons"]], "evaluate() (gammapy.astro.population.yusifovkucuk2004b static method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.evaluate"]], "evolved (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.evolved"]], "fit_deriv (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fit_deriv"]], "fittable (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fittable"]], "fixed (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fixed"]], "get_bounding_box() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.get_bounding_box"]], "has_inverse() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_user_inverse"]], "ineqcons (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.ineqcons"]], "input_shape() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_shape"]], "input_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_strict"]], "inputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.inputs"]], "inverse (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.inverse"]], "linear (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.linear"]], "meta (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.meta"]], "model_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.model_constraints"]], "model_set_axis (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.model_set_axis"]], "n_inputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_inputs"]], "n_outputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_outputs"]], "n_submodels (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_submodels"]], "name (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.name"]], "output_units() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.output_units"]], "outputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.outputs"]], "param_names (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.param_names"]], "param_sets (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.param_sets"]], "parameter_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.parameter_constraints"]], "parameters (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.parameters"]], "prepare_inputs() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.prepare_outputs"]], "rename() (gammapy.astro.population.yusifovkucuk2004b class method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.rename"]], "render() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.render"]], "return_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.return_units"]], "separable (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.separable"]], "set_slice_args() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.standard_broadcasting"]], "stds (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.stds"]], "strip_units_from_tree() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.sync_constraints"]], "tied (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.tied"]], "uses_quantity (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.without_units_for_data"]], "add_observed_parameters() (in module gammapy.astro.population)": [[41, "gammapy.astro.population.add_observed_parameters"]], "add_pulsar_parameters() (in module gammapy.astro.population)": [[42, "gammapy.astro.population.add_pulsar_parameters"]], "add_pwn_parameters() (in module gammapy.astro.population)": [[43, "gammapy.astro.population.add_pwn_parameters"]], "add_snr_parameters() (in module gammapy.astro.population)": [[44, "gammapy.astro.population.add_snr_parameters"]], "make_base_catalog_galactic() (in module gammapy.astro.population)": [[45, "gammapy.astro.population.make_base_catalog_galactic"]], "make_catalog_random_positions_cube() (in module gammapy.astro.population)": [[46, "gammapy.astro.population.make_catalog_random_positions_cube"]], "make_catalog_random_positions_sphere() (in module gammapy.astro.population)": [[47, "gammapy.astro.population.make_catalog_random_positions_sphere"]], "radial_distributions (in module gammapy.astro.population)": [[48, "gammapy.astro.population.radial_distributions"]], "velocity_distributions (in module gammapy.astro.population)": [[49, "gammapy.astro.population.velocity_distributions"]], "pwn (class in gammapy.astro.source)": [[50, "gammapy.astro.source.PWN"]], "magnetic_field() (gammapy.astro.source.pwn method)": [[50, "gammapy.astro.source.PWN.magnetic_field"]], "radius() (gammapy.astro.source.pwn method)": [[50, "gammapy.astro.source.PWN.radius"]], "pulsar (class in gammapy.astro.source)": [[51, "gammapy.astro.source.Pulsar"]], "energy_integrated() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.energy_integrated"]], "luminosity_spindown() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.luminosity_spindown"]], "magnetic_field() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.magnetic_field"]], "period() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.period"]], "period_dot() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.period_dot"]], "tau() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.tau"]], "snr (class in gammapy.astro.source)": [[52, "gammapy.astro.source.SNR"]], "luminosity_tev() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.luminosity_tev"]], "radius() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.radius"]], "radius_inner() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.radius_inner"]], "sedov_taylor_begin (gammapy.astro.source.snr attribute)": [[52, "gammapy.astro.source.SNR.sedov_taylor_begin"]], "sedov_taylor_end (gammapy.astro.source.snr attribute)": [[52, "gammapy.astro.source.SNR.sedov_taylor_end"]], "snrtruelovemckee (class in gammapy.astro.source)": [[53, "gammapy.astro.source.SNRTrueloveMcKee"]], "luminosity_tev() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.luminosity_tev"]], "radius() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius"]], "radius_inner() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius_inner"]], "radius_reverse_shock() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius_reverse_shock"]], "sedov_taylor_begin (gammapy.astro.source.snrtruelovemckee attribute)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.sedov_taylor_begin"]], "sedov_taylor_end (gammapy.astro.source.snrtruelovemckee attribute)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.sedov_taylor_end"]], "simplepulsar (class in gammapy.astro.source)": [[54, "gammapy.astro.source.SimplePulsar"]], "luminosity_spindown (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.luminosity_spindown"]], "magnetic_field (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.magnetic_field"]], "tau (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.tau"]], "catalog_registry (in module gammapy.catalog)": [[55, "gammapy.catalog.CATALOG_REGISTRY"]], "sourcecatalog (class in gammapy.catalog)": [[56, "gammapy.catalog.SourceCatalog"]], "description() (gammapy.catalog.sourcecatalog class method)": [[56, "gammapy.catalog.SourceCatalog.description"]], "positions (gammapy.catalog.sourcecatalog attribute)": [[56, "gammapy.catalog.SourceCatalog.positions"]], "row_index() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.row_index"]], "source_name() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.source_name"]], "tag (gammapy.catalog.sourcecatalog attribute)": [[56, "gammapy.catalog.SourceCatalog.tag"]], "to_models() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.to_models"]], "sourcecatalog1lhaaso (class in gammapy.catalog)": [[57, "gammapy.catalog.SourceCatalog1LHAASO"]], "description (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.description"]], "positions (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.positions"]], "row_index() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.row_index"]], "source_name() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.source_name"]], "tag (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.tag"]], "to_models() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.to_models"]], "sourcecatalog2fhl (class in gammapy.catalog)": [[58, "gammapy.catalog.SourceCatalog2FHL"]], "description (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.description"]], "positions (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.positions"]], "row_index() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.source_name"]], "tag (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.tag"]], "to_models() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.to_models"]], "sourcecatalog2hwc (class in gammapy.catalog)": [[59, "gammapy.catalog.SourceCatalog2HWC"]], "description (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.description"]], "positions (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.positions"]], "row_index() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.row_index"]], "source_name() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.source_name"]], "tag (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.tag"]], "to_models() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.to_models"]], "sourcecatalog3fgl (class in gammapy.catalog)": [[60, "gammapy.catalog.SourceCatalog3FGL"]], "description (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.description"]], "positions (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.positions"]], "row_index() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.source_name"]], "tag (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.tag"]], "to_models() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.to_models"]], "sourcecatalog3fhl (class in gammapy.catalog)": [[61, "gammapy.catalog.SourceCatalog3FHL"]], "description (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.description"]], "positions (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.positions"]], "row_index() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.source_name"]], "tag (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.tag"]], "to_models() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.to_models"]], "sourcecatalog3hwc (class in gammapy.catalog)": [[62, "gammapy.catalog.SourceCatalog3HWC"]], "description (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.description"]], "positions (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.positions"]], "row_index() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.source_name"]], "tag (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.tag"]], "to_models() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.to_models"]], "sourcecatalog4fgl (class in gammapy.catalog)": [[63, "gammapy.catalog.SourceCatalog4FGL"]], "description (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.description"]], "positions (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.positions"]], "row_index() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.source_name"]], "tag (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.tag"]], "to_models() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.to_models"]], "sourcecataloggammacat (class in gammapy.catalog)": [[64, "gammapy.catalog.SourceCatalogGammaCat"]], "description (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.description"]], "positions (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.positions"]], "row_index() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.row_index"]], "source_name() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.source_name"]], "tag (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.tag"]], "to_models() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.to_models"]], "sourcecataloghgps (class in gammapy.catalog)": [[65, "gammapy.catalog.SourceCatalogHGPS"]], "description (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.description"]], "gaussian_component() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.gaussian_component"]], "large_scale_component (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.large_scale_component"]], "positions (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.positions"]], "row_index() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.row_index"]], "source_name() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.source_name"]], "table_associations (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_associations"]], "table_components (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_components"]], "table_identifications (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_identifications"]], "table_large_scale_component (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_large_scale_component"]], "tag (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.tag"]], "to_models() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.to_models"]], "sourcecataloglargescalehgps (class in gammapy.catalog)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS"]], "evaluate() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.evaluate"]], "peak_brightness() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_brightness"]], "peak_brightness_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_brightness_error"]], "peak_latitude() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_latitude"]], "peak_latitude_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_latitude_error"]], "width() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.width"]], "width_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.width_error"]], "sourcecatalogobject (class in gammapy.catalog)": [[67, "gammapy.catalog.SourceCatalogObject"]], "name (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.name"]], "position (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.position"]], "row_index (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.row_index"]], "sourcecatalogobject1lhaaso (class in gammapy.catalog)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO"]], "name (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.name"]], "position (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.position"]], "row_index (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.spectral_model"]], "sourcecatalogobject2fhl (class in gammapy.catalog)": [[69, "gammapy.catalog.SourceCatalogObject2FHL"]], "asso (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.is_pointlike"]], "name (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.name"]], "position (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.position"]], "row_index (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.spectral_model"]], "sourcecatalogobject2hwc (class in gammapy.catalog)": [[70, "gammapy.catalog.SourceCatalogObject2HWC"]], "info() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.info"]], "n_models (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.n_models"]], "name (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.name"]], "position (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.position"]], "row_index (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.spectral_model"]], "sourcecatalogobject3fgl (class in gammapy.catalog)": [[71, "gammapy.catalog.SourceCatalogObject3FGL"]], "asso (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.is_pointlike"]], "lightcurve() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.lightcurve"]], "name (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.name"]], "position (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.position"]], "row_index (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.spectral_model"]], "sourcecatalogobject3fhl (class in gammapy.catalog)": [[72, "gammapy.catalog.SourceCatalogObject3FHL"]], "asso (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.is_pointlike"]], "name (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.name"]], "position (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.position"]], "row_index (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.spectral_model"]], "sourcecatalogobject3hwc (class in gammapy.catalog)": [[73, "gammapy.catalog.SourceCatalogObject3HWC"]], "info() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.is_pointlike"]], "n_models (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.n_models"]], "name (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.name"]], "position (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.position"]], "row_index (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.spectral_model"]], "sourcecatalogobject4fgl (class in gammapy.catalog)": [[74, "gammapy.catalog.SourceCatalogObject4FGL"]], "asso (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.asso"]], "flux_points (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.is_pointlike"]], "lightcurve() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.lightcurve"]], "name (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.name"]], "position (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.position"]], "row_index (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.spectral_model"]], "sourcecatalogobjectgammacat (class in gammapy.catalog)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat"]], "flux_points (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.flux_points"]], "flux_points_table (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.info"]], "name (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.name"]], "position (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.position"]], "row_index (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.spectral_model"]], "sourcecatalogobjecthgps (class in gammapy.catalog)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS"]], "components_models() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.components_models"]], "energy_range (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.flux_points"]], "flux_points_table (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.info"]], "name (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.name"]], "position (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.position"]], "row_index (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.spectral_model"]], "sourcecatalogobjecthgpscomponent (class in gammapy.catalog)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent"]], "name (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.name"]], "position (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.position"]], "row_index (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.row_index"]], "spatial_model() (gammapy.catalog.sourcecatalogobjecthgpscomponent method)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.spatial_model"]], "default_hdu_table (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.DEFAULT_HDU_TABLE"]], "default_obs_table (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.DEFAULT_OBS_TABLE"]], "datastore (class in gammapy.data)": [[78, "gammapy.data.DataStore"]], "check() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.check"]], "copy_obs() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.copy_obs"]], "from_dir() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_dir"]], "from_events_files() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_events_files"]], "from_file() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_file"]], "get_observations() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.get_observations"]], "info() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.info"]], "obs() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.obs"]], "obs_ids (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.obs_ids"]], "eventlist (class in gammapy.data)": [[79, "gammapy.data.EventList"]], "altaz (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz"]], "altaz_frame (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz_frame"]], "altaz_from_table (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz_from_table"]], "check() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.check"]], "copy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.copy"]], "energy (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.energy"]], "from_stack() (gammapy.data.eventlist class method)": [[79, "gammapy.data.EventList.from_stack"]], "galactic (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.galactic"]], "galactic_median (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.galactic_median"]], "is_pointed_observation (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.is_pointed_observation"]], "map_coord() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.map_coord"]], "observation_dead_time_fraction (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_dead_time_fraction"]], "observation_live_time_duration (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_live_time_duration"]], "observation_time_duration (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_duration"]], "observation_time_start (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_start"]], "observation_time_stop (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_stop"]], "observatory_earth_location (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observatory_earth_location"]], "offset (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.offset"]], "offset_from_median (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.offset_from_median"]], "peek() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.peek"]], "plot_energy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_energy"]], "plot_energy_offset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_energy_offset"]], "plot_image() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_image"]], "plot_offset2_distribution() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_offset2_distribution"]], "plot_time() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_time"]], "pointing_radec (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.pointing_radec"]], "radec (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.radec"]], "read() (gammapy.data.eventlist class method)": [[79, "gammapy.data.EventList.read"]], "select_energy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_energy"]], "select_mask() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_mask"]], "select_offset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_offset"]], "select_parameter() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_parameter"]], "select_rad_max() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_rad_max"]], "select_region() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_region"]], "select_row_subset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_row_subset"]], "select_time() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_time"]], "stack() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.stack"]], "time (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.time"]], "time_ref (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.time_ref"]], "to_table_hdu() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.to_table_hdu"]], "write() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.write"]], "eventlistmetadata (class in gammapy.data)": [[80, "gammapy.data.EventListMetaData"]], "construct() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.construct"]], "copy() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.copy"]], "dict() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.dict"]], "from_header() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.from_header"]], "from_orm() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.from_orm"]], "json() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.json"]], "model_computed_fields (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_computed_fields"]], "model_config (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_config"]], "model_construct() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_construct"]], "model_copy() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_copy"]], "model_dump() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_dump"]], "model_dump_json() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_dump_json"]], "model_extra (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_extra"]], "model_fields (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_fields"]], "model_fields_set (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_fields_set"]], "model_json_schema() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_parametrized_name"]], "model_post_init() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_post_init"]], "model_rebuild() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_rebuild"]], "model_validate() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate"]], "model_validate_json() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate_json"]], "model_validate_strings() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate_strings"]], "parse_file() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_file"]], "parse_obj() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_obj"]], "parse_raw() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_raw"]], "schema() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.schema"]], "schema_json() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.schema_json"]], "tag (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.tag"]], "to_header() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.to_header"]], "to_yaml() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.to_yaml"]], "update_forward_refs() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.update_forward_refs"]], "validate() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.validate"]], "fixedpointinginfo (class in gammapy.data)": [[81, "gammapy.data.FixedPointingInfo"]], "fixed_altaz (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.fixed_altaz"]], "fixed_icrs (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.fixed_icrs"]], "from_fits_header() (gammapy.data.fixedpointinginfo class method)": [[81, "gammapy.data.FixedPointingInfo.from_fits_header"]], "get_altaz() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.get_altaz"]], "get_icrs() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.get_icrs"]], "mode (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.mode"]], "read() (gammapy.data.fixedpointinginfo class method)": [[81, "gammapy.data.FixedPointingInfo.read"]], "to_fits_header() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.to_fits_header"]], "gti (class in gammapy.data)": [[82, "gammapy.data.GTI"]], "copy() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.copy"]], "create() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.create"]], "delete_interval() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.delete_interval"]], "from_stack() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_stack"]], "from_table_hdu() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_table_hdu"]], "from_time_intervals() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_time_intervals"]], "group_table() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.group_table"]], "met_start (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.met_start"]], "met_stop (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.met_stop"]], "read() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.read"]], "select_time() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.select_time"]], "stack() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.stack"]], "time_delta (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_delta"]], "time_intervals (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_intervals"]], "time_ref (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_ref"]], "time_start (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_start"]], "time_stop (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_stop"]], "time_sum (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_sum"]], "to_table_hdu() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.to_table_hdu"]], "union() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.union"]], "write() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.write"]], "columnclass (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.ColumnClass"]], "hduindextable (class in gammapy.data)": [[83, "gammapy.data.HDUIndexTable"]], "valid_hdu_class (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.VALID_HDU_CLASS"]], "valid_hdu_type (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.VALID_HDU_TYPE"]], "add_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_column"]], "add_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_columns"]], "add_index() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_index"]], "add_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_row"]], "argsort() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.argsort"]], "as_array() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.as_array"]], "base_dir (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.base_dir"]], "colnames (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.colnames"]], "convert_bytestring_to_unicode() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.convert_bytestring_to_unicode"]], "convert_unicode_to_bytestring() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.convert_unicode_to_bytestring"]], "copy() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.copy"]], "dtype (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.dtype"]], "field() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.field"]], "filled() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.filled"]], "from_pandas() (gammapy.data.hduindextable class method)": [[83, "gammapy.data.HDUIndexTable.from_pandas"]], "group_by() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.group_by"]], "groups (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.groups"]], "has_masked_columns (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_masked_columns"]], "has_masked_values (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_masked_values"]], "has_mixin_columns (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_mixin_columns"]], "hdu_class_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.hdu_class_unique"]], "hdu_location() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.hdu_location"]], "hdu_type_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.hdu_type_unique"]], "iloc (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.iloc"]], "index_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.index_column"]], "index_mode() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.index_mode"]], "indices (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.indices"]], "info (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.info"]], "insert_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.insert_row"]], "items() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.items"]], "itercols() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.itercols"]], "iterrows() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.iterrows"]], "keep_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.keep_columns"]], "keys() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.keys"]], "loc (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.loc"]], "loc_indices (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.loc_indices"]], "location_info() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.location_info"]], "mask (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.mask"]], "masked (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.masked"]], "meta (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.meta"]], "more() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.more"]], "obs_id_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.obs_id_unique"]], "pformat() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pformat"]], "pformat_all() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pformat_all"]], "pprint() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pprint"]], "pprint_all() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pprint_all"]], "pprint_exclude_names (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.pprint_exclude_names"]], "pprint_include_names (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.pprint_include_names"]], "read() (gammapy.data.hduindextable class method)": [[83, "gammapy.data.HDUIndexTable.read"]], "remove_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_column"]], "remove_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_columns"]], "remove_indices() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_indices"]], "remove_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_row"]], "remove_rows() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_rows"]], "rename_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.rename_column"]], "rename_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.rename_columns"]], "replace_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.replace_column"]], "reverse() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.reverse"]], "round() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.round"]], "row_idx() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.row_idx"]], "show_in_browser() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.show_in_browser"]], "show_in_notebook() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.show_in_notebook"]], "sort() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.sort"]], "summary() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.summary"]], "to_pandas() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.to_pandas"]], "update() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.update"]], "values() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.values"]], "values_equal() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.values_equal"]], "write (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.write"]], "observation (class in gammapy.data)": [[84, "gammapy.data.Observation"]], "aeff (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.aeff"]], "available_hdus (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.available_hdus"]], "available_irfs (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.available_irfs"]], "bkg (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.bkg"]], "check() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.check"]], "copy() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.copy"]], "create() (gammapy.data.observation class method)": [[84, "gammapy.data.Observation.create"]], "edisp (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.edisp"]], "events (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.events"]], "get_pointing_altaz() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.get_pointing_altaz"]], "get_pointing_icrs() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.get_pointing_icrs"]], "gti (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.gti"]], "meta (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.meta"]], "muoneff (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.muoneff"]], "obs_info (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.obs_info"]], "observation_dead_time_fraction (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_dead_time_fraction"]], "observation_live_time_duration (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_live_time_duration"]], "observation_time_duration (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_time_duration"]], "observatory_earth_location (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observatory_earth_location"]], "peek() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.peek"]], "pointing (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.pointing"]], "psf (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.psf"]], "rad_max (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.rad_max"]], "read() (gammapy.data.observation class method)": [[84, "gammapy.data.Observation.read"]], "select_time() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.select_time"]], "target_radec (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.target_radec"]], "tmid (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tmid"]], "tstart (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tstart"]], "tstop (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tstop"]], "write() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.write"]], "event_filter_types (gammapy.data.observationfilter attribute)": [[85, "gammapy.data.ObservationFilter.EVENT_FILTER_TYPES"]], "observationfilter (class in gammapy.data)": [[85, "gammapy.data.ObservationFilter"]], "copy() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.copy"]], "filter_events() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.filter_events"]], "filter_gti() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.filter_gti"]], "livetime_fraction (gammapy.data.observationfilter attribute)": [[85, "gammapy.data.ObservationFilter.livetime_fraction"]], "columnclass (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.ColumnClass"]], "observationtable (class in gammapy.data)": [[86, "gammapy.data.ObservationTable"]], "add_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_column"]], "add_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_columns"]], "add_index() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_index"]], "add_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_row"]], "argsort() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.argsort"]], "as_array() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.as_array"]], "colnames (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.colnames"]], "convert_bytestring_to_unicode() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.convert_bytestring_to_unicode"]], "convert_unicode_to_bytestring() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.convert_unicode_to_bytestring"]], "copy() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.copy"]], "dtype (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.dtype"]], "field() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.field"]], "filled() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.filled"]], "from_pandas() (gammapy.data.observationtable class method)": [[86, "gammapy.data.ObservationTable.from_pandas"]], "group_by() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.group_by"]], "groups (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.groups"]], "has_masked_columns (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_masked_columns"]], "has_masked_values (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_masked_values"]], "has_mixin_columns (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_mixin_columns"]], "iloc (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.iloc"]], "index_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.index_column"]], "index_mode() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.index_mode"]], "indices (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.indices"]], "info (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.info"]], "insert_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.insert_row"]], "items() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.items"]], "itercols() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.itercols"]], "iterrows() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.iterrows"]], "keep_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.keep_columns"]], "keys() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.keys"]], "loc (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.loc"]], "loc_indices (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.loc_indices"]], "mask (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.mask"]], "masked (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.masked"]], "meta (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.meta"]], "more() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.more"]], "pformat() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pformat"]], "pformat_all() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pformat_all"]], "pointing_galactic (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pointing_galactic"]], "pointing_radec (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pointing_radec"]], "pprint() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pprint"]], "pprint_all() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pprint_all"]], "pprint_exclude_names (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pprint_exclude_names"]], "pprint_include_names (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pprint_include_names"]], "read() (gammapy.data.observationtable class method)": [[86, "gammapy.data.ObservationTable.read"]], "remove_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_column"]], "remove_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_columns"]], "remove_indices() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_indices"]], "remove_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_row"]], "remove_rows() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_rows"]], "rename_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.rename_column"]], "rename_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.rename_columns"]], "replace_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.replace_column"]], "reverse() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.reverse"]], "round() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.round"]], "select_obs_id() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_obs_id"]], "select_observations() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_observations"]], "select_range() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_range"]], "select_sky_circle() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_sky_circle"]], "select_time_range() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_time_range"]], "show_in_browser() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.show_in_browser"]], "show_in_notebook() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.show_in_notebook"]], "sort() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.sort"]], "summary() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.summary"]], "time_ref (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_ref"]], "time_start (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_start"]], "time_stop (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_stop"]], "to_pandas() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.to_pandas"]], "update() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.update"]], "values() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.values"]], "values_equal() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.values_equal"]], "write (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.write"]], "observations (class in gammapy.data)": [[87, "gammapy.data.Observations"]], "append() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.append"]], "clear() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.clear"]], "count() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.count"]], "extend() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.extend"]], "from_stack() (gammapy.data.observations class method)": [[87, "gammapy.data.Observations.from_stack"]], "group_by_label() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.group_by_label"]], "ids (gammapy.data.observations attribute)": [[87, "gammapy.data.Observations.ids"]], "in_memory_generator() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.in_memory_generator"]], "index() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.index"]], "insert() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.insert"]], "pop() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.pop"]], "remove() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.remove"]], "reverse() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.reverse"]], "select_time() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.select_time"]], "observationseventssampler (class in gammapy.data)": [[88, "gammapy.data.ObservationsEventsSampler"]], "n_jobs (gammapy.data.observationseventssampler attribute)": [[88, "gammapy.data.ObservationsEventsSampler.n_jobs"]], "parallel_backend (gammapy.data.observationseventssampler attribute)": [[88, "gammapy.data.ObservationsEventsSampler.parallel_backend"]], "run() (gammapy.data.observationseventssampler method)": [[88, "gammapy.data.ObservationsEventsSampler.run"]], "simulate_observation() (gammapy.data.observationseventssampler method)": [[88, "gammapy.data.ObservationsEventsSampler.simulate_observation"]], "pointinginfo (class in gammapy.data)": [[89, "gammapy.data.PointingInfo"]], "altaz (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz"]], "altaz_frame (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz_frame"]], "altaz_from_table (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz_from_table"]], "altaz_interpolate() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.altaz_interpolate"]], "duration (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.duration"]], "get_altaz() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.get_altaz"]], "get_icrs() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.get_icrs"]], "location (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.location"]], "radec (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.radec"]], "read() (gammapy.data.pointinginfo class method)": [[89, "gammapy.data.PointingInfo.read"]], "time (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.time"]], "time_ref (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.time_ref"]], "drift (gammapy.data.pointingmode attribute)": [[90, "gammapy.data.PointingMode.DRIFT"]], "pointing (gammapy.data.pointingmode attribute)": [[90, "gammapy.data.PointingMode.POINTING"]], "pointingmode (class in gammapy.data)": [[90, "gammapy.data.PointingMode"]], "get_irfs_features() (in module gammapy.data)": [[91, "gammapy.data.get_irfs_features"]], "observatory_locations (in module gammapy.data)": [[92, "gammapy.data.observatory_locations"]], "dataset_registry (in module gammapy.datasets)": [[93, "gammapy.datasets.DATASET_REGISTRY"]], "dataset (class in gammapy.datasets)": [[94, "gammapy.datasets.Dataset"]], "copy() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.copy"]], "mask (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.mask"]], "name (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.name"]], "stat_array() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.stat_array"]], "stat_sum() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.stat_sum"]], "tag (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.tag"]], "to_dict() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.to_dict"]], "datasets (class in gammapy.datasets)": [[95, "gammapy.datasets.Datasets"]], "append() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.append"]], "clear() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.clear"]], "contributes_to_stat (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.contributes_to_stat"]], "copy() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.copy"]], "count() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.count"]], "energy_axes_are_aligned (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.energy_axes_are_aligned"]], "energy_ranges (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.energy_ranges"]], "extend() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.extend"]], "gti (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.gti"]], "index() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.index"]], "info_table() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.info_table"]], "insert() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.insert"]], "is_all_same_energy_shape (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_energy_shape"]], "is_all_same_shape (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_shape"]], "is_all_same_type (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_type"]], "meta_table (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.meta_table"]], "models (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.models"]], "names (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.names"]], "parameters (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.parameters"]], "pop() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.pop"]], "read() (gammapy.datasets.datasets class method)": [[95, "gammapy.datasets.Datasets.read"]], "remove() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.remove"]], "reverse() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.reverse"]], "select_time() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.select_time"]], "slice_by_energy() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.slice_by_energy"]], "stack_reduce() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.stack_reduce"]], "stat_sum() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.stat_sum"]], "to_spectrum_datasets() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.to_spectrum_datasets"]], "write() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.write"]], "fluxpointsdataset (class in gammapy.datasets)": [[96, "gammapy.datasets.FluxPointsDataset"]], "copy() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.copy"]], "data_shape() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.data_shape"]], "flux_pred() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.flux_pred"]], "from_dict() (gammapy.datasets.fluxpointsdataset class method)": [[96, "gammapy.datasets.FluxPointsDataset.from_dict"]], "gti (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.gti"]], "mask (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.mask"]], "models (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.models"]], "name (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.name"]], "plot_fit() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_fit"]], "plot_residuals() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_residuals"]], "plot_spectrum() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_spectrum"]], "read() (gammapy.datasets.fluxpointsdataset class method)": [[96, "gammapy.datasets.FluxPointsDataset.read"]], "residuals() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.residuals"]], "stat_array() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.stat_array"]], "stat_sum() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.stat_sum"]], "stat_type (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.stat_type"]], "tag (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.tag"]], "to_dict() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.to_dict"]], "write() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.write"]], "mapdataset (class in gammapy.datasets)": [[97, "gammapy.datasets.MapDataset"]], "background (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.background"]], "background_model (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.background_model"]], "copy() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.copy"]], "counts (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.counts"]], "create() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.create"]], "cutout() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.cutout"]], "data_shape (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.data_shape"]], "downsample() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.downsample"]], "edisp (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.edisp"]], "energy_range (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range"]], "energy_range_fit (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_fit"]], "energy_range_safe (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_safe"]], "energy_range_total (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_total"]], "evaluators (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.evaluators"]], "excess (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.excess"]], "exposure (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.exposure"]], "fake() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.fake"]], "from_dict() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_dict"]], "from_geoms() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_geoms"]], "from_hdulist() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_hdulist"]], "geoms (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.geoms"]], "gti (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.gti"]], "info_dict() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.info_dict"]], "mask (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask"]], "mask_fit (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_fit"]], "mask_fit_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_fit_image"]], "mask_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_image"]], "mask_safe (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe"]], "mask_safe_edisp (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_psf"]], "meta (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.meta"]], "meta_table (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.meta_table"]], "models (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.models"]], "name (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.name"]], "npred() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred"]], "npred_background() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred_background"]], "npred_signal() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred_signal"]], "pad() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.pad"]], "peek() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.peek"]], "plot_residuals() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals_spectral"]], "psf (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.psf"]], "read() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.read"]], "resample_energy_axis() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.reset_data_cache"]], "residuals() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.residuals"]], "slice_by_energy() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.slice_by_idx"]], "stack() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stack"]], "stat_array() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stat_array"]], "stat_sum() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stat_sum"]], "stat_type (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.stat_type"]], "tag (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.tag"]], "to_dict() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_dict"]], "to_hdulist() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_hdulist"]], "to_image() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_image"]], "to_masked() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_masked"]], "to_region_map_dataset() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_spectrum_dataset"]], "write() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.write"]], "mapdataseteventsampler (class in gammapy.datasets)": [[98, "gammapy.datasets.MapDatasetEventSampler"]], "event_det_coords() (gammapy.datasets.mapdataseteventsampler static method)": [[98, "gammapy.datasets.MapDatasetEventSampler.event_det_coords"]], "event_list_meta() (gammapy.datasets.mapdataseteventsampler static method)": [[98, "gammapy.datasets.MapDatasetEventSampler.event_list_meta"]], "run() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.run"]], "sample_background() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_background"]], "sample_edisp() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_edisp"]], "sample_psf() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_psf"]], "sample_sources() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_sources"]], "mapdatasetmetadata (class in gammapy.datasets)": [[99, "gammapy.datasets.MapDatasetMetaData"]], "construct() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.construct"]], "copy() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.copy"]], "dict() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.dict"]], "from_header() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.from_header"]], "from_orm() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.from_orm"]], "json() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.json"]], "model_computed_fields (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_computed_fields"]], "model_config (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_config"]], "model_construct() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_construct"]], "model_copy() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_copy"]], "model_dump() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_dump"]], "model_dump_json() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_dump_json"]], "model_extra (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_extra"]], "model_fields (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_fields"]], "model_fields_set (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_fields_set"]], "model_json_schema() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_parametrized_name"]], "model_post_init() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_post_init"]], "model_rebuild() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_rebuild"]], "model_validate() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate"]], "model_validate_json() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate_json"]], "model_validate_strings() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate_strings"]], "parse_file() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_file"]], "parse_obj() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_obj"]], "parse_raw() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_raw"]], "schema() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.schema"]], "schema_json() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.schema_json"]], "stack() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.stack"]], "tag (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.tag"]], "to_header() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.to_header"]], "to_yaml() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.to_yaml"]], "update_forward_refs() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.update_forward_refs"]], "validate() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.validate"]], "mapdatasetonoff (class in gammapy.datasets)": [[100, "gammapy.datasets.MapDatasetOnOff"]], "alpha (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.alpha"]], "background (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.background"]], "background_model (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.background_model"]], "copy() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.copy"]], "counts (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.counts"]], "create() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.create"]], "cutout() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.cutout"]], "data_shape (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.data_shape"]], "downsample() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.downsample"]], "edisp (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.edisp"]], "energy_range (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range"]], "energy_range_fit (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_fit"]], "energy_range_safe (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_safe"]], "energy_range_total (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_total"]], "evaluators (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.evaluators"]], "excess (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.excess"]], "exposure (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.exposure"]], "fake() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.fake"]], "from_dict() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_dict"]], "from_geoms() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_geoms"]], "from_hdulist() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_hdulist"]], "from_map_dataset() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_map_dataset"]], "geoms (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.geoms"]], "gti (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.gti"]], "info_dict() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.info_dict"]], "mask (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask"]], "mask_fit (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_fit"]], "mask_fit_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_fit_image"]], "mask_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_image"]], "mask_safe (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe"]], "mask_safe_edisp (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_psf"]], "meta (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.meta"]], "meta_table (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.meta_table"]], "models (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.models"]], "name (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.name"]], "npred() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred"]], "npred_background() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_background"]], "npred_off() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_off"]], "npred_signal() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_signal"]], "pad() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.pad"]], "peek() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.peek"]], "plot_residuals() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals_spectral"]], "psf (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.psf"]], "read() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.read"]], "resample_energy_axis() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.reset_data_cache"]], "residuals() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.residuals"]], "slice_by_energy() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.slice_by_idx"]], "stack() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stack"]], "stat_array() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_array"]], "stat_sum() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_sum"]], "stat_type (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_type"]], "tag (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.tag"]], "to_dict() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_dict"]], "to_hdulist() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_hdulist"]], "to_image() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_image"]], "to_map_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_map_dataset"]], "to_masked() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_masked"]], "to_region_map_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_spectrum_dataset"]], "write() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.write"]], "ogipdatasetreader (class in gammapy.datasets)": [[101, "gammapy.datasets.OGIPDatasetReader"]], "get_filenames() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.get_filenames"]], "get_valid_path() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.get_valid_path"]], "read() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.read"]], "read_arf() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_arf"]], "read_bkg() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_bkg"]], "read_pha() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_pha"]], "read_rmf() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_rmf"]], "tag (gammapy.datasets.ogipdatasetreader attribute)": [[101, "gammapy.datasets.OGIPDatasetReader.tag"]], "ogipdatasetwriter (class in gammapy.datasets)": [[102, "gammapy.datasets.OGIPDatasetWriter"]], "get_filenames() (gammapy.datasets.ogipdatasetwriter static method)": [[102, "gammapy.datasets.OGIPDatasetWriter.get_filenames"]], "get_ogip_meta() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.get_ogip_meta"]], "tag (gammapy.datasets.ogipdatasetwriter attribute)": [[102, "gammapy.datasets.OGIPDatasetWriter.tag"]], "to_counts_hdulist() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.to_counts_hdulist"]], "write() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write"]], "write_arf() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_arf"]], "write_bkg() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_bkg"]], "write_pha() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_pha"]], "write_rmf() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_rmf"]], "observationeventsampler (class in gammapy.datasets)": [[103, "gammapy.datasets.ObservationEventSampler"]], "event_det_coords() (gammapy.datasets.observationeventsampler static method)": [[103, "gammapy.datasets.ObservationEventSampler.event_det_coords"]], "event_list_meta() (gammapy.datasets.observationeventsampler static method)": [[103, "gammapy.datasets.ObservationEventSampler.event_list_meta"]], "run() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.run"]], "sample_background() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_background"]], "sample_edisp() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_edisp"]], "sample_psf() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_psf"]], "sample_sources() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_sources"]], "spectrumdataset (class in gammapy.datasets)": [[104, "gammapy.datasets.SpectrumDataset"]], "background (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.background"]], "background_model (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.background_model"]], "copy() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.copy"]], "counts (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.counts"]], "create() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.create"]], "cutout() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.cutout"]], "data_shape (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.data_shape"]], "downsample() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.downsample"]], "edisp (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.edisp"]], "energy_range (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range"]], "energy_range_fit (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_fit"]], "energy_range_safe (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_safe"]], "energy_range_total (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_total"]], "evaluators (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.evaluators"]], "excess (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.excess"]], "exposure (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.exposure"]], "fake() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.fake"]], "from_dict() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_dict"]], "from_geoms() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_geoms"]], "from_hdulist() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_hdulist"]], "geoms (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.geoms"]], "gti (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.gti"]], "info_dict() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.info_dict"]], "mask (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask"]], "mask_fit (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_fit"]], "mask_fit_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_fit_image"]], "mask_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_image"]], "mask_safe (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe"]], "mask_safe_edisp (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_psf"]], "meta (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.meta"]], "meta_table (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.meta_table"]], "models (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.models"]], "name (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.name"]], "npred() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred"]], "npred_background() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred_background"]], "npred_signal() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred_signal"]], "pad() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.pad"]], "peek() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.peek"]], "plot_counts() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_counts"]], "plot_excess() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_excess"]], "plot_fit() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_fit"]], "plot_masks() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_masks"]], "plot_residuals() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals_spectral"]], "psf (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.psf"]], "read() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.read"]], "resample_energy_axis() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.reset_data_cache"]], "residuals() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.residuals"]], "slice_by_energy() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.slice_by_idx"]], "stack() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stack"]], "stat_array() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stat_array"]], "stat_sum() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stat_sum"]], "stat_type (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.stat_type"]], "tag (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.tag"]], "to_dict() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_dict"]], "to_hdulist() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_hdulist"]], "to_image() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_image"]], "to_masked() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_masked"]], "to_region_map_dataset() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_spectrum_dataset"]], "write() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.write"]], "spectrumdatasetonoff (class in gammapy.datasets)": [[105, "gammapy.datasets.SpectrumDatasetOnOff"]], "alpha (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.alpha"]], "background (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.background"]], "background_model (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.background_model"]], "copy() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.copy"]], "counts (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.counts"]], "create() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.create"]], "cutout() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.cutout"]], "data_shape (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.data_shape"]], "downsample() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.downsample"]], "edisp (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.edisp"]], "energy_range (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range"]], "energy_range_fit (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_fit"]], "energy_range_safe (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_safe"]], "energy_range_total (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_total"]], "evaluators (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.evaluators"]], "excess (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.excess"]], "exposure (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.exposure"]], "fake() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.fake"]], "from_dict() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_dict"]], "from_geoms() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_geoms"]], "from_hdulist() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_hdulist"]], "from_map_dataset() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_map_dataset"]], "from_spectrum_dataset() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_spectrum_dataset"]], "geoms (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.geoms"]], "gti (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.gti"]], "info_dict() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.info_dict"]], "mask (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask"]], "mask_fit (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_fit"]], "mask_fit_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_fit_image"]], "mask_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_image"]], "mask_safe (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe"]], "mask_safe_edisp (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_psf"]], "meta (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.meta"]], "meta_table (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.meta_table"]], "models (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.models"]], "name (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.name"]], "npred() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred"]], "npred_background() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_background"]], "npred_off() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_off"]], "npred_signal() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_signal"]], "pad() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.pad"]], "peek() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.peek"]], "plot_counts() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_counts"]], "plot_excess() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_excess"]], "plot_fit() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_fit"]], "plot_masks() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_masks"]], "plot_residuals() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals_spectral"]], "psf (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.psf"]], "read() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.read"]], "resample_energy_axis() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.reset_data_cache"]], "residuals() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.residuals"]], "slice_by_energy() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.slice_by_idx"]], "stack() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stack"]], "stat_array() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_array"]], "stat_sum() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_sum"]], "stat_type (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_type"]], "tag (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.tag"]], "to_dict() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_dict"]], "to_hdulist() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_hdulist"]], "to_image() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_image"]], "to_map_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_map_dataset"]], "to_masked() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_masked"]], "to_region_map_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_spectrum_dataset"]], "write() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.write"]], "apply_edisp() (in module gammapy.datasets)": [[106, "gammapy.datasets.apply_edisp"]], "create_map_dataset_from_observation() (in module gammapy.datasets)": [[107, "gammapy.datasets.create_map_dataset_from_observation"]], "create_map_dataset_geoms() (in module gammapy.datasets)": [[108, "gammapy.datasets.create_map_dataset_geoms"]], "split_dataset() (in module gammapy.datasets)": [[109, "gammapy.datasets.split_dataset"]], "apply_edisp() (in module gammapy.datasets.utils)": [[110, "gammapy.datasets.utils.apply_edisp"]], "split_dataset() (in module gammapy.datasets.utils)": [[111, "gammapy.datasets.utils.split_dataset"]], "asmoothmapestimator (class in gammapy.estimators)": [[112, "gammapy.estimators.ASmoothMapEstimator"]], "config_parameters (gammapy.estimators.asmoothmapestimator attribute)": [[112, "gammapy.estimators.ASmoothMapEstimator.config_parameters"]], "copy() (gammapy.estimators.asmoothmapestimator method)": [[112, "gammapy.estimators.ASmoothMapEstimator.copy"]], "estimate_maps() (gammapy.estimators.asmoothmapestimator method)": [[112, "gammapy.estimators.ASmoothMapEstimator.estimate_maps"]], "get_kernels() (gammapy.estimators.asmoothmapestimator method)": [[112, "gammapy.estimators.ASmoothMapEstimator.get_kernels"]], "get_scales() (gammapy.estimators.asmoothmapestimator static method)": [[112, "gammapy.estimators.ASmoothMapEstimator.get_scales"]], "run() (gammapy.estimators.asmoothmapestimator method)": [[112, "gammapy.estimators.ASmoothMapEstimator.run"]], "selection_all() (gammapy.estimators.asmoothmapestimator method)": [[112, "gammapy.estimators.ASmoothMapEstimator.selection_all"]], "selection_optional (gammapy.estimators.asmoothmapestimator attribute)": [[112, "gammapy.estimators.ASmoothMapEstimator.selection_optional"]], "tag (gammapy.estimators.asmoothmapestimator attribute)": [[112, "gammapy.estimators.ASmoothMapEstimator.tag"]], "estimator_registry (in module gammapy.estimators)": [[113, "gammapy.estimators.ESTIMATOR_REGISTRY"]], "energydependentmorphologyestimator (class in gammapy.estimators)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator"]], "config_parameters (gammapy.estimators.energydependentmorphologyestimator attribute)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.config_parameters"]], "copy() (gammapy.estimators.energydependentmorphologyestimator method)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.copy"]], "estimate_energy_dependence() (gammapy.estimators.energydependentmorphologyestimator method)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.estimate_energy_dependence"]], "run() (gammapy.estimators.energydependentmorphologyestimator method)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.run"]], "selection_optional (gammapy.estimators.energydependentmorphologyestimator attribute)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.selection_optional"]], "tag (gammapy.estimators.energydependentmorphologyestimator attribute)": [[114, "gammapy.estimators.EnergyDependentMorphologyEstimator.tag"]], "estimator (class in gammapy.estimators)": [[115, "gammapy.estimators.Estimator"]], "config_parameters (gammapy.estimators.estimator attribute)": [[115, "gammapy.estimators.Estimator.config_parameters"]], "copy() (gammapy.estimators.estimator method)": [[115, "gammapy.estimators.Estimator.copy"]], "run() (gammapy.estimators.estimator method)": [[115, "gammapy.estimators.Estimator.run"]], "selection_optional (gammapy.estimators.estimator attribute)": [[115, "gammapy.estimators.Estimator.selection_optional"]], "tag (gammapy.estimators.estimator attribute)": [[115, "gammapy.estimators.Estimator.tag"]], "excessmapestimator (class in gammapy.estimators)": [[116, "gammapy.estimators.ExcessMapEstimator"]], "config_parameters (gammapy.estimators.excessmapestimator attribute)": [[116, "gammapy.estimators.ExcessMapEstimator.config_parameters"]], "copy() (gammapy.estimators.excessmapestimator method)": [[116, "gammapy.estimators.ExcessMapEstimator.copy"]], "correlation_radius (gammapy.estimators.excessmapestimator attribute)": [[116, "gammapy.estimators.ExcessMapEstimator.correlation_radius"]], "estimate_excess_map() (gammapy.estimators.excessmapestimator method)": [[116, "gammapy.estimators.ExcessMapEstimator.estimate_excess_map"]], "estimate_exposure_reco_energy() (gammapy.estimators.excessmapestimator method)": [[116, "gammapy.estimators.ExcessMapEstimator.estimate_exposure_reco_energy"]], "estimate_kernel() (gammapy.estimators.excessmapestimator method)": [[116, "gammapy.estimators.ExcessMapEstimator.estimate_kernel"]], "estimate_mask_default() (gammapy.estimators.excessmapestimator static method)": [[116, "gammapy.estimators.ExcessMapEstimator.estimate_mask_default"]], "run() (gammapy.estimators.excessmapestimator method)": [[116, "gammapy.estimators.ExcessMapEstimator.run"]], "selection_optional (gammapy.estimators.excessmapestimator attribute)": [[116, "gammapy.estimators.ExcessMapEstimator.selection_optional"]], "tag (gammapy.estimators.excessmapestimator attribute)": [[116, "gammapy.estimators.ExcessMapEstimator.tag"]], "fluxmaps (class in gammapy.estimators)": [[117, "gammapy.estimators.FluxMaps"]], "all_quantities() (gammapy.estimators.fluxmaps static method)": [[117, "gammapy.estimators.FluxMaps.all_quantities"]], "available_quantities (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.available_quantities"]], "counts (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.counts"]], "dnde (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde"]], "dnde_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde_err"]], "dnde_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde_errn"]], "dnde_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde_errp"]], "dnde_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde_ref"]], "dnde_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.dnde_ul"]], "e2dnde (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde"]], "e2dnde_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde_err"]], "e2dnde_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde_errn"]], "e2dnde_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde_errp"]], "e2dnde_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde_ref"]], "e2dnde_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.e2dnde_ul"]], "eflux (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux"]], "eflux_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux_err"]], "eflux_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux_errn"]], "eflux_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux_errp"]], "eflux_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux_ref"]], "eflux_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.eflux_ul"]], "energy_axis (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.energy_axis"]], "energy_max (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.energy_max"]], "energy_min (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.energy_min"]], "energy_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.energy_ref"]], "filter_success_nan (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.filter_success_nan"]], "flux (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux"]], "flux_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_err"]], "flux_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_errn"]], "flux_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_errp"]], "flux_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_ref"]], "flux_sensitivity (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_sensitivity"]], "flux_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.flux_ul"]], "from_hdulist() (gammapy.estimators.fluxmaps class method)": [[117, "gammapy.estimators.FluxMaps.from_hdulist"]], "from_maps() (gammapy.estimators.fluxmaps class method)": [[117, "gammapy.estimators.FluxMaps.from_maps"]], "from_stack() (gammapy.estimators.fluxmaps class method)": [[117, "gammapy.estimators.FluxMaps.from_stack"]], "geom (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.geom"]], "get_flux_points() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.get_flux_points"]], "has_any_ts (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.has_any_ts"]], "has_stat_profiles (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.has_stat_profiles"]], "has_success (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.has_success"]], "has_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.has_ul"]], "is_convertible_to_flux_sed_type (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.is_convertible_to_flux_sed_type"]], "is_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.is_ul"]], "iter_by_axis() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.iter_by_axis"]], "n_dof (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.n_dof"]], "n_sigma (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.n_sigma"]], "n_sigma_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.n_sigma_ul"]], "niter (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.niter"]], "norm (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm"]], "norm_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm_err"]], "norm_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm_errn"]], "norm_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm_errp"]], "norm_sensitivity (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm_sensitivity"]], "norm_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.norm_ul"]], "npred (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred"]], "npred_background (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_background"]], "npred_excess (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess"]], "npred_excess_err (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess_err"]], "npred_excess_errn (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess_errn"]], "npred_excess_errp (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess_errp"]], "npred_excess_ref (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess_ref"]], "npred_excess_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.npred_excess_ul"]], "read() (gammapy.estimators.fluxmaps class method)": [[117, "gammapy.estimators.FluxMaps.read"]], "reference_model (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.reference_model"]], "reference_model_default (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.reference_model_default"]], "reference_spectral_model (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.reference_spectral_model"]], "sed_type_init (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.sed_type_init"]], "sed_type_plot_default (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.sed_type_plot_default"]], "slice_by_coord() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.slice_by_coord"]], "slice_by_energy() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.slice_by_energy"]], "slice_by_idx() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.slice_by_idx"]], "slice_by_time() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.slice_by_time"]], "sqrt_ts (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.sqrt_ts"]], "sqrt_ts_threshold_ul (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.sqrt_ts_threshold_ul"]], "stat (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.stat"]], "stat_null (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.stat_null"]], "stat_scan (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.stat_scan"]], "success (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.success"]], "to_hdulist() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.to_hdulist"]], "to_maps() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.to_maps"]], "ts (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.ts"]], "ts_scan (gammapy.estimators.fluxmaps attribute)": [[117, "gammapy.estimators.FluxMaps.ts_scan"]], "write() (gammapy.estimators.fluxmaps method)": [[117, "gammapy.estimators.FluxMaps.write"]], "fluxmetadata (class in gammapy.estimators)": [[118, "gammapy.estimators.FluxMetaData"]], "construct() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.construct"]], "copy() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.copy"]], "dict() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.dict"]], "from_header() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.from_header"]], "from_orm() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.from_orm"]], "json() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.json"]], "model_computed_fields (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.model_computed_fields"]], "model_config (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.model_config"]], "model_construct() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_construct"]], "model_copy() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.model_copy"]], "model_dump() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.model_dump"]], "model_dump_json() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.model_dump_json"]], "model_extra (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.model_extra"]], "model_fields (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.model_fields"]], "model_fields_set (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.model_fields_set"]], "model_json_schema() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_parametrized_name"]], "model_post_init() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.model_post_init"]], "model_rebuild() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_rebuild"]], "model_validate() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_validate"]], "model_validate_json() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_validate_json"]], "model_validate_strings() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.model_validate_strings"]], "parse_file() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.parse_file"]], "parse_obj() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.parse_obj"]], "parse_raw() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.parse_raw"]], "schema() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.schema"]], "schema_json() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.schema_json"]], "tag (gammapy.estimators.fluxmetadata attribute)": [[118, "gammapy.estimators.FluxMetaData.tag"]], "to_header() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.to_header"]], "to_yaml() (gammapy.estimators.fluxmetadata method)": [[118, "gammapy.estimators.FluxMetaData.to_yaml"]], "update_forward_refs() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.update_forward_refs"]], "validate() (gammapy.estimators.fluxmetadata class method)": [[118, "gammapy.estimators.FluxMetaData.validate"]], "fluxpoints (class in gammapy.estimators)": [[119, "gammapy.estimators.FluxPoints"]], "all_quantities() (gammapy.estimators.fluxpoints static method)": [[119, "gammapy.estimators.FluxPoints.all_quantities"]], "available_quantities (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.available_quantities"]], "counts (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.counts"]], "dnde (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde"]], "dnde_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde_err"]], "dnde_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde_errn"]], "dnde_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde_errp"]], "dnde_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde_ref"]], "dnde_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.dnde_ul"]], "e2dnde (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde"]], "e2dnde_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde_err"]], "e2dnde_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde_errn"]], "e2dnde_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde_errp"]], "e2dnde_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde_ref"]], "e2dnde_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.e2dnde_ul"]], "eflux (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux"]], "eflux_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux_err"]], "eflux_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux_errn"]], "eflux_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux_errp"]], "eflux_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux_ref"]], "eflux_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.eflux_ul"]], "energy_axis (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.energy_axis"]], "energy_max (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.energy_max"]], "energy_min (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.energy_min"]], "energy_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.energy_ref"]], "filter_success_nan (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.filter_success_nan"]], "flux (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux"]], "flux_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_err"]], "flux_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_errn"]], "flux_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_errp"]], "flux_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_ref"]], "flux_sensitivity (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_sensitivity"]], "flux_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.flux_ul"]], "from_hdulist() (gammapy.estimators.fluxpoints class method)": [[119, "gammapy.estimators.FluxPoints.from_hdulist"]], "from_maps() (gammapy.estimators.fluxpoints class method)": [[119, "gammapy.estimators.FluxPoints.from_maps"]], "from_stack() (gammapy.estimators.fluxpoints class method)": [[119, "gammapy.estimators.FluxPoints.from_stack"]], "from_table() (gammapy.estimators.fluxpoints class method)": [[119, "gammapy.estimators.FluxPoints.from_table"]], "geom (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.geom"]], "get_flux_points() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.get_flux_points"]], "has_any_ts (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.has_any_ts"]], "has_stat_profiles (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.has_stat_profiles"]], "has_success (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.has_success"]], "has_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.has_ul"]], "is_convertible_to_flux_sed_type (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.is_convertible_to_flux_sed_type"]], "is_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.is_ul"]], "iter_by_axis() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.iter_by_axis"]], "n_dof (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.n_dof"]], "n_sigma (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.n_sigma"]], "n_sigma_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.n_sigma_ul"]], "niter (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.niter"]], "norm (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm"]], "norm_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm_err"]], "norm_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm_errn"]], "norm_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm_errp"]], "norm_sensitivity (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm_sensitivity"]], "norm_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.norm_ul"]], "npred (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred"]], "npred_background (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_background"]], "npred_excess (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess"]], "npred_excess_err (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess_err"]], "npred_excess_errn (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess_errn"]], "npred_excess_errp (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess_errp"]], "npred_excess_ref (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess_ref"]], "npred_excess_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.npred_excess_ul"]], "plot() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.plot"]], "plot_ts_profiles() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.plot_ts_profiles"]], "read() (gammapy.estimators.fluxpoints class method)": [[119, "gammapy.estimators.FluxPoints.read"]], "recompute_ul() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.recompute_ul"]], "reference_model (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.reference_model"]], "reference_model_default (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.reference_model_default"]], "reference_spectral_model (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.reference_spectral_model"]], "resample_axis() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.resample_axis"]], "sed_type_init (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.sed_type_init"]], "sed_type_plot_default (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.sed_type_plot_default"]], "slice_by_coord() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.slice_by_coord"]], "slice_by_energy() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.slice_by_energy"]], "slice_by_idx() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.slice_by_idx"]], "slice_by_time() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.slice_by_time"]], "sqrt_ts (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.sqrt_ts"]], "sqrt_ts_threshold_ul (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.sqrt_ts_threshold_ul"]], "stat (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.stat"]], "stat_null (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.stat_null"]], "stat_scan (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.stat_scan"]], "success (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.success"]], "to_hdulist() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.to_hdulist"]], "to_maps() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.to_maps"]], "to_table() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.to_table"]], "ts (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.ts"]], "ts_scan (gammapy.estimators.fluxpoints attribute)": [[119, "gammapy.estimators.FluxPoints.ts_scan"]], "write() (gammapy.estimators.fluxpoints method)": [[119, "gammapy.estimators.FluxPoints.write"]], "fluxpointsestimator (class in gammapy.estimators)": [[120, "gammapy.estimators.FluxPointsEstimator"]], "config_parameters (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.config_parameters"]], "copy() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.fluxpointsestimator static method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.fluxpointsestimator static method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.estimate_ul"]], "get_scale_model() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.n_jobs"]], "norm_max (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.norm_max"]], "norm_min (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.norm_min"]], "norm_n_values (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.norm_n_values"]], "norm_values (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.norm_values"]], "parallel_backend (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.parallel_backend"]], "run() (gammapy.estimators.fluxpointsestimator method)": [[120, "gammapy.estimators.FluxPointsEstimator.run"]], "selection_optional (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.selection_optional"]], "tag (gammapy.estimators.fluxpointsestimator attribute)": [[120, "gammapy.estimators.FluxPointsEstimator.tag"]], "fluxprofileestimator (class in gammapy.estimators)": [[121, "gammapy.estimators.FluxProfileEstimator"]], "config_parameters (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.config_parameters"]], "copy() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.fluxprofileestimator static method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.fluxprofileestimator static method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.estimate_ul"]], "get_scale_model() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.n_jobs"]], "norm_max (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.norm_max"]], "norm_min (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.norm_min"]], "norm_n_values (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.norm_n_values"]], "norm_values (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.norm_values"]], "parallel_backend (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.parallel_backend"]], "projected_distance_axis (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.projected_distance_axis"]], "run() (gammapy.estimators.fluxprofileestimator method)": [[121, "gammapy.estimators.FluxProfileEstimator.run"]], "selection_optional (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.selection_optional"]], "tag (gammapy.estimators.fluxprofileestimator attribute)": [[121, "gammapy.estimators.FluxProfileEstimator.tag"]], "imageprofile (class in gammapy.estimators)": [[122, "gammapy.estimators.ImageProfile"]], "normalize() (gammapy.estimators.imageprofile method)": [[122, "gammapy.estimators.ImageProfile.normalize"]], "peek() (gammapy.estimators.imageprofile method)": [[122, "gammapy.estimators.ImageProfile.peek"]], "plot() (gammapy.estimators.imageprofile method)": [[122, "gammapy.estimators.ImageProfile.plot"]], "plot_err() (gammapy.estimators.imageprofile method)": [[122, "gammapy.estimators.ImageProfile.plot_err"]], "profile (gammapy.estimators.imageprofile attribute)": [[122, "gammapy.estimators.ImageProfile.profile"]], "profile_err (gammapy.estimators.imageprofile attribute)": [[122, "gammapy.estimators.ImageProfile.profile_err"]], "smooth() (gammapy.estimators.imageprofile method)": [[122, "gammapy.estimators.ImageProfile.smooth"]], "x_max (gammapy.estimators.imageprofile attribute)": [[122, "gammapy.estimators.ImageProfile.x_max"]], "x_min (gammapy.estimators.imageprofile attribute)": [[122, "gammapy.estimators.ImageProfile.x_min"]], "x_ref (gammapy.estimators.imageprofile attribute)": [[122, "gammapy.estimators.ImageProfile.x_ref"]], "imageprofileestimator (class in gammapy.estimators)": [[123, "gammapy.estimators.ImageProfileEstimator"]], "config_parameters (gammapy.estimators.imageprofileestimator attribute)": [[123, "gammapy.estimators.ImageProfileEstimator.config_parameters"]], "copy() (gammapy.estimators.imageprofileestimator method)": [[123, "gammapy.estimators.ImageProfileEstimator.copy"]], "run() (gammapy.estimators.imageprofileestimator method)": [[123, "gammapy.estimators.ImageProfileEstimator.run"]], "selection_optional (gammapy.estimators.imageprofileestimator attribute)": [[123, "gammapy.estimators.ImageProfileEstimator.selection_optional"]], "tag (gammapy.estimators.imageprofileestimator attribute)": [[123, "gammapy.estimators.ImageProfileEstimator.tag"]], "lightcurveestimator (class in gammapy.estimators)": [[124, "gammapy.estimators.LightCurveEstimator"]], "config_parameters (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.config_parameters"]], "copy() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.lightcurveestimator static method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.lightcurveestimator static method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_scan"]], "estimate_time_bin_flux() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_time_bin_flux"]], "estimate_ts() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.estimate_ul"]], "expand_map() (gammapy.estimators.lightcurveestimator static method)": [[124, "gammapy.estimators.LightCurveEstimator.expand_map"]], "get_scale_model() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.n_jobs"]], "norm_max (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.norm_max"]], "norm_min (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.norm_min"]], "norm_n_values (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.norm_n_values"]], "norm_values (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.norm_values"]], "parallel_backend (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.parallel_backend"]], "run() (gammapy.estimators.lightcurveestimator method)": [[124, "gammapy.estimators.LightCurveEstimator.run"]], "selection_optional (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.selection_optional"]], "tag (gammapy.estimators.lightcurveestimator attribute)": [[124, "gammapy.estimators.LightCurveEstimator.tag"]], "parameterestimator (class in gammapy.estimators)": [[125, "gammapy.estimators.ParameterEstimator"]], "config_parameters (gammapy.estimators.parameterestimator attribute)": [[125, "gammapy.estimators.ParameterEstimator.config_parameters"]], "copy() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.parameterestimator static method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_errn_errp"]], "estimate_npred() (gammapy.estimators.parameterestimator static method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_npred"]], "estimate_scan() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.estimate_ul"]], "run() (gammapy.estimators.parameterestimator method)": [[125, "gammapy.estimators.ParameterEstimator.run"]], "selection_optional (gammapy.estimators.parameterestimator attribute)": [[125, "gammapy.estimators.ParameterEstimator.selection_optional"]], "tag (gammapy.estimators.parameterestimator attribute)": [[125, "gammapy.estimators.ParameterEstimator.tag"]], "sensitivityestimator (class in gammapy.estimators)": [[126, "gammapy.estimators.SensitivityEstimator"]], "config_parameters (gammapy.estimators.sensitivityestimator attribute)": [[126, "gammapy.estimators.SensitivityEstimator.config_parameters"]], "copy() (gammapy.estimators.sensitivityestimator method)": [[126, "gammapy.estimators.SensitivityEstimator.copy"]], "estimate_min_e2dnde() (gammapy.estimators.sensitivityestimator method)": [[126, "gammapy.estimators.SensitivityEstimator.estimate_min_e2dnde"]], "estimate_min_excess() (gammapy.estimators.sensitivityestimator method)": [[126, "gammapy.estimators.SensitivityEstimator.estimate_min_excess"]], "run() (gammapy.estimators.sensitivityestimator method)": [[126, "gammapy.estimators.SensitivityEstimator.run"]], "selection_optional (gammapy.estimators.sensitivityestimator attribute)": [[126, "gammapy.estimators.SensitivityEstimator.selection_optional"]], "tag (gammapy.estimators.sensitivityestimator attribute)": [[126, "gammapy.estimators.SensitivityEstimator.tag"]], "tsmapestimator (class in gammapy.estimators)": [[127, "gammapy.estimators.TSMapEstimator"]], "config_parameters (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.config_parameters"]], "copy() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.copy"]], "estimate_fit_input_maps() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_fit_input_maps"]], "estimate_flux_default() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_flux_default"]], "estimate_flux_map() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_flux_map"]], "estimate_kernel() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_kernel"]], "estimate_mask_default() (gammapy.estimators.tsmapestimator static method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_mask_default"]], "estimate_pad_width() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.estimate_pad_width"]], "n_jobs (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.n_jobs"]], "parallel_backend (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.parallel_backend"]], "run() (gammapy.estimators.tsmapestimator method)": [[127, "gammapy.estimators.TSMapEstimator.run"]], "selection_all (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.selection_all"]], "selection_optional (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.selection_optional"]], "tag (gammapy.estimators.tsmapestimator attribute)": [[127, "gammapy.estimators.TSMapEstimator.tag"]], "compute_lightcurve_doublingtime() (in module gammapy.estimators.utils)": [[128, "gammapy.estimators.utils.compute_lightcurve_doublingtime"]], "compute_lightcurve_fpp() (in module gammapy.estimators.utils)": [[129, "gammapy.estimators.utils.compute_lightcurve_fpp"]], "compute_lightcurve_fvar() (in module gammapy.estimators.utils)": [[130, "gammapy.estimators.utils.compute_lightcurve_fvar"]], "estimate_exposure_reco_energy() (in module gammapy.estimators.utils)": [[131, "gammapy.estimators.utils.estimate_exposure_reco_energy"]], "find_peaks() (in module gammapy.estimators.utils)": [[132, "gammapy.estimators.utils.find_peaks"]], "find_peaks_in_flux_map() (in module gammapy.estimators.utils)": [[133, "gammapy.estimators.utils.find_peaks_in_flux_map"]], "get_rebinned_axis() (in module gammapy.estimators.utils)": [[134, "gammapy.estimators.utils.get_rebinned_axis"]], "resample_energy_edges() (in module gammapy.estimators.utils)": [[135, "gammapy.estimators.utils.resample_energy_edges"]], "background2d (class in gammapy.irf)": [[136, "gammapy.irf.Background2D"]], "axes (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.axes"]], "cumsum() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.cumsum"]], "data (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.data"]], "default_interp_kwargs (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.default_interp_kwargs"]], "default_unit (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.default_unit"]], "evaluate() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.evaluate"]], "fov_alignment (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.fov_alignment"]], "from_hdulist() (gammapy.irf.background2d class method)": [[136, "gammapy.irf.Background2D.from_hdulist"]], "from_table() (gammapy.irf.background2d class method)": [[136, "gammapy.irf.Background2D.from_table"]], "has_offset_axis (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.has_offset_axis"]], "integral() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.integral"]], "integrate_log_log() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.interp_missing_data"]], "is_allclose() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.is_allclose"]], "is_pointlike (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.is_pointlike"]], "normalize() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.normalize"]], "pad() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.pad"]], "peek() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.peek"]], "plot() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.plot"]], "plot_at_energy() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.plot_at_energy"]], "plot_energy_dependence() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.plot_energy_dependence"]], "plot_offset_dependence() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.plot_offset_dependence"]], "plot_spectrum() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.plot_spectrum"]], "quantity (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.quantity"]], "read() (gammapy.irf.background2d class method)": [[136, "gammapy.irf.Background2D.read"]], "required_axes (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.required_axes"]], "slice_by_idx() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.slice_by_idx"]], "tag (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.tag"]], "to_3d() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.to_3d"]], "to_hdulist() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.to_hdulist"]], "to_table() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.to_table"]], "to_table_hdu() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.to_table_hdu"]], "to_unit() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.to_unit"]], "unit (gammapy.irf.background2d attribute)": [[136, "gammapy.irf.Background2D.unit"]], "write() (gammapy.irf.background2d method)": [[136, "gammapy.irf.Background2D.write"]], "background3d (class in gammapy.irf)": [[137, "gammapy.irf.Background3D"]], "axes (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.axes"]], "cumsum() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.cumsum"]], "data (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.data"]], "default_interp_kwargs (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.default_interp_kwargs"]], "default_unit (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.default_unit"]], "evaluate() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.evaluate"]], "fov_alignment (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.fov_alignment"]], "from_hdulist() (gammapy.irf.background3d class method)": [[137, "gammapy.irf.Background3D.from_hdulist"]], "from_table() (gammapy.irf.background3d class method)": [[137, "gammapy.irf.Background3D.from_table"]], "has_offset_axis (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.has_offset_axis"]], "integral() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.integral"]], "integrate_log_log() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.interp_missing_data"]], "is_allclose() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.is_allclose"]], "is_pointlike (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.is_pointlike"]], "normalize() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.normalize"]], "pad() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.pad"]], "peek() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.peek"]], "plot_at_energy() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.plot_at_energy"]], "quantity (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.quantity"]], "read() (gammapy.irf.background3d class method)": [[137, "gammapy.irf.Background3D.read"]], "required_axes (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.required_axes"]], "slice_by_idx() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.slice_by_idx"]], "tag (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.tag"]], "to_2d() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.to_2d"]], "to_hdulist() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.to_hdulist"]], "to_table() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.to_table"]], "to_table_hdu() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.to_table_hdu"]], "to_unit() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.to_unit"]], "unit (gammapy.irf.background3d attribute)": [[137, "gammapy.irf.Background3D.unit"]], "write() (gammapy.irf.background3d method)": [[137, "gammapy.irf.Background3D.write"]], "backgroundirf (class in gammapy.irf)": [[138, "gammapy.irf.BackgroundIRF"]], "axes (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.axes"]], "cumsum() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.cumsum"]], "data (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.data"]], "default_interp_kwargs (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.default_interp_kwargs"]], "evaluate() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.evaluate"]], "fov_alignment (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.fov_alignment"]], "from_hdulist() (gammapy.irf.backgroundirf class method)": [[138, "gammapy.irf.BackgroundIRF.from_hdulist"]], "from_table() (gammapy.irf.backgroundirf class method)": [[138, "gammapy.irf.BackgroundIRF.from_table"]], "has_offset_axis (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.has_offset_axis"]], "integral() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.integral"]], "integrate_log_log() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.interp_missing_data"]], "is_allclose() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.is_allclose"]], "is_pointlike (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.is_pointlike"]], "normalize() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.normalize"]], "pad() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.pad"]], "quantity (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.quantity"]], "read() (gammapy.irf.backgroundirf class method)": [[138, "gammapy.irf.BackgroundIRF.read"]], "required_axes (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.required_axes"]], "slice_by_idx() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.slice_by_idx"]], "tag (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.tag"]], "to_hdulist() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.to_hdulist"]], "to_table() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.to_table"]], "to_table_hdu() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.to_table_hdu"]], "to_unit() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.to_unit"]], "unit (gammapy.irf.backgroundirf attribute)": [[138, "gammapy.irf.BackgroundIRF.unit"]], "write() (gammapy.irf.backgroundirf method)": [[138, "gammapy.irf.BackgroundIRF.write"]], "edispkernel (class in gammapy.irf)": [[139, "gammapy.irf.EDispKernel"]], "axes (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.axes"]], "cumsum() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.cumsum"]], "data (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.data"]], "default_interp_kwargs (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.default_interp_kwargs"]], "evaluate() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.evaluate"]], "fov_alignment (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.fov_alignment"]], "from_diagonal_response() (gammapy.irf.edispkernel class method)": [[139, "gammapy.irf.EDispKernel.from_diagonal_response"]], "from_gauss() (gammapy.irf.edispkernel class method)": [[139, "gammapy.irf.EDispKernel.from_gauss"]], "from_hdulist() (gammapy.irf.edispkernel class method)": [[139, "gammapy.irf.EDispKernel.from_hdulist"]], "from_table() (gammapy.irf.edispkernel class method)": [[139, "gammapy.irf.EDispKernel.from_table"]], "get_bias() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.get_bias"]], "get_bias_energy() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.get_bias_energy"]], "get_mean() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.get_mean"]], "get_resolution() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.get_resolution"]], "has_offset_axis (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.has_offset_axis"]], "integral() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.integral"]], "integrate_log_log() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.integrate_log_log"]], "interp_missing_data() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.interp_missing_data"]], "is_allclose() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.is_allclose"]], "is_pointlike (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.is_pointlike"]], "normalize() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.normalize"]], "pad() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.pad"]], "pdf_in_safe_range() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.pdf_in_safe_range"]], "pdf_matrix (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.pdf_matrix"]], "peek() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.peek"]], "plot_bias() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.plot_bias"]], "plot_matrix() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.plot_matrix"]], "quantity (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.quantity"]], "read() (gammapy.irf.edispkernel class method)": [[139, "gammapy.irf.EDispKernel.read"]], "required_axes (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.required_axes"]], "slice_by_idx() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.slice_by_idx"]], "tag (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.tag"]], "to_hdulist() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.to_hdulist"]], "to_image() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.to_image"]], "to_table() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.to_table"]], "to_table_hdu() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.to_table_hdu"]], "to_unit() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.to_unit"]], "unit (gammapy.irf.edispkernel attribute)": [[139, "gammapy.irf.EDispKernel.unit"]], "write() (gammapy.irf.edispkernel method)": [[139, "gammapy.irf.EDispKernel.write"]], "edispkernelmap (class in gammapy.irf)": [[140, "gammapy.irf.EDispKernelMap"]], "copy() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.copy"]], "cutout() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.cutout"]], "downsample() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.downsample"]], "edisp_map (gammapy.irf.edispkernelmap attribute)": [[140, "gammapy.irf.EDispKernelMap.edisp_map"]], "from_diagonal_response() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.from_diagonal_response"]], "from_edisp_kernel() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.from_edisp_kernel"]], "from_gauss() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.from_gauss"]], "from_geom() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.from_geom"]], "from_hdulist() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.from_hdulist"]], "get_edisp_kernel() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.get_edisp_kernel"]], "mask_safe_image (gammapy.irf.edispkernelmap attribute)": [[140, "gammapy.irf.EDispKernelMap.mask_safe_image"]], "peek() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.peek"]], "read() (gammapy.irf.edispkernelmap class method)": [[140, "gammapy.irf.EDispKernelMap.read"]], "required_axes (gammapy.irf.edispkernelmap attribute)": [[140, "gammapy.irf.EDispKernelMap.required_axes"]], "resample_energy_axis() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.resample_energy_axis"]], "slice_by_idx() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.slice_by_idx"]], "stack() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.stack"]], "tag (gammapy.irf.edispkernelmap attribute)": [[140, "gammapy.irf.EDispKernelMap.tag"]], "to_hdulist() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.to_hdulist"]], "to_image() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.to_image"]], "to_region_nd_map() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.to_region_nd_map"]], "write() (gammapy.irf.edispkernelmap method)": [[140, "gammapy.irf.EDispKernelMap.write"]], "edispmap (class in gammapy.irf)": [[141, "gammapy.irf.EDispMap"]], "copy() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.copy"]], "cutout() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.cutout"]], "downsample() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.downsample"]], "edisp_map (gammapy.irf.edispmap attribute)": [[141, "gammapy.irf.EDispMap.edisp_map"]], "from_diagonal_response() (gammapy.irf.edispmap class method)": [[141, "gammapy.irf.EDispMap.from_diagonal_response"]], "from_geom() (gammapy.irf.edispmap class method)": [[141, "gammapy.irf.EDispMap.from_geom"]], "from_hdulist() (gammapy.irf.edispmap class method)": [[141, "gammapy.irf.EDispMap.from_hdulist"]], "get_edisp_kernel() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.get_edisp_kernel"]], "mask_safe_image (gammapy.irf.edispmap attribute)": [[141, "gammapy.irf.EDispMap.mask_safe_image"]], "normalize() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.normalize"]], "peek() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.peek"]], "read() (gammapy.irf.edispmap class method)": [[141, "gammapy.irf.EDispMap.read"]], "required_axes (gammapy.irf.edispmap attribute)": [[141, "gammapy.irf.EDispMap.required_axes"]], "sample_coord() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.sample_coord"]], "slice_by_idx() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.slice_by_idx"]], "stack() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.stack"]], "tag (gammapy.irf.edispmap attribute)": [[141, "gammapy.irf.EDispMap.tag"]], "to_edisp_kernel_map() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.to_edisp_kernel_map"]], "to_hdulist() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.to_hdulist"]], "to_region_nd_map() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.to_region_nd_map"]], "write() (gammapy.irf.edispmap method)": [[141, "gammapy.irf.EDispMap.write"]], "effectiveareatable2d (class in gammapy.irf)": [[142, "gammapy.irf.EffectiveAreaTable2D"]], "axes (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.axes"]], "cumsum() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.cumsum"]], "data (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.data"]], "default_interp_kwargs (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.default_interp_kwargs"]], "default_unit (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.default_unit"]], "evaluate() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.evaluate"]], "fov_alignment (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.fov_alignment"]], "from_hdulist() (gammapy.irf.effectiveareatable2d class method)": [[142, "gammapy.irf.EffectiveAreaTable2D.from_hdulist"]], "from_parametrization() (gammapy.irf.effectiveareatable2d class method)": [[142, "gammapy.irf.EffectiveAreaTable2D.from_parametrization"]], "from_table() (gammapy.irf.effectiveareatable2d class method)": [[142, "gammapy.irf.EffectiveAreaTable2D.from_table"]], "has_offset_axis (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.has_offset_axis"]], "integral() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.integral"]], "integrate_log_log() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.interp_missing_data"]], "is_allclose() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.is_allclose"]], "is_pointlike (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.is_pointlike"]], "normalize() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.normalize"]], "pad() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.pad"]], "peek() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.peek"]], "plot() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.plot"]], "plot_energy_dependence() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.plot_energy_dependence"]], "plot_offset_dependence() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.plot_offset_dependence"]], "quantity (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.quantity"]], "read() (gammapy.irf.effectiveareatable2d class method)": [[142, "gammapy.irf.EffectiveAreaTable2D.read"]], "required_axes (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.required_axes"]], "slice_by_idx() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.slice_by_idx"]], "tag (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.tag"]], "to_hdulist() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.to_hdulist"]], "to_table() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.to_table"]], "to_table_hdu() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.to_table_hdu"]], "to_unit() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.to_unit"]], "unit (gammapy.irf.effectiveareatable2d attribute)": [[142, "gammapy.irf.EffectiveAreaTable2D.unit"]], "write() (gammapy.irf.effectiveareatable2d method)": [[142, "gammapy.irf.EffectiveAreaTable2D.write"]], "energydependentmultigausspsf (class in gammapy.irf)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF"]], "axes (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.axes"]], "containment() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.containment"]], "containment_radius() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.containment_radius"]], "cumsum() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.cumsum"]], "data (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.data"]], "default_interp_kwargs (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.default_interp_kwargs"]], "evaluate() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate"]], "evaluate_containment() (gammapy.irf.energydependentmultigausspsf static method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_containment"]], "evaluate_direct() (gammapy.irf.energydependentmultigausspsf static method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_parameters"]], "fov_alignment (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.fov_alignment"]], "from_hdulist() (gammapy.irf.energydependentmultigausspsf class method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.from_hdulist"]], "from_table() (gammapy.irf.energydependentmultigausspsf class method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.from_table"]], "has_offset_axis (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.has_offset_axis"]], "info() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.info"]], "integral() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.integral"]], "integrate_log_log() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.interp_missing_data"]], "is_allclose() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.is_allclose"]], "is_pointlike (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.is_pointlike"]], "normalize() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.normalize"]], "pad() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.pad"]], "peek() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.peek"]], "plot_containment_radius() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_psf_vs_rad"]], "quantity (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.quantity"]], "read() (gammapy.irf.energydependentmultigausspsf class method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.read"]], "required_axes (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.required_axes"]], "required_parameters (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.required_parameters"]], "slice_by_idx() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.slice_by_idx"]], "tag (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.tag"]], "to_hdulist() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.to_hdulist"]], "to_psf3d() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.to_psf3d"]], "to_table() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.to_table"]], "to_table_hdu() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.to_table_hdu"]], "to_unit() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.to_unit"]], "unit (gammapy.irf.energydependentmultigausspsf attribute)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.unit"]], "write() (gammapy.irf.energydependentmultigausspsf method)": [[143, "gammapy.irf.EnergyDependentMultiGaussPSF.write"]], "energydispersion2d (class in gammapy.irf)": [[144, "gammapy.irf.EnergyDispersion2D"]], "axes (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.axes"]], "cumsum() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.cumsum"]], "data (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.data"]], "default_interp_kwargs (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.default_interp_kwargs"]], "default_unit (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.default_unit"]], "evaluate() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.evaluate"]], "fov_alignment (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.fov_alignment"]], "from_gauss() (gammapy.irf.energydispersion2d class method)": [[144, "gammapy.irf.EnergyDispersion2D.from_gauss"]], "from_hdulist() (gammapy.irf.energydispersion2d class method)": [[144, "gammapy.irf.EnergyDispersion2D.from_hdulist"]], "from_table() (gammapy.irf.energydispersion2d class method)": [[144, "gammapy.irf.EnergyDispersion2D.from_table"]], "has_offset_axis (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.has_offset_axis"]], "integral() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.integral"]], "integrate_log_log() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.interp_missing_data"]], "is_allclose() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.is_allclose"]], "is_pointlike (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.is_pointlike"]], "normalize() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.normalize"]], "pad() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.pad"]], "peek() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.peek"]], "plot_bias() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.plot_bias"]], "plot_migration() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.plot_migration"]], "quantity (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.quantity"]], "read() (gammapy.irf.energydispersion2d class method)": [[144, "gammapy.irf.EnergyDispersion2D.read"]], "required_axes (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.required_axes"]], "slice_by_idx() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.slice_by_idx"]], "tag (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.tag"]], "to_edisp_kernel() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.to_edisp_kernel"]], "to_hdulist() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.to_hdulist"]], "to_table() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.to_table"]], "to_table_hdu() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.to_table_hdu"]], "to_unit() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.to_unit"]], "unit (gammapy.irf.energydispersion2d attribute)": [[144, "gammapy.irf.EnergyDispersion2D.unit"]], "write() (gammapy.irf.energydispersion2d method)": [[144, "gammapy.irf.EnergyDispersion2D.write"]], "altaz (gammapy.irf.fovalignment attribute)": [[145, "gammapy.irf.FoVAlignment.ALTAZ"]], "fovalignment (class in gammapy.irf)": [[145, "gammapy.irf.FoVAlignment"]], "radec (gammapy.irf.fovalignment attribute)": [[145, "gammapy.irf.FoVAlignment.RADEC"]], "irf (class in gammapy.irf)": [[146, "gammapy.irf.IRF"]], "axes (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.axes"]], "cumsum() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.cumsum"]], "data (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.data"]], "default_interp_kwargs (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.default_interp_kwargs"]], "evaluate() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.evaluate"]], "fov_alignment (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.fov_alignment"]], "from_hdulist() (gammapy.irf.irf class method)": [[146, "gammapy.irf.IRF.from_hdulist"]], "from_table() (gammapy.irf.irf class method)": [[146, "gammapy.irf.IRF.from_table"]], "has_offset_axis (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.has_offset_axis"]], "integral() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.integral"]], "integrate_log_log() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.interp_missing_data"]], "is_allclose() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.is_allclose"]], "is_pointlike (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.is_pointlike"]], "normalize() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.normalize"]], "pad() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.pad"]], "quantity (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.quantity"]], "read() (gammapy.irf.irf class method)": [[146, "gammapy.irf.IRF.read"]], "required_axes (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.required_axes"]], "slice_by_idx() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.slice_by_idx"]], "tag (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.tag"]], "to_hdulist() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.to_hdulist"]], "to_table() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.to_table"]], "to_table_hdu() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.to_table_hdu"]], "to_unit() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.to_unit"]], "unit (gammapy.irf.irf attribute)": [[146, "gammapy.irf.IRF.unit"]], "write() (gammapy.irf.irf method)": [[146, "gammapy.irf.IRF.write"]], "irfmap (class in gammapy.irf)": [[147, "gammapy.irf.IRFMap"]], "copy() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.copy"]], "cutout() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.cutout"]], "downsample() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.downsample"]], "from_hdulist() (gammapy.irf.irfmap class method)": [[147, "gammapy.irf.IRFMap.from_hdulist"]], "mask_safe_image (gammapy.irf.irfmap attribute)": [[147, "gammapy.irf.IRFMap.mask_safe_image"]], "read() (gammapy.irf.irfmap class method)": [[147, "gammapy.irf.IRFMap.read"]], "required_axes (gammapy.irf.irfmap attribute)": [[147, "gammapy.irf.IRFMap.required_axes"]], "slice_by_idx() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.slice_by_idx"]], "stack() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.stack"]], "tag (gammapy.irf.irfmap attribute)": [[147, "gammapy.irf.IRFMap.tag"]], "to_hdulist() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.to_hdulist"]], "to_region_nd_map() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.to_region_nd_map"]], "write() (gammapy.irf.irfmap method)": [[147, "gammapy.irf.IRFMap.write"]], "irf_registry (in module gammapy.irf)": [[148, "gammapy.irf.IRF_REGISTRY"]], "psf3d (class in gammapy.irf)": [[149, "gammapy.irf.PSF3D"]], "axes (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.axes"]], "containment() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.containment"]], "containment_radius() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.containment_radius"]], "cumsum() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.cumsum"]], "data (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.data"]], "default_interp_kwargs (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.default_interp_kwargs"]], "default_unit (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.default_unit"]], "evaluate() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.evaluate"]], "fov_alignment (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.fov_alignment"]], "from_hdulist() (gammapy.irf.psf3d class method)": [[149, "gammapy.irf.PSF3D.from_hdulist"]], "from_table() (gammapy.irf.psf3d class method)": [[149, "gammapy.irf.PSF3D.from_table"]], "has_offset_axis (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.has_offset_axis"]], "info() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.info"]], "integral() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.integral"]], "integrate_log_log() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.interp_missing_data"]], "is_allclose() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.is_allclose"]], "is_pointlike (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.is_pointlike"]], "normalize() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.normalize"]], "pad() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.pad"]], "peek() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.peek"]], "plot_containment_radius() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.plot_psf_vs_rad"]], "quantity (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.quantity"]], "read() (gammapy.irf.psf3d class method)": [[149, "gammapy.irf.PSF3D.read"]], "required_axes (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.required_axes"]], "slice_by_idx() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.slice_by_idx"]], "tag (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.tag"]], "to_hdulist() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.to_hdulist"]], "to_table() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.to_table"]], "to_table_hdu() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.to_table_hdu"]], "to_unit() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.to_unit"]], "unit (gammapy.irf.psf3d attribute)": [[149, "gammapy.irf.PSF3D.unit"]], "write() (gammapy.irf.psf3d method)": [[149, "gammapy.irf.PSF3D.write"]], "psfkernel (class in gammapy.irf)": [[150, "gammapy.irf.PSFKernel"]], "data (gammapy.irf.psfkernel attribute)": [[150, "gammapy.irf.PSFKernel.data"]], "from_gauss() (gammapy.irf.psfkernel class method)": [[150, "gammapy.irf.PSFKernel.from_gauss"]], "from_spatial_model() (gammapy.irf.psfkernel class method)": [[150, "gammapy.irf.PSFKernel.from_spatial_model"]], "normalize() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.normalize"]], "peek() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.peek"]], "plot_kernel() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.plot_kernel"]], "psf_kernel_map (gammapy.irf.psfkernel attribute)": [[150, "gammapy.irf.PSFKernel.psf_kernel_map"]], "read() (gammapy.irf.psfkernel class method)": [[150, "gammapy.irf.PSFKernel.read"]], "slice_by_idx() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.slice_by_idx"]], "to_image() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.to_image"]], "write() (gammapy.irf.psfkernel method)": [[150, "gammapy.irf.PSFKernel.write"]], "psfking (class in gammapy.irf)": [[151, "gammapy.irf.PSFKing"]], "axes (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.axes"]], "containment() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.containment"]], "containment_radius() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.containment_radius"]], "cumsum() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.cumsum"]], "data (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.data"]], "default_interp_kwargs (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.default_interp_kwargs"]], "evaluate() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.evaluate"]], "evaluate_containment() (gammapy.irf.psfking static method)": [[151, "gammapy.irf.PSFKing.evaluate_containment"]], "evaluate_direct() (gammapy.irf.psfking static method)": [[151, "gammapy.irf.PSFKing.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.evaluate_parameters"]], "fov_alignment (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.fov_alignment"]], "from_hdulist() (gammapy.irf.psfking class method)": [[151, "gammapy.irf.PSFKing.from_hdulist"]], "from_table() (gammapy.irf.psfking class method)": [[151, "gammapy.irf.PSFKing.from_table"]], "has_offset_axis (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.has_offset_axis"]], "info() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.info"]], "integral() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.integral"]], "integrate_log_log() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.integrate_log_log"]], "interp_missing_data() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.interp_missing_data"]], "is_allclose() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.is_allclose"]], "is_pointlike (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.is_pointlike"]], "normalize() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.normalize"]], "pad() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.pad"]], "peek() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.peek"]], "plot_containment_radius() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.plot_psf_vs_rad"]], "quantity (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.quantity"]], "read() (gammapy.irf.psfking class method)": [[151, "gammapy.irf.PSFKing.read"]], "required_axes (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.required_axes"]], "required_parameters (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.required_parameters"]], "slice_by_idx() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.slice_by_idx"]], "tag (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.tag"]], "to_hdulist() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.to_hdulist"]], "to_psf3d() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.to_psf3d"]], "to_table() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.to_table"]], "to_table_hdu() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.to_table_hdu"]], "to_unit() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.to_unit"]], "unit (gammapy.irf.psfking attribute)": [[151, "gammapy.irf.PSFKing.unit"]], "write() (gammapy.irf.psfking method)": [[151, "gammapy.irf.PSFKing.write"]], "psfmap (class in gammapy.irf)": [[152, "gammapy.irf.PSFMap"]], "containment() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.containment"]], "containment_radius() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.containment_radius"]], "containment_radius_map() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.containment_radius_map"]], "copy() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.copy"]], "cutout() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.cutout"]], "downsample() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.downsample"]], "energy_name (gammapy.irf.psfmap attribute)": [[152, "gammapy.irf.PSFMap.energy_name"]], "from_gauss() (gammapy.irf.psfmap class method)": [[152, "gammapy.irf.PSFMap.from_gauss"]], "from_geom() (gammapy.irf.psfmap class method)": [[152, "gammapy.irf.PSFMap.from_geom"]], "from_hdulist() (gammapy.irf.psfmap class method)": [[152, "gammapy.irf.PSFMap.from_hdulist"]], "get_psf_kernel() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.get_psf_kernel"]], "mask_safe_image (gammapy.irf.psfmap attribute)": [[152, "gammapy.irf.PSFMap.mask_safe_image"]], "normalize() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.normalize"]], "peek() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.peek"]], "plot_containment_radius_vs_energy() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.plot_psf_vs_rad"]], "psf_map (gammapy.irf.psfmap attribute)": [[152, "gammapy.irf.PSFMap.psf_map"]], "read() (gammapy.irf.psfmap class method)": [[152, "gammapy.irf.PSFMap.read"]], "required_axes (gammapy.irf.psfmap attribute)": [[152, "gammapy.irf.PSFMap.required_axes"]], "sample_coord() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.sample_coord"]], "slice_by_idx() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.slice_by_idx"]], "stack() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.stack"]], "tag (gammapy.irf.psfmap attribute)": [[152, "gammapy.irf.PSFMap.tag"]], "to_hdulist() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.to_hdulist"]], "to_image() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.to_image"]], "to_region_nd_map() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.to_region_nd_map"]], "write() (gammapy.irf.psfmap method)": [[152, "gammapy.irf.PSFMap.write"]], "parametricpsf (class in gammapy.irf)": [[153, "gammapy.irf.ParametricPSF"]], "axes (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.axes"]], "containment() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.containment"]], "containment_radius() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.containment_radius"]], "cumsum() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.cumsum"]], "data (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.data"]], "default_interp_kwargs (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.default_interp_kwargs"]], "evaluate() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.evaluate"]], "evaluate_containment() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.evaluate_containment"]], "evaluate_direct() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.evaluate_parameters"]], "fov_alignment (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.fov_alignment"]], "from_hdulist() (gammapy.irf.parametricpsf class method)": [[153, "gammapy.irf.ParametricPSF.from_hdulist"]], "from_table() (gammapy.irf.parametricpsf class method)": [[153, "gammapy.irf.ParametricPSF.from_table"]], "has_offset_axis (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.has_offset_axis"]], "info() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.info"]], "integral() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.integral"]], "integrate_log_log() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.interp_missing_data"]], "is_allclose() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.is_allclose"]], "is_pointlike (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.is_pointlike"]], "normalize() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.normalize"]], "pad() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.pad"]], "peek() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.peek"]], "plot_containment_radius() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.plot_psf_vs_rad"]], "quantity (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.quantity"]], "read() (gammapy.irf.parametricpsf class method)": [[153, "gammapy.irf.ParametricPSF.read"]], "required_axes (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.required_axes"]], "required_parameters (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.required_parameters"]], "slice_by_idx() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.slice_by_idx"]], "tag (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.tag"]], "to_hdulist() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.to_hdulist"]], "to_psf3d() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.to_psf3d"]], "to_table() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.to_table"]], "to_table_hdu() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.to_table_hdu"]], "to_unit() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.to_unit"]], "unit (gammapy.irf.parametricpsf attribute)": [[153, "gammapy.irf.ParametricPSF.unit"]], "write() (gammapy.irf.parametricpsf method)": [[153, "gammapy.irf.ParametricPSF.write"]], "radmax2d (class in gammapy.irf)": [[154, "gammapy.irf.RadMax2D"]], "axes (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.axes"]], "cumsum() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.cumsum"]], "data (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.data"]], "default_interp_kwargs (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.default_interp_kwargs"]], "default_unit (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.default_unit"]], "evaluate() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.evaluate"]], "fov_alignment (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.fov_alignment"]], "from_hdulist() (gammapy.irf.radmax2d class method)": [[154, "gammapy.irf.RadMax2D.from_hdulist"]], "from_irf() (gammapy.irf.radmax2d class method)": [[154, "gammapy.irf.RadMax2D.from_irf"]], "from_table() (gammapy.irf.radmax2d class method)": [[154, "gammapy.irf.RadMax2D.from_table"]], "has_offset_axis (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.has_offset_axis"]], "integral() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.integral"]], "integrate_log_log() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.interp_missing_data"]], "is_allclose() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.is_allclose"]], "is_fixed_rad_max (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.is_fixed_rad_max"]], "is_pointlike (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.is_pointlike"]], "normalize() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.normalize"]], "pad() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.pad"]], "plot_rad_max_vs_energy() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.plot_rad_max_vs_energy"]], "quantity (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.quantity"]], "read() (gammapy.irf.radmax2d class method)": [[154, "gammapy.irf.RadMax2D.read"]], "required_axes (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.required_axes"]], "slice_by_idx() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.slice_by_idx"]], "tag (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.tag"]], "to_hdulist() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.to_hdulist"]], "to_table() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.to_table"]], "to_table_hdu() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.to_table_hdu"]], "to_unit() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.to_unit"]], "unit (gammapy.irf.radmax2d attribute)": [[154, "gammapy.irf.RadMax2D.unit"]], "write() (gammapy.irf.radmax2d method)": [[154, "gammapy.irf.RadMax2D.write"]], "recopsfmap (class in gammapy.irf)": [[155, "gammapy.irf.RecoPSFMap"]], "containment() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.containment"]], "containment_radius() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.containment_radius"]], "containment_radius_map() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.containment_radius_map"]], "copy() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.copy"]], "cutout() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.cutout"]], "downsample() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.downsample"]], "energy_name (gammapy.irf.recopsfmap attribute)": [[155, "gammapy.irf.RecoPSFMap.energy_name"]], "from_gauss() (gammapy.irf.recopsfmap class method)": [[155, "gammapy.irf.RecoPSFMap.from_gauss"]], "from_geom() (gammapy.irf.recopsfmap class method)": [[155, "gammapy.irf.RecoPSFMap.from_geom"]], "from_hdulist() (gammapy.irf.recopsfmap class method)": [[155, "gammapy.irf.RecoPSFMap.from_hdulist"]], "get_psf_kernel() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.get_psf_kernel"]], "mask_safe_image (gammapy.irf.recopsfmap attribute)": [[155, "gammapy.irf.RecoPSFMap.mask_safe_image"]], "normalize() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.normalize"]], "peek() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.peek"]], "plot_containment_radius_vs_energy() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.plot_psf_vs_rad"]], "psf_map (gammapy.irf.recopsfmap attribute)": [[155, "gammapy.irf.RecoPSFMap.psf_map"]], "read() (gammapy.irf.recopsfmap class method)": [[155, "gammapy.irf.RecoPSFMap.read"]], "required_axes (gammapy.irf.recopsfmap attribute)": [[155, "gammapy.irf.RecoPSFMap.required_axes"]], "sample_coord() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.sample_coord"]], "slice_by_idx() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.slice_by_idx"]], "stack() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.stack"]], "tag (gammapy.irf.recopsfmap attribute)": [[155, "gammapy.irf.RecoPSFMap.tag"]], "to_hdulist() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.to_hdulist"]], "to_image() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.to_image"]], "to_region_nd_map() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.to_region_nd_map"]], "write() (gammapy.irf.recopsfmap method)": [[155, "gammapy.irf.RecoPSFMap.write"]], "load_irf_dict_from_file() (in module gammapy.irf)": [[156, "gammapy.irf.load_irf_dict_from_file"]], "adaptiveringbackgroundmaker (class in gammapy.makers)": [[157, "gammapy.makers.AdaptiveRingBackgroundMaker"]], "kernels() (gammapy.makers.adaptiveringbackgroundmaker method)": [[157, "gammapy.makers.AdaptiveRingBackgroundMaker.kernels"]], "make_cubes() (gammapy.makers.adaptiveringbackgroundmaker method)": [[157, "gammapy.makers.AdaptiveRingBackgroundMaker.make_cubes"]], "run() (gammapy.makers.adaptiveringbackgroundmaker method)": [[157, "gammapy.makers.AdaptiveRingBackgroundMaker.run"]], "tag (gammapy.makers.adaptiveringbackgroundmaker attribute)": [[157, "gammapy.makers.AdaptiveRingBackgroundMaker.tag"]], "datasetsmaker (class in gammapy.makers)": [[158, "gammapy.makers.DatasetsMaker"]], "callback() (gammapy.makers.datasetsmaker method)": [[158, "gammapy.makers.DatasetsMaker.callback"]], "error_callback() (gammapy.makers.datasetsmaker method)": [[158, "gammapy.makers.DatasetsMaker.error_callback"]], "make_dataset() (gammapy.makers.datasetsmaker method)": [[158, "gammapy.makers.DatasetsMaker.make_dataset"]], "n_jobs (gammapy.makers.datasetsmaker attribute)": [[158, "gammapy.makers.DatasetsMaker.n_jobs"]], "offset_max (gammapy.makers.datasetsmaker attribute)": [[158, "gammapy.makers.DatasetsMaker.offset_max"]], "parallel_backend (gammapy.makers.datasetsmaker attribute)": [[158, "gammapy.makers.DatasetsMaker.parallel_backend"]], "run() (gammapy.makers.datasetsmaker method)": [[158, "gammapy.makers.DatasetsMaker.run"]], "safe_mask_maker (gammapy.makers.datasetsmaker attribute)": [[158, "gammapy.makers.DatasetsMaker.safe_mask_maker"]], "tag (gammapy.makers.datasetsmaker attribute)": [[158, "gammapy.makers.DatasetsMaker.tag"]], "fovbackgroundmaker (class in gammapy.makers)": [[159, "gammapy.makers.FoVBackgroundMaker"]], "available_methods (gammapy.makers.fovbackgroundmaker attribute)": [[159, "gammapy.makers.FoVBackgroundMaker.available_methods"]], "make_background_fit() (gammapy.makers.fovbackgroundmaker method)": [[159, "gammapy.makers.FoVBackgroundMaker.make_background_fit"]], "make_background_scale() (gammapy.makers.fovbackgroundmaker method)": [[159, "gammapy.makers.FoVBackgroundMaker.make_background_scale"]], "make_default_fov_background_model() (gammapy.makers.fovbackgroundmaker method)": [[159, "gammapy.makers.FoVBackgroundMaker.make_default_fov_background_model"]], "make_exclusion_mask() (gammapy.makers.fovbackgroundmaker method)": [[159, "gammapy.makers.FoVBackgroundMaker.make_exclusion_mask"]], "method (gammapy.makers.fovbackgroundmaker attribute)": [[159, "gammapy.makers.FoVBackgroundMaker.method"]], "run() (gammapy.makers.fovbackgroundmaker method)": [[159, "gammapy.makers.FoVBackgroundMaker.run"]], "tag (gammapy.makers.fovbackgroundmaker attribute)": [[159, "gammapy.makers.FoVBackgroundMaker.tag"]], "maker_registry (in module gammapy.makers)": [[160, "gammapy.makers.MAKER_REGISTRY"]], "maker (class in gammapy.makers)": [[161, "gammapy.makers.Maker"]], "run() (gammapy.makers.maker method)": [[161, "gammapy.makers.Maker.run"]], "tag (gammapy.makers.maker attribute)": [[161, "gammapy.makers.Maker.tag"]], "mapdatasetmaker (class in gammapy.makers)": [[162, "gammapy.makers.MapDatasetMaker"]], "available_selection (gammapy.makers.mapdatasetmaker attribute)": [[162, "gammapy.makers.MapDatasetMaker.available_selection"]], "make_background() (gammapy.makers.mapdatasetmaker method)": [[162, "gammapy.makers.MapDatasetMaker.make_background"]], "make_counts() (gammapy.makers.mapdatasetmaker static method)": [[162, "gammapy.makers.MapDatasetMaker.make_counts"]], "make_edisp() (gammapy.makers.mapdatasetmaker method)": [[162, "gammapy.makers.MapDatasetMaker.make_edisp"]], "make_edisp_kernel() (gammapy.makers.mapdatasetmaker method)": [[162, "gammapy.makers.MapDatasetMaker.make_edisp_kernel"]], "make_exposure() (gammapy.makers.mapdatasetmaker static method)": [[162, "gammapy.makers.MapDatasetMaker.make_exposure"]], "make_exposure_irf() (gammapy.makers.mapdatasetmaker static method)": [[162, "gammapy.makers.MapDatasetMaker.make_exposure_irf"]], "make_meta_table() (gammapy.makers.mapdatasetmaker static method)": [[162, "gammapy.makers.MapDatasetMaker.make_meta_table"]], "make_psf() (gammapy.makers.mapdatasetmaker method)": [[162, "gammapy.makers.MapDatasetMaker.make_psf"]], "run() (gammapy.makers.mapdatasetmaker method)": [[162, "gammapy.makers.MapDatasetMaker.run"]], "tag (gammapy.makers.mapdatasetmaker attribute)": [[162, "gammapy.makers.MapDatasetMaker.tag"]], "phasebackgroundmaker (class in gammapy.makers)": [[163, "gammapy.makers.PhaseBackgroundMaker"]], "make_counts() (gammapy.makers.phasebackgroundmaker method)": [[163, "gammapy.makers.PhaseBackgroundMaker.make_counts"]], "make_counts_off() (gammapy.makers.phasebackgroundmaker method)": [[163, "gammapy.makers.PhaseBackgroundMaker.make_counts_off"]], "run() (gammapy.makers.phasebackgroundmaker method)": [[163, "gammapy.makers.PhaseBackgroundMaker.run"]], "tag (gammapy.makers.phasebackgroundmaker attribute)": [[163, "gammapy.makers.PhaseBackgroundMaker.tag"]], "reflectedregionsbackgroundmaker (class in gammapy.makers)": [[164, "gammapy.makers.ReflectedRegionsBackgroundMaker"]], "make_counts_off() (gammapy.makers.reflectedregionsbackgroundmaker method)": [[164, "gammapy.makers.ReflectedRegionsBackgroundMaker.make_counts_off"]], "run() (gammapy.makers.reflectedregionsbackgroundmaker method)": [[164, "gammapy.makers.ReflectedRegionsBackgroundMaker.run"]], "tag (gammapy.makers.reflectedregionsbackgroundmaker attribute)": [[164, "gammapy.makers.ReflectedRegionsBackgroundMaker.tag"]], "reflectedregionsfinder (class in gammapy.makers)": [[165, "gammapy.makers.ReflectedRegionsFinder"]], "run() (gammapy.makers.reflectedregionsfinder method)": [[165, "gammapy.makers.ReflectedRegionsFinder.run"]], "regionsfinder (class in gammapy.makers)": [[166, "gammapy.makers.RegionsFinder"]], "run() (gammapy.makers.regionsfinder method)": [[166, "gammapy.makers.RegionsFinder.run"]], "ringbackgroundmaker (class in gammapy.makers)": [[167, "gammapy.makers.RingBackgroundMaker"]], "kernel() (gammapy.makers.ringbackgroundmaker method)": [[167, "gammapy.makers.RingBackgroundMaker.kernel"]], "make_maps_off() (gammapy.makers.ringbackgroundmaker method)": [[167, "gammapy.makers.RingBackgroundMaker.make_maps_off"]], "run() (gammapy.makers.ringbackgroundmaker method)": [[167, "gammapy.makers.RingBackgroundMaker.run"]], "tag (gammapy.makers.ringbackgroundmaker attribute)": [[167, "gammapy.makers.RingBackgroundMaker.tag"]], "safemaskmaker (class in gammapy.makers)": [[168, "gammapy.makers.SafeMaskMaker"]], "available_methods (gammapy.makers.safemaskmaker attribute)": [[168, "gammapy.makers.SafeMaskMaker.available_methods"]], "make_mask_bkg_invalid() (gammapy.makers.safemaskmaker static method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_bkg_invalid"]], "make_mask_energy_aeff_default() (gammapy.makers.safemaskmaker static method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_energy_aeff_default"]], "make_mask_energy_aeff_max() (gammapy.makers.safemaskmaker method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_energy_aeff_max"]], "make_mask_energy_bkg_peak() (gammapy.makers.safemaskmaker method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_energy_bkg_peak"]], "make_mask_energy_edisp_bias() (gammapy.makers.safemaskmaker method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_energy_edisp_bias"]], "make_mask_offset_max() (gammapy.makers.safemaskmaker method)": [[168, "gammapy.makers.SafeMaskMaker.make_mask_offset_max"]], "run() (gammapy.makers.safemaskmaker method)": [[168, "gammapy.makers.SafeMaskMaker.run"]], "tag (gammapy.makers.safemaskmaker attribute)": [[168, "gammapy.makers.SafeMaskMaker.tag"]], "spectrumdatasetmaker (class in gammapy.makers)": [[169, "gammapy.makers.SpectrumDatasetMaker"]], "available_selection (gammapy.makers.spectrumdatasetmaker attribute)": [[169, "gammapy.makers.SpectrumDatasetMaker.available_selection"]], "make_background() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_background"]], "make_counts() (gammapy.makers.spectrumdatasetmaker static method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_counts"]], "make_edisp() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_edisp"]], "make_edisp_kernel() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_edisp_kernel"]], "make_exposure() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_exposure"]], "make_exposure_irf() (gammapy.makers.spectrumdatasetmaker static method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_exposure_irf"]], "make_meta_table() (gammapy.makers.spectrumdatasetmaker static method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_meta_table"]], "make_psf() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.make_psf"]], "run() (gammapy.makers.spectrumdatasetmaker method)": [[169, "gammapy.makers.SpectrumDatasetMaker.run"]], "tag (gammapy.makers.spectrumdatasetmaker attribute)": [[169, "gammapy.makers.SpectrumDatasetMaker.tag"]], "wobbleregionsfinder (class in gammapy.makers)": [[170, "gammapy.makers.WobbleRegionsFinder"]], "run() (gammapy.makers.wobbleregionsfinder method)": [[170, "gammapy.makers.WobbleRegionsFinder.run"]], "make_counts_rad_max() (in module gammapy.makers.utils)": [[171, "gammapy.makers.utils.make_counts_rad_max"]], "make_edisp_kernel_map() (in module gammapy.makers.utils)": [[172, "gammapy.makers.utils.make_edisp_kernel_map"]], "make_edisp_map() (in module gammapy.makers.utils)": [[173, "gammapy.makers.utils.make_edisp_map"]], "make_effective_livetime_map() (in module gammapy.makers.utils)": [[174, "gammapy.makers.utils.make_effective_livetime_map"]], "make_map_background_irf() (in module gammapy.makers.utils)": [[175, "gammapy.makers.utils.make_map_background_irf"]], "make_map_exposure_true_energy() (in module gammapy.makers.utils)": [[176, "gammapy.makers.utils.make_map_exposure_true_energy"]], "make_observation_time_map() (in module gammapy.makers.utils)": [[177, "gammapy.makers.utils.make_observation_time_map"]], "make_psf_map() (in module gammapy.makers.utils)": [[178, "gammapy.makers.utils.make_psf_map"]], "make_theta_squared_table() (in module gammapy.makers.utils)": [[179, "gammapy.makers.utils.make_theta_squared_table"]], "geom (class in gammapy.maps)": [[180, "gammapy.maps.Geom"]], "as_energy_true (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.as_energy_true"]], "center_coord (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.center_coord"]], "center_pix (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.center_pix"]], "center_skydir (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.center_skydir"]], "contains() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.contains"]], "contains_pix() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.contains_pix"]], "coord_to_idx() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.coord_to_pix"]], "copy() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.copy"]], "crop() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.crop"]], "data_nbytes() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.data_nbytes"]], "data_shape (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.data_shape"]], "downsample() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.downsample"]], "drop() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.drop"]], "energy_mask() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.energy_mask"]], "from_hdulist() (gammapy.maps.geom class method)": [[180, "gammapy.maps.Geom.from_hdulist"]], "get_coord() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.get_coord"]], "get_idx() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.get_idx"]], "has_energy_axis (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.has_energy_axis"]], "is_allsky (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.is_allsky"]], "is_flat (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.is_flat"]], "is_image (gammapy.maps.geom attribute)": [[180, "gammapy.maps.Geom.is_image"]], "pad() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.pad"]], "pix_to_coord() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.pix_to_idx"]], "rename_axes() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.rename_axes"]], "replace_axis() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.replace_axis"]], "resample_axis() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.resample_axis"]], "slice_by_idx() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.slice_by_idx"]], "solid_angle() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.solid_angle"]], "squash() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.squash"]], "to_bands_hdu() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.to_bands_hdu"]], "to_cube() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.to_cube"]], "to_image() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.to_image"]], "upsample() (gammapy.maps.geom method)": [[180, "gammapy.maps.Geom.upsample"]], "hpxgeom (class in gammapy.maps)": [[181, "gammapy.maps.HpxGeom"]], "as_energy_true (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.as_energy_true"]], "axes (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.axes"]], "axes_names (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.axes_names"]], "center_coord (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.center_coord"]], "center_pix (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.center_pix"]], "center_skydir (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.center_skydir"]], "contains() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.contains"]], "contains_pix() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.contains_pix"]], "coord_to_idx() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.coord_to_pix"]], "copy() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.copy"]], "create() (gammapy.maps.hpxgeom class method)": [[181, "gammapy.maps.HpxGeom.create"]], "crop() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.crop"]], "cutout() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.cutout"]], "data_nbytes() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.data_nbytes"]], "data_shape (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.data_shape"]], "data_shape_axes (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.data_shape_axes"]], "downsample() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.downsample"]], "drop() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.drop"]], "energy_mask() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.energy_mask"]], "frame (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.frame"]], "from_hdu() (gammapy.maps.hpxgeom class method)": [[181, "gammapy.maps.HpxGeom.from_hdu"]], "from_hdulist() (gammapy.maps.hpxgeom class method)": [[181, "gammapy.maps.HpxGeom.from_hdulist"]], "from_header() (gammapy.maps.hpxgeom class method)": [[181, "gammapy.maps.HpxGeom.from_header"]], "get_coord() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.get_coord"]], "get_idx() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.get_idx"]], "get_index_list() (gammapy.maps.hpxgeom static method)": [[181, "gammapy.maps.HpxGeom.get_index_list"]], "global_to_local() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.global_to_local"]], "has_energy_axis (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.has_energy_axis"]], "interp_weights() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.interp_weights"]], "ipix (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.ipix"]], "is_aligned() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.is_aligned"]], "is_allclose() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.is_allclose"]], "is_allsky (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_allsky"]], "is_flat (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_flat"]], "is_hpx (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_hpx"]], "is_image (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_image"]], "is_region (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_region"]], "is_regular (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.is_regular"]], "local_to_global() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.local_to_global"]], "ndim (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.ndim"]], "nest (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.nest"]], "npix (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.npix"]], "npix_max (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.npix_max"]], "nside (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.nside"]], "order (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.order"]], "ordering (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.ordering"]], "pad() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.pad"]], "pix_to_coord() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.pix_to_idx"]], "pixel_scales (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.pixel_scales"]], "projection (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.projection"]], "region (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.region"]], "region_mask() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.region_mask"]], "rename_axes() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.rename_axes"]], "replace_axis() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.replace_axis"]], "resample_axis() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.resample_axis"]], "separation() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.separation"]], "shape_axes (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.shape_axes"]], "slice_by_idx() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.solid_angle"]], "squash() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.squash"]], "to_bands_hdu() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_binsz"]], "to_cube() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_cube"]], "to_header() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_header"]], "to_image() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_image"]], "to_nside() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_nside"]], "to_swapped() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_swapped"]], "to_wcs_geom() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_wcs_geom"]], "to_wcs_tiles() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.to_wcs_tiles"]], "upsample() (gammapy.maps.hpxgeom method)": [[181, "gammapy.maps.HpxGeom.upsample"]], "width (gammapy.maps.hpxgeom attribute)": [[181, "gammapy.maps.HpxGeom.width"]], "hpxmap (class in gammapy.maps)": [[182, "gammapy.maps.HpxMap"]], "coadd() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.coadd"]], "copy() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.copy"]], "create() (gammapy.maps.hpxmap class method)": [[182, "gammapy.maps.HpxMap.create"]], "crop() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.crop"]], "cumsum() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.cumsum"]], "data (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.data"]], "dot() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.dot"]], "downsample() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.downsample"]], "fill_by_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.fill_by_pix"]], "fill_events() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.fill_events"]], "from_geom() (gammapy.maps.hpxmap static method)": [[182, "gammapy.maps.HpxMap.from_geom"]], "from_hdulist() (gammapy.maps.hpxmap class method)": [[182, "gammapy.maps.HpxMap.from_hdulist"]], "from_stack() (gammapy.maps.hpxmap class method)": [[182, "gammapy.maps.HpxMap.from_stack"]], "geom (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.geom"]], "get_by_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_by_coord"]], "get_by_idx() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_by_idx"]], "get_by_pix() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.get_spectrum"]], "integral() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.integral"]], "interp_by_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.interp_to_geom"]], "is_allclose() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.is_allclose"]], "is_mask (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.is_mask"]], "iter_by_axis() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.mask_nearest_position"]], "meta (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.meta"]], "normalize() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.normalize"]], "pad() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.pad"]], "plot_grid() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.plot_grid"]], "plot_interactive() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.plot_interactive"]], "quantity (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.quantity"]], "read() (gammapy.maps.hpxmap static method)": [[182, "gammapy.maps.HpxMap.read"]], "reduce() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.reduce"]], "reduce_over_axes() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.rename_axes"]], "reorder_axes() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.reproject_to_geom"]], "resample() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.resample"]], "resample_axis() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.resample_axis"]], "sample_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.sample_coord"]], "set_by_coord() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.set_by_coord"]], "set_by_idx() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.set_by_idx"]], "set_by_pix() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.split_by_axis"]], "sum_over_axes() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.sum_over_axes"]], "tag (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.tag"]], "to_cube() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_cube"]], "to_hdu() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_hdu"]], "to_hdulist() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_hdulist"]], "to_swapped() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_swapped"]], "to_unit() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_unit"]], "to_wcs() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.to_wcs"]], "unit (gammapy.maps.hpxmap attribute)": [[182, "gammapy.maps.HpxMap.unit"]], "upsample() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.upsample"]], "write() (gammapy.maps.hpxmap method)": [[182, "gammapy.maps.HpxMap.write"]], "hpxndmap (class in gammapy.maps)": [[183, "gammapy.maps.HpxNDMap"]], "coadd() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.coadd"]], "convolve() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.convolve"]], "convolve_full() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.convolve_full"]], "convolve_wcs() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.convolve_wcs"]], "copy() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.copy"]], "create() (gammapy.maps.hpxndmap class method)": [[183, "gammapy.maps.HpxNDMap.create"]], "crop() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.crop"]], "cumsum() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.cumsum"]], "cutout() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.cutout"]], "data (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.data"]], "dot() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.dot"]], "downsample() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.downsample"]], "fill_by_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.fill_events"]], "from_geom() (gammapy.maps.hpxndmap static method)": [[183, "gammapy.maps.HpxNDMap.from_geom"]], "from_hdu() (gammapy.maps.hpxndmap class method)": [[183, "gammapy.maps.HpxNDMap.from_hdu"]], "from_hdulist() (gammapy.maps.hpxndmap class method)": [[183, "gammapy.maps.HpxNDMap.from_hdulist"]], "from_stack() (gammapy.maps.hpxndmap class method)": [[183, "gammapy.maps.HpxNDMap.from_stack"]], "from_wcs_tiles() (gammapy.maps.hpxndmap class method)": [[183, "gammapy.maps.HpxNDMap.from_wcs_tiles"]], "geom (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.geom"]], "get_by_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.get_spectrum"]], "integral() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.integral"]], "interp_by_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.is_allclose"]], "is_mask (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.mask_nearest_position"]], "meta (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.meta"]], "normalize() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.normalize"]], "pad() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.pad"]], "plot() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.plot"]], "plot_grid() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.plot_grid"]], "plot_interactive() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.plot_mask"]], "quantity (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.quantity"]], "read() (gammapy.maps.hpxndmap static method)": [[183, "gammapy.maps.HpxNDMap.read"]], "reduce() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.reproject_to_geom"]], "resample() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.resample"]], "resample_axis() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.resample_axis"]], "sample_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.slice_by_idx"]], "smooth() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.smooth"]], "split_by_axis() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.split_by_axis"]], "stack() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.stack"]], "sum_over_axes() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.sum_over_axes"]], "tag (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.tag"]], "to_cube() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_cube"]], "to_hdu() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_hdu"]], "to_hdulist() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_hdulist"]], "to_nside() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_nside"]], "to_region_nd_map() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_region_nd_map"]], "to_swapped() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_swapped"]], "to_unit() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_unit"]], "to_wcs() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_wcs"]], "to_wcs_tiles() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.to_wcs_tiles"]], "unit (gammapy.maps.hpxndmap attribute)": [[183, "gammapy.maps.HpxNDMap.unit"]], "upsample() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.upsample"]], "write() (gammapy.maps.hpxndmap method)": [[183, "gammapy.maps.HpxNDMap.write"]], "labelmapaxis (class in gammapy.maps)": [[184, "gammapy.maps.LabelMapAxis"]], "as_plot_center (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.as_plot_labels"]], "as_plot_xerr (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.assert_name"]], "bin_width (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.bin_width"]], "center (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.center"]], "concatenate() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.concatenate"]], "coord_to_idx() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.coord_to_pix"]], "copy() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.copy"]], "downsample() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.downsample"]], "edges (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.edges"]], "edges_max (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.edges_max"]], "edges_min (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.format_plot_xaxis"]], "from_stack() (gammapy.maps.labelmapaxis class method)": [[184, "gammapy.maps.LabelMapAxis.from_stack"]], "from_table() (gammapy.maps.labelmapaxis class method)": [[184, "gammapy.maps.LabelMapAxis.from_table"]], "is_allclose() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.is_allclose"]], "name (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.name"]], "nbin (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.nbin"]], "node_type (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.node_type"]], "pad() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.pad"]], "pix_to_coord() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.pix_to_idx"]], "resample() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.resample"]], "slice() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.slice"]], "squash() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.squash"]], "to_header() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.to_header"]], "unit (gammapy.maps.labelmapaxis attribute)": [[184, "gammapy.maps.LabelMapAxis.unit"]], "upsample() (gammapy.maps.labelmapaxis method)": [[184, "gammapy.maps.LabelMapAxis.upsample"]], "map (class in gammapy.maps)": [[185, "gammapy.maps.Map"]], "coadd() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.coadd"]], "copy() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.copy"]], "create() (gammapy.maps.map static method)": [[185, "gammapy.maps.Map.create"]], "crop() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.crop"]], "cumsum() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.cumsum"]], "data (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.data"]], "dot() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.dot"]], "downsample() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.downsample"]], "fill_by_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.fill_by_coord"]], "fill_by_idx() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.fill_by_idx"]], "fill_by_pix() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.fill_by_pix"]], "fill_events() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.fill_events"]], "from_geom() (gammapy.maps.map static method)": [[185, "gammapy.maps.Map.from_geom"]], "from_hdulist() (gammapy.maps.map static method)": [[185, "gammapy.maps.Map.from_hdulist"]], "from_stack() (gammapy.maps.map class method)": [[185, "gammapy.maps.Map.from_stack"]], "geom (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.geom"]], "get_by_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_by_coord"]], "get_by_idx() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_by_idx"]], "get_by_pix() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_by_pix"]], "get_image_by_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_image_by_pix"]], "get_spectrum() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.get_spectrum"]], "integral() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.integral"]], "interp_by_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.interp_by_coord"]], "interp_by_pix() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.interp_by_pix"]], "interp_to_geom() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.interp_to_geom"]], "is_allclose() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.is_allclose"]], "is_mask (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.is_mask"]], "iter_by_axis() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.iter_by_axis"]], "iter_by_image() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.iter_by_image"]], "iter_by_image_data() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.mask_nearest_position"]], "meta (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.meta"]], "normalize() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.normalize"]], "pad() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.pad"]], "plot_grid() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.plot_grid"]], "plot_interactive() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.plot_interactive"]], "quantity (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.quantity"]], "read() (gammapy.maps.map static method)": [[185, "gammapy.maps.Map.read"]], "reduce() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.reduce"]], "reduce_over_axes() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.reduce_over_axes"]], "rename_axes() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.rename_axes"]], "reorder_axes() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.reorder_axes"]], "reproject_by_image() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.reproject_to_geom"]], "resample() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.resample"]], "resample_axis() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.resample_axis"]], "sample_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.sample_coord"]], "set_by_coord() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.set_by_coord"]], "set_by_idx() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.set_by_idx"]], "set_by_pix() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.set_by_pix"]], "slice_by_idx() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.slice_by_idx"]], "split_by_axis() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.split_by_axis"]], "sum_over_axes() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.sum_over_axes"]], "tag (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.tag"]], "to_cube() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.to_cube"]], "to_unit() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.to_unit"]], "unit (gammapy.maps.map attribute)": [[185, "gammapy.maps.Map.unit"]], "upsample() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.upsample"]], "write() (gammapy.maps.map method)": [[185, "gammapy.maps.Map.write"]], "mapaxes (class in gammapy.maps)": [[186, "gammapy.maps.MapAxes"]], "assert_names() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.assert_names"]], "bin_volume() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.bin_volume"]], "center_coord (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.center_coord"]], "coord_to_idx() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.coord_to_idx"]], "coord_to_pix() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.coord_to_pix"]], "copy() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.copy"]], "count() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.count"]], "downsample() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.downsample"]], "drop() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.drop"]], "from_default() (gammapy.maps.mapaxes class method)": [[186, "gammapy.maps.MapAxes.from_default"]], "from_table() (gammapy.maps.mapaxes class method)": [[186, "gammapy.maps.MapAxes.from_table"]], "from_table_hdu() (gammapy.maps.mapaxes class method)": [[186, "gammapy.maps.MapAxes.from_table_hdu"]], "get_coord() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.get_coord"]], "index() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.index"]], "index_data() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.index_data"]], "is_allclose() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.is_allclose"]], "is_flat (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.is_flat"]], "is_unidimensional (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.is_unidimensional"]], "iter_with_reshape (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.iter_with_reshape"]], "names (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.names"]], "pad() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.pad"]], "pix_to_coord() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.pix_to_coord"]], "pix_to_idx() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.pix_to_idx"]], "primary_axis (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.primary_axis"]], "rename_axes() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.rename_axes"]], "replace() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.replace"]], "resample() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.resample"]], "reverse (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.reverse"]], "shape (gammapy.maps.mapaxes attribute)": [[186, "gammapy.maps.MapAxes.shape"]], "slice_by_idx() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.slice_by_idx"]], "squash() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.squash"]], "to_header() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.to_header"]], "to_table() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.to_table"]], "to_table_hdu() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.to_table_hdu"]], "upsample() (gammapy.maps.mapaxes method)": [[186, "gammapy.maps.MapAxes.upsample"]], "mapaxis (class in gammapy.maps)": [[187, "gammapy.maps.MapAxis"]], "as_plot_center (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.as_plot_labels"]], "as_plot_scale (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.as_plot_scale"]], "as_plot_xerr (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.assert_name"]], "bin_width (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.bin_width"]], "bounds (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.bounds"]], "center (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.center"]], "concatenate() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.concatenate"]], "coord_to_idx() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.coord_to_pix"]], "copy() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.copy"]], "downsample() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.downsample"]], "edges (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.edges"]], "edges_max (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.edges_max"]], "edges_min (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.format_plot_xaxis"]], "format_plot_yaxis() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.format_plot_yaxis"]], "from_bounds() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_bounds"]], "from_edges() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_edges"]], "from_energy_bounds() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_energy_bounds"]], "from_energy_edges() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_energy_edges"]], "from_nodes() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_nodes"]], "from_stack() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_stack"]], "from_table() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_table"]], "from_table_hdu() (gammapy.maps.mapaxis class method)": [[187, "gammapy.maps.MapAxis.from_table_hdu"]], "group_table() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.group_table"]], "interp (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.interp"]], "is_aligned() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.is_aligned"]], "is_allclose() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.is_allclose"]], "is_energy_axis (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.is_energy_axis"]], "iter_by_edges (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.iter_by_edges"]], "name (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.name"]], "nbin (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.nbin"]], "nbin_per_decade (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.nbin_per_decade"]], "node_type (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.node_type"]], "pad() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.pad"]], "pix_to_coord() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.pix_to_idx"]], "rename() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.rename"]], "round() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.round"]], "slice() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.slice"]], "squash() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.squash"]], "to_header() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.to_header"]], "to_node_type() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.to_node_type"]], "to_table() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.to_table"]], "to_table_hdu() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.to_table_hdu"]], "unit (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.unit"]], "upsample() (gammapy.maps.mapaxis method)": [[187, "gammapy.maps.MapAxis.upsample"]], "use_center_as_plot_labels (gammapy.maps.mapaxis attribute)": [[187, "gammapy.maps.MapAxis.use_center_as_plot_labels"]], "mapcoord (class in gammapy.maps)": [[188, "gammapy.maps.MapCoord"]], "apply_mask() (gammapy.maps.mapcoord method)": [[188, "gammapy.maps.MapCoord.apply_mask"]], "axis_names (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.axis_names"]], "broadcasted (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.broadcasted"]], "copy() (gammapy.maps.mapcoord method)": [[188, "gammapy.maps.MapCoord.copy"]], "create() (gammapy.maps.mapcoord class method)": [[188, "gammapy.maps.MapCoord.create"]], "flat (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.flat"]], "frame (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.frame"]], "lat (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.lat"]], "lon (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.lon"]], "match_by_name (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.match_by_name"]], "ndim (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.ndim"]], "phi (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.phi"]], "shape (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.shape"]], "size (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.size"]], "skycoord (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.skycoord"]], "theta (gammapy.maps.mapcoord attribute)": [[188, "gammapy.maps.MapCoord.theta"]], "to_frame() (gammapy.maps.mapcoord method)": [[188, "gammapy.maps.MapCoord.to_frame"]], "maps (class in gammapy.maps)": [[189, "gammapy.maps.Maps"]], "clear() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.clear"]], "from_geom() (gammapy.maps.maps class method)": [[189, "gammapy.maps.Maps.from_geom"]], "from_hdulist() (gammapy.maps.maps class method)": [[189, "gammapy.maps.Maps.from_hdulist"]], "geom (gammapy.maps.maps attribute)": [[189, "gammapy.maps.Maps.geom"]], "get() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.get"]], "items() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.items"]], "keys() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.keys"]], "pop() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.pop"]], "popitem() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.popitem"]], "read() (gammapy.maps.maps class method)": [[189, "gammapy.maps.Maps.read"]], "setdefault() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.setdefault"]], "to_hdulist() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.to_hdulist"]], "update() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.update"]], "values() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.values"]], "write() (gammapy.maps.maps method)": [[189, "gammapy.maps.Maps.write"]], "regiongeom (class in gammapy.maps)": [[190, "gammapy.maps.RegionGeom"]], "as_energy_true (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.as_energy_true"]], "axes (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.axes"]], "axes_names (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.axes_names"]], "bin_volume() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.bin_volume"]], "binsz_wcs (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.binsz_wcs"]], "center_coord (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.center_coord"]], "center_pix (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.center_pix"]], "center_skydir (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.center_skydir"]], "contains() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.contains"]], "contains_pix() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.contains_pix"]], "contains_wcs_pix() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.contains_wcs_pix"]], "coord_to_idx() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.coord_to_pix"]], "copy() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.copy"]], "create() (gammapy.maps.regiongeom class method)": [[190, "gammapy.maps.RegionGeom.create"]], "crop() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.crop"]], "data_nbytes() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.data_nbytes"]], "data_shape (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.data_shape"]], "data_shape_axes (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.data_shape_axes"]], "downsample() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.downsample"]], "drop() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.drop"]], "energy_mask() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.energy_mask"]], "frame (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.frame"]], "from_hdulist() (gammapy.maps.regiongeom class method)": [[190, "gammapy.maps.RegionGeom.from_hdulist"]], "from_regions() (gammapy.maps.regiongeom class method)": [[190, "gammapy.maps.RegionGeom.from_regions"]], "get_coord() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.get_coord"]], "get_idx() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.get_idx"]], "get_wcs_coord_and_weights() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.get_wcs_coord_and_weights"]], "has_energy_axis (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.has_energy_axis"]], "is_all_point_sky_regions (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_all_point_sky_regions"]], "is_allclose() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.is_allclose"]], "is_allsky (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_allsky"]], "is_flat (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_flat"]], "is_hpx (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_hpx"]], "is_image (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_image"]], "is_region (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_region"]], "is_regular (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.is_regular"]], "npix (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.npix"]], "pad() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.pad"]], "pix_to_coord() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.pix_to_idx"]], "plot_region() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.plot_region"]], "projection (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.projection"]], "region (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.region"]], "rename_axes() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.rename_axes"]], "replace_axis() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.replace_axis"]], "resample_axis() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.resample_axis"]], "separation() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.separation"]], "slice_by_idx() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.solid_angle"]], "squash() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.squash"]], "to_bands_hdu() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_binsz"]], "to_binsz_wcs() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_binsz_wcs"]], "to_cube() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_cube"]], "to_hdulist() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_hdulist"]], "to_image() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_image"]], "to_wcs_geom() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.to_wcs_geom"]], "union() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.union"]], "upsample() (gammapy.maps.regiongeom method)": [[190, "gammapy.maps.RegionGeom.upsample"]], "wcs (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.wcs"]], "width (gammapy.maps.regiongeom attribute)": [[190, "gammapy.maps.RegionGeom.width"]], "regionndmap (class in gammapy.maps)": [[191, "gammapy.maps.RegionNDMap"]], "coadd() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.coadd"]], "copy() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.copy"]], "create() (gammapy.maps.regionndmap class method)": [[191, "gammapy.maps.RegionNDMap.create"]], "crop() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.crop"]], "cumsum() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.cumsum"]], "cutout() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.cutout"]], "data (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.data"]], "dot() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.dot"]], "downsample() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.downsample"]], "fill_by_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.fill_events"]], "from_geom() (gammapy.maps.regionndmap static method)": [[191, "gammapy.maps.RegionNDMap.from_geom"]], "from_hdulist() (gammapy.maps.regionndmap class method)": [[191, "gammapy.maps.RegionNDMap.from_hdulist"]], "from_stack() (gammapy.maps.regionndmap class method)": [[191, "gammapy.maps.RegionNDMap.from_stack"]], "from_table() (gammapy.maps.regionndmap class method)": [[191, "gammapy.maps.RegionNDMap.from_table"]], "geom (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.geom"]], "get_by_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.get_spectrum"]], "integral() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.integral"]], "interp_by_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.is_allclose"]], "is_mask (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.iter_by_axis"]], "iter_by_axis_data() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.iter_by_axis_data"]], "iter_by_image() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.mask_nearest_position"]], "meta (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.meta"]], "normalize() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.normalize"]], "pad() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.pad"]], "plot() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot"]], "plot_grid() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot_grid"]], "plot_hist() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot_hist"]], "plot_interactive() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot_mask"]], "plot_region() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.plot_region"]], "quantity (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.quantity"]], "read() (gammapy.maps.regionndmap class method)": [[191, "gammapy.maps.RegionNDMap.read"]], "reduce() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.reproject_to_geom"]], "resample() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.resample"]], "resample_axis() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.resample_axis"]], "sample_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.split_by_axis"]], "stack() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.stack"]], "sum_over_axes() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.sum_over_axes"]], "tag (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.tag"]], "to_cube() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.to_cube"]], "to_hdulist() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.to_hdulist"]], "to_region_nd_map() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.to_region_nd_map"]], "to_table() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.to_table"]], "to_unit() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.to_unit"]], "unit (gammapy.maps.regionndmap attribute)": [[191, "gammapy.maps.RegionNDMap.unit"]], "upsample() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.upsample"]], "write() (gammapy.maps.regionndmap method)": [[191, "gammapy.maps.RegionNDMap.write"]], "timemapaxis (class in gammapy.maps)": [[192, "gammapy.maps.TimeMapAxis"]], "as_plot_center (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.as_plot_labels"]], "as_plot_xerr (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.assert_name"]], "bin_width (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.bin_width"]], "bounds (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.bounds"]], "center (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.center"]], "coord_to_idx() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.coord_to_pix"]], "copy() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.copy"]], "downsample() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.downsample"]], "edges (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.edges"]], "edges_max (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.edges_max"]], "edges_min (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.format_plot_xaxis"]], "from_gti() (gammapy.maps.timemapaxis class method)": [[192, "gammapy.maps.TimeMapAxis.from_gti"]], "from_gti_bounds() (gammapy.maps.timemapaxis class method)": [[192, "gammapy.maps.TimeMapAxis.from_gti_bounds"]], "from_table() (gammapy.maps.timemapaxis class method)": [[192, "gammapy.maps.TimeMapAxis.from_table"]], "from_time_bounds() (gammapy.maps.timemapaxis class method)": [[192, "gammapy.maps.TimeMapAxis.from_time_bounds"]], "from_time_edges() (gammapy.maps.timemapaxis class method)": [[192, "gammapy.maps.TimeMapAxis.from_time_edges"]], "group_table() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.group_table"]], "interp (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.interp"]], "is_aligned() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.is_aligned"]], "is_allclose() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.is_allclose"]], "is_contiguous (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.is_contiguous"]], "iter_by_edges (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.iter_by_edges"]], "name (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.name"]], "nbin (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.nbin"]], "node_type (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.node_type"]], "pix_to_coord() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.timemapaxis static method)": [[192, "gammapy.maps.TimeMapAxis.pix_to_idx"]], "reference_time (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.reference_time"]], "slice() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.slice"]], "squash() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.squash"]], "time_bounds (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_bounds"]], "time_delta (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_delta"]], "time_edges (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_edges"]], "time_format (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_format"]], "time_max (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_max"]], "time_mid (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_mid"]], "time_min (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.time_min"]], "to_contiguous() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.to_contiguous"]], "to_gti() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.to_gti"]], "to_header() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.to_header"]], "unit (gammapy.maps.timemapaxis attribute)": [[192, "gammapy.maps.TimeMapAxis.unit"]], "upsample() (gammapy.maps.timemapaxis method)": [[192, "gammapy.maps.TimeMapAxis.upsample"]], "wcsgeom (class in gammapy.maps)": [[193, "gammapy.maps.WcsGeom"]], "as_energy_true (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.as_energy_true"]], "axes (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.axes"]], "axes_names (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.axes_names"]], "bin_volume() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.bin_volume"]], "binary_structure() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.binary_structure"]], "boundary_mask() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.boundary_mask"]], "center_coord (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.center_coord"]], "center_pix (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.center_pix"]], "center_skydir (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.center_skydir"]], "contains() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.contains"]], "contains_pix() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.contains_pix"]], "coord_to_idx() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.coord_to_pix"]], "copy() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.copy"]], "create() (gammapy.maps.wcsgeom class method)": [[193, "gammapy.maps.WcsGeom.create"]], "crop() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.crop"]], "cutout() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.cutout"]], "cutout_slices() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.cutout_slices"]], "data_nbytes() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.data_nbytes"]], "data_shape (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.data_shape"]], "data_shape_axes (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.data_shape_axes"]], "data_shape_image (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.data_shape_image"]], "downsample() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.downsample"]], "drop() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.drop"]], "energy_mask() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.energy_mask"]], "footprint (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.footprint"]], "footprint_rectangle_sky_region (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.footprint_rectangle_sky_region"]], "frame (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.frame"]], "from_aligned() (gammapy.maps.wcsgeom class method)": [[193, "gammapy.maps.WcsGeom.from_aligned"]], "from_hdulist() (gammapy.maps.wcsgeom class method)": [[193, "gammapy.maps.WcsGeom.from_hdulist"]], "from_header() (gammapy.maps.wcsgeom class method)": [[193, "gammapy.maps.WcsGeom.from_header"]], "get_coord() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.get_coord"]], "get_idx() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.get_idx"]], "get_pix() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.get_pix"]], "has_energy_axis (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.has_energy_axis"]], "is_aligned() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.is_aligned"]], "is_allclose() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.is_allclose"]], "is_allsky (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_allsky"]], "is_flat (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_flat"]], "is_hpx (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_hpx"]], "is_image (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_image"]], "is_region (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_region"]], "is_regular (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.is_regular"]], "ndim (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.ndim"]], "npix (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.npix"]], "pad() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.pad"]], "pix_to_coord() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.pix_to_idx"]], "pixel_area (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.pixel_area"]], "pixel_scales (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.pixel_scales"]], "projection (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.projection"]], "region_mask() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.region_mask"]], "region_weights() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.region_weights"]], "rename_axes() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.rename_axes"]], "replace_axis() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.replace_axis"]], "resample_axis() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.resample_axis"]], "separation() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.separation"]], "shape_axes (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.shape_axes"]], "slice_by_idx() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.solid_angle"]], "squash() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.squash"]], "to_bands_hdu() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_binsz"]], "to_cube() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_cube"]], "to_even_npix() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_even_npix"]], "to_header() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_header"]], "to_image() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_image"]], "to_odd_npix() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.to_odd_npix"]], "upsample() (gammapy.maps.wcsgeom method)": [[193, "gammapy.maps.WcsGeom.upsample"]], "wcs (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.wcs"]], "width (gammapy.maps.wcsgeom attribute)": [[193, "gammapy.maps.WcsGeom.width"]], "wcsmap (class in gammapy.maps)": [[194, "gammapy.maps.WcsMap"]], "coadd() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.coadd"]], "copy() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.copy"]], "create() (gammapy.maps.wcsmap class method)": [[194, "gammapy.maps.WcsMap.create"]], "crop() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.crop"]], "cumsum() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.cumsum"]], "data (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.data"]], "dot() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.dot"]], "downsample() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.downsample"]], "fill_by_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.fill_by_pix"]], "fill_events() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.fill_events"]], "from_geom() (gammapy.maps.wcsmap static method)": [[194, "gammapy.maps.WcsMap.from_geom"]], "from_hdulist() (gammapy.maps.wcsmap class method)": [[194, "gammapy.maps.WcsMap.from_hdulist"]], "from_stack() (gammapy.maps.wcsmap class method)": [[194, "gammapy.maps.WcsMap.from_stack"]], "geom (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.geom"]], "get_by_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_by_coord"]], "get_by_idx() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_by_idx"]], "get_by_pix() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.get_spectrum"]], "integral() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.integral"]], "interp_by_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.interp_to_geom"]], "is_allclose() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.is_allclose"]], "is_mask (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.is_mask"]], "iter_by_axis() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.mask_nearest_position"]], "meta (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.meta"]], "normalize() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.normalize"]], "pad() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.pad"]], "plot_grid() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.plot_grid"]], "plot_interactive() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.plot_interactive"]], "quantity (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.quantity"]], "read() (gammapy.maps.wcsmap static method)": [[194, "gammapy.maps.WcsMap.read"]], "reduce() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.reduce"]], "reduce_over_axes() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.rename_axes"]], "reorder_axes() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.reproject_to_geom"]], "resample() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.resample"]], "resample_axis() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.resample_axis"]], "sample_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.sample_coord"]], "set_by_coord() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.set_by_coord"]], "set_by_idx() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.set_by_idx"]], "set_by_pix() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.split_by_axis"]], "sum_over_axes() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.sum_over_axes"]], "tag (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.tag"]], "to_cube() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.to_cube"]], "to_hdu() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.to_hdu"]], "to_hdulist() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.to_hdulist"]], "to_unit() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.to_unit"]], "unit (gammapy.maps.wcsmap attribute)": [[194, "gammapy.maps.WcsMap.unit"]], "upsample() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.upsample"]], "write() (gammapy.maps.wcsmap method)": [[194, "gammapy.maps.WcsMap.write"]], "wcsndmap (class in gammapy.maps)": [[195, "gammapy.maps.WcsNDMap"]], "binary_dilate() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.binary_dilate"]], "binary_erode() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.binary_erode"]], "coadd() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.coadd"]], "convolve() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.convolve"]], "copy() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.copy"]], "create() (gammapy.maps.wcsndmap class method)": [[195, "gammapy.maps.WcsNDMap.create"]], "crop() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.crop"]], "cumsum() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.cumsum"]], "cutout() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.cutout"]], "cutout_and_mask_region() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.cutout_and_mask_region"]], "data (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.data"]], "dot() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.dot"]], "downsample() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.downsample"]], "fill_by_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.fill_events"]], "from_geom() (gammapy.maps.wcsndmap static method)": [[195, "gammapy.maps.WcsNDMap.from_geom"]], "from_hdu() (gammapy.maps.wcsndmap class method)": [[195, "gammapy.maps.WcsNDMap.from_hdu"]], "from_hdulist() (gammapy.maps.wcsndmap class method)": [[195, "gammapy.maps.WcsNDMap.from_hdulist"]], "from_stack() (gammapy.maps.wcsndmap class method)": [[195, "gammapy.maps.WcsNDMap.from_stack"]], "geom (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.geom"]], "get_by_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.get_spectrum"]], "integral() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.integral"]], "interp_by_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.is_allclose"]], "is_mask (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.iter_by_image_index"]], "mask_contains_region() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.mask_contains_region"]], "mask_nearest_position() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.mask_nearest_position"]], "meta (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.meta"]], "normalize() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.normalize"]], "pad() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.pad"]], "plot() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.plot"]], "plot_grid() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.plot_grid"]], "plot_interactive() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.plot_mask"]], "quantity (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.quantity"]], "read() (gammapy.maps.wcsndmap static method)": [[195, "gammapy.maps.WcsNDMap.read"]], "reduce() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.reproject_to_geom"]], "resample() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.resample"]], "resample_axis() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.resample_axis"]], "sample_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.slice_by_idx"]], "smooth() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.smooth"]], "split_by_axis() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.split_by_axis"]], "stack() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.stack"]], "sum_over_axes() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.sum_over_axes"]], "tag (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.tag"]], "to_cube() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_cube"]], "to_hdu() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_hdu"]], "to_hdulist() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_hdulist"]], "to_region_nd_map() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_region_nd_map"]], "to_region_nd_map_histogram() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_region_nd_map_histogram"]], "to_unit() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.to_unit"]], "unit (gammapy.maps.wcsndmap attribute)": [[195, "gammapy.maps.WcsNDMap.unit"]], "upsample() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.upsample"]], "write() (gammapy.maps.wcsndmap method)": [[195, "gammapy.maps.WcsNDMap.write"]], "containment_radius() (in module gammapy.maps)": [[196, "gammapy.maps.containment_radius"]], "containment_region() (in module gammapy.maps)": [[197, "gammapy.maps.containment_region"]], "covariance (class in gammapy.modeling)": [[198, "gammapy.modeling.Covariance"]], "correlation (gammapy.modeling.covariance attribute)": [[198, "gammapy.modeling.Covariance.correlation"]], "data (gammapy.modeling.covariance attribute)": [[198, "gammapy.modeling.Covariance.data"]], "from_factor_matrix() (gammapy.modeling.covariance class method)": [[198, "gammapy.modeling.Covariance.from_factor_matrix"]], "from_stack() (gammapy.modeling.covariance class method)": [[198, "gammapy.modeling.Covariance.from_stack"]], "get_subcovariance() (gammapy.modeling.covariance method)": [[198, "gammapy.modeling.Covariance.get_subcovariance"]], "plot_correlation() (gammapy.modeling.covariance method)": [[198, "gammapy.modeling.Covariance.plot_correlation"]], "scipy_mvn (gammapy.modeling.covariance attribute)": [[198, "gammapy.modeling.Covariance.scipy_mvn"]], "set_subcovariance() (gammapy.modeling.covariance method)": [[198, "gammapy.modeling.Covariance.set_subcovariance"]], "shape (gammapy.modeling.covariance attribute)": [[198, "gammapy.modeling.Covariance.shape"]], "fit (class in gammapy.modeling)": [[199, "gammapy.modeling.Fit"]], "confidence() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.confidence"]], "covariance() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.covariance"]], "optimize() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.optimize"]], "run() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.run"]], "stat_contour() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.stat_contour"]], "stat_profile() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.stat_profile"]], "stat_surface() (gammapy.modeling.fit method)": [[199, "gammapy.modeling.Fit.stat_surface"]], "parameter (class in gammapy.modeling)": [[200, "gammapy.modeling.Parameter"]], "autoscale() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.autoscale"]], "check_limits() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.check_limits"]], "conf_max (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.conf_max"]], "conf_min (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.conf_min"]], "copy() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.copy"]], "error (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.error"]], "factor (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.factor"]], "factor_max (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.factor_max"]], "factor_min (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.factor_min"]], "frozen (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.frozen"]], "is_norm (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.is_norm"]], "max (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.max"]], "min (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.min"]], "name (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.name"]], "norm_parameters (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.norm_parameters"]], "prior (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.prior"]], "prior_stat_sum() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.prior_stat_sum"]], "quantity (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.quantity"]], "scale (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scale"]], "scale_method (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scale_method"]], "scan_max (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scan_max"]], "scan_min (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scan_min"]], "scan_n_sigma (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scan_n_sigma"]], "scan_values (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.scan_values"]], "to_dict() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.to_dict"]], "type (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.type"]], "unit (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.unit"]], "update_from_dict() (gammapy.modeling.parameter method)": [[200, "gammapy.modeling.Parameter.update_from_dict"]], "value (gammapy.modeling.parameter attribute)": [[200, "gammapy.modeling.Parameter.value"]], "parameters (class in gammapy.modeling)": [[201, "gammapy.modeling.Parameters"]], "autoscale() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.autoscale"]], "check_limits() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.check_limits"]], "copy() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.copy"]], "count() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.count"]], "free_parameters (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.free_parameters"]], "freeze_all() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.freeze_all"]], "from_dict() (gammapy.modeling.parameters class method)": [[201, "gammapy.modeling.Parameters.from_dict"]], "from_stack() (gammapy.modeling.parameters class method)": [[201, "gammapy.modeling.Parameters.from_stack"]], "index() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.index"]], "max (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.max"]], "min (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.min"]], "names (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.names"]], "norm_parameters (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.norm_parameters"]], "prior (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.prior"]], "prior_stat_sum() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.prior_stat_sum"]], "restore_status() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.restore_status"]], "select() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.select"]], "set_parameter_factors() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.set_parameter_factors"]], "to_dict() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.to_dict"]], "to_table() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.to_table"]], "types (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.types"]], "unfreeze_all() (gammapy.modeling.parameters method)": [[201, "gammapy.modeling.Parameters.unfreeze_all"]], "unique_parameters (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.unique_parameters"]], "value (gammapy.modeling.parameters attribute)": [[201, "gammapy.modeling.Parameters.value"]], "priorparameter (class in gammapy.modeling)": [[202, "gammapy.modeling.PriorParameter"]], "autoscale() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.autoscale"]], "check_limits() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.check_limits"]], "conf_max (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.conf_max"]], "conf_min (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.conf_min"]], "copy() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.copy"]], "error (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.error"]], "factor (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.factor"]], "factor_max (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.factor_max"]], "factor_min (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.factor_min"]], "frozen (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.frozen"]], "is_norm (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.is_norm"]], "max (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.max"]], "min (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.min"]], "name (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.name"]], "norm_parameters (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.norm_parameters"]], "prior (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.prior"]], "prior_stat_sum() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.prior_stat_sum"]], "quantity (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.quantity"]], "scale (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scale"]], "scale_method (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scale_method"]], "scan_max (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scan_max"]], "scan_min (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scan_min"]], "scan_n_sigma (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scan_n_sigma"]], "scan_values (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.scan_values"]], "to_dict() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.to_dict"]], "type (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.type"]], "unit (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.unit"]], "update_from_dict() (gammapy.modeling.priorparameter method)": [[202, "gammapy.modeling.PriorParameter.update_from_dict"]], "value (gammapy.modeling.priorparameter attribute)": [[202, "gammapy.modeling.PriorParameter.value"]], "priorparameters (class in gammapy.modeling)": [[203, "gammapy.modeling.PriorParameters"]], "autoscale() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.autoscale"]], "check_limits() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.check_limits"]], "copy() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.copy"]], "count() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.count"]], "free_parameters (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.free_parameters"]], "freeze_all() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.freeze_all"]], "from_dict() (gammapy.modeling.priorparameters class method)": [[203, "gammapy.modeling.PriorParameters.from_dict"]], "from_stack() (gammapy.modeling.priorparameters class method)": [[203, "gammapy.modeling.PriorParameters.from_stack"]], "index() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.index"]], "max (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.max"]], "min (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.min"]], "names (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.names"]], "norm_parameters (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.norm_parameters"]], "prior (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.prior"]], "prior_stat_sum() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.prior_stat_sum"]], "restore_status() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.restore_status"]], "select() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.select"]], "set_parameter_factors() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.set_parameter_factors"]], "to_dict() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.to_dict"]], "to_table() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.to_table"]], "types (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.types"]], "unfreeze_all() (gammapy.modeling.priorparameters method)": [[203, "gammapy.modeling.PriorParameters.unfreeze_all"]], "unique_parameters (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.unique_parameters"]], "value (gammapy.modeling.priorparameters attribute)": [[203, "gammapy.modeling.PriorParameters.value"]], "brokenpowerlawspectralmodel (class in gammapy.modeling.models)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.default_parameters"]], "ebreak (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.ebreak"]], "energy_flux() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.brokenpowerlawspectralmodel static method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.brokenpowerlawspectralmodel class method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.brokenpowerlawspectralmodel class method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.frozen"]], "index1 (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.index1"]], "index2 (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.index2"]], "integral() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[204, "gammapy.modeling.models.BrokenPowerLawSpectralModel.unfreeze"]], "compoundspectralmodel (class in gammapy.modeling.models)": [[205, "gammapy.modeling.models.CompoundSpectralModel"]], "__call__() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.__call__"]], "copy() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.copy"]], "covariance (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.compoundspectralmodel class method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.compoundspectralmodel class method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.frozen"]], "integral() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.to_dict"]], "type (gammapy.modeling.models.compoundspectralmodel attribute)": [[205, "gammapy.modeling.models.CompoundSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.compoundspectralmodel method)": [[205, "gammapy.modeling.models.CompoundSpectralModel.unfreeze"]], "constantfluxspatialmodel (class in gammapy.modeling.models)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel"]], "__call__() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.__call__"]], "copy() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.copy"]], "covariance (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_region"]], "frame (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.frame"]], "freeze() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.from_position"]], "frozen (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.position"]], "position_error (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.reassign"]], "tag (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.to_region"]], "type (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.constantfluxspatialmodel method)": [[206, "gammapy.modeling.models.ConstantFluxSpatialModel.unfreeze"]], "constantspatialmodel (class in gammapy.modeling.models)": [[207, "gammapy.modeling.models.ConstantSpatialModel"]], "__call__() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.__call__"]], "copy() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.copy"]], "covariance (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constantspatialmodel static method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.evaluation_region"]], "frame (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.frame"]], "freeze() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.constantspatialmodel class method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantspatialmodel class method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.constantspatialmodel class method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.from_position"]], "frozen (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.position"]], "position_error (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.reassign"]], "tag (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.to_region"]], "type (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.constantspatialmodel method)": [[207, "gammapy.modeling.models.ConstantSpatialModel.unfreeze"]], "value (gammapy.modeling.models.constantspatialmodel attribute)": [[207, "gammapy.modeling.models.ConstantSpatialModel.value"]], "constantspectralmodel (class in gammapy.modeling.models)": [[208, "gammapy.modeling.models.ConstantSpectralModel"]], "__call__() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.__call__"]], "const (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.const"]], "copy() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.copy"]], "covariance (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.constantspectralmodel static method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.constantspectralmodel class method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantspectralmodel class method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.frozen"]], "integral() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.to_dict"]], "type (gammapy.modeling.models.constantspectralmodel attribute)": [[208, "gammapy.modeling.models.ConstantSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.constantspectralmodel method)": [[208, "gammapy.modeling.models.ConstantSpectralModel.unfreeze"]], "constanttemporalmodel (class in gammapy.modeling.models)": [[209, "gammapy.modeling.models.ConstantTemporalModel"]], "__call__() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.__call__"]], "copy() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.copy"]], "covariance (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constanttemporalmodel static method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.constanttemporalmodel class method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constanttemporalmodel class method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.frozen"]], "integral() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.parameters"]], "plot() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.plot"]], "reassign() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.sample_time"]], "tag (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.constanttemporalmodel static method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.to_dict"]], "type (gammapy.modeling.models.constanttemporalmodel attribute)": [[209, "gammapy.modeling.models.ConstantTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.constanttemporalmodel method)": [[209, "gammapy.modeling.models.ConstantTemporalModel.unfreeze"]], "datasetmodels (class in gammapy.modeling.models)": [[210, "gammapy.modeling.models.DatasetModels"]], "copy() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.copy"]], "count() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.count"]], "covariance (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.covariance"]], "freeze() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.freeze"]], "from_dict() (gammapy.modeling.models.datasetmodels class method)": [[210, "gammapy.modeling.models.DatasetModels.from_dict"]], "from_yaml() (gammapy.modeling.models.datasetmodels class method)": [[210, "gammapy.modeling.models.DatasetModels.from_yaml"]], "frozen (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.frozen"]], "index() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.index"]], "names (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.names"]], "parameters (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.parameters"]], "parameters_unique_names (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.parameters_unique_names"]], "plot_positions() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.plot_positions"]], "plot_regions() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.plot_regions"]], "positions (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.positions"]], "read() (gammapy.modeling.models.datasetmodels class method)": [[210, "gammapy.modeling.models.DatasetModels.read"]], "read_covariance() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.read_covariance"]], "reassign() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.reassign"]], "restore_status() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.restore_status"]], "select() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.select"]], "select_from_geom() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.select_from_geom"]], "select_mask() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.select_mask"]], "select_region() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.select_region"]], "selection_mask() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.selection_mask"]], "set_parameters_bounds() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.set_parameters_bounds"]], "to_dict() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_dict"]], "to_parameters_table() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_parameters_table"]], "to_regions() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_regions"]], "to_template_sky_model() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_template_sky_model"]], "to_template_spectral_model() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_template_spectral_model"]], "to_yaml() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.to_yaml"]], "unfreeze() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.unfreeze"]], "update_link_label() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.update_link_label"]], "update_parameters_from_table() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.update_parameters_from_table"]], "wcs_geom (gammapy.modeling.models.datasetmodels attribute)": [[210, "gammapy.modeling.models.DatasetModels.wcs_geom"]], "write() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.write"]], "write_covariance() (gammapy.modeling.models.datasetmodels method)": [[210, "gammapy.modeling.models.DatasetModels.write_covariance"]], "diskspatialmodel (class in gammapy.modeling.models)": [[211, "gammapy.modeling.models.DiskSpatialModel"]], "__call__() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.__call__"]], "copy() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.copy"]], "covariance (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.default_parameters"]], "e (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.e"]], "edge_width (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.edge_width"]], "evaluate() (gammapy.modeling.models.diskspatialmodel static method)": [[211, "gammapy.modeling.models.DiskSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.diskspatialmodel class method)": [[211, "gammapy.modeling.models.DiskSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.diskspatialmodel class method)": [[211, "gammapy.modeling.models.DiskSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.diskspatialmodel class method)": [[211, "gammapy.modeling.models.DiskSpatialModel.from_position"]], "from_region() (gammapy.modeling.models.diskspatialmodel class method)": [[211, "gammapy.modeling.models.DiskSpatialModel.from_region"]], "frozen (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.parameters"]], "phi (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.position"]], "position_error (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.r_0"]], "reassign() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.reassign"]], "tag (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.to_region"]], "type (gammapy.modeling.models.diskspatialmodel attribute)": [[211, "gammapy.modeling.models.DiskSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.diskspatialmodel method)": [[211, "gammapy.modeling.models.DiskSpatialModel.unfreeze"]], "eblabsorptionnormspectralmodel (class in gammapy.modeling.models)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel"]], "__call__() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.__call__"]], "alpha_norm (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.alpha_norm"]], "copy() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.plot_error"]], "read() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.read"]], "read_builtin() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.read_builtin"]], "reassign() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.reassign"]], "redshift (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.redshift"]], "reference_fluxes() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[212, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.unfreeze"]], "ebl_data_builtin (in module gammapy.modeling.models)": [[213, "gammapy.modeling.models.EBL_DATA_BUILTIN"]], "expcutoffpowerlaw3fglspectralmodel (class in gammapy.modeling.models)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.default_parameters"]], "ecut (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.ecut"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel static method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel class method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel class method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[214, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.unfreeze"]], "expcutoffpowerlawnormspectralmodel (class in gammapy.modeling.models)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.__call__"]], "alpha (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.alpha"]], "copy() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel static method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel class method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel class method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.is_norm_spectral_model"]], "lambda_ (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.lambda_"]], "norm (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[215, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.unfreeze"]], "expcutoffpowerlawspectralmodel (class in gammapy.modeling.models)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.__call__"]], "alpha (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.alpha"]], "amplitude (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.default_parameters"]], "e_peak (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.e_peak"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlawspectralmodel static method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlawspectralmodel class method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlawspectralmodel class method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.is_norm_spectral_model"]], "lambda_ (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.lambda_"]], "parameters (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[216, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.unfreeze"]], "expdecaytemporalmodel (class in gammapy.modeling.models)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel"]], "__call__() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.__call__"]], "copy() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.copy"]], "covariance (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.expdecaytemporalmodel static method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.expdecaytemporalmodel class method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expdecaytemporalmodel class method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.frozen"]], "integral() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.parameters"]], "plot() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.plot"]], "reassign() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.sample_time"]], "t0 (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.t0"]], "t_ref (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.t_ref"]], "tag (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.expdecaytemporalmodel static method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.to_dict"]], "type (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.expdecaytemporalmodel method)": [[217, "gammapy.modeling.models.ExpDecayTemporalModel.unfreeze"]], "fovbackgroundmodel (class in gammapy.modeling.models)": [[218, "gammapy.modeling.models.FoVBackgroundModel"]], "contributes() (gammapy.modeling.models.fovbackgroundmodel static method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.contributes"]], "copy() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.copy"]], "covariance (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.covariance"]], "default_parameters (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.default_parameters"]], "evaluate() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.evaluate_geom"]], "freeze() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.freeze"]], "from_dict() (gammapy.modeling.models.fovbackgroundmodel class method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.from_dict"]], "from_parameters() (gammapy.modeling.models.fovbackgroundmodel class method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.from_parameters"]], "frozen (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.frozen"]], "name (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.name"]], "parameters (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.parameters"]], "reassign() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.reassign"]], "reset_to_default() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.reset_to_default"]], "spatial_model (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.spatial_model"]], "spectral_model (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.spectral_model"]], "tag (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.tag"]], "to_dict() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.to_dict"]], "type (gammapy.modeling.models.fovbackgroundmodel attribute)": [[218, "gammapy.modeling.models.FoVBackgroundModel.type"]], "unfreeze() (gammapy.modeling.models.fovbackgroundmodel method)": [[218, "gammapy.modeling.models.FoVBackgroundModel.unfreeze"]], "gaussianspatialmodel (class in gammapy.modeling.models)": [[219, "gammapy.modeling.models.GaussianSpatialModel"]], "__call__() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.__call__"]], "copy() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.copy"]], "covariance (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.default_parameters"]], "e (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.e"]], "evaluate() (gammapy.modeling.models.gaussianspatialmodel static method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussianspatialmodel class method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussianspatialmodel class method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.gaussianspatialmodel class method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.from_position"]], "frozen (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.parameters"]], "phi (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.position"]], "position_error (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.reassign"]], "sigma (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.sigma"]], "tag (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.to_region"]], "type (gammapy.modeling.models.gaussianspatialmodel attribute)": [[219, "gammapy.modeling.models.GaussianSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.gaussianspatialmodel method)": [[219, "gammapy.modeling.models.GaussianSpatialModel.unfreeze"]], "gaussianspectralmodel (class in gammapy.modeling.models)": [[220, "gammapy.modeling.models.GaussianSpectralModel"]], "__call__() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.copy"]], "covariance (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.gaussianspectralmodel static method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussianspectralmodel class method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussianspectralmodel class method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.frozen"]], "integral() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.is_norm_spectral_model"]], "mean (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.mean"]], "parameters (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.reference_fluxes"]], "sigma (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.sigma"]], "spectral_index() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.to_dict"]], "type (gammapy.modeling.models.gaussianspectralmodel attribute)": [[220, "gammapy.modeling.models.GaussianSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.gaussianspectralmodel method)": [[220, "gammapy.modeling.models.GaussianSpectralModel.unfreeze"]], "gaussiantemporalmodel (class in gammapy.modeling.models)": [[221, "gammapy.modeling.models.GaussianTemporalModel"]], "__call__() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.__call__"]], "copy() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.copy"]], "covariance (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.gaussiantemporalmodel static method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussiantemporalmodel class method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussiantemporalmodel class method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.frozen"]], "integral() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.parameters"]], "plot() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.plot"]], "reassign() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.sample_time"]], "sigma (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.sigma"]], "t_ref (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.t_ref"]], "tag (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.gaussiantemporalmodel static method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.to_dict"]], "type (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[221, "gammapy.modeling.models.GaussianTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.gaussiantemporalmodel method)": [[221, "gammapy.modeling.models.GaussianTemporalModel.unfreeze"]], "generalizedgaussianspatialmodel (class in gammapy.modeling.models)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel"]], "__call__() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.__call__"]], "copy() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.copy"]], "covariance (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.default_parameters"]], "e (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.e"]], "eta (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.eta"]], "evaluate() (gammapy.modeling.models.generalizedgaussianspatialmodel static method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_position"]], "frozen (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.parameters"]], "phi (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position"]], "position_error (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.r_0"]], "reassign() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.reassign"]], "tag (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.to_region"]], "type (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[222, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.unfreeze"]], "generalizedgaussiantemporalmodel (class in gammapy.modeling.models)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel"]], "__call__() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.__call__"]], "copy() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.copy"]], "covariance (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.default_parameters"]], "eta (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.eta"]], "evaluate() (gammapy.modeling.models.generalizedgaussiantemporalmodel static method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.generalizedgaussiantemporalmodel class method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.generalizedgaussiantemporalmodel class method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.frozen"]], "integral() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.parameters"]], "plot() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.plot"]], "reassign() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.sample_time"]], "t_decay (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_decay"]], "t_ref (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_ref"]], "t_rise (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_rise"]], "tag (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.generalizedgaussiantemporalmodel static method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.to_dict"]], "type (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[223, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.unfreeze"]], "lightcurvetemplatetemporalmodel (class in gammapy.modeling.models)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel"]], "__call__() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.__call__"]], "copy() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.copy"]], "covariance (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_parameters"]], "from_table() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_table"]], "frozen (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.frozen"]], "integral() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.parameters"]], "plot() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.plot"]], "read() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.read"]], "reassign() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.t_ref"]], "tag (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.lightcurvetemplatetemporalmodel static method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.to_dict"]], "to_table() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.to_table"]], "type (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.unfreeze"]], "write() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[224, "gammapy.modeling.models.LightCurveTemplateTemporalModel.write"]], "lineartemporalmodel (class in gammapy.modeling.models)": [[225, "gammapy.modeling.models.LinearTemporalModel"]], "__call__() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.__call__"]], "alpha (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.alpha"]], "beta (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.beta"]], "copy() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.copy"]], "covariance (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.lineartemporalmodel static method)": [[225, "gammapy.modeling.models.LinearTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.lineartemporalmodel class method)": [[225, "gammapy.modeling.models.LinearTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.lineartemporalmodel class method)": [[225, "gammapy.modeling.models.LinearTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.frozen"]], "integral() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.parameters"]], "plot() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.plot"]], "reassign() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.t_ref"]], "tag (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.lineartemporalmodel static method)": [[225, "gammapy.modeling.models.LinearTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.to_dict"]], "type (gammapy.modeling.models.lineartemporalmodel attribute)": [[225, "gammapy.modeling.models.LinearTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.lineartemporalmodel method)": [[225, "gammapy.modeling.models.LinearTemporalModel.unfreeze"]], "logparabolanormspectralmodel (class in gammapy.modeling.models)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel"]], "__call__() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.__call__"]], "alpha (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.alpha"]], "beta (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.beta"]], "copy() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.logparabolanormspectralmodel static method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_dict"]], "from_log10() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_log10"]], "from_parameters() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[226, "gammapy.modeling.models.LogParabolaNormSpectralModel.unfreeze"]], "logparabolaspectralmodel (class in gammapy.modeling.models)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel"]], "__call__() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.__call__"]], "alpha (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.alpha"]], "amplitude (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.amplitude"]], "beta (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.beta"]], "copy() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.copy"]], "covariance (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.default_parameters"]], "e_peak (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.e_peak"]], "energy_flux() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.logparabolaspectralmodel static method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.from_dict"]], "from_log10() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.from_log10"]], "from_parameters() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.frozen"]], "integral() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.reassign"]], "reference (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.to_dict"]], "type (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.logparabolaspectralmodel method)": [[227, "gammapy.modeling.models.LogParabolaSpectralModel.unfreeze"]], "model_registry (in module gammapy.modeling.models)": [[228, "gammapy.modeling.models.MODEL_REGISTRY"]], "meyercrabspectralmodel (class in gammapy.modeling.models)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel"]], "__call__() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.__call__"]], "coefficients (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.coefficients"]], "copy() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.copy"]], "covariance (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.meyercrabspectralmodel static method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.meyercrabspectralmodel class method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.meyercrabspectralmodel class method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.frozen"]], "integral() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.norm"]], "parameters (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.spectral_index_error"]], "to_dict() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.to_dict"]], "type (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.meyercrabspectralmodel method)": [[229, "gammapy.modeling.models.MeyerCrabSpectralModel.unfreeze"]], "model (class in gammapy.modeling.models)": [[230, "gammapy.modeling.models.Model"]], "create() (gammapy.modeling.models.model static method)": [[230, "gammapy.modeling.models.Model.create"]], "from_dict() (gammapy.modeling.models.model static method)": [[230, "gammapy.modeling.models.Model.from_dict"]], "modelbase (class in gammapy.modeling.models)": [[231, "gammapy.modeling.models.ModelBase"]], "copy() (gammapy.modeling.models.modelbase method)": [[231, "gammapy.modeling.models.ModelBase.copy"]], "covariance (gammapy.modeling.models.modelbase attribute)": [[231, "gammapy.modeling.models.ModelBase.covariance"]], "freeze() (gammapy.modeling.models.modelbase method)": [[231, "gammapy.modeling.models.ModelBase.freeze"]], "from_dict() (gammapy.modeling.models.modelbase class method)": [[231, "gammapy.modeling.models.ModelBase.from_dict"]], "from_parameters() (gammapy.modeling.models.modelbase class method)": [[231, "gammapy.modeling.models.ModelBase.from_parameters"]], "frozen (gammapy.modeling.models.modelbase attribute)": [[231, "gammapy.modeling.models.ModelBase.frozen"]], "parameters (gammapy.modeling.models.modelbase attribute)": [[231, "gammapy.modeling.models.ModelBase.parameters"]], "reassign() (gammapy.modeling.models.modelbase method)": [[231, "gammapy.modeling.models.ModelBase.reassign"]], "to_dict() (gammapy.modeling.models.modelbase method)": [[231, "gammapy.modeling.models.ModelBase.to_dict"]], "type (gammapy.modeling.models.modelbase attribute)": [[231, "gammapy.modeling.models.ModelBase.type"]], "unfreeze() (gammapy.modeling.models.modelbase method)": [[231, "gammapy.modeling.models.ModelBase.unfreeze"]], "models (class in gammapy.modeling.models)": [[232, "gammapy.modeling.models.Models"]], "append() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.append"]], "clear() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.clear"]], "copy() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.copy"]], "count() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.count"]], "covariance (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.covariance"]], "extend() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.extend"]], "freeze() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.freeze"]], "from_dict() (gammapy.modeling.models.models class method)": [[232, "gammapy.modeling.models.Models.from_dict"]], "from_yaml() (gammapy.modeling.models.models class method)": [[232, "gammapy.modeling.models.Models.from_yaml"]], "frozen (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.frozen"]], "index() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.index"]], "insert() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.insert"]], "names (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.names"]], "parameters (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.parameters"]], "parameters_unique_names (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.parameters_unique_names"]], "plot_positions() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.plot_positions"]], "plot_regions() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.plot_regions"]], "pop() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.pop"]], "positions (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.positions"]], "read() (gammapy.modeling.models.models class method)": [[232, "gammapy.modeling.models.Models.read"]], "read_covariance() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.read_covariance"]], "reassign() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.reassign"]], "remove() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.remove"]], "restore_status() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.restore_status"]], "reverse() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.reverse"]], "select() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.select"]], "select_from_geom() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.select_from_geom"]], "select_mask() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.select_mask"]], "select_region() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.select_region"]], "selection_mask() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.selection_mask"]], "set_parameters_bounds() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.set_parameters_bounds"]], "set_prior() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.set_prior"]], "to_dict() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_dict"]], "to_parameters_table() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_parameters_table"]], "to_regions() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_regions"]], "to_template_sky_model() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_template_sky_model"]], "to_template_spectral_model() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_template_spectral_model"]], "to_yaml() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.to_yaml"]], "unfreeze() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.unfreeze"]], "update_link_label() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.update_link_label"]], "update_parameters_from_table() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.update_parameters_from_table"]], "wcs_geom (gammapy.modeling.models.models attribute)": [[232, "gammapy.modeling.models.Models.wcs_geom"]], "write() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.write"]], "write_covariance() (gammapy.modeling.models.models method)": [[232, "gammapy.modeling.models.Models.write_covariance"]], "naimaspectralmodel (class in gammapy.modeling.models)": [[233, "gammapy.modeling.models.NaimaSpectralModel"]], "__call__() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.__call__"]], "copy() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.copy"]], "covariance (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.naimaspectralmodel class method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.naimaspectralmodel class method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.frozen"]], "include_ssc (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.include_ssc"]], "integral() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.parameters"]], "particle_distribution (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.particle_distribution"]], "pivot_energy (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.spectral_index_error"]], "ssc_model (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.ssc_model"]], "tag (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.to_dict"]], "type (gammapy.modeling.models.naimaspectralmodel attribute)": [[233, "gammapy.modeling.models.NaimaSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.naimaspectralmodel method)": [[233, "gammapy.modeling.models.NaimaSpectralModel.unfreeze"]], "piecewisenormspatialmodel (class in gammapy.modeling.models)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel"]], "__call__() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.__call__"]], "coords (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.coords"]], "copy() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.copy"]], "covariance (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_position"]], "frozen (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.is_energy_dependent"]], "norms (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.norms"]], "parameters (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.position"]], "position_error (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.reassign"]], "tag (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.to_dict"]], "type (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[234, "gammapy.modeling.models.PiecewiseNormSpatialModel.unfreeze"]], "piecewisenormspectralmodel (class in gammapy.modeling.models)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel"]], "__call__() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.__call__"]], "copy() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.default_parameters"]], "energy (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy"]], "energy_flux() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.piecewisenormspectralmodel class method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.piecewisenormspectralmodel class method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.is_norm_spectral_model"]], "norms (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.norms"]], "parameters (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[235, "gammapy.modeling.models.PiecewiseNormSpectralModel.unfreeze"]], "pointspatialmodel (class in gammapy.modeling.models)": [[236, "gammapy.modeling.models.PointSpatialModel"]], "__call__() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.__call__"]], "copy() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.copy"]], "covariance (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.default_parameters"]], "evaluate_geom() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.pointspatialmodel class method)": [[236, "gammapy.modeling.models.PointSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.pointspatialmodel class method)": [[236, "gammapy.modeling.models.PointSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.pointspatialmodel class method)": [[236, "gammapy.modeling.models.PointSpatialModel.from_position"]], "frozen (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.position"]], "position_error (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.reassign"]], "tag (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.to_region"]], "type (gammapy.modeling.models.pointspatialmodel attribute)": [[236, "gammapy.modeling.models.PointSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.pointspatialmodel method)": [[236, "gammapy.modeling.models.PointSpatialModel.unfreeze"]], "powerlaw2spectralmodel (class in gammapy.modeling.models)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel"]], "__call__() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.__call__"]], "amplitude (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.amplitude"]], "copy() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.default_parameters"]], "emax (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.emax"]], "emin (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.emin"]], "energy_flux() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlaw2spectralmodel static method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlaw2spectralmodel static method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlaw2spectralmodel class method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlaw2spectralmodel class method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.frozen"]], "index (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.index"]], "integral() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.tag"]], "to_dict() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[237, "gammapy.modeling.models.PowerLaw2SpectralModel.unfreeze"]], "powerlawnormspectralmodel (class in gammapy.modeling.models)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel"]], "__call__() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.__call__"]], "copy() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate"]], "evaluate_energy_flux() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_energy_flux"]], "evaluate_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawnormspectralmodel class method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawnormspectralmodel class method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.tag"]], "tilt (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.tilt"]], "to_dict() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[238, "gammapy.modeling.models.PowerLawNormSpectralModel.unfreeze"]], "powerlawspectralmodel (class in gammapy.modeling.models)": [[239, "gammapy.modeling.models.PowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlawspectralmodel static method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.evaluate"]], "evaluate_energy_flux() (gammapy.modeling.models.powerlawspectralmodel static method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_energy_flux"]], "evaluate_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlawspectralmodel static method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawspectralmodel class method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawspectralmodel class method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.frozen"]], "index (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.index"]], "integral() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlawspectralmodel attribute)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawspectralmodel method)": [[239, "gammapy.modeling.models.PowerLawSpectralModel.unfreeze"]], "powerlawtemporalmodel (class in gammapy.modeling.models)": [[240, "gammapy.modeling.models.PowerLawTemporalModel"]], "__call__() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.__call__"]], "alpha (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.alpha"]], "copy() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.copy"]], "covariance (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.powerlawtemporalmodel static method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawtemporalmodel class method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawtemporalmodel class method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.frozen"]], "integral() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.parameters"]], "plot() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.plot"]], "reassign() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.sample_time"]], "t0 (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.t0"]], "t_ref (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.t_ref"]], "tag (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.powerlawtemporalmodel static method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.to_dict"]], "type (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawtemporalmodel method)": [[240, "gammapy.modeling.models.PowerLawTemporalModel.unfreeze"]], "spatial_model_registry (in module gammapy.modeling.models)": [[241, "gammapy.modeling.models.SPATIAL_MODEL_REGISTRY"]], "spectral_model_registry (in module gammapy.modeling.models)": [[242, "gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY"]], "scalespectralmodel (class in gammapy.modeling.models)": [[243, "gammapy.modeling.models.ScaleSpectralModel"]], "__call__() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.__call__"]], "copy() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.copy"]], "covariance (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.scalespectralmodel class method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.scalespectralmodel class method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.frozen"]], "integral() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.norm"]], "parameters (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.to_dict"]], "type (gammapy.modeling.models.scalespectralmodel attribute)": [[243, "gammapy.modeling.models.ScaleSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.scalespectralmodel method)": [[243, "gammapy.modeling.models.ScaleSpectralModel.unfreeze"]], "shell2spatialmodel (class in gammapy.modeling.models)": [[244, "gammapy.modeling.models.Shell2SpatialModel"]], "__call__() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.__call__"]], "copy() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.copy"]], "covariance (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.default_parameters"]], "eta (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.eta"]], "evaluate() (gammapy.modeling.models.shell2spatialmodel static method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.shell2spatialmodel class method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.shell2spatialmodel class method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.shell2spatialmodel class method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.from_position"]], "frozen (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.lon_0"]], "parameters (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.phi_0"]], "plot() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.plot"]], "plot_error() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.plot_position_error"]], "position (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.position"]], "position_error (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.r_0"]], "r_in (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.r_in"]], "reassign() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.reassign"]], "tag (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.tag"]], "to_dict() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.to_region"]], "type (gammapy.modeling.models.shell2spatialmodel attribute)": [[244, "gammapy.modeling.models.Shell2SpatialModel.type"]], "unfreeze() (gammapy.modeling.models.shell2spatialmodel method)": [[244, "gammapy.modeling.models.Shell2SpatialModel.unfreeze"]], "shellspatialmodel (class in gammapy.modeling.models)": [[245, "gammapy.modeling.models.ShellSpatialModel"]], "__call__() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.__call__"]], "copy() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.copy"]], "covariance (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.shellspatialmodel static method)": [[245, "gammapy.modeling.models.ShellSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.shellspatialmodel class method)": [[245, "gammapy.modeling.models.ShellSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.shellspatialmodel class method)": [[245, "gammapy.modeling.models.ShellSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.shellspatialmodel class method)": [[245, "gammapy.modeling.models.ShellSpatialModel.from_position"]], "frozen (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.position"]], "position_error (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.position_lonlat"]], "radius (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.radius"]], "reassign() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.reassign"]], "tag (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.to_region"]], "type (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.shellspatialmodel method)": [[245, "gammapy.modeling.models.ShellSpatialModel.unfreeze"]], "width (gammapy.modeling.models.shellspatialmodel attribute)": [[245, "gammapy.modeling.models.ShellSpatialModel.width"]], "sinetemporalmodel (class in gammapy.modeling.models)": [[246, "gammapy.modeling.models.SineTemporalModel"]], "__call__() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.__call__"]], "amp (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.amp"]], "copy() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.copy"]], "covariance (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.sinetemporalmodel static method)": [[246, "gammapy.modeling.models.SineTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.sinetemporalmodel class method)": [[246, "gammapy.modeling.models.SineTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.sinetemporalmodel class method)": [[246, "gammapy.modeling.models.SineTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.frozen"]], "integral() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.is_energy_dependent"]], "omega (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.omega"]], "parameters (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.parameters"]], "plot() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.plot"]], "reassign() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.t_ref"]], "tag (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.sinetemporalmodel static method)": [[246, "gammapy.modeling.models.SineTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.to_dict"]], "type (gammapy.modeling.models.sinetemporalmodel attribute)": [[246, "gammapy.modeling.models.SineTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.sinetemporalmodel method)": [[246, "gammapy.modeling.models.SineTemporalModel.unfreeze"]], "skymodel (class in gammapy.modeling.models)": [[247, "gammapy.modeling.models.SkyModel"]], "__call__() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.__call__"]], "contributes() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.contributes"]], "copy() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.copy"]], "covariance (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.covariance"]], "create() (gammapy.modeling.models.skymodel class method)": [[247, "gammapy.modeling.models.SkyModel.create"]], "default_parameters (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.default_parameters"]], "evaluate() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.evaluation_region"]], "frame (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.frame"]], "freeze() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.freeze"]], "from_dict() (gammapy.modeling.models.skymodel class method)": [[247, "gammapy.modeling.models.SkyModel.from_dict"]], "from_parameters() (gammapy.modeling.models.skymodel class method)": [[247, "gammapy.modeling.models.SkyModel.from_parameters"]], "frozen (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.frozen"]], "integrate_geom() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.integrate_geom"]], "name (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.name"]], "parameters (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.parameters"]], "position (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.position"]], "position_lonlat (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.position_lonlat"]], "reassign() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.reassign"]], "spatial_model (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.spatial_model"]], "spectral_model (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.spectral_model"]], "tag (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.tag"]], "temporal_model (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.temporal_model"]], "to_dict() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.to_dict"]], "type (gammapy.modeling.models.skymodel attribute)": [[247, "gammapy.modeling.models.SkyModel.type"]], "unfreeze() (gammapy.modeling.models.skymodel method)": [[247, "gammapy.modeling.models.SkyModel.unfreeze"]], "smoothbrokenpowerlawspectralmodel (class in gammapy.modeling.models)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.amplitude"]], "beta (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.beta"]], "copy() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.default_parameters"]], "ebreak (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.ebreak"]], "energy_flux() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel static method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel class method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel class method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.frozen"]], "index1 (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.index1"]], "index2 (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.index2"]], "integral() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[248, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.unfreeze"]], "spatialmodel (class in gammapy.modeling.models)": [[249, "gammapy.modeling.models.SpatialModel"]], "__call__() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.__call__"]], "copy() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.copy"]], "covariance (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.default_parameters"]], "evaluate_geom() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.spatialmodel class method)": [[249, "gammapy.modeling.models.SpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.spatialmodel class method)": [[249, "gammapy.modeling.models.SpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.spatialmodel class method)": [[249, "gammapy.modeling.models.SpatialModel.from_position"]], "frozen (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.phi_0"]], "plot() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.plot"]], "plot_error() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.plot_position_error"]], "position (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.position"]], "position_error (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.reassign"]], "to_dict() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.to_dict"]], "type (gammapy.modeling.models.spatialmodel attribute)": [[249, "gammapy.modeling.models.SpatialModel.type"]], "unfreeze() (gammapy.modeling.models.spatialmodel method)": [[249, "gammapy.modeling.models.SpatialModel.unfreeze"]], "spectralmodel (class in gammapy.modeling.models)": [[250, "gammapy.modeling.models.SpectralModel"]], "__call__() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.__call__"]], "copy() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.copy"]], "covariance (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.energy_flux_error"]], "evaluate_error() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.spectralmodel class method)": [[250, "gammapy.modeling.models.SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.spectralmodel class method)": [[250, "gammapy.modeling.models.SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.frozen"]], "integral() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.spectral_index_error"]], "to_dict() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.to_dict"]], "type (gammapy.modeling.models.spectralmodel attribute)": [[250, "gammapy.modeling.models.SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.spectralmodel method)": [[250, "gammapy.modeling.models.SpectralModel.unfreeze"]], "superexpcutoffpowerlaw3fglspectralmodel (class in gammapy.modeling.models)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.default_parameters"]], "ecut (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.ecut"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel static method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel class method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel class method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[251, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.unfreeze"]], "superexpcutoffpowerlaw4fgldr3spectralmodel (class in gammapy.modeling.models)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel static method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.evaluate_error"]], "expfactor (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.expfactor"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel class method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel class method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[252, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.unfreeze"]], "superexpcutoffpowerlaw4fglspectralmodel (class in gammapy.modeling.models)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel static method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.evaluate_error"]], "expfactor (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.expfactor"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel class method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel class method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[253, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.unfreeze"]], "temporal_model_registry (in module gammapy.modeling.models)": [[254, "gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY"]], "templatendspatialmodel (class in gammapy.modeling.models)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel"]], "__call__() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.__call__"]], "copy() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.copy"]], "covariance (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.templatendspatialmodel class method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatendspatialmodel class method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.templatendspatialmodel class method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.from_position"]], "frozen (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.is_energy_dependent"]], "map (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.map"]], "parameters (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.position"]], "position_error (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.reassign"]], "tag (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.to_dict"]], "type (gammapy.modeling.models.templatendspatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.unfreeze"]], "write() (gammapy.modeling.models.templatendspatialmodel method)": [[255, "gammapy.modeling.models.TemplateNDSpatialModel.write"]], "templatendspectralmodel (class in gammapy.modeling.models)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel"]], "__call__() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.__call__"]], "copy() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.copy"]], "covariance (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.templatendspectralmodel class method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatendspectralmodel class method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.frozen"]], "integral() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.is_norm_spectral_model"]], "map (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.map"]], "parameters (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.to_dict"]], "type (gammapy.modeling.models.templatendspectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.unfreeze"]], "write() (gammapy.modeling.models.templatendspectralmodel method)": [[256, "gammapy.modeling.models.TemplateNDSpectralModel.write"]], "templatenpredmodel (class in gammapy.modeling.models)": [[257, "gammapy.modeling.models.TemplateNPredModel"]], "copy() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.copy"]], "covariance (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.covariance"]], "cutout() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.cutout"]], "default_parameters (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.default_parameters"]], "energy_center (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.energy_center"]], "evaluate() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.evaluate"]], "evaluation_radius (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.evaluation_radius"]], "freeze() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.freeze"]], "from_dict() (gammapy.modeling.models.templatenpredmodel class method)": [[257, "gammapy.modeling.models.TemplateNPredModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatenpredmodel class method)": [[257, "gammapy.modeling.models.TemplateNPredModel.from_parameters"]], "frozen (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.frozen"]], "map (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.map"]], "name (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.name"]], "parameters (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.parameters"]], "position (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.position"]], "reassign() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.reassign"]], "slice_by_energy() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.slice_by_energy"]], "spectral_model (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.spectral_model"]], "stack() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.stack"]], "tag (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.tag"]], "to_dict() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.to_dict"]], "type (gammapy.modeling.models.templatenpredmodel attribute)": [[257, "gammapy.modeling.models.TemplateNPredModel.type"]], "unfreeze() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.unfreeze"]], "write() (gammapy.modeling.models.templatenpredmodel method)": [[257, "gammapy.modeling.models.TemplateNPredModel.write"]], "templatephasecurvetemporalmodel (class in gammapy.modeling.models)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel"]], "__call__() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.__call__"]], "copy() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.copy"]], "covariance (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.evaluate"]], "f0 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f0"]], "f1 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f1"]], "f2 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f2"]], "freeze() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.frozen"]], "integral() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.parameters"]], "phi_ref (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.phi_ref"]], "plot() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.plot"]], "plot_phasogram() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.plot_phasogram"]], "read() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.read"]], "reassign() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.t_ref"]], "tag (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.templatephasecurvetemporalmodel static method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.to_dict"]], "type (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.unfreeze"]], "write() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[258, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.write"]], "templatespatialmodel (class in gammapy.modeling.models)": [[259, "gammapy.modeling.models.TemplateSpatialModel"]], "__call__() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.__call__"]], "copy() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.copy"]], "covariance (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.templatespatialmodel class method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatespatialmodel class method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.templatespatialmodel class method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.from_position"]], "frozen (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.lon_0"]], "map (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.map"]], "map_center (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.map_center"]], "parameters (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.position"]], "position_error (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.position_lonlat"]], "read() (gammapy.modeling.models.templatespatialmodel class method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.read"]], "reassign() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.reassign"]], "tag (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.to_region"]], "type (gammapy.modeling.models.templatespatialmodel attribute)": [[259, "gammapy.modeling.models.TemplateSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.unfreeze"]], "write() (gammapy.modeling.models.templatespatialmodel method)": [[259, "gammapy.modeling.models.TemplateSpatialModel.write"]], "templatespectralmodel (class in gammapy.modeling.models)": [[260, "gammapy.modeling.models.TemplateSpectralModel"]], "__call__() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.__call__"]], "copy() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.copy"]], "covariance (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.templatespectralmodel class method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatespectralmodel class method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.from_parameters"]], "from_region_map() (gammapy.modeling.models.templatespectralmodel class method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.from_region_map"]], "frozen (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.frozen"]], "integral() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.plot_error"]], "read_xspec_model() (gammapy.modeling.models.templatespectralmodel class method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.read_xspec_model"]], "reassign() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.to_dict"]], "type (gammapy.modeling.models.templatespectralmodel attribute)": [[260, "gammapy.modeling.models.TemplateSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.templatespectralmodel method)": [[260, "gammapy.modeling.models.TemplateSpectralModel.unfreeze"]], "temporalmodel (class in gammapy.modeling.models)": [[261, "gammapy.modeling.models.TemporalModel"]], "__call__() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.__call__"]], "copy() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.copy"]], "covariance (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.default_parameters"]], "freeze() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.temporalmodel class method)": [[261, "gammapy.modeling.models.TemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.temporalmodel class method)": [[261, "gammapy.modeling.models.TemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.frozen"]], "integral() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.parameters"]], "plot() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.plot"]], "reassign() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.reassign"]], "reference_time (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.sample_time"]], "time_sum() (gammapy.modeling.models.temporalmodel static method)": [[261, "gammapy.modeling.models.TemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.to_dict"]], "type (gammapy.modeling.models.temporalmodel attribute)": [[261, "gammapy.modeling.models.TemporalModel.type"]], "unfreeze() (gammapy.modeling.models.temporalmodel method)": [[261, "gammapy.modeling.models.TemporalModel.unfreeze"]], "create_cosmic_ray_spectral_model() (in module gammapy.modeling.models)": [[262, "gammapy.modeling.models.create_cosmic_ray_spectral_model"]], "create_crab_spectral_model() (in module gammapy.modeling.models)": [[263, "gammapy.modeling.models.create_crab_spectral_model"]], "create_fermi_isotropic_diffuse_model() (in module gammapy.modeling.models)": [[264, "gammapy.modeling.models.create_fermi_isotropic_diffuse_model"]], "integrate_spectrum() (in module gammapy.modeling.models)": [[265, "gammapy.modeling.models.integrate_spectrum"]], "read_hermes_cube() (in module gammapy.modeling.models)": [[266, "gammapy.modeling.models.read_hermes_cube"]], "scale_plot_flux() (in module gammapy.modeling.models)": [[267, "gammapy.modeling.models.scale_plot_flux"]], "read_hermes_cube() (in module gammapy.modeling.models.utils)": [[268, "gammapy.modeling.models.utils.read_hermes_cube"]], "select_nested_models() (in module gammapy.modeling)": [[269, "gammapy.modeling.select_nested_models"]], "stat_profile_ul_scipy() (in module gammapy.modeling)": [[270, "gammapy.modeling.stat_profile_ul_scipy"]], "cashcountsstatistic (class in gammapy.stats)": [[271, "gammapy.stats.CashCountsStatistic"]], "compute_errn() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.compute_errn"]], "compute_errp() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.compute_errp"]], "compute_upper_limit() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.compute_upper_limit"]], "error (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.error"]], "info_dict() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.info_dict"]], "n_bkg (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.n_bkg"]], "n_sig (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.n_sig"]], "n_sig_matching_significance() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.n_sig_matching_significance"]], "p_value (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.p_value"]], "sqrt_ts (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.sqrt_ts"]], "stat_max (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.stat_max"]], "stat_null (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.stat_null"]], "sum() (gammapy.stats.cashcountsstatistic method)": [[271, "gammapy.stats.CashCountsStatistic.sum"]], "ts (gammapy.stats.cashcountsstatistic attribute)": [[271, "gammapy.stats.CashCountsStatistic.ts"]], "wstatcountsstatistic (class in gammapy.stats)": [[272, "gammapy.stats.WStatCountsStatistic"]], "compute_errn() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.compute_errn"]], "compute_errp() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.compute_errp"]], "compute_upper_limit() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.compute_upper_limit"]], "error (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.error"]], "info_dict() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.info_dict"]], "n_bkg (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.n_bkg"]], "n_sig (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.n_sig"]], "n_sig_matching_significance() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.n_sig_matching_significance"]], "p_value (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.p_value"]], "sqrt_ts (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.sqrt_ts"]], "stat_max (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.stat_max"]], "stat_null (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.stat_null"]], "sum() (gammapy.stats.wstatcountsstatistic method)": [[272, "gammapy.stats.WStatCountsStatistic.sum"]], "ts (gammapy.stats.wstatcountsstatistic attribute)": [[272, "gammapy.stats.WStatCountsStatistic.ts"]], "cash() (in module gammapy.stats)": [[273, "gammapy.stats.cash"]], "cash_sum_cython() (in module gammapy.stats)": [[274, "gammapy.stats.cash_sum_cython"]], "compute_chisq() (in module gammapy.stats)": [[275, "gammapy.stats.compute_chisq"]], "compute_flux_doubling() (in module gammapy.stats)": [[276, "gammapy.stats.compute_flux_doubling"]], "compute_fpp() (in module gammapy.stats)": [[277, "gammapy.stats.compute_fpp"]], "compute_fvar() (in module gammapy.stats)": [[278, "gammapy.stats.compute_fvar"]], "cstat() (in module gammapy.stats)": [[279, "gammapy.stats.cstat"]], "f_cash_root_cython() (in module gammapy.stats)": [[280, "gammapy.stats.f_cash_root_cython"]], "get_wstat_gof_terms() (in module gammapy.stats)": [[281, "gammapy.stats.get_wstat_gof_terms"]], "get_wstat_mu_bkg() (in module gammapy.stats)": [[282, "gammapy.stats.get_wstat_mu_bkg"]], "norm_bounds_cython() (in module gammapy.stats)": [[283, "gammapy.stats.norm_bounds_cython"]], "wstat() (in module gammapy.stats)": [[284, "gammapy.stats.wstat"]], "hierarchical_clustering() (in module gammapy.utils.cluster)": [[285, "gammapy.utils.cluster.hierarchical_clustering"]], "standard_scaler() (in module gammapy.utils.cluster)": [[286, "gammapy.utils.cluster.standard_scaler"]], "d_sun_to_galactic_center (in module gammapy.utils.coordinates)": [[287, "gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER"]], "cartesian() (in module gammapy.utils.coordinates)": [[288, "gammapy.utils.coordinates.cartesian"]], "fov_to_sky() (in module gammapy.utils.coordinates)": [[289, "gammapy.utils.coordinates.fov_to_sky"]], "galactic() (in module gammapy.utils.coordinates)": [[290, "gammapy.utils.coordinates.galactic"]], "motion_since_birth() (in module gammapy.utils.coordinates)": [[291, "gammapy.utils.coordinates.motion_since_birth"]], "polar() (in module gammapy.utils.coordinates)": [[292, "gammapy.utils.coordinates.polar"]], "sky_to_fov() (in module gammapy.utils.coordinates)": [[293, "gammapy.utils.coordinates.sky_to_fov"]], "velocity_glon_glat() (in module gammapy.utils.coordinates)": [[294, "gammapy.utils.coordinates.velocity_glon_glat"]], "hdulocation (class in gammapy.utils.fits)": [[295, "gammapy.utils.fits.HDULocation"]], "get_hdu() (gammapy.utils.fits.hdulocation method)": [[295, "gammapy.utils.fits.HDULocation.get_hdu"]], "info() (gammapy.utils.fits.hdulocation method)": [[295, "gammapy.utils.fits.HDULocation.info"]], "load() (gammapy.utils.fits.hdulocation method)": [[295, "gammapy.utils.fits.HDULocation.load"]], "path() (gammapy.utils.fits.hdulocation method)": [[295, "gammapy.utils.fits.HDULocation.path"]], "lazyfitsdata (class in gammapy.utils.fits)": [[296, "gammapy.utils.fits.LazyFitsData"]], "earth_location_from_dict() (in module gammapy.utils.fits)": [[297, "gammapy.utils.fits.earth_location_from_dict"]], "trapz_loglog() (in module gammapy.utils.integrate)": [[298, "gammapy.utils.integrate.trapz_loglog"]], "scaledregulargridinterpolator (class in gammapy.utils.interpolation)": [[299, "gammapy.utils.interpolation.ScaledRegularGridInterpolator"]], "__call__() (gammapy.utils.interpolation.scaledregulargridinterpolator method)": [[299, "gammapy.utils.interpolation.ScaledRegularGridInterpolator.__call__"]], "interpolate_profile() (in module gammapy.utils.interpolation)": [[300, "gammapy.utils.interpolation.interpolate_profile"]], "interpolation_scale() (in module gammapy.utils.interpolation)": [[301, "gammapy.utils.interpolation.interpolation_scale"]], "backend_default (in module gammapy.utils.parallel)": [[302, "gammapy.utils.parallel.BACKEND_DEFAULT"]], "method_default (in module gammapy.utils.parallel)": [[303, "gammapy.utils.parallel.METHOD_DEFAULT"]], "method_kwargs_default (in module gammapy.utils.parallel)": [[304, "gammapy.utils.parallel.METHOD_KWARGS_DEFAULT"]], "n_jobs_default (in module gammapy.utils.parallel)": [[305, "gammapy.utils.parallel.N_JOBS_DEFAULT"]], "pool_kwargs_default (in module gammapy.utils.parallel)": [[306, "gammapy.utils.parallel.POOL_KWARGS_DEFAULT"]], "multiprocessing_manager (class in gammapy.utils.parallel)": [[307, "gammapy.utils.parallel.multiprocessing_manager"]], "run_multiprocessing() (in module gammapy.utils.parallel)": [[308, "gammapy.utils.parallel.run_multiprocessing"]], "inversecdfsampler (class in gammapy.utils.random)": [[309, "gammapy.utils.random.InverseCDFSampler"]], "sample() (gammapy.utils.random.inversecdfsampler method)": [[309, "gammapy.utils.random.InverseCDFSampler.sample"]], "sample_axis() (gammapy.utils.random.inversecdfsampler method)": [[309, "gammapy.utils.random.InverseCDFSampler.sample_axis"]], "draw() (in module gammapy.utils.random)": [[310, "gammapy.utils.random.draw"]], "get_random_state() (in module gammapy.utils.random)": [[311, "gammapy.utils.random.get_random_state"]], "normalize() (in module gammapy.utils.random)": [[312, "gammapy.utils.random.normalize"]], "pdf() (in module gammapy.utils.random)": [[313, "gammapy.utils.random.pdf"]], "sample_powerlaw() (in module gammapy.utils.random)": [[314, "gammapy.utils.random.sample_powerlaw"]], "sample_sphere() (in module gammapy.utils.random)": [[315, "gammapy.utils.random.sample_sphere"]], "sample_sphere_distance() (in module gammapy.utils.random)": [[316, "gammapy.utils.random.sample_sphere_distance"]], "sample_times() (in module gammapy.utils.random)": [[317, "gammapy.utils.random.sample_times"]], "compound_region_to_regions() (in module gammapy.utils.regions)": [[318, "gammapy.utils.regions.compound_region_to_regions"]], "make_concentric_annulus_sky_regions() (in module gammapy.utils.regions)": [[319, "gammapy.utils.regions.make_concentric_annulus_sky_regions"]], "make_orthogonal_rectangle_sky_regions() (in module gammapy.utils.regions)": [[320, "gammapy.utils.regions.make_orthogonal_rectangle_sky_regions"]], "region_to_frame() (in module gammapy.utils.regions)": [[321, "gammapy.utils.regions.region_to_frame"]], "regions_to_compound_region() (in module gammapy.utils.regions)": [[322, "gammapy.utils.regions.regions_to_compound_region"]], "get_images_paths() (in module gammapy.utils.scripts)": [[323, "gammapy.utils.scripts.get_images_paths"]], "make_path() (in module gammapy.utils.scripts)": [[324, "gammapy.utils.scripts.make_path"]], "read_yaml() (in module gammapy.utils.scripts)": [[325, "gammapy.utils.scripts.read_yaml"]], "recursive_merge_dicts() (in module gammapy.utils.scripts)": [[326, "gammapy.utils.scripts.recursive_merge_dicts"]], "write_yaml() (in module gammapy.utils.scripts)": [[327, "gammapy.utils.scripts.write_yaml"]], "hstack_columns() (in module gammapy.utils.table)": [[328, "gammapy.utils.table.hstack_columns"]], "table_row_to_dict() (in module gammapy.utils.table)": [[329, "gammapy.utils.table.table_row_to_dict"]], "table_standardise_units_copy() (in module gammapy.utils.table)": [[330, "gammapy.utils.table.table_standardise_units_copy"]], "table_standardise_units_inplace() (in module gammapy.utils.table)": [[331, "gammapy.utils.table.table_standardise_units_inplace"]], "checker (class in gammapy.utils.testing)": [[332, "gammapy.utils.testing.Checker"]], "run() (gammapy.utils.testing.checker method)": [[332, "gammapy.utils.testing.Checker.run"]], "assert_quantity_allclose() (in module gammapy.utils.testing)": [[333, "gammapy.utils.testing.assert_quantity_allclose"]], "assert_skycoord_allclose() (in module gammapy.utils.testing)": [[334, "gammapy.utils.testing.assert_skycoord_allclose"]], "assert_time_allclose() (in module gammapy.utils.testing)": [[335, "gammapy.utils.testing.assert_time_allclose"]], "mpl_plot_check() (in module gammapy.utils.testing)": [[336, "gammapy.utils.testing.mpl_plot_check"]], "requires_data() (in module gammapy.utils.testing)": [[337, "gammapy.utils.testing.requires_data"]], "requires_dependency() (in module gammapy.utils.testing)": [[338, "gammapy.utils.testing.requires_dependency"]], "absolute_time() (in module gammapy.utils.time)": [[339, "gammapy.utils.time.absolute_time"]], "time_ref_from_dict() (in module gammapy.utils.time)": [[340, "gammapy.utils.time.time_ref_from_dict"]], "time_ref_to_dict() (in module gammapy.utils.time)": [[341, "gammapy.utils.time.time_ref_to_dict"]], "time_relative_to_ref() (in module gammapy.utils.time)": [[342, "gammapy.utils.time.time_relative_to_ref"]], "standardise_unit() (in module gammapy.utils.units)": [[343, "gammapy.utils.units.standardise_unit"]], "unit_from_fits_image_hdu() (in module gammapy.utils.units)": [[344, "gammapy.utils.units.unit_from_fits_image_hdu"]], "mappanelplotter (class in gammapy.visualization)": [[345, "gammapy.visualization.MapPanelPlotter"]], "plot() (gammapy.visualization.mappanelplotter method)": [[345, "gammapy.visualization.MapPanelPlotter.plot"]], "plot_panel() (gammapy.visualization.mappanelplotter method)": [[345, "gammapy.visualization.MapPanelPlotter.plot_panel"]], "add_colorbar() (in module gammapy.visualization)": [[346, "gammapy.visualization.add_colorbar"]], "annotate_heatmap() (in module gammapy.visualization)": [[347, "gammapy.visualization.annotate_heatmap"]], "colormap_hess() (in module gammapy.visualization)": [[348, "gammapy.visualization.colormap_hess"]], "colormap_milagro() (in module gammapy.visualization)": [[349, "gammapy.visualization.colormap_milagro"]], "plot_contour_line() (in module gammapy.visualization)": [[350, "gammapy.visualization.plot_contour_line"]], "plot_distribution() (in module gammapy.visualization)": [[351, "gammapy.visualization.plot_distribution"]], "plot_heatmap() (in module gammapy.visualization)": [[352, "gammapy.visualization.plot_heatmap"]], "plot_map_rgb() (in module gammapy.visualization)": [[353, "gammapy.visualization.plot_map_rgb"]], "plot_npred_signal() (in module gammapy.visualization)": [[354, "gammapy.visualization.plot_npred_signal"]], "plot_spectrum_datasets_off_regions() (in module gammapy.visualization)": [[355, "gammapy.visualization.plot_spectrum_datasets_off_regions"]], "plot_theta_squared_table() (in module gammapy.visualization)": [[356, "gammapy.visualization.plot_theta_squared_table"]], "1d analysis": [[551, "term-1D-Analysis"]], "3d analysis": [[551, "term-3D-Analysis"]], "aeff": [[551, "term-Aeff"]], "bkg": [[551, "term-Bkg"]], "cash": [[551, "term-Cash"]], "dl3": [[551, "term-DL3"]], "dl4": [[551, "term-DL4"]], "dl5": [[551, "term-DL5"]], "dl6": [[551, "term-DL6"]], "dataset": [[551, "term-Dataset"]], "edisp": [[551, "term-EDisp"]], "estimator": [[551, "term-Estimator"]], "fov": [[551, "term-FoV"]], "fov background": [[551, "term-FoV-Background"]], "gadf": [[551, "term-GADF"]], "gti": [[551, "term-GTI"]], "hli": [[551, "term-HLI"]], "irf": [[551, "term-IRF"]], "joint analysis": [[551, "term-Joint-Analysis"]], "met": [[551, "term-MET"]], "maker": [[551, "term-Maker"]], "psf": [[551, "term-PSF"]], "reco energy": [[551, "term-Reco-Energy"]], "reflected background": [[551, "term-Reflected-Background"]], "ring background": [[551, "term-Ring-Background"]], "roi": [[551, "term-RoI"]], "stacked analysis": [[551, "term-Stacked-Analysis"]], "ts": [[551, "term-TS"]], "true energy": [[551, "term-True-Energy"]], "wstat": [[551, "term-WStat"]]}})