Search.setIndex({"docnames": ["api-reference/analysis", "api-reference/astro", "api-reference/catalog", "api-reference/data", "api-reference/datasets", "api-reference/estimators", "api-reference/index", "api-reference/irf", "api-reference/makers", "api-reference/maps", "api-reference/modeling", "api-reference/scripts", "api-reference/stats", "api-reference/utils", "api-reference/visualization", "api/gammapy.analysis.Analysis", "api/gammapy.analysis.AnalysisConfig", "api/gammapy.astro.darkmatter.BurkertProfile", "api/gammapy.astro.darkmatter.DMProfile", "api/gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel", "api/gammapy.astro.darkmatter.DarkMatterDecaySpectralModel", "api/gammapy.astro.darkmatter.EinastoProfile", "api/gammapy.astro.darkmatter.IsothermalProfile", "api/gammapy.astro.darkmatter.JFactory", "api/gammapy.astro.darkmatter.MooreProfile", "api/gammapy.astro.darkmatter.NFWProfile", "api/gammapy.astro.darkmatter.PrimaryFlux", "api/gammapy.astro.darkmatter.ZhaoProfile", "api/gammapy.astro.population.CaseBattacharya1998", "api/gammapy.astro.population.Exponential", "api/gammapy.astro.population.FaucherKaspi2006", "api/gammapy.astro.population.FaucherKaspi2006VelocityBimodal", "api/gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian", "api/gammapy.astro.population.FaucherSpiral", "api/gammapy.astro.population.LogSpiral", "api/gammapy.astro.population.Lorimer2006", "api/gammapy.astro.population.Paczynski1990", "api/gammapy.astro.population.Paczynski1990Velocity", "api/gammapy.astro.population.ValleeSpiral", "api/gammapy.astro.population.YusifovKucuk2004", "api/gammapy.astro.population.YusifovKucuk2004B", "api/gammapy.astro.population.add_observed_parameters", "api/gammapy.astro.population.add_pulsar_parameters", "api/gammapy.astro.population.add_pwn_parameters", "api/gammapy.astro.population.add_snr_parameters", "api/gammapy.astro.population.make_base_catalog_galactic", "api/gammapy.astro.population.make_catalog_random_positions_cube", "api/gammapy.astro.population.make_catalog_random_positions_sphere", "api/gammapy.astro.population.radial_distributions", "api/gammapy.astro.population.velocity_distributions", "api/gammapy.astro.source.PWN", "api/gammapy.astro.source.Pulsar", "api/gammapy.astro.source.SNR", "api/gammapy.astro.source.SNRTrueloveMcKee", "api/gammapy.astro.source.SimplePulsar", "api/gammapy.catalog.CATALOG_REGISTRY", "api/gammapy.catalog.SourceCatalog", "api/gammapy.catalog.SourceCatalog1LHAASO", "api/gammapy.catalog.SourceCatalog2FHL", "api/gammapy.catalog.SourceCatalog2HWC", "api/gammapy.catalog.SourceCatalog3FGL", "api/gammapy.catalog.SourceCatalog3FHL", "api/gammapy.catalog.SourceCatalog3HWC", "api/gammapy.catalog.SourceCatalog4FGL", "api/gammapy.catalog.SourceCatalogGammaCat", "api/gammapy.catalog.SourceCatalogHGPS", "api/gammapy.catalog.SourceCatalogLargeScaleHGPS", "api/gammapy.catalog.SourceCatalogObject", "api/gammapy.catalog.SourceCatalogObject1LHAASO", "api/gammapy.catalog.SourceCatalogObject2FHL", "api/gammapy.catalog.SourceCatalogObject2HWC", "api/gammapy.catalog.SourceCatalogObject3FGL", "api/gammapy.catalog.SourceCatalogObject3FHL", "api/gammapy.catalog.SourceCatalogObject3HWC", "api/gammapy.catalog.SourceCatalogObject4FGL", "api/gammapy.catalog.SourceCatalogObjectGammaCat", "api/gammapy.catalog.SourceCatalogObjectHGPS", "api/gammapy.catalog.SourceCatalogObjectHGPSComponent", "api/gammapy.data.DataStore", "api/gammapy.data.EventList", "api/gammapy.data.EventListMetaData", "api/gammapy.data.FixedPointingInfo", "api/gammapy.data.GTI", "api/gammapy.data.HDUIndexTable", "api/gammapy.data.Observation", "api/gammapy.data.ObservationFilter", "api/gammapy.data.ObservationTable", "api/gammapy.data.Observations", "api/gammapy.data.ObservationsEventsSampler", "api/gammapy.data.PointingInfo", "api/gammapy.data.PointingMode", "api/gammapy.data.get_irfs_features", "api/gammapy.data.observatory_locations", "api/gammapy.datasets.DATASET_REGISTRY", "api/gammapy.datasets.Dataset", "api/gammapy.datasets.Datasets", "api/gammapy.datasets.FluxPointsDataset", "api/gammapy.datasets.MapDataset", "api/gammapy.datasets.MapDatasetEventSampler", "api/gammapy.datasets.MapDatasetMetaData", "api/gammapy.datasets.MapDatasetOnOff", "api/gammapy.datasets.OGIPDatasetReader", "api/gammapy.datasets.OGIPDatasetWriter", "api/gammapy.datasets.ObservationEventSampler", "api/gammapy.datasets.SpectrumDataset", "api/gammapy.datasets.SpectrumDatasetOnOff", "api/gammapy.datasets.create_map_dataset_from_observation", "api/gammapy.datasets.create_map_dataset_geoms", "api/gammapy.estimators.ASmoothMapEstimator", "api/gammapy.estimators.ESTIMATOR_REGISTRY", "api/gammapy.estimators.EnergyDependentMorphologyEstimator", "api/gammapy.estimators.Estimator", "api/gammapy.estimators.ExcessMapEstimator", "api/gammapy.estimators.FluxMaps", "api/gammapy.estimators.FluxMetaData", "api/gammapy.estimators.FluxPoints", "api/gammapy.estimators.FluxPointsEstimator", "api/gammapy.estimators.FluxProfileEstimator", "api/gammapy.estimators.ImageProfile", "api/gammapy.estimators.ImageProfileEstimator", "api/gammapy.estimators.LightCurveEstimator", "api/gammapy.estimators.ParameterEstimator", "api/gammapy.estimators.SensitivityEstimator", "api/gammapy.estimators.TSMapEstimator", "api/gammapy.estimators.utils.compute_lightcurve_doublingtime", "api/gammapy.estimators.utils.compute_lightcurve_fpp", "api/gammapy.estimators.utils.compute_lightcurve_fvar", "api/gammapy.estimators.utils.estimate_exposure_reco_energy", "api/gammapy.estimators.utils.find_peaks", "api/gammapy.estimators.utils.find_peaks_in_flux_map", "api/gammapy.estimators.utils.get_rebinned_axis", "api/gammapy.estimators.utils.resample_energy_edges", "api/gammapy.irf.Background2D", "api/gammapy.irf.Background3D", "api/gammapy.irf.BackgroundIRF", "api/gammapy.irf.EDispKernel", "api/gammapy.irf.EDispKernelMap", "api/gammapy.irf.EDispMap", "api/gammapy.irf.EffectiveAreaTable2D", "api/gammapy.irf.EnergyDependentMultiGaussPSF", "api/gammapy.irf.EnergyDispersion2D", "api/gammapy.irf.FoVAlignment", "api/gammapy.irf.IRF", "api/gammapy.irf.IRFMap", "api/gammapy.irf.IRF_REGISTRY", "api/gammapy.irf.PSF3D", "api/gammapy.irf.PSFKernel", "api/gammapy.irf.PSFKing", "api/gammapy.irf.PSFMap", "api/gammapy.irf.ParametricPSF", "api/gammapy.irf.RadMax2D", "api/gammapy.irf.RecoPSFMap", "api/gammapy.irf.load_irf_dict_from_file", "api/gammapy.makers.AdaptiveRingBackgroundMaker", "api/gammapy.makers.DatasetsMaker", "api/gammapy.makers.FoVBackgroundMaker", "api/gammapy.makers.MAKER_REGISTRY", "api/gammapy.makers.Maker", "api/gammapy.makers.MapDatasetMaker", "api/gammapy.makers.PhaseBackgroundMaker", "api/gammapy.makers.ReflectedRegionsBackgroundMaker", "api/gammapy.makers.ReflectedRegionsFinder", "api/gammapy.makers.RegionsFinder", "api/gammapy.makers.RingBackgroundMaker", "api/gammapy.makers.SafeMaskMaker", "api/gammapy.makers.SpectrumDatasetMaker", "api/gammapy.makers.WobbleRegionsFinder", "api/gammapy.makers.utils.make_counts_rad_max", "api/gammapy.makers.utils.make_edisp_kernel_map", "api/gammapy.makers.utils.make_edisp_map", "api/gammapy.makers.utils.make_effective_livetime_map", "api/gammapy.makers.utils.make_map_background_irf", "api/gammapy.makers.utils.make_map_exposure_true_energy", "api/gammapy.makers.utils.make_observation_time_map", "api/gammapy.makers.utils.make_psf_map", "api/gammapy.makers.utils.make_theta_squared_table", "api/gammapy.maps.Geom", "api/gammapy.maps.HpxGeom", "api/gammapy.maps.HpxMap", "api/gammapy.maps.HpxNDMap", "api/gammapy.maps.LabelMapAxis", "api/gammapy.maps.Map", "api/gammapy.maps.MapAxes", "api/gammapy.maps.MapAxis", "api/gammapy.maps.MapCoord", "api/gammapy.maps.Maps", "api/gammapy.maps.RegionGeom", "api/gammapy.maps.RegionNDMap", "api/gammapy.maps.TimeMapAxis", "api/gammapy.maps.WcsGeom", "api/gammapy.maps.WcsMap", "api/gammapy.maps.WcsNDMap", "api/gammapy.maps.containment_radius", "api/gammapy.maps.containment_region", "api/gammapy.modeling.Covariance", "api/gammapy.modeling.Fit", "api/gammapy.modeling.Parameter", "api/gammapy.modeling.Parameters", "api/gammapy.modeling.PriorParameter", "api/gammapy.modeling.PriorParameters", "api/gammapy.modeling.models.BrokenPowerLawSpectralModel", "api/gammapy.modeling.models.CompoundSpectralModel", "api/gammapy.modeling.models.ConstantFluxSpatialModel", "api/gammapy.modeling.models.ConstantSpatialModel", "api/gammapy.modeling.models.ConstantSpectralModel", "api/gammapy.modeling.models.ConstantTemporalModel", "api/gammapy.modeling.models.DatasetModels", "api/gammapy.modeling.models.DiskSpatialModel", "api/gammapy.modeling.models.EBLAbsorptionNormSpectralModel", "api/gammapy.modeling.models.EBL_DATA_BUILTIN", "api/gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel", "api/gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel", "api/gammapy.modeling.models.ExpCutoffPowerLawSpectralModel", "api/gammapy.modeling.models.ExpDecayTemporalModel", "api/gammapy.modeling.models.FoVBackgroundModel", "api/gammapy.modeling.models.GaussianSpatialModel", "api/gammapy.modeling.models.GaussianSpectralModel", "api/gammapy.modeling.models.GaussianTemporalModel", "api/gammapy.modeling.models.GeneralizedGaussianSpatialModel", "api/gammapy.modeling.models.GeneralizedGaussianTemporalModel", "api/gammapy.modeling.models.LightCurveTemplateTemporalModel", "api/gammapy.modeling.models.LinearTemporalModel", "api/gammapy.modeling.models.LogParabolaNormSpectralModel", "api/gammapy.modeling.models.LogParabolaSpectralModel", "api/gammapy.modeling.models.MODEL_REGISTRY", "api/gammapy.modeling.models.MeyerCrabSpectralModel", "api/gammapy.modeling.models.Model", "api/gammapy.modeling.models.ModelBase", "api/gammapy.modeling.models.Models", "api/gammapy.modeling.models.NaimaSpectralModel", "api/gammapy.modeling.models.PiecewiseNormSpatialModel", "api/gammapy.modeling.models.PiecewiseNormSpectralModel", "api/gammapy.modeling.models.PointSpatialModel", "api/gammapy.modeling.models.PowerLaw2SpectralModel", "api/gammapy.modeling.models.PowerLawNormSpectralModel", "api/gammapy.modeling.models.PowerLawSpectralModel", "api/gammapy.modeling.models.PowerLawTemporalModel", "api/gammapy.modeling.models.SPATIAL_MODEL_REGISTRY", "api/gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY", "api/gammapy.modeling.models.ScaleSpectralModel", "api/gammapy.modeling.models.Shell2SpatialModel", "api/gammapy.modeling.models.ShellSpatialModel", "api/gammapy.modeling.models.SineTemporalModel", "api/gammapy.modeling.models.SkyModel", "api/gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel", "api/gammapy.modeling.models.SpatialModel", "api/gammapy.modeling.models.SpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel", "api/gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY", "api/gammapy.modeling.models.TemplateNDSpatialModel", "api/gammapy.modeling.models.TemplateNDSpectralModel", "api/gammapy.modeling.models.TemplateNPredModel", "api/gammapy.modeling.models.TemplatePhaseCurveTemporalModel", "api/gammapy.modeling.models.TemplateSpatialModel", "api/gammapy.modeling.models.TemplateSpectralModel", "api/gammapy.modeling.models.TemporalModel", "api/gammapy.modeling.models.create_cosmic_ray_spectral_model", "api/gammapy.modeling.models.create_crab_spectral_model", "api/gammapy.modeling.models.create_fermi_isotropic_diffuse_model", "api/gammapy.modeling.models.integrate_spectrum", "api/gammapy.modeling.models.read_hermes_cube", "api/gammapy.modeling.models.scale_plot_flux", "api/gammapy.modeling.models.utils.read_hermes_cube", "api/gammapy.modeling.select_nested_models", "api/gammapy.modeling.stat_profile_ul_scipy", "api/gammapy.stats.CashCountsStatistic", "api/gammapy.stats.WStatCountsStatistic", "api/gammapy.stats.cash", "api/gammapy.stats.cash_sum_cython", "api/gammapy.stats.compute_chisq", "api/gammapy.stats.compute_flux_doubling", "api/gammapy.stats.compute_fpp", "api/gammapy.stats.compute_fvar", "api/gammapy.stats.cstat", "api/gammapy.stats.f_cash_root_cython", "api/gammapy.stats.get_wstat_gof_terms", "api/gammapy.stats.get_wstat_mu_bkg", "api/gammapy.stats.norm_bounds_cython", "api/gammapy.stats.wstat", "api/gammapy.utils.cluster.hierarchical_clustering", "api/gammapy.utils.cluster.standard_scaler", "api/gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER", "api/gammapy.utils.coordinates.cartesian", "api/gammapy.utils.coordinates.fov_to_sky", "api/gammapy.utils.coordinates.galactic", "api/gammapy.utils.coordinates.motion_since_birth", "api/gammapy.utils.coordinates.polar", "api/gammapy.utils.coordinates.sky_to_fov", "api/gammapy.utils.coordinates.velocity_glon_glat", "api/gammapy.utils.fits.HDULocation", "api/gammapy.utils.fits.LazyFitsData", "api/gammapy.utils.fits.earth_location_from_dict", "api/gammapy.utils.integrate.trapz_loglog", "api/gammapy.utils.interpolation.ScaledRegularGridInterpolator", "api/gammapy.utils.interpolation.interpolate_profile", "api/gammapy.utils.interpolation.interpolation_scale", "api/gammapy.utils.parallel.BACKEND_DEFAULT", "api/gammapy.utils.parallel.METHOD_DEFAULT", "api/gammapy.utils.parallel.METHOD_KWARGS_DEFAULT", "api/gammapy.utils.parallel.N_JOBS_DEFAULT", "api/gammapy.utils.parallel.POOL_KWARGS_DEFAULT", "api/gammapy.utils.parallel.multiprocessing_manager", "api/gammapy.utils.parallel.run_multiprocessing", "api/gammapy.utils.random.InverseCDFSampler", "api/gammapy.utils.random.draw", "api/gammapy.utils.random.get_random_state", "api/gammapy.utils.random.normalize", "api/gammapy.utils.random.pdf", "api/gammapy.utils.random.sample_powerlaw", "api/gammapy.utils.random.sample_sphere", "api/gammapy.utils.random.sample_sphere_distance", "api/gammapy.utils.random.sample_times", "api/gammapy.utils.regions.compound_region_to_regions", "api/gammapy.utils.regions.make_concentric_annulus_sky_regions", "api/gammapy.utils.regions.make_orthogonal_rectangle_sky_regions", "api/gammapy.utils.regions.region_to_frame", "api/gammapy.utils.regions.regions_to_compound_region", "api/gammapy.utils.scripts.get_images_paths", "api/gammapy.utils.scripts.make_path", "api/gammapy.utils.scripts.read_yaml", "api/gammapy.utils.scripts.recursive_merge_dicts", "api/gammapy.utils.scripts.write_yaml", "api/gammapy.utils.table.hstack_columns", "api/gammapy.utils.table.table_row_to_dict", "api/gammapy.utils.table.table_standardise_units_copy", "api/gammapy.utils.table.table_standardise_units_inplace", "api/gammapy.utils.testing.Checker", "api/gammapy.utils.testing.assert_quantity_allclose", "api/gammapy.utils.testing.assert_skycoord_allclose", "api/gammapy.utils.testing.assert_time_allclose", "api/gammapy.utils.testing.mpl_plot_check", "api/gammapy.utils.testing.requires_data", "api/gammapy.utils.testing.requires_dependency", "api/gammapy.utils.time.absolute_time", "api/gammapy.utils.time.time_ref_from_dict", "api/gammapy.utils.time.time_ref_to_dict", "api/gammapy.utils.time.time_relative_to_ref", "api/gammapy.utils.units.standardise_unit", "api/gammapy.utils.units.unit_from_fits_image_hdu", "api/gammapy.visualization.MapPanelPlotter", "api/gammapy.visualization.add_colorbar", "api/gammapy.visualization.annotate_heatmap", "api/gammapy.visualization.colormap_hess", "api/gammapy.visualization.colormap_milagro", "api/gammapy.visualization.plot_contour_line", "api/gammapy.visualization.plot_distribution", "api/gammapy.visualization.plot_heatmap", "api/gammapy.visualization.plot_map_rgb", "api/gammapy.visualization.plot_npred_signal", "api/gammapy.visualization.plot_spectrum_datasets_off_regions", "api/gammapy.visualization.plot_theta_squared_table", "development/dependencies", "development/dev_howto", "development/doc_howto", "development/index", "development/intro", "development/pigs/index", "development/pigs/pig-001", "development/pigs/pig-002", "development/pigs/pig-003", "development/pigs/pig-004", "development/pigs/pig-005", "development/pigs/pig-006", "development/pigs/pig-007", "development/pigs/pig-008", "development/pigs/pig-009", "development/pigs/pig-010", "development/pigs/pig-011", "development/pigs/pig-012", "development/pigs/pig-013", "development/pigs/pig-014", "development/pigs/pig-016", "development/pigs/pig-018", "development/pigs/pig-019", "development/pigs/pig-020", "development/pigs/pig-021", "development/pigs/pig-022", "development/pigs/pig-023", "development/pigs/pig-024", "development/pigs/pig-025", "development/pigs/pig-026", "development/release", "development/setup", "getting-started/environments", "getting-started/index", "getting-started/install", "getting-started/quickstart", "getting-started/troubleshooting", "getting-started/usage", "index", "release-notes/index", "release-notes/v0.1", "release-notes/v0.10", "release-notes/v0.11", "release-notes/v0.12", "release-notes/v0.13", "release-notes/v0.14", "release-notes/v0.15", "release-notes/v0.16", "release-notes/v0.17", "release-notes/v0.18", "release-notes/v0.18.1", "release-notes/v0.18.2", "release-notes/v0.19", "release-notes/v0.2", "release-notes/v0.20", "release-notes/v0.20.1", "release-notes/v0.3", "release-notes/v0.4", "release-notes/v0.5", "release-notes/v0.6", "release-notes/v0.7", "release-notes/v0.8", "release-notes/v0.9", "release-notes/v1.0", "release-notes/v1.0.1", "release-notes/v1.0.2", "release-notes/v1.1", "release-notes/v1.2", "release-notes/v1.3", "sg_execution_times", "tutorials/analysis-1d/cta_sensitivity", "tutorials/analysis-1d/extended_source_spectral_analysis", "tutorials/analysis-1d/sed_fitting", "tutorials/analysis-1d/sg_execution_times", "tutorials/analysis-1d/spectral_analysis", "tutorials/analysis-1d/spectral_analysis_hli", "tutorials/analysis-1d/spectral_analysis_rad_max", "tutorials/analysis-1d/spectrum_simulation", "tutorials/analysis-2d/detect", "tutorials/analysis-2d/modeling_2D", "tutorials/analysis-2d/ring_background", "tutorials/analysis-2d/sg_execution_times", "tutorials/analysis-3d/analysis_3d", "tutorials/analysis-3d/analysis_mwl", "tutorials/analysis-3d/cta_data_analysis", "tutorials/analysis-3d/energy_dependent_estimation", "tutorials/analysis-3d/event_sampling", "tutorials/analysis-3d/event_sampling_nrg_depend_models", "tutorials/analysis-3d/flux_profiles", "tutorials/analysis-3d/sg_execution_times", "tutorials/analysis-3d/simulate_3d", "tutorials/analysis-time/Variability_estimation", "tutorials/analysis-time/light_curve", "tutorials/analysis-time/light_curve_flare", "tutorials/analysis-time/light_curve_simulation", "tutorials/analysis-time/pulsar_analysis", "tutorials/analysis-time/sg_execution_times", "tutorials/api/astro_dark_matter", "tutorials/api/catalog", "tutorials/api/datasets", "tutorials/api/fitting", "tutorials/api/irfs", "tutorials/api/makers", "tutorials/api/maps", "tutorials/api/mask_maps", "tutorials/api/model_management", "tutorials/api/models", "tutorials/api/observation_clustering", "tutorials/api/priors", "tutorials/api/sg_execution_times", "tutorials/data/cta", "tutorials/data/fermi_lat", "tutorials/data/hawc", "tutorials/data/hess", "tutorials/data/sg_execution_times", "tutorials/index", "tutorials/scripts/sg_execution_times", "tutorials/scripts/survey_map", "tutorials/sg_execution_times", "tutorials/starting/analysis_1", "tutorials/starting/analysis_2", "tutorials/starting/overview", "tutorials/starting/sg_execution_times", "user-guide/astro/darkmatter/index", "user-guide/astro/index", "user-guide/astro/population/index", "user-guide/astro/source/index", "user-guide/astro/source/pulsar", "user-guide/astro/source/pwn", "user-guide/astro/source/snr", "user-guide/catalog", "user-guide/datasets/index", "user-guide/dl3", "user-guide/estimators", "user-guide/hli", "user-guide/howto", "user-guide/index", "user-guide/irf/aeff", "user-guide/irf/bkg", "user-guide/irf/edisp", "user-guide/irf/index", "user-guide/irf/psf", "user-guide/makers/fov", "user-guide/makers/index", "user-guide/makers/reflected", "user-guide/makers/ring", "user-guide/maps/hpxmap", "user-guide/maps/index", "user-guide/maps/regionmap", "user-guide/model-gallery/index", "user-guide/model-gallery/sg_execution_times", "user-guide/model-gallery/spatial/plot_constant", "user-guide/model-gallery/spatial/plot_disk", "user-guide/model-gallery/spatial/plot_gauss", "user-guide/model-gallery/spatial/plot_gen_gauss", "user-guide/model-gallery/spatial/plot_piecewise_norm_spatial", "user-guide/model-gallery/spatial/plot_point", "user-guide/model-gallery/spatial/plot_shell", "user-guide/model-gallery/spatial/plot_shell2", "user-guide/model-gallery/spatial/plot_template", "user-guide/model-gallery/spatial/sg_execution_times", "user-guide/model-gallery/spectral/plot_absorbed", "user-guide/model-gallery/spectral/plot_broken_powerlaw", "user-guide/model-gallery/spectral/plot_compound", "user-guide/model-gallery/spectral/plot_constant_spectral", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_3fgl", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_norm_spectral", "user-guide/model-gallery/spectral/plot_gauss_spectral", "user-guide/model-gallery/spectral/plot_logparabola", "user-guide/model-gallery/spectral/plot_logparabola_norm_spectral", "user-guide/model-gallery/spectral/plot_naima", "user-guide/model-gallery/spectral/plot_piecewise_norm_spectral", "user-guide/model-gallery/spectral/plot_powerlaw", "user-guide/model-gallery/spectral/plot_powerlaw2", "user-guide/model-gallery/spectral/plot_powerlaw_norm_spectral", "user-guide/model-gallery/spectral/plot_smooth_broken_powerlaw", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_3fgl", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl_dr1", "user-guide/model-gallery/spectral/plot_template_spectral", "user-guide/model-gallery/spectral/sg_execution_times", "user-guide/model-gallery/temporal/plot_constant_temporal", "user-guide/model-gallery/temporal/plot_expdecay_temporal", "user-guide/model-gallery/temporal/plot_gaussian_temporal", "user-guide/model-gallery/temporal/plot_generalized_gaussian_temporal", "user-guide/model-gallery/temporal/plot_linear_temporal", "user-guide/model-gallery/temporal/plot_powerlaw_temporal", "user-guide/model-gallery/temporal/plot_sine_temporal", "user-guide/model-gallery/temporal/plot_template_phase_temporal", "user-guide/model-gallery/temporal/plot_template_temporal", "user-guide/model-gallery/temporal/sg_execution_times", "user-guide/modeling", "user-guide/package", "user-guide/references", "user-guide/scripts/index", "user-guide/stats/fit_statistics", "user-guide/stats/index", "user-guide/stats/wstat_derivation", "user-guide/utils", "user-guide/visualization/index"], "filenames": ["api-reference/analysis.rst", "api-reference/astro.rst", "api-reference/catalog.rst", "api-reference/data.rst", "api-reference/datasets.rst", "api-reference/estimators.rst", "api-reference/index.rst", "api-reference/irf.rst", "api-reference/makers.rst", "api-reference/maps.rst", "api-reference/modeling.rst", "api-reference/scripts.rst", "api-reference/stats.rst", "api-reference/utils.rst", "api-reference/visualization.rst", "api/gammapy.analysis.Analysis.rst", "api/gammapy.analysis.AnalysisConfig.rst", "api/gammapy.astro.darkmatter.BurkertProfile.rst", "api/gammapy.astro.darkmatter.DMProfile.rst", "api/gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.rst", "api/gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.rst", "api/gammapy.astro.darkmatter.EinastoProfile.rst", "api/gammapy.astro.darkmatter.IsothermalProfile.rst", "api/gammapy.astro.darkmatter.JFactory.rst", "api/gammapy.astro.darkmatter.MooreProfile.rst", "api/gammapy.astro.darkmatter.NFWProfile.rst", "api/gammapy.astro.darkmatter.PrimaryFlux.rst", "api/gammapy.astro.darkmatter.ZhaoProfile.rst", "api/gammapy.astro.population.CaseBattacharya1998.rst", "api/gammapy.astro.population.Exponential.rst", "api/gammapy.astro.population.FaucherKaspi2006.rst", "api/gammapy.astro.population.FaucherKaspi2006VelocityBimodal.rst", "api/gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.rst", "api/gammapy.astro.population.FaucherSpiral.rst", "api/gammapy.astro.population.LogSpiral.rst", "api/gammapy.astro.population.Lorimer2006.rst", "api/gammapy.astro.population.Paczynski1990.rst", "api/gammapy.astro.population.Paczynski1990Velocity.rst", "api/gammapy.astro.population.ValleeSpiral.rst", "api/gammapy.astro.population.YusifovKucuk2004.rst", "api/gammapy.astro.population.YusifovKucuk2004B.rst", "api/gammapy.astro.population.add_observed_parameters.rst", "api/gammapy.astro.population.add_pulsar_parameters.rst", "api/gammapy.astro.population.add_pwn_parameters.rst", "api/gammapy.astro.population.add_snr_parameters.rst", "api/gammapy.astro.population.make_base_catalog_galactic.rst", "api/gammapy.astro.population.make_catalog_random_positions_cube.rst", "api/gammapy.astro.population.make_catalog_random_positions_sphere.rst", "api/gammapy.astro.population.radial_distributions.rst", "api/gammapy.astro.population.velocity_distributions.rst", "api/gammapy.astro.source.PWN.rst", "api/gammapy.astro.source.Pulsar.rst", "api/gammapy.astro.source.SNR.rst", "api/gammapy.astro.source.SNRTrueloveMcKee.rst", "api/gammapy.astro.source.SimplePulsar.rst", "api/gammapy.catalog.CATALOG_REGISTRY.rst", "api/gammapy.catalog.SourceCatalog.rst", "api/gammapy.catalog.SourceCatalog1LHAASO.rst", "api/gammapy.catalog.SourceCatalog2FHL.rst", "api/gammapy.catalog.SourceCatalog2HWC.rst", "api/gammapy.catalog.SourceCatalog3FGL.rst", "api/gammapy.catalog.SourceCatalog3FHL.rst", "api/gammapy.catalog.SourceCatalog3HWC.rst", "api/gammapy.catalog.SourceCatalog4FGL.rst", "api/gammapy.catalog.SourceCatalogGammaCat.rst", "api/gammapy.catalog.SourceCatalogHGPS.rst", "api/gammapy.catalog.SourceCatalogLargeScaleHGPS.rst", "api/gammapy.catalog.SourceCatalogObject.rst", "api/gammapy.catalog.SourceCatalogObject1LHAASO.rst", "api/gammapy.catalog.SourceCatalogObject2FHL.rst", "api/gammapy.catalog.SourceCatalogObject2HWC.rst", "api/gammapy.catalog.SourceCatalogObject3FGL.rst", "api/gammapy.catalog.SourceCatalogObject3FHL.rst", "api/gammapy.catalog.SourceCatalogObject3HWC.rst", "api/gammapy.catalog.SourceCatalogObject4FGL.rst", "api/gammapy.catalog.SourceCatalogObjectGammaCat.rst", "api/gammapy.catalog.SourceCatalogObjectHGPS.rst", "api/gammapy.catalog.SourceCatalogObjectHGPSComponent.rst", "api/gammapy.data.DataStore.rst", "api/gammapy.data.EventList.rst", "api/gammapy.data.EventListMetaData.rst", "api/gammapy.data.FixedPointingInfo.rst", "api/gammapy.data.GTI.rst", "api/gammapy.data.HDUIndexTable.rst", "api/gammapy.data.Observation.rst", "api/gammapy.data.ObservationFilter.rst", "api/gammapy.data.ObservationTable.rst", "api/gammapy.data.Observations.rst", "api/gammapy.data.ObservationsEventsSampler.rst", "api/gammapy.data.PointingInfo.rst", "api/gammapy.data.PointingMode.rst", "api/gammapy.data.get_irfs_features.rst", "api/gammapy.data.observatory_locations.rst", "api/gammapy.datasets.DATASET_REGISTRY.rst", "api/gammapy.datasets.Dataset.rst", "api/gammapy.datasets.Datasets.rst", "api/gammapy.datasets.FluxPointsDataset.rst", "api/gammapy.datasets.MapDataset.rst", "api/gammapy.datasets.MapDatasetEventSampler.rst", "api/gammapy.datasets.MapDatasetMetaData.rst", "api/gammapy.datasets.MapDatasetOnOff.rst", "api/gammapy.datasets.OGIPDatasetReader.rst", "api/gammapy.datasets.OGIPDatasetWriter.rst", "api/gammapy.datasets.ObservationEventSampler.rst", "api/gammapy.datasets.SpectrumDataset.rst", "api/gammapy.datasets.SpectrumDatasetOnOff.rst", "api/gammapy.datasets.create_map_dataset_from_observation.rst", "api/gammapy.datasets.create_map_dataset_geoms.rst", "api/gammapy.estimators.ASmoothMapEstimator.rst", "api/gammapy.estimators.ESTIMATOR_REGISTRY.rst", "api/gammapy.estimators.EnergyDependentMorphologyEstimator.rst", "api/gammapy.estimators.Estimator.rst", "api/gammapy.estimators.ExcessMapEstimator.rst", "api/gammapy.estimators.FluxMaps.rst", "api/gammapy.estimators.FluxMetaData.rst", "api/gammapy.estimators.FluxPoints.rst", "api/gammapy.estimators.FluxPointsEstimator.rst", "api/gammapy.estimators.FluxProfileEstimator.rst", "api/gammapy.estimators.ImageProfile.rst", "api/gammapy.estimators.ImageProfileEstimator.rst", "api/gammapy.estimators.LightCurveEstimator.rst", "api/gammapy.estimators.ParameterEstimator.rst", "api/gammapy.estimators.SensitivityEstimator.rst", "api/gammapy.estimators.TSMapEstimator.rst", "api/gammapy.estimators.utils.compute_lightcurve_doublingtime.rst", "api/gammapy.estimators.utils.compute_lightcurve_fpp.rst", "api/gammapy.estimators.utils.compute_lightcurve_fvar.rst", "api/gammapy.estimators.utils.estimate_exposure_reco_energy.rst", "api/gammapy.estimators.utils.find_peaks.rst", "api/gammapy.estimators.utils.find_peaks_in_flux_map.rst", "api/gammapy.estimators.utils.get_rebinned_axis.rst", "api/gammapy.estimators.utils.resample_energy_edges.rst", "api/gammapy.irf.Background2D.rst", "api/gammapy.irf.Background3D.rst", "api/gammapy.irf.BackgroundIRF.rst", "api/gammapy.irf.EDispKernel.rst", "api/gammapy.irf.EDispKernelMap.rst", "api/gammapy.irf.EDispMap.rst", "api/gammapy.irf.EffectiveAreaTable2D.rst", "api/gammapy.irf.EnergyDependentMultiGaussPSF.rst", "api/gammapy.irf.EnergyDispersion2D.rst", "api/gammapy.irf.FoVAlignment.rst", "api/gammapy.irf.IRF.rst", "api/gammapy.irf.IRFMap.rst", "api/gammapy.irf.IRF_REGISTRY.rst", "api/gammapy.irf.PSF3D.rst", "api/gammapy.irf.PSFKernel.rst", "api/gammapy.irf.PSFKing.rst", "api/gammapy.irf.PSFMap.rst", "api/gammapy.irf.ParametricPSF.rst", "api/gammapy.irf.RadMax2D.rst", "api/gammapy.irf.RecoPSFMap.rst", "api/gammapy.irf.load_irf_dict_from_file.rst", "api/gammapy.makers.AdaptiveRingBackgroundMaker.rst", "api/gammapy.makers.DatasetsMaker.rst", "api/gammapy.makers.FoVBackgroundMaker.rst", "api/gammapy.makers.MAKER_REGISTRY.rst", "api/gammapy.makers.Maker.rst", "api/gammapy.makers.MapDatasetMaker.rst", "api/gammapy.makers.PhaseBackgroundMaker.rst", "api/gammapy.makers.ReflectedRegionsBackgroundMaker.rst", "api/gammapy.makers.ReflectedRegionsFinder.rst", "api/gammapy.makers.RegionsFinder.rst", "api/gammapy.makers.RingBackgroundMaker.rst", "api/gammapy.makers.SafeMaskMaker.rst", "api/gammapy.makers.SpectrumDatasetMaker.rst", "api/gammapy.makers.WobbleRegionsFinder.rst", "api/gammapy.makers.utils.make_counts_rad_max.rst", "api/gammapy.makers.utils.make_edisp_kernel_map.rst", "api/gammapy.makers.utils.make_edisp_map.rst", "api/gammapy.makers.utils.make_effective_livetime_map.rst", "api/gammapy.makers.utils.make_map_background_irf.rst", "api/gammapy.makers.utils.make_map_exposure_true_energy.rst", "api/gammapy.makers.utils.make_observation_time_map.rst", "api/gammapy.makers.utils.make_psf_map.rst", "api/gammapy.makers.utils.make_theta_squared_table.rst", "api/gammapy.maps.Geom.rst", "api/gammapy.maps.HpxGeom.rst", "api/gammapy.maps.HpxMap.rst", "api/gammapy.maps.HpxNDMap.rst", "api/gammapy.maps.LabelMapAxis.rst", "api/gammapy.maps.Map.rst", "api/gammapy.maps.MapAxes.rst", "api/gammapy.maps.MapAxis.rst", "api/gammapy.maps.MapCoord.rst", "api/gammapy.maps.Maps.rst", "api/gammapy.maps.RegionGeom.rst", "api/gammapy.maps.RegionNDMap.rst", "api/gammapy.maps.TimeMapAxis.rst", "api/gammapy.maps.WcsGeom.rst", "api/gammapy.maps.WcsMap.rst", "api/gammapy.maps.WcsNDMap.rst", "api/gammapy.maps.containment_radius.rst", "api/gammapy.maps.containment_region.rst", "api/gammapy.modeling.Covariance.rst", "api/gammapy.modeling.Fit.rst", "api/gammapy.modeling.Parameter.rst", "api/gammapy.modeling.Parameters.rst", "api/gammapy.modeling.PriorParameter.rst", "api/gammapy.modeling.PriorParameters.rst", "api/gammapy.modeling.models.BrokenPowerLawSpectralModel.rst", "api/gammapy.modeling.models.CompoundSpectralModel.rst", "api/gammapy.modeling.models.ConstantFluxSpatialModel.rst", "api/gammapy.modeling.models.ConstantSpatialModel.rst", "api/gammapy.modeling.models.ConstantSpectralModel.rst", "api/gammapy.modeling.models.ConstantTemporalModel.rst", "api/gammapy.modeling.models.DatasetModels.rst", "api/gammapy.modeling.models.DiskSpatialModel.rst", "api/gammapy.modeling.models.EBLAbsorptionNormSpectralModel.rst", "api/gammapy.modeling.models.EBL_DATA_BUILTIN.rst", "api/gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.rst", "api/gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.rst", "api/gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.rst", "api/gammapy.modeling.models.ExpDecayTemporalModel.rst", "api/gammapy.modeling.models.FoVBackgroundModel.rst", "api/gammapy.modeling.models.GaussianSpatialModel.rst", "api/gammapy.modeling.models.GaussianSpectralModel.rst", "api/gammapy.modeling.models.GaussianTemporalModel.rst", "api/gammapy.modeling.models.GeneralizedGaussianSpatialModel.rst", "api/gammapy.modeling.models.GeneralizedGaussianTemporalModel.rst", "api/gammapy.modeling.models.LightCurveTemplateTemporalModel.rst", "api/gammapy.modeling.models.LinearTemporalModel.rst", "api/gammapy.modeling.models.LogParabolaNormSpectralModel.rst", "api/gammapy.modeling.models.LogParabolaSpectralModel.rst", "api/gammapy.modeling.models.MODEL_REGISTRY.rst", "api/gammapy.modeling.models.MeyerCrabSpectralModel.rst", "api/gammapy.modeling.models.Model.rst", "api/gammapy.modeling.models.ModelBase.rst", "api/gammapy.modeling.models.Models.rst", "api/gammapy.modeling.models.NaimaSpectralModel.rst", "api/gammapy.modeling.models.PiecewiseNormSpatialModel.rst", "api/gammapy.modeling.models.PiecewiseNormSpectralModel.rst", "api/gammapy.modeling.models.PointSpatialModel.rst", "api/gammapy.modeling.models.PowerLaw2SpectralModel.rst", "api/gammapy.modeling.models.PowerLawNormSpectralModel.rst", "api/gammapy.modeling.models.PowerLawSpectralModel.rst", "api/gammapy.modeling.models.PowerLawTemporalModel.rst", "api/gammapy.modeling.models.SPATIAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.ScaleSpectralModel.rst", "api/gammapy.modeling.models.Shell2SpatialModel.rst", "api/gammapy.modeling.models.ShellSpatialModel.rst", "api/gammapy.modeling.models.SineTemporalModel.rst", "api/gammapy.modeling.models.SkyModel.rst", "api/gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.rst", "api/gammapy.modeling.models.SpatialModel.rst", "api/gammapy.modeling.models.SpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.rst", "api/gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.rst", "api/gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY.rst", "api/gammapy.modeling.models.TemplateNDSpatialModel.rst", "api/gammapy.modeling.models.TemplateNDSpectralModel.rst", "api/gammapy.modeling.models.TemplateNPredModel.rst", "api/gammapy.modeling.models.TemplatePhaseCurveTemporalModel.rst", "api/gammapy.modeling.models.TemplateSpatialModel.rst", "api/gammapy.modeling.models.TemplateSpectralModel.rst", "api/gammapy.modeling.models.TemporalModel.rst", "api/gammapy.modeling.models.create_cosmic_ray_spectral_model.rst", "api/gammapy.modeling.models.create_crab_spectral_model.rst", "api/gammapy.modeling.models.create_fermi_isotropic_diffuse_model.rst", "api/gammapy.modeling.models.integrate_spectrum.rst", "api/gammapy.modeling.models.read_hermes_cube.rst", "api/gammapy.modeling.models.scale_plot_flux.rst", "api/gammapy.modeling.models.utils.read_hermes_cube.rst", "api/gammapy.modeling.select_nested_models.rst", "api/gammapy.modeling.stat_profile_ul_scipy.rst", "api/gammapy.stats.CashCountsStatistic.rst", "api/gammapy.stats.WStatCountsStatistic.rst", "api/gammapy.stats.cash.rst", "api/gammapy.stats.cash_sum_cython.rst", "api/gammapy.stats.compute_chisq.rst", "api/gammapy.stats.compute_flux_doubling.rst", "api/gammapy.stats.compute_fpp.rst", "api/gammapy.stats.compute_fvar.rst", "api/gammapy.stats.cstat.rst", "api/gammapy.stats.f_cash_root_cython.rst", "api/gammapy.stats.get_wstat_gof_terms.rst", "api/gammapy.stats.get_wstat_mu_bkg.rst", "api/gammapy.stats.norm_bounds_cython.rst", "api/gammapy.stats.wstat.rst", "api/gammapy.utils.cluster.hierarchical_clustering.rst", "api/gammapy.utils.cluster.standard_scaler.rst", "api/gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER.rst", "api/gammapy.utils.coordinates.cartesian.rst", "api/gammapy.utils.coordinates.fov_to_sky.rst", "api/gammapy.utils.coordinates.galactic.rst", "api/gammapy.utils.coordinates.motion_since_birth.rst", "api/gammapy.utils.coordinates.polar.rst", "api/gammapy.utils.coordinates.sky_to_fov.rst", "api/gammapy.utils.coordinates.velocity_glon_glat.rst", "api/gammapy.utils.fits.HDULocation.rst", "api/gammapy.utils.fits.LazyFitsData.rst", "api/gammapy.utils.fits.earth_location_from_dict.rst", "api/gammapy.utils.integrate.trapz_loglog.rst", "api/gammapy.utils.interpolation.ScaledRegularGridInterpolator.rst", "api/gammapy.utils.interpolation.interpolate_profile.rst", "api/gammapy.utils.interpolation.interpolation_scale.rst", "api/gammapy.utils.parallel.BACKEND_DEFAULT.rst", "api/gammapy.utils.parallel.METHOD_DEFAULT.rst", "api/gammapy.utils.parallel.METHOD_KWARGS_DEFAULT.rst", "api/gammapy.utils.parallel.N_JOBS_DEFAULT.rst", "api/gammapy.utils.parallel.POOL_KWARGS_DEFAULT.rst", "api/gammapy.utils.parallel.multiprocessing_manager.rst", "api/gammapy.utils.parallel.run_multiprocessing.rst", "api/gammapy.utils.random.InverseCDFSampler.rst", "api/gammapy.utils.random.draw.rst", "api/gammapy.utils.random.get_random_state.rst", "api/gammapy.utils.random.normalize.rst", "api/gammapy.utils.random.pdf.rst", "api/gammapy.utils.random.sample_powerlaw.rst", "api/gammapy.utils.random.sample_sphere.rst", "api/gammapy.utils.random.sample_sphere_distance.rst", "api/gammapy.utils.random.sample_times.rst", "api/gammapy.utils.regions.compound_region_to_regions.rst", "api/gammapy.utils.regions.make_concentric_annulus_sky_regions.rst", "api/gammapy.utils.regions.make_orthogonal_rectangle_sky_regions.rst", "api/gammapy.utils.regions.region_to_frame.rst", "api/gammapy.utils.regions.regions_to_compound_region.rst", "api/gammapy.utils.scripts.get_images_paths.rst", "api/gammapy.utils.scripts.make_path.rst", "api/gammapy.utils.scripts.read_yaml.rst", "api/gammapy.utils.scripts.recursive_merge_dicts.rst", "api/gammapy.utils.scripts.write_yaml.rst", "api/gammapy.utils.table.hstack_columns.rst", "api/gammapy.utils.table.table_row_to_dict.rst", "api/gammapy.utils.table.table_standardise_units_copy.rst", "api/gammapy.utils.table.table_standardise_units_inplace.rst", "api/gammapy.utils.testing.Checker.rst", "api/gammapy.utils.testing.assert_quantity_allclose.rst", "api/gammapy.utils.testing.assert_skycoord_allclose.rst", "api/gammapy.utils.testing.assert_time_allclose.rst", "api/gammapy.utils.testing.mpl_plot_check.rst", "api/gammapy.utils.testing.requires_data.rst", "api/gammapy.utils.testing.requires_dependency.rst", "api/gammapy.utils.time.absolute_time.rst", "api/gammapy.utils.time.time_ref_from_dict.rst", "api/gammapy.utils.time.time_ref_to_dict.rst", "api/gammapy.utils.time.time_relative_to_ref.rst", "api/gammapy.utils.units.standardise_unit.rst", "api/gammapy.utils.units.unit_from_fits_image_hdu.rst", "api/gammapy.visualization.MapPanelPlotter.rst", "api/gammapy.visualization.add_colorbar.rst", "api/gammapy.visualization.annotate_heatmap.rst", "api/gammapy.visualization.colormap_hess.rst", "api/gammapy.visualization.colormap_milagro.rst", "api/gammapy.visualization.plot_contour_line.rst", "api/gammapy.visualization.plot_distribution.rst", "api/gammapy.visualization.plot_heatmap.rst", "api/gammapy.visualization.plot_map_rgb.rst", "api/gammapy.visualization.plot_npred_signal.rst", "api/gammapy.visualization.plot_spectrum_datasets_off_regions.rst", "api/gammapy.visualization.plot_theta_squared_table.rst", "development/dependencies.rst", "development/dev_howto.rst", "development/doc_howto.rst", "development/index.rst", "development/intro.rst", "development/pigs/index.rst", "development/pigs/pig-001.rst", "development/pigs/pig-002.rst", "development/pigs/pig-003.rst", "development/pigs/pig-004.rst", "development/pigs/pig-005.rst", "development/pigs/pig-006.rst", "development/pigs/pig-007.rst", "development/pigs/pig-008.rst", "development/pigs/pig-009.rst", "development/pigs/pig-010.rst", "development/pigs/pig-011.rst", "development/pigs/pig-012.rst", "development/pigs/pig-013.rst", "development/pigs/pig-014.rst", "development/pigs/pig-016.rst", "development/pigs/pig-018.rst", "development/pigs/pig-019.rst", "development/pigs/pig-020.rst", "development/pigs/pig-021.rst", "development/pigs/pig-022.rst", "development/pigs/pig-023.rst", "development/pigs/pig-024.rst", "development/pigs/pig-025.rst", "development/pigs/pig-026.rst", "development/release.rst", "development/setup.rst", "getting-started/environments.rst", "getting-started/index.rst", "getting-started/install.rst", "getting-started/quickstart.rst", "getting-started/troubleshooting.rst", "getting-started/usage.rst", "index.rst", "release-notes/index.rst", "release-notes/v0.1.rst", "release-notes/v0.10.rst", "release-notes/v0.11.rst", "release-notes/v0.12.rst", "release-notes/v0.13.rst", "release-notes/v0.14.rst", "release-notes/v0.15.rst", "release-notes/v0.16.rst", "release-notes/v0.17.rst", "release-notes/v0.18.rst", "release-notes/v0.18.1.rst", "release-notes/v0.18.2.rst", "release-notes/v0.19.rst", "release-notes/v0.2.rst", "release-notes/v0.20.rst", "release-notes/v0.20.1.rst", "release-notes/v0.3.rst", "release-notes/v0.4.rst", "release-notes/v0.5.rst", "release-notes/v0.6.rst", "release-notes/v0.7.rst", "release-notes/v0.8.rst", "release-notes/v0.9.rst", "release-notes/v1.0.rst", "release-notes/v1.0.1.rst", "release-notes/v1.0.2.rst", "release-notes/v1.1.rst", "release-notes/v1.2.rst", "release-notes/v1.3.rst", "sg_execution_times.rst", "tutorials/analysis-1d/cta_sensitivity.rst", "tutorials/analysis-1d/extended_source_spectral_analysis.rst", "tutorials/analysis-1d/sed_fitting.rst", "tutorials/analysis-1d/sg_execution_times.rst", "tutorials/analysis-1d/spectral_analysis.rst", "tutorials/analysis-1d/spectral_analysis_hli.rst", "tutorials/analysis-1d/spectral_analysis_rad_max.rst", "tutorials/analysis-1d/spectrum_simulation.rst", "tutorials/analysis-2d/detect.rst", "tutorials/analysis-2d/modeling_2D.rst", "tutorials/analysis-2d/ring_background.rst", "tutorials/analysis-2d/sg_execution_times.rst", "tutorials/analysis-3d/analysis_3d.rst", "tutorials/analysis-3d/analysis_mwl.rst", "tutorials/analysis-3d/cta_data_analysis.rst", "tutorials/analysis-3d/energy_dependent_estimation.rst", "tutorials/analysis-3d/event_sampling.rst", "tutorials/analysis-3d/event_sampling_nrg_depend_models.rst", "tutorials/analysis-3d/flux_profiles.rst", "tutorials/analysis-3d/sg_execution_times.rst", "tutorials/analysis-3d/simulate_3d.rst", "tutorials/analysis-time/Variability_estimation.rst", "tutorials/analysis-time/light_curve.rst", "tutorials/analysis-time/light_curve_flare.rst", "tutorials/analysis-time/light_curve_simulation.rst", "tutorials/analysis-time/pulsar_analysis.rst", "tutorials/analysis-time/sg_execution_times.rst", "tutorials/api/astro_dark_matter.rst", "tutorials/api/catalog.rst", "tutorials/api/datasets.rst", "tutorials/api/fitting.rst", "tutorials/api/irfs.rst", "tutorials/api/makers.rst", "tutorials/api/maps.rst", "tutorials/api/mask_maps.rst", "tutorials/api/model_management.rst", "tutorials/api/models.rst", "tutorials/api/observation_clustering.rst", "tutorials/api/priors.rst", "tutorials/api/sg_execution_times.rst", "tutorials/data/cta.rst", "tutorials/data/fermi_lat.rst", "tutorials/data/hawc.rst", "tutorials/data/hess.rst", "tutorials/data/sg_execution_times.rst", "tutorials/index.rst", "tutorials/scripts/sg_execution_times.rst", "tutorials/scripts/survey_map.rst", "tutorials/sg_execution_times.rst", "tutorials/starting/analysis_1.rst", "tutorials/starting/analysis_2.rst", "tutorials/starting/overview.rst", "tutorials/starting/sg_execution_times.rst", "user-guide/astro/darkmatter/index.rst", "user-guide/astro/index.rst", "user-guide/astro/population/index.rst", "user-guide/astro/source/index.rst", "user-guide/astro/source/pulsar.rst", "user-guide/astro/source/pwn.rst", "user-guide/astro/source/snr.rst", "user-guide/catalog.rst", "user-guide/datasets/index.rst", "user-guide/dl3.rst", "user-guide/estimators.rst", "user-guide/hli.rst", "user-guide/howto.rst", "user-guide/index.rst", "user-guide/irf/aeff.rst", "user-guide/irf/bkg.rst", "user-guide/irf/edisp.rst", "user-guide/irf/index.rst", "user-guide/irf/psf.rst", "user-guide/makers/fov.rst", "user-guide/makers/index.rst", "user-guide/makers/reflected.rst", "user-guide/makers/ring.rst", "user-guide/maps/hpxmap.rst", "user-guide/maps/index.rst", "user-guide/maps/regionmap.rst", "user-guide/model-gallery/index.rst", "user-guide/model-gallery/sg_execution_times.rst", "user-guide/model-gallery/spatial/plot_constant.rst", "user-guide/model-gallery/spatial/plot_disk.rst", "user-guide/model-gallery/spatial/plot_gauss.rst", "user-guide/model-gallery/spatial/plot_gen_gauss.rst", "user-guide/model-gallery/spatial/plot_piecewise_norm_spatial.rst", "user-guide/model-gallery/spatial/plot_point.rst", "user-guide/model-gallery/spatial/plot_shell.rst", "user-guide/model-gallery/spatial/plot_shell2.rst", "user-guide/model-gallery/spatial/plot_template.rst", "user-guide/model-gallery/spatial/sg_execution_times.rst", "user-guide/model-gallery/spectral/plot_absorbed.rst", "user-guide/model-gallery/spectral/plot_broken_powerlaw.rst", "user-guide/model-gallery/spectral/plot_compound.rst", "user-guide/model-gallery/spectral/plot_constant_spectral.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_3fgl.rst", "user-guide/model-gallery/spectral/plot_exp_cutoff_powerlaw_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_gauss_spectral.rst", "user-guide/model-gallery/spectral/plot_logparabola.rst", "user-guide/model-gallery/spectral/plot_logparabola_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_naima.rst", "user-guide/model-gallery/spectral/plot_piecewise_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_powerlaw.rst", "user-guide/model-gallery/spectral/plot_powerlaw2.rst", "user-guide/model-gallery/spectral/plot_powerlaw_norm_spectral.rst", "user-guide/model-gallery/spectral/plot_smooth_broken_powerlaw.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_3fgl.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl.rst", "user-guide/model-gallery/spectral/plot_super_exp_cutoff_powerlaw_4fgl_dr1.rst", "user-guide/model-gallery/spectral/plot_template_spectral.rst", "user-guide/model-gallery/spectral/sg_execution_times.rst", "user-guide/model-gallery/temporal/plot_constant_temporal.rst", "user-guide/model-gallery/temporal/plot_expdecay_temporal.rst", "user-guide/model-gallery/temporal/plot_gaussian_temporal.rst", "user-guide/model-gallery/temporal/plot_generalized_gaussian_temporal.rst", "user-guide/model-gallery/temporal/plot_linear_temporal.rst", "user-guide/model-gallery/temporal/plot_powerlaw_temporal.rst", "user-guide/model-gallery/temporal/plot_sine_temporal.rst", "user-guide/model-gallery/temporal/plot_template_phase_temporal.rst", "user-guide/model-gallery/temporal/plot_template_temporal.rst", "user-guide/model-gallery/temporal/sg_execution_times.rst", "user-guide/modeling.rst", "user-guide/package.rst", "user-guide/references.rst", "user-guide/scripts/index.rst", "user-guide/stats/fit_statistics.rst", "user-guide/stats/index.rst", "user-guide/stats/wstat_derivation.rst", "user-guide/utils.rst", "user-guide/visualization/index.rst"], "titles": ["analysis - High level interface", "astro - Astrophysics", "catalog - Source catalogs", "data - DL3 data and observations", "datasets - Reduced datasets", "estimators - High level estimators", "API reference", "irf - Instrument response functions", "makers - Data reduction", "maps - Sky maps", "modeling - Models and fitting", "scripts - Command line tools", "stats - Statistics", "utils - Utilities", "visualization - Plotting features", "Analysis", "AnalysisConfig", "BurkertProfile", "DMProfile", "DarkMatterAnnihilationSpectralModel", "DarkMatterDecaySpectralModel", "EinastoProfile", "IsothermalProfile", "JFactory", "MooreProfile", "NFWProfile", "PrimaryFlux", "ZhaoProfile", "CaseBattacharya1998", "Exponential", "FaucherKaspi2006", "FaucherKaspi2006VelocityBimodal", "FaucherKaspi2006VelocityMaxwellian", "FaucherSpiral", "LogSpiral", "Lorimer2006", "Paczynski1990", "Paczynski1990Velocity", "ValleeSpiral", "YusifovKucuk2004", "YusifovKucuk2004B", "add_observed_parameters", "add_pulsar_parameters", "add_pwn_parameters", "add_snr_parameters", "make_base_catalog_galactic", "make_catalog_random_positions_cube", "make_catalog_random_positions_sphere", "radial_distributions", "velocity_distributions", "PWN", "Pulsar", "SNR", "SNRTrueloveMcKee", "SimplePulsar", "CATALOG_REGISTRY", "SourceCatalog", "SourceCatalog1LHAASO", "SourceCatalog2FHL", "SourceCatalog2HWC", "SourceCatalog3FGL", "SourceCatalog3FHL", "SourceCatalog3HWC", "SourceCatalog4FGL", "SourceCatalogGammaCat", "SourceCatalogHGPS", "SourceCatalogLargeScaleHGPS", "SourceCatalogObject", "SourceCatalogObject1LHAASO", "SourceCatalogObject2FHL", "SourceCatalogObject2HWC", "SourceCatalogObject3FGL", "SourceCatalogObject3FHL", "SourceCatalogObject3HWC", "SourceCatalogObject4FGL", "SourceCatalogObjectGammaCat", "SourceCatalogObjectHGPS", "SourceCatalogObjectHGPSComponent", "DataStore", "EventList", "EventListMetaData", "FixedPointingInfo", "GTI", "HDUIndexTable", "Observation", "ObservationFilter", "ObservationTable", "Observations", "ObservationsEventsSampler", "PointingInfo", "PointingMode", "get_irfs_features", "observatory_locations", "DATASET_REGISTRY", "Dataset", "Datasets", "FluxPointsDataset", "MapDataset", "MapDatasetEventSampler", "MapDatasetMetaData", "MapDatasetOnOff", "OGIPDatasetReader", "OGIPDatasetWriter", "ObservationEventSampler", "SpectrumDataset", "SpectrumDatasetOnOff", "create_map_dataset_from_observation", "create_map_dataset_geoms", "ASmoothMapEstimator", "ESTIMATOR_REGISTRY", "EnergyDependentMorphologyEstimator", "Estimator", "ExcessMapEstimator", "FluxMaps", "FluxMetaData", "FluxPoints", "FluxPointsEstimator", "FluxProfileEstimator", "ImageProfile", "ImageProfileEstimator", "LightCurveEstimator", "ParameterEstimator", "SensitivityEstimator", "TSMapEstimator", "compute_lightcurve_doublingtime", "compute_lightcurve_fpp", "compute_lightcurve_fvar", "estimate_exposure_reco_energy", "find_peaks", "find_peaks_in_flux_map", "get_rebinned_axis", "resample_energy_edges", "Background2D", "Background3D", "BackgroundIRF", "EDispKernel", "EDispKernelMap", "EDispMap", "EffectiveAreaTable2D", "EnergyDependentMultiGaussPSF", "EnergyDispersion2D", "FoVAlignment", "IRF", "IRFMap", "IRF_REGISTRY", "PSF3D", "PSFKernel", "PSFKing", "PSFMap", "ParametricPSF", "RadMax2D", "RecoPSFMap", "load_irf_dict_from_file", "AdaptiveRingBackgroundMaker", "DatasetsMaker", "FoVBackgroundMaker", "MAKER_REGISTRY", "Maker", "MapDatasetMaker", "PhaseBackgroundMaker", "ReflectedRegionsBackgroundMaker", "ReflectedRegionsFinder", "RegionsFinder", "RingBackgroundMaker", "SafeMaskMaker", "SpectrumDatasetMaker", "WobbleRegionsFinder", "make_counts_rad_max", "make_edisp_kernel_map", "make_edisp_map", "make_effective_livetime_map", "make_map_background_irf", "make_map_exposure_true_energy", "make_observation_time_map", "make_psf_map", "make_theta_squared_table", "Geom", "HpxGeom", "HpxMap", "HpxNDMap", "LabelMapAxis", "Map", "MapAxes", "MapAxis", "MapCoord", "Maps", "RegionGeom", "RegionNDMap", "TimeMapAxis", "WcsGeom", "WcsMap", "WcsNDMap", "containment_radius", "containment_region", "Covariance", "Fit", "Parameter", "Parameters", "PriorParameter", "PriorParameters", "BrokenPowerLawSpectralModel", "CompoundSpectralModel", "ConstantFluxSpatialModel", "ConstantSpatialModel", "ConstantSpectralModel", "ConstantTemporalModel", "DatasetModels", "DiskSpatialModel", "EBLAbsorptionNormSpectralModel", "EBL_DATA_BUILTIN", "ExpCutoffPowerLaw3FGLSpectralModel", "ExpCutoffPowerLawNormSpectralModel", "ExpCutoffPowerLawSpectralModel", "ExpDecayTemporalModel", "FoVBackgroundModel", "GaussianSpatialModel", "GaussianSpectralModel", "GaussianTemporalModel", "GeneralizedGaussianSpatialModel", "GeneralizedGaussianTemporalModel", "LightCurveTemplateTemporalModel", "LinearTemporalModel", "LogParabolaNormSpectralModel", "LogParabolaSpectralModel", "MODEL_REGISTRY", "MeyerCrabSpectralModel", "Model", "ModelBase", "Models", "NaimaSpectralModel", "PiecewiseNormSpatialModel", "PiecewiseNormSpectralModel", "PointSpatialModel", "PowerLaw2SpectralModel", "PowerLawNormSpectralModel", "PowerLawSpectralModel", "PowerLawTemporalModel", "SPATIAL_MODEL_REGISTRY", "SPECTRAL_MODEL_REGISTRY", "ScaleSpectralModel", "Shell2SpatialModel", "ShellSpatialModel", "SineTemporalModel", "SkyModel", "SmoothBrokenPowerLawSpectralModel", "SpatialModel", "SpectralModel", "SuperExpCutoffPowerLaw3FGLSpectralModel", "SuperExpCutoffPowerLaw4FGLDR3SpectralModel", "SuperExpCutoffPowerLaw4FGLSpectralModel", "TEMPORAL_MODEL_REGISTRY", "TemplateNDSpatialModel", "TemplateNDSpectralModel", "TemplateNPredModel", "TemplatePhaseCurveTemporalModel", "TemplateSpatialModel", "TemplateSpectralModel", "TemporalModel", "create_cosmic_ray_spectral_model", "create_crab_spectral_model", "create_fermi_isotropic_diffuse_model", "integrate_spectrum", "read_hermes_cube", "scale_plot_flux", "read_hermes_cube", "select_nested_models", "stat_profile_ul_scipy", "CashCountsStatistic", "WStatCountsStatistic", "cash", "cash_sum_cython", "compute_chisq", "compute_flux_doubling", "compute_fpp", "compute_fvar", "cstat", "f_cash_root_cython", "get_wstat_gof_terms", "get_wstat_mu_bkg", "norm_bounds_cython", "wstat", "hierarchical_clustering", "standard_scaler", "D_SUN_TO_GALACTIC_CENTER", "cartesian", "fov_to_sky", "galactic", "motion_since_birth", "polar", "sky_to_fov", "velocity_glon_glat", "HDULocation", "LazyFitsData", "earth_location_from_dict", "trapz_loglog", "ScaledRegularGridInterpolator", "interpolate_profile", "interpolation_scale", "BACKEND_DEFAULT", "METHOD_DEFAULT", "METHOD_KWARGS_DEFAULT", "N_JOBS_DEFAULT", "POOL_KWARGS_DEFAULT", "multiprocessing_manager", "run_multiprocessing", "InverseCDFSampler", "draw", "get_random_state", "normalize", "pdf", "sample_powerlaw", "sample_sphere", "sample_sphere_distance", "sample_times", "compound_region_to_regions", "make_concentric_annulus_sky_regions", "make_orthogonal_rectangle_sky_regions", "region_to_frame", "regions_to_compound_region", "get_images_paths", "make_path", "read_yaml", "recursive_merge_dicts", "write_yaml", "hstack_columns", "table_row_to_dict", "table_standardise_units_copy", "table_standardise_units_inplace", "Checker", "assert_quantity_allclose", "assert_skycoord_allclose", "assert_time_allclose", "mpl_plot_check", "requires_data", "requires_dependency", "absolute_time", "time_ref_from_dict", "time_ref_to_dict", "time_relative_to_ref", "standardise_unit", "unit_from_fits_image_hdu", "MapPanelPlotter", "add_colorbar", "annotate_heatmap", "colormap_hess", "colormap_milagro", "plot_contour_line", "plot_distribution", "plot_heatmap", "plot_map_rgb", "plot_npred_signal", "plot_spectrum_datasets_off_regions", "plot_theta_squared_table", "Dependencies", "Developer How To", "Documentation How To", "Developer guide", "How to contribute to Gammapy", "PIGs", "PIG 1 - PIG purpose and guidelines", "PIG 2 - Organization of low level analysis code", "PIG 3 - Plan for dropping Python 2.7 support", "PIG 4 - Setup for tutorial notebooks and data", "PIG 5 - Gammapy 1.0 roadmap", "PIG 6 - CTA observation handling", "PIG 7 - Models", "PIG 8 - Datasets", "PIG 9 - Event sampling", "PIG 10 - Regions", "PIG 11 - Light curves", "PIG 12 - High level interface", "PIG 13 - Gammapy dependencies and distribution", "PIG 14 - Uncertainty estimation", "PIG 16 - Gammapy package structure", "PIG 18 - Documentation", "PIG 19 - Gammapy package structure follow up", "PIG 20 - Global Model API", "PIG 21 - Models improvements", "PIG 22 - Unified flux estimators API", "PIG 23 - Gammapy release cycle and version numbering", "PIG 24 - Authorship policy", "PIG 25 - Metadata container for Gammapy", "PIG 26 - Model Priors API", "How to make a Gammapy release", "Project setup", "Virtual Environments", "Getting started", "Installation", "Recommended Setup", "Troubleshooting", "Using Gammapy", "Gammapy", "Release notes", "0.1 (Aug 25, 2014)", "0.10 (Jan 28, 2019)", "0.11 (Mar 29, 2019)", "0.12 (May 30, 2019)", "0.13 (Jul 26, 2019)", "0.14 (Sep 30, 2019)", "0.15 (Dec 3, 2019)", "0.16 (Feb 1, 2020)", "0.17 (Apr 1, 2020)", "0.18 (Nov 4th, 2020)", "0.18.1 (Nov 6th, 2020)", "0.18.2 (Nov 19th, 2020)", "0.19 (Nov 22nd, 2021)", "0.2 (Apr 13, 2015)", "0.20 (May 12th, 2022)", "0.20.1 (June 16th, 2022)", "0.3 (Aug 13, 2015)", "0.4 (Apr 20, 2016)", "0.5 (Nov 22, 2016)", "0.6 (Apr 28, 2017)", "0.7 (Feb 28, 2018)", "0.8 (Sep 23, 2018)", "0.9 (Nov 29, 2018)", "1.0 (November 10th, 2022)", "1.0.1 (March 14th, 2023)", "1.0.2 (December 6th, 2023)", "1.1 (June 13th 2023)", "1.2 (February 29th 2024)", "1.3 (unreleased)", "Computation times", "Point source sensitivity", "Spectral analysis of extended sources", "Flux point fitting", "Computation times", "Spectral analysis", "Spectral analysis with the HLI", "Spectral analysis with energy-dependent directional cuts", "1D spectrum simulation", "Source detection and significance maps", "2D map fitting", "Ring background map", "Computation times", "3D detailed analysis", "Multi instrument joint 3D and 1D analysis", "Basic image exploration and fitting", "Morphological energy dependence estimation", "Event sampling", "Sample a source with energy-dependent temporal evolution", "Flux Profile Estimation", "Computation times", "3D map simulation", "Estimation of time variability in a lightcurve", "Light curves", "Light curves for flares", "Simulating and fitting a time varying source", "Pulsar analysis", "Computation times", "Dark matter spatial and spectral models", "Source catalogs", "Datasets - Reduced data, IRFs, models", "Fitting", "Using Gammapy IRFs", "Makers - Data reduction", "Maps", "Mask maps", "Modelling", "Models", "Observational clustering", "Priors", "Computation times", "CTA with Gammapy", "Fermi-LAT with Gammapy", "HAWC with Gammapy", "H.E.S.S. with Gammapy", "Computation times", "Tutorials", "Computation times", "Survey Map Script", "Computation times", "High level interface", "Low level API", "Data structures", "Computation times", "Dark matter", "Astrophysics", "Astrophysical source population models", "Astrophysical source models", "Pulsar Source Models", "Pulsar Wind Nebula Source Models", "Supernova Remnant Models", "Source catalogs", "Datasets (DL4)", "Data access and selection (DL3)", "Estimators (DL4 to DL5, and DL6)", "High Level Analysis Interface", "How To", "User guide", "Effective area", "Background", "Energy Dispersion", "Instrument Response Functions (DL3)", "Point Spread Function", "FoV background", "Data reduction (DL3 to DL4)", "Reflected regions background", "Ring background", "HEALPix-based maps", "Sky maps (DL4)", "RegionGeom and RegionNDMap", "Model gallery", "Computation times", "Constant spatial model", "Disk spatial model", "Gaussian spatial model", "Generalized gaussian spatial model", "Piecewise norm spatial model", "Point spatial model", "Shell spatial model", "Shell2 spatial model", "Template spatial model", "Computation times", "EBL absorption spectral model", "Broken power law spectral model", "Compound spectral model", "Constant spectral model", "Exponential cutoff power law spectral model", "Exponential cutoff power law spectral model used for 3FGL", "Exponential cutoff power law norm spectral model", "Gaussian spectral model", "Log parabola spectral model", "Log parabola spectral norm model", "Naima spectral model", "Piecewise  norm spectral model", "Power law spectral model", "Power law 2 spectral model", "Power law norm spectral model", "Smooth broken power law spectral model", "Super exponential cutoff power law model used for 3FGL", "Super Exponential Cutoff Power Law Model used for 4FGL-DR3", "Super Exponential Cutoff Power Law Model used for 4FGL-DR1 (and DR2)", "Template spectral model", "Computation times", "Constant temporal model", "ExpDecay temporal model", "Gaussian temporal model", "Generalized Gaussian temporal model", "Linear temporal model", "PowerLaw temporal model", "Sine temporal model", "Phase curve temporal model", "Light curve temporal model", "Computation times", "Modeling and Fitting (DL4 to DL5)", "Gammapy analysis workflow and package structure", "Glossary and references", "Command line tools", "Fit statistics", "Statistical utility functions", "Derivation of the WStat formula", "Utility functions", "Visualization"], "terms": {"dark": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 374, 382, 414, 419, 420, 422, 462, 468, 477, 500, 546], "matter": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 368, 374, 382, 414, 419, 420, 422, 455, 462, 464, 468, 477, 500, 546, 548], "spatial": [1, 46, 48, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 97, 100, 104, 105, 106, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 184, 186, 187, 189, 190, 191, 197, 199, 202, 203, 206, 207, 214, 215, 218, 228, 230, 232, 237, 240, 241, 243, 245, 251, 253, 255, 265, 347, 349, 354, 360, 363, 366, 367, 368, 370, 372, 373, 378, 386, 394, 395, 397, 398, 399, 400, 402, 405, 413, 414, 416, 419, 420, 422, 425, 428, 430, 432, 435, 436, 438, 439, 440, 441, 443, 447, 448, 451, 452, 455, 458, 462, 464, 468, 472, 476, 477, 484, 486, 488, 489, 499, 500, 513, 545, 546, 547], "spectral": [1, 19, 20, 26, 52, 53, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 97, 100, 104, 105, 108, 112, 113, 115, 116, 117, 120, 122, 123, 127, 146, 148, 151, 155, 197, 199, 200, 201, 204, 206, 208, 210, 211, 212, 214, 216, 220, 222, 223, 225, 226, 228, 229, 231, 233, 234, 235, 238, 239, 243, 244, 246, 247, 248, 249, 252, 253, 254, 256, 258, 259, 273, 310, 360, 363, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 378, 386, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 426, 430, 432, 435, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 453, 455, 457, 458, 461, 462, 463, 464, 472, 473, 476, 477, 483, 484, 485, 486, 487, 488, 489, 495, 496, 497, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549], "model": [1, 6, 15, 16, 18, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 84, 88, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 127, 132, 138, 139, 146, 147, 148, 149, 151, 155, 158, 171, 178, 179, 181, 187, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 276, 279, 280, 350, 353, 354, 355, 358, 359, 360, 366, 367, 369, 370, 372, 374, 375, 378, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 430, 431, 433, 438, 441, 443, 448, 454, 455, 456, 457, 462, 464, 465, 468, 476, 477, 483, 484, 486, 488, 489, 493, 495, 496, 500, 503, 513, 534, 544, 546, 547, 550, 551], "handl": [3, 185, 275, 353, 355, 358, 366, 367, 368, 370, 375, 377, 378, 381, 383, 386, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 427, 429, 435, 436, 437, 439, 452, 454, 456, 458, 459, 464, 465, 468, 473, 474, 484, 485, 488, 547], "thi": [6, 15, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 56, 65, 66, 67, 78, 79, 80, 81, 82, 83, 84, 86, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 161, 162, 164, 166, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 265, 267, 268, 274, 283, 291, 301, 304, 307, 312, 313, 329, 332, 339, 341, 343, 344, 345, 349, 351, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 476, 477, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552], "page": [6, 83, 86, 195, 269, 275, 280, 355, 357, 359, 366, 368, 371, 374, 380, 383, 384, 386, 387, 391, 399, 400, 405, 408, 409, 412, 413, 414, 415, 453, 456, 466, 468, 486, 488, 499, 501, 549, 552], "give": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 127, 272, 273, 354, 359, 363, 364, 368, 369, 370, 371, 374, 375, 380, 384, 395, 397, 399, 407, 420, 428, 431, 438, 440, 444, 446, 451, 453, 454, 455, 456, 459, 463, 464, 472, 488, 493, 548, 549, 551, 552], "an": [6, 15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 50, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 100, 103, 104, 105, 107, 113, 115, 116, 117, 118, 120, 121, 123, 127, 128, 129, 133, 135, 136, 137, 138, 140, 143, 146, 148, 150, 151, 154, 158, 161, 163, 166, 168, 169, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 254, 255, 256, 261, 272, 274, 281, 283, 287, 301, 312, 316, 332, 338, 344, 345, 347, 350, 353, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 391, 394, 395, 398, 399, 400, 401, 402, 405, 407, 408, 409, 412, 413, 414, 416, 417, 419, 420, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 451, 453, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551], "overview": [6, 357, 384, 399, 400, 402, 405, 422, 448, 456, 459, 468, 474, 475, 488, 489, 502, 549], "all": [6, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 95, 97, 98, 99, 100, 102, 103, 104, 105, 112, 113, 114, 115, 116, 120, 121, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 158, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 265, 326, 327, 328, 329, 330, 331, 341, 350, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 427, 428, 429, 432, 433, 435, 437, 438, 439, 443, 445, 447, 448, 451, 452, 453, 454, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 478, 484, 486, 488, 497, 499, 500, 501, 502, 524, 545, 548, 549, 550], "public": [6, 344, 345, 357, 359, 368, 373, 376, 379, 384, 409, 424, 436, 445, 446, 546, 553], "gammapi": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 376, 377, 378, 382, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 470, 472, 473, 474, 477, 478, 480, 481, 482, 488, 489, 490, 491, 492, 494, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 553], "object": [6, 15, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 95, 96, 97, 98, 99, 100, 104, 105, 113, 114, 115, 118, 119, 120, 124, 125, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 162, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 267, 268, 283, 287, 291, 292, 295, 303, 305, 307, 313, 316, 328, 329, 330, 331, 336, 341, 347, 349, 350, 351, 360, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 378, 380, 381, 386, 390, 396, 397, 399, 400, 401, 402, 405, 407, 412, 413, 414, 416, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 436, 438, 441, 443, 444, 445, 446, 447, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 466, 472, 473, 474, 478, 483, 484, 485, 486, 494, 497, 499, 500, 501, 545, 547, 548, 552], "function": [6, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 78, 79, 81, 83, 84, 86, 95, 96, 97, 98, 100, 103, 104, 105, 108, 113, 120, 123, 124, 125, 126, 129, 138, 139, 140, 142, 143, 145, 147, 148, 149, 151, 178, 179, 181, 183, 187, 190, 191, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 242, 243, 244, 246, 247, 248, 249, 252, 256, 261, 267, 268, 276, 296, 304, 305, 307, 308, 312, 313, 322, 339, 342, 343, 347, 349, 351, 353, 357, 360, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 377, 378, 379, 381, 382, 386, 390, 391, 393, 395, 396, 397, 398, 399, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 427, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 452, 453, 454, 455, 456, 457, 458, 459, 461, 466, 468, 472, 473, 474, 476, 477, 478, 483, 484, 485, 487, 488, 497, 499, 501, 506, 507, 509, 536, 545, 546, 547, 548, 549, 551, 553], "method": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 274, 281, 291, 295, 299, 303, 304, 305, 328, 341, 343, 353, 354, 357, 360, 363, 364, 365, 368, 369, 370, 372, 373, 374, 376, 378, 380, 381, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 443, 446, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 483, 485, 487, 488, 492, 495, 497, 498, 499, 501, 522, 536, 545, 546, 547, 548, 550], "class": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 267, 268, 291, 292, 295, 303, 305, 328, 341, 357, 360, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 382, 386, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 423, 425, 427, 428, 429, 430, 431, 432, 433, 437, 439, 440, 443, 445, 448, 451, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 472, 474, 479, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 498, 499, 500, 501, 502, 524, 533, 545, 546, 547, 548, 553], "expos": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 363, 368, 369, 370, 373, 374, 418, 420, 456, 468, 486, 487, 546], "namespac": [6, 16, 80, 99, 114, 354, 373, 375, 398, 401, 411, 459, 477, 552], "ar": [6, 11, 15, 16, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 46, 57, 65, 68, 71, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 91, 95, 96, 97, 99, 100, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 159, 164, 165, 166, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 272, 283, 295, 301, 303, 315, 316, 329, 343, 345, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 473, 474, 476, 477, 478, 479, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 505, 506, 514, 524, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553], "data": [6, 11, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 115, 116, 117, 118, 119, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 158, 159, 160, 164, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 269, 274, 275, 277, 278, 280, 281, 282, 291, 292, 295, 313, 321, 324, 325, 333, 342, 343, 344, 345, 347, 348, 353, 355, 358, 361, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 380, 382, 383, 386, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 425, 430, 431, 432, 433, 437, 439, 440, 443, 447, 450, 451, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 475, 476, 483, 484, 486, 488, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 507, 508, 520, 523, 525, 527, 528, 533, 545, 546, 547, 550, 551, 552], "dl3": [6, 16, 78, 79, 82, 84, 86, 91, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 164, 182, 183, 281, 282, 355, 360, 362, 363, 365, 374, 381, 386, 390, 396, 399, 401, 407, 416, 420, 424, 427, 428, 429, 432, 433, 435, 445, 446, 455, 457, 460, 470, 472, 473, 484, 488, 490, 491, 492, 494, 495, 497, 498, 546, 547], "observ": [6, 15, 16, 41, 78, 79, 81, 82, 83, 85, 86, 88, 89, 90, 91, 96, 97, 98, 99, 100, 103, 104, 105, 106, 148, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 205, 208, 213, 217, 219, 220, 221, 236, 242, 254, 257, 269, 275, 280, 282, 291, 312, 358, 360, 366, 367, 368, 369, 370, 374, 376, 378, 381, 386, 395, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 429, 430, 432, 433, 435, 436, 443, 444, 447, 448, 453, 461, 462, 463, 465, 466, 468, 470, 476, 484, 485, 488, 491, 493, 495, 497, 498, 524, 547, 548, 549, 550], "packag": [6, 11, 128, 283, 319, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 368, 371, 372, 374, 379, 380, 381, 383, 385, 386, 388, 389, 390, 391, 392, 393, 395, 398, 399, 401, 402, 405, 408, 409, 410, 411, 412, 413, 414, 416, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 484, 487, 488, 489, 496, 501, 512, 520, 522, 523, 536, 548, 552], "irf": [6, 78, 84, 91, 97, 98, 100, 103, 104, 105, 106, 107, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 158, 164, 165, 167, 168, 169, 171, 173, 174, 177, 186, 189, 243, 282, 354, 355, 360, 364, 365, 366, 367, 370, 373, 374, 375, 376, 382, 386, 394, 396, 399, 401, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 425, 427, 428, 429, 430, 431, 432, 435, 439, 440, 443, 445, 447, 455, 457, 460, 461, 462, 464, 465, 466, 468, 472, 473, 484, 485, 488, 490, 491, 492, 494, 495, 500, 545, 546, 547], "instrument": [6, 79, 90, 103, 138, 142, 143, 214, 354, 364, 365, 366, 367, 369, 374, 378, 386, 390, 399, 402, 414, 415, 416, 422, 424, 425, 427, 428, 431, 435, 442, 448, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 466, 468, 472, 473, 484, 485, 486, 490, 492, 494, 545, 546, 547], "respons": [6, 103, 135, 136, 137, 140, 142, 143, 161, 354, 360, 361, 363, 365, 366, 367, 369, 370, 378, 380, 386, 412, 413, 414, 415, 424, 427, 428, 429, 430, 443, 447, 454, 455, 458, 463, 466, 468, 472, 473, 484, 485, 490, 492, 494, 546, 547], "maker": [6, 137, 148, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 360, 367, 369, 380, 399, 401, 402, 407, 416, 419, 420, 422, 423, 427, 429, 430, 433, 437, 439, 440, 443, 447, 448, 452, 454, 457, 462, 465, 466, 468, 484, 485, 498, 500, 547], "reduct": [6, 11, 154, 360, 366, 367, 370, 374, 375, 376, 381, 386, 399, 401, 419, 422, 433, 437, 438, 441, 448, 452, 454, 457, 458, 460, 462, 468, 484, 485, 488, 495, 497, 498, 500, 546, 547], "util": [6, 91, 99, 114, 115, 117, 124, 125, 126, 127, 128, 129, 130, 131, 137, 167, 168, 169, 170, 171, 172, 173, 174, 175, 264, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 354, 363, 365, 366, 367, 368, 378, 393, 396, 397, 398, 399, 406, 407, 410, 411, 412, 413, 414, 415, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 476, 477, 488, 547], "modul": [6, 242, 354, 355, 359, 363, 370, 375, 393, 395, 401, 413, 447, 451, 455, 458, 476, 477, 478, 479, 524, 541, 552], "dataset": [6, 15, 16, 19, 20, 26, 62, 89, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 120, 121, 122, 123, 127, 128, 129, 131, 136, 137, 143, 148, 151, 153, 154, 155, 158, 159, 160, 163, 164, 165, 185, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 303, 347, 350, 351, 357, 358, 360, 362, 367, 369, 370, 371, 373, 374, 378, 382, 383, 384, 386, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 412, 414, 415, 416, 417, 418, 419, 420, 422, 425, 427, 430, 431, 437, 438, 439, 441, 443, 448, 450, 451, 456, 459, 460, 462, 463, 464, 466, 468, 470, 474, 485, 486, 488, 493, 495, 496, 497, 498, 500, 508, 512, 514, 542, 543, 545, 546, 547, 548, 549, 550], "reduc": [6, 11, 15, 95, 97, 100, 104, 105, 146, 148, 151, 156, 166, 178, 179, 181, 183, 187, 190, 191, 360, 361, 363, 365, 366, 370, 373, 375, 380, 381, 386, 393, 398, 405, 414, 420, 422, 424, 425, 428, 429, 430, 435, 436, 439, 443, 445, 446, 447, 457, 460, 462, 465, 468, 484, 488, 493, 498, 500, 501, 506, 507, 545, 546, 547, 548], "map": [6, 15, 16, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 79, 80, 83, 86, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 123, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 203, 206, 207, 214, 215, 218, 220, 228, 230, 232, 240, 241, 243, 245, 251, 252, 253, 255, 256, 263, 305, 341, 342, 347, 349, 351, 353, 354, 355, 357, 361, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 381, 386, 390, 394, 395, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 419, 420, 422, 423, 424, 427, 428, 429, 430, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 447, 451, 452, 455, 459, 462, 463, 464, 465, 466, 468, 469, 472, 473, 476, 483, 484, 485, 487, 488, 492, 493, 494, 495, 496, 497, 498, 504, 506, 507, 508, 509, 512, 543, 545, 546, 547], "sky": [6, 13, 41, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 91, 97, 100, 103, 104, 105, 108, 128, 136, 137, 148, 151, 171, 177, 178, 179, 181, 186, 187, 189, 190, 191, 206, 228, 243, 255, 258, 260, 285, 289, 290, 314, 316, 318, 341, 353, 354, 355, 367, 373, 386, 395, 397, 411, 412, 414, 427, 428, 430, 431, 433, 443, 447, 448, 451, 456, 459, 463, 464, 468, 470, 472, 473, 474, 476, 483, 484, 485, 488, 493, 494, 497, 499, 501, 505, 506, 510, 511, 512, 546, 547], "fit": [6, 15, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 58, 60, 61, 63, 64, 65, 69, 71, 72, 74, 78, 79, 80, 81, 82, 83, 84, 86, 89, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 155, 158, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 196, 198, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 253, 254, 255, 256, 265, 266, 267, 268, 269, 270, 275, 277, 280, 291, 292, 293, 336, 337, 340, 342, 347, 349, 353, 354, 355, 360, 364, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 381, 382, 386, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 410, 412, 413, 414, 415, 417, 419, 420, 422, 423, 426, 430, 431, 433, 434, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 465, 466, 468, 470, 474, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 500, 505, 512, 514, 524, 542, 543, 546, 547, 552], "estim": [6, 19, 20, 26, 50, 70, 96, 100, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 153, 159, 160, 161, 167, 176, 177, 186, 189, 191, 195, 196, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 265, 271, 274, 278, 303, 347, 358, 360, 363, 367, 368, 369, 370, 373, 376, 382, 386, 395, 396, 399, 400, 401, 402, 405, 406, 407, 411, 412, 413, 414, 416, 419, 420, 422, 423, 427, 429, 433, 435, 436, 437, 440, 442, 446, 447, 448, 449, 452, 453, 457, 461, 465, 468, 472, 473, 484, 488, 498, 500, 545, 546, 547, 549, 551], "high": [6, 15, 58, 61, 62, 79, 135, 183, 306, 354, 358, 359, 360, 367, 368, 369, 374, 381, 397, 398, 399, 400, 401, 405, 413, 414, 422, 423, 425, 428, 431, 432, 435, 441, 443, 445, 450, 451, 452, 455, 457, 463, 464, 465, 466, 468, 473, 474, 475, 483, 486, 493, 500, 546, 547, 548, 549], "level": [6, 11, 15, 16, 79, 80, 99, 112, 114, 195, 267, 268, 354, 355, 357, 358, 359, 365, 367, 369, 373, 374, 375, 378, 381, 386, 390, 397, 398, 399, 400, 401, 405, 413, 420, 422, 424, 425, 427, 428, 431, 432, 433, 435, 437, 439, 443, 444, 445, 446, 447, 448, 450, 453, 458, 460, 463, 464, 465, 466, 468, 470, 474, 475, 484, 485, 486, 493, 495, 496, 500, 545, 546, 547, 548, 552], "analysi": [6, 16, 57, 65, 68, 70, 71, 79, 97, 99, 100, 104, 105, 160, 164, 353, 354, 355, 358, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 381, 383, 384, 385, 386, 387, 390, 391, 394, 395, 396, 398, 399, 400, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 425, 426, 431, 432, 433, 434, 438, 439, 441, 442, 443, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 473, 474, 476, 485, 486, 488, 489, 493, 495, 496, 497, 498, 500, 501, 527, 545, 547, 548, 550], "interfac": [6, 11, 15, 19, 20, 83, 86, 194, 195, 196, 197, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 358, 359, 360, 364, 366, 367, 369, 371, 372, 373, 374, 395, 398, 400, 401, 402, 405, 409, 412, 413, 419, 422, 428, 431, 432, 435, 443, 445, 453, 459, 463, 468, 473, 474, 475, 488, 499, 524, 545, 546, 547, 548], "catalog": [6, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 112, 116, 368, 374, 393, 397, 399, 401, 405, 406, 407, 410, 411, 412, 413, 414, 416, 420, 422, 425, 431, 436, 452, 459, 462, 464, 468, 478, 512, 546, 547], "sourc": [6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 359, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 384, 386, 391, 393, 395, 399, 400, 405, 406, 411, 412, 413, 414, 419, 420, 422, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 465, 466, 468, 470, 472, 473, 476, 477, 482, 484, 485, 486, 488, 493, 496, 497, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550], "astro": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 116, 171, 178, 179, 181, 190, 191, 238, 256, 354, 355, 366, 373, 374, 378, 383, 397, 406, 410, 414, 416, 420, 429, 450, 454, 456, 463, 477, 478, 480, 481, 482, 485, 547], "astrophys": [6, 23, 287, 369, 488, 546, 547], "darkmatt": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 238, 355, 374, 414, 450, 477], "popul": [6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 355, 374, 412, 477, 479, 524, 546], "stat": [6, 95, 96, 100, 105, 113, 115, 116, 117, 120, 121, 123, 195, 196, 198, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 347, 354, 366, 374, 382, 384, 390, 397, 399, 400, 401, 402, 405, 411, 414, 415, 416, 420, 424, 425, 427, 428, 429, 433, 435, 436, 437, 438, 441, 444, 448, 453, 461, 464, 472, 473, 486, 548, 549, 550], "statist": [6, 19, 20, 26, 75, 94, 95, 96, 97, 100, 104, 105, 112, 113, 115, 116, 117, 120, 121, 123, 129, 131, 158, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 239, 244, 246, 247, 248, 249, 252, 256, 265, 266, 267, 268, 269, 270, 275, 280, 366, 369, 372, 373, 374, 376, 382, 396, 400, 401, 402, 405, 407, 419, 420, 423, 428, 430, 431, 432, 433, 435, 437, 441, 443, 444, 445, 447, 448, 452, 453, 455, 461, 472, 473, 484, 486, 488, 498, 546, 547], "script": [6, 83, 86, 115, 319, 320, 321, 322, 323, 355, 360, 361, 363, 365, 368, 370, 373, 374, 380, 383, 384, 394, 395, 396, 397, 405, 406, 410, 413, 414, 415, 416, 420, 422, 427, 431, 433, 435, 436, 437, 438, 439, 441, 446, 447, 450, 451, 452, 453, 455, 461, 464, 469, 472, 487, 488, 548], "command": [6, 13, 89, 96, 115, 139, 145, 147, 149, 353, 355, 357, 362, 363, 365, 370, 371, 384, 385, 386, 387, 388, 389, 395, 399, 410, 413, 414, 416, 439, 487, 546], "line": [6, 13, 46, 78, 79, 83, 86, 96, 97, 100, 104, 105, 139, 145, 147, 149, 186, 187, 206, 228, 315, 316, 351, 353, 355, 357, 360, 363, 365, 368, 370, 371, 378, 384, 385, 386, 388, 390, 399, 410, 413, 435, 453, 455, 459, 476, 488, 501, 546], "tool": [6, 13, 178, 179, 181, 190, 191, 353, 357, 361, 363, 365, 367, 370, 371, 374, 380, 391, 399, 410, 413, 414, 438, 441, 447, 452, 453, 456, 460, 463, 464, 476, 488, 522, 546, 547], "visual": [6, 179, 191, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 368, 400, 401, 419, 420, 427, 429, 433, 435, 437, 440, 453, 454, 460, 465, 466, 473, 474, 488, 497, 502, 505, 546], "plot": [6, 19, 20, 26, 64, 65, 79, 84, 96, 97, 100, 104, 105, 115, 118, 119, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 178, 179, 180, 181, 183, 186, 187, 188, 190, 191, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 259, 263, 332, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 355, 368, 369, 370, 372, 373, 375, 378, 390, 393, 396, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 423, 424, 425, 429, 432, 433, 435, 436, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 457, 459, 460, 461, 463, 464, 465, 466, 472, 474, 478, 480, 481, 482, 484, 488, 490, 491, 492, 494, 497, 542, 543, 550, 552], "featur": [6, 13, 83, 86, 91, 108, 128, 281, 282, 344, 345, 354, 357, 361, 363, 364, 365, 366, 368, 370, 371, 376, 377, 378, 380, 381, 382, 387, 392, 395, 396, 397, 398, 399, 401, 402, 405, 409, 412, 413, 414, 415, 444, 456, 457, 459, 460, 476, 486, 524], "cluster": [6, 91, 281, 282, 367, 419, 420, 422, 462, 468, 485, 488], "coordin": [6, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 46, 47, 79, 81, 83, 84, 85, 86, 89, 90, 91, 97, 98, 100, 103, 104, 105, 113, 115, 117, 118, 119, 124, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 161, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 206, 207, 215, 218, 220, 228, 230, 232, 240, 241, 243, 255, 272, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 295, 305, 311, 315, 316, 330, 355, 359, 360, 361, 363, 367, 368, 373, 374, 377, 379, 380, 393, 395, 398, 400, 411, 413, 414, 416, 423, 424, 427, 429, 430, 433, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 473, 474, 484, 492, 497, 499, 500, 505, 506, 509, 546, 547, 552], "integr": [6, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 37, 51, 97, 100, 104, 105, 113, 115, 118, 120, 127, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 153, 178, 179, 181, 183, 187, 190, 191, 192, 193, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 261, 294, 353, 361, 363, 365, 367, 368, 369, 371, 372, 374, 378, 380, 393, 395, 396, 400, 401, 405, 410, 411, 412, 413, 414, 415, 416, 419, 429, 430, 432, 447, 450, 451, 452, 456, 457, 459, 474, 476, 484, 486, 492, 507, 527], "interpol": [6, 26, 89, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 158, 177, 178, 179, 181, 183, 187, 188, 190, 191, 208, 220, 230, 231, 251, 252, 254, 255, 256, 266, 295, 296, 297, 353, 365, 366, 367, 395, 400, 405, 407, 410, 413, 415, 416, 417, 418, 419, 420, 440, 454, 455, 459, 464, 465, 488, 496, 500, 533], "random": [6, 33, 42, 45, 46, 47, 83, 86, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 306, 307, 308, 309, 310, 311, 312, 313, 357, 366, 367, 370, 397, 409, 413, 439, 459, 488, 549, 550, 552], "region": [6, 27, 79, 86, 95, 97, 100, 102, 104, 105, 117, 119, 122, 124, 136, 137, 143, 148, 151, 153, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 177, 178, 179, 181, 186, 187, 189, 190, 191, 193, 195, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 253, 255, 256, 258, 268, 280, 314, 315, 316, 317, 318, 350, 351, 353, 355, 358, 360, 361, 369, 370, 371, 373, 376, 378, 386, 397, 398, 399, 401, 405, 407, 408, 410, 411, 413, 414, 416, 418, 419, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 456, 459, 461, 463, 464, 465, 466, 472, 473, 474, 483, 484, 485, 486, 488, 495, 496, 498, 499, 500, 505, 506, 524, 546, 547, 549, 550, 551], "parallel": [6, 88, 116, 117, 120, 123, 154, 298, 299, 300, 301, 302, 303, 304, 357, 371, 384, 407, 419, 420, 452], "tabl": [6, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 100, 104, 105, 113, 115, 118, 122, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 158, 160, 165, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 197, 199, 206, 220, 228, 243, 254, 256, 258, 281, 282, 291, 324, 325, 326, 327, 352, 353, 354, 360, 364, 367, 368, 369, 371, 373, 375, 378, 381, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 423, 425, 427, 428, 429, 430, 437, 439, 440, 441, 443, 445, 448, 452, 454, 455, 456, 459, 460, 463, 464, 465, 466, 468, 472, 474, 478, 483, 484, 486, 488, 493, 543, 549, 552], "test": [6, 89, 96, 110, 112, 113, 115, 116, 117, 120, 121, 123, 129, 146, 148, 151, 178, 179, 181, 187, 190, 191, 220, 265, 266, 267, 268, 271, 313, 328, 329, 330, 331, 332, 333, 334, 355, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 379, 382, 383, 384, 394, 396, 397, 399, 401, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 424, 430, 431, 440, 443, 445, 446, 447, 452, 454, 486, 488, 492, 498, 542, 543, 547, 550], "time": [6, 19, 20, 50, 51, 52, 53, 74, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 95, 96, 97, 98, 99, 100, 103, 104, 105, 113, 114, 115, 120, 123, 124, 130, 154, 160, 171, 173, 178, 179, 180, 181, 187, 188, 190, 191, 195, 196, 198, 205, 208, 213, 217, 219, 220, 221, 236, 242, 243, 254, 257, 272, 313, 331, 335, 336, 337, 338, 354, 355, 357, 359, 360, 361, 362, 364, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 386, 390, 394, 395, 398, 399, 400, 402, 405, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 427, 429, 430, 431, 433, 435, 437, 438, 440, 441, 445, 448, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 472, 473, 474, 480, 481, 482, 484, 485, 486, 488, 493, 496, 501, 506, 507, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551], "unit": [6, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 64, 79, 81, 83, 84, 86, 91, 96, 97, 100, 102, 104, 105, 108, 113, 115, 117, 119, 123, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 158, 161, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 196, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 281, 282, 283, 313, 325, 326, 327, 329, 338, 339, 340, 343, 344, 345, 349, 355, 363, 365, 368, 370, 372, 377, 378, 382, 394, 395, 397, 405, 407, 413, 414, 416, 417, 418, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 478, 480, 481, 482, 485, 486, 488, 490, 492, 493, 495, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547], "built": [10, 165, 208, 322, 338, 353, 354, 355, 365, 366, 368, 370, 371, 373, 381, 384, 391, 414, 419, 451, 458, 464, 468, 484], "cli": [11, 370, 415, 546], "i": [11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 280, 281, 283, 285, 289, 291, 294, 295, 296, 301, 303, 304, 307, 310, 311, 312, 313, 315, 316, 321, 323, 325, 329, 331, 332, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 473, 474, 476, 477, 478, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553], "python": [11, 16, 80, 99, 114, 128, 283, 323, 353, 357, 358, 359, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 380, 381, 384, 385, 386, 387, 388, 389, 391, 393, 394, 395, 397, 398, 405, 407, 410, 411, 412, 413, 414, 415, 416, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 476, 487, 488, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548], "gamma": [11, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 52, 53, 57, 59, 62, 64, 65, 75, 79, 112, 116, 122, 147, 171, 178, 179, 181, 190, 191, 208, 210, 211, 212, 233, 234, 235, 256, 259, 310, 354, 360, 362, 365, 366, 367, 368, 378, 383, 384, 386, 390, 391, 396, 410, 411, 412, 413, 414, 423, 425, 427, 428, 429, 433, 436, 437, 438, 439, 441, 451, 454, 456, 457, 460, 463, 465, 466, 472, 474, 476, 478, 479, 483, 484, 485, 488, 491, 493, 495, 497, 498, 507, 514, 518, 519, 526, 527, 545, 546, 547, 548, 549, 550, 553], "rai": [11, 19, 20, 26, 52, 53, 57, 59, 62, 64, 79, 88, 112, 116, 117, 120, 122, 123, 124, 154, 208, 258, 259, 273, 274, 303, 304, 360, 365, 366, 368, 372, 383, 384, 386, 390, 391, 396, 412, 414, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 476, 478, 479, 483, 484, 485, 488, 491, 493, 495, 497, 498, 514, 545, 546, 547, 548, 549, 550, 553], "astronomi": [11, 259, 353, 364, 368, 372, 384, 391, 412, 424, 427, 433, 437, 455, 463, 488, 497, 498, 545, 546, 547, 548, 549, 550, 552, 553], "us": [11, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 46, 47, 53, 56, 57, 59, 63, 67, 68, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 261, 266, 269, 281, 283, 291, 294, 295, 296, 303, 304, 307, 312, 313, 319, 322, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 440, 441, 443, 444, 446, 447, 448, 450, 451, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 474, 477, 478, 488, 490, 491, 492, 494, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 552, 553], "help": [11, 83, 86, 269, 275, 354, 357, 359, 361, 368, 369, 370, 374, 380, 383, 384, 385, 390, 394, 395, 396, 413, 414, 416, 451, 455, 456, 458, 464, 466, 474, 488, 548], "see": [11, 13, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 64, 78, 79, 81, 83, 85, 86, 90, 94, 95, 96, 97, 100, 104, 105, 108, 110, 112, 115, 116, 117, 120, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 154, 161, 163, 171, 176, 177, 179, 181, 183, 184, 186, 189, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 260, 269, 275, 277, 278, 280, 283, 291, 307, 322, 344, 345, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 374, 375, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 468, 472, 474, 476, 484, 485, 488, 498, 499, 501, 527, 531, 532, 545, 547, 548, 549, 550, 552], "avail": [11, 13, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 65, 68, 70, 74, 79, 83, 84, 86, 96, 97, 100, 104, 105, 112, 113, 115, 116, 120, 121, 123, 131, 152, 158, 164, 165, 195, 196, 198, 202, 203, 207, 208, 215, 218, 230, 232, 240, 241, 245, 251, 253, 255, 259, 307, 342, 354, 357, 360, 361, 362, 363, 365, 366, 367, 368, 371, 372, 374, 381, 384, 385, 386, 387, 388, 389, 395, 399, 400, 401, 405, 408, 412, 414, 416, 419, 427, 428, 431, 453, 455, 457, 459, 463, 464, 468, 472, 474, 476, 478, 479, 485, 487, 488, 490, 491, 492, 494, 502, 514, 546, 548, 550], "sub": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 178, 179, 180, 181, 183, 187, 188, 190, 191, 194, 354, 357, 361, 363, 364, 368, 373, 374, 375, 376, 381, 384, 393, 395, 399, 401, 402, 410, 412, 413, 437, 439, 455, 457, 459, 465, 466, 484, 487, 488, 496, 546, 548, 552], "well": [11, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 79, 83, 86, 100, 105, 112, 113, 121, 177, 181, 183, 187, 189, 196, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 344, 345, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 413, 414, 415, 419, 420, 424, 430, 433, 438, 440, 445, 447, 452, 453, 454, 455, 456, 457, 459, 463, 464, 468, 472, 473, 474, 484, 485, 486, 497, 500, 501, 545, 546, 548, 550], "argument": [11, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 79, 80, 82, 83, 84, 86, 87, 88, 95, 96, 97, 99, 100, 103, 104, 105, 114, 115, 116, 118, 120, 131, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 164, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 266, 281, 283, 295, 301, 303, 304, 341, 342, 343, 347, 348, 349, 350, 351, 357, 360, 366, 369, 401, 402, 405, 407, 413, 419, 420, 431, 435, 440, 453, 455, 456, 459, 460, 473, 486, 488, 499, 500, 501, 524, 548], "option": [11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 265, 266, 267, 268, 272, 273, 274, 280, 281, 283, 294, 304, 307, 310, 311, 312, 313, 315, 316, 323, 325, 336, 337, 341, 342, 343, 348, 349, 350, 351, 354, 357, 359, 360, 362, 363, 365, 366, 368, 370, 372, 374, 377, 381, 384, 385, 386, 387, 388, 394, 395, 396, 399, 401, 402, 405, 407, 411, 413, 414, 415, 416, 418, 419, 420, 435, 443, 445, 447, 451, 452, 455, 456, 457, 459, 460, 463, 464, 472, 473, 484, 486, 488, 500, 501, 543, 548], "each": [11, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 82, 83, 86, 87, 95, 97, 100, 103, 104, 105, 108, 110, 112, 113, 115, 116, 120, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 159, 160, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 228, 229, 230, 231, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 281, 319, 343, 352, 354, 357, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 378, 380, 384, 385, 392, 399, 402, 413, 416, 419, 424, 430, 431, 433, 435, 436, 437, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 473, 477, 483, 484, 485, 488, 492, 493, 494, 500, 501, 508, 524, 525, 547, 548, 551, 552], "For": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 78, 83, 84, 86, 90, 94, 96, 97, 100, 104, 105, 108, 110, 112, 113, 115, 116, 117, 120, 121, 122, 123, 135, 136, 137, 143, 148, 151, 158, 163, 165, 168, 169, 171, 172, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 244, 245, 247, 248, 249, 251, 255, 256, 269, 273, 275, 280, 286, 301, 353, 354, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 395, 396, 397, 399, 400, 401, 402, 405, 412, 416, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 441, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 472, 473, 474, 476, 483, 484, 486, 488, 498, 500, 501, 506, 511, 543, 547, 548, 550, 551, 552], "further": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 108, 112, 116, 117, 120, 123, 184, 307, 354, 357, 358, 360, 363, 364, 367, 368, 371, 373, 374, 375, 376, 377, 400, 401, 402, 405, 407, 433, 439, 450, 451, 452, 456, 474, 477, 478, 493, 548], "inform": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 84, 86, 89, 94, 95, 96, 97, 99, 100, 104, 105, 113, 114, 115, 135, 139, 145, 147, 149, 150, 153, 158, 159, 165, 184, 195, 200, 201, 202, 203, 204, 205, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 244, 247, 248, 249, 251, 252, 255, 256, 269, 275, 291, 307, 336, 337, 354, 358, 359, 364, 366, 367, 368, 369, 370, 377, 378, 381, 382, 384, 389, 390, 391, 399, 401, 402, 405, 407, 413, 419, 420, 425, 428, 429, 436, 439, 440, 443, 444, 452, 453, 455, 456, 459, 463, 464, 465, 466, 472, 473, 474, 483, 484, 485, 486, 488, 501, 547, 548, 551], "http": [11, 13, 16, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 62, 63, 65, 79, 80, 83, 84, 86, 99, 108, 114, 116, 124, 135, 138, 164, 171, 177, 183, 186, 189, 195, 206, 225, 228, 234, 235, 248, 249, 256, 258, 259, 273, 274, 283, 310, 311, 322, 357, 371, 374, 379, 380, 383, 384, 385, 386, 387, 388, 392, 396, 413, 423, 427, 430, 432, 435, 436, 437, 443, 447, 450, 451, 453, 454, 455, 463, 466, 485, 499, 501, 527, 531, 532, 548], "org": [11, 34, 62, 63, 79, 83, 84, 86, 164, 195, 234, 235, 248, 249, 273, 283, 357, 362, 371, 374, 379, 380, 383, 385, 386, 388, 392, 411, 413, 423, 430, 432, 435, 436, 437, 443, 447, 450, 451, 453, 455, 463, 531, 532, 548], "doc": [11, 13, 16, 79, 80, 83, 86, 99, 114, 135, 177, 183, 186, 189, 195, 206, 228, 283, 319, 354, 355, 357, 359, 362, 368, 370, 371, 373, 374, 383, 390, 391, 393, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 501, 512, 514, 520, 523, 536, 542, 543, 547, 548, 552], "exampl": [11, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 65, 76, 78, 79, 81, 82, 83, 84, 85, 86, 89, 91, 94, 96, 97, 100, 104, 105, 108, 110, 112, 115, 117, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 146, 148, 151, 158, 161, 163, 177, 178, 179, 181, 184, 187, 189, 190, 191, 197, 199, 220, 226, 256, 259, 265, 281, 282, 303, 307, 313, 322, 333, 334, 339, 342, 344, 345, 347, 349, 351, 354, 355, 357, 359, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 377, 380, 381, 382, 386, 387, 388, 390, 394, 396, 399, 402, 405, 406, 407, 410, 412, 413, 414, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 488, 490, 491, 492, 494, 499, 501, 502, 503, 513, 534, 542, 543, 544, 548, 550, 552, 553], "version": [11, 74, 79, 81, 83, 84, 86, 115, 116, 117, 120, 166, 196, 198, 353, 355, 357, 358, 361, 362, 363, 364, 368, 371, 374, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 393, 394, 395, 396, 398, 399, 404, 406, 407, 409, 412, 413, 414, 416, 417, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 486, 548], "arg": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 80, 83, 86, 99, 104, 105, 114, 132, 133, 134, 138, 139, 140, 142, 145, 146, 147, 149, 150, 179, 180, 187, 201, 214, 226, 233, 234, 235, 306, 548], "log_level": 11, "verbos": [11, 78, 355, 377, 548, 550], "debug": [11, 354, 360, 365, 370, 416, 427, 456, 488, 548], "warn": [11, 16, 26, 78, 80, 83, 86, 99, 114, 179, 196, 197, 198, 199, 251, 252, 253, 255, 340, 379, 384, 396, 413, 418, 419, 420, 423, 430, 431, 432, 435, 436, 437, 439, 440, 443, 447, 448, 463, 464, 488, 512, 520, 523, 548], "error": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 66, 75, 80, 82, 97, 99, 100, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 154, 180, 183, 188, 196, 198, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 267, 268, 272, 273, 274, 332, 354, 355, 368, 369, 370, 372, 377, 378, 381, 382, 395, 399, 401, 403, 405, 406, 408, 412, 413, 416, 418, 419, 420, 424, 425, 427, 428, 430, 432, 435, 436, 437, 438, 440, 443, 444, 445, 447, 448, 451, 459, 460, 461, 463, 472, 473, 474, 476, 484, 486, 488, 506, 524, 533, 545, 548], "ignor": [11, 83, 86, 142, 152, 181, 196, 198, 214, 283, 295, 355, 407, 441, 447, 448, 452, 457, 472, 488, 548], "print": [11, 65, 78, 79, 81, 82, 83, 84, 86, 89, 91, 96, 97, 104, 112, 115, 117, 123, 128, 129, 133, 135, 138, 139, 145, 147, 149, 158, 161, 197, 199, 206, 220, 228, 259, 281, 282, 291, 322, 354, 355, 365, 366, 369, 378, 381, 389, 390, 423, 424, 425, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 472, 473, 474, 486, 488, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 552], "exit": [11, 15, 83, 86, 197, 199, 206, 228, 395, 512, 548], "autom": [11, 362, 370, 380, 383, 384, 407, 453, 548], "configur": [11, 15, 16, 46, 80, 83, 86, 96, 99, 104, 105, 108, 110, 111, 112, 114, 116, 117, 119, 120, 121, 122, 123, 303, 354, 355, 357, 363, 365, 369, 370, 374, 375, 381, 384, 390, 398, 400, 401, 405, 407, 416, 419, 420, 427, 429, 437, 439, 440, 463, 468, 487, 493, 547, 548], "driven": [11, 15, 360, 370, 372, 374, 413, 468, 487], "process": [11, 79, 88, 116, 117, 120, 123, 154, 179, 191, 302, 303, 304, 313, 354, 355, 357, 359, 360, 362, 363, 364, 366, 367, 369, 370, 376, 379, 380, 381, 387, 391, 397, 402, 405, 407, 413, 420, 424, 427, 437, 439, 440, 451, 452, 455, 465, 470, 473, 478, 485, 487, 488, 546, 547, 548], "overwrit": [11, 15, 16, 19, 20, 26, 78, 79, 84, 88, 95, 96, 97, 100, 102, 104, 105, 113, 115, 136, 137, 143, 148, 151, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 196, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 251, 252, 253, 254, 255, 303, 378, 414, 416, 427, 428, 435, 436, 439, 440, 441, 454, 456, 457, 458, 459, 463, 464, 470, 472, 473, 484, 488, 501, 512, 548], "filenam": [11, 16, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 81, 82, 83, 86, 89, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 117, 119, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 178, 179, 181, 185, 187, 190, 191, 206, 208, 220, 228, 251, 252, 253, 254, 255, 256, 260, 262, 264, 265, 291, 321, 323, 333, 354, 355, 359, 402, 427, 428, 432, 433, 435, 436, 440, 441, 451, 452, 456, 457, 458, 459, 463, 464, 472, 473, 474, 485, 488, 490, 491, 492, 494, 512, 514, 542, 543, 548], "myconfig": [11, 548], "yaml": [11, 15, 16, 20, 26, 80, 94, 95, 96, 97, 99, 100, 104, 105, 113, 114, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 321, 323, 353, 362, 363, 365, 366, 367, 370, 371, 376, 381, 382, 384, 385, 397, 398, 399, 402, 407, 416, 420, 423, 424, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 473, 474, 487, 545, 546, 547, 548], "write": [11, 15, 16, 26, 78, 79, 82, 83, 84, 86, 95, 96, 97, 100, 102, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 178, 179, 181, 185, 187, 190, 191, 206, 220, 228, 251, 252, 253, 254, 255, 323, 332, 355, 357, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 390, 393, 399, 402, 407, 409, 412, 413, 414, 415, 420, 423, 427, 435, 436, 439, 441, 454, 458, 459, 463, 464, 470, 472, 473, 488, 493, 549, 551], "default": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 63, 65, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 159, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 273, 274, 275, 280, 281, 283, 294, 295, 296, 301, 303, 304, 310, 311, 312, 313, 315, 316, 321, 323, 325, 331, 336, 337, 341, 343, 344, 345, 347, 348, 350, 351, 354, 360, 366, 370, 371, 377, 380, 384, 390, 396, 398, 399, 400, 402, 405, 407, 413, 414, 416, 417, 418, 419, 420, 428, 429, 431, 433, 435, 439, 440, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 472, 473, 474, 484, 486, 488, 495, 498, 499, 500, 501, 505, 506, 507, 514, 520, 523, 524, 548, 552], "file": [11, 15, 16, 26, 63, 64, 65, 78, 79, 81, 82, 83, 84, 86, 88, 89, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 159, 164, 178, 179, 181, 185, 187, 190, 191, 206, 208, 220, 228, 251, 252, 253, 254, 255, 256, 291, 321, 323, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 373, 374, 375, 377, 378, 381, 382, 383, 384, 385, 386, 388, 390, 398, 399, 405, 407, 409, 411, 412, 413, 414, 416, 417, 419, 420, 422, 423, 426, 429, 430, 434, 435, 437, 439, 440, 442, 443, 447, 449, 451, 452, 455, 456, 457, 458, 459, 462, 465, 466, 467, 468, 469, 471, 474, 475, 476, 487, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552], "store": [11, 15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 78, 79, 81, 82, 83, 86, 113, 114, 115, 118, 120, 146, 159, 160, 178, 179, 181, 187, 190, 191, 195, 196, 198, 206, 228, 337, 354, 357, 360, 362, 363, 364, 366, 367, 370, 372, 376, 378, 380, 381, 384, 402, 405, 406, 424, 429, 430, 439, 440, 444, 448, 452, 453, 454, 455, 456, 457, 460, 463, 464, 465, 466, 474, 484, 485, 488, 493, 494, 495, 500, 501, 524, 545, 546, 548, 552], "valu": [11, 15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 52, 79, 80, 82, 83, 84, 86, 87, 90, 94, 95, 96, 97, 99, 100, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 154, 158, 164, 165, 167, 168, 169, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 265, 266, 267, 268, 269, 271, 272, 273, 283, 287, 295, 296, 310, 313, 322, 325, 340, 343, 344, 345, 355, 357, 360, 365, 366, 368, 370, 372, 374, 377, 378, 381, 396, 399, 405, 416, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 472, 473, 474, 476, 480, 481, 482, 486, 488, 492, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551], "exist": [11, 15, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 84, 86, 94, 95, 96, 97, 100, 102, 104, 105, 113, 115, 136, 137, 143, 148, 151, 163, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 206, 220, 228, 251, 252, 253, 255, 338, 354, 357, 359, 362, 363, 365, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 380, 381, 386, 387, 390, 391, 394, 398, 399, 413, 414, 416, 419, 431, 433, 452, 456, 457, 459, 460, 464, 485, 500, 501, 549], "perform": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 81, 83, 86, 89, 95, 99, 103, 114, 155, 163, 177, 189, 191, 203, 206, 207, 215, 218, 228, 230, 240, 241, 245, 251, 255, 267, 268, 321, 347, 354, 355, 360, 363, 364, 365, 369, 370, 378, 381, 384, 386, 395, 402, 405, 407, 410, 414, 417, 419, 420, 423, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 440, 443, 445, 446, 447, 452, 453, 455, 456, 457, 458, 460, 465, 468, 472, 484, 488, 496, 497, 500, 506, 524, 546, 547, 548, 549], "out": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 89, 95, 96, 115, 178, 179, 181, 187, 190, 191, 228, 240, 241, 353, 354, 355, 357, 359, 362, 364, 366, 368, 370, 372, 373, 374, 379, 383, 390, 391, 393, 399, 413, 425, 429, 432, 433, 456, 457, 463, 464, 472, 474, 476, 477, 497, 510, 511, 545, 548, 552], "output": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 79, 80, 82, 83, 84, 86, 88, 99, 114, 128, 129, 135, 140, 178, 179, 181, 187, 190, 191, 206, 220, 228, 312, 355, 362, 364, 367, 370, 371, 375, 378, 381, 394, 409, 415, 418, 419, 435, 439, 440, 443, 447, 455, 456, 472, 473, 486, 488, 548, 549], "folder": [11, 78, 89, 96, 101, 105, 115, 319, 354, 355, 359, 362, 383, 385, 390, 395, 405, 408, 428, 435, 439, 463, 472, 473, 546, 548], "where": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 79, 80, 83, 84, 86, 99, 113, 114, 115, 118, 123, 135, 136, 137, 143, 148, 151, 153, 164, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 192, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 269, 272, 275, 276, 283, 319, 355, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 381, 382, 384, 386, 388, 390, 396, 408, 414, 423, 427, 432, 439, 440, 451, 455, 456, 457, 459, 461, 463, 464, 465, 474, 476, 484, 485, 488, 493, 500, 505, 506, 507, 510, 511, 514, 547, 548, 549, 550, 551, 552], "publish": [11, 371, 384, 427, 464], "document": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 291, 295, 305, 328, 341, 354, 356, 358, 359, 361, 362, 364, 368, 370, 371, 373, 375, 377, 379, 380, 384, 385, 390, 391, 392, 399, 401, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 456, 458, 463, 465, 466, 488, 499, 500, 501, 548], "relat": [11, 13, 65, 79, 81, 194, 273, 360, 362, 365, 367, 368, 371, 373, 374, 375, 380, 384, 401, 402, 414, 420, 439, 452, 459, 463, 478, 545, 550], "need": [11, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 81, 83, 85, 86, 89, 96, 99, 100, 112, 114, 115, 136, 137, 148, 150, 151, 186, 258, 259, 283, 353, 354, 355, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 384, 385, 390, 394, 395, 396, 413, 415, 420, 424, 428, 430, 431, 432, 433, 437, 439, 440, 444, 446, 447, 453, 454, 456, 457, 458, 459, 460, 463, 465, 472, 474, 484, 497, 499, 500, 548, 552], "execut": [11, 112, 116, 120, 121, 123, 354, 355, 357, 359, 361, 362, 363, 369, 370, 374, 384, 385, 386, 387, 388, 389, 390, 399, 407, 413, 422, 426, 434, 442, 449, 455, 456, 462, 464, 467, 468, 469, 471, 474, 475, 503, 513, 534, 544, 546], "them": [11, 15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 95, 197, 199, 206, 228, 283, 354, 355, 357, 359, 361, 362, 368, 370, 373, 380, 381, 383, 384, 390, 397, 413, 424, 425, 427, 430, 432, 435, 436, 438, 440, 445, 451, 452, 453, 456, 457, 459, 461, 463, 465, 468, 473, 485, 488, 497, 548, 550], "The": [11, 15, 16, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 52, 53, 57, 59, 62, 67, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 95, 97, 99, 100, 101, 102, 103, 104, 105, 108, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 155, 159, 164, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 259, 265, 267, 268, 269, 271, 272, 273, 274, 275, 283, 295, 301, 303, 304, 307, 322, 337, 338, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 394, 395, 397, 398, 399, 400, 401, 402, 405, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 472, 473, 474, 476, 477, 478, 479, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 505, 507, 509, 510, 511, 514, 520, 522, 523, 524, 533, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553], "creat": [11, 13, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 78, 79, 80, 82, 83, 84, 86, 87, 88, 94, 96, 97, 99, 100, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 120, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 158, 160, 161, 162, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 265, 283, 293, 314, 318, 332, 341, 343, 348, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 397, 398, 399, 402, 405, 407, 413, 414, 416, 417, 418, 419, 420, 423, 425, 428, 429, 430, 435, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 474, 476, 483, 484, 485, 488, 492, 495, 497, 498, 499, 500, 504, 506, 507, 508, 509, 514, 524, 533, 545, 546, 548, 553], "current": [11, 15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 82, 83, 84, 85, 86, 94, 95, 96, 97, 100, 104, 105, 115, 116, 120, 141, 164, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 332, 348, 354, 355, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 385, 386, 387, 388, 397, 415, 428, 450, 454, 455, 456, 458, 463, 465, 466, 472, 473, 477, 484, 485, 486, 501, 545, 547, 548], "work": [11, 13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 115, 188, 319, 353, 354, 355, 357, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 406, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 484, 488, 498, 500, 512, 514, 520, 523, 536, 542, 543, 548], "directori": [11, 78, 83, 354, 370, 428, 438, 466, 472, 474, 485, 488, 548], "localfold": 11, "releas": [11, 51, 63, 90, 356, 358, 359, 361, 362, 368, 371, 372, 381, 385, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 427, 428, 436, 445, 446, 463, 465, 466, 472, 473, 476, 488, 490, 491, 492, 494], "0": [11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 38, 39, 42, 47, 50, 51, 52, 53, 65, 69, 72, 79, 81, 83, 84, 85, 86, 89, 91, 97, 98, 100, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 118, 120, 122, 123, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 161, 162, 166, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 263, 265, 267, 268, 269, 272, 273, 274, 275, 281, 282, 301, 305, 312, 313, 331, 342, 344, 345, 349, 351, 354, 355, 357, 358, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 387, 390, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 480, 482, 486, 490, 492, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 550, 551], "18": [11, 83, 86, 128, 358, 373, 379, 399, 405, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "number": [11, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 65, 70, 73, 78, 79, 81, 82, 83, 86, 87, 88, 89, 95, 97, 98, 100, 103, 104, 105, 106, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 154, 155, 158, 161, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 261, 265, 267, 268, 283, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 315, 316, 341, 347, 358, 359, 360, 363, 365, 366, 367, 368, 369, 373, 375, 378, 380, 381, 383, 390, 395, 405, 407, 408, 409, 414, 415, 416, 419, 420, 423, 424, 427, 428, 429, 430, 432, 433, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 463, 464, 465, 466, 472, 473, 474, 478, 484, 486, 488, 495, 497, 500, 501, 547, 548, 549, 550, 551], "stabl": [11, 83, 86, 186, 195, 283, 361, 362, 363, 370, 371, 374, 379, 383, 384, 385, 387, 399, 400, 401, 407, 412, 414, 416, 453, 485], "ex": [11, 456, 458, 459], "2": [11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 53, 54, 59, 62, 65, 66, 69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 96, 97, 99, 100, 104, 105, 107, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 127, 129, 130, 131, 135, 136, 137, 138, 140, 146, 148, 151, 158, 161, 175, 177, 178, 179, 181, 183, 184, 185, 189, 191, 196, 197, 198, 199, 200, 204, 208, 210, 212, 216, 218, 219, 223, 226, 233, 234, 235, 240, 241, 243, 244, 247, 248, 249, 254, 258, 259, 265, 267, 268, 269, 274, 275, 281, 301, 303, 339, 342, 347, 349, 351, 354, 355, 358, 359, 363, 365, 366, 368, 369, 370, 371, 374, 377, 378, 379, 380, 381, 383, 386, 388, 390, 393, 394, 395, 396, 397, 398, 405, 410, 411, 412, 413, 414, 415, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 472, 473, 474, 476, 482, 485, 486, 488, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551], "dev": [11, 16, 78, 80, 99, 114, 354, 356, 357, 370, 380, 383, 384, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 514, 542, 543], "destin": 11, "path": [11, 15, 16, 64, 78, 79, 80, 82, 83, 84, 86, 88, 95, 99, 101, 102, 105, 114, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 178, 179, 181, 186, 187, 190, 191, 206, 220, 228, 254, 291, 319, 320, 321, 323, 354, 357, 389, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 486, 542, 543, 548], "copi": [11, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94, 95, 96, 97, 99, 100, 103, 104, 105, 108, 110, 111, 112, 114, 116, 117, 119, 120, 121, 122, 123, 136, 137, 143, 148, 151, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 283, 326, 354, 359, 362, 364, 368, 370, 376, 383, 384, 390, 405, 407, 414, 415, 416, 419, 424, 427, 429, 430, 435, 437, 443, 446, 447, 451, 453, 455, 459, 461, 464, 488, 497, 501, 512, 548], "displai": [11, 15, 78, 83, 86, 108, 120, 123, 195, 272, 304, 347, 351, 354, 355, 384, 405, 408, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 451, 452, 453, 455, 456, 458, 459, 463, 464, 465, 466, 473, 488, 548], "about": [11, 13, 16, 80, 99, 114, 133, 138, 215, 220, 313, 354, 357, 359, 363, 370, 371, 373, 374, 375, 379, 380, 382, 383, 384, 389, 390, 409, 410, 414, 415, 416, 425, 431, 432, 433, 436, 437, 439, 451, 454, 456, 459, 464, 473, 474, 476, 484, 485, 548, 551], "system": [11, 79, 83, 86, 133, 141, 142, 177, 178, 179, 181, 184, 186, 189, 190, 191, 206, 228, 354, 360, 365, 367, 371, 374, 375, 379, 380, 382, 387, 395, 413, 419, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 499, 500, 546, 548, 552], "show": [11, 78, 83, 86, 117, 118, 119, 139, 158, 220, 351, 354, 355, 357, 366, 368, 369, 373, 374, 382, 384, 394, 395, 399, 407, 412, 413, 414, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 480, 481, 482, 488, 490, 491, 492, 494, 495, 497, 499, 505, 514, 546, 548, 550, 553], "depend": [11, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 84, 95, 97, 98, 103, 104, 110, 113, 115, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 165, 176, 177, 186, 189, 191, 206, 220, 228, 243, 283, 334, 354, 356, 357, 358, 360, 365, 366, 367, 368, 369, 372, 373, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 394, 398, 399, 402, 409, 411, 414, 415, 417, 419, 420, 422, 423, 426, 430, 432, 433, 442, 446, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 468, 484, 485, 488, 492, 493, 496, 497, 500, 514, 545], "envvar": 11, "environ": [11, 78, 320, 353, 354, 357, 361, 362, 366, 371, 374, 383, 384, 386, 387, 388, 389, 390, 394, 395, 397, 413, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 548], "variabl": [11, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 86, 99, 114, 124, 191, 267, 268, 271, 272, 273, 274, 294, 320, 354, 355, 357, 367, 369, 370, 384, 386, 388, 394, 395, 411, 412, 413, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 493, 548, 549, 550], "hierarch": [13, 281, 322, 363, 365, 381, 420, 488, 500], "agglom": 13, "astronom": [13, 368, 375, 413, 547], "calcul": [13, 15, 19, 20, 26, 91, 100, 105, 124, 125, 126, 164, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 239, 244, 246, 247, 248, 249, 252, 255, 256, 271, 273, 274, 280, 282, 305, 336, 344, 345, 364, 367, 395, 401, 405, 406, 407, 413, 418, 420, 423, 444, 448, 450, 461, 472, 473, 476, 488, 547, 551], "probabl": [13, 140, 354, 357, 360, 361, 362, 364, 367, 368, 372, 374, 376, 382, 384, 430, 443, 453, 456, 459, 461, 464, 492, 493, 494, 547, 548, 550, 551], "distribut": [13, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 79, 103, 140, 175, 212, 223, 229, 267, 268, 305, 306, 310, 347, 350, 352, 353, 354, 358, 359, 362, 367, 372, 373, 376, 379, 380, 384, 387, 398, 407, 413, 419, 420, 423, 429, 430, 433, 435, 439, 441, 443, 445, 453, 458, 461, 463, 474, 476, 488, 492, 493, 495, 501, 509, 524, 549, 550], "helper": [13, 291, 296, 361, 363, 368, 369, 370, 373, 384, 390, 396, 397, 398, 399, 405, 407, 410, 412, 413, 419, 420, 441, 451, 457, 458, 497, 546, 553], "throughout": [13, 361, 363, 364, 368, 370, 412, 451], "we": [13, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 63, 79, 83, 84, 85, 86, 90, 160, 186, 189, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 259, 329, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 383, 384, 385, 386, 387, 388, 390, 393, 394, 395, 396, 401, 405, 407, 412, 413, 414, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 470, 472, 473, 474, 485, 492, 493, 495, 497, 500, 511, 514, 524, 545, 548, 549, 550, 551, 552], "repres": [13, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 83, 86, 97, 99, 100, 104, 105, 114, 177, 179, 181, 183, 184, 186, 188, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 254, 255, 283, 291, 301, 354, 365, 366, 367, 368, 372, 375, 376, 377, 378, 395, 419, 440, 441, 451, 453, 455, 456, 457, 459, 464, 474, 483, 484, 486, 490, 491, 492, 494, 500, 545, 546, 547, 552], "astropi": [13, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 64, 79, 81, 82, 83, 84, 85, 86, 87, 89, 91, 97, 100, 104, 105, 108, 113, 115, 117, 119, 120, 123, 128, 129, 135, 137, 146, 148, 161, 175, 178, 179, 181, 184, 186, 187, 188, 189, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 219, 220, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 243, 244, 246, 247, 248, 249, 252, 254, 256, 257, 259, 281, 282, 283, 313, 330, 331, 340, 344, 345, 349, 353, 355, 356, 357, 359, 360, 361, 365, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 390, 391, 393, 397, 398, 399, 400, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 473, 474, 478, 480, 481, 482, 484, 485, 486, 488, 490, 492, 495, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 549, 552], "readthedoc": [13, 116, 171, 186, 195, 256, 357, 374, 396, 411, 453, 454, 463, 485, 499, 501], "io": [13, 79, 82, 83, 86, 116, 171, 181, 186, 195, 256, 357, 363, 374, 384, 396, 399, 411, 415, 419, 439, 453, 454, 456, 463, 485, 488, 499, 501], "might": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 166, 183, 195, 354, 359, 365, 366, 368, 371, 373, 378, 380, 381, 386, 388, 395, 427, 446, 448, 452, 455, 457, 464, 465, 468, 474, 476, 484, 488, 495, 501, 548, 550], "add": [13, 15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 75, 79, 80, 83, 84, 86, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 113, 114, 115, 132, 133, 135, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 151, 155, 178, 179, 181, 185, 187, 190, 191, 206, 228, 243, 280, 323, 342, 351, 353, 354, 355, 357, 359, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 380, 382, 383, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 430, 435, 436, 439, 443, 445, 448, 452, 454, 455, 456, 457, 459, 461, 463, 474, 478, 479, 488, 501, 516, 548, 551], "other": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 65, 67, 79, 80, 82, 83, 86, 97, 99, 100, 104, 105, 113, 114, 116, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 160, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 197, 199, 253, 266, 283, 296, 324, 343, 348, 353, 357, 359, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 385, 413, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 484, 485, 486, 488, 493, 495, 497, 501, 516, 545, 546, 548, 552], "conveni": [13, 113, 353, 354, 357, 364, 368, 376, 378, 385, 395, 397, 402, 405, 407, 412, 437, 450, 451, 452, 456, 457, 458, 459, 463, 465, 474, 483, 487, 546], "here": [13, 78, 79, 83, 86, 97, 104, 115, 133, 138, 147, 195, 267, 268, 271, 342, 353, 354, 355, 356, 357, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 381, 382, 384, 386, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 460, 461, 463, 464, 465, 468, 472, 473, 474, 478, 484, 488, 493, 495, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 552, 553], "e": [13, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 50, 51, 54, 59, 65, 66, 78, 79, 80, 81, 82, 83, 86, 90, 99, 114, 115, 128, 135, 136, 137, 138, 140, 171, 177, 178, 179, 181, 183, 185, 187, 189, 190, 191, 195, 196, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 267, 268, 272, 283, 285, 289, 315, 322, 332, 343, 344, 349, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 388, 390, 391, 393, 394, 395, 399, 405, 406, 407, 411, 413, 414, 415, 419, 422, 424, 425, 427, 428, 429, 430, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 472, 473, 474, 476, 483, 484, 485, 486, 488, 492, 493, 498, 499, 500, 505, 506, 507, 514, 515, 517, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 542, 545, 547, 548, 549, 550, 551, 552, 553], "g": [13, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 51, 52, 53, 54, 59, 65, 79, 81, 82, 83, 86, 90, 128, 177, 178, 179, 181, 183, 187, 189, 190, 191, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 272, 283, 322, 343, 349, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 380, 381, 383, 384, 386, 387, 388, 405, 407, 411, 413, 414, 415, 416, 419, 424, 425, 428, 430, 437, 439, 441, 450, 451, 452, 453, 456, 457, 458, 459, 463, 464, 468, 474, 476, 480, 483, 484, 485, 486, 488, 493, 498, 499, 500, 507, 545, 547, 548, 550, 552, 553], "coord": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 230, 272, 365, 398, 440, 456, 457, 497, 500, 501, 508], "contain": [13, 16, 19, 20, 26, 57, 59, 62, 65, 78, 79, 80, 82, 83, 84, 86, 87, 90, 91, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 115, 123, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 160, 163, 165, 170, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 272, 281, 282, 347, 349, 351, 352, 354, 357, 358, 360, 362, 363, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 383, 384, 391, 395, 399, 400, 401, 402, 404, 405, 407, 408, 411, 412, 413, 414, 415, 419, 420, 423, 425, 427, 428, 429, 432, 435, 436, 439, 440, 443, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 476, 477, 479, 484, 485, 486, 488, 492, 496, 497, 500, 501, 502, 545, 547, 549, 550, 551], "without": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 120, 138, 176, 177, 182, 186, 189, 351, 354, 357, 359, 362, 364, 368, 369, 370, 371, 373, 378, 384, 395, 396, 400, 428, 431, 435, 436, 450, 455, 456, 457, 472, 488, 499, 500, 501, 543, 548, 550], "wc": [13, 16, 79, 97, 100, 104, 117, 153, 161, 162, 166, 177, 178, 179, 181, 186, 187, 189, 190, 191, 203, 206, 207, 215, 218, 228, 230, 240, 241, 245, 251, 255, 316, 349, 354, 360, 368, 373, 395, 396, 397, 399, 405, 413, 414, 418, 420, 427, 428, 431, 432, 433, 435, 437, 441, 445, 448, 450, 452, 454, 455, 457, 458, 459, 464, 472, 473, 474, 497, 500, 505, 506, 507, 512], "pixel": [13, 79, 97, 100, 104, 105, 106, 107, 108, 118, 128, 129, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 149, 150, 161, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 203, 206, 207, 215, 218, 228, 230, 240, 241, 245, 251, 255, 365, 393, 397, 411, 414, 431, 433, 439, 441, 452, 455, 456, 464, 474, 484, 486, 498, 499, 500, 509], "pig": [13, 354, 356, 357, 394, 395, 397, 398, 399, 401, 402, 413, 415, 416, 420], "10": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 54, 64, 65, 82, 83, 84, 85, 86, 97, 98, 100, 103, 104, 105, 108, 112, 116, 117, 121, 122, 123, 128, 129, 132, 133, 135, 137, 139, 145, 146, 147, 148, 149, 151, 158, 164, 177, 178, 179, 181, 186, 187, 189, 190, 191, 195, 196, 198, 207, 210, 222, 223, 225, 226, 247, 259, 273, 301, 303, 313, 342, 347, 349, 351, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 371, 376, 377, 378, 382, 384, 390, 395, 397, 408, 410, 413, 417, 419, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 482, 486, 492, 495, 497, 498, 499, 500, 510, 511, 514, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 536, 537, 538, 548, 549, 552], "some": [13, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 78, 80, 83, 86, 99, 114, 164, 185, 283, 291, 357, 359, 360, 361, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 393, 395, 397, 405, 406, 408, 410, 412, 413, 414, 419, 423, 424, 425, 427, 429, 431, 432, 433, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 458, 459, 461, 463, 464, 473, 474, 476, 477, 484, 485, 488, 493, 498, 500, 547, 548, 549, 550, 552], "healpix": [13, 177, 178, 179, 181, 187, 190, 191, 353, 361, 363, 368, 405, 413, 456, 464, 500], "todo": [13, 75, 83, 86, 94, 146, 256, 355, 378, 396, 463, 478, 479, 552], "befor": [13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 52, 53, 80, 83, 86, 87, 95, 99, 113, 114, 178, 179, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 295, 349, 354, 355, 357, 359, 361, 362, 363, 364, 368, 369, 370, 372, 373, 379, 383, 384, 390, 408, 414, 428, 430, 445, 446, 453, 456, 459, 465, 468, 472, 524, 548], "v1": [13, 16, 79, 80, 84, 99, 114, 354, 361, 363, 365, 370, 371, 372, 373, 379, 380, 383, 386, 388, 399, 400, 401, 407, 412, 416, 417, 418, 419, 420, 520, 523], "discuss": [13, 59, 256, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 391, 413, 461, 466, 476, 477, 552], "what": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 259, 313, 355, 360, 368, 371, 373, 374, 381, 384, 392, 441, 450, 451, 453, 463, 464, 468, 473, 476, 484, 501, 533, 548, 549, 552], "do": [13, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 90, 95, 99, 114, 135, 146, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 307, 347, 355, 357, 359, 360, 361, 364, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 383, 384, 386, 388, 399, 425, 427, 428, 430, 431, 432, 433, 435, 437, 438, 439, 443, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 463, 464, 472, 473, 474, 484, 488, 500, 545, 548, 551, 552], "keep": [13, 83, 86, 95, 113, 146, 178, 179, 181, 187, 190, 191, 195, 354, 355, 357, 359, 360, 361, 362, 368, 371, 372, 373, 374, 377, 378, 403, 413, 432, 433, 438, 443, 453, 458, 464], "hide": [13, 359, 376], "from": [13, 15, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 164, 165, 167, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 265, 266, 267, 268, 271, 274, 281, 282, 283, 293, 301, 303, 305, 306, 310, 313, 314, 318, 322, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552], "remov": [13, 83, 86, 87, 91, 95, 116, 117, 120, 148, 151, 163, 176, 177, 182, 185, 186, 189, 191, 196, 198, 228, 282, 357, 361, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 385, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 427, 433, 448, 452, 457, 460, 463, 477, 488, 497], "complet": [13, 16, 80, 99, 114, 313, 354, 360, 364, 365, 366, 367, 368, 371, 372, 374, 378, 379, 380, 387, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 410, 411, 412, 413, 414, 415, 435, 440, 453, 460, 468, 488, 493], "directli": [13, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 79, 83, 84, 86, 127, 150, 165, 178, 179, 181, 187, 190, 191, 251, 253, 255, 354, 356, 357, 359, 361, 362, 365, 366, 367, 368, 372, 374, 381, 386, 388, 389, 393, 395, 396, 397, 399, 413, 420, 425, 427, 428, 430, 435, 436, 437, 440, 441, 443, 444, 446, 447, 451, 452, 453, 454, 456, 457, 458, 459, 460, 463, 464, 472, 473, 474, 476, 484, 488, 493, 497, 500, 524, 550], "multiprocess": [13, 88, 116, 117, 120, 123, 154, 298, 303, 304, 399, 419, 420], "multithread": 13, "setup": [13, 356, 357, 358, 361, 366, 367, 371, 374, 382, 411, 415, 468, 548], "quantiti": [13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 50, 51, 52, 53, 54, 69, 71, 72, 76, 79, 82, 83, 84, 86, 89, 91, 95, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 162, 163, 164, 166, 170, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 261, 267, 268, 271, 272, 273, 274, 282, 283, 285, 287, 289, 290, 295, 313, 315, 316, 325, 329, 354, 355, 360, 363, 365, 368, 369, 370, 372, 377, 378, 381, 382, 396, 398, 402, 405, 406, 414, 415, 416, 423, 431, 439, 440, 441, 444, 451, 452, 454, 455, 456, 459, 463, 465, 466, 474, 480, 481, 482, 484, 488, 501, 527, 536, 538, 547, 550, 552], "config": [15, 16, 80, 99, 114, 353, 355, 360, 362, 363, 370, 371, 374, 381, 386, 388, 398, 399, 400, 405, 413, 428, 435, 472, 545], "base": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 282, 291, 292, 295, 301, 303, 305, 328, 341, 349, 354, 355, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 377, 382, 384, 386, 387, 394, 396, 397, 399, 401, 402, 405, 407, 410, 411, 412, 413, 414, 420, 427, 429, 430, 432, 435, 436, 437, 438, 439, 441, 444, 448, 451, 454, 456, 457, 459, 460, 461, 463, 464, 473, 474, 476, 485, 486, 488, 498, 500, 512, 522, 546, 547, 549, 550], "It": [15, 19, 20, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 97, 100, 104, 105, 113, 128, 135, 139, 146, 147, 148, 149, 151, 161, 164, 168, 169, 174, 178, 179, 181, 183, 186, 187, 190, 191, 193, 200, 201, 204, 207, 208, 210, 211, 212, 216, 220, 222, 223, 225, 229, 231, 233, 239, 243, 244, 246, 247, 248, 249, 252, 256, 271, 273, 274, 291, 305, 310, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 389, 391, 395, 396, 397, 398, 402, 405, 407, 408, 409, 414, 416, 418, 419, 420, 423, 428, 433, 436, 438, 440, 443, 444, 448, 451, 452, 453, 455, 456, 457, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 477, 484, 485, 487, 488, 492, 493, 495, 497, 501, 515, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 545, 546, 547, 548, 549, 550, 552], "initi": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 53, 63, 80, 83, 86, 99, 113, 114, 115, 123, 179, 182, 183, 206, 228, 230, 231, 283, 359, 364, 365, 366, 370, 407, 423, 430, 433, 435, 436, 438, 439, 440, 443, 448, 451, 452, 456, 459, 472, 473, 474, 483, 485, 533, 547], "set": [15, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 90, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 110, 112, 113, 114, 115, 116, 117, 119, 120, 123, 135, 137, 148, 151, 154, 155, 158, 164, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 254, 255, 256, 265, 303, 305, 354, 355, 360, 363, 364, 366, 367, 369, 370, 371, 372, 374, 378, 379, 380, 381, 382, 384, 386, 388, 401, 407, 409, 411, 413, 416, 419, 420, 423, 424, 427, 429, 430, 431, 432, 435, 437, 438, 439, 440, 441, 445, 446, 448, 451, 452, 453, 455, 457, 459, 460, 461, 463, 465, 466, 468, 476, 484, 485, 488, 497, 499, 500, 501, 524, 545, 548, 551, 552], "paramet": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 285, 287, 289, 290, 292, 294, 295, 296, 297, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 363, 366, 367, 369, 370, 372, 373, 376, 378, 380, 391, 394, 395, 396, 397, 398, 399, 401, 402, 405, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 460, 461, 463, 464, 473, 474, 476, 484, 486, 487, 488, 495, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551], "declar": [15, 83, 86, 243, 333, 334, 357, 361, 362, 365, 370, 371, 377, 384, 401, 487], "intern": [15, 83, 86, 113, 115, 124, 125, 126, 155, 161, 186, 249, 261, 283, 295, 354, 366, 368, 370, 373, 378, 405, 407, 416, 419, 423, 428, 435, 444, 445, 452, 454, 456, 463, 466, 472, 484, 488, 543], "though": [15, 357, 362, 368, 369, 370, 372, 374, 428, 459, 472], "user": [15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 84, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 354, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 398, 405, 406, 412, 413, 414, 416, 428, 438, 439, 440, 452, 454, 456, 457, 458, 459, 460, 468, 472, 485, 486, 487, 488, 493, 497, 503, 509, 513, 534, 544, 545, 548], "can": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 50, 56, 65, 66, 67, 78, 79, 80, 83, 86, 88, 97, 99, 100, 103, 104, 105, 108, 113, 114, 115, 120, 121, 123, 128, 133, 138, 146, 148, 151, 155, 161, 164, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 193, 195, 197, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 215, 216, 218, 220, 222, 223, 225, 228, 229, 230, 231, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 266, 272, 283, 295, 296, 301, 304, 313, 330, 332, 347, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 397, 399, 401, 402, 405, 407, 408, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 473, 474, 476, 478, 479, 484, 485, 486, 488, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 522, 524, 533, 543, 545, 546, 547, 548, 549, 550, 551], "also": [15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 90, 108, 112, 113, 115, 116, 128, 150, 155, 161, 176, 183, 185, 186, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 266, 283, 291, 296, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 401, 402, 405, 413, 414, 415, 419, 423, 424, 427, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 444, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 472, 473, 476, 484, 485, 486, 487, 488, 495, 497, 500, 501, 524, 527, 545, 547, 548, 549, 550, 552], "provid": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 81, 83, 84, 86, 97, 100, 104, 105, 107, 120, 123, 135, 136, 154, 168, 169, 174, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 280, 283, 347, 354, 355, 364, 365, 367, 369, 370, 371, 374, 375, 378, 380, 381, 382, 383, 384, 385, 389, 391, 395, 398, 399, 400, 402, 405, 407, 416, 419, 423, 429, 430, 431, 440, 443, 444, 451, 452, 453, 455, 456, 457, 459, 460, 464, 465, 466, 468, 473, 474, 476, 478, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 498, 499, 500, 501, 502, 509, 512, 524, 533, 545, 546, 547, 548, 550, 553], "pass": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 66, 79, 80, 81, 82, 83, 84, 85, 86, 88, 96, 97, 99, 100, 103, 104, 105, 114, 115, 118, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 163, 171, 176, 177, 178, 179, 181, 183, 185, 186, 187, 189, 190, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 266, 283, 295, 303, 304, 305, 310, 311, 312, 313, 341, 342, 347, 349, 350, 354, 357, 364, 366, 367, 368, 369, 381, 401, 405, 407, 419, 420, 424, 425, 427, 428, 435, 436, 440, 444, 445, 446, 451, 452, 453, 454, 455, 456, 457, 459, 460, 463, 472, 473, 474, 488, 499, 500, 501, 505, 506, 548, 552], "nest": [15, 177, 178, 179, 229, 265, 283, 322, 419, 464, 499, 550], "dictionari": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 113, 114, 115, 116, 117, 120, 121, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 163, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 267, 268, 272, 293, 321, 322, 323, 325, 335, 338, 348, 371, 373, 378, 381, 382, 427, 429, 435, 453, 454, 460, 461, 543], "moment": [15, 51, 54, 82, 90, 243, 330, 360, 368, 370, 371, 374, 379, 380, 454, 456, 493], "instanti": [15, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 178, 179, 181, 183, 190, 191, 365, 370, 424, 428, 451, 452, 456, 459, 461, 472], "In": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 83, 84, 86, 89, 96, 98, 103, 115, 135, 154, 177, 179, 182, 185, 191, 196, 198, 255, 266, 296, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 390, 395, 396, 397, 398, 399, 400, 401, 402, 405, 416, 419, 423, 424, 425, 427, 428, 429, 430, 431, 433, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 464, 465, 472, 473, 474, 484, 486, 488, 493, 496, 497, 498, 500, 501, 502, 505, 506, 511, 524, 543, 546, 547, 548, 549, 550, 551, 552], "case": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 83, 86, 135, 154, 166, 177, 179, 185, 186, 189, 191, 195, 196, 198, 218, 229, 251, 253, 255, 266, 275, 296, 313, 349, 354, 355, 357, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 386, 394, 395, 398, 401, 407, 408, 413, 419, 420, 423, 424, 427, 428, 429, 430, 432, 433, 435, 439, 440, 443, 444, 445, 447, 448, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 472, 474, 483, 486, 487, 488, 498, 501, 505, 506, 507, 510, 511, 515, 524, 531, 546, 548, 550], "those": [15, 79, 164, 178, 179, 181, 187, 190, 191, 195, 197, 199, 206, 228, 291, 343, 354, 357, 359, 361, 363, 368, 370, 373, 374, 375, 376, 377, 379, 384, 385, 386, 388, 389, 399, 402, 445, 453, 456, 457, 458, 460, 468, 474, 486, 488, 497, 552], "present": [15, 68, 78, 79, 81, 86, 87, 95, 101, 105, 113, 115, 152, 180, 185, 206, 214, 228, 283, 354, 355, 357, 367, 370, 374, 378, 381, 384, 405, 424, 429, 432, 433, 444, 445, 446, 450, 454, 455, 456, 458, 484, 486, 489, 501, 548, 550], "dict": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 67, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 113, 114, 115, 116, 117, 118, 120, 121, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 163, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 265, 266, 267, 268, 272, 281, 295, 303, 304, 321, 322, 323, 325, 335, 336, 337, 338, 341, 342, 343, 347, 348, 349, 350, 351, 354, 369, 371, 375, 378, 381, 398, 402, 405, 413, 428, 435, 445, 446, 451, 453, 456, 460, 472, 473, 500, 505, 514], "analysisconfig": [15, 355, 428, 432, 433, 435, 445, 472], "follow": [15, 19, 20, 43, 44, 76, 78, 79, 80, 86, 97, 99, 101, 102, 104, 105, 113, 114, 115, 118, 123, 128, 177, 178, 179, 181, 185, 190, 191, 195, 243, 259, 265, 344, 345, 347, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 397, 398, 399, 401, 402, 405, 407, 408, 414, 415, 419, 420, 423, 424, 425, 427, 428, 430, 431, 432, 435, 436, 439, 440, 445, 446, 447, 448, 450, 451, 453, 455, 456, 457, 458, 459, 463, 468, 472, 474, 476, 478, 479, 484, 486, 488, 490, 492, 493, 497, 499, 500, 501, 502, 510, 511, 515, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 533, 546, 549, 550, 551, 553], "schema": [15, 16, 80, 99, 114, 370, 373], "attribut": [15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 163, 164, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 283, 364, 366, 376, 381, 382, 395, 396, 399, 400, 401, 402, 405, 407, 409, 411, 413, 418, 419, 420, 425, 429, 439, 453, 455, 456, 457, 459, 474, 484, 500, 501, 550], "summari": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 291, 295, 305, 328, 341, 355, 357, 374, 392, 424, 428, 446, 447, 452, 463, 472, 488], "get_dataset": [15, 428, 432, 433, 435, 445, 472, 488], "produc": [15, 97, 100, 104, 105, 107, 113, 262, 264, 354, 355, 360, 369, 370, 378, 379, 381, 384, 399, 424, 427, 429, 431, 436, 437, 438, 439, 443, 446, 448, 450, 453, 455, 461, 463, 473, 488, 491, 493, 547, 548], "note": [15, 16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 74, 78, 79, 80, 82, 83, 86, 89, 96, 97, 98, 99, 103, 108, 114, 115, 120, 123, 135, 140, 148, 150, 160, 171, 189, 193, 195, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 273, 274, 283, 304, 345, 351, 353, 356, 357, 359, 362, 367, 368, 371, 374, 378, 379, 380, 382, 383, 384, 387, 393, 395, 415, 417, 419, 423, 424, 428, 429, 431, 432, 435, 438, 440, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 484, 486, 488, 501, 510, 511, 522, 550, 551, 552], "progress": [15, 78, 108, 120, 123, 195, 304, 360, 363, 370, 371, 384, 405, 412, 413, 414, 420, 488], "bar": [15, 78, 83, 86, 97, 100, 104, 105, 108, 120, 123, 132, 133, 191, 195, 216, 274, 304, 348, 371, 405, 408, 409, 415, 420, 448, 461, 488, 521], "get_excess_map": [15, 472], "excess": [15, 65, 70, 97, 100, 104, 105, 109, 112, 113, 115, 116, 117, 120, 122, 125, 126, 158, 267, 268, 273, 274, 352, 366, 369, 401, 402, 408, 413, 420, 423, 427, 428, 430, 431, 432, 435, 437, 441, 443, 447, 448, 451, 452, 455, 457, 458, 465, 472, 473, 486, 488], "respect": [15, 16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 79, 80, 83, 86, 99, 101, 114, 115, 124, 177, 179, 189, 191, 266, 364, 369, 380, 382, 402, 431, 433, 447, 456, 457, 465, 486, 501, 551], "get_flux_point": [15, 113, 115, 378, 400, 428, 472], "flux": [15, 19, 20, 26, 41, 46, 65, 69, 71, 72, 74, 75, 76, 79, 84, 95, 96, 97, 100, 104, 105, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 196, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 263, 271, 272, 273, 274, 358, 366, 367, 369, 370, 372, 374, 375, 377, 386, 393, 396, 398, 399, 401, 405, 407, 411, 412, 413, 415, 420, 422, 426, 429, 431, 435, 437, 439, 440, 442, 444, 445, 446, 447, 448, 452, 456, 459, 464, 468, 482, 483, 484, 493, 500, 502, 509, 524, 545, 546, 550], "point": [15, 17, 18, 21, 22, 24, 25, 27, 60, 63, 65, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 84, 86, 89, 90, 91, 94, 95, 96, 97, 99, 100, 104, 105, 109, 113, 115, 116, 117, 120, 121, 122, 123, 125, 130, 137, 139, 142, 148, 150, 151, 161, 162, 164, 165, 166, 168, 169, 171, 172, 174, 175, 178, 179, 181, 186, 187, 190, 191, 195, 206, 228, 232, 243, 261, 265, 273, 285, 289, 295, 301, 311, 346, 354, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 393, 396, 398, 399, 405, 407, 408, 410, 411, 412, 413, 415, 418, 419, 420, 422, 424, 426, 429, 430, 431, 435, 440, 441, 443, 445, 447, 448, 452, 453, 454, 455, 456, 459, 460, 464, 466, 468, 476, 477, 483, 484, 485, 488, 493, 496, 497, 500, 502, 506, 507, 513, 524, 545, 546, 547], "specif": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 81, 82, 83, 86, 89, 97, 100, 105, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 154, 168, 169, 174, 178, 179, 180, 181, 183, 187, 188, 189, 190, 191, 195, 220, 253, 265, 343, 353, 354, 355, 357, 359, 364, 366, 368, 369, 370, 371, 372, 373, 375, 378, 379, 380, 381, 384, 386, 387, 399, 402, 405, 407, 416, 417, 419, 424, 427, 429, 430, 433, 435, 436, 441, 443, 447, 448, 452, 453, 454, 456, 457, 460, 466, 468, 474, 484, 485, 486, 488, 490, 491, 492, 494, 499, 500, 501, 552], "compon": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 77, 84, 97, 98, 100, 103, 104, 105, 120, 124, 150, 152, 186, 206, 228, 229, 243, 258, 365, 366, 367, 370, 376, 377, 395, 399, 401, 405, 413, 414, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 451, 452, 458, 459, 463, 464, 472, 473, 476, 484, 486, 488, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547], "get_light_curv": 15, "light": [15, 120, 124, 208, 220, 274, 358, 365, 367, 370, 374, 378, 386, 399, 401, 402, 409, 412, 414, 419, 420, 422, 444, 449, 468, 484, 485, 486, 487, 496, 497, 500, 502, 544, 546], "curv": [15, 19, 20, 26, 79, 120, 124, 200, 201, 204, 208, 210, 211, 212, 216, 220, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 274, 346, 358, 365, 367, 370, 374, 378, 386, 395, 399, 401, 402, 406, 409, 410, 412, 414, 416, 419, 420, 422, 423, 444, 449, 468, 484, 485, 486, 487, 496, 497, 500, 502, 544, 546], "get_observ": [15, 78, 91, 281, 282, 396, 407, 424, 427, 428, 429, 432, 433, 435, 437, 439, 445, 446, 448, 455, 460, 465, 466, 470, 472, 473, 488, 495, 497, 498], "fetch": [15, 354, 362, 393, 406, 472, 548], "accord": [15, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 70, 83, 86, 97, 100, 104, 105, 108, 113, 130, 136, 146, 153, 177, 183, 196, 198, 280, 343, 364, 365, 368, 369, 372, 378, 380, 399, 408, 420, 433, 445, 452, 455, 459, 460, 468, 484, 485, 488], "criteria": [15, 86, 407, 455, 460, 468], "defin": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 52, 53, 79, 80, 83, 84, 86, 90, 96, 97, 98, 99, 100, 103, 104, 105, 112, 113, 114, 115, 116, 117, 119, 120, 123, 135, 136, 137, 139, 143, 146, 147, 148, 149, 151, 154, 155, 159, 164, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 269, 275, 276, 295, 305, 310, 311, 312, 313, 316, 344, 345, 354, 355, 357, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 379, 380, 381, 382, 385, 386, 387, 388, 395, 396, 399, 402, 405, 408, 412, 413, 418, 419, 420, 428, 430, 431, 432, 433, 435, 436, 438, 441, 443, 444, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 472, 474, 484, 485, 486, 488, 490, 493, 497, 498, 500, 505, 507, 509, 510, 511, 514, 515, 518, 519, 521, 522, 524, 526, 527, 529, 530, 531, 532, 533, 543, 545, 546, 547, 548, 549, 550, 551], "read_dataset": 15, "read": [15, 16, 79, 81, 82, 83, 84, 86, 89, 95, 96, 97, 100, 101, 104, 105, 108, 112, 113, 115, 117, 119, 121, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 160, 178, 179, 181, 185, 186, 187, 190, 191, 206, 208, 220, 228, 254, 255, 256, 260, 262, 264, 265, 321, 340, 342, 347, 349, 354, 355, 357, 359, 364, 365, 366, 367, 370, 374, 376, 378, 380, 381, 382, 386, 388, 399, 402, 405, 413, 414, 416, 419, 420, 427, 428, 429, 433, 435, 438, 439, 444, 452, 453, 454, 459, 461, 463, 464, 465, 468, 472, 474, 485, 486, 488, 490, 491, 492, 494, 512, 542, 543, 548, 551], "name": [15, 16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 89, 91, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 113, 114, 115, 116, 117, 120, 121, 124, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 158, 159, 168, 169, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 281, 282, 304, 333, 334, 349, 355, 357, 360, 363, 364, 366, 367, 368, 369, 372, 373, 376, 377, 378, 380, 381, 382, 383, 395, 396, 397, 398, 399, 400, 401, 402, 405, 414, 416, 417, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 476, 486, 488, 492, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550], "taken": [15, 27, 83, 86, 97, 100, 104, 105, 113, 115, 138, 146, 165, 171, 173, 187, 188, 191, 195, 275, 355, 359, 363, 367, 418, 427, 435, 436, 448, 454, 457, 458, 463, 474, 484, 486, 497, 498, 550], "read_model": 15, "extend": [15, 19, 20, 26, 70, 83, 86, 87, 95, 153, 180, 183, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 228, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 361, 365, 366, 367, 368, 374, 376, 377, 378, 381, 386, 398, 400, 405, 422, 426, 427, 431, 440, 445, 451, 456, 457, 458, 459, 464, 468, 484, 485, 496, 497, 545], "true": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 82, 83, 84, 86, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 120, 121, 123, 127, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 158, 164, 165, 168, 169, 171, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 280, 283, 291, 292, 295, 313, 323, 325, 342, 347, 351, 354, 360, 367, 368, 369, 370, 377, 378, 381, 396, 400, 401, 412, 414, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 470, 472, 473, 474, 478, 484, 486, 488, 493, 498, 500, 501, 504, 505, 506, 509, 510, 512, 533, 547, 550, 552], "str": [15, 16, 19, 20, 26, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 155, 158, 159, 164, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 283, 295, 304, 319, 320, 336, 337, 339, 343, 347, 348, 350, 368, 381, 427, 429, 455, 459, 465], "bool": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 82, 83, 84, 86, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 112, 113, 114, 115, 116, 120, 121, 123, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 158, 165, 168, 169, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 255, 280, 283, 292, 295, 313, 321, 323, 325, 351, 354, 368, 437, 451, 455, 456], "replac": [15, 16, 80, 83, 86, 95, 97, 99, 100, 104, 105, 114, 136, 137, 143, 148, 176, 177, 179, 182, 186, 187, 189, 191, 253, 265, 354, 364, 365, 368, 372, 375, 381, 387, 396, 397, 399, 401, 402, 419, 420, 439, 448], "run_fit": [15, 428, 432, 472], "set_model": [15, 376, 428, 432, 445, 472], "fovbackgroundmodel": [15, 97, 103, 104, 106, 155, 224, 382, 402, 419, 420, 435, 436, 439, 440, 443, 452, 458, 472, 473, 495, 508], "alreadi": [15, 16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 114, 195, 251, 252, 253, 255, 354, 360, 361, 362, 365, 366, 367, 368, 369, 371, 374, 375, 376, 378, 381, 383, 384, 414, 425, 429, 431, 440, 448, 450, 451, 452, 456, 457, 458, 459, 463, 464, 465, 474, 476, 501, 512], "string": [15, 16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 86, 88, 99, 113, 114, 115, 116, 117, 120, 123, 139, 145, 147, 149, 154, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 196, 198, 206, 228, 283, 301, 343, 354, 367, 368, 371, 373, 380, 381, 393, 397, 405, 407, 428, 451, 457, 459, 472, 500, 501], "update_config": 15, "updat": [15, 16, 80, 83, 86, 98, 99, 103, 114, 185, 196, 198, 206, 228, 265, 303, 322, 354, 357, 359, 360, 361, 362, 363, 366, 371, 376, 378, 380, 381, 383, 384, 386, 387, 394, 395, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 411, 412, 413, 414, 416, 419, 420, 456, 459, 499, 500, 552], "write_dataset": 15, "write_covari": [15, 95, 206, 228], "save": [15, 19, 20, 26, 79, 95, 123, 193, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 354, 362, 370, 378, 382, 435, 436, 439, 453, 457, 458, 465, 485], "covari": [15, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 116, 117, 120, 121, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 267, 268, 347, 372, 382, 401, 407, 415, 416, 419, 428, 472, 550], "write_model": 15, "gener": [16, 27, 33, 42, 45, 46, 47, 56, 78, 79, 80, 83, 84, 86, 87, 97, 98, 99, 100, 103, 104, 105, 114, 137, 148, 151, 178, 179, 181, 182, 183, 187, 190, 191, 195, 205, 213, 217, 218, 219, 220, 221, 236, 242, 251, 252, 254, 256, 257, 305, 307, 310, 311, 312, 313, 319, 355, 357, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 387, 390, 396, 400, 401, 402, 405, 407, 412, 416, 419, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 484, 488, 493, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 548, 550, 551], "generalconfig": 16, "log": [16, 19, 20, 26, 42, 80, 97, 99, 113, 114, 115, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 183, 187, 191, 196, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 261, 269, 275, 294, 295, 297, 340, 349, 366, 370, 392, 409, 416, 420, 422, 428, 430, 431, 432, 433, 435, 436, 437, 440, 443, 445, 446, 447, 450, 452, 453, 454, 455, 456, 459, 461, 464, 465, 470, 472, 473, 488, 490, 500, 501, 502, 525, 533, 534, 540, 547, 548, 549, 550, 551], "logconfig": 16, "info": [16, 65, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 86, 89, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 139, 145, 147, 149, 267, 268, 291, 355, 369, 370, 374, 383, 389, 399, 400, 402, 409, 410, 413, 428, 432, 433, 435, 439, 446, 450, 451, 452, 456, 464, 465, 466, 468, 470, 472, 548], "none": [16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 50, 51, 52, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 267, 268, 280, 281, 283, 286, 291, 295, 303, 304, 305, 307, 310, 311, 312, 313, 321, 323, 329, 337, 341, 342, 343, 347, 348, 349, 350, 351, 354, 366, 368, 371, 378, 381, 382, 407, 418, 419, 424, 425, 427, 428, 430, 431, 435, 436, 437, 439, 440, 441, 443, 446, 447, 448, 450, 451, 452, 455, 456, 458, 459, 461, 464, 472, 476, 484, 500, 505, 506, 507, 548], "filemod": [16, 428, 432, 433, 435, 472, 548], "format": [16, 79, 80, 81, 82, 83, 84, 86, 89, 97, 99, 100, 102, 104, 105, 113, 114, 115, 116, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 171, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 193, 206, 220, 228, 256, 291, 313, 335, 336, 343, 353, 355, 362, 363, 364, 365, 366, 368, 370, 378, 380, 381, 384, 393, 405, 407, 410, 414, 416, 417, 419, 420, 425, 427, 428, 429, 431, 432, 433, 435, 437, 439, 440, 441, 444, 445, 447, 451, 454, 456, 457, 459, 463, 464, 465, 466, 472, 474, 476, 482, 484, 485, 486, 487, 490, 491, 492, 493, 494, 501, 542, 543, 547, 548, 549], "datefmt": [16, 428, 432, 433, 435, 472, 548], "outdir": [16, 78, 88, 428, 432, 433, 435, 472], "n_job": [16, 88, 116, 117, 120, 123, 154, 303, 419, 428, 432, 433, 435, 441, 455, 472], "1": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 62, 64, 65, 69, 70, 71, 72, 74, 79, 82, 83, 84, 86, 90, 91, 96, 97, 99, 100, 104, 105, 108, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 153, 158, 161, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 229, 231, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 265, 267, 268, 272, 273, 281, 282, 294, 295, 301, 302, 303, 312, 313, 315, 316, 339, 341, 344, 345, 349, 351, 354, 355, 357, 358, 361, 362, 364, 365, 366, 368, 369, 371, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 390, 391, 394, 395, 397, 398, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 469, 472, 473, 474, 476, 480, 481, 482, 485, 486, 488, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 549, 550, 551], "datasets_fil": [16, 428, 432, 433, 435, 472], "models_fil": [16, 428, 432, 433, 435, 472], "observationsconfig": 16, "datastor": [16, 85, 91, 158, 281, 282, 360, 364, 369, 386, 390, 396, 407, 408, 410, 411, 413, 419, 420, 424, 427, 428, 429, 432, 433, 435, 437, 439, 443, 446, 448, 455, 460, 465, 466, 470, 472, 488, 495, 497, 498, 548], "posixpath": [16, 319], "home": [16, 319, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 514, 520, 523, 536, 542, 543], "runner": [16, 319, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 514, 520, 523, 536, 542, 543], "hess": [16, 55, 65, 78, 79, 82, 84, 86, 91, 92, 96, 104, 105, 116, 121, 130, 131, 138, 140, 158, 164, 265, 281, 282, 355, 362, 363, 368, 370, 374, 383, 386, 390, 393, 395, 398, 409, 410, 413, 414, 422, 424, 425, 427, 428, 429, 433, 435, 437, 438, 446, 448, 450, 451, 452, 453, 455, 460, 461, 464, 466, 467, 470, 472, 473, 476, 485, 486, 488, 490, 491, 492, 494, 495, 497, 498], "dr1": [16, 63, 78, 79, 82, 84, 86, 91, 140, 158, 249, 281, 282, 355, 362, 374, 390, 422, 424, 427, 428, 433, 435, 446, 455, 460, 470, 472, 473, 485, 488, 490, 491, 492, 494, 495, 497, 498, 502, 534], "obs_id": [16, 78, 83, 84, 85, 86, 91, 131, 281, 282, 364, 366, 376, 381, 390, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 439, 440, 445, 446, 447, 453, 455, 460, 463, 465, 466, 470, 472, 473, 497], "obs_fil": [16, 428, 432, 433, 435, 472], "obs_con": [16, 428, 432, 433, 435, 472], "spatialcircleconfig": 16, "frame": [16, 79, 81, 86, 89, 90, 91, 97, 100, 104, 105, 117, 128, 148, 158, 161, 171, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255, 281, 282, 317, 330, 354, 355, 363, 365, 368, 378, 395, 396, 398, 399, 400, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 472, 473, 474, 492, 497, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512], "lon": [16, 47, 86, 89, 91, 97, 100, 104, 112, 117, 119, 123, 136, 137, 143, 148, 151, 154, 178, 179, 181, 184, 187, 189, 190, 191, 202, 203, 207, 214, 215, 218, 230, 232, 240, 241, 243, 245, 251, 253, 255, 285, 286, 289, 311, 354, 355, 365, 368, 373, 377, 398, 428, 432, 433, 435, 437, 441, 445, 446, 451, 452, 454, 455, 456, 459, 460, 464, 472, 473, 474, 486, 500, 501, 505, 506, 507, 508, 509, 510, 511], "lat": [16, 47, 58, 60, 61, 63, 69, 71, 72, 74, 79, 82, 86, 89, 91, 97, 100, 104, 112, 116, 117, 119, 123, 136, 137, 143, 148, 151, 154, 178, 179, 181, 184, 187, 189, 190, 191, 202, 203, 207, 214, 215, 218, 230, 232, 240, 241, 243, 245, 251, 253, 255, 260, 265, 285, 286, 289, 311, 354, 355, 362, 363, 364, 365, 366, 367, 373, 374, 377, 384, 386, 391, 394, 399, 412, 413, 414, 422, 425, 428, 431, 432, 433, 435, 437, 441, 445, 446, 451, 452, 454, 455, 456, 457, 458, 459, 460, 467, 468, 472, 473, 474, 476, 483, 484, 485, 486, 488, 493, 500, 501, 505, 506, 507, 508, 509, 510, 511, 545, 552], "radiu": [16, 17, 18, 21, 22, 24, 25, 27, 33, 34, 38, 43, 44, 50, 51, 52, 53, 54, 70, 78, 79, 86, 91, 97, 100, 104, 105, 112, 117, 118, 139, 145, 147, 148, 149, 151, 153, 161, 163, 179, 189, 191, 192, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 253, 255, 281, 282, 315, 355, 368, 370, 377, 378, 395, 404, 405, 409, 419, 423, 424, 427, 428, 430, 431, 432, 433, 435, 437, 439, 440, 445, 446, 448, 450, 452, 454, 455, 457, 458, 459, 460, 463, 472, 473, 474, 481, 482, 495, 497, 498, 501, 505, 506, 507, 510, 511], "obs_tim": [16, 428, 432, 433, 435, 472], "timerangeconfig": 16, "start": [16, 53, 79, 82, 84, 85, 86, 87, 89, 95, 120, 128, 188, 205, 206, 213, 217, 219, 220, 221, 228, 236, 242, 254, 257, 354, 355, 357, 359, 361, 362, 363, 364, 367, 368, 370, 371, 379, 380, 382, 383, 384, 388, 389, 390, 391, 393, 398, 407, 410, 411, 412, 413, 414, 419, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 450, 451, 456, 459, 463, 464, 468, 472, 474, 475, 488, 492, 546], "stop": [16, 52, 79, 82, 84, 85, 86, 87, 95, 120, 123, 188, 205, 206, 213, 217, 219, 220, 221, 228, 236, 242, 254, 257, 364, 390, 419, 428, 432, 433, 435, 446, 448, 453, 464, 472], "required_irf": [16, 78, 428, 429, 432, 433, 435, 472], "aeff": [16, 78, 83, 84, 100, 105, 138, 164, 172, 364, 366, 367, 401, 402, 424, 427, 428, 429, 432, 433, 435, 437, 446, 454, 455, 463, 465, 466, 472, 473, 490, 495, 497, 498, 547], "edisp": [16, 78, 83, 84, 91, 97, 100, 101, 104, 105, 135, 136, 137, 140, 144, 158, 164, 165, 168, 169, 243, 281, 282, 355, 364, 365, 366, 367, 370, 400, 402, 405, 411, 412, 413, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 443, 446, 447, 452, 455, 460, 463, 464, 465, 466, 472, 484, 492, 493, 547], "psf": [16, 78, 83, 84, 91, 97, 98, 100, 103, 104, 105, 106, 107, 137, 139, 144, 145, 146, 147, 148, 149, 151, 158, 165, 174, 189, 206, 228, 243, 281, 282, 354, 360, 364, 365, 366, 367, 370, 393, 395, 399, 400, 401, 402, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 419, 423, 424, 427, 428, 429, 431, 432, 433, 435, 437, 439, 440, 443, 445, 452, 455, 457, 460, 463, 465, 466, 472, 473, 484, 486, 488, 493, 496, 501, 547], "bkg": [16, 78, 83, 84, 97, 101, 102, 104, 105, 132, 133, 134, 164, 171, 214, 376, 400, 402, 407, 423, 427, 428, 432, 433, 435, 436, 439, 440, 443, 448, 452, 454, 455, 458, 463, 465, 466, 472, 473, 484, 491, 547, 549, 550, 551], "datasetsconfig": 16, "type": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 80, 83, 85, 86, 91, 94, 95, 96, 97, 99, 112, 113, 114, 115, 117, 123, 152, 158, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 283, 313, 360, 363, 364, 365, 366, 368, 369, 370, 373, 377, 378, 380, 382, 384, 385, 390, 398, 405, 411, 412, 413, 419, 424, 425, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 472, 473, 474, 476, 486, 488, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548], "1d": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 104, 105, 117, 136, 137, 146, 160, 177, 179, 308, 347, 360, 364, 365, 367, 368, 369, 370, 373, 374, 375, 386, 396, 398, 399, 400, 401, 405, 407, 410, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 431, 435, 442, 447, 452, 453, 455, 457, 459, 460, 461, 463, 464, 472, 484, 486, 488, 493, 496, 501, 545, 547], "stack": [16, 79, 82, 87, 95, 96, 97, 99, 100, 104, 105, 112, 113, 115, 136, 137, 143, 148, 151, 154, 178, 179, 180, 181, 186, 187, 190, 191, 194, 197, 199, 253, 324, 354, 366, 369, 370, 376, 381, 395, 398, 399, 402, 405, 410, 411, 416, 417, 419, 424, 428, 432, 436, 437, 445, 448, 452, 453, 455, 460, 461, 472, 473, 485, 486, 495, 498, 547], "geom": [16, 23, 79, 97, 100, 104, 105, 107, 112, 113, 115, 117, 123, 136, 137, 146, 148, 151, 158, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 202, 203, 206, 207, 214, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 255, 365, 367, 369, 402, 405, 414, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 472, 473, 474, 486, 495, 497, 498, 499, 500, 501, 504, 506, 507, 508, 509], "geomconfig": 16, "wcsconfig": 16, "skydir": [16, 79, 97, 100, 104, 105, 137, 148, 158, 177, 178, 179, 181, 187, 189, 190, 191, 427, 428, 429, 432, 433, 435, 437, 438, 439, 440, 443, 445, 448, 450, 452, 454, 455, 456, 457, 459, 464, 465, 472, 473, 495, 497, 498, 499, 501, 506, 507, 508, 509], "skycoordconfig": 16, "binsiz": [16, 428, 432, 433, 435, 445, 472, 473], "angl": [16, 17, 18, 21, 22, 24, 25, 27, 33, 34, 38, 66, 79, 85, 86, 91, 97, 100, 108, 112, 119, 123, 132, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 151, 154, 161, 162, 164, 166, 176, 177, 179, 184, 186, 189, 191, 192, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 253, 255, 258, 311, 341, 354, 360, 368, 370, 377, 381, 393, 395, 396, 397, 414, 423, 424, 427, 430, 436, 439, 440, 446, 451, 456, 457, 459, 460, 463, 464, 488, 493, 497, 500, 501, 505, 506, 507, 510, 511, 547], "02": [16, 65, 79, 89, 97, 99, 100, 104, 105, 114, 146, 153, 158, 178, 179, 181, 183, 187, 188, 190, 191, 390, 391, 422, 423, 425, 427, 428, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 451, 453, 454, 455, 456, 457, 458, 459, 462, 464, 469, 472, 473, 474, 495, 497, 498, 504, 505, 506, 507, 513], "deg": [16, 33, 34, 38, 47, 65, 79, 81, 83, 86, 89, 91, 97, 100, 104, 105, 106, 107, 108, 112, 117, 118, 123, 128, 129, 137, 139, 140, 145, 146, 147, 148, 149, 150, 151, 153, 161, 162, 164, 166, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 206, 207, 215, 218, 228, 232, 240, 241, 243, 281, 282, 315, 349, 354, 355, 365, 368, 370, 377, 378, 381, 390, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 472, 473, 474, 485, 486, 488, 490, 492, 495, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512], "width": [16, 27, 66, 79, 83, 86, 97, 100, 104, 105, 106, 108, 118, 123, 135, 136, 137, 140, 143, 146, 148, 151, 153, 158, 163, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 203, 206, 207, 215, 217, 218, 228, 230, 240, 241, 243, 245, 251, 253, 255, 344, 345, 370, 377, 415, 428, 429, 432, 433, 435, 437, 438, 439, 440, 441, 443, 445, 448, 450, 451, 452, 454, 455, 456, 457, 459, 464, 465, 472, 473, 474, 495, 497, 498, 499, 500, 501, 505, 506, 507, 509, 510, 511], "widthconfig": 16, "5": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 52, 53, 65, 79, 83, 86, 97, 98, 100, 103, 104, 105, 108, 112, 115, 116, 118, 120, 122, 128, 129, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 158, 161, 178, 179, 181, 183, 187, 189, 190, 191, 200, 201, 204, 207, 208, 210, 211, 212, 215, 216, 218, 220, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 259, 283, 315, 344, 345, 349, 351, 354, 355, 358, 359, 361, 365, 366, 368, 369, 370, 371, 373, 377, 378, 379, 385, 390, 393, 395, 397, 398, 405, 407, 409, 410, 412, 413, 414, 418, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 476, 481, 482, 485, 492, 495, 497, 498, 499, 500, 501, 505, 506, 507, 508, 510, 514, 515, 520, 522, 523, 524, 528, 529, 536, 537, 538, 539, 541, 547, 549, 550], "height": [16, 29, 83, 86, 89, 117, 316, 428, 432, 433, 435, 441, 445, 448, 450, 456, 457, 459, 472, 497, 501], "binsize_irf": [16, 428, 432, 433, 435, 445, 472], "select": [16, 78, 79, 82, 83, 84, 85, 86, 87, 91, 95, 97, 100, 104, 105, 158, 165, 178, 179, 180, 181, 183, 188, 190, 191, 197, 199, 206, 228, 243, 253, 265, 350, 351, 364, 366, 367, 368, 369, 370, 374, 376, 378, 381, 386, 388, 394, 397, 405, 409, 423, 427, 429, 430, 432, 433, 435, 436, 438, 439, 440, 443, 447, 448, 452, 453, 455, 456, 457, 460, 463, 465, 466, 468, 474, 486, 488, 492, 493, 497, 546, 548], "selectionconfig": 16, "offset_max": [16, 79, 154, 164, 170, 173, 428, 432, 433, 435, 437, 443, 448, 455, 472, 473, 495, 498], "ax": [16, 19, 20, 26, 64, 65, 79, 96, 97, 100, 104, 105, 106, 112, 113, 115, 117, 118, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 158, 165, 168, 169, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 267, 268, 341, 342, 346, 347, 348, 349, 350, 351, 354, 363, 373, 396, 400, 405, 411, 412, 413, 416, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 472, 473, 474, 484, 486, 488, 490, 495, 497, 498, 499, 500, 505, 506, 507, 511, 514, 542, 543, 547], "energyaxesconfig": 16, "energi": [16, 19, 20, 26, 44, 50, 51, 52, 53, 58, 61, 62, 65, 69, 71, 72, 76, 78, 79, 84, 91, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 158, 160, 164, 165, 167, 168, 169, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 261, 263, 349, 350, 354, 360, 363, 365, 366, 367, 368, 369, 370, 372, 373, 376, 378, 382, 386, 390, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 424, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 451, 452, 455, 456, 465, 466, 468, 472, 473, 474, 483, 484, 485, 488, 493, 496, 497, 499, 500, 501, 508, 514, 520, 523, 525, 528, 533, 543, 545, 546, 547, 549], "energyaxisconfig": 16, "min": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 86, 97, 116, 118, 120, 130, 158, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 272, 311, 369, 370, 377, 382, 390, 405, 413, 428, 430, 432, 433, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 452, 453, 454, 455, 456, 459, 460, 461, 464, 472, 473, 476, 497, 524, 527, 533], "tev": [16, 19, 20, 26, 44, 52, 53, 64, 65, 69, 72, 79, 91, 96, 97, 100, 104, 105, 108, 115, 116, 128, 129, 132, 133, 135, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 158, 178, 179, 181, 187, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 243, 244, 246, 247, 248, 249, 252, 256, 258, 259, 281, 282, 303, 349, 355, 365, 377, 378, 381, 382, 390, 423, 424, 425, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 482, 485, 486, 492, 493, 495, 497, 498, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546], "max": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 84, 86, 97, 106, 116, 118, 120, 148, 150, 151, 154, 158, 164, 191, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 311, 362, 370, 377, 382, 390, 401, 402, 403, 405, 407, 419, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 441, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 465, 472, 473, 476, 495, 497, 498, 505, 524, 527, 533, 550], "nbin": [16, 117, 138, 140, 146, 148, 180, 183, 188, 191, 315, 316, 370, 423, 427, 428, 429, 432, 433, 435, 436, 437, 439, 440, 441, 445, 446, 448, 452, 454, 455, 456, 459, 464, 465, 466, 472, 492, 495, 497, 498, 501], "energy_tru": [16, 91, 97, 100, 104, 105, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 158, 165, 168, 176, 177, 183, 186, 189, 281, 282, 354, 355, 367, 419, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 443, 445, 446, 447, 448, 452, 454, 455, 456, 457, 459, 460, 463, 464, 465, 472, 473, 492, 493, 495, 497, 498, 501], "20": [16, 38, 79, 83, 85, 86, 97, 100, 104, 105, 139, 140, 145, 147, 149, 158, 178, 179, 181, 187, 190, 191, 281, 355, 358, 359, 360, 362, 367, 369, 372, 374, 379, 416, 423, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 444, 445, 446, 447, 448, 450, 451, 453, 455, 456, 458, 459, 461, 463, 466, 472, 473, 474, 475, 476, 495, 497, 498, 499, 505, 506, 507, 510, 511, 520, 523, 528, 534, 549], "16": [16, 24, 53, 65, 89, 104, 105, 177, 358, 362, 371, 374, 375, 398, 413, 418, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 499, 541, 549, 550], "map_select": [16, 428, 432, 433, 435, 472], "count": [16, 79, 87, 95, 97, 100, 101, 102, 103, 104, 105, 107, 108, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 127, 153, 155, 158, 159, 160, 165, 167, 171, 175, 178, 179, 181, 182, 183, 187, 190, 191, 197, 199, 206, 228, 267, 268, 269, 270, 275, 276, 279, 280, 305, 339, 341, 350, 352, 360, 362, 365, 366, 367, 369, 370, 374, 378, 396, 397, 400, 402, 405, 407, 408, 414, 415, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 441, 443, 445, 446, 447, 448, 452, 453, 455, 456, 457, 461, 465, 470, 472, 473, 474, 486, 488, 492, 495, 496, 497, 498, 501, 547, 548, 549, 551], "exposur": [16, 79, 84, 97, 100, 101, 103, 104, 105, 112, 123, 127, 136, 137, 143, 146, 148, 151, 153, 158, 165, 168, 169, 170, 172, 173, 174, 243, 276, 279, 280, 360, 363, 364, 365, 366, 367, 378, 397, 402, 410, 412, 413, 414, 416, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 443, 446, 447, 452, 455, 456, 457, 465, 472, 473, 484, 493, 496, 501, 550], "background": [16, 65, 78, 79, 84, 88, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 112, 113, 115, 122, 132, 133, 134, 144, 153, 155, 156, 158, 159, 160, 161, 163, 164, 165, 171, 208, 214, 253, 260, 267, 268, 276, 277, 278, 279, 280, 350, 354, 360, 363, 366, 367, 368, 370, 374, 375, 378, 386, 391, 394, 395, 396, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 432, 434, 435, 437, 440, 441, 443, 445, 446, 447, 448, 451, 452, 453, 454, 456, 457, 461, 465, 466, 468, 473, 484, 486, 487, 500, 546, 547, 548, 550, 551], "backgroundconfig": 16, "exclus": [16, 79, 153, 155, 160, 161, 162, 163, 166, 177, 189, 360, 368, 370, 401, 403, 424, 432, 435, 455, 495, 497], "safe_mask": [16, 97, 104, 428, 432, 433, 435, 472], "safemaskconfig": 16, "on_region": [16, 97, 100, 161, 423, 424, 427, 428, 429, 430, 432, 433, 435, 437, 439, 440, 445, 446, 448, 452, 472, 497], "containment_correct": [16, 97, 100, 165, 423, 427, 428, 429, 432, 433, 435, 437, 445, 446, 448, 452, 455, 472], "fitconfig": 16, "fit_rang": [16, 428, 432, 433, 435, 472], "energyrangeconfig": 16, "flux_point": [16, 64, 65, 69, 71, 72, 74, 75, 76, 93, 96, 113, 115, 116, 366, 423, 425, 427, 428, 432, 433, 435, 437, 448, 451, 452, 472, 473, 474], "fluxpointsconfig": 16, "selection_opt": [16, 108, 110, 111, 112, 116, 117, 119, 120, 121, 122, 123, 405, 427, 428, 432, 433, 435, 436, 437, 441, 445, 446, 447, 448, 457, 465, 472], "excess_map": [16, 428, 432, 433, 435, 472], "excessmapconfig": 16, "correlation_radiu": [16, 112, 128, 129, 428, 432, 433, 435, 448, 465, 472, 486], "energy_edg": [16, 108, 110, 112, 116, 117, 120, 123, 128, 129, 131, 183, 303, 378, 427, 428, 431, 432, 433, 435, 436, 437, 438, 441, 445, 446, 447, 448, 465, 472, 473, 486], "light_curv": [16, 220, 374, 414, 422, 428, 432, 433, 435, 445, 449, 472, 543], "lightcurveconfig": 16, "time_interv": [16, 79, 82, 84, 87, 120, 428, 432, 433, 435, 440, 445, 446, 472], "gammapybaseconfig": 16, "new": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 82, 83, 84, 86, 87, 96, 97, 99, 100, 104, 105, 113, 114, 115, 116, 120, 130, 132, 133, 134, 135, 138, 140, 142, 145, 150, 161, 162, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 206, 228, 243, 253, 283, 307, 332, 339, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 406, 409, 435, 444, 451, 452, 456, 458, 459, 485, 486, 488, 533, 547], "pars": [16, 80, 81, 99, 114, 177, 186, 355, 368, 423, 430, 432, 435, 437, 443, 447, 457, 463, 548], "valid": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 101, 113, 114, 117, 150, 164, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 283, 301, 353, 354, 363, 367, 370, 371, 380, 399, 407, 416, 424, 427, 453, 455, 456, 459, 464, 486, 488, 493, 547], "input": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 80, 82, 83, 86, 97, 99, 100, 103, 108, 110, 112, 113, 114, 115, 116, 119, 120, 123, 124, 125, 126, 127, 129, 131, 136, 137, 139, 146, 147, 148, 149, 150, 151, 153, 155, 159, 161, 163, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 197, 199, 206, 220, 228, 254, 255, 256, 283, 294, 304, 307, 324, 326, 347, 349, 360, 362, 364, 365, 366, 367, 368, 369, 370, 375, 390, 400, 405, 408, 415, 419, 430, 439, 440, 448, 456, 461, 486, 500, 501, 549], "keyword": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 78, 79, 80, 82, 83, 84, 86, 90, 96, 97, 99, 100, 104, 105, 114, 115, 117, 118, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 266, 295, 303, 304, 323, 335, 337, 338, 341, 342, 343, 347, 348, 349, 350, 351, 381, 401, 405, 408, 416, 417, 429, 439, 440, 452, 456, 465, 486, 501, 512], "rais": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 80, 82, 83, 86, 87, 95, 99, 114, 180, 185, 206, 208, 228, 251, 252, 253, 255, 283, 332, 354, 368, 377, 378, 381, 382, 399, 416, 419, 420, 440], "validationerror": [16, 80, 99, 114, 381], "pydantic_cor": [16, 80, 99, 114], "cannot": [16, 65, 80, 83, 86, 90, 99, 106, 113, 114, 115, 193, 275, 322, 351, 357, 367, 368, 419, 454, 458, 459, 486, 501], "form": [16, 80, 83, 86, 97, 99, 114, 148, 151, 186, 295, 354, 360, 364, 369, 377, 379, 381, 391, 413, 457, 461, 485, 493, 506, 516, 546], "self": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 82, 83, 86, 99, 113, 114, 115, 186, 187, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 243, 244, 246, 247, 248, 249, 252, 256, 354, 355, 365, 366, 368, 371, 377, 378, 381, 382, 401, 456, 459], "explicitli": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 283, 364, 376, 385, 395, 440, 458, 486, 500, 552], "posit": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 86, 89, 90, 91, 97, 98, 99, 100, 103, 113, 114, 115, 116, 117, 120, 121, 123, 136, 137, 143, 146, 148, 151, 161, 164, 166, 175, 177, 178, 179, 181, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 253, 255, 265, 267, 268, 281, 282, 285, 286, 289, 290, 342, 354, 361, 365, 367, 368, 377, 378, 379, 380, 395, 397, 402, 405, 407, 420, 423, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 466, 474, 484, 485, 486, 488, 493, 494, 497, 498, 499, 501, 505, 506, 507, 509, 524, 550], "onli": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 68, 70, 71, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 116, 120, 123, 136, 137, 141, 143, 148, 151, 154, 160, 165, 176, 177, 178, 179, 181, 186, 187, 188, 189, 190, 191, 196, 197, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 253, 254, 255, 267, 268, 283, 303, 329, 351, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 387, 395, 397, 401, 405, 407, 408, 413, 417, 419, 420, 424, 425, 427, 428, 429, 432, 433, 435, 436, 438, 439, 440, 441, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 473, 476, 484, 486, 488, 492, 495, 498, 501, 543, 547, 548, 549, 550], "allow": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 80, 83, 86, 99, 108, 113, 114, 115, 122, 123, 148, 151, 177, 306, 354, 355, 357, 359, 360, 361, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 396, 398, 399, 400, 401, 402, 405, 407, 414, 415, 416, 419, 423, 427, 438, 447, 452, 453, 454, 455, 456, 457, 473, 484, 486, 488, 495, 500, 501, 545, 546, 548, 553], "field": [16, 42, 50, 51, 54, 79, 80, 83, 86, 99, 114, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 149, 150, 155, 214, 229, 285, 289, 341, 354, 368, 380, 381, 390, 395, 400, 407, 414, 427, 429, 433, 435, 437, 439, 454, 455, 457, 463, 464, 488, 490, 491, 492, 493, 494, 495, 497, 524, 547], "model_computed_field": [16, 80, 99, 114], "classvar": [16, 80, 99, 114], "computedfieldinfo": [16, 80, 99, 114], "A": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 84, 85, 86, 87, 94, 95, 96, 97, 99, 100, 103, 104, 105, 113, 114, 115, 123, 128, 129, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 251, 252, 253, 254, 255, 256, 267, 268, 276, 283, 292, 343, 344, 345, 347, 348, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 392, 394, 398, 399, 400, 401, 402, 405, 407, 408, 411, 412, 413, 414, 416, 418, 419, 420, 423, 424, 427, 429, 431, 435, 437, 438, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 471, 473, 474, 476, 484, 485, 486, 488, 489, 497, 498, 500, 501, 503, 505, 542, 543, 546, 547, 550], "comput": [16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 79, 80, 82, 84, 89, 91, 95, 96, 97, 99, 100, 104, 105, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 164, 165, 167, 170, 171, 172, 173, 175, 177, 178, 179, 181, 183, 186, 187, 188, 189, 190, 191, 192, 195, 200, 201, 204, 206, 208, 210, 211, 212, 216, 220, 222, 223, 225, 228, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 258, 259, 265, 266, 267, 268, 271, 272, 273, 274, 279, 282, 286, 287, 290, 354, 363, 364, 365, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 382, 384, 386, 387, 391, 393, 395, 396, 397, 398, 401, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 429, 431, 435, 436, 440, 441, 444, 445, 446, 448, 450, 452, 455, 458, 459, 460, 461, 464, 465, 466, 472, 474, 476, 484, 486, 488, 493, 497, 524, 546, 547, 548, 549, 550, 551, 552], "correspond": [16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 45, 80, 83, 85, 86, 95, 97, 99, 100, 104, 105, 113, 114, 115, 116, 117, 118, 120, 121, 123, 135, 136, 137, 143, 146, 148, 150, 151, 152, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 200, 201, 204, 208, 210, 211, 212, 215, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 281, 347, 364, 365, 366, 367, 374, 375, 378, 380, 382, 399, 402, 424, 425, 427, 428, 429, 435, 439, 440, 445, 451, 453, 455, 456, 459, 460, 461, 463, 464, 465, 472, 474, 484, 485, 486, 488, 500, 501, 511, 514, 546, 547, 552], "model_config": [16, 80, 99, 114, 432, 472], "configdict": [16, 80, 99, 114], "arbitrary_types_allow": [16, 80, 99, 114, 381], "extra": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 47, 79, 80, 99, 114, 176, 177, 182, 186, 187, 189, 195, 251, 252, 281, 353, 355, 361, 362, 368, 370, 371, 374, 380, 381, 410, 413, 414, 456, 457, 488, 501], "forbid": [16, 80, 99, 114], "json_encod": 16, "lambda": [16, 65, 211, 212, 347, 451, 453, 463, 518, 550], "use_enum_valu": [16, 80, 99, 114], "validate_assign": [16, 80, 99, 114, 381], "validate_default": [16, 80, 99, 114], "should": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 97, 99, 100, 103, 104, 105, 106, 113, 114, 115, 116, 120, 124, 125, 126, 130, 136, 137, 140, 146, 148, 151, 163, 168, 169, 174, 176, 177, 178, 179, 181, 183, 185, 186, 187, 189, 190, 191, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 283, 329, 343, 344, 345, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 383, 384, 386, 388, 389, 390, 395, 397, 419, 429, 435, 438, 439, 440, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 465, 484, 486, 488, 493, 500, 548, 549, 551, 552], "conform": [16, 80, 99, 114, 456], "pydant": [16, 80, 99, 114, 353, 399, 418, 420], "model_extra": [16, 80, 99, 114], "get": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 81, 83, 84, 86, 89, 91, 95, 97, 99, 101, 102, 104, 108, 112, 114, 116, 117, 120, 121, 123, 128, 130, 135, 136, 137, 143, 148, 151, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 194, 197, 199, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 291, 307, 354, 355, 359, 360, 361, 362, 363, 364, 368, 369, 371, 378, 380, 381, 382, 384, 385, 387, 388, 390, 391, 394, 396, 411, 412, 413, 414, 423, 428, 430, 431, 435, 436, 437, 443, 446, 451, 452, 453, 454, 455, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 476, 484, 488, 501, 547, 551], "dure": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 52, 53, 79, 80, 81, 84, 90, 97, 99, 100, 104, 105, 114, 155, 265, 355, 362, 366, 370, 373, 374, 376, 379, 380, 381, 382, 383, 384, 399, 402, 419, 420, 428, 429, 439, 445, 446, 452, 455, 457, 461, 473, 484, 485, 547, 551], "return": [16, 19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 280, 281, 282, 283, 285, 287, 289, 290, 294, 296, 301, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 335, 336, 337, 338, 339, 342, 344, 345, 347, 349, 350, 360, 364, 365, 366, 367, 368, 369, 377, 378, 381, 382, 398, 399, 402, 405, 408, 414, 416, 427, 429, 437, 441, 446, 447, 451, 452, 453, 455, 456, 457, 459, 461, 474, 478, 500, 501, 533, 550], "model_field": [16, 80, 99, 114], "fieldinfo": [16, 80, 99, 114], "annot": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 343, 381, 453, 505], "requir": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 43, 44, 78, 79, 80, 81, 83, 84, 86, 90, 97, 99, 100, 104, 105, 114, 115, 118, 123, 132, 133, 139, 147, 155, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 283, 329, 333, 334, 352, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 382, 383, 385, 387, 393, 398, 399, 400, 401, 406, 407, 409, 410, 411, 412, 415, 416, 417, 424, 429, 433, 436, 444, 446, 447, 448, 452, 454, 456, 457, 459, 463, 473, 486, 488, 501], "fals": [16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 78, 79, 80, 82, 83, 84, 86, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 112, 113, 114, 115, 116, 120, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 158, 165, 168, 169, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 283, 313, 321, 323, 351, 354, 368, 370, 377, 382, 413, 414, 420, 423, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 472, 473, 474, 485, 495, 497, 498, 512, 524, 533], "metadata": [16, 79, 80, 81, 83, 84, 86, 99, 101, 113, 114, 115, 132, 133, 134, 138, 139, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191, 336, 358, 360, 371, 420, 428, 439, 459, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "__fields__": [16, 80, 99, 114, 381], "model_fields_set": [16, 80, 99, 114], "have": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 80, 83, 86, 90, 95, 99, 102, 113, 114, 115, 116, 120, 128, 129, 135, 136, 137, 146, 148, 151, 158, 160, 172, 176, 177, 178, 179, 181, 185, 186, 187, 189, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 283, 307, 313, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 365, 367, 368, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 402, 405, 407, 408, 411, 413, 414, 415, 416, 417, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 472, 473, 474, 476, 484, 485, 486, 488, 499, 500, 501, 511, 522, 545, 548, 551, 552], "been": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 95, 99, 112, 114, 150, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 283, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 385, 387, 401, 402, 405, 407, 408, 414, 415, 416, 417, 418, 419, 420, 428, 438, 446, 447, 448, 456, 459, 460, 463, 465, 472, 485, 533, 552], "instanc": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 80, 81, 82, 83, 84, 86, 87, 99, 110, 114, 115, 116, 118, 120, 121, 150, 152, 160, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 301, 307, 341, 343, 344, 345, 348, 350, 354, 360, 365, 366, 369, 370, 376, 378, 381, 405, 425, 427, 430, 441, 451, 453, 455, 457, 458, 459, 474, 478, 488, 500, 501, 524], "were": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 124, 272, 354, 359, 360, 361, 362, 367, 369, 370, 371, 372, 373, 374, 375, 377, 379, 382, 384, 394, 397, 398, 399, 400, 401, 402, 405, 408, 413, 414, 417, 436, 448, 457, 461, 463, 551], "fill": [16, 80, 81, 83, 86, 97, 99, 100, 103, 104, 105, 114, 135, 146, 177, 178, 179, 181, 187, 189, 190, 191, 256, 354, 362, 363, 367, 370, 374, 380, 383, 384, 399, 406, 413, 416, 424, 439, 440, 451, 454, 455, 457, 464, 473, 500], "classmethod": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 95, 96, 97, 99, 100, 104, 105, 113, 114, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 381], "construct": [16, 80, 99, 114, 183, 222, 223, 320, 501, 547], "_fields_set": [16, 80, 99, 114], "ani": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 86, 99, 110, 114, 120, 137, 160, 178, 179, 181, 186, 187, 189, 190, 191, 283, 306, 339, 353, 354, 355, 357, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 380, 381, 383, 386, 387, 388, 389, 390, 394, 395, 413, 414, 415, 420, 428, 437, 438, 441, 445, 448, 452, 455, 456, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 485, 486, 498, 500, 501, 516, 548, 552], "includ": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 78, 79, 80, 83, 84, 86, 99, 114, 120, 146, 152, 154, 155, 161, 162, 166, 176, 177, 186, 189, 229, 291, 353, 354, 360, 362, 365, 366, 367, 368, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 395, 397, 402, 413, 418, 419, 420, 423, 436, 438, 439, 441, 447, 450, 451, 453, 455, 457, 458, 459, 463, 465, 476, 478, 484, 486, 487, 498, 500, 545, 549, 552], "abstractsetintstr": [16, 80, 99, 114], "mappingintstrani": [16, 80, 99, 114], "exclud": [16, 80, 96, 97, 99, 100, 104, 105, 114, 119, 159, 161, 197, 199, 206, 228, 360, 417, 455, 457, 497, 498], "deep": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 82, 83, 86, 94, 95, 96, 97, 99, 100, 104, 105, 114, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 435], "deprec": [16, 79, 80, 81, 84, 99, 114, 116, 117, 120, 196, 198, 396, 405, 418, 419, 420, 512], "now": [16, 78, 80, 84, 94, 99, 113, 114, 115, 188, 229, 354, 357, 359, 360, 361, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 380, 381, 382, 389, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 430, 432, 433, 435, 436, 438, 439, 440, 441, 443, 445, 446, 447, 448, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 485, 486, 497, 535, 539, 540, 541, 548, 550, 551, 552], "model_copi": [16, 80, 99, 114, 459], "instead": [16, 19, 20, 26, 80, 81, 83, 86, 97, 99, 100, 104, 105, 107, 114, 165, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 354, 355, 357, 359, 361, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 383, 385, 386, 388, 395, 398, 401, 402, 415, 419, 429, 435, 439, 443, 445, 447, 448, 451, 452, 454, 455, 456, 459, 461, 485, 492, 493, 500, 501, 548], "If": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 118, 120, 123, 127, 128, 130, 135, 136, 137, 143, 146, 148, 151, 152, 154, 155, 158, 160, 161, 164, 165, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 266, 280, 283, 295, 296, 301, 340, 343, 347, 348, 349, 350, 354, 355, 356, 357, 359, 361, 362, 367, 368, 370, 371, 372, 375, 376, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 396, 413, 414, 415, 423, 424, 425, 427, 429, 430, 432, 435, 437, 440, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 474, 486, 488, 499, 501, 507, 509, 522, 548, 549, 550, 551], "you": [16, 19, 20, 26, 65, 78, 79, 80, 83, 86, 89, 96, 99, 102, 114, 115, 128, 133, 135, 138, 161, 178, 179, 181, 187, 190, 191, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 258, 265, 353, 354, 355, 356, 357, 359, 361, 364, 368, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 405, 413, 414, 415, 424, 425, 427, 428, 429, 430, 432, 433, 435, 437, 439, 440, 443, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 484, 485, 488, 491, 499, 522, 545, 548, 549, 550, 551, 552], "py": [16, 80, 99, 114, 354, 355, 361, 368, 371, 373, 375, 383, 384, 390, 395, 397, 398, 406, 411, 415, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 488, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548], "model_dump": [16, 80, 99, 114], "round_trip": [16, 80, 99, 114], "model_valid": [16, 80, 99, 114], "specifi": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 83, 84, 86, 87, 91, 97, 99, 100, 104, 105, 108, 110, 113, 114, 115, 116, 118, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 153, 164, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 206, 220, 228, 265, 283, 285, 289, 294, 341, 364, 371, 376, 379, 387, 398, 401, 405, 429, 432, 435, 438, 439, 441, 443, 452, 453, 454, 455, 456, 458, 459, 463, 473, 484, 486, 499], "which": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 43, 56, 57, 59, 65, 68, 70, 76, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 99, 100, 102, 104, 105, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 128, 129, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 158, 159, 164, 165, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 195, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 259, 265, 267, 268, 272, 273, 274, 281, 295, 305, 315, 316, 332, 341, 343, 348, 350, 353, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 391, 395, 396, 397, 399, 400, 401, 402, 405, 408, 414, 416, 419, 423, 424, 427, 430, 431, 432, 433, 435, 438, 439, 440, 441, 444, 445, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 478, 479, 484, 485, 486, 488, 490, 491, 492, 494, 495, 497, 499, 500, 501, 502, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 545, 546, 547, 548, 549, 550, 551], "pair": [16, 80, 97, 99, 100, 104, 105, 113, 114, 115, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 370], "overrid": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 322, 365, 427, 429, 437, 441], "incex": [16, 80, 99, 114], "by_alia": [16, 80, 99, 114], "exclude_unset": [16, 80, 99, 114], "exclude_default": [16, 80, 99, 114], "exclude_non": [16, 80, 99, 114], "from_orm": [16, 80, 99, 114], "obj": [16, 80, 99, 114, 429], "from_yaml": [16, 206, 228, 365, 428], "config_str": 16, "json": [16, 80, 99, 114, 383, 407, 409, 413], "encod": [16, 80, 83, 86, 99, 114], "callabl": [16, 45, 80, 99, 114, 261], "pydanticundefin": [16, 80, 99, 114], "models_as_dict": [16, 80, 99, 114], "dumps_kwarg": [16, 80, 99, 114], "model_construct": [16, 80, 99, 114], "__dict__": [16, 80, 99, 114, 354], "__pydantic_fields_set__": [16, 80, 99, 114], "trust": [16, 80, 99, 114], "pre": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 96, 99, 103, 114, 115, 283, 354, 357, 363, 374, 380, 381, 385, 386, 402, 414, 416, 428, 432, 433, 436, 438, 441, 444, 451, 453, 458, 461, 484, 490], "behav": [16, 80, 99, 114, 354, 364, 419, 432, 551], "wa": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 80, 81, 83, 86, 88, 89, 97, 99, 108, 114, 116, 117, 120, 123, 154, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 347, 354, 357, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 394, 397, 398, 399, 400, 401, 402, 409, 413, 414, 415, 416, 417, 418, 419, 425, 427, 433, 435, 437, 455, 461, 463, 464, 465, 466, 474, 548], "sinc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 51, 79, 80, 83, 84, 86, 99, 114, 116, 117, 120, 179, 189, 196, 198, 329, 354, 355, 360, 364, 368, 370, 371, 372, 373, 374, 378, 380, 381, 382, 384, 405, 415, 416, 417, 418, 419, 420, 429, 433, 435, 447, 452, 458, 459, 461, 463, 465, 520, 523, 549, 552], "accept": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 99, 100, 101, 105, 114, 153, 170, 175, 177, 178, 179, 181, 189, 190, 191, 206, 228, 268, 352, 358, 359, 360, 361, 362, 363, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 406, 410, 419, 423, 428, 429, 430, 433, 437, 440, 452, 455, 456, 464, 484, 500, 506, 524, 549, 550], "usag": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 99, 110, 114, 120, 122, 163, 176, 177, 186, 189, 307, 360, 364, 365, 367, 369, 373, 378, 398, 419, 420, 451, 455, 457, 458, 548], "6": [16, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 50, 52, 53, 65, 80, 82, 83, 86, 95, 97, 99, 104, 114, 115, 120, 129, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191, 220, 259, 342, 345, 358, 361, 366, 370, 371, 374, 379, 387, 390, 403, 405, 407, 413, 414, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 480, 497, 501, 507, 511, 531, 547, 549], "concept": [16, 80, 99, 114, 374, 375, 381, 391, 450, 456, 489], "serial": [16, 80, 83, 86, 94, 95, 96, 97, 99, 100, 104, 105, 114, 360, 365, 369, 370, 375, 378, 398, 401, 405, 407, 414, 416, 417, 418, 419, 420, 456, 459, 461, 476], "changmake": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 46, 59, 78, 80, 83, 86, 90, 96, 99, 114, 153, 154, 158, 159, 160, 161, 163, 164, 165, 168, 169, 174, 175, 177, 178, 179, 182, 183, 186, 188, 189, 190, 191, 254, 313, 315, 316, 325, 353, 355, 356, 359, 360, 361, 364, 366, 368, 370, 371, 372, 373, 374, 375, 378, 380, 381, 384, 390, 393, 394, 396, 399, 400, 405, 407, 410, 411, 412, 413, 416, 418, 424, 427, 429, 430, 433, 435, 439, 443, 445, 453, 454, 455, 456, 459, 463, 464, 465, 470, 474, 485, 488, 548, 549], "mode": [16, 80, 81, 83, 86, 89, 97, 99, 100, 104, 114, 118, 136, 137, 143, 148, 151, 154, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 253, 381, 400, 413, 416, 420, 447], "liter": [16, 80, 99, 114, 301, 354], "modelmodel_dump": [16, 80, 99, 114], "represent": [16, 19, 20, 26, 79, 80, 82, 83, 86, 99, 114, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 368, 381, 395, 397, 419, 425, 451, 456, 459, 500], "to_python": [16, 80, 99, 114], "run": [16, 78, 79, 80, 84, 88, 96, 98, 99, 103, 108, 110, 111, 112, 114, 116, 117, 119, 120, 121, 122, 123, 128, 129, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 176, 177, 186, 189, 195, 303, 304, 328, 347, 353, 354, 355, 361, 362, 364, 367, 369, 370, 371, 374, 376, 378, 382, 383, 384, 385, 390, 396, 397, 400, 401, 412, 414, 415, 419, 423, 424, 425, 430, 431, 432, 433, 435, 436, 437, 439, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 473, 474, 484, 485, 486, 488, 493, 495, 497, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "serializ": [16, 80, 99, 114], "mai": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 89, 96, 99, 114, 115, 116, 117, 120, 196, 198, 354, 355, 357, 362, 363, 367, 368, 370, 371, 379, 380, 384, 385, 387, 392, 393, 432, 433, 439, 463, 487, 500, 507, 524, 545, 548, 552], "non": [16, 80, 83, 86, 95, 97, 99, 100, 104, 105, 113, 114, 115, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 164, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 253, 283, 344, 345, 347, 349, 360, 365, 368, 372, 374, 375, 381, 395, 399, 400, 401, 405, 413, 416, 417, 419, 420, 424, 464, 468, 484, 488, 499, 500, 524, 547], "list": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 95, 96, 97, 98, 99, 100, 103, 104, 105, 108, 112, 113, 114, 115, 116, 117, 120, 121, 123, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 158, 159, 161, 162, 164, 165, 166, 167, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 304, 314, 315, 316, 318, 343, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 427, 430, 431, 436, 440, 441, 443, 444, 445, 447, 452, 454, 455, 460, 461, 463, 464, 465, 466, 468, 473, 484, 488, 491, 500, 501, 545, 546, 547, 548], "whether": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 82, 83, 84, 86, 95, 97, 99, 100, 102, 104, 105, 113, 114, 115, 116, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 164, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 196, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 283, 292, 321, 323, 351, 359, 361, 368, 371, 373, 374, 381, 419, 430, 443, 455, 456, 474, 500, 549, 550], "": [16, 19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 51, 52, 53, 65, 78, 79, 80, 82, 83, 86, 87, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 120, 123, 128, 129, 132, 133, 134, 138, 158, 185, 191, 200, 204, 205, 210, 212, 213, 216, 217, 219, 220, 221, 223, 226, 228, 229, 233, 235, 236, 242, 243, 244, 247, 248, 249, 254, 257, 258, 259, 265, 274, 291, 339, 343, 344, 351, 354, 355, 357, 359, 364, 365, 366, 368, 370, 371, 372, 373, 374, 377, 380, 383, 384, 386, 387, 389, 390, 391, 392, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 470, 473, 474, 480, 481, 482, 483, 485, 486, 488, 493, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 552], "alia": [16, 56, 80, 99, 114, 357, 474], "kei": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 78, 80, 83, 85, 86, 97, 99, 100, 104, 105, 108, 114, 123, 185, 195, 323, 340, 362, 364, 371, 376, 378, 381, 391, 414, 452, 459, 514], "dump": [16, 80, 99, 114, 370], "idempot": [16, 80, 99, 114], "t": [16, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 65, 67, 79, 80, 82, 83, 84, 86, 99, 108, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 123, 130, 135, 175, 188, 206, 220, 228, 265, 267, 268, 281, 326, 330, 353, 354, 355, 357, 359, 361, 362, 364, 366, 368, 370, 371, 372, 373, 374, 377, 378, 379, 381, 384, 385, 386, 388, 390, 402, 406, 409, 410, 411, 414, 419, 423, 424, 427, 432, 435, 437, 438, 441, 443, 444, 445, 448, 450, 451, 453, 455, 456, 457, 459, 460, 461, 463, 464, 476, 480, 481, 482, 484, 486, 488, 497, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 551, 552], "when": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 79, 80, 82, 83, 84, 85, 86, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 112, 113, 114, 115, 127, 136, 137, 143, 148, 150, 151, 161, 164, 178, 179, 181, 183, 185, 187, 190, 191, 195, 200, 201, 204, 206, 208, 210, 211, 212, 216, 220, 222, 223, 225, 228, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 255, 256, 295, 353, 354, 355, 357, 359, 360, 361, 364, 366, 368, 369, 371, 374, 379, 380, 381, 382, 387, 399, 407, 408, 413, 415, 418, 419, 420, 429, 433, 437, 440, 441, 445, 446, 448, 451, 453, 455, 456, 459, 460, 463, 464, 484, 486, 488, 493, 495, 499, 500, 547, 549, 550, 551, 552], "invalid": [16, 80, 99, 114, 340, 354, 368, 381, 382, 405, 439, 466], "encount": [16, 80, 99, 114, 152, 386, 387, 388, 389, 429, 439, 447, 466, 536, 548], "model_dump_json": [16, 80, 99, 114], "indent": [16, 80, 99, 114], "int": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 33, 34, 38, 42, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 78, 79, 80, 81, 83, 84, 86, 88, 89, 97, 98, 99, 100, 103, 104, 105, 106, 108, 110, 114, 115, 116, 117, 120, 121, 123, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 158, 161, 165, 166, 171, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 261, 263, 265, 267, 268, 272, 273, 274, 283, 294, 295, 301, 305, 307, 310, 311, 312, 313, 315, 316, 341, 347, 354, 368, 412, 433, 453, 478], "modelmodel_dump_json": [16, 80, 99, 114], "to_json": [16, 80, 99, 114], "compact": [16, 80, 83, 86, 99, 114], "alias": [16, 56, 80, 99, 114, 453], "model_json_schema": [16, 80, 99, 114], "ref_templ": [16, 80, 99, 114], "def": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 333, 334, 354, 355, 365, 366, 367, 368, 377, 378, 381, 382, 435, 453, 459, 461, 470, 497, 548, 550], "schema_gener": [16, 80, 99, 114], "json_schema": [16, 80, 99, 114], "generatejsonschema": [16, 80, 99, 114], "typing_extens": [16, 80, 99, 114], "refer": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 59, 62, 65, 67, 79, 80, 81, 82, 83, 84, 86, 89, 96, 97, 99, 100, 101, 104, 105, 106, 107, 113, 114, 115, 116, 118, 123, 124, 140, 154, 155, 158, 161, 162, 165, 166, 167, 170, 171, 173, 188, 189, 190, 191, 195, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 259, 269, 273, 274, 275, 280, 310, 311, 335, 336, 337, 338, 354, 355, 360, 362, 365, 366, 368, 370, 372, 377, 378, 379, 380, 381, 384, 391, 405, 412, 413, 424, 425, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 458, 459, 461, 463, 464, 465, 472, 473, 474, 477, 484, 486, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 552], "templat": [16, 26, 57, 68, 80, 99, 100, 105, 114, 155, 163, 177, 178, 179, 181, 182, 183, 189, 190, 191, 206, 220, 228, 251, 252, 253, 254, 255, 256, 262, 264, 276, 279, 359, 365, 366, 370, 377, 402, 416, 419, 420, 422, 430, 431, 433, 440, 456, 457, 458, 459, 476, 497, 500, 502, 513, 520, 523, 528, 534, 542], "To": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 83, 86, 95, 99, 103, 112, 114, 116, 120, 177, 189, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 258, 344, 345, 356, 357, 361, 362, 365, 366, 367, 369, 370, 375, 376, 377, 378, 379, 380, 384, 385, 387, 389, 390, 391, 395, 396, 397, 400, 401, 405, 407, 413, 414, 416, 419, 423, 424, 425, 427, 428, 429, 430, 432, 433, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 468, 472, 474, 484, 485, 486, 489, 493, 495, 497, 498, 505, 546, 548, 549, 550], "logic": [16, 80, 82, 99, 114, 164, 378, 456, 457], "subclass": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 114, 283, 368, 411, 414, 459, 461], "your": [16, 19, 20, 26, 80, 94, 99, 114, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 353, 354, 355, 357, 359, 361, 384, 385, 386, 387, 388, 390, 391, 394, 395, 396, 399, 400, 405, 414, 415, 423, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 483, 488, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 550], "desir": [16, 80, 83, 86, 99, 114, 146, 176, 177, 186, 189, 329, 330, 331, 456, 474, 501], "modif": [16, 80, 83, 86, 99, 114, 354, 357, 376, 383, 416], "given": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 51, 52, 53, 65, 66, 76, 78, 79, 80, 81, 83, 84, 86, 89, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 160, 161, 164, 166, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 265, 267, 268, 274, 281, 283, 286, 287, 294, 301, 305, 308, 309, 317, 341, 342, 347, 351, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 377, 378, 380, 382, 394, 399, 405, 413, 414, 419, 423, 424, 425, 428, 431, 439, 440, 441, 443, 445, 446, 447, 450, 451, 452, 454, 455, 456, 457, 459, 463, 464, 472, 474, 484, 485, 486, 488, 492, 493, 497, 498, 500, 501, 507, 511, 514, 545, 547, 548, 549, 550], "model_parametrized_nam": [16, 80, 99, 114], "param": [16, 80, 99, 114, 208, 256, 347, 370, 400], "tupl": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 56, 79, 80, 83, 84, 86, 96, 97, 99, 100, 104, 105, 114, 118, 123, 132, 133, 135, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 151, 154, 159, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 253, 256, 267, 268, 271, 295, 305, 312, 354, 456, 500], "parametr": [16, 27, 80, 96, 99, 114, 138, 139, 144, 147, 149, 222, 223, 240, 366, 370, 377, 395, 402, 405, 429, 431, 459, 463, 510, 511, 522], "overridden": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 99, 114, 186, 351], "achiev": [16, 80, 99, 108, 114, 153, 344, 345, 354, 363, 364, 365, 366, 367, 368, 370, 377, 380, 402, 456, 459, 460, 498], "custom": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 85, 99, 114, 119, 363, 364, 365, 370, 372, 377, 381, 385, 399, 400, 402, 414, 423, 430, 432, 435, 437, 443, 447, 452, 454, 456, 463, 488, 533], "scheme": [16, 80, 99, 101, 102, 114, 177, 178, 179, 188, 220, 354, 360, 364, 366, 369, 376, 377, 378, 379, 381, 398, 405, 416, 420, 440, 454, 456, 459, 488, 493, 499, 500, 502], "basemodel": [16, 80, 99, 114, 381], "concret": [16, 80, 99, 114, 371, 374], "would": [16, 80, 83, 86, 90, 99, 114, 178, 179, 181, 187, 190, 191, 354, 357, 360, 361, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 378, 380, 381, 396, 405, 425, 427, 430, 431, 443, 453, 456, 457, 459, 461, 464, 501], "cl": [16, 80, 97, 99, 104, 114, 381], "typeerror": [16, 80, 99, 114, 283, 368, 378, 382], "try": [16, 80, 99, 114, 178, 179, 181, 187, 190, 191, 354, 355, 364, 368, 374, 383, 384, 390, 395, 425, 427, 429, 439, 440, 445, 451, 453, 456, 474, 548], "model_post_init": [16, 80, 99, 114], "_basemodel__context": [16, 80, 99, 114], "addit": [16, 19, 20, 26, 43, 80, 83, 84, 86, 97, 99, 100, 104, 105, 112, 114, 116, 121, 150, 178, 179, 181, 184, 187, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 357, 358, 359, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 381, 383, 384, 385, 386, 387, 396, 397, 399, 401, 402, 405, 406, 413, 414, 416, 419, 420, 425, 429, 441, 448, 451, 452, 453, 456, 458, 459, 461, 463, 464, 473, 474, 484, 486, 488, 495, 500, 501, 545, 551], "after": [16, 45, 50, 51, 52, 53, 80, 86, 95, 97, 99, 100, 104, 114, 148, 151, 274, 295, 313, 335, 338, 354, 357, 359, 362, 363, 365, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 390, 394, 401, 403, 404, 405, 407, 413, 415, 416, 417, 425, 435, 444, 446, 453, 456, 458, 463, 465, 466, 488, 548, 552], "__init__": [16, 80, 99, 114, 186, 255, 354, 360, 366, 378, 416], "want": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 80, 99, 102, 114, 135, 161, 186, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 356, 357, 359, 360, 361, 364, 368, 369, 370, 372, 373, 374, 384, 385, 386, 387, 388, 390, 391, 394, 414, 424, 427, 428, 429, 430, 432, 439, 440, 443, 445, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 472, 473, 474, 492, 545, 548, 549, 550, 551, 552], "entir": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 83, 86, 97, 99, 100, 104, 105, 114, 165, 424, 435, 438, 444], "model_rebuild": [16, 80, 99, 114], "forc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 146, 189, 191, 283, 359, 369, 395], "raise_error": [16, 80, 99, 114], "_parent_namespace_depth": [16, 80, 99, 114], "_types_namespac": [16, 80, 99, 114], "rebuild": [16, 80, 99, 114, 436], "core": [16, 53, 80, 99, 114, 144, 353, 354, 361, 367, 368, 375, 379, 380, 391, 394, 411, 415, 419, 423, 429, 430, 432, 435, 437, 439, 441, 443, 447, 458, 463, 464, 476, 486, 548], "necessari": [16, 80, 99, 114, 357, 364, 369, 380, 407, 424, 427, 429, 430, 433, 439, 440, 443, 446, 447, 455, 456, 458, 459, 473, 484, 485, 488], "one": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 68, 80, 83, 85, 86, 87, 88, 90, 94, 97, 99, 100, 103, 104, 105, 106, 108, 113, 114, 115, 116, 117, 118, 120, 121, 123, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 158, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 261, 265, 267, 268, 291, 296, 312, 325, 341, 347, 348, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 384, 385, 386, 413, 416, 417, 419, 423, 424, 427, 428, 429, 432, 435, 439, 444, 445, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 472, 473, 474, 483, 484, 485, 486, 488, 493, 495, 497, 500, 501, 507, 545, 546, 548, 549, 550, 551, 552], "forwardref": [16, 80, 99, 114], "could": [16, 80, 99, 114, 355, 357, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 380, 381, 384, 424, 427, 435, 437, 451, 463, 464, 472, 487], "resolv": [16, 80, 99, 114, 355, 357, 364, 368, 369, 376, 377, 389, 395, 414], "attempt": [16, 80, 99, 114, 357, 368, 371], "build": [16, 80, 99, 114, 177, 208, 354, 360, 361, 362, 367, 368, 370, 374, 378, 379, 380, 381, 383, 401, 407, 416, 431, 435, 448, 455, 457, 485, 488, 548], "automat": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 80, 99, 106, 114, 116, 120, 148, 151, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 353, 354, 355, 357, 361, 362, 364, 365, 371, 374, 376, 380, 383, 394, 395, 401, 429, 437, 439, 453, 456, 548, 552], "fail": [16, 80, 99, 114, 195, 355, 357, 368, 383, 384, 408, 436, 464], "depth": [16, 80, 99, 114, 322, 386, 391, 444, 514], "parent": [16, 80, 99, 108, 112, 114, 116, 120, 123, 189, 354, 364, 381, 446, 486, 524], "_was_": [16, 80, 99, 114], "success": [16, 80, 96, 99, 113, 114, 115, 116, 117, 120, 121, 123, 195, 382, 405, 424, 425, 427, 428, 429, 431, 435, 436, 437, 441, 445, 448, 453, 458, 464, 472, 473, 512], "otherwis": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 80, 83, 86, 97, 99, 100, 104, 105, 114, 146, 185, 189, 191, 193, 196, 197, 198, 199, 206, 228, 283, 347, 367, 377, 380, 458, 459, 464, 515], "strict": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 97, 99, 100, 114, 136, 137, 143, 148, 151, 154, 189, 191, 253], "from_attribut": [16, 80, 99, 114], "context": [16, 80, 83, 86, 99, 114, 197, 199, 206, 228, 303, 332, 354, 369, 380, 384, 420, 456, 478], "enforc": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 357, 381], "strictli": [16, 80, 99, 114, 183], "extract": [16, 80, 95, 97, 99, 100, 104, 105, 113, 114, 115, 120, 136, 137, 143, 148, 151, 154, 159, 160, 165, 167, 175, 178, 179, 180, 181, 183, 188, 189, 190, 191, 253, 354, 364, 369, 378, 380, 381, 407, 408, 419, 420, 423, 424, 427, 428, 429, 430, 435, 436, 439, 440, 441, 443, 452, 456, 472, 484, 492, 497], "model_validate_json": [16, 80, 99, 114], "json_data": [16, 80, 99, 114], "byte": [16, 80, 83, 86, 99, 114, 301, 332, 354], "bytearrai": [16, 80, 99, 114, 301], "against": [16, 80, 99, 114, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191, 355, 357, 371, 377, 384, 451, 464, 472, 483, 486], "valueerror": [16, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 70, 80, 83, 86, 87, 95, 99, 114, 206, 228, 354, 368, 381], "model_validate_str": [16, 80, 99, 114], "parse_fil": [16, 80, 99, 114], "content_typ": [16, 80, 99, 114], "utf8": [16, 80, 99, 114], "proto": [16, 80, 99, 114], "deprecatedparseprotocol": [16, 80, 99, 114], "allow_pickl": [16, 80, 99, 114], "parse_obj": [16, 80, 99, 114], "parse_raw": [16, 80, 99, 114], "b": [16, 19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 51, 52, 54, 80, 83, 86, 99, 114, 138, 195, 322, 354, 355, 368, 377, 380, 438, 450, 451, 452, 453, 456, 457, 459, 464, 474, 480, 484, 501], "schema_json": [16, 80, 99, 114], "set_log": 16, "call": [16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 83, 86, 96, 97, 100, 104, 105, 124, 125, 126, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 160, 176, 177, 186, 189, 195, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 295, 307, 326, 332, 340, 343, 351, 354, 355, 357, 359, 360, 363, 366, 367, 368, 369, 370, 372, 374, 376, 378, 380, 382, 384, 386, 390, 401, 405, 419, 427, 428, 437, 451, 452, 453, 455, 456, 459, 464, 466, 472, 473, 474, 484, 488, 497, 498, 499, 500, 501, 548, 549, 550, 551], "basicconfig": [16, 437, 470], "adjust": [16, 65, 178, 179, 181, 187, 190, 191, 363, 365, 377, 428, 444, 452, 459, 460, 472, 488, 495], "global": [16, 33, 42, 45, 46, 47, 95, 97, 98, 100, 103, 104, 105, 137, 148, 151, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 195, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 307, 310, 311, 312, 313, 354, 358, 360, 402, 419, 427, 437, 438, 448, 458, 461, 486, 546], "state": [16, 45, 47, 188, 195, 354, 360, 364, 366, 370, 374, 376, 378, 428, 472, 493, 514], "to_yaml": [16, 80, 99, 114, 206, 228, 365, 381, 459, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "convert": [16, 19, 23, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 79, 81, 82, 83, 86, 94, 96, 97, 100, 102, 104, 105, 113, 115, 118, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 161, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 206, 220, 228, 265, 280, 283, 284, 288, 301, 317, 335, 337, 338, 355, 360, 368, 369, 378, 381, 384, 406, 418, 419, 420, 423, 433, 438, 446, 447, 452, 453, 457, 458, 463, 474, 486, 492, 497, 500, 550, 552], "syntax": [16, 83, 86, 355, 370, 373, 399, 416, 548], "update_forward_ref": [16, 80, 99, 114], "localn": [16, 80, 99, 114], "r_": [17, 18, 21, 22, 24, 25, 27, 28, 35, 36, 39, 40, 50, 52, 53, 240, 241, 450, 507, 510, 511], "rho_": [17, 21, 22, 24, 25, 27, 52, 53], "gev": [17, 18, 19, 20, 21, 22, 24, 25, 27, 71, 117, 123, 178, 179, 181, 187, 190, 191, 425, 429, 431, 435, 436, 441, 443, 447, 448, 450, 451, 455, 456, 457, 458, 463, 464, 465, 474, 501, 524, 546, 547], "cm3": [17, 18, 19, 21, 22, 24, 25, 27, 52, 450], "dmprofil": [17, 21, 22, 23, 24, 25, 27, 450], "burkert": [17, 476], "profil": [17, 18, 21, 22, 23, 24, 25, 27, 109, 113, 115, 116, 117, 118, 119, 120, 121, 139, 145, 147, 148, 149, 151, 175, 179, 187, 195, 217, 219, 266, 280, 296, 315, 316, 366, 368, 372, 373, 380, 386, 388, 393, 395, 402, 405, 410, 412, 414, 415, 420, 422, 427, 428, 437, 442, 445, 447, 453, 461, 468, 476, 484, 486, 488, 500, 505, 547, 550], "rho": [17, 18, 21, 22, 23, 24, 25, 27], "r": [17, 18, 21, 22, 24, 25, 26, 27, 28, 30, 35, 36, 39, 40, 51, 53, 54, 82, 83, 86, 140, 175, 188, 284, 354, 355, 379, 384, 428, 436, 440, 453, 455, 472, 478, 493, 497, 505, 506, 507, 511, 514], "frac": [17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 54, 100, 105, 135, 138, 194, 212, 216, 233, 235, 247, 272, 274, 282, 377, 484, 492, 493, 505, 506, 507, 510, 511, 515, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 536, 537, 538, 540, 550, 551], "scale": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 52, 53, 65, 82, 84, 91, 95, 99, 100, 105, 108, 114, 116, 117, 120, 139, 155, 183, 187, 188, 189, 191, 196, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 263, 266, 282, 295, 296, 297, 313, 335, 336, 337, 347, 355, 363, 368, 369, 372, 377, 400, 405, 406, 414, 417, 418, 419, 428, 431, 440, 441, 444, 445, 446, 447, 450, 451, 454, 455, 456, 459, 460, 461, 463, 472, 474, 476, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543], "1995apj": 17, "447l": 17, "25b": 17, "2011jcap": [17, 19, 20, 21, 22, 24, 25, 26, 27], "03": [17, 19, 20, 21, 22, 24, 25, 26, 27, 65, 83, 85, 86, 367, 382, 422, 423, 425, 436, 437, 439, 443, 447, 451, 454, 456, 458, 460, 461, 462, 466, 467, 473, 507, 508, 509], "051c": [17, 21, 22, 24, 25, 27], "default_scale_radiu": [17, 21, 22, 24, 25, 27], "12": [17, 38, 42, 65, 82, 83, 86, 97, 100, 106, 115, 129, 148, 151, 177, 178, 179, 181, 187, 190, 191, 200, 204, 210, 212, 216, 223, 233, 235, 244, 247, 248, 249, 259, 358, 360, 361, 362, 363, 365, 366, 371, 374, 377, 393, 397, 398, 399, 411, 416, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 472, 473, 474, 475, 486, 497, 500, 501, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 518, 521, 522, 525, 526, 527, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "67": [17, 393, 451, 474], "kpc": [17, 18, 21, 22, 24, 25, 27, 29, 33, 34, 38, 229, 283, 286, 450, 451, 482, 524], "distance_gc": [17, 18, 21, 22, 24, 25, 27, 450], "8": [17, 18, 21, 22, 24, 25, 27, 38, 40, 50, 65, 83, 85, 86, 97, 100, 104, 105, 118, 129, 132, 133, 189, 218, 220, 283, 354, 358, 361, 362, 371, 394, 395, 398, 400, 401, 405, 406, 407, 410, 411, 412, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 481, 483, 492, 497, 501, 505, 514, 525, 533, 549], "distanc": [17, 18, 21, 22, 23, 24, 25, 27, 41, 46, 47, 117, 128, 129, 186, 229, 255, 286, 312, 368, 411, 418, 429, 431, 441, 450, 451, 453, 482, 497, 524], "galact": [17, 18, 21, 22, 24, 25, 27, 29, 45, 47, 65, 66, 79, 86, 97, 100, 104, 105, 116, 117, 119, 148, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 207, 215, 218, 232, 240, 241, 290, 317, 354, 355, 365, 368, 374, 393, 395, 412, 424, 427, 430, 431, 432, 435, 437, 438, 439, 441, 443, 447, 450, 451, 452, 456, 457, 458, 459, 463, 474, 476, 479, 483, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 547, 553], "center": [17, 18, 21, 22, 23, 24, 25, 27, 41, 79, 83, 86, 91, 97, 100, 104, 105, 113, 115, 117, 118, 119, 123, 135, 136, 137, 138, 139, 140, 143, 147, 148, 149, 151, 158, 161, 162, 164, 165, 166, 168, 169, 171, 172, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 253, 255, 285, 289, 315, 354, 355, 368, 370, 377, 378, 395, 396, 405, 407, 420, 423, 424, 427, 429, 430, 431, 432, 433, 435, 437, 439, 440, 441, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 463, 464, 473, 474, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 505, 506, 509], "local_dens": [17, 18, 21, 22, 24, 25, 27, 450], "39": [17, 18, 21, 22, 24, 25, 27, 59, 450, 451, 456, 464, 512, 533], "local": [17, 18, 21, 22, 24, 25, 27, 83, 86, 128, 129, 163, 176, 177, 186, 187, 189, 354, 355, 357, 362, 368, 383, 384, 387, 391, 395, 405, 428, 431, 432, 433, 438, 439, 450, 455, 468, 472, 488], "densiti": [17, 18, 21, 22, 24, 25, 27, 28, 30, 35, 36, 39, 40, 45, 52, 115, 140, 191, 309, 312, 347, 367, 433, 435, 450, 451, 461, 476, 478, 482, 492, 493, 494, 547], "__call__": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 295, 360, 365, 382, 401], "evalu": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 83, 86, 97, 100, 103, 104, 105, 116, 120, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 165, 171, 186, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 354, 359, 363, 369, 372, 373, 376, 377, 378, 382, 394, 395, 396, 398, 401, 405, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 439, 440, 448, 454, 459, 461, 463, 464, 484, 506, 507, 514, 547, 550], "deriv": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 54, 95, 112, 116, 120, 123, 254, 354, 366, 367, 372, 375, 378, 431, 463, 465, 486, 500, 549, 550], "static": [17, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 98, 101, 102, 103, 108, 112, 113, 115, 116, 117, 120, 121, 123, 139, 147, 158, 164, 165, 177, 178, 179, 181, 187, 188, 190, 191, 200, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 233, 234, 235, 236, 240, 241, 242, 244, 247, 248, 249, 254, 256, 257, 351, 362, 365, 384, 396, 413], "rmin": [17, 18, 21, 22, 24, 25, 27], "rmax": [17, 18, 21, 22, 24, 25, 27], "separ": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 69, 70, 71, 72, 73, 74, 75, 76, 79, 86, 177, 186, 189, 343, 354, 355, 360, 361, 362, 363, 366, 367, 368, 369, 370, 373, 374, 375, 376, 401, 405, 411, 413, 414, 418, 419, 430, 433, 435, 437, 443, 447, 451, 458, 459, 460, 477, 485, 493, 494, 505, 506, 510, 511, 524, 547], "ndecad": [17, 18, 21, 22, 23, 24, 25, 27, 261], "squar": [17, 18, 21, 22, 24, 25, 27, 46, 97, 100, 113, 114, 135, 136, 137, 143, 148, 151, 154, 175, 189, 191, 253, 271, 369, 372, 402, 457, 476, 486, 500, 548, 549, 550, 551], "numer": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 83, 86, 115, 183, 196, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 283, 353, 354, 367, 372, 387, 405, 423, 430, 432, 435, 437, 443, 447, 456, 463], "f": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 123, 131, 185, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 282, 283, 310, 354, 357, 371, 376, 377, 382, 385, 386, 388, 407, 416, 423, 424, 427, 428, 430, 436, 437, 438, 439, 440, 446, 447, 448, 450, 451, 453, 455, 457, 459, 460, 461, 464, 465, 470, 472, 473, 474, 482, 497, 514, 524, 535, 536, 537, 538, 539, 540, 541, 548, 549, 550], "int_": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 200, 201, 204, 208, 210, 211, 212, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 493, 505], "dr": [17, 18, 21, 22, 24, 25, 27, 507], "text": [17, 18, 21, 22, 23, 24, 25, 27, 50, 51, 52, 53, 54, 100, 105, 113, 115, 123, 240, 241, 282, 343, 355, 362, 370, 380, 384, 428, 448, 454, 463, 472, 474, 505, 506, 507, 510, 511, 515, 531, 538, 548, 550], "annihil": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 416, 459, 476], "decai": [17, 18, 20, 21, 22, 23, 24, 25, 27, 213, 219, 236, 377, 439, 444, 447, 459, 476, 538], "lower": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 113, 115, 135, 164, 183, 185, 188, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 354, 368, 373, 374, 381, 441, 455, 473], "upper": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 96, 112, 113, 114, 115, 116, 117, 120, 121, 123, 135, 183, 188, 195, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 266, 267, 268, 381, 390, 401, 405, 412, 413, 414, 420, 427, 441, 445, 452, 455, 472, 484, 486], "bound": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 97, 100, 104, 105, 113, 115, 116, 117, 120, 183, 186, 188, 195, 200, 201, 204, 205, 206, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 228, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 279, 363, 456, 461], "rang": [17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 65, 69, 71, 72, 76, 79, 83, 86, 87, 95, 96, 97, 100, 104, 105, 116, 135, 148, 150, 151, 164, 176, 177, 180, 182, 183, 186, 187, 189, 196, 198, 200, 201, 204, 205, 207, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 228, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 261, 308, 310, 311, 312, 347, 354, 360, 366, 367, 369, 378, 396, 401, 402, 405, 413, 414, 416, 424, 427, 429, 430, 432, 435, 436, 438, 440, 444, 446, 447, 448, 451, 452, 453, 454, 456, 457, 459, 460, 461, 464, 465, 472, 473, 474, 484, 486, 488, 507, 517, 546, 550], "ndarrai": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 83, 86, 87, 96, 108, 116, 120, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 151, 164, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 206, 230, 231, 256, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 279, 280, 283, 294, 295, 296, 305, 310, 312, 343, 347, 348, 354, 452, 456, 474, 500, 501], "radian": [17, 18, 21, 22, 24, 25, 27, 184, 202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255], "grid": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 116, 119, 139, 147, 149, 178, 179, 181, 183, 187, 190, 191, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 261, 347, 354, 365, 370, 397, 399, 453, 500, 501, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541], "per": [17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 94, 96, 97, 100, 104, 105, 106, 112, 113, 115, 116, 117, 120, 121, 128, 130, 131, 148, 151, 183, 213, 220, 221, 261, 269, 275, 280, 354, 360, 366, 367, 370, 378, 380, 381, 393, 401, 405, 407, 420, 423, 430, 439, 443, 445, 447, 450, 455, 456, 460, 461, 465, 466, 484, 488, 491, 547, 549], "decad": [17, 18, 21, 22, 24, 25, 27, 106, 183, 261, 420, 439], "10000": [17, 18, 21, 22, 23, 24, 25, 27, 98, 103, 137, 148, 151, 161, 451, 464], "integrate_spectrum_separ": [17, 18, 21, 22, 24, 25, 27], "func": [17, 18, 21, 22, 24, 25, 27, 178, 179, 181, 187, 190, 191, 261, 304, 308, 309, 347, 433, 435], "xmin": [17, 18, 21, 22, 24, 25, 27, 187, 382], "xmax": [17, 18, 21, 22, 24, 25, 27, 187, 382], "scale_to_local_dens": [17, 18, 21, 22, 24, 25, 27, 450], "abc": [18, 56, 94, 111, 157, 176, 181, 455], "mass": [19, 20, 26, 52, 367, 401, 420, 450, 476, 509], "channel": [19, 20, 26, 353, 356, 357, 371, 413, 440, 450, 456, 466, 476], "jfactor": [19, 20, 419], "z": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 46, 83, 86, 286, 287, 290, 379, 380, 385, 386, 388, 450, 478, 514], "k": [19, 33, 52, 53, 97, 104, 185, 204, 254, 307, 425, 427, 429, 451, 453, 456, 458, 464, 484, 501, 505, 517, 524, 535], "spectralmodel": [19, 20, 69, 71, 72, 74, 75, 76, 96, 108, 112, 113, 115, 117, 122, 127, 146, 148, 151, 155, 200, 201, 204, 206, 208, 210, 211, 212, 214, 216, 222, 223, 225, 228, 229, 231, 233, 234, 235, 239, 243, 244, 247, 248, 249, 252, 253, 256, 258, 365, 366, 369, 372, 378, 402, 405, 412, 419, 451, 459, 473, 474, 483, 502, 545], "mathrm": [19, 20, 23, 97, 104, 138, 450, 453, 484, 549, 551], "d": [19, 20, 23, 83, 85, 86, 185, 188, 220, 225, 236, 254, 259, 322, 357, 372, 374, 407, 416, 425, 439, 440, 447, 456, 459, 460, 493, 500, 505, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 551], "phi": [19, 20, 26, 184, 200, 201, 204, 207, 208, 210, 211, 212, 215, 218, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 287, 377, 443, 453, 458, 459, 464, 474, 493, 505, 506, 507, 509, 510, 511, 515, 517, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532], "langl": 19, "sigma": [19, 20, 30, 32, 48, 49, 112, 113, 114, 115, 116, 120, 121, 123, 128, 129, 135, 136, 140, 146, 147, 148, 151, 194, 195, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 265, 267, 268, 274, 377, 382, 437, 438, 443, 444, 445, 453, 457, 459, 461, 472, 486, 492, 506, 521, 537, 550], "nu": [19, 26], "rangl": 19, "4": [19, 20, 22, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 52, 54, 60, 65, 79, 83, 86, 96, 97, 100, 104, 105, 118, 123, 129, 130, 135, 138, 146, 158, 161, 177, 178, 179, 181, 187, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 220, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 258, 265, 266, 301, 341, 354, 355, 357, 358, 366, 368, 371, 374, 378, 379, 390, 393, 402, 404, 405, 406, 409, 411, 412, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 472, 473, 474, 476, 481, 482, 483, 497, 500, 501, 505, 506, 509, 514, 519, 532, 533, 541, 547, 548, 549, 550, 551], "pi": [19, 20, 30, 31, 32, 37, 54, 216, 258, 377, 459, 482, 505, 506, 507, 510, 511, 521, 541], "m": [19, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 52, 53, 83, 86, 89, 92, 120, 176, 177, 178, 179, 181, 187, 189, 190, 191, 280, 354, 355, 357, 368, 385, 386, 387, 388, 440, 450, 453, 454, 456, 459, 470, 493, 497, 499, 500, 501, 512, 548, 551], "2_": 19, "dm": [19, 20, 26, 383, 401, 416, 450, 459], "n": [19, 20, 51, 78, 83, 86, 113, 115, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 191, 196, 198, 258, 265, 354, 357, 368, 371, 385, 387, 411, 443, 446, 450, 451, 453, 456, 458, 461, 463, 464, 465, 466, 471, 493, 500, 501, 503, 506, 507, 547, 549, 551], "de": [19, 20, 26, 65, 95, 200, 201, 204, 208, 210, 211, 212, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 280, 380, 402, 405, 408, 450, 466, 547], "j": [19, 20, 23, 97, 104, 118, 355, 357, 484], "delta": [19, 20, 23, 83, 86, 112, 113, 118, 121, 123, 140, 188, 234, 235, 266, 419, 453, 461, 486, 493, 494, 506, 507, 509, 550], "omega": [19, 20, 23, 242, 258, 505, 541], "primaryflux": [19, 20, 450, 476], "bbar": [19, 20], "channel_registri": [19, 20, 26], "more": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 69, 71, 72, 74, 83, 86, 94, 95, 96, 97, 100, 104, 105, 128, 135, 178, 179, 181, 190, 191, 200, 201, 202, 203, 204, 205, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 244, 247, 248, 249, 255, 256, 269, 275, 291, 329, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 390, 399, 400, 401, 402, 405, 412, 414, 415, 419, 424, 427, 429, 431, 433, 435, 439, 440, 444, 447, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 466, 468, 474, 484, 485, 486, 488, 497, 498, 500, 501, 506, 545, 546, 548, 550, 552], "float": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 50, 51, 79, 83, 84, 86, 91, 97, 100, 104, 105, 107, 108, 112, 114, 115, 116, 118, 120, 121, 122, 123, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 153, 155, 164, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 265, 266, 267, 268, 271, 276, 283, 294, 301, 310, 312, 343, 344, 345, 455, 461, 463, 464, 548, 552], "factor": [19, 20, 23, 97, 98, 100, 103, 104, 105, 108, 113, 136, 137, 139, 143, 145, 146, 147, 148, 149, 151, 158, 165, 171, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 194, 196, 197, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 254, 255, 257, 354, 367, 369, 401, 423, 430, 432, 435, 437, 441, 443, 447, 452, 455, 459, 463, 484, 501, 514], "pointspatialmodel": [19, 20, 70, 76, 123, 237, 377, 378, 398, 418, 431, 432, 435, 436, 439, 440, 445, 451, 452, 458, 459, 464, 472, 473, 509], "redshift": [19, 20, 208, 377, 474, 514], "particl": [19, 26, 229, 258, 401, 476, 524], "majorana": 19, "dirac": 19, "051": [19, 20, 26, 458], "how": [19, 20, 78, 79, 81, 94, 115, 117, 119, 158, 179, 189, 191, 307, 313, 356, 359, 362, 366, 368, 370, 371, 373, 376, 377, 380, 381, 384, 385, 386, 390, 391, 394, 395, 396, 399, 400, 407, 409, 412, 413, 414, 419, 420, 423, 425, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 451, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 474, 476, 478, 484, 486, 489, 493, 497, 499, 500, 514, 546, 548, 549, 550, 552, 553], "import": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 96, 97, 99, 100, 104, 105, 108, 112, 114, 115, 117, 119, 121, 123, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 146, 148, 158, 161, 177, 178, 179, 181, 184, 187, 189, 190, 191, 197, 199, 200, 201, 204, 208, 210, 211, 212, 216, 220, 222, 223, 225, 226, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 259, 265, 273, 274, 281, 282, 303, 313, 322, 333, 334, 339, 342, 344, 345, 347, 349, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 389, 390, 401, 411, 413, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 477, 478, 480, 481, 482, 484, 485, 486, 488, 490, 491, 492, 494, 495, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 552], "u": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 64, 79, 81, 83, 86, 91, 97, 100, 104, 105, 108, 115, 117, 119, 123, 128, 129, 135, 137, 146, 178, 179, 181, 187, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 220, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 258, 259, 281, 282, 283, 303, 349, 354, 357, 361, 362, 363, 369, 370, 371, 372, 377, 378, 381, 382, 394, 395, 396, 413, 414, 415, 423, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 478, 485, 486, 488, 490, 495, 497, 498, 501, 505, 507, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542], "massdm": [19, 20, 450], "5000": [19, 20, 83, 86, 476], "3": [19, 20, 27, 28, 31, 32, 33, 37, 38, 42, 45, 46, 50, 51, 52, 53, 54, 59, 62, 65, 76, 79, 81, 82, 83, 86, 89, 91, 97, 99, 100, 104, 105, 108, 114, 115, 129, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 161, 164, 178, 179, 181, 184, 187, 189, 190, 191, 197, 199, 208, 215, 218, 226, 248, 254, 256, 258, 259, 267, 268, 273, 281, 282, 303, 312, 331, 342, 347, 349, 351, 354, 355, 357, 358, 360, 365, 366, 368, 369, 370, 371, 373, 378, 379, 380, 385, 390, 391, 393, 394, 395, 397, 398, 403, 405, 407, 410, 411, 412, 413, 414, 415, 416, 418, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 475, 476, 478, 481, 482, 485, 486, 490, 492, 494, 495, 497, 498, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 549, 550], "41e19": [19, 20], "gev2": [19, 450], "cm": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 51, 52, 53, 54, 65, 96, 115, 121, 123, 200, 204, 210, 212, 216, 223, 226, 233, 235, 243, 244, 247, 248, 249, 258, 339, 365, 377, 424, 425, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 443, 447, 448, 450, 451, 453, 459, 461, 463, 464, 472, 474, 481, 482, 486, 488, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547], "modeldm": [19, 20], "noqa": [19, 20, 116, 135, 171, 182, 183, 189, 208, 260, 351], "e501": [19, 20, 116, 135, 171, 182, 183, 189, 208, 260, 351], "thermal_relic_cross_sect": 19, "26": [19, 83, 86, 358, 392, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 476, 524, 542], "thermal": [19, 524, 547], "averag": [19, 97, 100, 104, 105, 158, 165, 168, 169, 171, 172, 405, 424, 427, 484, 547], "cross": [19, 360, 374, 476], "section": [19, 83, 86, 269, 275, 354, 355, 357, 359, 368, 370, 371, 373, 377, 380, 384, 402, 415, 430, 435, 439, 440, 443, 447, 451, 453, 457, 458, 459, 474, 476, 477, 488, 501, 546, 548, 552], "default_paramet": [19, 20, 26, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 382], "frozen": [19, 20, 26, 96, 116, 120, 155, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 369, 377, 382, 397, 420, 424, 425, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 451, 452, 453, 457, 458, 459, 464, 472, 473, 474, 486, 495, 524, 533], "statu": [19, 20, 26, 113, 115, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 354, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 415, 420, 458, 459], "is_norm_spectral_model": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 405, 459], "norm": [19, 20, 26, 112, 113, 115, 116, 117, 120, 123, 129, 155, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 347, 365, 376, 378, 382, 399, 400, 402, 405, 420, 422, 427, 432, 433, 435, 436, 438, 439, 440, 441, 443, 446, 447, 448, 450, 451, 452, 453, 464, 472, 473, 474, 476, 486, 495, 502, 507, 513, 514, 521, 533, 534, 542, 550], "pivot_energi": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "pivot": [19, 20, 26, 65, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 420, 451], "decorrel": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "correl": [19, 20, 26, 112, 118, 194, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 239, 244, 246, 247, 248, 249, 252, 256, 372, 377, 378, 405, 415, 438, 441, 453, 457, 459, 461, 472, 486, 545], "between": [19, 20, 26, 65, 83, 84, 86, 89, 100, 105, 110, 117, 118, 120, 128, 129, 139, 145, 147, 148, 149, 151, 161, 175, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 259, 265, 280, 313, 344, 345, 352, 354, 355, 362, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 381, 382, 392, 402, 405, 408, 419, 423, 429, 431, 436, 438, 441, 444, 447, 448, 453, 455, 456, 457, 458, 461, 464, 465, 474, 484, 486, 493, 494, 497, 506, 507, 547, 550, 552], "minim": [19, 20, 26, 106, 122, 178, 179, 181, 186, 187, 190, 191, 192, 195, 200, 201, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 232, 233, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 265, 366, 369, 377, 381, 407, 417, 419, 423, 439, 452, 453, 461, 473, 488, 497, 498, 501, 546, 551], "smallest": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 239, 244, 246, 247, 248, 249, 252, 256, 431], "minimum": [19, 20, 26, 47, 79, 95, 112, 113, 115, 116, 118, 120, 122, 124, 128, 129, 130, 131, 153, 155, 161, 183, 186, 188, 196, 198, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252, 254, 255, 256, 261, 266, 269, 272, 283, 310, 312, 315, 349, 371, 407, 413, 427, 431, 439, 453, 456, 461, 464, 486, 488, 497, 524, 551], "found": [19, 20, 26, 78, 82, 83, 86, 124, 161, 166, 185, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 272, 357, 358, 362, 369, 379, 380, 399, 402, 403, 404, 408, 433, 439, 444, 459, 461, 466, 485, 486, 497, 498], "nan": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 83, 86, 97, 113, 115, 158, 176, 177, 178, 179, 181, 187, 190, 191, 196, 198, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 377, 382, 427, 428, 429, 432, 433, 435, 436, 441, 443, 445, 451, 452, 454, 455, 456, 457, 458, 459, 472, 473, 474, 524, 533], "ha": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 83, 86, 96, 97, 100, 104, 105, 112, 113, 115, 150, 172, 176, 177, 178, 179, 181, 185, 186, 187, 189, 190, 191, 196, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 254, 255, 256, 347, 349, 351, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 401, 402, 405, 407, 408, 414, 415, 416, 418, 419, 420, 424, 427, 428, 429, 433, 438, 440, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 465, 466, 472, 484, 485, 488, 493, 497, 498, 501, 505, 506, 533, 545, 548, 550], "split": [19, 20, 83, 86, 87, 113, 115, 178, 179, 181, 187, 190, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 360, 362, 364, 366, 368, 369, 373, 375, 377, 386, 402, 420, 446, 459, 477, 553], "like": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 50, 52, 53, 65, 76, 78, 83, 84, 86, 128, 129, 142, 150, 178, 179, 181, 185, 187, 190, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 283, 303, 313, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 382, 383, 385, 386, 390, 396, 405, 407, 408, 412, 413, 415, 416, 418, 419, 423, 425, 427, 428, 429, 430, 433, 440, 441, 444, 448, 450, 452, 453, 454, 456, 460, 461, 463, 464, 468, 472, 474, 476, 477, 484, 488, 493, 501, 511, 546, 548, 549, 550, 551], "x": [19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 65, 66, 83, 86, 97, 104, 118, 128, 129, 133, 183, 187, 188, 195, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 273, 274, 276, 286, 287, 288, 290, 294, 296, 301, 310, 343, 346, 347, 354, 355, 359, 361, 362, 363, 368, 379, 383, 385, 386, 388, 425, 430, 431, 437, 440, 444, 448, 451, 453, 454, 456, 461, 464, 474, 482, 488, 505, 506, 548, 550], "interact": [19, 20, 83, 86, 148, 151, 178, 179, 181, 187, 190, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 353, 354, 355, 363, 364, 365, 366, 370, 374, 377, 390, 399, 435, 443, 453, 456, 458, 459, 468, 472, 473, 497, 500, 524, 548], "properti": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 91, 113, 155, 189, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 274, 351, 354, 355, 365, 367, 377, 378, 381, 382, 402, 405, 407, 412, 413, 415, 418, 419, 427, 429, 437, 439, 441, 451, 457, 459, 460, 474, 485, 501, 547], "consid": [19, 20, 59, 91, 158, 165, 168, 169, 171, 172, 179, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 265, 350, 359, 360, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 380, 382, 424, 427, 429, 435, 439, 440, 444, 454, 457, 485, 493, 551], "fact": [19, 20, 92, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 380, 424, 501], "implement": [19, 20, 97, 100, 104, 105, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 273, 354, 359, 360, 362, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 381, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 412, 413, 415, 416, 419, 420, 424, 432, 444, 446, 450, 451, 455, 456, 457, 476, 484, 486, 488, 493, 494, 495, 533, 545, 546, 547, 548, 549, 552], "detail": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 95, 97, 100, 105, 115, 116, 136, 137, 143, 148, 151, 154, 177, 189, 191, 195, 196, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 253, 254, 255, 354, 355, 357, 359, 362, 363, 364, 367, 368, 369, 373, 374, 375, 379, 380, 383, 385, 389, 391, 392, 399, 403, 404, 422, 423, 427, 429, 430, 431, 432, 437, 438, 439, 442, 443, 447, 452, 453, 455, 456, 457, 458, 459, 461, 463, 465, 466, 468, 474, 484, 485, 487, 493, 497, 498, 500, 545, 546, 547, 548, 552], "That": [19, 20, 195, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 354, 355, 359, 368, 371, 374, 453, 474, 548], "introduc": [19, 20, 178, 179, 181, 183, 187, 190, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 354, 361, 362, 364, 366, 367, 368, 369, 371, 374, 376, 379, 382, 396, 398, 399, 401, 402, 405, 407, 408, 412, 413, 414, 416, 419, 420, 438, 444, 455, 459, 501, 506, 548, 551], "stabil": [19, 20, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 379, 443], "optimis": [19, 20, 195, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 368, 370, 372, 414, 486, 545], "factor_min": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255], "factor_max": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255], "problem": [19, 20, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 332, 362, 364, 368, 375, 382, 389, 417, 453], "sometim": [19, 20, 79, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 332, 354, 357, 361, 368, 374, 384, 386, 453, 547, 552], "maximum": [19, 20, 45, 46, 47, 79, 83, 86, 95, 113, 115, 116, 118, 120, 148, 151, 153, 161, 164, 170, 173, 177, 183, 188, 189, 196, 198, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 267, 268, 310, 312, 315, 351, 357, 360, 368, 407, 425, 431, 444, 455, 456, 461, 465, 473, 478, 486, 497, 524, 546, 547, 550], "scan_min": [19, 20, 116, 120, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 453], "scan": [19, 20, 90, 113, 115, 116, 117, 120, 121, 195, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 369, 378, 405, 441, 446, 461, 486, 488], "scan_n_sigma": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 453], "scan_max": [19, 20, 116, 120, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 446, 453], "scan_n_valu": [19, 20, 116, 120, 121, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 453, 461], "scan_valu": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 441, 453], "numpi": [19, 20, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 87, 96, 108, 115, 116, 120, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 149, 150, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 193, 194, 196, 197, 199, 200, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 254, 255, 267, 268, 283, 307, 312, 348, 353, 354, 355, 357, 361, 365, 367, 371, 372, 373, 380, 382, 390, 391, 398, 399, 402, 410, 411, 412, 414, 416, 417, 418, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 472, 473, 474, 480, 481, 482, 486, 488, 500, 501, 505, 506, 508, 533, 541], "arrai": [19, 20, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 78, 79, 81, 83, 86, 87, 89, 94, 95, 96, 97, 104, 105, 108, 113, 115, 116, 117, 120, 121, 123, 128, 129, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 196, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 253, 254, 255, 256, 257, 266, 267, 268, 270, 283, 294, 295, 296, 310, 311, 312, 316, 347, 348, 353, 354, 367, 368, 372, 378, 381, 390, 400, 413, 416, 418, 420, 430, 439, 440, 448, 451, 452, 453, 454, 456, 458, 459, 461, 463, 465, 466, 474, 500, 501, 508, 533, 536, 549, 550], "scale_method": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 382, 524], "scale10": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 382, 524], "factor1": [19, 20, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255], "interp": [19, 20, 140, 178, 179, 181, 183, 187, 188, 190, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 296, 349, 377, 382, 418, 420, 430, 436, 440, 443, 447, 454, 455, 456, 459, 464, 465, 466, 500, 501, 524, 525], "lin": [19, 20, 183, 187, 188, 191, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 266, 295, 296, 297, 382, 440, 454, 456, 466, 501, 524], "sqrt": [19, 20, 30, 31, 32, 65, 97, 100, 104, 105, 108, 113, 115, 118, 123, 178, 179, 181, 183, 187, 190, 191, 194, 196, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 266, 274, 295, 296, 297, 366, 424, 427, 431, 435, 441, 443, 444, 448, 451, 453, 455, 456, 458, 464, 472, 473, 474, 486, 506, 507, 510, 511, 521, 550], "is_norm": [19, 20, 96, 196, 198, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 382, 407, 420, 424, 427, 428, 429, 430, 432, 435, 436, 443, 447, 451, 453, 459, 473, 474, 524, 533], "prior": [19, 20, 94, 96, 97, 104, 196, 197, 198, 199, 200, 203, 204, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 247, 248, 249, 254, 255, 358, 363, 386, 388, 420, 422, 424, 427, 428, 429, 430, 432, 435, 436, 441, 443, 447, 451, 453, 459, 462, 468, 473, 474, 500, 533, 545], "tag": [19, 20, 26, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 80, 83, 86, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 163, 164, 165, 178, 179, 181, 187, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 255, 256, 379, 382, 383, 402, 416, 454, 459, 461, 507, 511], "kwarg": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 53, 56, 58, 59, 60, 61, 62, 63, 64, 79, 82, 83, 84, 86, 96, 97, 100, 104, 105, 115, 116, 117, 118, 120, 130, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 160, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 266, 295, 306, 329, 341, 342, 343, 346, 348, 349, 350, 351, 354, 365, 381, 382, 418, 425, 439, 448, 455, 466, 536], "energy_flux": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 459, 474], "energy_min": [19, 20, 26, 52, 53, 79, 95, 97, 100, 104, 105, 113, 115, 116, 117, 120, 135, 176, 177, 183, 186, 189, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 253, 256, 261, 368, 370, 435, 440, 448, 450, 452, 455, 459, 474], "energy_max": [19, 20, 26, 79, 95, 97, 100, 104, 105, 113, 115, 116, 117, 120, 135, 176, 177, 183, 186, 189, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 253, 256, 261, 368, 370, 435, 440, 448, 450, 452, 455, 459, 474], "e_": [19, 20, 26, 50, 52, 53, 135, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 484, 490, 492, 493, 494, 515, 519, 527, 529, 530], "integrate_spectrum": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 396, 402], "energy_flux_error": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "epsilon": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "0001": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 345, 437], "spectrum": [19, 20, 26, 70, 73, 93, 95, 96, 97, 100, 101, 104, 105, 108, 113, 115, 117, 120, 122, 124, 146, 148, 151, 156, 160, 164, 165, 178, 179, 181, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 258, 259, 273, 351, 360, 365, 366, 369, 370, 373, 374, 375, 386, 396, 397, 398, 399, 401, 405, 407, 410, 411, 412, 413, 414, 416, 418, 422, 423, 424, 425, 426, 428, 435, 436, 439, 440, 441, 447, 450, 451, 452, 457, 459, 463, 464, 468, 472, 474, 476, 484, 488, 493, 496, 501, 515, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 545, 548], "step": [19, 20, 26, 112, 116, 120, 121, 123, 195, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 354, 357, 360, 361, 364, 365, 366, 368, 369, 370, 372, 375, 379, 382, 383, 384, 390, 407, 414, 415, 419, 423, 427, 429, 432, 435, 437, 438, 439, 440, 446, 447, 452, 453, 455, 459, 461, 472, 473, 474, 488, 496, 501], "size": [19, 20, 26, 46, 47, 65, 70, 76, 83, 84, 86, 97, 98, 100, 103, 104, 105, 106, 107, 118, 123, 132, 133, 135, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 151, 153, 154, 160, 161, 162, 165, 166, 167, 175, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 200, 201, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 305, 306, 310, 311, 312, 313, 342, 354, 362, 365, 367, 368, 386, 388, 418, 420, 423, 429, 433, 435, 439, 446, 448, 451, 455, 456, 457, 459, 463, 464, 465, 466, 474, 484, 499, 505, 506, 552], "gradient": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "fraction": [19, 20, 26, 50, 52, 53, 79, 84, 85, 112, 122, 126, 139, 145, 147, 148, 149, 151, 186, 192, 193, 200, 201, 204, 207, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 273, 274, 364, 369, 412, 420, 423, 430, 439, 443, 452, 454, 457, 463, 464, 465], "1e": [19, 20, 26, 82, 95, 120, 121, 123, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 226, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 259, 269, 275, 315, 329, 331, 354, 365, 425, 427, 429, 431, 433, 435, 437, 439, 440, 443, 445, 447, 448, 451, 453, 459, 461, 464, 465, 482, 486, 490, 514, 515, 516, 518, 521, 522, 526, 527, 529, 530, 531, 532], "energy_flux_err": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "evaluate_error": [19, 20, 26, 115, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 372], "propag": [19, 20, 26, 53, 118, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 272, 365, 372, 399, 419, 453], "dnde": [19, 20, 26, 65, 113, 114, 115, 122, 124, 125, 126, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 258, 378, 405, 425, 427, 428, 437, 441, 451, 452, 459, 464, 472, 474, 486], "dnde_error": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "freez": [19, 20, 26, 83, 86, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 369, 380, 395, 405, 420, 432, 443, 453, 459, 524], "from_dict": [19, 20, 26, 96, 97, 100, 104, 105, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 398, 405, 461], "from_paramet": [19, 20, 26, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257], "init": [19, 20, 26, 83, 86, 112, 117, 123, 155, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 295, 307, 366, 402, 417, 419, 420, 441, 451, 452, 474], "analyt": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 138, 139, 147, 149, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 367, 372, 420, 454, 459, 486, 507, 551], "solut": [19, 20, 26, 52, 135, 200, 201, 204, 208, 210, 211, 212, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 355, 357, 359, 361, 362, 367, 368, 370, 371, 372, 374, 376, 378, 382, 387, 484, 486, 488, 551], "integral_error": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 372, 402], "flux_err": [19, 20, 26, 113, 115, 123, 129, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 272, 273, 274, 431, 444, 445], "invers": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 189, 200, 201, 204, 208, 210, 211, 212, 216, 219, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 267, 268, 305, 312, 367, 439, 457, 459, 461, 524], "100": [19, 20, 26, 46, 47, 71, 89, 115, 123, 137, 138, 148, 189, 191, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 259, 261, 313, 354, 355, 357, 362, 373, 393, 423, 424, 427, 430, 435, 436, 437, 439, 440, 441, 443, 444, 448, 450, 451, 452, 454, 455, 456, 459, 461, 463, 464, 465, 474, 478, 480, 481, 482, 486, 497, 500, 501, 504, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 549], "scipi": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 191, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 281, 295, 334, 347, 353, 354, 357, 363, 368, 371, 372, 374, 380, 391, 395, 396, 397, 398, 410, 411, 412, 415, 417, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 545, 550], "optim": [19, 20, 26, 96, 121, 123, 194, 195, 196, 197, 198, 199, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 347, 353, 354, 363, 366, 367, 376, 378, 424, 425, 427, 428, 429, 430, 431, 435, 436, 437, 444, 448, 453, 461, 464, 472, 473], "brentq": [19, 20, 26, 115, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 266], "root": [19, 20, 26, 113, 114, 123, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 276, 279, 354, 372, 405, 431, 476, 486, 548, 550], "find": [19, 20, 26, 123, 128, 129, 135, 161, 162, 166, 193, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 276, 354, 359, 365, 367, 373, 383, 384, 385, 405, 407, 413, 414, 419, 420, 425, 427, 431, 451, 452, 456, 459, 463, 466, 474, 548, 550, 551], "inverse_al": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "multipl": [19, 20, 26, 78, 83, 86, 87, 96, 103, 106, 123, 128, 152, 178, 179, 181, 187, 190, 191, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 354, 355, 360, 363, 366, 367, 368, 370, 372, 375, 376, 378, 382, 386, 395, 402, 403, 405, 413, 419, 420, 429, 435, 451, 452, 455, 456, 457, 459, 464, 486, 500, 524, 533, 545, 546, 547, 548, 553], "element": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 95, 97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 184, 186, 187, 189, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 347, 372, 419, 451, 456, 500], "energy_bound": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 368, 405, 425, 427, 429, 435, 436, 448, 450, 451, 453, 459, 464, 473, 474, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533], "sed_typ": [19, 20, 26, 113, 114, 115, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 405, 423, 425, 427, 428, 429, 436, 437, 441, 445, 447, 451, 474, 486, 488, 524], "energy_pow": [19, 20, 26, 115, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 263, 435, 448, 453, 473, 474], "n_point": [19, 20, 26, 200, 201, 204, 205, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 254, 256, 257, 382, 542], "By": [19, 20, 26, 50, 63, 83, 86, 96, 97, 100, 104, 105, 112, 116, 120, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 155, 158, 165, 175, 177, 178, 179, 181, 187, 190, 191, 200, 201, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 351, 354, 380, 381, 382, 399, 400, 402, 439, 440, 444, 446, 453, 456, 461, 473, 495, 499, 505, 506, 507, 551], "y": [19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 66, 83, 86, 128, 129, 133, 183, 195, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 286, 287, 288, 290, 294, 296, 346, 354, 368, 379, 385, 386, 388, 419, 423, 431, 437, 440, 453, 461, 482, 488], "axi": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 79, 95, 96, 97, 100, 104, 105, 106, 107, 108, 112, 113, 115, 116, 117, 119, 120, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 225, 228, 229, 231, 233, 234, 235, 236, 239, 242, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 263, 267, 268, 272, 273, 274, 294, 295, 305, 342, 347, 348, 349, 350, 360, 363, 376, 378, 397, 400, 401, 402, 405, 407, 412, 414, 415, 416, 419, 423, 424, 428, 429, 430, 432, 433, 435, 437, 439, 440, 441, 443, 444, 446, 447, 451, 452, 454, 455, 456, 463, 464, 465, 472, 473, 474, 484, 486, 488, 492, 497, 500, 501, 543, 547], "linear": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 132, 133, 134, 135, 138, 140, 142, 145, 150, 178, 179, 181, 187, 188, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 251, 252, 254, 255, 256, 295, 354, 416, 422, 435, 440, 441, 443, 456, 459, 464, 472, 473, 502, 544], "expcutoffpowerlawspectralmodel": [19, 20, 26, 76, 200, 201, 204, 208, 210, 211, 216, 222, 223, 225, 229, 231, 233, 234, 235, 238, 239, 244, 246, 247, 248, 249, 252, 256, 377, 425, 427, 435, 459, 518, 520, 524], "pwl": [19, 20, 26, 115, 197, 199, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 259, 365, 377, 382, 425, 439, 459, 461, 486, 504, 505, 506, 507, 509, 510, 511, 512, 514, 516], "set_yscal": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 441, 450, 490], "mapaxi": [19, 20, 26, 97, 100, 104, 105, 106, 107, 113, 115, 117, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 158, 168, 169, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 188, 189, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 349, 355, 369, 378, 396, 397, 399, 402, 405, 415, 419, 423, 424, 427, 429, 430, 436, 437, 439, 440, 443, 446, 447, 448, 452, 454, 455, 456, 459, 464, 465, 466, 473, 492, 495, 497, 498, 500, 501], "from_energy_bound": [19, 20, 26, 97, 100, 104, 105, 135, 137, 138, 146, 148, 158, 183, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 355, 423, 424, 427, 429, 436, 437, 439, 440, 446, 448, 452, 454, 455, 459, 464, 465, 473, 492, 495, 497, 498, 501], "matplotlib": [19, 20, 26, 64, 65, 79, 119, 132, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 178, 179, 181, 187, 190, 191, 194, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 332, 342, 343, 344, 347, 348, 349, 351, 353, 354, 355, 368, 371, 380, 387, 390, 397, 405, 407, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 480, 481, 482, 488, 490, 491, 492, 494, 497, 505, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 552], "eflux": [19, 20, 26, 113, 114, 115, 124, 125, 126, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 378, 405, 441, 459, 486], "e2dnd": [19, 20, 26, 113, 114, 115, 122, 124, 125, 126, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 378, 405, 412, 423, 425, 427, 428, 429, 436, 451, 474, 486, 488, 524], "power": [19, 20, 26, 27, 96, 112, 113, 115, 117, 122, 127, 146, 148, 151, 177, 196, 198, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 244, 246, 247, 248, 249, 252, 256, 258, 263, 310, 365, 367, 393, 399, 411, 413, 422, 430, 432, 435, 439, 441, 443, 446, 447, 448, 458, 459, 461, 488, 502, 514, 534, 540], "multipli": [19, 20, 26, 115, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 215, 216, 218, 220, 222, 223, 225, 228, 229, 230, 231, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 263, 276, 279, 283, 448, 450, 459, 514, 550], "node": [19, 20, 26, 148, 151, 180, 183, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 230, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 396, 453, 454, 456, 463, 464, 508, 525], "forward": [19, 20, 26, 79, 83, 86, 97, 100, 104, 105, 117, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 160, 182, 186, 187, 188, 195, 200, 201, 204, 205, 208, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 242, 243, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 260, 281, 343, 348, 355, 361, 364, 378, 425, 436, 484, 486, 501], "plot_error": [19, 20, 26, 64, 65, 96, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 225, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 372, 425, 427, 429, 435, 436, 438, 451, 453, 473], "band": [19, 20, 26, 66, 79, 85, 110, 113, 115, 118, 136, 137, 140, 143, 148, 151, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 360, 372, 373, 377, 378, 386, 394, 425, 427, 428, 436, 437, 438, 448, 450, 451, 459, 464, 466, 483, 484, 486, 546], "nonposit": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "clip": [19, 20, 26, 176, 177, 180, 182, 183, 186, 188, 189, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 255, 256, 295, 398, 399, 431], "set_xscal": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "nonposx": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 405], "avoid": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 112, 158, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 355, 360, 361, 362, 364, 368, 372, 373, 376, 377, 379, 380, 382, 405, 407, 416, 418, 419, 457, 461, 485, 497, 548], "artefact": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "neg": [19, 20, 26, 83, 86, 113, 115, 116, 117, 120, 121, 123, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 255, 256, 267, 268, 355, 402, 420, 461, 486, 550, 551], "8623": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "plt": [19, 20, 26, 64, 65, 119, 132, 138, 139, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 342, 351, 354, 355, 390, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 480, 481, 482, 488, 490, 491, 492, 494, 497, 505, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541], "loglog": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 294, 423, 450, 480, 481, 482], "semilogi": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 423, 440], "code": [19, 20, 26, 78, 79, 83, 86, 135, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 349, 357, 358, 359, 361, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 387, 390, 393, 396, 397, 399, 400, 401, 402, 405, 407, 410, 411, 412, 413, 414, 416, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 476, 488, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548], "shown": [19, 20, 26, 79, 146, 186, 187, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 349, 354, 361, 371, 372, 373, 381, 382, 384, 399, 401, 424, 427, 435, 437, 438, 439, 440, 444, 447, 448, 455, 458, 459, 460, 461, 463, 473, 485], "correctli": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 355, 357, 380, 381, 395, 397, 402, 407, 408, 417, 454, 455, 456, 457, 458, 461, 506], "circumv": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "issu": [19, 20, 26, 83, 86, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 354, 355, 357, 362, 363, 365, 366, 368, 371, 374, 379, 380, 381, 382, 383, 386, 387, 388, 395, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 437, 457, 463, 484, 488, 548, 549], "pyplot": [19, 20, 26, 64, 65, 79, 119, 139, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 342, 347, 390, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 480, 481, 482, 488, 490, 491, 492, 494, 497, 505, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541], "fill_between": [19, 20, 26, 118, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 448], "reassign": [19, 20, 26, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257], "datasets_nam": [19, 20, 26, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 401, 436, 458, 472, 508], "new_datasets_nam": [19, 20, 26, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257], "anoth": [19, 20, 26, 79, 82, 83, 86, 97, 100, 104, 105, 136, 137, 138, 143, 148, 150, 151, 180, 183, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 354, 368, 369, 370, 372, 374, 375, 378, 381, 385, 390, 399, 414, 448, 452, 456, 457, 459, 501, 548], "two": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 82, 83, 85, 86, 96, 97, 100, 104, 105, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 149, 150, 154, 159, 161, 177, 178, 179, 180, 181, 183, 186, 187, 189, 190, 191, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 313, 322, 343, 348, 351, 353, 354, 355, 357, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 382, 383, 384, 386, 407, 413, 415, 419, 428, 429, 435, 436, 438, 441, 447, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 465, 472, 473, 478, 484, 485, 486, 488, 497, 500, 501, 516, 550, 551], "must": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 83, 84, 86, 96, 97, 100, 101, 105, 115, 120, 123, 128, 129, 135, 146, 154, 158, 165, 172, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 273, 274, 283, 301, 349, 354, 359, 365, 366, 369, 378, 379, 380, 381, 423, 432, 452, 455, 457, 458, 459, 463, 464, 473, 474, 488, 500, 547], "length": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 76, 78, 83, 86, 89, 154, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 295, 347, 380, 425, 430, 437, 441, 451, 453, 456, 464, 474, 505], "wise": [19, 20, 26, 83, 86, 128, 129, 179, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 382, 407, 433, 435, 484], "reference_flux": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "energy_axi": [19, 20, 26, 97, 100, 104, 105, 106, 113, 115, 135, 136, 137, 148, 150, 151, 158, 178, 179, 181, 187, 190, 191, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 378, 423, 424, 427, 429, 430, 431, 433, 437, 439, 440, 446, 447, 452, 454, 455, 456, 459, 464, 465, 473, 492, 495, 497, 498, 500, 501], "spectral_index": [19, 20, 26, 52, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "05": [19, 20, 26, 29, 42, 65, 69, 83, 86, 112, 122, 189, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 315, 382, 422, 423, 424, 425, 426, 427, 431, 434, 435, 436, 437, 440, 442, 443, 446, 449, 450, 451, 452, 453, 454, 455, 458, 461, 462, 463, 465, 467, 472, 473, 500, 505, 514, 534], "index": [19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 85, 86, 87, 95, 96, 97, 100, 104, 105, 112, 113, 115, 116, 117, 121, 122, 123, 127, 135, 136, 137, 143, 146, 148, 151, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 195, 197, 199, 200, 201, 204, 206, 208, 210, 211, 212, 216, 222, 223, 225, 226, 228, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 259, 291, 305, 310, 357, 360, 363, 364, 365, 366, 369, 370, 377, 378, 379, 383, 386, 396, 410, 412, 413, 419, 420, 424, 425, 427, 428, 430, 431, 432, 435, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 453, 454, 458, 459, 463, 464, 465, 466, 472, 473, 474, 486, 499, 500, 501, 504, 505, 506, 507, 509, 510, 511, 512, 514, 516, 518, 519, 520, 525, 526, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543], "increment": [19, 20, 26, 108, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 368, 456, 500], "determin": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 106, 122, 139, 145, 147, 149, 161, 162, 164, 166, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 254, 256, 283, 305, 365, 369, 372, 380, 407, 419, 420, 423, 429, 432, 433, 438, 445, 455, 457, 478, 546], "spectral_index_error": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 419], "index_error": [19, 20, 26, 200, 201, 204, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256], "its": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 113, 115, 154, 155, 164, 177, 183, 185, 200, 201, 204, 207, 208, 210, 211, 212, 216, 222, 223, 225, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 252, 256, 265, 354, 357, 360, 363, 364, 366, 369, 370, 371, 373, 378, 380, 381, 384, 387, 405, 419, 420, 424, 428, 429, 432, 439, 440, 444, 445, 446, 451, 453, 455, 456, 457, 458, 459, 461, 472, 474, 477, 493, 495, 497, 499, 500, 501, 547, 550], "to_dict": [19, 20, 26, 94, 96, 97, 100, 104, 105, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 381, 461], "full_output": [19, 20, 26, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257], "unfreez": [19, 20, 26, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 524], "restor": [19, 20, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 458], "m_": [20, 50, 52, 53], "darkmatterannihilationspectralmodel": [20, 238, 416, 450, 459], "lifetime_age_of_univers": 20, "3e": [20, 115, 121, 437, 440, 445, 448, 451, 458], "17": [20, 21, 40, 65, 82, 365, 368, 371, 402, 419, 422, 423, 437, 441, 442, 448, 451, 452, 453, 454, 455, 456, 458, 459, 464, 465, 474, 550], "ag": [20, 43, 44, 45, 50, 51, 52, 53, 54, 287, 354, 478], "univsers": 20, "lifetim": [20, 420], "serialis": [20, 97, 100, 104, 105, 200, 201, 204, 206, 208, 210, 211, 212, 214, 216, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 235, 239, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 366, 368, 370, 373, 375, 376, 377, 397, 399, 401, 405, 410, 413, 415, 416, 418, 419, 420, 461, 472, 488, 501, 543], "alpha": [21, 27, 28, 48, 97, 100, 104, 105, 153, 175, 211, 212, 221, 222, 223, 236, 268, 278, 280, 351, 352, 366, 377, 379, 405, 412, 423, 424, 425, 427, 429, 430, 433, 435, 436, 440, 448, 451, 453, 461, 505, 514, 516, 518, 520, 522, 523, 524, 539, 540, 549, 550, 551], "einasto": [21, 476], "exp": [21, 28, 29, 30, 31, 32, 35, 36, 39, 40, 138, 213, 216, 223, 234, 235, 247, 355, 377, 447, 459, 506, 507, 514, 518, 519, 520, 521, 530, 531, 532, 536, 537, 538, 551], "left": [21, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 83, 86, 97, 104, 113, 115, 120, 123, 136, 138, 178, 179, 181, 187, 190, 191, 212, 216, 235, 247, 269, 275, 354, 362, 364, 368, 370, 373, 377, 390, 431, 437, 445, 447, 458, 486, 495, 498, 506, 507, 514, 515, 518, 519, 521, 522, 524, 526, 529, 530, 531, 532, 536, 537, 538, 540, 549, 550, 551], "right": [21, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 51, 52, 53, 83, 86, 97, 104, 113, 115, 123, 138, 212, 216, 235, 247, 269, 275, 342, 354, 368, 377, 380, 431, 437, 439, 445, 447, 463, 505, 506, 507, 514, 515, 518, 519, 521, 522, 526, 529, 530, 531, 532, 536, 537, 538, 540, 548, 549, 550, 551], "characterist": [21, 25, 27, 51, 52, 53, 54, 124, 272, 365, 419, 444, 547], "1965tralm": 21, "87e": 21, "default_alpha": [21, 27], "28": [21, 24, 65, 89, 128, 129, 363, 392, 422, 425, 428, 429, 430, 431, 437, 439, 443, 447, 450, 451, 455, 456, 458, 462, 463, 474], "44": [21, 50, 82, 322, 426, 430, 446, 448, 456, 462], "isotherm": [22, 476], "1991mnra": 22, "249": [22, 406], "523b": 22, "38": [22, 65, 423, 424, 451, 456, 458, 474, 533], "assum": [23, 50, 51, 52, 53, 65, 78, 79, 81, 90, 112, 113, 115, 123, 127, 138, 150, 161, 175, 177, 178, 179, 181, 184, 188, 190, 191, 195, 249, 255, 258, 265, 310, 313, 354, 357, 366, 367, 369, 377, 378, 382, 390, 391, 423, 424, 427, 429, 430, 433, 439, 440, 441, 443, 446, 450, 454, 456, 459, 461, 464, 478, 484, 486, 493, 545, 550], "wcsgeom": [23, 79, 97, 100, 104, 105, 107, 112, 113, 123, 137, 146, 148, 158, 171, 172, 176, 177, 186, 190, 191, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 355, 360, 368, 395, 398, 399, 400, 405, 418, 420, 427, 432, 437, 439, 440, 441, 443, 448, 450, 452, 454, 455, 456, 457, 459, 464, 465, 466, 473, 474, 484, 486, 495, 497, 498, 501, 504, 506, 507, 508, 509], "geometri": [23, 79, 95, 97, 100, 104, 105, 107, 113, 115, 136, 137, 143, 146, 148, 151, 155, 158, 160, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 255, 350, 360, 366, 369, 370, 399, 405, 416, 427, 428, 429, 430, 432, 433, 435, 439, 440, 443, 452, 455, 464, 465, 484, 486, 488, 496, 500, 546, 547], "angular": [23, 97, 100, 118, 136, 137, 143, 148, 151, 154, 179, 186, 189, 191, 207, 215, 218, 253, 287, 290, 354, 370, 418, 429, 440, 448, 493, 494, 547], "compute_differential_jfactor": 23, "differenti": [23, 75, 113, 115, 122, 178, 179, 181, 183, 187, 190, 191, 229, 243, 258, 259, 310, 360, 365, 372, 378, 412, 456, 459, 464, 474, 486, 547], "j_": 23, "ann": [23, 413], "lo": [23, 412], "l": [23, 26, 51, 54, 96, 97, 104, 105, 158, 351, 355, 368, 377, 380, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 443, 447, 448, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 472, 473, 474, 484, 488, 501, 524, 547, 549, 550, 551], "compute_jfactor": [23, 450], "prime": 23, "moor": 24, "84": [24, 393, 427, 429, 437, 451, 458, 501], "2004mnra": 24, "353": [24, 410, 474], "624d": 24, "30": [24, 52, 65, 79, 91, 97, 106, 128, 138, 177, 281, 282, 361, 362, 367, 374, 381, 392, 394, 423, 424, 427, 428, 431, 432, 437, 440, 443, 446, 447, 448, 451, 452, 453, 456, 458, 459, 460, 461, 463, 464, 474, 486, 492, 497, 498, 505, 506, 520, 523, 524, 525, 528], "nfw": [25, 27, 476], "1997apj": 25, "490": 25, "493": [25, 427], "24": [25, 27, 52, 53, 82, 83, 86, 89, 357, 358, 371, 375, 409, 414, 423, 430, 431, 447, 451, 452, 456, 458, 463, 464, 472, 497, 514, 521, 530, 531, 532], "42": [25, 27, 89, 138, 322, 368, 430, 437, 451, 454, 455, 456, 460, 463, 501, 504], "mdm": [26, 450], "templatendspectralmodel": [26, 238, 407, 418, 459], "spectra": [26, 104, 105, 116, 121, 131, 238, 258, 265, 360, 363, 365, 367, 369, 373, 377, 393, 397, 410, 414, 424, 429, 430, 436, 440, 445, 447, 448, 452, 453, 455, 459, 461, 476, 484, 486, 488, 547], "precomput": [26, 96, 115, 452, 458], "cirelli": [26, 476], "et": [26, 33, 59, 124, 138, 208, 273, 274, 364, 431, 438, 444, 476, 547], "al": [26, 33, 59, 124, 138, 208, 273, 274, 364, 431, 438, 444, 476, 547], "2016": [26, 368, 371, 392, 395, 444, 455], "nearest": [26, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 178, 179, 181, 183, 187, 190, 191, 295, 407, 414, 416, 456, 486, 488, 500], "chosen": [26, 135, 148, 151, 177, 178, 179, 187, 190, 191, 206, 215, 228, 354, 357, 369, 370, 373, 428, 446, 455, 456, 460, 461, 465, 472, 486, 496, 497, 501], "differ": [26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 59, 65, 76, 82, 83, 86, 89, 95, 110, 113, 115, 116, 117, 120, 121, 123, 128, 132, 133, 134, 135, 138, 140, 142, 145, 150, 160, 178, 179, 181, 184, 185, 186, 187, 189, 190, 191, 265, 266, 267, 268, 313, 317, 329, 330, 345, 354, 355, 357, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 386, 388, 397, 400, 402, 412, 415, 416, 417, 419, 423, 427, 428, 429, 432, 435, 438, 439, 440, 441, 444, 445, 447, 451, 452, 453, 455, 457, 458, 459, 460, 461, 464, 465, 468, 472, 474, 476, 484, 486, 488, 493, 500, 501, 506, 507, 546, 548, 549, 550], "rest": [26, 357, 371, 373, 451, 483], "allowed_channel": [26, 450], "www": [26, 65, 83, 86, 374, 463], "marcocirelli": 26, "net": [26, 83, 86, 427], "pppc4dmid": 26, "html": [26, 79, 83, 86, 116, 135, 171, 177, 183, 186, 189, 195, 206, 228, 256, 283, 310, 311, 354, 355, 357, 362, 374, 379, 380, 383, 384, 392, 413, 423, 430, 432, 435, 437, 443, 447, 453, 454, 463, 485, 491, 499, 501, 527], "v": [26, 31, 32, 37, 83, 86, 139, 145, 147, 148, 149, 151, 160, 167, 185, 254, 265, 287, 357, 362, 369, 370, 381, 382, 383, 384, 407, 423, 445, 450, 460, 472], "mu": [26, 267, 268, 269, 347, 382, 450, 461, 492, 493, 550], "tau": [26, 51, 54, 382, 450, 514], "w": [26, 31, 49, 82, 175, 188, 280, 355, 379, 431, 433, 441, 450, 455, 459, 461, 488, 497, 549, 551], "wl": [26, 450], "wt": [26, 450], "zl": [26, 450], "zt": [26, 450], "c": [26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 83, 86, 184, 194, 210, 247, 269, 275, 283, 322, 353, 354, 371, 386, 387, 389, 406, 413, 448, 450, 453, 461, 464, 476, 500, 519, 530, 548, 549, 551], "el": [26, 450], "er": [26, 450], "h": [26, 65, 78, 82, 83, 86, 90, 118, 137, 178, 179, 181, 187, 190, 191, 344, 374, 377, 386, 390, 391, 399, 414, 422, 423, 424, 427, 428, 430, 436, 438, 445, 446, 447, 450, 454, 455, 456, 459, 463, 464, 465, 467, 468, 470, 472, 473, 483, 485, 488, 501, 536, 537, 547, 548], "mul": [26, 450, 459, 514, 520, 523, 525, 528, 533], "mur": [26, 450], "nu_e": [26, 450], "nu_mu": [26, 450], "nu_tau": [26, 450], "q": [26, 79, 83, 86, 349, 450], "taul": [26, 450], "taur": [26, 450], "regionndmap": [26, 101, 104, 105, 122, 159, 160, 165, 167, 178, 179, 181, 186, 190, 191, 203, 207, 215, 218, 220, 230, 240, 241, 245, 251, 252, 255, 351, 368, 386, 401, 402, 405, 408, 416, 419, 440, 464, 484, 543], "table_filenam": 26, "gammapy_data": [26, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 82, 84, 85, 86, 89, 91, 96, 97, 100, 104, 105, 108, 112, 115, 117, 119, 121, 123, 128, 129, 130, 131, 133, 137, 138, 139, 140, 148, 158, 178, 179, 181, 187, 190, 191, 209, 220, 256, 265, 281, 282, 333, 342, 347, 349, 354, 355, 357, 370, 386, 388, 390, 394, 395, 396, 405, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 485, 486, 488, 490, 491, 492, 494, 495, 497, 498, 512, 542, 543], "dark_matter_spectra": 26, "atproduction_gamma": 26, "dat": [26, 83, 86, 206, 228, 428, 472, 476], "pf": 26, "primari": [26, 83, 86, 178, 179, 181, 182, 190, 191, 359, 380, 401, 416, 456], "serilis": [26, 202, 203, 205, 207, 213, 215, 217, 218, 219, 221, 230, 232, 236, 240, 241, 242, 243, 245, 252, 255, 257], "beta": [27, 28, 48, 221, 222, 223, 244, 377, 379, 401, 425, 429, 436, 451, 453, 516, 522, 523, 524, 529, 539], "zhao": [27, 420], "equat": [27, 248, 249, 273, 510, 511, 515, 518, 519, 521, 522, 526, 527, 529, 530, 531, 532, 550, 551], "1996": [27, 431, 444, 547], "volum": [27, 182, 186, 189], "doubl": [27, 112, 124, 272, 380, 412, 420], "law": [27, 96, 112, 113, 115, 117, 122, 127, 146, 148, 151, 200, 210, 211, 212, 233, 234, 235, 236, 244, 247, 248, 249, 258, 310, 367, 393, 399, 413, 422, 430, 432, 435, 439, 441, 443, 446, 447, 448, 458, 459, 461, 488, 502, 514, 534, 540], "radii": [27, 450, 464, 506], "smaller": [27, 137, 148, 151, 166, 177, 178, 179, 181, 187, 190, 191, 347, 357, 395, 414, 439, 444, 446, 453, 456, 461, 506], "than": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 122, 139, 140, 147, 149, 155, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 265, 273, 332, 347, 354, 357, 359, 360, 361, 364, 367, 368, 369, 372, 373, 378, 380, 381, 384, 413, 416, 417, 418, 420, 423, 424, 435, 436, 439, 444, 445, 446, 453, 455, 457, 460, 461, 484, 501, 506, 507, 548, 550], "describ": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 90, 115, 116, 118, 123, 147, 187, 195, 256, 276, 355, 357, 359, 360, 363, 364, 366, 367, 368, 370, 371, 373, 374, 377, 378, 379, 380, 391, 397, 405, 413, 414, 428, 431, 439, 440, 444, 453, 459, 461, 463, 465, 466, 472, 484, 488, 492, 501, 502, 547, 548, 549, 550], "slope": [27, 396], "larger": [27, 122, 265, 273, 355, 362, 373, 419, 423, 424, 427, 452, 455, 456, 457, 461, 485, 501, 507, 549, 550], "measur": [27, 65, 100, 105, 119, 183, 259, 267, 268, 271, 272, 273, 274, 277, 278, 280, 360, 368, 373, 378, 384, 393, 398, 406, 412, 414, 424, 427, 429, 430, 433, 436, 438, 441, 443, 444, 445, 446, 451, 464, 473, 474, 486, 493, 495, 498, 546, 547, 550, 551], "transit": [27, 344, 345, 361, 394, 395, 413, 465], "1996mnra": 27, "278": [27, 409, 430, 443, 451, 458], "488z": 27, "default_beta": 27, "default_gamma": 27, "same": [27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 83, 86, 90, 95, 97, 100, 101, 104, 105, 112, 128, 129, 139, 140, 146, 147, 148, 149, 151, 152, 154, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191, 259, 273, 347, 354, 357, 362, 364, 366, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 386, 387, 397, 398, 402, 405, 419, 425, 428, 429, 430, 435, 436, 439, 443, 445, 448, 451, 452, 456, 457, 458, 459, 460, 461, 464, 465, 468, 472, 484, 485, 486, 492, 500, 501, 548], "amplitud": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49, 66, 96, 116, 121, 123, 178, 179, 181, 190, 191, 200, 207, 210, 212, 216, 223, 226, 233, 234, 235, 242, 244, 247, 248, 249, 259, 265, 276, 365, 366, 369, 377, 424, 425, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 451, 452, 453, 458, 459, 463, 464, 472, 473, 474, 486, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550], "53": [28, 437, 461, 505, 514], "fittable1dmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "radial": [28, 30, 35, 36, 39, 40, 45, 119, 175, 179, 309, 354, 365, 373, 378, 395, 410, 412, 420, 439, 441, 455, 463, 476, 478, 494, 497], "surfac": [28, 30, 35, 36, 39, 40, 45, 195, 243, 258, 309, 373, 402, 453, 459, 478], "supernova": [28, 52, 424, 438, 459, 478, 479], "remnant": [28, 52, 424, 438, 459, 479], "galaxi": [28, 30, 35, 39, 40, 41, 208, 273, 274, 393, 424], "odot": [28, 35, 39, 40, 52], "formula": [28, 29, 30, 31, 35, 36, 37, 39, 40, 50, 52, 53, 147, 234, 235, 280, 423, 549], "14": [28, 63, 65, 82, 355, 358, 363, 366, 371, 373, 374, 412, 422, 423, 425, 426, 427, 428, 431, 435, 442, 448, 451, 452, 453, 455, 457, 458, 459, 462, 473, 474, 538, 539, 540, 541, 549], "paczynski1990": [28, 29, 30, 35, 37, 39, 40, 48], "yusifovkucuk2004": [28, 29, 30, 35, 36, 40, 48], "lorimer2006": [28, 29, 30, 36, 39, 40, 48], "yusifovkucuk2004b": [28, 29, 30, 35, 36, 39, 48], "faucherkaspi2006": [28, 29, 31, 35, 36, 39, 40, 48], "exponenti": [28, 30, 36, 39, 40, 210, 211, 212, 213, 247, 248, 249, 355, 365, 399, 422, 435, 439, 447, 502, 534], "ui": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 108, 116, 138, 225, 258, 259, 274], "adsab": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 108, 116, 138, 225, 258, 259, 274], "harvard": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 108, 116, 138, 195, 225, 258, 259, 274, 374, 453], "edu": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 79, 84, 108, 116, 138, 177, 186, 189, 195, 206, 225, 228, 258, 259, 274, 374, 453, 501], "ab": [28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 50, 52, 53, 57, 58, 60, 61, 63, 79, 84, 108, 116, 138, 191, 196, 198, 225, 258, 259, 274, 450, 451], "1998apj": 28, "504": 28, "761c": 28, "bbox_with_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "n_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 97, 100, 117, 118, 186, 189, 191, 315, 316, 363, 368, 372, 378, 412, 457, 459, 501], "limit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 53, 76, 83, 86, 96, 106, 112, 113, 114, 115, 116, 117, 120, 121, 123, 135, 150, 153, 183, 197, 199, 233, 266, 267, 268, 303, 304, 341, 360, 362, 363, 365, 366, 367, 368, 369, 371, 372, 374, 375, 377, 378, 382, 395, 401, 405, 412, 413, 414, 415, 420, 423, 427, 435, 438, 441, 445, 452, 453, 456, 457, 460, 464, 472, 484, 486, 488, 497, 506, 524, 533, 546, 547, 551], "notimplementederror": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "bodi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "just": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 138, 329, 354, 355, 356, 357, 359, 362, 364, 368, 370, 371, 372, 374, 383, 384, 385, 387, 413, 415, 427, 428, 430, 435, 437, 439, 444, 445, 446, 448, 452, 456, 464, 465, 472, 474, 485, 501, 548], "assign": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 98, 103, 104, 177, 243, 253, 350, 354, 363, 366, 369, 381, 383, 424, 443, 445, 452, 456, 459, 461, 473, 474, 500], "manual": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 361, 366, 376, 383, 439, 488, 496, 548, 549], "shape": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 96, 97, 100, 104, 105, 112, 113, 117, 118, 123, 127, 128, 129, 133, 135, 138, 176, 177, 178, 179, 181, 182, 184, 186, 187, 189, 190, 191, 194, 218, 266, 283, 296, 312, 365, 368, 372, 403, 418, 425, 427, 429, 432, 437, 440, 441, 444, 446, 451, 452, 454, 455, 456, 457, 459, 463, 464, 474, 486, 500, 501, 502, 507, 511], "effici": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 84, 100, 105, 359, 365, 366, 367, 368, 369, 376, 425, 460, 493, 498, 550], "render": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 332, 354, 362, 413], "order": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 83, 86, 89, 95, 96, 97, 100, 115, 132, 133, 136, 137, 143, 148, 151, 154, 158, 165, 168, 169, 174, 176, 177, 178, 179, 181, 182, 186, 187, 188, 189, 190, 191, 253, 265, 283, 351, 355, 360, 365, 366, 368, 369, 370, 371, 378, 379, 380, 382, 395, 396, 397, 398, 399, 400, 401, 402, 405, 427, 428, 429, 431, 435, 436, 439, 448, 451, 453, 454, 455, 456, 459, 465, 472, 473, 474, 499, 500, 501, 548, 551], "convent": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 177, 178, 179, 181, 189, 190, 191, 376, 378, 397, 398, 401, 402, 416, 452, 455, 456, 459, 484, 486, 493, 500, 550], "revers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50, 53, 83, 86, 87, 95, 182, 228, 456, 481], "x_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "x_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 158, 168, 169, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 195, 215, 360, 365, 370, 373, 374, 375, 386, 394, 400, 413, 414, 415, 422, 431, 433, 434, 437, 456, 457, 474, 484, 487, 498, 499, 500, 512], "y_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "y_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 47, 133, 139, 146, 147, 149, 158, 262, 264, 360, 363, 364, 365, 369, 370, 373, 374, 375, 386, 394, 395, 396, 398, 399, 400, 401, 412, 413, 414, 422, 423, 425, 427, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 472, 473, 484, 486, 487, 488, 493, 495, 496, 500, 545, 547], "z_low": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "z_high": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "gaussian1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "gaussian2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 50], "model_1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 428], "model_2d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "x_stddev": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "y_stddev": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "custom_model": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "const3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "amp": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 242, 541], "model_3d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "reset": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 214, 253, 355, 402], "delet": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 354, 365, 384, 385, 386, 388, 420, 458], "back": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 67, 83, 86, 179, 295, 357, 364, 365, 368, 374, 427, 428, 430, 456, 459, 472, 548], "del": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 365], "disabl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354, 405], "traceback": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354], "most": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 90, 108, 115, 353, 354, 355, 357, 359, 360, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 405, 412, 413, 415, 416, 419, 420, 432, 433, 441, 445, 447, 451, 453, 454, 455, 456, 457, 463, 464, 468, 474, 476, 486, 487, 488, 493, 501, 545, 547, 548, 551], "recent": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 364, 368, 369, 370, 371, 374, 387, 394, 408, 414, 436, 463, 465], "last": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 87, 89, 95, 178, 179, 180, 181, 183, 187, 190, 191, 228, 313, 351, 361, 364, 366, 376, 380, 383, 384, 386, 388, 394, 395, 444, 497], "No": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 365, 375, 378, 379, 413, 415, 421, 441, 451, 453, 455, 456, 474], "col_fit_deriv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "cov_matrix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "fitter": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 412, 413, 425], "matrix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 135, 136, 137, 140, 194, 195, 197, 206, 228, 267, 268, 347, 371, 372, 382, 415, 416, 419, 453, 454, 484, 486, 492], "eqcon": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "equal": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 108, 112, 116, 120, 123, 135, 183, 354, 364, 367, 415, 427, 445, 446, 457, 461, 484, 500, 551], "constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 488], "evolv": [28, 29, 30, 35, 36, 39, 40, 50, 52, 53, 208, 371, 374, 381, 440, 454], "fit_deriv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "similar": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 345, 354, 357, 366, 367, 368, 369, 370, 373, 374, 375, 378, 405, 419, 429, 444, 456, 460, 461, 474, 484, 492, 548], "algorithm": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 59, 83, 86, 108, 123, 153, 195, 354, 360, 366, 367, 368, 373, 381, 397, 402, 410, 411, 412, 431, 444, 453, 465, 486, 500, 546, 550], "word": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 488], "jacobian": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 401], "fittabl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "fix": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 81, 84, 89, 90, 101, 102, 130, 148, 150, 165, 195, 230, 231, 236, 255, 357, 359, 360, 361, 365, 366, 369, 371, 376, 378, 379, 380, 383, 384, 386, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 423, 429, 430, 432, 433, 435, 436, 439, 443, 446, 447, 453, 454, 455, 458, 459, 460, 472, 498, 500, 508, 525], "has_user_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "flag": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 98, 103, 113, 115, 116, 117, 120, 121, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 195, 424, 435, 439, 451, 459], "indic": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 354, 416, 430, 440, 444, 455, 456, 460, 461, 465, 466, 488, 500, 501, 547], "via": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 79, 86, 98, 103, 179, 184, 194, 353, 355, 357, 362, 366, 368, 369, 370, 371, 372, 373, 375, 377, 380, 381, 382, 383, 384, 386, 387, 394, 402, 410, 412, 413, 414, 418, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 488, 492, 497, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 552], "has_user_invers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ineqcon": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "inequ": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "expect": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 100, 103, 105, 113, 163, 168, 169, 174, 189, 267, 268, 269, 271, 275, 280, 313, 354, 359, 367, 369, 370, 371, 374, 379, 381, 423, 424, 429, 430, 431, 433, 439, 440, 444, 445, 450, 453, 456, 457, 461, 464, 466, 484, 486, 549, 550, 551], "input_units_allow_dimensionless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "dimensionless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 140, 248, 249, 282, 441, 459], "gain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 359, 371, 413], "effect": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 45, 46, 78, 83, 84, 86, 100, 102, 137, 138, 164, 165, 170, 172, 173, 186, 206, 228, 344, 345, 354, 359, 364, 365, 367, 368, 378, 409, 411, 427, 439, 441, 444, 445, 461, 465, 466, 468, 472, 493, 501, 506, 507, 547], "input_units_equival": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_units_strict": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "exact": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 86, 372, 456, 464], "thei": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 90, 103, 106, 120, 124, 152, 254, 272, 303, 354, 355, 357, 359, 360, 361, 362, 363, 365, 368, 370, 371, 373, 374, 377, 378, 379, 380, 381, 382, 384, 391, 402, 405, 407, 419, 420, 424, 425, 429, 450, 452, 453, 457, 458, 459, 460, 461, 463, 466, 476, 485, 486, 488, 493, 500, 501, 546, 547, 548, 549, 550, 552], "transform": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 89, 146, 180, 182, 183, 188, 189, 206, 228, 285, 289, 312, 317, 354, 368, 370, 378, 382, 393, 395, 411, 414, 431, 437, 455, 461, 500, 505, 506, 552], "even": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 189, 197, 199, 354, 357, 359, 361, 362, 368, 371, 372, 380, 381, 397, 445, 448, 453, 455, 456, 457, 458, 459, 472, 484, 486, 510, 511, 548], "don": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 135, 353, 354, 357, 359, 361, 362, 371, 381, 384, 424, 427, 432, 437, 445, 457, 459, 476, 546, 548, 551, 552], "experiment": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 370, 548], "often": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 124, 259, 344, 345, 354, 359, 368, 369, 370, 372, 412, 423, 424, 428, 432, 433, 436, 437, 443, 452, 453, 455, 457, 472, 473, 484, 547], "polynomialmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "author": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383], "simpli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 83, 86, 155, 195, 197, 199, 354, 368, 369, 378, 387, 416, 419, 423, 424, 437, 452, 457, 458, 459, 474, 501, 548, 550], "appropri": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 177, 178, 179, 181, 190, 191, 283, 291, 355, 429, 433, 435, 456, 548], "machineri": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 435], "ad": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 59, 78, 79, 83, 86, 97, 100, 104, 105, 115, 178, 179, 181, 186, 187, 190, 191, 354, 355, 357, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 378, 380, 394, 395, 396, 398, 399, 400, 402, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 429, 435, 436, 454, 455, 458, 459, 460, 461, 465, 484, 501, 551], "meta": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 81, 83, 84, 86, 89, 95, 97, 98, 100, 102, 103, 104, 105, 113, 115, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 165, 178, 179, 181, 187, 190, 191, 251, 252, 255, 256, 293, 335, 336, 337, 338, 364, 367, 368, 369, 378, 381, 401, 402, 413, 417, 419, 420, 439, 448, 456, 460, 463, 465, 485, 486, 543], "model_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "primarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "purpos": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 307, 329, 358, 360, 366, 369, 373, 377, 379, 380, 413, 431, 452, 458, 459, 492], "constrain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 380, 432, 436, 455, 461], "model_set_axi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "pertain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "n_output": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49], "n_submodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "singl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 83, 84, 85, 86, 88, 90, 112, 116, 117, 120, 123, 136, 137, 148, 150, 151, 154, 158, 160, 165, 168, 169, 174, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 206, 228, 354, 360, 361, 364, 366, 367, 368, 369, 370, 371, 375, 376, 381, 382, 386, 393, 395, 400, 401, 413, 419, 420, 423, 427, 429, 431, 432, 433, 445, 447, 451, 452, 455, 456, 458, 461, 465, 466, 472, 474, 484, 486, 498, 500, 501, 545, 547], "obvious": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 476], "param_nam": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "polynomi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 225, 456], "degre": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 97, 100, 104, 105, 106, 107, 110, 113, 115, 177, 178, 179, 181, 184, 189, 190, 191, 206, 228, 232, 243, 254, 420, 423, 424, 428, 433, 438, 446, 451, 455, 456, 457, 463, 472, 486, 500, 501, 550, 551], "param_set": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "pset": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "item": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 87, 95, 185, 228, 374, 381], "across": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 95, 108, 148, 151, 354, 363, 366, 384, 438, 447, 458, 464, 484, 500, 509, 547], "associ": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 76, 83, 86, 95, 97, 100, 113, 122, 124, 125, 126, 136, 137, 148, 151, 168, 169, 174, 187, 254, 283, 360, 370, 378, 379, 380, 381, 382, 419, 420, 424, 425, 427, 431, 436, 451, 452, 455, 456, 458, 459, 465, 474, 485, 486, 488, 501, 550], "parameter_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ti": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 179, 363, 447], "flatten": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 176, 177, 184, 186, 189, 444], "maintain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 354, 356, 371, 373, 374, 375, 379, 383, 384, 414, 455], "modifi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 83, 86, 88, 97, 104, 115, 116, 117, 120, 123, 154, 195, 303, 326, 351, 364, 366, 370, 376, 380, 381, 400, 402, 403, 405, 407, 415, 418, 419, 428, 440, 455, 457, 461, 465, 472, 486, 488, 501, 552], "return_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "standard_broadcast": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "std": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 282, 430, 444, 464], "standard": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 82, 83, 86, 91, 179, 191, 195, 259, 282, 336, 337, 354, 355, 357, 359, 363, 365, 366, 367, 370, 372, 378, 380, 381, 390, 397, 398, 414, 420, 423, 428, 430, 433, 436, 438, 440, 443, 446, 447, 450, 453, 456, 459, 460, 461, 463, 466, 468, 472, 484, 487, 492, 500, 546, 547, 548], "deviat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 42, 116, 179, 191, 195, 271, 453, 461], "sync_constraint": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "boolean": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 113, 116, 117, 120, 121, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 195, 206, 228, 243, 370, 402, 435, 451, 456, 457, 458], "access": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 56, 58, 60, 61, 63, 64, 65, 78, 79, 83, 84, 86, 97, 146, 176, 177, 186, 189, 274, 291, 354, 362, 363, 364, 365, 367, 370, 378, 384, 386, 389, 394, 395, 402, 409, 410, 412, 413, 419, 420, 425, 427, 428, 429, 435, 451, 453, 454, 458, 459, 463, 466, 472, 473, 474, 483, 488, 499, 500, 501, 546], "check": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 82, 83, 84, 86, 97, 100, 101, 104, 105, 113, 115, 135, 136, 137, 143, 148, 151, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 197, 199, 206, 228, 243, 328, 330, 357, 370, 376, 380, 383, 384, 386, 387, 388, 391, 400, 405, 413, 425, 443, 454, 468, 476, 488, 492, 501, 545, 548, 549], "constitu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "creation": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 80, 99, 114, 117, 189, 363, 364, 368, 377, 380, 399, 405, 444, 459, 466], "reason": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354, 359, 360, 361, 362, 365, 366, 367, 369, 371, 373, 375, 380, 413, 439, 453, 461, 465, 484, 548], "uses_quant": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "regular": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 177, 185, 189, 363, 382, 407, 419, 443, 456, 457], "with_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "fill_valu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191, 251, 252, 255, 256, 354, 454, 456, 464], "equival": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 113, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 347, 355, 366, 367, 368, 377, 378, 419, 420, 451, 455, 456, 457, 459, 463, 472, 484, 486, 488, 499, 500, 501, 548, 549, 550], "inputs_map": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "new_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "coerce_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "attach": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 81, 89, 206, 214, 228, 243, 253, 365, 375, 418, 447, 453, 458, 459, 548], "unitless": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 214, 253], "appli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 82, 83, 85, 86, 96, 97, 98, 100, 104, 105, 108, 112, 115, 116, 120, 123, 135, 136, 137, 143, 148, 150, 151, 155, 161, 164, 165, 178, 179, 181, 182, 186, 187, 189, 190, 191, 196, 198, 206, 214, 228, 243, 256, 266, 267, 268, 295, 296, 339, 343, 351, 354, 360, 361, 364, 365, 367, 369, 372, 378, 379, 380, 402, 407, 412, 413, 414, 415, 419, 423, 427, 429, 439, 446, 447, 448, 452, 455, 456, 457, 458, 459, 461, 463, 466, 473, 474, 486, 488, 533, 546, 549], "compoundmodel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 407], "compos": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 360, 380], "plu": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 207, 374, 380, 459], "unitsmap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "wrap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 239, 291, 368, 398], "polynomial1d": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "poli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 179], "c0": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "c1": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "21": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 96, 117, 133, 357, 358, 402, 408, 417, 423, 427, 431, 433, 437, 446, 447, 450, 451, 454, 456, 474, 501, 549], "1000": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 179, 184, 354, 357, 422, 425, 442, 451, 452, 454, 461, 464, 474, 500], "still": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 361, 362, 364, 367, 368, 371, 373, 374, 375, 378, 379, 381, 383, 384, 412, 413, 414, 459, 461, 474, 486, 510, 511, 548], "permit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 380], "so": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 79, 83, 86, 90, 100, 105, 112, 116, 118, 120, 121, 123, 131, 175, 178, 179, 181, 183, 187, 190, 191, 195, 196, 198, 218, 255, 265, 329, 337, 344, 345, 354, 355, 357, 359, 360, 361, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 381, 383, 385, 386, 388, 390, 395, 397, 405, 415, 417, 418, 424, 427, 429, 431, 432, 437, 438, 439, 443, 445, 450, 451, 453, 456, 457, 459, 461, 463, 464, 465, 468, 473, 488, 497, 501, 507, 511, 548, 549, 550, 551], "deepcopi": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 251, 253, 255], "get_bounding_box": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "with_bbox": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "look": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 79, 84, 97, 100, 104, 105, 115, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 313, 354, 356, 357, 359, 366, 368, 369, 371, 373, 374, 377, 390, 413, 424, 427, 428, 430, 431, 432, 433, 435, 437, 439, 441, 443, 445, 447, 448, 452, 454, 456, 459, 463, 464, 466, 468, 472, 474, 476, 485, 488, 548], "up": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 117, 119, 123, 139, 145, 147, 149, 186, 283, 354, 355, 358, 359, 361, 362, 363, 366, 368, 370, 371, 372, 374, 376, 380, 382, 384, 385, 386, 388, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 409, 411, 412, 413, 414, 415, 427, 428, 435, 438, 439, 461, 463, 464, 501, 548], "risk": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 357, 380], "has_invers": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "input_shap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "output_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "abl": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 364, 369, 372, 424, 443, 445, 446, 461, 468, 548], "temporarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 365], "strip": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "awai": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 267, 268], "done": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 113, 116, 347, 354, 355, 357, 359, 360, 361, 365, 367, 368, 369, 370, 372, 373, 374, 377, 378, 380, 386, 390, 414, 419, 424, 430, 435, 436, 440, 441, 443, 447, 448, 452, 455, 456, 459, 460, 484, 488, 496, 497, 501, 533, 550, 552], "mayb": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354, 362, 364, 365, 376], "computation": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 195, 367, 368, 484], "expens": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 427, 440], "prepare_input": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "ensur": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 164, 265, 354, 360, 365, 366, 377, 381, 387, 407, 423, 427, 446, 457, 509], "broadcast": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 178, 179, 181, 184, 187, 190, 191, 243, 295, 440, 454, 456, 500], "compat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 178, 179, 181, 190, 191, 214, 359, 361, 365, 368, 377, 379, 381, 382, 390, 393, 395, 397, 414, 420, 456, 500], "both": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 57, 68, 78, 79, 82, 83, 84, 86, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 135, 136, 137, 143, 148, 151, 175, 178, 179, 181, 183, 185, 186, 187, 189, 190, 191, 196, 198, 354, 359, 360, 365, 366, 367, 368, 369, 374, 379, 383, 395, 399, 401, 402, 405, 408, 428, 429, 439, 443, 452, 456, 457, 458, 460, 461, 485, 486, 488, 500, 501, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 550], "particularli": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sure": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354, 357, 359, 370, 383, 427, 445, 456, 488, 548], "applic": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 66, 83, 86, 354, 365, 380, 382, 401, 444, 453, 500, 547], "prepare_output": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "broadcasted_shap": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "renam": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 115, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 357, 364, 365, 373, 374, 377, 393, 396, 398, 399, 400, 401, 405, 415, 416, 419, 548], "rel": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 78, 83, 84, 86, 100, 101, 105, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 188, 189, 190, 191, 240, 259, 272, 313, 369, 380, 405, 444, 447, 465, 511, 550], "translat": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 370, 486], "yield": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 79, 84, 87, 178, 179, 181, 187, 190, 191, 319, 361, 367, 368, 373, 375, 377, 382, 457, 549, 550, 551], "els": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 113, 115, 123, 185, 354, 357, 368, 371, 378, 381, 382, 384, 386, 388, 460, 548, 550], "over": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 83, 84, 86, 87, 90, 97, 100, 104, 105, 116, 123, 124, 135, 136, 146, 148, 151, 158, 165, 168, 169, 171, 172, 178, 179, 181, 182, 183, 187, 189, 190, 191, 206, 228, 258, 267, 268, 272, 294, 295, 308, 345, 354, 355, 359, 362, 363, 364, 367, 368, 369, 374, 377, 381, 385, 387, 405, 424, 427, 435, 438, 439, 447, 451, 452, 455, 456, 459, 461, 473, 474, 486, 492, 549, 550], "arr": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "set_slice_arg": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "strip_units_from_tre": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sum_of_implicit_term": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "sum": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 82, 97, 100, 104, 105, 115, 116, 117, 119, 120, 121, 123, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 258, 267, 268, 270, 350, 354, 364, 365, 367, 376, 378, 382, 396, 420, 435, 439, 448, 450, 452, 461, 464, 472, 473, 474, 484, 494, 547, 549], "implicit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 493], "term": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 221, 277, 280, 357, 359, 361, 363, 364, 368, 371, 374, 379, 381, 403, 407, 416, 431, 453, 454, 548, 550, 551], "prototyp": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 354, 359, 365, 367, 370, 371, 372, 374, 410, 412, 413, 420, 477], "functional_model": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "shift": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 255, 390], "bx": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "intrins": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 229, 274, 365, 369], "correct": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 65, 79, 84, 97, 98, 100, 137, 148, 151, 165, 170, 171, 214, 230, 231, 255, 354, 366, 367, 379, 380, 381, 383, 397, 400, 402, 403, 404, 405, 408, 411, 412, 414, 416, 417, 418, 419, 420, 423, 427, 428, 429, 430, 439, 443, 445, 451, 452, 453, 455, 457, 458, 459, 461, 465, 472, 474, 485, 486, 495, 508, 520, 523, 525, 528, 533], "solv": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 357, 362, 364, 365, 366, 367, 407, 488], "remain": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 95, 359, 360, 361, 362, 367, 371, 380, 395, 414, 429, 458, 494], "ie": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 380, 458, 459, 484, 547], "with_units_from_data": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "necessarili": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 78, 369, 432], "presenc": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 431, 444, 456, 524, 547], "_parameter_units_for_data_unit": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "take": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 83, 86, 97, 100, 104, 105, 112, 133, 153, 155, 187, 189, 195, 206, 228, 243, 329, 352, 354, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 378, 384, 400, 401, 402, 405, 407, 415, 416, 418, 419, 420, 423, 424, 429, 430, 439, 440, 441, 447, 448, 453, 455, 456, 457, 459, 460, 461, 463, 473, 474, 485, 488, 501, 517, 549, 550, 551], "target": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 84, 97, 100, 104, 105, 107, 108, 112, 114, 123, 136, 137, 148, 151, 168, 169, 173, 174, 178, 179, 181, 183, 187, 190, 191, 360, 361, 367, 380, 383, 411, 424, 429, 437, 446, 455, 457, 473], "without_units_for_data": [28, 29, 30, 31, 32, 35, 36, 37, 39, 40], "z_0": 29, "usual": [29, 78, 79, 113, 128, 132, 133, 134, 146, 187, 291, 354, 355, 357, 359, 360, 361, 362, 368, 369, 374, 380, 384, 419, 423, 424, 425, 427, 429, 430, 432, 433, 437, 439, 440, 443, 444, 445, 446, 447, 450, 452, 457, 460, 465, 473, 476, 484, 488, 490, 491, 492, 494, 497, 501, 506, 545, 547, 548, 549], "abov": [29, 44, 52, 53, 79, 112, 114, 115, 118, 122, 123, 128, 129, 153, 188, 343, 345, 354, 355, 360, 363, 364, 366, 368, 370, 371, 372, 373, 374, 378, 386, 387, 390, 423, 437, 439, 440, 441, 445, 448, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 472, 482, 484, 485, 492, 501, 547, 548, 549, 550, 551], "plane": [29, 65, 66, 116, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 374, 450, 451, 456, 463, 483, 498, 501, 506, 547, 553], "commonli": [29, 79, 368, 372, 414, 441, 476, 545, 546, 548, 550, 553], "birth": [29, 30, 36, 50, 51, 52, 53], "casebattacharya1998": [29, 30, 35, 36, 39, 40, 48], "r_0": [30, 33, 38, 48, 207, 218, 240, 458, 505, 507, 511], "7": [30, 31, 38, 52, 53, 65, 83, 86, 115, 121, 128, 158, 161, 218, 344, 345, 354, 358, 359, 366, 370, 371, 374, 390, 394, 395, 397, 398, 404, 405, 410, 411, 412, 414, 415, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 501, 505, 506, 542, 549, 550], "04": [30, 65, 89, 99, 114, 422, 426, 428, 430, 431, 433, 436, 439, 447, 448, 451, 454, 456, 459, 462, 463, 464, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "83": [30, 65, 79, 81, 89, 97, 100, 104, 105, 158, 161, 427, 428, 429, 431, 436, 445, 452, 455, 456, 457, 465, 466, 472, 473, 492, 495, 497, 498, 501], "pulsar": [30, 31, 32, 35, 39, 42, 50, 54, 79, 364, 374, 395, 397, 416, 419, 422, 433, 438, 449, 459, 468, 478, 479, 484, 485, 486, 488, 496, 500, 545], "appendix": [30, 123, 138, 225, 259, 276, 431], "2006apj": [30, 31, 32, 33], "643": [30, 31, 32, 33], "332f": [30, 31, 32, 33], "sigma_1": [31, 49, 139, 454], "160": [31, 115, 393, 402, 441, 458], "sigma_2": [31, 49, 139, 454], "780": [31, 115], "9": [31, 33, 35, 65, 79, 83, 86, 128, 218, 220, 313, 319, 351, 358, 359, 363, 371, 390, 396, 398, 409, 412, 414, 417, 419, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 500, 507, 511, 512, 513, 520, 523, 536, 544, 549], "bimod": 31, "veloc": [31, 32, 37, 45, 49, 287, 290], "faucher": [31, 33, 37, 39, 45], "kaspi": [31, 39, 45], "2006": [31, 33, 369, 431, 438, 446], "sigma1": 31, "sigma2": 31, "One": [31, 32, 37, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 96, 97, 100, 104, 105, 206, 228, 309, 354, 355, 360, 362, 363, 364, 365, 368, 370, 371, 372, 380, 419, 424, 428, 433, 445, 455, 456, 457, 472, 474, 497, 501, 524, 548, 550], "dimension": [31, 32, 37, 66, 83, 86, 176, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 215, 218, 261, 296, 309, 360, 368, 382, 386, 411, 431, 453, 454, 456, 459, 474, 492, 494, 500, 501, 546, 547], "guiger": [31, 39], "265": [32, 129, 368, 423, 431, 437, 458, 474], "maxwellian": 32, "km": [32, 37], "logspir": [33, 38], "milki": [33, 38, 393, 478], "wai": [33, 38, 79, 83, 86, 183, 307, 313, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 386, 387, 388, 390, 393, 397, 413, 414, 425, 427, 429, 432, 435, 444, 451, 452, 453, 455, 456, 457, 458, 460, 463, 464, 465, 466, 468, 478, 485, 487, 488, 492, 501, 546, 548, 550], "spiral": [33, 34, 38, 45, 409], "arm": [33, 34, 38, 45, 409], "25": [33, 52, 83, 86, 96, 128, 137, 148, 161, 269, 275, 358, 371, 378, 392, 413, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 506, 511], "89": [33, 428, 456], "rad": [33, 79, 84, 97, 100, 104, 105, 106, 107, 139, 145, 147, 148, 149, 150, 151, 161, 174, 242, 370, 407, 419, 429, 452, 454, 455, 464, 493, 494, 497, 541], "48": [33, 158, 393, 435, 436, 456, 458, 464], "spiralarm": [33, 38, 45, 413, 478], "norma": [33, 38], "carina": [33, 38], "sagittariu": [33, 38], "perseu": [33, 38], "crux": [33, 38], "scutum": [33, 38], "dtype": [33, 38, 83, 86, 133, 135, 138, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 206, 228, 283, 354, 382, 429, 432, 441, 451, 452, 454, 455, 456, 463, 464, 474, 486], "u18": [33, 38], "theta_0": [33, 38], "57": [33, 427, 431, 433, 437, 448, 456, 459], "71": [33, 430, 458, 550], "09": [33, 115, 158, 422, 428, 431, 433, 435, 442, 451, 452, 454, 455, 472, 473, 474, 523, 524, 525, 550], "95": [33, 65, 139, 145, 147, 148, 149, 151, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 430, 431, 437, 443, 451, 452, 453, 456, 457, 463, 505, 550], "blur": 33, "random_st": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 306, 307, 310, 311, 312, 313, 354, 367, 430, 439, 440], "seed": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 229, 236, 242, 254, 257, 305, 306, 307, 310, 311, 312, 313, 354, 413, 439, 524], "draw": [33, 179, 305, 367, 461], "theta": [33, 34, 38, 52, 53, 139, 145, 147, 149, 153, 161, 175, 184, 284, 287, 354, 402, 429, 464, 474, 505, 506, 510, 511], "possibl": [33, 78, 83, 86, 141, 354, 355, 357, 361, 362, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 381, 384, 386, 396, 397, 405, 412, 414, 419, 431, 432, 433, 438, 441, 452, 453, 454, 455, 456, 464, 474, 486, 488, 495, 500, 501, 524, 548, 549], "rng": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 307, 310, 311, 312, 313, 354], "randomst": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 307, 310, 311, 312, 313, 354], "initialis": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 307, 310, 311, 312, 313, 354, 376, 461], "get_random_st": [33, 42, 45, 46, 47, 97, 98, 100, 103, 104, 105, 137, 148, 151, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 305, 310, 311, 312, 313, 354], "dx": [33, 287], "dy": [33, 287], "spiralarm_index": [33, 34, 38], "xy_posit": [33, 34, 38], "logarithm": [34, 456, 461, 522], "en": [34, 79, 83, 84, 86, 116, 171, 186, 195, 256, 283, 357, 374, 383, 423, 430, 432, 435, 437, 443, 447, 453, 454, 457, 463, 485, 499, 501], "wikipedia": [34, 79, 84, 312, 368, 372], "wiki": [34, 79, 84, 405, 463], "logarithmic_spir": 34, "2006mnra": [35, 108], "372": [35, 115, 474], "777l": 35, "r_exp": [36, 48], "neutron": 36, "star": [36, 40, 208], "1990apj": [36, 37], "348": [36, 37, 410, 427], "485p": [36, 37], "v_0": [37, 49], "560": [37, 451], "lyne": 37, "1982": 37, "adopt": [37, 367, 370, 375, 429, 439, 440, 450], "paczynski": 37, "1990": [37, 394], "valle": 38, "2008": [38, 82, 208, 256, 464, 476, 514], "2008aj": 38, "135": [38, 96, 129, 425, 451, 453], "1301v": 38, "bar_radiu": 38, "p": [38, 51, 54, 83, 86, 104, 105, 119, 271, 280, 354, 405, 428, 438, 450, 453, 472, 488, 493, 494, 550], "r_sun": 38, "64": [39, 65, 79, 115, 177, 393, 451, 464], "01": [39, 52, 72, 79, 83, 84, 86, 89, 97, 100, 104, 105, 106, 117, 123, 161, 162, 166, 207, 213, 217, 219, 221, 236, 242, 355, 390, 422, 423, 427, 429, 431, 432, 435, 436, 439, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 464, 465, 466, 472, 473, 474, 475, 480, 485, 495, 497, 498, 501, 505, 507, 509, 531, 532, 536, 537, 538, 544, 549, 552], "r_1": [39, 48], "55": [39, 42, 83, 86, 447, 448, 453, 457, 461], "nonzero": 39, "15": [39, 42, 65, 83, 84, 86, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 344, 345, 349, 363, 371, 393, 397, 402, 407, 410, 411, 412, 414, 422, 423, 427, 428, 431, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 448, 451, 453, 455, 456, 458, 459, 464, 474, 497, 505, 542, 543], "2004a": [39, 40], "26a": [39, 40, 50, 52, 53, 116, 225, 259, 451], "422": [39, 40], "545y": [39, 40], "ob": [40, 78, 79, 84, 85, 86, 87, 91, 148, 158, 281, 282, 366, 367, 370, 371, 376, 390, 408, 409, 418, 423, 424, 427, 430, 431, 437, 439, 443, 446, 447, 448, 455, 460, 463, 464, 465, 466, 470, 473, 485, 488, 493, 495, 497, 498], "empir": 40, "obs_po": [41, 286], "column": [41, 43, 44, 46, 47, 56, 79, 83, 86, 98, 103, 113, 115, 118, 128, 132, 133, 135, 159, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 254, 274, 281, 324, 325, 326, 327, 347, 348, 351, 352, 354, 367, 369, 378, 416, 419, 420, 423, 439, 440, 448, 451, 456, 459, 463, 485, 488], "extens": [41, 79, 135, 178, 179, 181, 183, 190, 191, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 245, 251, 255, 356, 359, 360, 361, 362, 363, 365, 367, 369, 370, 371, 372, 373, 374, 384, 408, 438, 439, 440, 459, 548], "luminos": [41, 46, 51, 52, 53, 54, 229], "glon": [41, 65, 66, 79, 354, 427, 451, 456, 464], "glat": [41, 65, 66, 79, 354, 427, 451, 456, 464], "angular_extens": 41, "cartesian": [41, 46, 179, 190, 191, 286, 288, 418, 474, 500], "origin": [41, 83, 86, 97, 99, 104, 114, 179, 191, 251, 253, 255, 364, 368, 380, 381, 411, 428, 444, 446, 456, 459, 464, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 551, 552], "goe": [41, 52, 344, 354, 373, 384, 441], "through": [41, 83, 86, 282, 283, 351, 357, 359, 367, 368, 374, 378, 379, 387, 391, 405, 416, 440, 444, 453, 455, 456, 457, 458, 464, 465, 488, 493, 500, 547, 550], "sun": 41, "galactocentr": 41, "earth": [41, 84, 258, 464], "b_mean": 42, "b_stdv": 42, "p_mean": 42, "p_stdv": 42, "normal": [42, 96, 97, 100, 104, 105, 116, 117, 118, 120, 127, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 155, 178, 179, 181, 187, 188, 190, 191, 214, 230, 231, 234, 253, 255, 258, 283, 344, 345, 354, 355, 359, 360, 364, 365, 368, 372, 378, 394, 398, 407, 433, 439, 445, 446, 448, 455, 456, 457, 458, 459, 464, 473, 474, 500, 505, 506, 507, 510, 511, 512, 533, 547, 549, 550], "period": [42, 51, 54, 254, 361, 380, 413, 460, 480], "logb": 42, "mean": [42, 66, 83, 86, 91, 97, 117, 119, 135, 136, 137, 140, 143, 148, 151, 216, 220, 254, 271, 282, 301, 354, 355, 357, 359, 361, 367, 368, 370, 371, 377, 382, 387, 390, 402, 411, 430, 440, 444, 453, 455, 459, 460, 461, 464, 465, 474, 506, 521, 548, 549], "magnet": [42, 50, 51, 54, 524], "gauss": [42, 51, 54, 97, 100, 118, 119, 139, 179, 191, 215, 216, 217, 218, 377, 411, 448, 456, 459, 474, 505, 506], "second": [42, 58, 79, 82, 83, 84, 86, 135, 254, 313, 316, 331, 335, 338, 343, 355, 362, 364, 366, 368, 372, 378, 380, 384, 399, 418, 427, 428, 431, 433, 435, 437, 438, 439, 440, 441, 446, 447, 450, 452, 453, 455, 456, 461, 463, 468, 472, 483, 549, 552], "pwn": [43, 451, 474, 481], "least": [43, 44, 354, 357, 359, 363, 439, 444, 500], "e_sn": [43, 44, 52], "n_ism": [43, 44, 45, 52, 481, 482], "p0_birth": 43, "b_psr": 43, "entri": [43, 44, 83, 86, 89, 110, 113, 116, 117, 120, 121, 195, 206, 228, 265, 322, 354, 366, 374, 378, 381, 383, 386, 388, 405, 416, 424, 428, 451, 453, 456, 459, 460, 488, 489, 501], "r_out_pwn": 43, "outer": [43, 44, 52, 53, 117, 153, 240, 511], "snr": [44, 50, 53, 65, 464, 481, 482], "kinet": 44, "r_out": 44, "r_in": [44, 153, 163, 240, 433, 498], "inner": [44, 52, 53, 117, 153, 163, 241, 433, 474, 511], "l_snr": 44, "photon": [44, 208, 229, 339, 369, 430, 439, 443, 457, 459, 474, 493, 524, 547], "rate": [44, 45, 79, 84, 132, 133, 164, 171, 313, 367, 390, 414, 427, 429, 448, 455, 463, 464, 466, 478, 491, 547], "n_sourc": [45, 478], "rad_di": [45, 478], "yk04": [45, 48], "vel_di": [45, 478], "h05": [45, 49], "max_ag": [45, 478], "1e6": [45, 464, 478, 533], "yr": [45, 52, 53, 478, 480, 481, 482], "basic": [45, 46, 65, 69, 70, 71, 72, 73, 74, 75, 76, 100, 105, 115, 220, 357, 360, 364, 365, 366, 367, 368, 370, 374, 378, 381, 390, 402, 412, 414, 422, 424, 427, 429, 442, 444, 445, 450, 451, 457, 468, 474, 476, 478, 479, 484, 485, 486, 496, 497, 500, 545, 547, 548], "choos": [45, 176, 177, 180, 182, 183, 186, 189, 256, 297, 354, 366, 368, 370, 374, 386, 405, 425, 427, 431, 435, 437, 447, 452, 453, 455, 456, 458, 459, 460, 464, 473, 488, 548], "year": [45, 60, 63, 74, 354, 359, 361, 362, 364, 371, 374, 375, 379, 381, 384, 411, 413, 414, 436, 438, 451, 463, 480, 481, 482, 483], "sn": [45, 50, 52, 53], "sn_rate": [45, 478], "simul": [45, 78, 79, 84, 88, 97, 100, 103, 104, 105, 106, 137, 148, 151, 313, 364, 367, 370, 374, 381, 382, 386, 393, 397, 399, 401, 407, 410, 412, 413, 414, 419, 420, 422, 426, 427, 432, 435, 437, 442, 448, 449, 458, 461, 463, 468, 478, 484, 486, 493, 496, 545, 546], "proper": [45, 95, 369, 380, 418, 419, 429, 435, 488], "motion": [45, 287], "maxim": [45, 78, 86, 106, 164, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 417, 418, 419, 420, 497], "interstellar": [45, 439], "medium": [45, 52, 354, 363], "dimens": [46, 53, 97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 184, 186, 187, 189, 190, 191, 251, 252, 255, 283, 295, 347, 370, 402, 413, 415, 419, 453, 454, 456, 459, 468, 484, 500, 501, 506], "distance_max": [46, 47, 312, 451], "pc": [46, 47, 50, 52, 481, 482], "randomli": [46, 354], "cube": [46, 97, 100, 123, 153, 171, 178, 179, 181, 187, 190, 191, 224, 243, 354, 365, 366, 367, 373, 374, 375, 377, 386, 393, 397, 398, 401, 406, 409, 410, 411, 412, 413, 414, 431, 432, 437, 441, 464, 474, 484, 493, 495, 500, 501, 547], "studi": [46, 258, 367, 370, 378, 387, 414, 424, 425, 436, 437, 438, 441, 443, 446, 447, 453, 456, 459, 463, 478, 488, 497, 549], "result": [46, 71, 82, 83, 86, 87, 96, 97, 100, 104, 105, 108, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 128, 140, 146, 148, 151, 164, 168, 169, 174, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 195, 206, 228, 255, 265, 283, 347, 353, 354, 355, 357, 359, 361, 363, 364, 365, 366, 367, 370, 372, 373, 376, 380, 382, 387, 390, 397, 405, 407, 408, 413, 415, 419, 420, 425, 427, 429, 430, 435, 437, 439, 440, 443, 444, 446, 447, 448, 451, 452, 453, 456, 457, 460, 461, 464, 465, 466, 472, 473, 476, 483, 486, 501, 536, 547, 549, 550], "distance_min": [47, 312, 451], "sampl": [47, 88, 98, 103, 123, 137, 139, 145, 147, 148, 149, 151, 178, 179, 181, 187, 189, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 266, 296, 305, 310, 311, 312, 313, 358, 366, 368, 369, 372, 374, 386, 393, 395, 397, 398, 401, 407, 414, 416, 419, 420, 422, 429, 442, 444, 452, 453, 468, 484, 485, 488, 493, 496, 500], "locat": [47, 78, 79, 81, 83, 84, 89, 124, 136, 137, 143, 148, 151, 189, 312, 362, 368, 372, 375, 380, 381, 386, 388, 419, 423, 430, 439, 440, 443, 447, 451, 465, 466, 485, 501, 548], "sphere": [47, 311, 393, 395, 500, 505, 506, 509], "isotrop": [47, 203, 260, 458], "spheric": [47, 354, 395, 500, 546], "cb98": 48, "f06": 48, "l06": [48, 478], "p90": 48, "yk04b": 48, "f06b": [49, 478], "faucherkaspi2006velocitybimod": 49, "f06p": 49, "paczynski1990veloc": 49, "faucherkaspi2006velocitymaxwellian": 49, "snrtruelovemcke": [50, 481, 482], "eta_": 50, "999": [50, 148, 151, 451], "eta_b": 50, "001": [50, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191, 331, 439, 453, 511], "morphologi": [50, 52, 110, 365, 367, 377, 393, 410, 412, 424, 432, 438, 439, 440, 443, 451, 455, 502], "simpl": [50, 52, 128, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 258, 354, 355, 366, 367, 368, 369, 370, 373, 378, 381, 382, 395, 405, 409, 413, 414, 419, 423, 424, 425, 427, 428, 429, 430, 432, 435, 444, 448, 453, 456, 457, 460, 466, 472, 473, 474, 478, 488, 546, 547, 548], "wind": [50, 433, 438, 459, 479], "nebula": [50, 259, 265, 399, 427, 428, 429, 433, 436, 437, 438, 445, 453, 457, 459, 461, 464, 465, 466, 472, 473, 474, 479, 501, 547], "evolut": [50, 52, 53, 208, 360, 374, 422, 442, 468, 481, 482, 484, 485, 493, 496, 500, 502], "go": [50, 83, 86, 357, 364, 374, 379, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 476, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548], "electron": [50, 258, 463, 524], "magnetic_field": [50, 51, 54], "insid": [50, 79, 97, 104, 135, 161, 177, 178, 179, 181, 186, 189, 190, 191, 206, 228, 243, 343, 347, 354, 355, 368, 370, 378, 405, 423, 427, 430, 432, 435, 437, 443, 447, 452, 455, 457, 458, 459, 463, 465, 485, 495, 497, 498, 501], "certain": [50, 79, 83, 86, 195, 272, 353, 368, 370, 372, 378, 423, 450, 455, 456, 464, 483, 501], "spin": [50, 51, 54, 397, 480], "down": [50, 51, 54, 123, 359, 361, 364, 368, 373, 397, 452, 464, 551], "free": [50, 52, 53, 97, 100, 104, 105, 116, 120, 121, 158, 195, 197, 199, 230, 231, 265, 359, 369, 395, 428, 430, 432, 433, 435, 437, 438, 443, 445, 447, 452, 453, 455, 458, 459, 461, 464, 468, 472, 473, 476, 486, 495, 508, 524, 525, 548, 550, 551], "expans": [50, 52, 53], "phase": [50, 52, 53, 85, 156, 159, 254, 359, 364, 365, 368, 369, 371, 373, 378, 390, 395, 414, 416, 419, 422, 459, 477, 488, 502, 544], "dot": [50, 51, 54, 104, 105, 178, 179, 181, 187, 190, 191, 419], "_0": [50, 51], "ej": [50, 52, 53], "collis": 50, "shock": [50, 52, 53, 481], "constant": [50, 51, 52, 53, 97, 104, 108, 138, 178, 179, 181, 187, 189, 190, 191, 202, 203, 204, 205, 207, 219, 221, 312, 367, 368, 373, 413, 422, 445, 464, 481, 484, 502, 513, 534, 544, 547, 551], "radius_reverse_shock": [50, 53, 481], "2006ara": 50, "17g": 50, "p_0": [51, 178, 181, 187, 190, 191, 480], "1e10": [51, 138], "45": [51, 54, 427, 430, 436, 448, 452, 456, 457, 459, 476, 501, 506, 507], "cm2": [51, 54, 65, 102, 115, 129, 138, 191, 259, 339, 423, 425, 428, 430, 431, 435, 436, 437, 439, 440, 443, 445, 446, 447, 448, 450, 451, 452, 456, 458, 459, 461, 464, 472, 473, 474, 486, 501, 517, 520, 523, 528, 533], "1000000": [51, 52, 54, 451, 533], "l_0": [51, 481, 505, 506], "dipol": [51, 54], "strength": [51, 54, 382, 524], "pole": [51, 368, 456], "brake": 51, "inertia": [51, 54], "energy_integr": 51, "total": [51, 65, 94, 96, 97, 100, 104, 105, 116, 117, 120, 121, 127, 158, 173, 177, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 280, 362, 378, 382, 386, 388, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 464, 467, 469, 471, 472, 473, 474, 475, 478, 484, 488, 493, 503, 513, 524, 534, 544, 547], "tau_0": 51, "luminosity_spindown": [51, 54], "polar": [51, 54, 284, 354], "cap": [51, 54], "cdot": [51, 52, 53, 54, 97, 104, 233, 247, 377, 459, 484, 505, 510, 511, 515, 518, 519, 526, 527, 529, 530, 531, 532, 537, 538, 539, 541, 549], "19": [51, 53, 54, 65, 358, 370, 372, 374, 393, 401, 402, 404, 416, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "rotat": [51, 54, 161, 162, 166, 171, 207, 215, 218, 440, 497, 505, 506], "period_dot": 51, "p_dot": [51, 54], "real": [51, 354, 357, 384, 430, 431, 433, 440, 453, 457, 484], "1e51": 52, "erg": [52, 53, 65, 423, 427, 451, 474, 481, 488], "m_ejecta": [52, 481], "iau2015": 52, "solar": 52, "988409870698051e": 52, "uncertainti": [52, 97, 100, 104, 105, 267, 268, 358, 371, 412, 425, 427, 448, 453, 461, 473, 546, 547, 549], "468805426856864e": 52, "kg": 52, "iau": [52, 393, 397], "2015": [52, 82, 368, 371, 392, 464], "resolut": [52, 135, 136, 140, 177, 189, 363, 365, 367, 368, 413, 419, 451, 464], "codata": 52, "2018": [52, 359, 360, 361, 362, 363, 364, 365, 369, 371, 373, 374, 392, 419, 463, 466, 547], "t_stop": [52, 82, 485], "shell2d": 52, "sedov": [52, 53], "taylor": [52, 53], "strong": [52, 367, 374, 427, 461], "explos": 52, "1950rspsa": 52, "201": [52, 456], "159t": 52, "neutrino": 52, "loss": [52, 547], "cosmic": [52, 208, 258, 372, 463], "ism": [52, 53, 524], "ejecta": 52, "post": [52, 363, 381], "temperatur": [52, 53], "emiss": [52, 66, 124, 360, 365, 369, 427, 433, 435, 436, 439, 458, 463, 464, 484, 498, 524, 545], "sedov_taylor_begin": [52, 53, 482], "begin": [52, 83, 86, 97, 104, 113, 115, 123, 374, 377, 380, 427, 429, 456, 459, 505, 510, 511, 515, 531, 550], "condit": [52, 53, 131, 197, 199, 206, 228, 378, 382, 402, 423, 427, 430, 440, 451, 457, 458, 460, 465, 484, 493], "swept": 52, "surround": [52, 301, 354], "eject": 52, "t_": [52, 53, 272, 493, 536, 537, 538, 539, 540, 541, 549], "approx": [52, 53], "200": [52, 83, 86, 123, 189, 378, 406, 422, 427, 428, 431, 437, 441, 443, 451, 456, 459, 474, 513, 534, 549], "51": [52, 53, 65, 427, 428, 435, 441, 472], "sedov_taylor_end": [52, 53, 482], "end": [52, 53, 82, 83, 86, 87, 89, 95, 97, 104, 113, 115, 123, 183, 220, 228, 359, 361, 363, 365, 366, 368, 369, 370, 371, 373, 374, 377, 406, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550], "drop": [52, 53, 97, 100, 104, 105, 113, 115, 120, 136, 137, 143, 148, 151, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 207, 214, 253, 339, 358, 359, 370, 371, 376, 395, 398, 399, 402, 405, 412, 415, 439, 456, 484], "below": [52, 53, 83, 86, 177, 181, 188, 189, 343, 344, 345, 349, 351, 355, 357, 358, 363, 364, 368, 370, 371, 374, 377, 378, 380, 381, 382, 384, 385, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 427, 431, 448, 451, 453, 455, 457, 459, 460, 461, 463, 464, 485, 488, 506, 550], "43000": [52, 53], "66": [52, 53, 393, 396, 430, 443, 452, 453, 458, 461], "luminosity_tev": [52, 53, 482], "interv": [52, 53, 74, 78, 79, 82, 84, 85, 86, 87, 95, 96, 98, 103, 115, 120, 159, 183, 188, 195, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 363, 364, 368, 369, 372, 378, 386, 399, 401, 402, 405, 414, 415, 420, 445, 447, 453, 456, 465, 473, 485, 500, 547, 550], "zero": [52, 53, 65, 83, 86, 95, 97, 100, 104, 105, 123, 128, 135, 136, 137, 140, 143, 148, 164, 178, 179, 181, 187, 190, 191, 232, 253, 255, 256, 295, 301, 313, 354, 398, 401, 416, 451, 455, 456, 461, 551], "l_": [52, 53], "geq": [52, 53], "1tev": [52, 53, 121, 440], "34": [52, 53, 65, 393, 423, 427, 428, 437, 447, 452, 456, 458, 474], "1994a": [52, 53], "287": [52, 53], "959d": [52, 53], "shell": [52, 53, 76, 240, 241, 365, 370, 377, 386, 388, 422, 459, 502, 511, 513, 548], "radius_inn": [52, 53], "0914": [52, 53], "truelov": 53, "mckee": [53, 420], "1999": [53, 355, 552], "1999apj": 53, "120": [53, 369, 422, 429, 464, 508, 544], "299t": 53, "st": [53, 453, 464], "52": [53, 115, 158, 423, 424, 431, 433, 435, 447, 451, 463, 466, 474], "ch": 53, "12r_": 53, "026": [53, 65, 451, 513], "co": [53, 184, 379, 380, 423, 505, 506, 507], "simeq": 53, "25t_": 53, "reach": [53, 122, 192, 359, 364, 367, 459], "49": [53, 99, 114, 431, 435, 447, 451, 458, 464, 472, 500], "46": [53, 65, 104, 105, 368, 451, 456, 464], "ln": [53, 453, 531], "sec": [54, 79, 89, 95, 120, 313], "gammacat": [55, 64, 412, 425], "sourcecataloggammacat": [55, 75, 425, 451], "sourcecataloghgp": [55, 76, 77, 451, 483], "hawc": [55, 59, 62, 70, 73, 92, 391, 399, 405, 413, 416, 417, 419, 422, 467, 468, 483, 484, 485, 496, 500, 547], "sourcecatalog2hwc": [55, 70, 451, 483], "fermi": [55, 58, 60, 61, 63, 69, 71, 72, 74, 79, 82, 116, 117, 119, 123, 178, 179, 181, 187, 188, 190, 191, 208, 258, 260, 265, 361, 362, 363, 364, 366, 367, 370, 371, 374, 384, 386, 391, 393, 394, 397, 399, 402, 406, 409, 410, 411, 412, 413, 414, 422, 425, 431, 439, 441, 451, 456, 457, 458, 459, 467, 468, 474, 476, 484, 485, 488, 493, 500, 512, 522, 527, 545, 552], "sourcecatalog3fgl": [55, 71, 425, 451, 483], "sourcecatalog4fgl": [55, 74, 407, 451, 483], "sourcecatalog2fhl": [55, 69, 451, 483], "sourcecatalog3fhl": [55, 72, 425, 451, 458, 474], "sourcecatalog3hwc": [55, 73, 451, 483], "lhaaso": [55, 57], "sourcecatalog1lhaaso": [55, 68, 451], "registri": [55, 93, 109, 144, 156, 224, 226, 237, 238, 250, 375, 382, 398, 401, 402, 405, 414, 451, 459], "source_name_kei": 56, "source_nam": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 451, 474], "source_name_alia": 56, "mostli": [56, 67, 283, 354, 355, 360, 361, 362, 363, 368, 370, 373, 374, 375, 378, 379, 381, 383, 384, 405, 413, 451, 455, 466, 474, 550, 552], "thin": [56, 295], "wrapper": [56, 229, 239, 295, 368, 369, 396, 399, 476, 488], "around": [56, 128, 154, 177, 179, 189, 191, 295, 368, 369, 429, 448, 450, 453, 457, 465, 474, 488, 497, 500, 501], "row": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 86, 128, 135, 291, 325, 348, 369, 378, 381, 416, 419, 430, 440, 441, 451, 453, 456, 463, 465, 466, 474, 483], "skycoord": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 89, 91, 97, 100, 104, 105, 113, 115, 117, 119, 136, 137, 143, 148, 151, 161, 162, 164, 166, 168, 169, 171, 172, 174, 175, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 192, 202, 203, 206, 207, 215, 218, 228, 230, 232, 240, 241, 243, 245, 251, 253, 255, 281, 282, 315, 316, 330, 350, 355, 365, 368, 378, 381, 423, 424, 427, 429, 430, 433, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 473, 474, 488, 492, 497, 499, 501, 509], "abstract": [56, 57, 59, 94, 111, 149, 157, 162, 176, 178, 181, 190, 365, 401, 500], "descript": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 83, 86, 117, 195, 355, 359, 360, 368, 374, 379, 380, 391, 416, 420, 435, 443, 451, 453, 456, 463, 465, 472, 473, 488], "row_index": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 451], "to_model": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 405, 451], "1lhaaso_catalog": 57, "sourcecatalog": [57, 58, 59, 60, 61, 62, 63, 64, 65, 368, 405, 451, 457, 474, 483], "first": [57, 83, 86, 87, 89, 95, 97, 104, 113, 115, 117, 128, 135, 152, 161, 178, 179, 180, 183, 187, 188, 206, 228, 259, 316, 343, 354, 355, 357, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 384, 385, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 412, 414, 415, 416, 417, 419, 423, 424, 425, 427, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 472, 473, 474, 485, 497, 500, 548], "sourcecatalogobject1lhaaso": 57, "paper": [57, 59, 62, 70, 71, 116, 164, 374, 380, 414, 444, 446, 451, 455, 465, 476], "90": [57, 65, 377, 430, 436, 437, 451, 456, 459, 476], "1lhaaso": [57, 68, 420, 451], "2023arxiv230517030c": 57, "observatori": [57, 59, 62, 78, 79, 81, 84, 89, 367, 381, 383, 386, 406, 463, 465, 466, 483, 488], "composit": [57, 68, 76, 294, 380, 412], "km2a": [57, 68], "wcda": [57, 68], "gll_psch_v09": 58, "gz": [58, 60, 61, 63, 64, 65, 78, 79, 82, 84, 86, 89, 97, 100, 104, 105, 108, 112, 117, 119, 123, 128, 129, 140, 209, 256, 342, 347, 349, 355, 376, 414, 427, 428, 431, 438, 439, 440, 441, 451, 452, 454, 456, 458, 459, 463, 464, 465, 470, 472, 473, 474, 485, 486, 488, 490, 491, 492, 494, 514], "2fhl": [58, 69, 399, 411, 412, 451, 474, 483], "2016apj": 58, "222": [58, 451, 458], "5a": 58, "gsfc": [58, 60, 61, 63, 135, 183, 374, 527], "nasa": [58, 60, 61, 63, 135, 183, 374, 383, 527], "gov": [58, 60, 61, 63, 135, 183, 374, 383, 527], "ssc": [58, 60, 61, 63, 229, 374, 527], "sourcecatalogobject2fhl": 58, "2hwc": [59, 70, 399, 405, 413, 451, 483], "ecsv": [59, 62, 366], "sourcecatalogobject2hwc": 59, "40": [59, 104, 105, 361, 406, 424, 425, 427, 428, 435, 437, 446, 447, 456, 459, 463, 474, 497, 520, 523, 528, 549], "mention": [59, 130, 354, 355, 357, 361, 362, 366, 368, 371, 373, 374, 379, 380, 383, 384, 454, 458, 459, 476, 547], "due": [59, 83, 86, 354, 382, 408, 456, 461, 463, 524, 548], "geminga": 59, "detect": [59, 128, 129, 265, 344, 345, 355, 370, 373, 374, 376, 393, 399, 400, 401, 411, 413, 414, 420, 422, 434, 451, 463, 465, 468, 484, 500, 547, 550], "abeysekara": 59, "On": [59, 153, 159, 160, 163, 274, 354, 355, 360, 362, 369, 370, 383, 385, 386, 387, 388, 409, 435, 436, 453, 468, 550], "2017apj": [59, 61], "843": [59, 423, 448], "40a": 59, "gll_psc_v16": 60, "3fgl": [60, 65, 71, 210, 247, 377, 406, 409, 411, 412, 413, 422, 425, 451, 459, 474, 483, 502, 534], "2015apj": [60, 116], "218": [60, 116, 422, 534], "23a": [60, 116], "4yr_catalog": 60, "sourcecatalogobject3fgl": 60, "gll_psch_v13": 61, "3fhl": [61, 72, 82, 117, 119, 123, 265, 374, 412, 413, 425, 431, 439, 441, 451, 456, 457, 458, 459, 464, 474, 483, 485], "232": 61, "18a": 61, "sourcecatalogobject3fhl": 61, "third": [61, 62, 83, 86, 355, 405, 451, 453, 456, 468, 474, 483], "3hwc": [62, 73, 405, 416, 451, 483], "sourcecatalogobject3hwc": 62, "65": [62, 378, 393, 395, 436, 452, 464], "veri": [62, 83, 86, 128, 195, 344, 353, 354, 355, 356, 359, 360, 365, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 384, 415, 423, 430, 444, 451, 453, 456, 461, 464, 474, 484, 488, 501, 510, 511, 545, 547, 548, 549], "survei": [62, 65, 116, 208, 361, 364, 374, 390, 422, 463, 468, 469, 478, 483, 488, 547], "php": 62, "gll_psc_v32": 63, "4fgl": [63, 74, 248, 249, 377, 397, 399, 405, 407, 420, 422, 436, 451, 457, 459, 483, 502, 534], "arxiv": [63, 164, 234, 235, 248, 249, 436, 450, 451, 455, 531, 532], "1902": [63, 249, 532], "10045": [63, 249, 532], "2005": [63, 547], "11208": 63, "dr2": [63, 249, 405, 422, 502, 534], "2201": [63, 248, 451, 474, 531], "11184": [63, 248, 531], "dr3": [63, 248, 422, 459, 502, 534], "2307": 63, "12546": 63, "dr4": [63, 420], "14yr_catalog": 63, "sourcecatalogobject4fgl": 63, "open": [64, 83, 86, 355, 357, 359, 365, 368, 371, 373, 374, 378, 379, 380, 383, 385, 386, 388, 390, 391, 412, 428, 436, 456, 463, 465, 466, 472, 483, 547, 548], "cat": [64, 65, 75, 362, 384, 412, 413, 425, 451, 459, 483, 547, 548], "sourcecatalogobjectgammacat": 64, "load": [64, 65, 78, 79, 82, 83, 86, 95, 96, 97, 100, 104, 117, 119, 152, 158, 176, 177, 178, 179, 189, 291, 354, 408, 411, 413, 419, 428, 430, 432, 433, 439, 440, 443, 444, 447, 448, 457, 463, 464, 465, 466, 472, 474, 485, 488], "vela": [64, 393, 425, 448, 474], "junior": [64, 374], "subplot": [64, 65, 178, 179, 181, 187, 190, 191, 423, 424, 425, 427, 428, 429, 430, 431, 433, 435, 436, 437, 441, 445, 447, 448, 450, 453, 454, 456, 457, 458, 460, 461, 488, 490, 497, 507, 511, 514], "energy_rang": [64, 65, 69, 71, 72, 76, 79, 95, 97, 100, 104, 105, 405, 452, 457, 531, 532], "spectral_model": [64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 104, 105, 112, 121, 123, 127, 155, 206, 214, 226, 228, 243, 253, 265, 369, 372, 376, 377, 378, 382, 402, 424, 425, 427, 429, 430, 431, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 451, 452, 453, 458, 459, 461, 464, 473, 474, 486, 495, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "hgps_catalog_v1": 65, "hdu": [65, 78, 79, 81, 82, 83, 84, 89, 97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 291, 340, 355, 364, 393, 408, 410, 413, 416, 417, 439, 454, 456, 463, 465, 466, 484, 485, 488, 490, 491, 492, 494, 501, 543], "hgps_sourc": 65, "hgp": [65, 76, 77, 112, 374, 399, 411, 413, 414, 483], "mpi": 65, "hd": 65, "mpg": 65, "hfm": 65, "sourcecatalogobjecthgp": [65, 77, 394, 451], "let": [65, 259, 354, 357, 359, 363, 368, 371, 386, 389, 413, 414, 415, 425, 428, 429, 430, 431, 435, 436, 437, 438, 439, 441, 447, 448, 451, 452, 453, 456, 457, 459, 461, 464, 472, 474, 548], "download": [65, 89, 96, 115, 357, 362, 370, 371, 374, 381, 383, 385, 386, 388, 390, 394, 395, 397, 398, 405, 414, 415, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548], "curl": [65, 371, 385, 386, 388, 463], "o": [65, 78, 83, 86, 96, 185, 354, 363, 368, 371, 375, 378, 385, 386, 388, 397, 405, 408, 411, 412, 413, 419, 423, 424, 427, 431, 437, 444, 445, 446, 447, 456, 460, 461, 463, 488, 547, 548], "Then": [65, 97, 102, 104, 357, 359, 364, 367, 369, 370, 371, 372, 378, 387, 424, 427, 435, 436, 439, 443, 445, 453, 457, 459, 461, 473], "j1843": 65, "033": [65, 451], "unid": 65, "identifi": [65, 84, 98, 103, 177, 243, 354, 364, 365, 367, 370, 379, 380, 384, 400, 431, 439, 444, 451, 452, 459, 463, 465, 487], "id": [65, 76, 78, 79, 83, 84, 86, 87, 106, 367, 370, 390, 428, 430, 439, 441, 443, 448, 451, 459, 463, 464, 465, 466, 472, 485], "126": [65, 425, 451, 453], "ra": [65, 79, 81, 83, 84, 86, 89, 128, 129, 161, 354, 355, 367, 370, 423, 427, 429, 431, 433, 437, 440, 445, 446, 448, 451, 455, 457, 463, 464, 465, 466, 473, 474, 476, 488, 492, 552], "280": [65, 409, 427, 430, 456], "952": 65, "18h43m48": 65, "dec": [65, 79, 81, 83, 84, 86, 89, 128, 129, 161, 354, 355, 359, 363, 365, 367, 370, 371, 374, 392, 418, 423, 427, 429, 431, 433, 437, 440, 445, 446, 448, 451, 455, 457, 463, 464, 465, 466, 473, 474, 476, 488, 492, 497, 552], "554": 65, "3d33m15": 65, "899": [65, 433], "072": 65, "075": 65, "036": 65, "68": [65, 79, 91, 139, 145, 147, 148, 149, 151, 215, 393, 423, 451, 453, 454, 456, 463, 474, 550], "122": [65, 128, 393, 425, 458], "197": [65, 437], "roi": [65, 370, 451, 466, 547], "gaussian": [65, 66, 76, 77, 108, 118, 135, 136, 140, 146, 148, 151, 179, 191, 215, 216, 217, 218, 219, 273, 274, 365, 373, 377, 382, 398, 402, 422, 425, 437, 439, 443, 444, 447, 451, 453, 454, 459, 461, 463, 474, 492, 494, 502, 513, 534, 544], "hgpsc": [65, 451], "083": [65, 451], "084": [65, 428], "256": [65, 409], "239": [65, 437], "063": 65, "ul": [65, 112, 113, 115, 116, 117, 120, 121, 123, 266, 436, 441, 447, 451], "000": [65, 83, 84, 86, 115, 369, 425, 427, 428, 430, 435, 436, 437, 439, 440, 443, 446, 447, 451, 452, 456, 458, 459, 464, 471, 472, 474, 503], "r70": [65, 451], "376": 65, "rspec": [65, 451], "979": [65, 412, 456], "775": [65, 458], "690": 65, "1742": 65, "livetim": [65, 84, 85, 100, 101, 105, 148, 170, 172, 173, 360, 423, 424, 427, 428, 430, 437, 439, 440, 443, 447, 451, 452, 454, 456, 464, 465, 474, 484, 488], "41": [65, 82, 89, 368, 451, 452, 456, 464, 474], "hour": [65, 89, 357, 370, 384, 423, 451, 455, 456, 488], "threshold": [65, 97, 104, 108, 113, 114, 115, 123, 128, 129, 135, 136, 140, 153, 164, 188, 265, 343, 344, 345, 368, 395, 401, 402, 423, 427, 429, 431, 437, 441, 445, 451, 452, 453, 455, 457, 463, 472, 484, 486], "882": [65, 431], "305": [65, 430], "75": [65, 347, 427, 474], "35": [65, 371, 378, 390, 428, 446, 451, 453, 461, 463], "crab": [65, 79, 104, 105, 121, 131, 225, 259, 265, 362, 366, 374, 393, 399, 411, 413, 427, 428, 429, 436, 437, 445, 451, 452, 453, 457, 461, 464, 465, 466, 472, 473, 474, 486, 497, 501, 547], "267": [65, 129, 430, 431, 437, 458, 463], "018": 65, "93": [65, 430, 431, 456, 463], "004": [65, 443], "larg": [65, 83, 86, 178, 179, 181, 187, 190, 191, 251, 253, 255, 354, 357, 359, 360, 368, 374, 375, 395, 405, 414, 415, 420, 423, 427, 433, 446, 451, 457, 463, 464, 465, 474, 484, 486, 488, 489, 501, 507, 545, 548, 553], "361": [65, 410], "60": [65, 86, 140, 418, 428, 431, 447, 451, 453, 464], "383": [65, 410, 451, 456], "54": [65, 427, 451, 454], "70": [65, 86, 97, 437, 451, 452, 549], "contamin": [65, 433, 451, 457, 497], "121": [65, 422, 437, 458, 544], "82": [65, 393, 451, 501], "22": [65, 79, 81, 84, 97, 100, 104, 105, 123, 153, 158, 161, 358, 392, 405, 427, 428, 429, 430, 431, 436, 445, 447, 451, 452, 455, 456, 457, 465, 466, 467, 472, 473, 474, 485, 492, 495, 497, 498, 501], "61": [65, 400, 428, 443, 451, 458, 550], "5126": 65, "980": 65, "pl": [65, 76, 112, 117, 123, 155, 226, 233, 234, 235, 377, 425, 441, 451, 452, 459, 474], "ecpl": [65, 76, 210, 211, 212, 265, 377, 411, 425, 451, 459], "best": [65, 69, 71, 72, 74, 76, 96, 113, 115, 116, 117, 120, 121, 128, 265, 267, 268, 347, 354, 357, 364, 367, 372, 380, 386, 388, 425, 427, 428, 429, 432, 435, 438, 448, 451, 453, 461, 472, 486, 488, 490, 514, 520, 523, 524, 528, 550, 551, 552], "043": 65, "196": [65, 423, 458], "13": [65, 96, 115, 129, 281, 358, 359, 363, 368, 373, 382, 398, 423, 425, 427, 428, 429, 431, 435, 437, 443, 447, 451, 453, 456, 458, 459, 461, 472, 474, 482, 535, 536, 537, 550], "47": [65, 447, 451, 456, 474], "87": [65, 437, 456, 473], "918": 65, "733": [65, 411], "914": 65, "058": 65, "505": [65, 451, 452], "247": [65, 406, 428], "00": [65, 83, 84, 85, 86, 96, 355, 369, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 439, 440, 442, 443, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 503, 513, 533, 534, 544, 552], "e_cut": [65, 451], "inf": [65, 218, 382, 461], "e_ref": [65, 115, 378, 423, 427, 428, 445, 451, 472, 474, 486], "e_min": [65, 115, 378, 423, 427, 428, 429, 440, 445, 451, 452, 453, 456, 461, 464, 474, 486], "e_max": [65, 115, 378, 423, 427, 428, 429, 440, 445, 451, 452, 453, 456, 461, 474, 486], "dnde_errn": [65, 113, 115, 451], "dnde_errp": [65, 113, 115, 451], "dnde_ul": [65, 113, 115, 451, 474], "is_ul": [65, 113, 115, 405, 420, 451, 474], "332": [65, 410], "215": [65, 406, 420, 451], "511": [65, 410], "048e": 65, "11": [65, 83, 86, 89, 115, 116, 120, 121, 196, 315, 358, 361, 363, 371, 378, 382, 393, 394, 415, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 453, 455, 457, 458, 461, 462, 464, 472, 473, 474, 497, 499, 528, 529, 530, 550], "890e": 65, "010e": 65, "455e": 65, "787": [65, 158], "212": [65, 406, 427, 451], "383e": 65, "655e": 65, "843e": 65, "739e": 65, "957": 65, "162": 65, "160e": 65, "732e": [65, 451], "002e": 65, "120e": [65, 474], "870": [65, 412], "499": [65, 451], "630e": 65, "001e": 65, "097e": 65, "054e": 65, "115": 65, "573": [65, 427, 474], "648e": 65, "124e": 65, "348e": [65, 451], "344e": 65, "142": [65, 393, 425, 451, 474], "416": [65, 451, 455], "777e": [65, 425], "468e": 65, "116e": 65, "883e": 65, "29": [65, 129, 254, 369, 379, 392, 420, 423, 425, 428, 430, 431, 437, 443, 446, 447, 451, 456, 458, 459, 463, 474], "047": 65, "244": [65, 406, 427], "027": [65, 422, 462], "125": [65, 115, 128, 427, 437, 456, 464, 474, 549], "021": [65, 451], "36": [65, 82, 133, 301, 437, 439, 451, 452, 454, 474], "770": 65, "059": 65, "073": 65, "069": 65, "229": [65, 451], "046": 65, "association_catalog": [65, 451], "association_nam": [65, 451], "0322": 65, "178442": 65, "j1844": 65, "0344": 65, "242835": 65, "g28": 65, "330376": 65, "either": [65, 78, 83, 84, 86, 90, 105, 113, 115, 140, 155, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 220, 283, 313, 343, 355, 357, 359, 361, 368, 370, 373, 376, 380, 386, 405, 419, 428, 435, 441, 447, 452, 453, 459, 461, 472, 484, 486, 488, 499, 501, 545, 548], "sourcecatalogobjecthgpscompon": 65, "gaussian_compon": [65, 451], "large_scale_compon": [65, 451], "sourcecataloglargescalehgp": 65, "table_associ": 65, "table_compon": [65, 451], "table_identif": 65, "identif": [65, 360, 451], "table_large_scale_compon": [65, 451], "row_idx": [65, 83], "components_statu": 65, "independ": [65, 116, 120, 280, 294, 354, 360, 364, 365, 366, 367, 368, 369, 372, 375, 376, 377, 378, 380, 386, 395, 405, 423, 428, 445, 451, 456, 457, 458, 459, 465, 472, 473, 483, 488, 493, 547, 551], "link": [65, 67, 76, 96, 206, 208, 228, 265, 357, 359, 362, 363, 366, 374, 380, 384, 390, 391, 402, 405, 407, 411, 412, 413, 424, 427, 428, 429, 430, 432, 435, 436, 443, 447, 451, 453, 459, 463, 473, 474, 488, 533, 545], "merg": [65, 82, 83, 86, 180, 183, 206, 228, 322, 354, 357, 358, 359, 360, 367, 368, 369, 373, 374, 379, 380, 383, 384, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 414, 415], "subcompon": [65, 76], "skymodel": [65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 96, 97, 100, 104, 105, 113, 115, 121, 123, 155, 206, 224, 228, 260, 265, 365, 366, 367, 369, 375, 377, 378, 395, 399, 400, 401, 405, 414, 420, 424, 425, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 451, 452, 453, 458, 461, 464, 472, 473, 483, 484, 486, 504, 505, 506, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545], "except": [65, 67, 76, 83, 86, 97, 100, 104, 105, 154, 178, 179, 181, 187, 190, 191, 283, 351, 354, 365, 369, 373, 454, 458, 501], "normalis": [65, 76, 120, 132, 133, 134, 135, 138, 140, 142, 145, 146, 150, 155, 175, 178, 179, 181, 187, 190, 191, 230, 231, 243, 352, 428, 432, 433, 447, 457, 458, 459, 464, 472], "templatespatialmodel": [65, 237, 376, 377, 402, 416, 417, 419, 420, 439, 458, 459, 464, 512], "powerlawnormspectralmodel": [65, 214, 233, 235, 238, 253, 376, 377, 382, 402, 420, 435, 436, 439, 440, 443, 452, 458, 459, 464, 472, 495, 508, 528, 533], "weight": [65, 136, 137, 143, 146, 148, 151, 177, 178, 179, 181, 186, 187, 189, 190, 191, 253, 382, 415, 419, 438, 461, 484, 500], "interp_kwarg": [66, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 208, 251, 252, 255, 256, 354, 454, 464], "vari": [66, 98, 103, 120, 146, 195, 295, 322, 366, 368, 369, 379, 399, 402, 422, 432, 437, 438, 440, 449, 455, 459, 461, 464, 468, 484, 486, 493, 496, 545], "diffus": [66, 178, 179, 181, 187, 190, 191, 260, 354, 370, 373, 414, 415, 435, 439, 451, 456, 458, 459, 463, 545], "along": [66, 96, 113, 115, 119, 130, 132, 133, 134, 135, 138, 139, 140, 142, 145, 146, 147, 149, 150, 178, 179, 181, 187, 189, 190, 191, 272, 273, 274, 294, 295, 305, 315, 316, 363, 364, 378, 416, 419, 432, 441, 451, 452, 454, 455, 458, 459, 485, 500, 501, 517, 547], "stddev": 66, "scaledregulargridinterpol": [66, 208, 400, 415], "peak_bright": 66, "peak": [66, 118, 128, 129, 135, 164, 212, 217, 219, 223, 407, 413, 420, 431, 444, 451, 455, 511], "bright": [66, 117, 243, 258, 433, 445, 446, 457, 459, 482, 497], "longitud": [66, 89, 176, 177, 178, 179, 184, 186, 189, 190, 191, 311, 341, 368, 441, 456, 459, 493, 500, 508], "peak_brightness_error": 66, "peak_latitud": 66, "peak_latitude_error": 66, "width_error": 66, "data_extend": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "decoupl": 67, "doesn": [67, 354, 355, 359, 361, 362, 368, 371, 372, 374, 463, 464, 548], "hold": [67, 78, 85, 87, 91, 95, 146, 214, 283, 363, 364, 366, 369, 548, 550], "_row_index": 67, "come": [67, 357, 360, 361, 362, 363, 364, 368, 369, 370, 371, 373, 374, 379, 381, 383, 384, 401, 402, 405, 414, 415, 419, 427, 435, 443, 459, 463, 472, 548], "integ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 86, 87, 88, 95, 97, 100, 104, 105, 113, 115, 116, 117, 120, 123, 128, 129, 136, 137, 143, 148, 151, 154, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191, 197, 199, 206, 228, 283, 301, 307, 354, 360, 368, 433, 500], "sourcecatalogobject": [68, 75, 76, 77, 451, 483], "sky_model": [68, 69, 70, 71, 72, 73, 74, 75, 76, 369, 445, 446, 451, 458, 459, 473, 516], "spatial_model": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 207, 214, 243, 253, 265, 369, 399, 431, 435, 437, 438, 439, 440, 443, 445, 446, 451, 452, 458, 459, 464, 473, 504, 505, 506, 507, 508, 509, 510, 511, 512], "spatialmodel": [68, 69, 70, 71, 72, 73, 74, 75, 76, 202, 203, 207, 214, 215, 218, 230, 232, 240, 241, 243, 251, 253, 255, 365, 377, 399, 414, 418, 451, 459, 473, 476, 483, 502, 545], "powerlawspectralmodel": [68, 70, 73, 76, 96, 104, 105, 115, 121, 123, 197, 199, 233, 234, 238, 259, 377, 378, 382, 424, 425, 428, 430, 431, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 458, 459, 461, 463, 464, 472, 473, 474, 486, 504, 505, 506, 507, 509, 510, 511, 512, 514, 516, 525, 526, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543], "sourcecatalogobjectfermibas": [69, 71, 72, 74], "asso": [69, 71, 72, 74], "assoc": 69, "3fgl_name": 69, "1fhl_name": 69, "tevcat_nam": 69, "fluxpoint": [69, 71, 72, 74, 75, 76, 96, 113, 114, 116, 117, 120, 124, 125, 126, 130, 366, 369, 378, 381, 405, 412, 413, 419, 420, 423, 425, 436, 441, 444, 445, 451, 452, 474, 483, 484, 486, 488], "flux_points_meta": [69, 71, 72, 74], "n_sigma": [69, 71, 72, 74, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 265, 267, 268, 423, 441, 451, 452, 472, 474, 486], "n_sigma_ul": [69, 71, 72, 74, 112, 113, 114, 115, 116, 117, 120, 121, 123, 441, 445, 451, 452, 472, 474, 486], "sed_type_init": [69, 71, 72, 74, 113, 114, 115], "sqrt_ts_threshold_ul": [69, 71, 72, 74, 112, 113, 114, 115, 117, 123, 441, 445, 451, 452, 472, 474], "flux_points_t": [69, 71, 72, 74, 75, 76], "is_pointlik": [69, 71, 72, 73, 74, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 405], "lightcurv": [69, 71, 72, 74, 109, 115, 120, 124, 125, 126, 130, 187, 188, 220, 271, 272, 274, 363, 365, 370, 373, 375, 378, 386, 397, 399, 400, 401, 405, 411, 412, 413, 414, 416, 417, 419, 420, 422, 445, 446, 449, 468, 483, 488, 543], "comma": [69, 70, 71, 72, 73, 74, 75, 76, 451], "sourcecatalogobjecthwcbas": [70, 73], "n_model": [70, 73], "rough": [70, 370], "residu": [70, 96, 97, 100, 104, 105, 155, 365, 366, 370, 397, 402, 408, 415, 433, 452, 453, 464, 484, 497, 547], "diskspatialmodel": [70, 237, 377, 398, 419, 458, 459, 505], "under": [70, 86, 354, 358, 363, 371, 380, 414, 415, 428, 468, 472, 484, 550, 551], "assumpt": [70, 90, 97, 100, 104, 105, 108, 122, 368, 378, 493, 497, 549], "assoc1": [71, 72, 74, 451, 474], "assoc2": [71, 72, 74, 474], "assoc_tev": [71, 72, 74], "assoc_gam1": [71, 74], "assoc_gam2": [71, 74], "assoc_gam3": [71, 74], "100000": [71, 451, 472], "mev": [71, 79, 132, 133, 134, 138, 423, 430, 432, 435, 437, 443, 447, 448, 451, 454, 456, 459, 463, 464, 474, 533], "sai": [71, 359, 373, 548], "300": [71, 83, 86, 430, 432, 436, 439, 440, 443, 447, 451, 464], "quot": [71, 259, 354, 355, 450], "consist": [71, 86, 90, 113, 115, 136, 137, 148, 151, 178, 179, 181, 190, 191, 215, 218, 354, 364, 365, 367, 368, 369, 374, 381, 398, 399, 400, 401, 402, 409, 413, 414, 416, 418, 419, 420, 428, 429, 430, 431, 438, 443, 447, 453, 455, 456, 459, 461, 472, 522, 524, 549], "previou": [71, 83, 86, 354, 357, 368, 374, 375, 379, 383, 396, 402, 420, 429, 438, 439, 456, 459, 460, 461, 474, 483], "assoc_gam": 72, "assoc_fgl": 74, "assoc_fhl": 74, "month": [74, 357, 363, 368, 371, 373, 374, 379, 383, 387, 393, 394, 395, 396, 397, 406, 409, 410, 411, 412, 413, 414, 415], "catalogu": [74, 405, 412], "components_model": 76, "spec": [76, 105, 354, 368, 410, 435, 440, 451, 463, 473], "gaussianspatialmodel": [76, 77, 237, 377, 398, 437, 438, 443, 459, 506], "shellspatialmodel": [76, 237, 240, 377, 405, 459, 510], "hdu_tabl": [78, 465], "obs_tabl": [78, 86, 91, 281, 282, 407, 437, 439, 446, 455, 460, 463, 465, 466, 470, 473, 497], "iact": [78, 79, 81, 89, 158, 161, 165, 360, 363, 364, 365, 366, 368, 370, 374, 391, 396, 410, 412, 414, 425, 431, 433, 455, 456, 458, 463, 464, 466, 485, 490, 491, 492, 494, 545, 547], "happen": [78, 357, 359, 361, 362, 368, 372, 384, 428, 458, 468, 472, 473, 484, 488, 550], "storag": [78, 488], "hduindext": [78, 291, 465], "observationt": [78, 367, 368, 416, 460, 465, 473], "data_stor": [78, 91, 158, 281, 282, 370, 390, 429, 437, 439, 446, 448, 455, 460, 463, 465, 466, 470, 473, 485, 495, 497, 498], "from_dir": [78, 85, 91, 158, 281, 282, 390, 424, 427, 429, 437, 446, 448, 455, 460, 463, 466, 470, 473, 485, 488, 495, 497, 498], "base_dir": [78, 83, 291, 463, 465, 466, 476], "asinha": 78, "630": [78, 458, 466, 472], "20136": [78, 282, 466], "47829": [78, 460, 466], "hdu_typ": [78, 83, 463, 465, 466], "event": [78, 79, 81, 82, 83, 84, 85, 88, 98, 99, 103, 112, 122, 137, 148, 151, 152, 159, 167, 178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 313, 354, 355, 358, 360, 364, 366, 368, 369, 370, 381, 386, 390, 397, 398, 399, 401, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 422, 424, 427, 428, 429, 433, 435, 436, 442, 447, 455, 465, 468, 470, 472, 473, 484, 488, 496, 497, 498, 546, 547, 550], "gti": [78, 79, 83, 84, 85, 95, 96, 97, 100, 104, 105, 113, 115, 117, 120, 152, 188, 243, 360, 363, 364, 367, 368, 369, 378, 397, 399, 400, 402, 415, 419, 420, 439, 446, 447, 452, 455, 463, 465, 466, 484, 488, 547], "hdu_class": [78, 83, 291, 463, 465, 466], "aeff_2d": [78, 83, 138, 463, 466], "bkg_3d": [78, 83, 133, 463, 466], "edisp_2d": [78, 83, 140, 463, 466], "psf_tabl": [78, 83, 145, 454, 466], "105": [78, 422, 427, 428, 443, 466, 544], "cta": [78, 79, 85, 97, 100, 104, 105, 108, 112, 128, 129, 133, 137, 138, 139, 148, 158, 208, 258, 342, 347, 349, 354, 358, 361, 362, 363, 367, 370, 373, 374, 383, 386, 391, 394, 395, 405, 411, 412, 413, 414, 422, 423, 428, 430, 432, 435, 437, 439, 440, 443, 447, 448, 452, 454, 458, 460, 465, 466, 467, 468, 472, 476, 485, 486, 488, 490, 493, 546, 547, 552], "tutori": [78, 94, 110, 120, 122, 163, 354, 357, 358, 363, 366, 367, 368, 369, 370, 371, 372, 375, 384, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 488, 489, 491, 500, 545, 548], "default_hdu_t": 78, "default_obs_t": 78, "sort": [78, 79, 83, 86, 96, 128, 323, 354, 371, 396, 474], "copy_ob": [78, 488], "subset": [78, 79, 83, 86, 116, 120, 229, 381, 409, 410, 437, 448, 458, 463, 465, 487, 546], "valid_hdu_class": [78, 83], "hdu_table_filenam": 78, "obs_table_filenam": 78, "absolut": [78, 86, 101, 132, 133, 134, 135, 138, 140, 142, 145, 150, 178, 179, 181, 183, 187, 190, 191, 287, 313, 331, 335, 486], "from_events_fil": [78, 439, 463], "events_path": [78, 439], "irfs_path": 78, "header": [78, 79, 80, 81, 82, 83, 84, 86, 89, 95, 96, 97, 99, 100, 101, 102, 104, 105, 113, 114, 115, 135, 136, 137, 143, 148, 151, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 255, 293, 336, 337, 340, 359, 364, 367, 381, 399, 407, 409, 414, 416, 419, 429, 439, 440, 456, 463, 552], "caldb": [78, 133, 135, 137, 138, 139, 148, 183, 407, 423, 430, 439, 440, 443, 447, 454, 463], "telescop": [78, 79, 81, 86, 90, 99, 138, 367, 368, 381, 386, 390, 391, 439, 445, 448, 460, 463, 464, 466], "1dc": [78, 79, 85, 97, 100, 104, 105, 108, 112, 128, 129, 133, 137, 138, 139, 148, 342, 347, 349, 362, 364, 370, 374, 395, 423, 430, 432, 435, 437, 443, 447, 448, 452, 454, 458, 486], "south_z20_50h": [78, 133, 137, 138, 139, 148, 423, 430, 443, 447, 454, 463], "ctobssim": [78, 367], "baselin": [78, 79, 221, 463], "gp": [78, 79, 85, 355, 364, 370, 432, 435, 437, 448, 463, 465], "gps_baseline_110380": [78, 79, 463], "analys": [78, 353, 354, 363, 364, 365, 366, 368, 372, 374, 376, 377, 382, 390, 391, 397, 398, 399, 401, 402, 412, 414, 417, 427, 428, 435, 446, 447, 450, 451, 457, 459, 463, 464, 472, 473, 476, 484, 548], "glob": [78, 355, 452], "pathlib": [78, 79, 82, 83, 86, 135, 187, 206, 228, 320, 427, 428, 435, 436, 439, 440, 463, 472, 473], "rglob": [78, 439, 463], "lot": [78, 354, 357, 359, 360, 361, 362, 365, 367, 368, 370, 374, 384, 394, 396, 397, 405, 413, 414, 428, 437, 464, 472, 473, 498], "flexibl": [78, 307, 354, 359, 363, 364, 365, 368, 370, 374, 375, 381, 456, 488, 545], "few": [78, 79, 83, 84, 86, 353, 354, 355, 357, 359, 360, 361, 362, 364, 366, 368, 372, 374, 379, 383, 384, 390, 404, 415, 417, 420, 424, 428, 433, 435, 437, 451, 453, 456, 463, 472, 473, 497, 501, 553], "prepar": [78, 158, 364, 365, 383, 428, 436, 453, 455, 459, 464, 472, 496, 545], "disk": [78, 105, 137, 140, 179, 189, 191, 207, 218, 220, 332, 353, 354, 364, 365, 366, 370, 377, 378, 422, 423, 427, 435, 436, 456, 457, 458, 459, 499, 502, 507, 511, 513], "from_fil": [78, 485], "hdu_hdu": 78, "hdu_index": 78, "hdu_ob": 78, "obs_index": 78, "skip_miss": [78, 413], "full": [78, 116, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 179, 206, 228, 291, 350, 353, 354, 359, 363, 364, 367, 369, 370, 374, 380, 382, 385, 392, 395, 405, 407, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 488, 499, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546], "enclosur": [78, 142, 429, 454], "require_ev": 78, "skip": [78, 146, 342, 355, 357, 366, 368, 374, 412, 458], "miss": [78, 83, 86, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 354, 357, 362, 363, 364, 365, 368, 374, 375, 378, 403, 405, 407, 413, 418, 456], "good": [78, 79, 82, 96, 115, 277, 280, 354, 359, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 427, 429, 430, 433, 443, 444, 446, 447, 450, 452, 453, 455, 457, 459, 464, 465, 468, 510, 511, 547, 552], "area": [78, 84, 100, 102, 137, 138, 153, 164, 165, 172, 179, 187, 189, 191, 354, 355, 365, 409, 411, 423, 427, 439, 448, 455, 465, 466, 493, 500, 501, 547], "dispers": [78, 84, 97, 98, 100, 102, 103, 104, 105, 107, 135, 136, 137, 140, 158, 164, 165, 168, 169, 172, 354, 360, 365, 366, 367, 399, 401, 411, 412, 413, 415, 423, 424, 427, 428, 435, 439, 455, 465, 466, 472, 473, 484, 493, 496, 547], "spread": [78, 84, 139, 148, 151, 354, 376, 402, 423, 431, 454, 493, 547], "rad_max": [78, 79, 83, 84, 144, 150, 167, 407, 416, 418, 419, 429], "altern": [78, 265, 353, 354, 357, 359, 363, 387, 405, 427, 429, 431, 438, 451, 453, 454, 456, 458, 463, 484, 485, 548], "shortcut": [78, 390, 407], "emit": [78, 196, 197, 198, 199, 340, 354, 395, 413, 493], "among": [78, 83, 86, 97, 100, 104, 105, 370, 374, 375, 377, 382, 402, 453, 547], "member": [79, 355, 359, 368, 380, 381, 413, 419, 463, 466], "reconstruct": [79, 97, 98, 100, 103, 104, 105, 106, 107, 112, 122, 123, 127, 135, 136, 137, 140, 150, 151, 164, 171, 354, 360, 365, 367, 402, 417, 423, 424, 427, 430, 432, 433, 435, 439, 443, 447, 452, 455, 457, 461, 465, 484, 486, 492, 493, 494, 501, 547], "mission": [79, 419, 547], "elaps": [79, 363, 547], "icr": [79, 81, 84, 86, 89, 90, 91, 97, 100, 104, 105, 128, 148, 158, 161, 177, 178, 179, 181, 184, 186, 189, 190, 191, 202, 203, 207, 215, 218, 232, 240, 241, 281, 282, 317, 354, 355, 378, 398, 427, 428, 429, 430, 431, 433, 436, 437, 439, 440, 443, 445, 446, 447, 448, 451, 452, 454, 455, 456, 457, 459, 460, 463, 464, 465, 466, 472, 473, 485, 488, 492, 497, 501, 505, 506, 507, 509, 510, 511], "detx": [79, 98, 103, 367, 463], "deti": [79, 98, 103, 367, 463], "view": [79, 83, 86, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 149, 150, 155, 178, 179, 181, 185, 187, 190, 191, 214, 285, 289, 341, 354, 368, 395, 400, 405, 407, 414, 415, 427, 429, 433, 435, 439, 452, 454, 455, 457, 463, 464, 488, 490, 491, 492, 493, 494, 495, 497, 547], "shouldn": [79, 354, 357], "radec": [79, 89, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 149, 150, 354, 355, 454, 456, 474], "eventlistmetadata": [79, 381], "110380": [79, 370, 432, 435, 437, 463], "106217": 79, "59": [79, 433, 443, 445, 451, 455, 466, 474], "273": [79, 409, 425, 431, 474], "59235": [79, 463], "52074074074": 79, "00e": [79, 423, 428, 439, 443, 447, 448, 452, 454, 455, 464, 472], "46e": [79, 432, 437], "median": [79, 148, 151, 390, 448, 460, 464], "02e": 79, "offset": [79, 91, 106, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 154, 158, 164, 165, 170, 173, 178, 179, 181, 183, 187, 190, 191, 354, 360, 368, 390, 399, 409, 411, 413, 418, 419, 420, 423, 429, 430, 432, 435, 436, 437, 443, 448, 454, 455, 460, 463, 466, 473, 485, 493, 495, 498], "altaz": [79, 81, 89, 141, 354, 454, 552], "alt": [79, 81, 84, 89, 90, 354, 552], "az": [79, 81, 84, 89, 90, 354, 552], "altaz_fram": [79, 89], "altaz_from_t": [79, 89], "alwai": [79, 83, 86, 135, 183, 186, 193, 196, 198, 214, 354, 355, 357, 360, 361, 362, 364, 365, 366, 368, 371, 379, 380, 387, 394, 401, 416, 417, 419, 430, 431, 435, 443, 450, 453, 455, 456, 458, 460, 461, 468, 486, 500, 501], "galactic_median": 79, "is_pointed_observ": 79, "observation_dead_time_fract": [79, 84], "dead": [79, 82, 84, 313, 364], "detector": [79, 84, 98, 103, 140, 457, 465, 493, 547], "didn": [79, 84, 361, 364, 368, 371, 476], "record": [79, 84, 354, 359, 360, 380], "dead_tim": [79, 84, 313], "2004aph": [79, 84], "285f": [79, 84], "live": [79, 82, 84, 354, 359, 362, 364, 375, 415, 418], "turn": [79, 84, 355, 357, 368, 463, 545], "observation_live_time_dur": [79, 84], "durat": [79, 82, 84, 89, 430, 439, 443, 446, 463, 485, 488], "t_live": [79, 84], "t_observ": [79, 84], "f_dead": [79, 84], "observation_time_dur": [79, 84], "wall": [79, 84], "observation_time_start": 79, "observation_time_stop": 79, "observatory_earth_loc": [79, 84], "earthloc": [79, 81, 84, 89, 92, 293, 381], "offset_from_median": 79, "pointing_radec": [79, 86, 419, 463], "bit": [79, 128, 355, 357, 361, 362, 368, 372, 373, 381, 448, 456, 501], "With": [79, 354, 363, 364, 380, 401, 414, 461, 484, 550], "32": [79, 128, 177, 431, 433, 434, 435, 452, 455, 456, 474], "incorrect": [79, 354, 381, 389, 398, 416, 417, 455, 461], "time_ref": [79, 81, 82, 86, 89], "from_stack": [79, 82, 87, 113, 115, 178, 179, 180, 181, 183, 187, 190, 191, 194, 197, 199, 419, 420, 485], "event_list": [79, 354, 355, 367], "concaten": [79, 82, 87, 180, 183, 366, 370, 376, 419, 456], "vstack": [79, 82, 367], "map_coord": [79, 137, 148, 151], "mapcoord": [79, 137, 148, 151, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 230, 413, 414, 456, 501, 508], "peek": [79, 84, 97, 100, 104, 105, 118, 119, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 354, 366, 390, 402, 408, 412, 416, 424, 429, 435, 439, 440, 448, 452, 454, 463, 465, 466, 485, 488, 490, 491, 492, 494], "allski": [79, 456], "quick": [79, 84, 97, 100, 104, 105, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 354, 357, 374, 384, 431, 432, 435, 437, 439, 447, 452, 454, 458, 463, 465, 466, 468, 474, 476, 485], "plot_energi": [79, 440], "hist": [79, 104, 105, 187, 191, 347, 430, 461], "plot_energy_offset": 79, "histogram": [79, 104, 105, 183, 187, 191, 347, 419, 448, 501, 547], "pcolormesh": [79, 115, 132, 133, 135, 138, 139, 140, 145, 147, 149, 150, 412, 418, 453, 454], "plot_imag": 79, "plot_offset2_distribut": 79, "max_percentil": 79, "98": [79, 322, 429, 430, 431, 435, 443, 445, 447, 454, 472], "offset2": 79, "quicklook": 79, "As": [79, 283, 313, 354, 355, 357, 362, 366, 367, 368, 370, 372, 380, 381, 383, 390, 395, 414, 423, 424, 427, 428, 429, 431, 432, 433, 437, 439, 440, 444, 445, 446, 447, 450, 451, 452, 453, 455, 456, 459, 461, 464, 466, 472, 474, 488, 497, 550], "percentil": 79, "np": [79, 83, 86, 108, 115, 137, 178, 179, 181, 187, 190, 191, 258, 354, 355, 365, 366, 369, 377, 378, 382, 416, 423, 427, 430, 431, 433, 435, 437, 439, 441, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 465, 480, 481, 482, 486, 488, 500, 501, 505, 506, 508, 533, 541], "r68": [79, 106, 139, 148, 151], "hess_dl3_dr1_obs_id_023523": [79, 82, 485], "wrt": [79, 148, 151, 354, 372, 447, 543], "signal": [79, 97, 100, 103, 104, 105, 163, 191, 242, 267, 268, 280, 378, 423, 427, 428, 433, 436, 445, 457, 472, 476, 491, 495, 497, 547, 549, 550, 551], "63307": 79, "01449": 79, "bin": [79, 82, 84, 97, 100, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 130, 131, 135, 136, 138, 140, 146, 148, 150, 151, 158, 161, 162, 164, 166, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 203, 205, 206, 207, 213, 215, 217, 218, 219, 220, 221, 228, 230, 232, 236, 240, 241, 242, 243, 245, 251, 253, 254, 255, 257, 261, 269, 275, 280, 347, 349, 352, 360, 365, 366, 367, 368, 370, 373, 374, 378, 385, 386, 396, 397, 399, 400, 402, 404, 405, 407, 410, 411, 412, 413, 414, 419, 420, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 484, 486, 488, 492, 496, 546, 547, 548, 549, 551], "linspac": [79, 137, 178, 179, 181, 187, 190, 191, 439, 441, 448, 453, 454, 456, 461, 500, 505], "num": 79, "control": [79, 83, 86, 97, 100, 104, 105, 354, 367, 385, 387, 423, 450, 456, 461, 488, 550], "plot_tim": 79, "errorbar": [79, 96, 97, 100, 104, 105, 183, 187, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 423, 461], "checksum": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 135, 136, 137, 143, 148, 151, 178, 179, 181, 185, 187, 190, 191, 206, 228, 321, 323, 420, 436, 464], "datasum": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 135, 136, 137, 143, 148, 151, 178, 179, 181, 185, 187, 190, 191], "card": [79, 82, 84, 95, 96, 97, 100, 101, 102, 104, 105, 113, 115, 135, 136, 137, 143, 148, 151, 178, 179, 181, 185, 187, 190, 191, 456], "select_energi": [79, 485], "fermi_3fhl": [79, 178, 179, 181, 187, 190, 191, 458, 464, 474], "fermi_3fhl_events_select": [79, 464], "select_mask": [79, 206, 228, 405, 458], "mask": [79, 83, 86, 94, 96, 97, 100, 104, 105, 112, 116, 117, 119, 120, 121, 123, 136, 137, 143, 148, 151, 153, 155, 160, 161, 162, 163, 164, 166, 176, 177, 178, 179, 181, 184, 186, 187, 189, 190, 191, 197, 199, 206, 228, 243, 366, 382, 399, 401, 402, 403, 405, 408, 414, 416, 417, 418, 419, 422, 423, 424, 435, 437, 455, 458, 462, 465, 468, 484, 495, 497, 500, 547], "region_mask": [79, 177, 189, 368, 427, 433, 437, 452, 455, 457, 473, 495, 497, 498], "circl": [79, 166, 351, 355, 368, 407, 427, 437, 447, 450, 455, 457, 460, 463, 473, 474, 485, 495, 497, 498, 501], "masked_ev": 79, "len": [79, 265, 351, 431, 438, 439, 440, 444, 446, 448, 451, 453, 455, 458, 474, 488], "5594": 79, "select_offset": [79, 439, 466, 485], "offset_band": 79, "offset_min": 79, "selected_ev": 79, "12688": 79, "select_paramet": [79, 85, 448, 485], "zd": 79, "zenith_angl": [79, 381, 464, 474], "123944": 79, "select_rad_max": 79, "radmax2d": [79, 84, 144, 167, 405, 429], "definit": [79, 80, 82, 84, 95, 97, 99, 100, 104, 105, 114, 155, 186, 280, 294, 354, 363, 364, 368, 375, 376, 377, 378, 381, 397, 401, 402, 418, 420, 429, 432, 441, 446, 454, 455, 472, 484, 486, 493, 494, 499, 501, 505, 506, 550], "select_region": [79, 85, 206, 228, 368, 397, 405, 439, 440, 448, 458, 474, 485], "ds9": [79, 177, 186, 189, 193, 206, 228, 354, 355, 368, 397, 457, 459, 501], "si": [79, 177, 186, 189, 206, 228, 258, 501], "ref": [79, 89, 97, 104, 112, 117, 123, 177, 186, 189, 206, 228, 378, 437, 441, 451, 452, 454, 456, 464, 474, 501, 536, 537, 538, 539, 540, 541, 547, 548], "world": [79, 189, 206, 228, 354, 360, 437, 474, 500], "select_row_subset": 79, "row_specifi": [79, 83, 86], "slice": [79, 83, 86, 95, 97, 100, 104, 105, 110, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 195, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 253, 255, 276, 360, 402, 438, 441, 452, 463, 500], "mc_id": [79, 364, 367, 407, 439, 463], "events2": 79, "97978": 79, "idx": [79, 83, 86, 87, 95, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 228, 430, 439, 447, 451, 453, 456, 500], "select_tim": [79, 82, 84, 87, 95, 364, 378, 399, 440, 446, 485], "inclus": [79, 186, 368], "place": [79, 82, 83, 86, 87, 95, 97, 100, 104, 105, 128, 132, 133, 134, 135, 136, 137, 138, 142, 143, 148, 150, 151, 161, 166, 178, 179, 181, 187, 190, 191, 228, 253, 327, 354, 355, 361, 362, 365, 366, 367, 368, 370, 373, 374, 375, 376, 379, 384, 398, 400, 427, 445, 456, 457, 459, 474, 484, 485, 488, 546, 552], "to_table_hdu": [79, 82, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 182, 183, 456], "gadf": [79, 80, 81, 82, 84, 90, 97, 99, 100, 104, 105, 114, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 364, 367, 378, 381, 405, 407, 416, 419, 454, 456, 472, 484, 488, 501, 547], "bintablehdu": [79, 82, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 182, 183, 189, 190, 191, 439, 456, 484], "support": [79, 81, 82, 83, 84, 85, 86, 87, 90, 95, 97, 100, 104, 105, 115, 130, 141, 146, 177, 178, 179, 180, 181, 188, 189, 190, 191, 195, 206, 228, 353, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 381, 387, 391, 394, 395, 397, 398, 399, 400, 401, 402, 405, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 428, 430, 432, 435, 437, 443, 447, 450, 451, 452, 456, 461, 463, 464, 465, 466, 472, 487, 493, 500, 501, 543, 545, 546, 548], "utilis": [79, 129, 355, 423, 427, 431, 438, 444, 456, 460, 485, 488], "include_irf": [79, 84, 485], "written": [79, 84, 95, 96, 97, 100, 102, 104, 105, 113, 115, 136, 137, 143, 148, 151, 178, 179, 181, 185, 187, 190, 191, 193, 354, 355, 357, 359, 363, 364, 374, 380, 382, 417, 423, 440, 458, 461, 476, 484, 485, 488, 501, 547, 552], "event_class": [80, 464, 474], "creatormetadata": [80, 99, 114, 381], "eventlist": [80, 84, 98, 103, 167, 178, 179, 181, 187, 190, 191, 354, 355, 360, 367, 368, 369, 381, 390, 395, 402, 407, 409, 410, 411, 413, 414, 439, 440, 448, 456, 463, 464, 474, 488, 497], "union": [80, 82, 85, 97, 99, 100, 114, 186, 318, 368, 369, 380, 381, 397, 484], "nonetyp": [80, 99, 114], "from_head": [80, 99, 114, 177, 189, 381], "convers": [80, 83, 86, 99, 113, 114, 115, 359, 378, 381, 386, 388, 405, 418, 419, 420, 423, 501], "metadata_fits_export_kei": [80, 99, 114], "to_head": [80, 99, 114, 177, 180, 182, 183, 188, 189, 381], "export": [80, 83, 86, 97, 99, 100, 113, 114, 115, 357, 378, 381, 386, 388, 399, 409, 416, 417, 420, 428, 459, 465, 466, 472], "content": [80, 99, 114, 115, 178, 179, 181, 187, 190, 191, 321, 354, 357, 359, 363, 369, 374, 381, 384, 399, 408, 413, 424, 456, 457, 463, 465, 485, 488, 499, 500], "fixed_icr": [81, 148, 423, 430, 439, 440, 443, 447], "fixed_altaz": 81, "time_start": [81, 82, 86, 369], "time_stop": [81, 82, 86, 369], "legacy_altaz": 81, "from_fits_head": 81, "pointingmod": 81, "drift": [81, 89, 90, 416], "633": [81, 97, 100, 104, 105, 158, 428, 436, 455, 472, 473, 497], "014": [81, 97, 100, 104, 105, 158, 428, 451, 455, 472, 473, 497], "pointing_info": [81, 89, 423], "get_altaz": [81, 89, 419], "obstim": [81, 89, 171, 552], "track": [81, 89, 354, 363, 369, 380, 407, 458], "horizont": [81, 90, 141, 324, 454, 552], "get_icr": [81, 89, 419], "obtain": [81, 97, 100, 103, 124, 272, 364, 369, 371, 372, 378, 415, 427, 428, 429, 433, 439, 440, 444, 446, 453, 456, 457, 461, 472, 474, 484, 488, 492, 493, 547, 549, 550], "pointinginfo": [81, 411], "to_fits_head": 81, "request": [81, 113, 115, 355, 358, 359, 361, 362, 363, 364, 365, 366, 368, 374, 378, 379, 380, 382, 384, 392, 439, 457, 476, 486], "reference_tim": [82, 84, 97, 100, 104, 105, 188, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 418, 419, 440, 444, 447, 455, 456, 543], "deal": [82, 354, 360, 369, 370, 430, 439, 446, 468, 488], "time_ref_default": 82, "1687": 82, "0000000000016": 82, "123890826": 82, "00000001": 82, "met": [82, 335, 419, 446, 547], "2004": [82, 89, 444, 466], "04t22": 82, "08": [82, 349, 390, 422, 429, 430, 432, 433, 435, 436, 443, 451, 452, 453, 455, 462, 464, 472, 473, 514, 521, 522], "184": [82, 89, 407, 411, 431, 439, 446, 457, 458], "tt": [82, 89, 336, 337, 380, 440, 446, 552], "123892513": 82, "gc": [82, 97, 100, 104, 105, 108, 112, 117, 119, 123, 128, 129, 342, 347, 349, 357, 431, 432, 435, 437, 439, 441, 450, 452, 456, 458, 459, 463, 464, 474, 476, 485, 486], "39042": 82, "183139597": 82, "9032163": 82, "239557417": 82, "49417615": 82, "04t15": 82, "678": [82, 438], "460249999": 82, "99999994": 82, "02t23": 82, "met_start": 82, "met_stop": 82, "time_delta": [82, 188, 335, 338], "time_sum": [82, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257], "git": [82, 243, 354, 355, 357, 359, 361, 362, 380, 387, 416], "delete_interv": 82, "crop": [82, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191], "bad": [82, 354, 368], "from_table_hdu": [82, 182, 183], "table_hdu": 82, "from_time_interv": 82, "group_tabl": [82, 183, 188], "atol": [82, 95, 120, 183, 188, 329, 331, 354], "group": [82, 83, 86, 87, 116, 117, 120, 121, 123, 136, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 281, 360, 369, 373, 374, 375, 378, 383, 386, 396, 399, 401, 405, 411, 414, 445, 447, 468, 486, 488, 502, 548], "belong": [82, 378, 401], "t_start": [82, 485], "mjd": [82, 89, 115, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 336, 338, 355, 418, 419, 431, 439, 440, 444, 445, 446, 447, 456, 459, 485, 536, 537, 538, 539, 540, 541, 542, 543, 552], "utc": [82, 84, 99, 114, 335, 439, 445, 446, 456, 459, 535, 536, 537, 538, 539, 540, 541, 542, 543, 552], "lc": [82, 120, 188, 367, 369], "toler": [82, 95, 120, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 331, 453], "comparison": [82, 83, 86, 95, 120, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 183, 186, 187, 189, 190, 191, 313, 410, 478], "overlap_ok": 82, "merge_equ": 82, "overlap": [82, 86, 120, 166, 183, 188, 351, 369, 427], "touch": [82, 394], "writeto": [82, 132, 133, 134, 138, 139, 140, 142, 145, 147, 149, 150, 439], "copy_indic": [83, 86], "columnclass": [83, 86], "psf_3gauss": [83, 139, 463, 494], "psf_king": [83, 147, 494], "bkg_2d": [83, 132], "rad_max_2d": [83, 150, 160, 165, 167, 429], "valid_hdu_typ": 83, "colnam": [83, 86, 178, 179, 181, 187, 190, 191, 464, 474], "has_masked_column": [83, 86], "maskedcolumn": [83, 86], "doe": [83, 86, 116, 120, 138, 148, 151, 185, 220, 254, 265, 354, 355, 361, 362, 364, 366, 368, 369, 371, 373, 374, 377, 378, 380, 381, 396, 405, 416, 423, 427, 430, 432, 435, 437, 438, 451, 453, 454, 455, 456, 457, 465, 476, 488, 497, 548], "mixin": [83, 86], "has_masked_valu": [83, 86], "slow": [83, 86, 195, 361, 370, 428, 453, 472, 473], "has_mixin_column": [83, 86], "hdu_class_uniqu": 83, "uniqu": [83, 86, 95, 135, 177, 178, 179, 180, 181, 187, 189, 190, 191, 197, 199, 206, 228, 347, 364, 365, 366, 367, 377, 380, 400, 428, 452, 459, 465, 501, 545], "hdu_type_uniqu": 83, "iloc": [83, 86], "tableiloc": [83, 86], "retriev": [83, 86, 378, 380, 424, 425, 427, 456, 459, 460, 465, 473, 485, 500, 501], "appear": [83, 86, 354, 355, 362, 368, 381, 408, 419, 451], "tableindic": [83, 86], "loc": [83, 86, 191, 347, 448, 481, 482, 490, 514, 520, 523, 524, 528], "tableloc": [83, 86], "loc_indic": [83, 86], "tablelocindic": [83, 86], "obs_id_uniqu": 83, "pprint_exclude_nam": [83, 86], "visibl": [83, 86, 344, 345, 362, 405, 423, 439, 465, 473, 474, 547], "descriptor": [83, 84, 86, 97, 100, 104, 105, 253, 292, 355, 401], "inherit": [83, 86, 354, 364, 366, 369, 378, 381, 382, 400, 405, 412, 452, 454, 499, 500], "metaattribut": [83, 86], "__attributes__": [83, 86], "pprint_include_nam": [83, 86], "unifi": [83, 86, 358, 363, 368, 394, 397, 399, 400, 401, 402, 405, 414, 415, 547], "layer": [83, 86, 366, 373], "easili": [83, 86, 115, 360, 365, 366, 370, 381, 386, 387, 445, 446, 453, 454, 456, 464, 474, 548], "mani": [83, 86, 295, 354, 355, 357, 359, 361, 363, 366, 368, 369, 370, 371, 374, 375, 380, 384, 390, 396, 397, 402, 405, 411, 412, 413, 414, 415, 418, 419, 424, 427, 430, 438, 443, 444, 456, 466, 468, 476, 484, 486, 498, 501, 545, 546, 547, 548, 552], "ascii": [83, 86, 115, 354], "writer": [83, 86, 374, 381], "list_format": [83, 86], "serialize_method": [83, 86], "explain": [83, 86, 354, 357, 359, 368, 371, 373, 374, 380, 384, 386, 388, 399, 405, 423, 427, 429, 450, 453, 457, 459, 488, 546, 548], "suppli": [83, 86, 229, 447], "add_column": [83, 86], "col": [83, 86, 405], "rename_dupl": [83, 86], "default_nam": [83, 86], "insert": [83, 86, 87, 95, 228, 380, 400, 551], "append": [83, 86, 87, 95, 131, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 228, 366, 367, 369, 400, 419, 424, 427, 429, 430, 435, 436, 437, 439, 446, 447, 448, 452, 453, 455, 458, 459, 460, 461, 497], "scalar": [83, 86, 146, 177, 178, 179, 181, 187, 190, 191, 283, 373, 407, 418, 420, 456, 500], "match": [83, 86, 103, 106, 176, 177, 179, 182, 183, 184, 186, 189, 191, 193, 267, 268, 354, 362, 413, 415, 420, 427, 430, 447, 464, 483, 500], "sever": [83, 86, 160, 359, 360, 361, 368, 369, 370, 373, 378, 381, 399, 400, 401, 405, 408, 417, 418, 419, 430, 436, 451, 463, 464, 465, 488, 548, 550], "onc": [83, 86, 97, 189, 354, 357, 359, 364, 365, 368, 369, 370, 374, 375, 376, 378, 379, 383, 384, 385, 429, 446, 448, 455, 458, 465, 468, 485, 488, 548], "There": [83, 86, 128, 354, 355, 359, 360, 361, 363, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 384, 386, 387, 413, 437, 441, 444, 450, 451, 452, 453, 454, 455, 457, 458, 465, 476, 484, 485, 488, 501], "littl": [83, 86, 373, 375, 381, 456, 464, 493, 497, 548], "approach": [83, 86, 123, 354, 360, 362, 366, 370, 375, 378, 379, 381, 419, 423, 427, 455, 468, 547, 550], "uniquifi": [83, 86], "number_of_column": [83, 86], "col_c": [83, 86], "b_1": [83, 86], "unnam": [83, 86, 184], "explicit": [83, 86, 177, 179, 354, 370, 372, 378, 500, 552], "col2": [83, 86], "perspect": [83, 86], "loop": [83, 86, 304, 367, 419, 427, 451, 456, 465, 472, 488], "duplic": [83, 86, 95, 136, 354, 355, 357, 360, 374, 375, 378, 402, 405], "ones": [83, 86, 108, 112, 116, 120, 123, 135, 358, 362, 366, 368, 371, 374, 382, 387, 390, 444, 447, 454, 456, 476, 495, 547, 548], "hstack": [83, 86, 367], "replace_column": [83, 86], "col_d": [83, 86], "col_b": [83, 86], "col0": [83, 86], "add_index": [83, 86], "engin": [83, 86], "sortedarrai": [83, 86], "bst": [83, 86], "scengin": [83, 86], "add_row": [83, 86], "val": [83, 86, 178, 179, 181, 187, 190, 191, 197, 199, 456, 500], "sequenc": [83, 86, 87, 95, 97, 104, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 197, 206, 228, 283, 384], "own": [83, 86, 94, 113, 115, 185, 187, 357, 360, 370, 376, 380, 405, 423, 439, 459, 464, 488, 500, 501], "underli": [83, 86, 186, 367, 425, 451, 456, 461, 474, 476, 485, 488, 497, 500], "particular": [83, 86, 354, 360, 367, 369, 376, 378, 379, 381, 402, 405, 416, 417, 424, 427, 428, 429, 430, 432, 436, 439, 444, 446, 447, 453, 455, 458, 463, 465, 466, 472, 473, 485, 488, 495, 497, 501, 550], "iter": [83, 86, 87, 95, 113, 115, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 228, 357, 360, 362, 370, 406, 431, 447], "three": [83, 86, 146, 354, 363, 366, 368, 380, 437, 439, 444, 445, 456, 461, 468, 493, 500, 547], "argsort": [83, 86], "kind": [83, 86, 256, 329, 365, 366, 367, 372, 373, 377, 380, 414], "quicksort": [83, 86], "mergesort": [83, 86], "heapsort": [83, 86], "index_arrai": [83, 86], "as_arrai": [83, 86], "keep_byteord": [83, 86], "structur": [83, 86, 189, 358, 359, 360, 363, 365, 367, 370, 374, 377, 380, 381, 392, 398, 399, 401, 405, 408, 420, 422, 441, 452, 455, 456, 457, 459, 468, 475, 476, 483, 485, 489, 500, 501, 548], "ma": [83, 86, 108, 112, 423, 431, 433, 547, 550], "maskedarrai": [83, 86], "nativ": [83, 86, 184, 366, 371, 405, 456], "howev": [83, 86, 112, 273, 353, 354, 355, 357, 361, 364, 367, 368, 372, 380, 382, 387, 424, 433, 441, 448, 450, 451, 452, 453, 461, 465, 466, 468, 484, 488, 500, 501, 506, 522, 548], "preserv": [83, 86, 100, 178, 179, 181, 183, 187, 190, 191, 371, 452, 457], "table_arrai": [83, 86], "unmask": [83, 86], "convert_bytestring_to_unicod": [83, 86], "bytestr": [83, 86], "unicod": [83, 86, 354], "utf": [83, 86], "charact": [83, 86, 354, 458], "uc": [83, 86], "ineffici": [83, 86, 357], "memori": [83, 84, 86, 87, 95, 97, 98, 100, 103, 104, 105, 176, 177, 186, 189, 251, 253, 255, 332, 354, 364, 366, 367, 370, 376, 378, 399, 405, 420, 430, 443, 488, 547], "manipul": [83, 86, 378, 381, 407, 461, 500], "natur": [83, 86, 354, 360, 377, 380, 459, 522], "convert_unicode_to_bytestr": [83, 86], "copy_data": [83, 86, 206, 214, 228, 243, 251, 253, 255], "regardless": [83, 86], "recarrai": [83, 86, 139, 149], "individu": [83, 86, 103, 110, 118, 350, 360, 366, 367, 369, 374, 377, 378, 382, 424, 427, 430, 438, 441, 446, 451, 452, 453, 455, 458, 459, 474, 484, 488, 493, 547], "filled_t": [83, 86], "from_panda": [83, 86], "datafram": [83, 86], "panda": [83, 86, 353, 371, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "date": [83, 86, 99, 114, 335, 371, 379, 380, 381, 383, 391, 413, 428, 431, 459, 466, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 552], "timedelta": [83, 86, 89, 188, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 313, 335, 338, 552], "importerror": [83, 86], "instal": [83, 86, 353, 354, 357, 361, 362, 363, 371, 383, 384, 385, 388, 390, 391, 394, 395, 405, 409, 412, 413, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 488, 548], "qtabl": [83, 86, 369], "pd": [83, 86], "seri": [83, 86, 115, 272, 313, 363, 368, 369, 405, 444], "1998": [83, 86, 394, 547], "2002": [83, 86, 273, 444], "datetime64": [83, 86], "dt": [83, 86], "timedelta64": [83, 86], "df": [83, 86, 110, 438, 453, 550], "option_context": [83, 86], "max_column": [83, 86], "dai": [83, 86, 188, 213, 217, 219, 236, 242, 357, 368, 374, 383, 384, 456, 541, 548], "float64": [83, 86, 135, 138, 354, 382, 454, 456, 486], "01t00": [83, 86, 89, 355, 431, 439, 552], "group_bi": [83, 86, 378], "tablegroup": [83, 86], "homogen": [83, 86, 402], "hdu_loc": 83, "warn_miss": 83, "hduloc": [83, 97], "index_column": [83, 86], "index_mod": [83, 86], "manag": [83, 86, 197, 199, 206, 228, 303, 332, 353, 354, 357, 362, 370, 371, 373, 376, 380, 381, 383, 405, 410, 412, 416, 420, 456, 458, 548], "copy_on_getitem": [83, 86], "discard_on_copi": [83, 86], "whenev": [83, 86], "refresh": [83, 86], "themselv": [83, 86, 370, 455, 457, 495], "intend": [83, 86, 283, 364, 382, 454], "scenario": [83, 86, 359, 366, 376, 386, 456, 459, 477, 549], "i0": [83, 86], "i1": [83, 86], "insert_row": [83, 86], "itercol": [83, 86], "col1": [83, 86], "syntact": [83, 86], "prefer": [83, 86, 329, 354, 359, 361, 365, 373, 374, 380, 385, 386, 390, 441, 447, 456, 457, 461, 468, 548, 550], "iterrow": [83, 86], "especi": [83, 86, 124, 357, 361, 364, 368, 374, 375, 384, 405, 411, 424, 437, 446, 451, 456, 461, 463, 464], "substanti": [83, 86], "faster": [83, 86, 178, 179, 181, 187, 190, 191, 332, 420, 431], "tbl": [83, 86], "slower": [83, 86, 179, 354, 362, 372], "keep_column": [83, 86], "location_info": 83, "max_lin": [83, 86], "max_width": [83, 86], "show_nam": [83, 86], "show_unit": [83, 86], "show_dtyp": [83, 86], "brows": [83, 86, 355, 390, 474], "space": [83, 86, 97, 100, 104, 105, 188, 191, 251, 252, 294, 312, 353, 354, 364, 370, 376, 448, 452, 453, 456, 500, 524, 533], "next": [83, 86, 97, 354, 355, 359, 370, 374, 375, 379, 382, 383, 411, 412, 423, 435, 438, 439, 441, 443, 451, 452, 455, 456, 459, 460, 461, 464], "quit": [83, 86, 354, 382, 439], "pformat": [83, 86], "tableid": [83, 86], "align": [83, 86, 95, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 149, 150, 177, 178, 179, 181, 183, 187, 189, 190, 191, 354, 454, 457, 459], "tableclass": [83, 86], "screen": [83, 86, 456, 474], "termin": [83, 86, 96, 370, 385, 386, 387, 388, 389, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473, 548], "conf": [83, 86, 354, 355, 384, 396, 411], "pad": [83, 86, 97, 100, 104, 105, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 158, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 342, 402, 405], "css": [83, 86, 384], "pformat_al": [83, 86], "pprint": [83, 86, 549], "pprint_al": [83, 86], "restrict": [83, 86, 368, 435, 452, 457], "remove_column": [83, 86], "remove_indic": [83, 86], "involv": [83, 86, 97, 100, 104, 105, 354, 359, 368, 370, 372, 376, 431, 548], "remove_row": [83, 86], "oper": [83, 86, 177, 189, 201, 354, 360, 365, 368, 400, 402, 405, 414, 415, 419, 452, 458, 459, 500, 501, 514, 516, 520, 523, 525, 528, 533], "outsid": [83, 86, 97, 104, 135, 155, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 196, 198, 208, 256, 342, 354, 368, 369, 370, 405, 433, 453, 455, 456, 457, 488, 495, 507, 533, 547], "rename_column": [83, 86, 115], "new_nam": [83, 86, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191], "won": [83, 86, 108, 112, 116, 120, 123, 326, 379, 435, 456, 463, 551], "aa": [83, 86, 283, 380], "bb": [83, 86, 380], "behavior": [83, 86, 90, 378, 404, 408, 419, 465], "itself": [83, 86, 353, 354, 369, 380, 424, 445, 446, 448, 461, 548], "float_a": [83, 86], "astyp": [83, 86], "jo": [83, 86], "john": [83, 86], "miller": [83, 86], "jackson": [83, 86], "firstnam": [83, 86], "tel": [83, 86], "round": [83, 86, 178, 179, 181, 183, 187, 190, 191, 427, 500], "decim": [83, 86], "123": [83, 86, 366, 427, 431], "85": [83, 86, 419, 437, 505, 506], "show_in_brows": [83, 86, 437], "jsviewer": [83, 86, 437], "browser": [83, 86, 357, 384, 390, 410, 413, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "jskwarg": [83, 86], "use_local_fil": [83, 86], "table_class": [83, 86], "show_row_index": [83, 86], "web": [83, 86, 362, 380, 383, 384, 390, 391, 405, 413, 451], "low": [83, 86, 135, 183, 306, 354, 355, 358, 363, 383, 411, 413, 422, 424, 427, 431, 437, 439, 452, 457, 458, 463, 464, 468, 472, 475, 484, 485, 486, 495, 496, 500, 545, 549], "prepend": [83, 86], "javascript": [83, 86], "datat": [83, 86], "search": [83, 86, 267, 268, 319, 354, 355, 390, 413, 414, 428, 431, 437, 438, 450, 451, 460, 472, 473, 474, 476, 488, 548], "legal": [83, 86], "firefox": [83, 86], "chrome": [83, 86], "safari": [83, 86], "mac": [83, 86, 354, 361, 384, 412, 548], "googl": [83, 86, 374, 383], "app": [83, 86, 384, 390, 413], "librari": [83, 86, 354, 359, 360, 364, 374, 380, 391, 424, 427, 439, 459, 463, 473, 476, 485, 488, 546, 548], "serv": [83, 86, 354, 359, 366, 370, 378, 384, 407, 450, 492], "style": [83, 86, 96, 178, 179, 181, 187, 190, 191, 351, 357, 363, 380, 409, 411, 435, 443, 454, 456, 472, 473, 488, 501], "default_css": [83, 86], "re": [83, 86, 91, 115, 116, 121, 155, 178, 179, 181, 187, 190, 191, 195, 281, 282, 347, 354, 355, 357, 359, 361, 362, 368, 369, 370, 372, 375, 376, 377, 378, 386, 388, 389, 393, 405, 407, 414, 425, 427, 428, 433, 435, 436, 437, 447, 453, 454, 458, 460, 464, 472, 474, 486, 488, 509, 548], "show_in_notebook": [83, 86], "display_length": [83, 86], "50": [83, 86, 89, 322, 361, 381, 423, 428, 429, 435, 443, 446, 447, 448, 451, 452, 454, 456, 458, 459, 460, 463, 464, 466, 472, 473, 474, 497, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550], "ipython": [83, 86, 353, 354, 370, 371, 385, 389, 397, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 472, 473, 474, 487, 548], "notebook": [83, 86, 319, 357, 358, 363, 364, 368, 369, 370, 371, 372, 374, 384, 386, 387, 388, 391, 394, 395, 396, 397, 399, 400, 401, 403, 405, 407, 411, 412, 413, 414, 415, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 487, 488, 489, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548], "xxx": [83, 86, 359, 380], "conflict": [83, 86, 354, 357, 380], "special": [83, 86, 218, 354, 364, 366, 368, 369, 377, 380, 381, 394, 432, 439, 451, 452, 458, 459], "default_notebook_table_class": [83, 86], "bootstrap": [83, 86], "default_css_nb": [83, 86], "unlik": [83, 86, 265, 361, 372], "onlin": [83, 86, 355, 359, 362, 374, 390], "repositori": [83, 86, 354, 357, 359, 362, 364, 380, 383, 405, 414, 439, 466], "modern": [83, 86, 372], "henc": [83, 86, 370, 432, 433, 486, 501, 550], "while": [83, 86, 100, 178, 179, 181, 183, 187, 190, 191, 354, 357, 359, 360, 361, 363, 366, 367, 369, 373, 375, 376, 378, 379, 380, 383, 384, 386, 423, 427, 429, 432, 440, 447, 448, 452, 454, 455, 456, 458, 459, 484, 486, 488, 499, 501, 548], "offlin": [83, 86], "cach": [83, 84, 86, 95, 97, 100, 104, 105, 253, 291, 292, 363, 364, 366, 373, 376, 384, 398, 402, 405, 420], "jqueri": [83, 86], "rule": [83, 86, 243, 261, 294, 380, 456, 500], "report": [83, 357, 370, 383, 384, 393, 407, 408, 413], "to_panda": [83, 86], "use_nullable_int": [83, 86], "vanilla": [83, 86], "analog": [83, 86, 178, 179, 181, 187, 190, 191, 501], "nullabl": [83, 86], "multi": [83, 86, 177, 189, 363, 368, 382, 399, 402, 406, 413, 422, 425, 431, 442, 452, 453, 454, 459, 460, 464, 468, 484, 486, 488, 500, 545, 546, 547], "tm": [83, 86], "jyear": [83, 86], "sc": [83, 86], "someth": [83, 86, 354, 355, 356, 357, 359, 362, 368, 371, 372, 374, 384, 386, 388, 430, 451, 501, 548], "possibli": [83, 86, 113, 360, 364, 365, 367, 368, 372, 373, 374, 375, 381, 383, 405, 495], "t1": [83, 86], "foo": [83, 86], "t2": [83, 86], "str3": [83, 86], "values_equ": [83, 86], "compar": [83, 86, 116, 117, 120, 121, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191, 195, 265, 354, 368, 371, 374, 402, 418, 419, 423, 424, 427, 431, 435, 438, 441, 443, 446, 451, 453, 455, 461, 464, 472, 483, 547, 549], "obs_info": [84, 99, 381], "obs_filt": [84, 85], "effectiveareatable2d": [84, 137, 144, 150, 172, 360, 409, 454, 463, 490], "energydispersion2d": [84, 135, 137, 144, 150, 168, 169, 355, 360, 405, 407, 412, 454, 463, 492], "psf3d": [84, 139, 144, 147, 149, 174, 395, 413, 494], "background3d": [84, 132, 144, 171, 360, 401, 405, 413, 414, 415, 454, 463, 491], "observationfilt": [84, 364, 369, 394, 415], "filter": [84, 85, 360, 364, 366, 368, 369, 414, 415, 418, 457, 460, 468, 473, 474], "fixedpointinginfo": [84, 148, 171, 419, 420, 423, 430, 439, 440, 443, 447], "lazi": [84, 95, 97, 100, 104, 105, 253, 292, 413, 488], "available_hdu": 84, "available_irf": 84, "muoneff": [84, 460], "opt": [84, 85, 451, 514, 524], "muon": [84, 460], "target_radec": 84, "tmid": [84, 419, 437, 455, 460, 473], "midpoint": 84, "tstart": [84, 86, 367, 369, 430, 439, 443, 446, 447, 463], "tstop": [84, 367, 369, 430, 439, 443, 446, 463], "in_memori": [84, 488], "hess_dl3_dr1_obs_id_020136": [84, 140, 355, 490, 491, 492, 494], "obs_copi": 84, "1234": 84, "deadtime_fract": 84, "iso": [84, 115, 188, 193, 419, 447, 458, 464, 500, 542], "2000": [84, 97, 100, 104, 105, 117, 213, 217, 219, 221, 236, 242, 394, 439, 440, 441, 455, 464, 474, 547], "deadtim": [84, 171, 430, 439, 443, 463], "memoryobserv": 84, "get_pointing_altaz": [84, 460], "get_pointing_icr": [84, 419, 437, 455, 473], "figsiz": [84, 97, 100, 104, 105, 118, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 178, 179, 181, 187, 190, 191, 342, 424, 427, 430, 431, 433, 435, 436, 437, 438, 444, 445, 446, 447, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 497, 507, 511, 514], "panel": [84, 96, 97, 100, 104, 105, 341, 408, 439, 453], "figur": [84, 97, 100, 104, 105, 118, 132, 133, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 151, 178, 179, 181, 187, 190, 191, 332, 341, 342, 348, 354, 355, 359, 374, 384, 427, 431, 435, 437, 438, 439, 441, 444, 445, 446, 450, 452, 453, 455, 456, 458, 459, 464, 465, 466, 548], "event_fil": 84, "irf_fil": [84, 133, 137, 138, 139, 148, 423, 430, 443, 447, 454, 463], "new_ob": [84, 488], "time_filt": 85, "event_filt": 85, "event_filter_typ": 85, "eventlistbas": 85, "intersect": [85, 161, 162, 166, 186, 368, 446], "yet": [85, 353, 354, 357, 359, 361, 368, 371, 374, 375, 421, 425, 428, 472, 552], "2021": [85, 208, 376, 378, 392, 419, 459, 514], "27t20": 85, "phase_filt": 85, "my_obs_filt": 85, "my_ob": 85, "111630": [85, 448, 463], "sky_region": 85, "livetime_fract": 85, "kept": [85, 97, 100, 104, 105, 113, 115, 116, 120, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 354, 360, 374, 378, 486], "filter_ev": 85, "filtered_ev": 85, "filter_gti": 85, "filtered_gti": 85, "pointing_galact": 86, "select_obs_id": [86, 437], "keyerror": [86, 185, 378], "select_observ": [86, 91, 370, 446, 460, 473, 488], "main": [86, 97, 104, 354, 357, 359, 360, 362, 366, 369, 370, 371, 374, 378, 380, 384, 395, 401, 405, 408, 413, 419, 428, 438, 439, 441, 443, 451, 454, 456, 457, 458, 470, 472, 473, 483, 485, 489, 548], "circular": [86, 97, 100, 165, 177, 179, 189, 365, 373, 375, 424, 429, 452, 460, 497, 501], "cast": 86, "interpret": [86, 97, 100, 118, 128, 129, 179, 183, 189, 190, 191, 301, 372, 382, 456, 486, 501], "sky_circl": [86, 91, 446, 460, 473], "mark": [86, 354, 365, 383], "time_box": 86, "criterion": [86, 123, 281, 423, 488], "act": [86, 370, 458, 511], "time_rang": [86, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 440, 535, 536, 537, 538, 539, 540, 541, 542, 543], "select_time_rang": 86, "par_box": 86, "value_rang": 86, "select_rang": 86, "invert": [86, 177, 189, 474], "activ": [86, 274, 357, 371, 385, 386, 388, 389, 390, 399, 416, 444, 488], "border": 86, "selected_obs_t": [86, 460, 473], "2012": [86, 395, 547], "01t01": 86, "01t02": 86, "alt_pnt": 86, "n_tel": 86, "selection_vari": 86, "discret": [86, 367, 453, 500], "cut": [86, 112, 150, 164, 165, 364, 413, 419, 422, 423, 426, 430, 448, 452, 455, 456, 460, 463, 468, 473, 474, 484, 485, 496, 497, 500, 545], "select_sky_circl": [86, 368], "cone": [86, 368, 428, 460, 472, 473, 488], "direct": [86, 99, 150, 168, 169, 172, 174, 183, 207, 215, 218, 287, 290, 355, 360, 366, 368, 373, 375, 378, 381, 405, 422, 426, 430, 455, 468, 484, 485, 493, 494, 496, 497, 500, 505, 545, 546, 547], "partial_overlap": 86, "partial": [86, 97, 100, 136, 137, 143, 148, 151, 154, 177, 189, 191, 253, 368, 372, 400, 414, 499], "mutablesequ": [87, 95, 228], "clear": [87, 95, 185, 228, 354, 359, 361, 365, 368, 369, 373, 374, 375, 413, 438, 552], "occurr": [87, 95, 182, 197, 199, 206, 228], "observations_list": 87, "observation_list": 87, "group_by_label": [87, 460], "label": [87, 180, 183, 188, 206, 228, 281, 342, 343, 348, 351, 354, 355, 358, 363, 367, 368, 383, 384, 405, 407, 416, 417, 419, 423, 425, 427, 429, 433, 435, 436, 440, 441, 444, 445, 446, 448, 450, 453, 456, 459, 460, 461, 474, 481, 482, 490, 514, 520, 523, 524, 528], "obs_clust": [87, 460], "in_memory_gener": 87, "recommend": [87, 95, 165, 206, 228, 266, 295, 296, 353, 354, 355, 357, 361, 363, 371, 380, 384, 385, 387, 390, 397, 414, 428, 429, 438, 452, 453, 455, 459, 464, 472, 488, 495, 500, 501, 548, 549, 552], "pop": [87, 95, 185, 228], "indexerror": [87, 95, 228], "empti": [87, 95, 97, 100, 104, 105, 128, 158, 178, 179, 181, 185, 187, 190, 191, 195, 228, 340, 362, 364, 396, 408, 435, 439, 440, 443, 447, 455, 456, 465, 477, 484, 497, 498, 501], "IN": [87, 95, 228], "new_observ": 87, "sampler_kwarg": 88, "dataset_kwarg": [88, 103], "simulated_data": 88, "parallel_backend": [88, 116, 117, 120, 123, 154, 303, 441], "parallelmixin": [88, 116, 123, 154], "emsembl": 88, "mapdataseteventsampl": [88, 103, 399, 400, 401, 408, 419, 439, 440], "create_map_dataset_from_observ": [88, 103], "unless": [88, 90, 116, 117, 120, 123, 154, 283, 353, 360, 379, 381, 454], "n_jobs_default": [88, 116, 117, 120, 123, 154], "backend": [88, 96, 110, 116, 117, 120, 121, 123, 154, 195, 265, 298, 303, 304, 353, 363, 365, 395, 414, 415, 419, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473, 545, 546], "job": [88, 116, 117, 120, 123, 154, 407], "ensembl": 88, "onserv": 88, "simulate_observ": 88, "pointing_t": 89, "geodeticloc": 89, "50022222": 89, "latitud": [89, 176, 177, 178, 179, 184, 186, 189, 190, 191, 311, 341, 398, 441, 456, 459, 493, 500, 508], "23": [89, 161, 354, 358, 380, 392, 416, 424, 429, 431, 447, 451, 453, 456, 458, 460, 472, 474, 497], "27177778": 89, "1835": 89, "mjdrefi": [89, 335, 338, 440], "mjdreff": [89, 335, 338, 440], "timesi": [89, 417, 419, 439], "51910": 89, "000742870370370241": 89, "2001": [89, 394, 431, 547], "00074287037": [89, 440], "1586": 89, "0000000000018": 89, "44055555555555603": 89, "21t19": 89, "53025": 89, "826414166666": 89, "6333": 89, "5144": [89, 423], "4575": 89, "3409": [89, 405], "21t20": 89, "844770648146": 89, "44573": 89, "1319": [89, 413], "reproduc": [89, 96, 115, 355, 370, 371, 372, 374, 380, 381, 385, 387, 414, 455, 476], "altaz_interpol": 89, "enum": [90, 141, 298, 299], "obs_mod": 90, "ground": [90, 369, 463, 549], "common": [90, 353, 354, 355, 357, 359, 360, 368, 370, 374, 375, 377, 378, 380, 387, 389, 390, 405, 407, 428, 429, 441, 451, 454, 457, 459, 472, 473, 476, 483, 486, 487, 501, 506, 548], "whole": [90, 108, 155, 158, 165, 168, 169, 171, 172, 177, 178, 179, 181, 190, 191, 229, 258, 267, 268, 354, 360, 366, 369, 380, 424, 427, 435, 440, 445, 448, 452, 459, 464, 466, 545], "equatori": [90, 141, 177, 178, 179, 181, 184, 186, 189, 190, 191, 454], "ogip": [90, 101, 102, 105, 135, 180, 182, 183, 186, 187, 188, 366, 369, 412, 427, 436, 484, 492, 501], "raster": [90, 179], "slew": 90, "These": [90, 183, 258, 354, 355, 359, 360, 365, 367, 368, 369, 370, 374, 375, 380, 397, 399, 400, 401, 405, 413, 419, 423, 436, 438, 439, 444, 447, 450, 452, 454, 456, 459, 460, 465, 468, 476, 493, 498, 500, 501, 549, 550, 551], "treat": [90, 386, 418, 419, 427, 439, 551], "v0": [90, 361, 362, 365, 366, 368, 371, 373, 374, 379, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 414, 415, 416, 439, 440, 454, 458], "wobbl": [90, 447, 463], "fixed_offset": [91, 164, 405], "containment_fract": 91, "apply_standard_scal": 91, "neither": [91, 164, 371, 379], "nor": [91, 164, 364, 375, 379, 383], "bia": [91, 135, 136, 140, 164, 413, 419, 455, 461, 492], "varianc": [91, 125, 126, 273, 274, 282, 369, 420, 460], "standard_scal": [91, 281, 460], "329": [91, 281, 282, 446, 451, 460, 488], "716": [91, 281, 282, 456], "225": [91, 281, 282, 378, 406, 451], "features_irf": [91, 281, 282, 460], "11587179071752986": 91, "33787": [91, 460], "368346217294295": 91, "14149953611195087": [91, 460], "04897634344908595": 91, "33788": [91, 460], "33983991887701287": 91, "11553325504064559": [91, 460], "033176650892097": 91, "33789": [91, 460], "32377509405904137": 91, "10262943822890519": [91, 460], "astri": 92, "5390438": 92, "56093766": 92, "1597317": 92, "33800122": 92, "3006942": 92, "84196311": 92, "cta_north": 92, "5326744": 92, "14419991": 92, "1719670": 92, "68542112": 92, "3051852": 92, "61422433": 92, "cta_south": [92, 423, 430, 439, 440, 443, 447], "1953830": 92, "40071076": 92, "5461745": 92, "48215685": 92, "2648150": 92, "15076259": 92, "5326841": 92, "28720322": 92, "1719610": 92, "78188096": 92, "3051827": 92, "86831929": 92, "768048": 92, "67304": 92, "5987726": 92, "52318414": 92, "2064335": 92, "19214093": 92, "hegra": [92, 259], "5324402": 92, "17229679": 92, "2922477": 92, "69543812": 92, "1947565": 92, "59400008": 92, "5622482": 92, "08529426": 92, "1665478": 92, "78910994": 92, "2505121": 92, "94111838": 92, "magic": [92, 386, 391, 407, 413, 416, 429, 464, 547], "5326859": 92, "67992517": 92, "1719502": 92, "15154854": 92, "3051856": 92, "77751797": 92, "milagro": [92, 345], "1485314": 92, "58540702": 92, "4958277": 92, "64987376": 92, "3718745": 92, "87710186": 92, "verita": [92, 386, 391, 464], "1943186": 92, "26739753": 92, "5074834": 92, "80871364": 92, "3330487": 92, "41415047": 92, "whippl": 92, "1936925": 92, "93988308": 92, "5078068": 92, "85469291": 92, "3331761": 92, "38143003": 92, "mapdataset": [93, 94, 98, 100, 103, 104, 105, 106, 107, 108, 112, 117, 120, 123, 127, 128, 129, 153, 154, 155, 158, 159, 163, 164, 214, 347, 350, 367, 369, 375, 376, 395, 396, 397, 398, 399, 400, 401, 402, 405, 419, 420, 431, 432, 436, 437, 438, 440, 441, 443, 445, 447, 448, 453, 455, 457, 458, 464, 472, 473, 486, 488, 495, 498, 547, 549, 550], "mapdatasetonoff": [93, 97, 104, 105, 108, 112, 127, 153, 159, 163, 399, 400, 402, 405, 418, 419, 433, 448, 455, 484, 498, 549], "spectrumdataset": [93, 94, 95, 97, 100, 105, 120, 122, 131, 159, 160, 164, 165, 214, 375, 396, 397, 398, 399, 400, 401, 402, 405, 408, 423, 424, 427, 429, 430, 437, 446, 447, 448, 453, 455, 461, 484, 497, 549], "spectrumdatasetonoff": [93, 100, 101, 102, 104, 121, 122, 131, 159, 160, 265, 351, 369, 396, 397, 398, 400, 401, 417, 418, 419, 423, 424, 427, 428, 430, 436, 437, 445, 448, 452, 453, 455, 461, 486, 549], "fluxpointsdataset": [93, 94, 97, 100, 375, 378, 381, 395, 399, 420, 425, 427, 436, 437, 447, 448, 484], "dl4": [94, 96, 97, 100, 104, 105, 108, 112, 116, 120, 123, 143, 164, 360, 381, 386, 401, 447, 452, 453, 488, 546, 547], "combin": [94, 96, 97, 100, 104, 105, 130, 164, 172, 178, 179, 181, 186, 187, 190, 191, 201, 243, 354, 360, 364, 365, 366, 367, 368, 369, 374, 377, 386, 398, 413, 419, 425, 430, 435, 436, 443, 447, 452, 453, 454, 455, 456, 457, 459, 465, 473, 474, 476, 478, 488, 495, 500, 516, 546, 547], "safe": [94, 96, 97, 100, 104, 105, 136, 137, 143, 148, 151, 156, 164, 354, 366, 368, 380, 399, 401, 402, 416, 417, 418, 419, 424, 427, 452, 457, 473, 484, 546], "stat_arrai": [94, 96, 97, 100, 104, 105, 382], "stat_sum": [94, 95, 96, 97, 100, 104, 105, 382, 418, 419, 435, 447, 452, 458, 488], "contributes_to_stat": 95, "contribut": [95, 206, 214, 228, 243, 350, 354, 356, 363, 368, 376, 378, 384, 391, 394, 405, 407, 409, 455, 489, 524, 545, 548, 549], "likelihood": [95, 97, 100, 105, 112, 113, 114, 115, 117, 123, 266, 280, 354, 360, 363, 366, 367, 370, 372, 374, 375, 376, 378, 386, 393, 395, 396, 399, 406, 409, 412, 414, 415, 420, 425, 427, 428, 429, 431, 437, 441, 445, 446, 448, 452, 453, 455, 461, 464, 472, 473, 476, 484, 486, 488, 524, 546, 547, 549, 550], "energy_axes_are_align": 95, "is_all_same_energy_shap": 95, "is_all_same_shap": 95, "is_all_same_typ": 95, "meta_t": [95, 96, 97, 100, 104, 105, 158, 165, 378, 381, 402, 424, 430, 455, 484], "info_t": [95, 424, 427, 428, 430, 435, 447, 452, 458, 488], "cumul": [95, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191, 305, 367, 427, 439, 458, 488], "lost": [95, 97, 104, 488, 501], "filename_model": [95, 113, 265, 458, 464], "verif": [95, 206, 228, 321, 436, 464], "time_min": [95, 113, 115, 188, 368, 369, 370, 440, 445, 451, 456], "time_max": [95, 113, 115, 188, 368, 369, 370, 440, 445, 451, 456], "slice_by_energi": [95, 97, 100, 104, 105, 113, 115, 253, 402, 452], "dismiss": 95, "stack_reduc": [95, 131, 398, 424, 427, 429, 435, 436, 437, 448, 452, 453, 486], "nan_to_num": [95, 97, 100, 104, 105, 136, 137, 143, 148, 151, 179, 187, 191, 253], "togeth": [95, 97, 100, 104, 105, 116, 120, 206, 228, 351, 354, 367, 371, 374, 385, 397, 433, 435, 436, 441, 446, 452, 453, 455, 458, 459, 460, 461, 466, 473, 484, 485, 548], "finit": [95, 97, 100, 104, 105, 136, 137, 143, 148, 164, 179, 187, 191, 253, 372], "joint": [95, 104, 105, 110, 121, 131, 265, 362, 363, 366, 370, 374, 376, 386, 395, 396, 398, 399, 414, 415, 422, 424, 425, 427, 428, 429, 431, 438, 442, 447, 452, 453, 455, 459, 460, 461, 464, 468, 472, 486, 488, 545, 546, 547], "to_spectrum_dataset": [95, 97, 100, 104, 105, 376, 398, 400, 448, 452, 461], "skyregion": [95, 97, 100, 104, 105, 117, 136, 137, 143, 148, 151, 161, 162, 166, 181, 186, 187, 191, 206, 228, 314, 317, 368, 424, 439, 441, 457, 459, 492, 497, 501], "mask_fit": [96, 97, 100, 104, 105, 366, 399, 416, 429, 435, 448, 452, 453, 457, 461, 484], "mask_saf": [96, 97, 100, 101, 104, 105, 164, 366, 399, 452, 455, 457, 484], "bundl": [96, 97, 100, 104, 105, 363, 366, 384, 406, 414, 437, 452, 455, 484, 501, 546, 547], "chi2": [96, 366, 396, 438, 447, 453, 484, 550], "part": [96, 354, 357, 360, 363, 365, 367, 368, 369, 370, 372, 373, 374, 379, 380, 395, 399, 400, 401, 409, 414, 419, 420, 423, 424, 427, 435, 443, 451, 452, 456, 457, 473, 474, 488, 493, 497], "diff_flux_point": [96, 452], "optimizeresult": [96, 195, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473], "minuit": [96, 110, 195, 365, 372, 399, 414, 415, 419, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473], "migrad": [96, 195, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473], "messag": [96, 357, 368, 370, 377, 403, 418, 424, 425, 427, 428, 429, 435, 436, 437, 447, 448, 453, 464, 472, 473, 488, 548], "successfulli": [96, 424, 425, 427, 428, 429, 435, 436, 437, 447, 448, 453, 464, 472, 473], "nfev": [96, 195, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473], "covarianceresult": [96, 195, 424, 425, 427, 428, 429, 435, 436, 437, 448, 453, 464, 472, 473], "to_tabl": [96, 115, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 182, 183, 187, 197, 199, 220, 405, 425, 427, 428, 437, 441, 443, 445, 447, 451, 459, 474, 486], "2159e": 96, "1619e": 96, "0000e": [96, 424, 427, 428, 429, 430, 432, 435, 443, 447, 453, 459, 473, 533], "stat_typ": [96, 97, 100, 104, 105, 400, 435, 447, 452, 458], "data_shap": [96, 97, 100, 104, 105, 176, 177, 186, 189, 452, 501], "flux_pr": 96, "predict": [96, 97, 100, 103, 104, 105, 112, 113, 115, 116, 117, 120, 121, 127, 155, 158, 164, 171, 232, 243, 270, 305, 350, 360, 365, 366, 367, 402, 419, 420, 428, 430, 432, 433, 435, 437, 439, 441, 443, 452, 455, 461, 472, 473, 486, 488, 492, 495, 514, 547, 550], "plot_fit": [96, 104, 105, 424, 427, 428, 429, 437, 448, 472], "ax_spectrum": [96, 104, 105, 424, 427, 428, 429, 448], "ax_residu": [96, 104, 105, 424, 427, 428, 429, 448, 472], "kwargs_spectrum": [96, 104, 105], "kwargs_residu": [96, 104, 105], "axis_nam": [96, 97, 100, 104, 105, 113, 115, 124, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 184, 186, 187, 189, 190, 191, 441, 445, 446, 447, 452], "plot_spectrum": [96, 132, 435, 447, 452], "plot_residu": [96, 97, 100, 104, 105, 403, 405, 435, 473], "kwargs_model": 96, "color": [96, 104, 105, 132, 133, 191, 343, 344, 345, 348, 351, 355, 423, 425, 427, 428, 429, 430, 431, 433, 435, 437, 438, 441, 445, 448, 450, 453, 455, 458, 460, 461, 488, 497, 501, 505, 506, 524], "red": [96, 273, 344, 423, 430, 433, 435, 438, 450, 460, 461, 505, 506], "kwargs_fp": 96, "green": [96, 104, 105, 413, 438, 460, 461], "marker": [96, 97, 100, 104, 105, 423, 424, 427, 429, 431, 437, 444, 445, 446, 447, 474], "blue": [96, 97, 100, 104, 105, 344, 427, 433, 435, 438, 460, 497], "markers": [96, 97, 100, 104, 105, 461], "diff": [96, 97, 100, 104, 105, 354, 357, 362, 366, 435, 443, 473], "suffix": [96, 113, 355, 365, 377, 383, 459, 500, 502], "cash": [97, 100, 104, 105, 158, 270, 275, 354, 366, 405, 430, 432, 435, 443, 447, 452, 455, 458, 461, 472, 473, 484, 547], "wcsndmap": [97, 100, 108, 123, 128, 146, 148, 151, 153, 155, 160, 161, 162, 163, 166, 171, 172, 177, 178, 179, 181, 187, 189, 190, 192, 193, 206, 228, 243, 251, 341, 347, 349, 360, 398, 399, 400, 402, 405, 407, 414, 416, 419, 420, 431, 432, 441, 450, 452, 455, 456, 457, 464, 474, 484, 486, 494, 497], "psfmap": [97, 98, 100, 103, 104, 105, 136, 137, 143, 144, 146, 151, 158, 165, 174, 366, 367, 375, 395, 398, 399, 401, 402, 414, 420, 431, 452, 464, 488, 494], "kernel": [97, 100, 104, 105, 108, 112, 118, 119, 123, 135, 136, 137, 146, 148, 151, 153, 158, 163, 165, 168, 179, 189, 191, 360, 381, 400, 401, 406, 411, 415, 416, 431, 433, 448, 455, 456, 457, 464, 474, 484, 488, 492], "edispmap": [97, 98, 100, 103, 104, 105, 136, 143, 144, 148, 151, 158, 165, 168, 169, 366, 367, 375, 395, 398, 399, 400, 402, 405, 454, 492], "mapdatasetmetadata": [97, 100, 381], "lazili": 97, "104317": [97, 452, 458], "91507": [97, 452], "12809": [97, 452, 458], "69": [97, 420, 431, 451, 452], "28e": [97, 425, 435, 437, 452], "07": [97, 99, 114, 158, 329, 369, 390, 422, 425, 426, 428, 435, 437, 446, 448, 451, 452, 454, 456, 458, 464, 467, 517, 518, 519, 520], "m2": [97, 138, 158, 428, 430, 432, 433, 435, 437, 443, 452, 454, 455, 463, 472, 473], "90e": [97, 428, 435, 452], "768000": [97, 452], "691680": [97, 452, 458], "background_model": [97, 100, 104, 105, 123, 366, 367, 374, 376, 401, 432, 473, 491], "energy_range_fit": [97, 100, 104, 105, 452], "energy_range_saf": [97, 100, 104, 105, 452], "energy_range_tot": [97, 100, 104, 105], "largest": [97, 100, 104, 105, 191, 354], "mask_fit_imag": [97, 100, 104, 105], "mask_imag": [97, 100, 104, 105], "mask_safe_edisp": [97, 100, 104, 105], "mask_safe_imag": [97, 100, 104, 105, 136, 137, 143, 148, 151], "mask_safe_psf": [97, 100, 104, 105], "energy_axis_tru": [97, 100, 104, 105, 106, 107, 135, 136, 137, 138, 140, 145, 146, 148, 158, 355, 399, 423, 424, 427, 429, 430, 431, 433, 437, 439, 440, 443, 446, 447, 448, 452, 454, 455, 464, 465, 473, 492, 495, 497, 498], "migra_axi": [97, 100, 104, 105, 107, 137, 140, 439, 440, 454, 455], "rad_axi": [97, 100, 104, 105, 107, 145, 148, 151, 452, 454, 455, 488], "binsz_irf": [97, 100, 104, 105, 107, 452, 455, 488], "reco_psf": [97, 100, 104, 105, 107, 455, 465], "reco": [97, 100, 104, 105, 135, 168, 354, 360, 369, 378, 415, 416, 423, 452, 455, 465, 547], "migrat": [97, 100, 104, 105, 107, 140, 363, 398, 405, 414, 439, 455, 492, 493], "edispkernelmap": [97, 100, 101, 104, 105, 107, 137, 143, 144, 148, 151, 158, 165, 168, 401, 402, 431, 455, 464, 488, 492], "binsz_irf_default": [97, 100, 104, 105, 455], "empty_map": [97, 100, 104, 105, 438, 455, 497], "binsz": [97, 100, 104, 105, 137, 146, 148, 158, 161, 162, 166, 177, 178, 179, 181, 186, 187, 189, 190, 191, 370, 427, 437, 438, 439, 440, 443, 448, 450, 452, 454, 455, 456, 457, 459, 464, 465, 473, 495, 497, 498, 500, 501, 504, 506, 507, 508, 509], "proj": [97, 100, 104, 105, 158, 177, 178, 179, 189, 190, 191, 427, 455, 456, 464, 473, 497], "car": [97, 100, 104, 105, 158, 189, 190, 191, 206, 228, 368, 397, 437, 454, 455, 456, 473, 474], "cutout": [97, 100, 104, 105, 136, 137, 143, 148, 151, 154, 177, 179, 187, 189, 191, 253, 360, 366, 395, 400, 405, 411, 414, 432, 433, 435, 437, 441, 452, 455, 464, 473, 474, 484], "trim": [97, 100, 136, 137, 143, 148, 151, 154, 189, 191, 253], "cutout2d": [97, 100, 136, 137, 143, 148, 151, 154, 189, 191, 253, 360], "downsampl": [97, 100, 104, 105, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 396, 402, 411, 452], "fake": [97, 100, 104, 105, 366, 367, 397, 429, 430, 443, 447, 461], "from_geom": [97, 100, 104, 105, 136, 137, 146, 148, 151, 178, 179, 181, 185, 187, 190, 191, 399, 418, 452, 456, 457, 501, 507], "geom_exposur": [97, 100, 104, 105, 418, 452], "geom_psf": [97, 100, 104, 105, 452], "geom_edisp": [97, 100, 104, 105, 452], "migra": [97, 100, 104, 105, 137, 140, 169, 370, 439, 440, 454, 493], "from_hdulist": [97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 185, 186, 187, 189, 190, 191, 456], "hdulist": [97, 100, 102, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 185, 186, 187, 189, 190, 191, 439, 456, 484], "info_dict": [97, 100, 104, 105, 267, 268, 347, 402, 420, 452], "in_safe_data_rang": [97, 100, 104, 105], "npred": [97, 100, 104, 105, 112, 113, 115, 116, 117, 120, 121, 123, 253, 270, 365, 366, 367, 376, 378, 393, 395, 402, 405, 411, 413, 439, 441, 451, 452, 461, 464, 484, 486, 550], "npred_background": [97, 100, 104, 105, 113, 115, 402, 429, 430, 441, 452, 486, 550], "npred_sign": [97, 100, 104, 105, 350, 405, 419, 452, 550], "model_nam": [97, 100, 104, 105, 206, 228, 350, 452], "upon": [97, 100, 104, 105, 363, 432, 458, 463, 484], "npred_sig": [97, 100, 104, 105, 366], "pad_width": [97, 104, 123, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 176, 177, 178, 179, 181, 182, 183, 186, 187, 189, 190, 191], "edg": [97, 100, 104, 105, 108, 110, 112, 116, 119, 120, 123, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 147, 149, 150, 158, 159, 164, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 207, 347, 368, 378, 396, 402, 405, 423, 436, 437, 438, 439, 440, 444, 454, 455, 456, 457, 464, 465, 472, 505], "array_lik": [97, 104, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 269, 275, 280], "ax_spati": [97, 100, 104, 105], "ax_spectr": [97, 100, 104, 105], "kwargs_spati": [97, 100, 104, 105, 435, 473], "kwargs_spectr": [97, 100, 104, 105, 435, 473], "plot_residuals_spati": [97, 100, 104, 105, 435, 443, 473], "plot_residuals_spectr": [97, 100, 104, 105], "outlin": [97, 100, 104, 105, 202, 203, 207, 215, 218, 232, 240, 241, 255, 357, 359, 362, 363, 364, 365, 368, 374, 377], "overlaid": [97, 100, 104, 105, 428], "wcsax": [97, 100, 104, 105, 179, 186, 187, 191, 206, 228, 349, 351, 435, 456, 474, 504, 508, 509, 510], "circleskyregion": [97, 100, 104, 105, 160, 161, 165, 189, 207, 355, 368, 423, 424, 427, 429, 430, 433, 435, 437, 439, 440, 446, 450, 452, 455, 457, 458, 473, 495, 497, 498, 501], "reg": [97, 100, 104, 105, 457, 459], "cmap": [97, 100, 104, 105, 344, 345, 429, 435, 450, 456, 458, 464, 465, 472, 473, 497], "rdbu_r": [97, 100, 104, 105], "vmin": [97, 100, 104, 105, 344, 345, 431, 435, 443, 452, 456, 457, 464, 465, 472, 473, 497], "vmax": [97, 100, 104, 105, 344, 345, 432, 435, 437, 443, 452, 456, 457, 464, 465, 472, 473, 497], "add_cbar": [97, 100, 104, 105, 115, 132, 133, 135, 138, 139, 140, 145, 146, 147, 149, 178, 179, 181, 187, 190, 191, 342, 431, 432, 433, 435, 437, 443, 448, 450, 452, 454, 455, 456, 458, 459, 464, 465, 472, 473, 501, 504, 505, 506, 509, 510, 512], "markerfacecolor": [97, 100, 104, 105], "smooth_kernel": [97, 100], "smooth_radiu": [97, 100], "smooth": [97, 100, 104, 105, 108, 118, 119, 128, 179, 191, 207, 244, 346, 349, 405, 410, 411, 412, 414, 415, 422, 433, 435, 437, 441, 443, 448, 452, 455, 456, 458, 464, 472, 473, 474, 502, 505, 534], "imshow": [97, 100, 146, 179, 191, 342, 348, 412, 456, 474], "symmetr": [97, 100, 104, 105, 112, 121, 123, 166, 175, 179, 215, 354, 365, 395, 407, 410, 425, 447, 455, 461, 463, 476, 486, 494, 505, 506, 550], "resample_energy_axi": [97, 100, 104, 105, 136, 402, 407, 452], "resampl": [97, 100, 104, 105, 115, 130, 131, 136, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 349, 405, 407, 444, 488], "account": [97, 100, 104, 105, 112, 155, 171, 206, 228, 243, 267, 268, 274, 329, 362, 367, 370, 378, 380, 401, 418, 420, 423, 424, 429, 433, 435, 441, 447, 448, 453, 455, 457, 473, 484, 486, 549, 550], "reset_data_cach": [97, 100, 104, 105], "240": [97, 100, 104, 105, 112, 451, 452, 486], "320": [97, 100, 104, 105, 112, 422, 446, 449, 451, 452, 458, 486, 534], "slice_by_idx": [97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 402, 414, 416, 441, 456, 464], "unchang": [97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 413], "ndim": [97, 104, 133, 135, 138, 177, 184, 189, 429, 432, 437, 441, 452, 454, 455, 456, 463, 464, 474, 486, 501], "project": [97, 104, 117, 155, 161, 177, 178, 179, 181, 186, 187, 189, 190, 191, 203, 206, 207, 215, 218, 228, 230, 240, 241, 245, 251, 255, 290, 316, 354, 355, 356, 357, 359, 361, 368, 370, 371, 374, 380, 397, 405, 413, 419, 428, 431, 433, 437, 441, 448, 454, 456, 457, 458, 463, 464, 470, 472, 473, 474, 476, 497, 500, 501, 510, 511, 546, 548], "denot": [97, 104, 378, 484], "epsilon_": [97, 104, 484], "jk": [97, 104, 484], "mbox": [97, 104], "overlin": [97, 104, 484], "n_": [97, 104, 269, 275, 484, 549, 550, 551], "_k": [97, 104, 484], "_": [97, 104, 118, 216, 235, 354, 368, 378, 380, 430, 433, 450, 451, 453, 458, 461, 484, 497], "1k": [97, 104], "2k": [97, 104], "bkg_": [97, 104], "epsilon_k": [97, 104, 484], "OR": [97, 104, 452, 457, 458], "off": [97, 100, 102, 104, 105, 112, 153, 159, 160, 163, 166, 175, 268, 280, 351, 352, 357, 360, 366, 368, 369, 370, 399, 405, 407, 409, 419, 423, 424, 428, 429, 433, 437, 445, 446, 448, 452, 453, 455, 461, 484, 497, 498, 547, 549, 550, 551], "counts_off": [97, 100, 101, 104, 105, 153, 159, 160, 163, 352, 366, 407, 418, 419, 428, 429, 430, 433, 437, 448, 452, 484, 550], "to_hdulist": [97, 100, 104, 105, 113, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 178, 179, 185, 186, 187, 190, 191, 456], "to_imag": [97, 100, 104, 105, 135, 136, 146, 148, 151, 176, 177, 186, 189, 376, 399, 400, 423, 433, 437, 452, 464, 498, 501], "imag": [97, 100, 104, 105, 108, 118, 119, 128, 137, 138, 139, 145, 147, 148, 149, 151, 153, 163, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 255, 276, 279, 319, 340, 342, 343, 344, 345, 349, 354, 362, 363, 365, 370, 371, 374, 375, 384, 386, 391, 393, 394, 395, 398, 399, 400, 406, 410, 411, 412, 413, 414, 422, 432, 433, 435, 441, 442, 455, 457, 459, 463, 473, 474, 484, 485, 486, 493, 496, 497, 498, 499, 500, 501, 545, 546, 547, 553], "to_mask": [97, 100, 104, 105, 450], "to_region_map_dataset": [97, 100, 104, 105, 452], "again": [97, 100, 104, 105, 148, 357, 364, 366, 368, 370, 375, 381, 385, 400, 401, 404, 411, 416, 425, 427, 428, 435, 440, 441, 456, 459, 461, 464, 472, 474, 501, 548], "ON": [97, 100, 122, 165, 166, 167, 175, 352, 360, 407, 423, 427, 430, 433, 437, 445, 446, 448, 453, 455, 461, 488, 497, 547, 549, 551], "regiongeom": [97, 100, 104, 105, 113, 117, 158, 165, 167, 168, 169, 171, 172, 187, 203, 207, 215, 218, 230, 240, 241, 243, 245, 251, 255, 368, 369, 376, 386, 401, 402, 405, 423, 424, 427, 429, 430, 437, 441, 446, 447, 448, 451, 452, 455, 464, 474, 484, 497, 500], "oversample_energy_factor": [98, 103, 440], "t_delta": [98, 103, 188, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257], "keep_mc_id": [98, 103], "n_event_bunch": [98, 103], "oversampl": [98, 103, 146, 148, 151, 158, 165, 171, 177, 178, 179, 181, 186, 187, 190, 191, 203, 207, 215, 218, 219, 220, 230, 240, 241, 243, 245, 251, 255, 257, 261, 396, 455], "montecarlo": [98, 103, 195], "bunch": [98, 103, 355, 548], "event_det_coord": [98, 103], "event_list_meta": [98, 103, 400], "pleas": [98, 103, 355, 357, 359, 361, 363, 389, 394, 395, 396, 405, 413, 415, 425, 427, 428, 429, 430, 432, 435, 439, 440, 444, 446, 447, 452, 472, 477, 488], "futur": [98, 103, 116, 117, 120, 196, 198, 354, 359, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 413, 435, 439, 456, 464, 477, 486, 545], "sampler": [98, 305, 363, 367, 401, 405, 439], "sample_background": [98, 103, 399], "sample_edisp": [98, 103], "edisp_map": [98, 103, 136, 137, 454, 492], "sample_psf": [98, 103], "psf_map": [98, 103, 148, 151], "sample_sourc": [98, 103], "creator": [99, 114, 357, 381, 428, 459, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "dev118": [99, 114, 391, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "gc10712608": [99, 114, 391, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "datetim": [99, 114, 381], "2024": [99, 114, 391, 392, 428, 459, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "56": [99, 114, 423, 448, 456, 465], "389260": 99, "obsinfometadata": 99, "pointinginfometadata": 99, "event_typ": [99, 464, 474], "coerce_numbers_to_str": 99, "acceptance_off": [100, 101, 105, 153, 163, 366, 423, 424, 427, 430, 433, 484, 550], "wstat": [100, 105, 277, 278, 366, 393, 411, 412, 427, 428, 430, 433, 437, 448, 452, 461, 484, 547], "therefor": [100, 360, 364, 367, 368, 369, 373, 375, 377, 387, 405, 424, 445, 448, 453, 456, 457, 460, 461, 474, 486, 550, 551], "ring": [100, 112, 153, 156, 163, 177, 178, 179, 360, 363, 370, 373, 386, 395, 399, 401, 411, 412, 413, 414, 422, 434, 438, 457, 468, 484, 487, 496, 499, 500, 547], "convolv": [100, 123, 146, 179, 191, 365, 393, 402, 405, 414, 430, 431, 433, 456, 494, 524], "psfkernel": [100, 148, 151, 179, 191, 366, 375, 414, 494], "edispkernel": [100, 136, 140, 168, 400, 492], "ratio": [100, 105, 153, 177, 178, 179, 268, 280, 378, 423, 448, 463, 498, 547, 549, 550, 551, 553], "poisson": [100, 105, 267, 268, 269, 275, 277, 278, 280, 313, 366, 367, 396, 401, 425, 430, 433, 443, 547, 548, 550], "n_off": [100, 105, 268, 277, 278, 280, 549, 550], "from_map_dataset": [100, 105], "etc": [100, 105, 113, 354, 359, 360, 364, 365, 366, 369, 370, 374, 375, 378, 380, 381, 402, 428, 430, 435, 443, 445, 447, 448, 452, 456, 459, 461, 464, 472, 484, 497, 547], "defer": [100, 105], "margin": [100, 105, 177, 179, 189, 191, 206, 228, 243, 365, 457, 505, 547, 549], "npred_off": [100, 105, 550], "mu_bkg": [100, 105, 267, 278, 280, 390, 548, 550], "Not": [100, 104, 105, 180, 186, 188, 362], "map_out": [100, 105, 136, 137, 143, 148, 151, 178, 179, 181, 187, 190, 191], "alpha_": [100, 105], "a_": [100, 105, 138, 490, 493, 550], "alpha_1": [100, 105], "_1": [100, 105, 485], "alpha_2": [100, 105], "_2": [100, 105], "off_2": [100, 105], "to_map_dataset": [100, 105], "datasetread": 101, "arf": [101, 102, 105, 182, 183, 186, 187, 427, 501], "rmf": [101, 102, 105, 135, 136, 137, 411, 427], "pha": [101, 102, 105, 187, 366, 411, 414, 427, 436], "pha_ob": [101, 131, 436, 453], "bkg_ob": 101, "arf_ob": 101, "rmf_ob": 101, "get_filenam": [101, 102], "pha_meta": 101, "arffil": 101, "rmffile": 101, "bkgfile": 101, "get_valid_path": 101, "read_arf": 101, "read_bkg": 101, "read_pha": 101, "read_rmf": 101, "datasetwrit": 102, "sherpa": [102, 105, 135, 182, 183, 186, 187, 195, 269, 275, 353, 354, 363, 371, 372, 374, 375, 385, 386, 388, 395, 409, 410, 411, 412, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 501, 522, 549], "kev": [102, 123, 183, 431, 452, 501], "filename_bkg": 102, "filename_arf": 102, "filename_rmf": 102, "get_ogip_meta": 102, "is_bkg": 102, "to_counts_hdulist": 102, "write_arf": 102, "write_bkg": 102, "write_pha": 102, "write_rmf": 102, "product": [103, 178, 179, 181, 184, 187, 190, 191, 254, 360, 369, 370, 380, 381, 390, 405, 419, 420, 425, 431, 440, 448, 452, 453, 455, 464, 466, 486, 493, 547], "fold": [103, 378, 425, 436, 484, 486], "improv": [103, 265, 356, 358, 359, 360, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 379, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 456, 463, 488, 498, 505], "dataset_nam": [103, 106, 120, 206, 214, 228, 376, 382, 435, 439, 440, 443, 452, 458, 473, 508], "plotmixin": [104, 105], "plot_count": [104, 105], "kwargs_count": [104, 105], "kwargs_background": [104, 105], "plot_excess": [104, 105, 408], "kwargs_excess": [104, 105], "kwargs_npred_sign": [104, 105], "pha_obs23523": [104, 105, 121, 265, 461, 486], "black": [104, 105, 343, 344, 351, 372, 414, 416, 423, 448, 450, 455, 460, 497], "plot_mask": [104, 105, 179, 187, 191, 424, 427, 428, 497], "kwargs_fit": [104, 105, 347], "kwargs_saf": [104, 105], "dummi": [104, 105, 368, 432, 488], "illustr": [104, 105, 355, 364, 366, 367, 368, 370, 373, 429, 431, 436, 441, 452, 455, 456, 458, 459, 464, 478, 484, 497, 498, 505, 506, 514, 546], "top": [104, 105, 341, 350, 354, 359, 370, 374, 376, 387, 413, 429, 431, 437, 441, 444, 445, 447, 451, 455, 474, 488, 501, 546, 548, 552], "optinon": [104, 105], "pink": [104, 105], "from_spectrum_dataset": [105, 423, 430], "ogipdatasetread": 105, "ogipdatasetwrit": [105, 418, 420], "energy_bin_per_decade_max": 106, "spatial_width": 106, "spatial_width_max": 106, "spatial_bin_s": 106, "spatial_bin_size_min": 106, "exce": 106, "window": [106, 353, 354, 361, 371, 384, 385, 386, 388, 394, 410, 414, 431, 451, 547, 548, 550], "convolut": [108, 112, 118, 123, 146, 179, 191, 353, 366, 372, 393, 400, 402, 411, 413, 414, 420, 433, 456, 484, 501], "gaussian2dkernel": 108, "lima": 108, "adapt": [108, 153, 195, 363, 364, 367, 368, 373, 374, 376, 377, 380, 383, 390, 395, 396, 398, 399, 400, 402, 403, 405, 408, 411, 412, 414, 416, 418, 419, 420, 452, 454, 456, 457, 498], "roughli": [108, 357, 362, 368, 370, 373, 374, 412, 433], "368": 108, "65e": 108, "slightli": [108, 183], "li": [108, 112, 161, 360, 423, 431, 433, 439, 547, 550], "asmooth": [108, 109, 373, 400, 411, 414], "signific": [108, 112, 113, 114, 115, 122, 123, 130, 265, 267, 268, 272, 344, 345, 352, 359, 360, 361, 362, 369, 370, 374, 375, 378, 380, 401, 402, 410, 413, 414, 419, 420, 422, 423, 427, 428, 434, 435, 436, 437, 438, 444, 445, 448, 451, 453, 465, 468, 472, 474, 484, 486, 488, 493, 500, 546, 547, 548], "exactli": [108, 112, 116, 120, 123, 183, 349, 429, 446, 448, 457, 461, 464, 484, 501], "rather": [108, 112, 116, 120, 123, 359, 372, 375, 413, 416, 418, 420, 424, 453, 456, 474, 484, 506, 550], "closest": [108, 112, 116, 120, 123, 177, 178, 179, 181, 187, 190, 191, 457, 486], "explan": [108, 112, 116, 120, 123, 359, 391, 444, 552], "dl5": [108, 112, 116, 120, 123, 381, 420, 447, 453, 546, 547], "dl6": [108, 112, 116, 120, 123, 546, 547], "arang": [108, 369, 431, 446], "config_paramet": [108, 110, 111, 112, 116, 117, 119, 120, 121, 122, 123], "estimate_map": 108, "sqrt_t": [108, 112, 113, 115, 123, 128, 131, 267, 268, 347, 378, 390, 402, 424, 427, 428, 431, 433, 435, 437, 448, 451, 452, 457, 465, 472, 474, 486, 548, 550], "get_kernel": 108, "pixel_scal": [108, 177, 189], "get_scal": 108, "n_scale": 108, "4142135623730951": 108, "selection_al": [108, 123], "excessmapestim": [109, 128, 129, 378, 401, 402, 403, 405, 408, 418, 420, 433, 435, 448, 457, 465, 486], "tsmapestim": [109, 347, 375, 378, 400, 401, 403, 405, 419, 431, 437, 488], "sed": [109, 112, 113, 114, 115, 117, 123, 187, 208, 353, 370, 372, 378, 386, 393, 412, 425, 441, 451, 452, 472, 474, 486], "fluxpointsestim": [109, 117, 120, 303, 375, 376, 378, 386, 396, 401, 402, 405, 419, 420, 427, 436, 437, 448, 472, 473], "asmoothmapestim": [109, 375, 400, 402, 405, 431, 488], "lightcurveestim": [109, 369, 370, 375, 378, 386, 397, 399, 401, 402, 405, 413, 414, 419, 445, 446, 447, 488], "sensit": [109, 112, 113, 114, 115, 122, 259, 367, 374, 400, 402, 412, 413, 419, 420, 422, 426, 443, 463, 468, 476, 484, 493, 496, 500], "sensitivityestim": [109, 394, 400, 423], "fluxprofileestim": [109, 405, 418, 420, 441], "parameterestim": [109, 401, 420], "morpholog": [110, 367, 422, 442, 468, 484, 500], "estimate_energy_depend": 110, "potenti": [110, 362, 370, 438, 488], "delta_t": [110, 266, 438], "freedom": [110, 113, 115, 380, 420, 438, 486, 550, 551], "variou": [110, 116, 117, 120, 121, 123, 129, 354, 360, 364, 366, 369, 378, 381, 384, 386, 405, 406, 420, 425, 428, 431, 436, 438, 445, 453, 472, 484, 488, 546, 552], "correlate_off": 112, "n_sigma_sensit": [112, 113, 114, 115], "gamma_min_sensit": 112, "bkg_syst_fraction_sensit": 112, "apply_threshold_sensit": 112, "artifact": [112, 179], "fov": [112, 132, 133, 155, 156, 170, 171, 173, 175, 214, 354, 360, 368, 410, 413, 414, 432, 454, 457, 458, 463, 496, 547], "lead": [112, 354, 363, 368, 373, 375, 377, 379, 380, 398, 461, 463, 465, 476, 548], "being": [112, 122, 179, 354, 359, 362, 368, 375, 378, 384, 429, 438, 444, 457, 461, 477, 501, 548], "twice": [112, 500, 551], "confid": [112, 195, 196, 198, 267, 268, 365, 372, 396, 401, 415, 547, 550], "asymmetr": [112, 116, 117, 120, 121, 123, 372, 395, 401, 420, 461, 472, 486, 506], "express": [112, 124, 267, 268, 365, 377, 378, 420, 433, 453, 454, 459, 461, 484, 500, 507, 549, 550, 551], "besid": [112, 123, 368, 369, 378, 428, 429, 456, 464, 472, 473, 501], "errn": [112, 116, 120, 121, 123, 195, 416, 550], "errp": [112, 116, 120, 121, 123, 195, 416, 550], "fluxmap": [112, 114, 115, 123, 129, 405, 420, 431, 486], "npred_excess": [112, 113, 115, 117, 123, 433, 441, 448, 486], "norm_err": [112, 113, 115, 117, 123, 129, 378, 441, 452, 486], "estimate_excess_map": 112, "estimate_exposure_reco_energi": 112, "tophat2dkernel": 112, "reco_exposur": 112, "estimate_kernel": [112, 123], "estimate_mask_default": [112, 123], "reference_model": [113, 115, 423, 436], "filter_success_nan": [113, 115], "typic": [113, 360, 363, 365, 372, 376, 377, 378, 379, 381, 386, 387, 424, 429, 433, 441, 443, 445, 446, 451, 452, 454, 457, 459, 460, 476, 483, 484, 485, 493, 497, 546, 547], "raw": [113, 164, 474], "hpxgeom": [113, 176, 178, 179, 400, 405, 416, 464, 499], "reli": [113, 354, 359, 360, 364, 365, 369, 373, 378, 379, 397, 402, 405, 416, 425, 435, 457, 476, 550], "offer": [113, 357, 365, 380, 381, 386, 387, 414, 429, 453, 455, 459, 488], "norm_errn": [113, 115, 451, 474, 486], "norm_errp": [113, 115, 451, 474, 486], "norm_ul": [113, 115, 378, 441, 451, 452, 474, 486], "norm_scan": [113, 378, 427, 428, 486], "stat_scan": [113, 115, 116, 117, 120, 121, 195, 266, 427, 428, 453, 461, 486], "relev": [113, 267, 268, 337, 354, 360, 369, 374, 378, 383, 427, 428, 431, 445, 446, 447, 458, 460, 463, 465, 466, 472, 473, 484, 485, 552], "n_dof": [113, 115, 486], "succeed": 113, "available_quant": [113, 115], "null": [113, 115, 116, 117, 120, 121, 265, 267, 268, 428, 432, 433, 435, 438, 459, 472, 486, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550], "hypothesi": [113, 115, 116, 117, 120, 121, 265, 267, 268, 425, 431, 438, 486, 488, 547, 550], "dnde_err": [113, 115, 486], "dnde_ref": [113, 115, 378], "e2dnde_err": [113, 115], "e2dnde_errn": [113, 115, 451], "e2dnde_errp": [113, 115, 451], "e2dnde_ref": [113, 115], "e2dnde_ul": [113, 115, 451], "eflux_err": [113, 115, 378], "eflux_errn": [113, 115], "eflux_errp": [113, 115], "eflux_ref": [113, 115], "eflux_ul": [113, 115], "energy_ref": [113, 115], "fluxestim": [113, 115, 116, 375, 401, 403, 404, 405, 407, 420], "flux_errn": [113, 115, 451], "flux_errp": [113, 115, 451], "flux_ref": [113, 115, 378], "flux_sensit": [113, 115], "flux_ul": [113, 115, 123, 451], "has_any_t": [113, 115], "has_stat_profil": [113, 115], "has_success": [113, 115], "has_ul": [113, 115], "is_convertible_to_flux_sed_typ": [113, 115], "niter": [113, 115, 123, 431], "norm_sensit": [113, 115], "npred_excess_err": [113, 115], "npred_excess_errn": [113, 115], "npred_excess_errp": [113, 115], "npred_excess_ref": [113, 115], "npred_excess_ul": [113, 115], "reference_model_default": [113, 115], "reference_spectral_model": [113, 115], "sed_type_plot_default": [113, 115], "ll": [113, 115, 123, 357, 359, 371, 387, 423, 424, 427, 429, 432, 433, 437, 444, 445, 446, 447, 448, 548, 550], "stat_nul": [113, 115, 116, 117, 120, 121, 123, 267, 268, 420, 431, 441, 486], "ts_scan": [113, 115], "all_quant": [113, 115], "hdu_band": [113, 115, 136, 137, 143, 148, 151, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 190, 191], "flux_map": [113, 115, 378, 450], "from_map": [113, 115], "infer": [113, 115, 176, 177, 178, 179, 181, 189, 190, 191, 208, 355, 472, 500], "iter_by_axi": [113, 115, 178, 179, 181, 187, 190, 191], "slice_by_coord": [113, 115, 420], "slice_by_tim": [113, 115], "to_map": [113, 115], "_model": 113, "sedtypeenum": 114, "targetmetadata": 114, "451712": 114, "flux_metadata_fits_kei": 114, "hawc_crab": [115, 436, 488], "hawc19_flux_point": [115, 436, 488], "geomspac": [115, 382], "from_tabl": [115, 132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 180, 182, 183, 187, 188, 220, 416, 423], "make_path": [115, 436, 452], "flux_points_ctb_37b": 115, "txt": [115, 379, 381, 458, 464], "csv": 115, "delimit": 115, "comment": [115, 354, 355, 359, 363, 367, 368, 370, 371, 373, 375, 377, 379, 380], "differential_flux": 115, "lower_error": 115, "upper_error": 115, "time_format": [115, 188, 419, 447], "plot_ts_profil": [115, 427, 428, 441, 445], "colorbar": [115, 132, 133, 135, 138, 139, 140, 145, 146, 147, 149, 191, 342, 348, 453, 456], "recompute_ul": 115, "recomput": [115, 378], "binlik": 115, "flux_points_recomput": 115, "95451985e": 115, "22245374e": 115, "resample_axi": [115, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 349, 402, 444, 446], "axis_new": [115, 130, 444, 446], "rebin": [115, 130, 369, 407, 420, 444, 446, 452], "flat": [115, 124, 140, 150, 176, 177, 182, 184, 186, 189, 192, 193, 230, 365, 378], "timemapaxi": [115, 130, 180, 405, 420, 444, 446, 447], "generalis": [115, 373, 399, 454], "binnedtimeseri": [115, 369], "guess": [115, 177, 179, 420], "3f": [115, 438, 549, 550], "fp": [115, 130, 378, 472, 486, 488], "334": [115, 464], "423e": 115, "135e": 115, "2734": 115, "288": 115, "780e": 115, "082e": 115, "4112": [115, 416], "sum_over_energy_group": [116, 123, 437, 441], "within": [116, 119, 128, 177, 191, 205, 206, 207, 213, 217, 218, 219, 220, 221, 228, 236, 240, 242, 243, 254, 257, 353, 354, 355, 359, 363, 368, 370, 371, 372, 373, 374, 377, 379, 380, 382, 384, 385, 386, 388, 408, 411, 413, 417, 419, 428, 429, 435, 438, 445, 446, 447, 451, 454, 455, 456, 459, 460, 464, 468, 474, 484, 487, 488, 547], "latest": [116, 171, 256, 283, 357, 361, 374, 379, 380, 383, 387, 416, 423, 430, 432, 435, 436, 437, 443, 447, 453, 463, 485, 501], "binned_likelihood": 116, "2018a": 116, "612a": 116, "1h": [116, 148], "norm_min": [116, 117, 120], "norm_max": [116, 117, 120], "norm_n_valu": [116, 117, 120], "norm_valu": [116, 117, 120], "reoptim": [116, 120, 121, 195, 395, 441, 445, 453, 461, 472], "interest": [116, 120, 195, 265, 359, 367, 368, 372, 374, 384, 425, 435, 439, 441, 451, 452, 453, 455, 457, 460, 463, 464, 474, 485, 486, 524, 547, 550, 551], "physic": [116, 117, 120, 123, 303, 304, 353, 378, 382, 396, 428, 436, 456, 459, 461, 463, 472, 486, 488, 524, 547, 550, 551], "cpu": [116, 117, 120, 123, 303, 304, 367], "estimate_best_fit": [116, 117, 120, 121], "name_err": [116, 117, 120, 121], "estimate_count": [116, 117, 120, 121], "estimate_errn_errp": [116, 117, 120, 121], "_errp": [116, 117, 120, 121], "_errn": [116, 117, 120, 121], "estimate_flux_point": [116, 117, 120], "estimate_npr": [116, 117, 120, 121], "estimate_npred_excess": [116, 117, 120], "estimate_scan": [116, 117, 120, 121], "name_scan": [116, 117, 120, 121], "estimate_t": [116, 117, 120, 121], "estimate_ul": [116, 117, 120, 121], "name_ul": [116, 117, 120, 121], "get_scale_model": [116, 117, 120], "scalespectralmodel": [116, 117, 120, 238, 377, 459], "backend_default": [117, 120, 123], "make_orthogonal_rectangle_sky_region": [117, 441], "1e7": [117, 533], "2010": [117, 138, 208, 225, 355, 514, 547, 552], "start_po": [117, 316, 441], "0d": [117, 441, 452, 509], "end_po": [117, 316, 441], "prof_mak": 117, "fermi_prof": 117, "projected_distance_axi": 117, "annulu": [117, 315, 501], "x_ref": [118, 441], "x_min": [118, 308, 310, 441], "x_max": [118, 308, 310, 441], "profile_err": 118, "uniti": [118, 180, 255, 417, 507], "plot_profil": 118, "plot_err": 118, "x_j": 118, "sum_i": 118, "x_": 118, "h_i": 118, "coeffici": [118, 221, 225, 514], "neglect": [118, 164, 423, 455, 486, 551], "_i": 118, "xref": 118, "uniform_filt": [118, 191], "gaussian_filt": [118, 191], "x_edg": 119, "fermi_ct": 119, "image_err": 119, "imageprofil": 119, "fulli": [120, 176, 177, 186, 189, 254, 363, 364, 371, 375, 380, 384, 387, 397, 399, 407, 424, 444, 459, 463, 465, 466, 476], "final": [120, 354, 355, 361, 362, 364, 367, 368, 370, 371, 373, 375, 377, 379, 380, 384, 386, 388, 399, 400, 401, 423, 424, 425, 427, 435, 437, 439, 440, 445, 446, 448, 450, 452, 453, 455, 457, 460, 464, 468, 472, 473, 474, 484, 485, 486], "estimate_time_bin_flux": 120, "expand_map": 120, "expand": [120, 320, 364, 405], "emin": [120, 233, 259, 432, 438, 527], "emax": [120, 233, 259, 432, 438, 527], "null_valu": [121, 265, 441], "150": [121, 128, 129, 393, 422, 425, 427, 439, 440, 456, 474, 513], "addition": [121, 366, 452, 453, 456, 458, 459], "gamma_min": [122, 423], "bkg_syst_fract": [122, 423], "bkg_sy": 122, "percent": 122, "estimate_min_e2dnd": 122, "estimate_min_excess": 122, "kernel_width": [123, 431, 437], "downsampling_factor": [123, 437], "rtol": [123, 329, 354], "simplifi": [123, 185, 361, 363, 365, 372, 378, 395, 398, 399, 400, 402, 405, 409, 416, 425, 431, 493, 551], "stewart": [123, 276, 431, 547], "2009": [123, 276, 395, 431, 547], "spatail": 123, "powerlawspectr": 123, "truncat": [123, 301, 405], "speed": [123, 283, 357, 387, 397, 399, 407, 413, 414, 453], "omit": [123, 355, 435, 463, 548], "precis": [123, 139, 145, 147, 149, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 354, 372, 379, 380, 440], "stewart2009": [123, 547, 550], "400": [123, 432, 437, 441, 451, 456, 474, 542], "estimate_fit_input_map": 123, "estimate_flux_default": 123, "approxim": [123, 164, 165, 177, 178, 179, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 267, 268, 294, 365, 368, 396, 423, 453, 463, 486, 497, 506, 507, 510, 511, 547], "estimate_flux_map": 123, "estimate_pad_width": 123, "properli": [123, 171, 359, 369, 380, 417, 418, 427, 428, 453, 472, 484, 549], "flux_quant": [124, 125, 126, 444], "halv": [124, 272, 420], "compute_flux_doubl": 124, "timescal": [124, 213, 273, 379, 444], "rapid": [124, 273, 360, 363, 378, 379], "variat": [124, 221, 273, 360, 370, 423, 444, 454, 455, 498, 550], "clearli": [124, 354, 359, 360, 368, 371, 379], "evid": [124, 451], "agn": [124, 272, 368, 427, 444, 445, 447, 463], "flare": [124, 272, 386, 399, 400, 422, 444, 445, 447, 449, 468, 484, 485, 486, 496, 497], "episod": 124, "rise": [124, 219, 444, 538], "fall": [124, 161, 188, 206, 228, 354, 361, 363, 364, 371, 414, 415, 444], "brown2013": 124, "\u03b3": [124, 476, 547], "radio": [124, 368, 456], "quasar": 124, "pk": [124, 400, 444, 446, 447, 451, 460, 474, 514], "1510": 124, "089": 124, "brown": [124, 444], "2013": [124, 374, 380, 384, 393, 444], "academ": 124, "oup": 124, "com": [124, 310, 311, 322, 357, 374, 383, 384, 387], "mnra": 124, "articl": [124, 273, 359, 424, 446], "431": [124, 362, 441, 452], "824": [124, 412, 458], "1054498": 124, "compute_fpp": 125, "compute_fvar": [126, 273], "fvar": [126, 274, 369, 412], "min_dist": [128, 129, 161, 431, 437, 497], "finder": [128, 161, 162, 405, 414, 431], "maxima": [128, 197, 199], "spuriou": 128, "increas": [128, 153, 183, 188, 207, 215, 218, 354, 363, 381, 446, 455, 484, 505], "highest": [128, 164, 444, 455, 463, 474], "photutil": [128, 354, 368, 414], "scikit": [128, 354, 368, 371, 374, 414, 457], "191": [128, 406], "161": [128, 362, 427, 437, 451], "118": [128, 435], "266": [128, 129, 368, 430, 431, 437, 439, 443, 456, 458, 474], "41924": 128, "98772": 128, "124": [128, 366, 427, 430, 431, 451, 458], "80571": 128, "14079": 128, "4498": 128, "257": [128, 430], "264": [128, 409, 437], "86178": 128, "97529": 128, "3784": 128, "204": 128, "103": [128, 393, 416], "14201": 128, "10041": 128, "3493": 128, "282": [128, 129], "263": [128, 129, 431, 458], "78083": [128, 129], "31": [128, 129, 363, 364, 377, 378, 390, 417, 422, 425, 427, 430, 431, 435, 438, 441, 442, 446, 447, 451, 452, 455, 456, 458, 461, 465, 472, 474], "12704": [128, 129], "find_peak": [129, 414, 431, 437], "158": [129, 423, 428, 435], "05019": 129, "70181": 129, "28551": 129, "06450": 129, "827e": 129, "385e": 129, "92": [129, 430, 431, 456, 463], "133": 129, "07022": 129, "27": [129, 360, 420, 422, 431, 437, 439, 442, 447, 452, 474, 549], "31834": 129, "37058": 129, "08342": 129, "669e": 129, "259e": 129, "176": [129, 393, 447, 448, 451], "134": [129, 428, 431, 437], "80492": 129, "09805": 129, "30561": 129, "06549": 129, "025e": 129, "484e": 129, "55027": 129, "12611": 129, "448e": [129, 436], "249e": 129, "fixed_bin": 130, "get_edges_fixed_bin": 130, "get_edges_min_t": 130, "group_siz": [130, 446], "ts_threshold": [130, 265], "lc_1d": [130, 444, 445, 446, 447], "pks2155_hess_lc": [130, 444], "adjac": [130, 183, 405, 446, 456, 497], "new_axi": 130, "crab_hess_fp": 130, "satisfi": [131, 155, 177, 178, 179, 283, 458, 488], "counts_min": 131, "background_min": 131, "excess_min": 131, "sqrt_ts_min": [131, 427], "npred_min": 131, "npred_background_min": 131, "npred_signal_min": 131, "23523": [131, 158, 390, 427, 428, 436, 445, 452, 453, 455, 466, 472, 473, 485, 488, 548], "23526": [131, 427, 428, 436, 445, 452, 453, 455, 466, 472, 473, 548], "spectrum_dataset": [131, 366, 448, 452], "resampled_energy_edg": 131, "fov_align": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 454], "fovalign": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 454], "backgroundirf": [132, 133], "mapax": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 402, 405, 407, 456], "sr": [132, 133, 134, 145, 176, 177, 186, 189, 203, 255, 258, 423, 430, 432, 435, 437, 443, 447, 451, 452, 454, 456, 459, 463, 464, 493, 504, 512], "default_interp_kwarg": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 412], "bounds_error": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 354, 454], "values_scal": [132, 133, 134, 187, 191, 220, 251, 255, 256, 295, 417, 419, 440, 454], "extrapol": [132, 133, 134, 158, 178, 179, 181, 187, 190, 191, 208, 256, 295, 405, 410, 412, 413, 454, 456, 463, 464, 500], "default_unit": [132, 133, 138, 140, 145, 150, 454], "has_offset_axi": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150], "pointlik": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 413, 497], "required_ax": [132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 454], "cumsum": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191], "integrate_log_log": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150], "trapezoid": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 261, 294], "interp_missing_data": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150], "is_allclos": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191], "rtol_ax": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191], "atol_ax": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191], "06": [132, 133, 134, 135, 136, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 181, 186, 187, 189, 190, 191, 422, 435, 436, 437, 449, 451, 452, 453, 454, 455, 456, 462, 464, 467, 475, 515, 516], "allclos": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 180, 181, 183, 187, 188, 190, 191, 329], "close": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 255, 329, 330, 331, 363, 368, 383, 408, 419, 420, 453, 533], "axes_loc": [132, 133, 135, 138, 139, 140, 145, 147, 149, 191, 342], "kwargs_colorbar": [132, 133, 135, 138, 139, 140, 145, 147, 149, 191, 342], "append_ax": [132, 133, 135, 138, 139, 140, 145, 147, 149, 191, 342], "plot_at_energi": [132, 133, 463], "ncol": [132, 133, 178, 179, 181, 187, 190, 191, 347, 351, 424, 427, 431, 433, 435, 437, 448, 452, 453, 456, 457, 497, 514], "plot_energy_depend": [132, 138, 463, 490], "versu": [132, 138, 265, 267, 268, 463, 482], "plot_offset_depend": [132, 138], "to_3d": [132, 418, 420], "to_unit": [132, 133, 134, 135, 138, 139, 140, 142, 145, 147, 149, 150, 178, 179, 181, 187, 190, 191], "fov_lon": [133, 454, 463, 493], "fov_lat": [133, 454, 463, 493], "orient": [133, 141, 142, 354, 365], "learn": [133, 138, 354, 371, 374, 383, 386, 388, 390, 414, 425, 427, 431, 437, 438, 439, 441, 444, 451, 452, 453, 456, 459, 461, 463, 468, 474, 548], "bcf": [133, 137, 138, 139, 148, 423, 430, 443, 447, 454, 463], "f4": [133, 138, 429, 452, 454, 456, 463, 464], "background2d": [133, 134, 144, 401, 408, 416, 418, 420, 491], "to_2d": [133, 466], "Its": [135, 366, 380, 381, 405, 407, 441, 446, 461, 473, 490, 491, 492, 494], "from_gauss": [135, 136, 140, 146, 148, 151, 492], "pdf_matrix": 135, "pdf": [135, 139, 164, 234, 235, 248, 249, 305, 347, 355, 436, 439, 450, 455, 478, 480, 481, 482, 484, 485, 490, 491, 492, 494, 497, 501, 531, 532, 550, 553], "edisp_kernel": [135, 452, 492], "from_diagonal_respons": [135, 136, 137, 431, 464], "diagon": [135, 136, 137, 372, 382, 464], "perfect": 135, "e_reco": [135, 140, 448, 547], "anyth": [135, 370, 548], "energy_true_axi": 135, "from_energy_edg": [135, 183, 349, 452, 454], "plot_matrix": [135, 452, 464], "pdf_threshold": [135, 136, 140], "energydispers": [135, 136, 137, 140, 366, 400, 410, 413, 414], "rm": [135, 136, 140, 377, 429, 453, 490, 492, 493, 494, 507, 536, 537, 538, 539, 540, 541], "suppress": [135, 136, 140, 488], "hdu1": 135, "hdu2": 135, "ebound": [135, 183, 501], "get_bia": 135, "get_bias_energi": 135, "bracket": [135, 195, 417, 419], "bias_energi": 135, "get_mean": 135, "get_resolut": 135, "percentag": [135, 164, 455], "pdf_in_safe_rang": 135, "lo_threshold": 135, "hi_threshold": 135, "plot_bia": [135, 140], "heasarc": [135, 183], "cal_gen_92_002_summari": 135, "ereco": [135, 454], "memo": [135, 183], "cal_gen_92_002": [135, 183], "tab": [135, 359, 435, 441, 445, 455, 461, 497], "edisp_kernel_map": [136, 465], "exposure_map": [136, 137, 143, 148, 151, 168, 169, 174, 454], "irfmap": [136, 137, 148, 151, 386, 402, 488], "from_edisp_kernel": 136, "exposure_hdu": [136, 137, 143, 148, 151], "exposure_hdu_band": [136, 137, 143, 148, 151], "gtpsf": [136, 137, 143, 148, 151, 183, 431, 464], "irf_map": [136, 137, 143, 148, 151], "get_edisp_kernel": [136, 137, 400, 405, 452, 464, 492], "hdu_list": [136, 137, 139, 143, 147, 148, 149, 151, 178, 179, 190, 191], "to_region_nd_map": [136, 137, 143, 148, 151, 179, 187, 191, 402, 405, 464], "make_edisp_map": 137, "make_map_exposure_true_energi": [137, 360, 454], "from_edg": [137, 178, 179, 181, 183, 187, 190, 191, 430, 443, 447, 454, 464, 465], "logspac": [137, 178, 179, 181, 187, 190, 191, 430, 443, 447, 448, 450, 456, 480, 481, 482, 501], "edisp2d": [137, 140, 355], "aeff2d": 137, "exposure_geom": 137, "squash": [137, 176, 177, 180, 182, 183, 186, 188, 189, 419, 423, 433, 452, 456], "po": [137, 189, 497], "sample_coord": [137, 148, 151, 178, 179, 181, 187, 190, 191, 399, 401, 416], "chunk_siz": [137, 148, 151], "chunk": [137, 148, 151], "to_edisp_kernel_map": [137, 405, 492], "offset_axi": [138, 140, 145, 150], "scratch": [138, 354, 364, 368, 384, 435, 457], "from_bound": [138, 140, 148, 177, 183, 189, 378, 436, 439, 440, 452, 454, 455, 456, 466, 500, 501], "from_parametr": [138, 490], "cherenkov": [138, 367, 386, 391, 424, 427, 433, 445, 455, 463, 465, 497, 498, 547], "abramowski": 138, "2010mnra": 138, "402": [138, 428], "1342a": 138, "eff": [138, 490, 493, 506, 507], "g_1": 138, "g_2": 138, "g_3": 138, "hess2": [138, 490], "parametricpsf": [139, 147, 405, 407], "tripl": 139, "plot_containment_radiu": [139, 145, 147, 149], "png": [139, 362, 390, 478, 480, 481, 482, 484, 485, 490, 491, 492, 494, 497, 501, 550, 553], "hire": [139, 374, 478, 480, 481, 482, 484, 485, 490, 491, 492, 494, 497, 501, 550, 553], "required_paramet": [139, 147, 149], "sigma_3": [139, 454], "ampl_2": [139, 454], "ampl_3": [139, 454], "containment_radiu": [139, 145, 147, 148, 149, 151, 423, 452, 454, 457], "psf_valu": [139, 147, 149], "evaluate_contain": [139, 147, 149, 407], "evaluate_direct": [139, 147, 149], "evaluate_paramet": [139, 147, 149], "neighbor": [139, 147, 149, 407, 414], "plot_containment_radius_vs_energi": [139, 145, 147, 148, 149, 151, 463, 464], "plot_psf_vs_rad": [139, 145, 147, 148, 149, 151, 464], "to_psf3d": [139, 147, 149], "to_edisp_kernel": [140, 492], "minu": [140, 448], "plot_migr": 140, "e_tru": [140, 448, 464, 547], "effective_area": [144, 367, 463], "energydependentmultigausspsf": [144, 393, 454, 463, 494], "psfking": [144, 407, 494], "recopsfmap": [144, 416, 419], "dim": [145, 312, 410, 411, 437, 547], "rad_index": 145, "offset_index": 145, "energy_index": 145, "tof": 145, "psf_kernel_map": [146, 464], "some_map": 146, "fill_by_coord": [146, 178, 179, 181, 187, 190, 191, 456, 464, 500], "get_psf_kernel": [146, 148, 151, 420, 464], "max_radiu": [146, 148, 151, 189, 464], "some_map_convolv": 146, "plot_grid": [146, 178, 179, 181, 187, 190, 191, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 378, 407, 418, 435, 452, 454, 455, 456, 457, 459, 465], "doctest": [146, 342, 355], "from_spatial_model": 146, "spatiamodel": 146, "plot_kernel": 146, "keepdim": [146, 148, 151, 178, 179, 181, 187, 190, 191, 394, 399, 455], "uniform": [146, 195, 312, 354, 363, 365, 366, 376, 378, 382, 396, 397, 401, 405, 424, 456, 461, 546], "weighted_kernel": 146, "king": [147, 398, 409, 410, 411, 412, 413, 414, 454, 494], "parametris": [147, 377, 399, 492, 494, 505, 506, 507, 508, 515, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543], "load_irf_dict_from_fil": [148, 419, 423, 430, 439, 440, 443, 447, 463], "mapdatasetmak": [148, 156, 165, 367, 399, 402, 405, 408, 416, 437, 439, 440, 443, 448, 454, 455, 465, 472, 473, 488, 495, 498], "pointing_posit": [148, 430, 440, 443], "make_psf": [148, 158, 165, 415], "upsample_geom": 148, "upsampl": [148, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 396, 416], "psf_kernel": [148, 464], "energy_nam": [148, 151], "containment_radius_map": [148, 151], "precision_factor": [148, 151, 178, 179, 181, 187, 190, 191], "overwritten": [148, 151, 295], "half": [148, 151, 183, 189, 255], "corr_coord": [148, 151], "weigh": [148, 151, 461], "psf_out": [148, 151], "is_fixed_rad_max": 150, "from_irf": 150, "plot_rad_max_vs_energi": [150, 429], "psf_map_reco": [151, 465], "irf_dict": 152, "r_out_max": 153, "stepsiz": 153, "threshold_alpha": 153, "fixed_width": 153, "exclusion_mask": [153, 155, 160, 161, 162, 163, 166, 427, 433, 437, 455, 457, 473, 495, 497, 498], "ringbackgroundmak": [153, 156, 399, 433, 455, 498], "action": [153, 359, 364, 370, 380, 384, 405, 447], "fixed_r_in": 153, "ring2dkernel": [153, 163], "make_cub": 153, "dataset_on_off": [153, 159, 160, 163, 423, 427, 429, 430, 433, 437, 446, 455, 497, 498], "stack_dataset": [154, 448, 455], "cutout_mod": 154, "cutout_width": 154, "chain": [154, 367, 370, 399, 455, 488, 498], "safemaskmak": [154, 156, 375, 399, 400, 405, 407, 408, 420, 424, 427, 429, 437, 443, 446, 448, 455, 457, 465, 472, 473, 495, 496, 497, 498], "safe_mask_mak": [154, 424, 448, 455, 495, 497, 498], "callback": [154, 548], "error_callback": 154, "make_dataset": 154, "min_count": 155, "min_npred_background": 155, "greater": [155, 347], "available_method": [155, 164], "make_background_fit": 155, "make_background_scal": 155, "make_default_fov_background_model": 155, "make_exclusion_mask": 155, "reflect": [156, 160, 161, 162, 166, 175, 363, 368, 370, 373, 375, 386, 398, 405, 407, 410, 411, 414, 424, 427, 428, 429, 437, 446, 457, 496, 547], "reflectedregionsbackgroundmak": [156, 161, 399, 424, 427, 429, 437, 446, 455], "adaptiveringbackgroundmak": [156, 399, 498], "fovbackgroundmak": [156, 400, 405, 455, 472, 473], "phasebackgroundmak": [156, 399, 419, 448], "spectrumdatasetmak": [156, 399, 405, 423, 424, 427, 429, 430, 437, 446, 447, 448, 455, 497], "datasetsmak": [156, 407, 419, 455, 460, 488], "background_oversampl": [158, 165, 455], "background_interp_missing_data": 158, "background_pad_offset": 158, "made": [158, 165, 186, 189, 197, 199, 206, 228, 283, 315, 316, 354, 357, 359, 370, 373, 375, 378, 379, 380, 405, 416, 417, 427, 431, 435, 436, 455, 463, 501, 512, 547], "mapmak": [158, 370, 395, 399, 414], "684": 158, "102": [158, 431, 549, 550], "01e": [158, 390, 423, 451], "10e": [158, 451, 454], "40000": [158, 473], "available_select": [158, 165], "make_background": [158, 165], "make_count": [158, 159, 160, 165], "make_edisp": [158, 165], "make_edisp_kernel": [158, 165], "make_exposur": [158, 165], "use_region_cent": [158, 165, 168, 169, 171, 172, 405, 424], "make_exposure_irf": [158, 165], "make_meta_t": [158, 165], "on_phas": [159, 448], "off_phas": [159, 448], "phase_column_nam": [159, 448], "datastoreobserv": [159, 160, 360, 364, 400, 413], "make_counts_off": [159, 160], "region_find": [160, 429], "regionsfind": [160, 161, 166, 407], "reflectedregionsfind": [160, 166, 397, 497], "hand": [160, 354, 357, 362, 365, 374, 380, 382, 417, 453, 468, 488], "pointskyregion": [160, 165, 186, 232, 408, 429, 440], "angle_incr": 161, "min_distance_input": [161, 497], "max_region_numb": [161, 497], "tangent": [161, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255], "consecut": [161, 313, 354, 379], "target_posit": [161, 424, 427, 429, 437, 445, 446, 473], "80": [161, 427, 429, 430, 431, 452, 456, 464, 497, 524], "19879005": 161, "57300957": 161, "1438": 161, "arcsec": 161, "regionfind": [161, 162, 166], "renormalis": 163, "adaptiveringbackgroundestim": [163, 360], "make_maps_off": 163, "maps_off": 163, "aeff_perc": [164, 424, 427, 428, 437, 446, 455, 465, 497], "bias_perc": 164, "reproject": [164, 178, 179, 181, 187, 190, 191, 350, 354, 360, 368, 371, 378, 399, 406, 414, 416, 420, 456, 457], "make_mask_bkg_invalid": 164, "make_mask_energy_aeff_default": 164, "make_mask_energy_aeff_max": 164, "mandatori": [164, 357, 367, 380, 440, 459], "make_mask_energy_bkg_peak": 164, "powerlaw": [164, 234, 236, 365, 366, 370, 411, 413, 422, 424, 432, 440, 441, 451, 459, 461, 473, 502, 528, 544], "motiv": [164, 359, 361, 362, 368, 371, 373, 383, 459, 488], "1910": [164, 455], "08088": [164, 455], "make_mask_energy_edisp_bia": 164, "make_mask_offset_max": 164, "latter": [165, 195, 365, 367, 369, 375, 378, 381, 399, 429, 430, 439, 440, 443, 457, 458, 495, 497, 547, 549], "theta2": [165, 175, 352, 413], "n_off_region": [166, 429], "simpler": [166, 362, 367, 368, 376], "actual": [166, 329, 330, 331, 353, 354, 355, 359, 363, 365, 367, 369, 370, 378, 379, 381, 383, 430, 440, 443, 446, 452, 453, 455, 456, 457, 461, 464, 465, 473, 474, 495, 497, 547, 548, 550, 552], "rhe": 167, "ontim": [171, 364, 439, 452], "full_enclosur": [171, 454], "theta_squared_axi": [175, 466], "position_off": 175, "on_posit": 175, "mirror": 175, "pos_on": 175, "as_energy_tru": [176, 177, 186, 189], "center_coord": [176, 177, 182, 186, 189], "center_pix": [176, 177, 186, 189], "center_skydir": [176, 177, 186, 189, 455, 456, 464, 465, 495, 497, 498], "has_energy_axi": [176, 177, 186, 189], "is_allski": [176, 177, 186, 189], "is_flat": [176, 177, 182, 186, 189], "is_imag": [176, 177, 186, 189], "contains_pix": [176, 177, 186, 189], "pix": [176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 500], "coord_to_idx": [176, 177, 180, 182, 183, 186, 188, 189, 456], "c_0": [176, 177, 186, 189], "c_n": [176, 177, 186, 189], "c_i": [176, 177, 186, 189], "vector": [176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 456, 492, 500], "coord_to_pix": [176, 177, 180, 182, 183, 186, 188, 189, 456], "constructor": [176, 177, 178, 179, 181, 183, 186, 187, 188, 189, 190, 191, 419, 473, 499], "crop_width": [176, 177, 178, 179, 181, 186, 187, 189, 190, 191], "data_nbyt": [176, 177, 186, 189], "float32": [176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 432, 437, 456], "megabyt": [176, 177, 186, 189], "mb": [176, 177, 186, 189, 362, 386, 388, 422, 426, 434, 442, 449, 462, 463, 464, 466, 467, 469, 471, 475, 503, 513, 534, 544], "energy_mask": [176, 177, 186, 189, 401, 429, 435, 448, 452, 453, 457, 461], "round_to_edg": [176, 177, 186, 189], "get_coord": [176, 177, 182, 186, 189, 398, 405, 414, 440, 456, 457, 497, 501], "get_idx": [176, 177, 186, 189, 501], "pix_to_coord": [176, 177, 180, 182, 183, 186, 188, 189, 420], "pix_to_idx": [176, 177, 180, 182, 183, 186, 188, 189], "lie": [176, 177, 183, 186, 189], "rename_ax": [176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 416], "replace_axi": [176, 177, 186, 189], "solid_angl": [176, 177, 186, 189, 456, 501], "solid": [176, 177, 186, 189, 203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 258, 370, 393, 395, 396, 397, 414, 433, 455, 456, 463, 491, 497, 547], "to_bands_hdu": [176, 177, 186, 189], "to_cub": [176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 402, 433, 501], "higher": [176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 219, 357, 360, 365, 370, 373, 375, 387, 425, 440, 444, 454, 456, 501], "nside": [177, 178, 179, 416, 464, 499], "less": [177, 179, 183, 220, 254, 275, 354, 359, 361, 372, 384, 413, 453, 459, 460, 461], "encompass": [177, 499, 501], "hpx_reg": 177, "axes_nam": [177, 178, 179, 181, 186, 187, 189, 190, 191], "data_shape_ax": [177, 186, 189], "ipix": 177, "everi": [177, 179, 191, 255, 354, 357, 362, 363, 364, 366, 370, 379, 381, 384, 424, 427, 456, 473, 548], "is_hpx": [177, 186, 189], "is_region": [177, 186, 189], "is_regular": [177, 186, 189], "irregular": [177, 189, 500], "npix": [177, 186, 189, 190, 191, 427, 437, 454, 464, 497, 501, 504, 508], "npix_max": 177, "shape_ax": [177, 189], "supersed": [177, 178, 179, 189, 190, 191], "diamet": [177, 178, 179, 424], "from_hdu": [177, 179, 191], "hpx": [177, 178, 179, 181, 190, 191, 368, 405, 456, 464], "bintabl": [177, 178, 179, 181, 190, 191], "fgst": [177, 178, 179, 181, 182, 183, 189, 190, 191, 456], "ccube": [177, 178, 179, 181, 182, 183, 189, 190, 191, 456], "ltcube": [177, 178, 179, 181, 190, 191, 456], "bexpcub": [177, 178, 179, 181, 190, 191, 456], "srcmap": [177, 178, 179, 181, 190, 191, 456], "spars": [177, 178, 179, 181, 186, 189, 190, 191, 396, 405, 413, 440, 456], "galprop": [177, 178, 179, 181, 190, 191], "galprop2": [177, 178, 179, 181, 190, 191], "healpi": [177, 353, 361, 363, 371, 385, 386, 388, 397, 405, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 499], "get_index_list": 177, "ilist": 177, "global_to_loc": 177, "idx_glob": 177, "ravel": [177, 439], "idx_loc": 177, "interp_weight": 177, "is_align": [177, 183, 188, 189], "local_to_glob": 177, "tild": [177, 189], "ind": [177, 189, 206, 228], "mask_map": [177, 189, 422, 457, 462], "to_binsz": [177, 186, 189, 405], "to_nsid": [177, 179], "upgrad": [177, 353, 379, 387], "downgrad": [177, 353], "to_swap": [177, 178, 179], "swap": 177, "vice": 177, "versa": 177, "to_wcs_geom": [177, 186, 501], "ait": [177, 178, 179, 470], "width_pix": [177, 178, 179], "whichev": [177, 178, 179], "to_wcs_til": [177, 179], "nside_til": [177, 179], "tile": [177, 179], "divid": [177, 183, 188, 375, 378, 439, 460, 465, 466], "superpixel": 177, "tangenti": [177, 501], "super": [177, 179, 247, 248, 249, 422, 439, 466, 502, 534, 536], "wcs_tile": [177, 179], "is_mask": [178, 179, 181, 187, 190, 191], "coadd": [178, 179, 181, 187, 190, 191], "map_in": [178, 179, 181, 187, 190, 191], "map_typ": [178, 179, 181, 187, 190, 191, 456, 500], "factori": [178, 179, 190, 191, 368, 373, 377, 499, 501], "pad_with": [178, 179, 181, 187, 190, 191], "share": [178, 179, 181, 185, 187, 190, 191, 354, 359, 366, 369, 373, 376, 387, 405, 407, 419, 435, 436, 457, 458, 488, 548], "becaus": [178, 179, 181, 185, 187, 190, 191, 354, 355, 357, 359, 361, 365, 366, 368, 369, 373, 377, 378, 381, 384, 405, 407, 424, 425, 428, 441, 446, 448, 455, 456, 457, 458, 463, 464, 465, 472, 473, 474, 484, 488, 548, 551], "preserve_count": [178, 179, 181, 187, 190, 191, 456], "intens": [178, 179, 181, 187, 190, 191, 195, 219, 364, 456, 484], "x_0": [178, 179, 181, 187, 190, 191], "x_n": [178, 179, 181, 187, 190, 191], "x_i": [178, 179, 181, 187, 190, 191], "fill_by_idx": [178, 179, 181, 187, 190, 191, 500], "i_lon": [178, 179, 181, 187, 190, 191], "i_lat": [178, 179, 181, 187, 190, 191], "i_0": [178, 179, 181, 187, 190, 191], "i_n": [178, 179, 181, 187, 190, 191], "i_hpx": [178, 179, 181, 187, 190, 191], "fill_by_pix": [178, 179, 181, 187, 190, 191, 500], "fill_ev": [178, 179, 181, 187, 190, 191, 408, 419, 429, 456, 464, 470], "compliant": [178, 179, 181, 190, 191, 420, 547], "softwar": [178, 179, 181, 190, 191, 368, 369, 371, 380, 381, 384, 456], "scienc": [178, 179, 181, 190, 191, 361, 363, 367, 370, 371, 374, 380, 391, 413, 414, 430, 436, 447, 456, 459, 460, 463, 464, 468, 476, 488, 522, 547, 548], "hpx_map": [178, 179], "get_by_coord": [178, 179, 181, 187, 190, 191, 455, 456, 464, 465, 500], "footprint": [178, 179, 181, 187, 189, 190, 191, 508], "get_by_idx": [178, 179, 181, 187, 190, 191, 456, 500], "get_by_pix": [178, 179, 181, 187, 190, 191, 500], "get_image_by_coord": [178, 179, 181, 187, 190, 191, 456], "axes0": [178, 179, 181, 187, 190, 191], "axesn": [178, 179, 181, 187, 190, 191], "get_image_by_idx": [178, 179, 181, 187, 190, 191], "get_image_by_pix": [178, 179, 181, 187, 190, 191], "time_axi": [178, 179, 181, 187, 190, 191, 440, 456, 501], "m_wc": [178, 179, 181, 187, 190, 191, 456], "500": [178, 179, 181, 187, 190, 191, 431, 437, 439, 440, 456, 463, 464, 474, 505], "get_spectrum": [178, 179, 181, 187, 190, 191], "nansum": [178, 179, 181, 190, 191], "occur": [178, 179, 181, 190, 191, 313, 354, 374, 375, 379, 464], "interp_by_coord": [178, 179, 181, 187, 190, 191, 255, 416, 456], "domain": [178, 179, 181, 187, 190, 191, 354, 368, 444], "interp_by_pix": [178, 179, 181, 187, 190, 191, 251, 252, 456], "p_lon": [178, 181, 187, 190, 191], "p_lat": [178, 181, 187, 190, 191], "p_n": [178, 181, 187, 190, 191], "p_i": [178, 181, 187, 190, 191], "interp_to_geom": [178, 179, 181, 187, 190, 191, 402, 418, 456, 464, 488], "interp_map": [178, 179, 181, 187, 190, 191], "iter_by_imag": [178, 179, 181, 187, 190, 191, 414], "iter_by_image_data": [178, 179, 181, 187, 190, 191, 456], "iter_by_image_index": [178, 179, 181, 187, 190, 191], "mask_nearest_posit": [178, 179, 181, 187, 190, 191], "cval": [178, 179, 181, 187, 190, 191], "consant": [178, 179, 181, 187, 190, 191], "plot_interact": [178, 179, 181, 187, 190, 191, 202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 407, 414, 435, 443, 456, 472, 473], "rc_param": [178, 179, 181, 187, 190, 191, 456], "widget": [178, 179, 181, 187, 190, 191, 435, 443, 456, 472, 473], "explor": [178, 179, 181, 187, 190, 191, 362, 370, 390, 422, 427, 432, 435, 438, 441, 442, 444, 445, 446, 451, 452, 458, 465, 466, 472, 474, 484, 485, 486, 488, 496, 497, 500, 545], "rc_context": [178, 179, 181, 187, 190, 191, 456], "rc": [178, 179, 181, 187, 190, 191, 351, 456], "gll_iem_v06_cutout": [178, 179, 181, 187, 190, 191], "stretch": [178, 179, 181, 187, 190, 191, 344, 345, 349, 431, 435, 441, 443, 455, 456, 458, 464, 472, 473, 474], "font": [178, 179, 181, 187, 190, 191, 355, 456], "auto": [178, 179, 181, 190, 191, 355, 357, 365, 374, 400, 414, 453, 548], "ufunc": [178, 179, 181, 187, 190, 191, 429], "reduce_over_ax": [178, 179, 181, 187, 190, 191, 432, 455, 465], "reorder_ax": [178, 179, 181, 187, 190, 191, 419], "reproject_by_imag": [178, 179, 181, 187, 190, 191, 420], "nd": [178, 179, 181, 187, 190, 191, 251, 252, 375, 456, 501], "reproject_to_geom": [178, 179, 181, 187, 190, 191, 416], "output_map": [178, 179, 181, 187, 190, 191], "resampled_map": [178, 179, 181, 187, 190, 191], "logical_and": [178, 179, 181, 187, 190, 191], "logical_or": [178, 179, 181, 187, 190, 191, 455], "univers": [178, 179, 181, 187, 190, 191, 547], "n_event": [178, 179, 181, 187, 190, 191, 205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 367], "set_by_coord": [178, 179, 181, 187, 190, 191, 456, 500], "set_by_idx": [178, 179, 181, 187, 190, 191, 456, 500], "set_by_pix": [178, 179, 181, 187, 190, 191, 500], "split_by_axi": [178, 179, 181, 187, 190, 191], "sum_over_ax": [178, 179, 181, 187, 190, 191, 342, 414, 433, 435, 441, 448, 452, 455, 457, 458, 464, 473], "reshap": [178, 179, 181, 187, 190, 191, 423, 440, 454, 456], "onto": [178, 179, 181, 187, 189, 190, 191, 341, 360, 473, 484, 488, 500, 546], "to_hdu": [178, 179, 190, 191], "indxschm": [178, 179, 190, 191], "sparsifi": [178, 179, 181, 190, 191], "hdu_out": [178, 179], "imagehdu": [178, 179, 190, 191], "skymap": [178, 179, 181, 187, 190, 191, 368, 410, 411, 440], "opposit": [178, 179], "to_wc": [178, 179], "sum_band": [178, 179], "hpx2wc": [178, 179], "hpxtowcsmap": [178, 179], "wcsmap": [178, 179, 181, 191, 416], "hpxmap": [179, 181, 499], "alloc": [179, 187, 191], "convolution_method": 179, "tan": [179, 186, 368, 397, 427, 456, 464, 497], "likewis": [179, 191], "bigger": 179, "prevent": [179, 208, 283, 405, 435], "convolve_wc": 179, "convolve_ful": 179, "symmetri": [179, 395], "suit": [179, 354, 501], "from_wcs_til": 179, "quickplot": 179, "polygon": [179, 193, 368], "much": [179, 354, 360, 365, 368, 370, 373, 374, 398, 405, 430, 435, 441, 448, 461, 464, 474, 507], "suitabl": 179, "10k": 179, "shade": [179, 187, 191, 453, 546], "nside2resol": 179, "neraest": 179, "fill_nan": 179, "oversampling_factor": [179, 189, 202, 203, 207, 215, 218, 219, 220, 230, 232, 240, 241, 243, 245, 251, 255, 257], "as_plot_cent": [180, 183, 188], "as_plot_edg": [180, 183, 188], "as_plot_label": [180, 183, 188], "as_plot_xerr": [180, 183, 188], "bin_width": [180, 183, 188, 448], "edges_max": [180, 183, 188, 456], "edges_min": [180, 183, 188, 456], "node_typ": [180, 183, 188, 439, 440, 454, 464], "assert_nam": [180, 182, 183, 188], "required_nam": [180, 182, 183, 188], "assert": [180, 182, 183, 188, 329, 330, 331, 357, 365, 377, 456], "agre": [180, 183, 357, 359, 368, 380], "format_plot_xaxi": [180, 183, 188, 454], "n_spatial_ax": 182, "is_unidimension": 182, "unidimension": 182, "iter_with_reshap": 182, "primary_axi": 182, "longest": 182, "bin_volum": [182, 186, 189, 501], "from_default": 182, "bexcub": 182, "index_data": 182, "old": [182, 339, 354, 359, 362, 366, 370, 371, 396, 397, 412, 413, 414, 444], "as_plot_scal": 183, "is_energy_axi": 183, "iter_by_edg": [183, 188], "nbin_per_decad": 183, "use_center_as_plot_label": 183, "contigu": [183, 188, 405], "th": 183, "format_plot_yaxi": [183, 454], "lo_bnd": 183, "hi_bnd": 183, "per_decad": [183, 427, 429, 439, 440, 448, 452, 464, 492, 498], "strict_bound": 183, "frequent": [183, 354, 363, 372, 380, 444, 446, 447, 457, 488, 489, 548], "from_nod": 183, "continu": [183, 361, 363, 364, 367, 368, 370, 371, 373, 374, 379, 390, 393, 394, 397, 405, 410, 411, 412, 414, 427, 440, 457, 500, 547], "column_prefix": 183, "prefix": [183, 365], "coarser": [183, 188, 452], "2e": [183, 423, 424, 425, 439, 440, 443, 446, 451, 453, 458], "to_node_typ": 183, "tth_sec3": 183, "match_by_nam": 184, "arbitrari": [184, 186, 187, 365, 377, 400, 413, 439, 452, 456, 461, 500, 501], "lookup": 184, "apply_mask": 184, "to_fram": 184, "mutablemap": 185, "collect": [185, 228, 354, 356, 381, 384, 412, 413, 428, 452, 458, 476, 485, 489, 493, 547, 552], "kwargs_list": 185, "insensit": 185, "popitem": 185, "setdefault": 185, "lack": [185, 369, 448], "binsz_wc": [186, 187], "adequ": 186, "major": [186, 207, 215, 218, 354, 358, 359, 363, 371, 379, 407, 413, 414, 505, 506, 507], "is_all_point_sky_region": 186, "wish": [186, 357, 372, 438, 453], "contains_wcs_pix": 186, "region_io": 186, "from_region": [186, 207, 419, 497], "compound": [186, 193, 201, 314, 318, 368, 377, 422, 441, 502, 534], "get_wcs_coord_and_weight": 186, "region_coord": 186, "plot_region": [186, 187, 206, 228, 351, 429, 441, 458, 497, 501], "kwargs_point": [186, 206, 228, 429], "path_effect": [186, 206, 228], "line2d": [186, 206, 228], "patheffect": [186, 206, 228], "artist": [186, 206, 228, 505, 506], "as_artist": [186, 187, 459, 501, 505, 506], "sep": [186, 363, 371, 377, 392, 459], "steradian": 186, "to_binsz_wc": 186, "hdu_region": [186, 187], "width_min": 186, "wcs_geom": [186, 206, 228, 456, 501], "ogip_column": 187, "qualiti": [187, 374, 413, 414, 419, 460, 473, 488, 546, 553], "backscal": 187, "region_nd_map": 187, "region_map": [187, 191, 501], "iter_by_axis_data": 187, "plot_hist": [187, 501], "axvspan": [187, 448], "is_contigu": [188, 456], "time_bound": 188, "time_edg": [188, 444, 456], "time_mid": [188, 444], "from_gti": 188, "from_gti_bound": 188, "fgl": [188, 457], "from_time_bound": 188, "linearli": [188, 191, 456, 484], "from_time_edg": [188, 444], "interval_edg": 188, "underflow": 188, "overflow": [188, 429, 447, 536], "outflow": 188, "to_contigu": [188, 456], "to_gti": [188, 420], "cdelt": [189, 191], "crpix": 189, "encapsul": [189, 378, 499], "extent": [189, 206, 228, 368, 431, 459], "data_shape_imag": 189, "footprint_rectangle_sky_region": 189, "rectangleskyregion": [189, 202, 203, 255, 315, 316, 368, 424, 450, 457, 497, 501], "pixel_area": 189, "intermedi": [189, 363, 370, 380, 390, 424, 446], "binary_structur": 189, "binari": [189, 191, 362, 368, 371, 380, 384, 405], "side": [189, 191, 267, 268, 354, 368], "boundary_mask": [189, 457], "eros": [189, 191], "boundari": [189, 255, 382, 410, 453, 459, 500], "refpix": [189, 190, 191], "plate": [189, 456], "carr\u00e9": 189, "1deg": 189, "05deg": 189, "odd_npix": [189, 191], "odd": [189, 191], "cutout_slic": 189, "from_align": [189, 405], "get_pix": 189, "rtol_wc": 189, "region_weight": 189, "to_even_npix": 189, "to_odd_npix": 189, "wcs_map": [190, 191, 347], "commensur": 191, "binary_dil": [191, 457], "use_fft": 191, "dilat": [191, 405], "fftconvolv": 191, "ndimag": [191, 368], "binary_erod": [191, 457], "binary_eros": [191, 405], "erod": 191, "fft": 191, "cutout_and_mask_region": [191, 419], "enclos": [191, 355, 424, 429, 453, 457], "mask_contains_region": 191, "pixregion": 191, "fig": [191, 342, 423, 424, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 441, 445, 447, 448, 450, 453, 457, 461, 497, 498, 507, 511, 514, 546], "simple_norm": 191, "contourf": 191, "to_region_nd_map_histogram": [191, 419], "bins_axi": 191, "map_": [192, 193, 342, 349], "393": [192, 193, 422, 534], "apply_union": 193, "contour": [193, 195, 346, 363, 415], "savez": 193, "polygonskyregion": [193, 368], "compoundskyregion": [193, 314, 318], "c_": 194, "ij": 194, "sigma_": [194, 506], "ii": [194, 411], "jj": 194, "scipy_mvn": 194, "from_factor_matrix": 194, "covar_list": 194, "matric": 194, "covar": [194, 347, 415], "get_subcovari": 194, "plot_correl": [194, 453], "plot_heatmap": 194, "set_subcovari": 194, "optimize_opt": [195, 435, 443, 453, 473], "covariance_opt": 195, "confidence_opt": 195, "store_trac": [195, 453], "iminuit": [195, 353, 371, 380, 405, 407, 414, 418, 419, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 545], "migrad_opt": [195, 453], "simplex": [195, 453], "levmar": [195, 453], "moncar": [195, 453], "gridsearch": [195, 453], "cxc": [195, 374, 453], "cfa": [195, 453], "ahelp": 195, "neldermead": 195, "mino": [195, 453], "maxcal": 195, "trace": [195, 402, 453], "optimize_result": [195, 419], "fit_result": [195, 265, 428, 472], "fitresult": [195, 407, 419, 453, 473], "stat_contour": 195, "numpoint": [195, 453], "mncontour": 195, "par_1": [195, 453], "par_2": [195, 453], "stat_profil": [195, 453, 461, 488], "parameter_name_scan": 195, "stat_surfac": [195, 402, 488], "caveat": [195, 420, 506], "x_valu": [195, 453], "y_valu": [195, 453], "conf_max": [196, 198], "conf_min": [196, 198], "norm_paramet": [196, 197, 198, 199], "autoscal": [196, 197, 198, 199], "sign": [196, 198, 267, 268, 357, 380, 401, 416, 486, 550], "check_limit": [196, 197, 198, 199], "prior_stat_sum": [196, 197, 198, 199, 382, 461], "update_from_dict": [196, 198], "free_paramet": [197, 199, 265, 453, 458], "minima": [197, 199, 461], "unique_paramet": [197, 199], "freeze_al": [197, 199], "parameters_list": [197, 199], "restore_statu": [197, 199, 206, 228, 461], "restore_valu": [197, 199, 206, 228], "enter": [197, 199, 206, 228, 390], "verifi": [197, 199, 218, 265, 354, 367, 451, 488], "tempor": [197, 199, 205, 206, 213, 217, 219, 220, 221, 228, 236, 242, 243, 250, 254, 257, 272, 365, 367, 377, 378, 398, 400, 401, 402, 407, 416, 418, 419, 420, 422, 425, 428, 430, 435, 436, 437, 439, 442, 443, 444, 451, 452, 458, 464, 468, 472, 484, 485, 488, 489, 493, 496, 500, 544, 545, 547], "set_parameter_factor": [197, 199], "unfreeze_al": [197, 199, 458], "broken": [200, 244, 380, 422, 502, 534], "index1": [200, 244, 515, 529], "gamma1": [200, 515, 529], "index2": [200, 244, 515, 529], "gamma2": [200, 515, 529], "phi_0": [200, 202, 203, 207, 210, 211, 212, 215, 218, 222, 223, 230, 232, 234, 235, 240, 241, 244, 245, 247, 248, 249, 251, 255, 377, 453, 515, 518, 519, 522, 526, 529, 530, 531, 532], "ebreak": [200, 244, 515, 529], "break": [200, 244, 360, 368, 370, 379, 399, 400, 401, 515, 529], "smoothbrokenpowerlawspectralmodel": [200, 238, 377, 400, 401, 459, 529], "bpl": [200, 377, 459], "model1": [201, 514, 516, 520, 523, 525, 528], "model2": [201, 447, 514, 516, 520, 523, 525, 528], "arithmet": [201, 365, 415, 456, 457, 459, 516], "evaluation_bin_size_min": [202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255], "evaluation_radiu": [202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 253, 255, 365, 366, 377, 459], "evaluation_region": [202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255], "is_energy_depend": [202, 203, 205, 207, 213, 215, 217, 218, 219, 220, 221, 230, 232, 236, 240, 241, 242, 245, 251, 254, 255, 257, 418, 459], "position_error": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 399], "ellipseskyregion": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 424, 459, 497], "position_lonlat": [202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255], "const": [202, 203, 204, 205, 377, 440, 459, 517, 535], "evaluate_geom": [202, 203, 207, 214, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255, 420, 459, 507], "from_posit": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 440], "integrate_geom": [202, 203, 207, 215, 218, 230, 232, 240, 241, 243, 245, 251, 255, 405, 418, 420], "kwargs_posit": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 438], "kwargs_extens": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255, 438], "plot_position_error": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255], "plot_extension_error": [202, 203, 207, 215, 218, 230, 232, 240, 241, 245, 251, 255], "to_region": [202, 203, 206, 207, 215, 218, 228, 232, 240, 241, 255, 368, 399, 459, 505, 506, 507], "rectangl": [203, 207, 215, 218, 230, 240, 241, 245, 251, 255, 316, 368, 441, 497], "temporalmodel": [205, 213, 217, 219, 220, 221, 236, 242, 243, 254, 365, 378, 401, 416, 418, 419, 502], "t_min": [205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 367, 378], "t_max": [205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 367, 378], "sample_tim": [205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 405, 416], "arriv": [205, 213, 217, 219, 220, 221, 236, 242, 254, 257, 359, 367, 399, 400, 401, 439, 547, 551], "covariance_data": [206, 214, 228, 243, 253], "immut": 206, "parameters_unique_nam": [206, 228, 453], "par_typ": [206, 228], "par_nam": [206, 228], "model_typ": [206, 214, 226, 228, 243, 253, 265, 377, 458], "yaml_str": [206, 228, 428], "plot_posit": [206, 228, 458], "scatter": [206, 228, 375, 431, 437, 505, 506], "read_covari": [206, 228], "_covari": [206, 228], "new_dataset_nam": [206, 228], "name_substr": [206, 228, 458], "meet": [206, 228, 283, 360, 362, 374, 379, 384], "substr": [206, 228], "select_from_geom": [206, 228], "use_evaluation_region": [206, 228], "selection_mask": [206, 228, 458], "set_parameters_bound": [206, 228], "parameters_nam": [206, 228], "overwrite_templ": [206, 228], "to_parameters_t": [206, 228, 424, 427, 428, 429, 432, 435, 453, 473], "to_template_sky_model": [206, 228], "normspectralmodel": [206, 228, 377, 402, 418, 420, 459, 495], "to_template_spectral_model": [206, 228, 377], "templatespectralmodel": [206, 228, 238, 260, 377, 459, 464, 484, 520, 523, 528, 533], "update_link_label": [206, 228], "update_parameters_from_t": [206, 228], "lon_0": [207, 215, 218, 232, 240, 241, 255, 369, 377, 432, 435, 436, 438, 439, 440, 443, 445, 451, 452, 458, 459, 464, 472, 473, 505, 506, 507, 509, 510, 511, 512], "lat_0": [207, 215, 218, 232, 240, 241, 255, 369, 377, 432, 435, 436, 438, 439, 440, 443, 445, 451, 452, 458, 459, 464, 472, 473, 505, 506, 507, 509, 510, 511, 512], "semiaxi": [207, 215, 218, 505, 506, 507], "eccentr": [207, 215, 218, 505, 506, 507], "ellips": [207, 368, 501, 505], "counter": [207, 215, 218, 505], "clockwis": [207, 215, 218, 505], "north": [207, 215, 218, 505], "edge_width": [207, 458, 505], "semi": 207, "alpha_norm": [208, 377, 514], "absorpt": [208, 372, 402, 412, 422, 502, 534], "ebl": [208, 209, 256, 372, 377, 399, 402, 412, 419, 422, 459, 502, 534], "xspec": [208, 256, 280, 412, 549], "read_builtin": [208, 514], "dominguez": [208, 209, 377, 514], "franceschini": [208, 209, 256, 419, 514], "fink": [208, 209, 514], "dominquez": 208, "extragalact": [208, 463], "optic": [208, 368, 514], "infrar": 208, "radiat": [208, 488, 510, 511, 524], "opac": 208, "2011": [208, 476, 514], "aegi": 208, "dust": 208, "2017": [208, 359, 361, 371, 374, 390, 392, 395, 437, 463, 514], "revisit": 208, "saldana": [208, 209, 419, 514], "lopez": [208, 413, 419, 514], "multiwavelength": 208, "hst": 208, "candel": 208, "era": 208, "ebl_dominguez11": [209, 514], "frd_ab": 209, "ebl_franceschini": [209, 256], "franceschini17": [209, 514], "ebl_franceschini_2017": 209, "lopez21": [209, 514], "ebl_saldana": 209, "lopez_2021": 209, "cutoff": [210, 211, 212, 247, 248, 249, 265, 399, 419, 422, 430, 435, 502, 534], "e_0": [210, 211, 212, 222, 223, 234, 235, 244, 247, 248, 249, 518, 519, 522, 524, 526, 529, 530, 531, 532], "ecut": [210, 247, 519, 530], "lambda_": [211, 212, 265, 425, 427, 435, 518, 520], "expcutoffpowerlawnormspectralmodel": [212, 238, 420, 459, 520], "e_peak": [212, 223], "dn": [212, 223, 450], "expdecai": [213, 422, 502, 544], "t0": [213, 236, 439, 446, 447, 536, 540], "t_ref": [213, 217, 219, 220, 221, 236, 242, 254, 418, 419, 439, 440, 447, 459, 536, 537, 538, 539, 540, 541, 542, 543], "modelbas": [214, 243, 245, 246, 253, 257, 382], "api": [214, 358, 360, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 379, 380, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 405, 409, 413, 414, 422, 424, 427, 428, 431, 437, 439, 446, 452, 456, 457, 458, 459, 462, 463, 464, 472, 474, 475, 484, 485, 486, 487, 495, 496, 500, 545, 546, 547, 548], "reset_to_default": 214, "x_sigma": 215, "math": [215, 353, 453], "n_0": [216, 521], "erf": [216, 505], "eta": [218, 219, 240, 507, 511, 538], "laplac": [218, 507], "r_eval": 218, "sigma_gauss": 218, "sigma_laplac": 218, "x_r_0": 218, "puls": 219, "t_rise": [219, 538], "t_decai": [219, 538], "sharp": [219, 344, 345, 505], "impli": [219, 354, 373, 484, 547], "gengauss": [219, 459, 507], "suppos": [220, 254, 359, 366, 547, 549], "lightcrv_pksb1222": [220, 543], "216": [220, 422, 427, 428, 456, 458, 467, 543], "59000": [220, 543], "49919925926": [220, 543], "58999": 220, "99919925926": 220, "61862": 220, "01551196351647377": 220, "blanklin": [220, 390, 486, 501], "59001": 220, "195": [220, 447], "02288737": 220, "t_r": 220, "00375698": 220, "0143724": 220, "00688029": 220, "parabola": [222, 223, 422, 436, 453, 502, 534], "logparabolaspectralmodel": [222, 238, 377, 425, 427, 429, 436, 451, 453, 459, 516, 522, 523], "lp": [222, 223, 377, 425, 451, 459, 516], "from_log10": [222, 223, 522], "log_": [222, 223, 459, 522], "logparabolanormspectralmodel": [223, 238, 377, 402, 459, 523], "templatenpredmodel": [224, 405], "meyer": [225, 259, 436, 547], "2010a": [225, 259], "523a": [225, 259], "2m": [225, 259], "00449161": 225, "0473174": 225, "179475": 225, "53616": 225, "2708": 225, "powerlaw2spectralmodel": [226, 234, 235, 238, 377, 425, 432, 459, 474, 527], "datasetmodel": [228, 243, 376, 402, 439, 440, 443], "set_prior": [228, 382], "radiative_model": [229, 524], "nested_model": 229, "use_cach": 229, "naima": [229, 353, 371, 372, 373, 374, 377, 396, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 488, 502, 533, 534], "baseradi": 229, "radi": [229, 524], "inversecompton": [229, 524], "seed_photon_field": [229, 524], "synchrotron": [229, 401, 524], "compton": [229, 401, 524], "include_ssc": 229, "particle_distribut": [229, 524], "ssc_model": 229, "piecewis": [230, 231, 422, 459, 502, 513, 534], "f_0": [233, 527], "evaluate_integr": [233, 234, 235], "tilt": [234, 253, 365, 376, 377, 382, 394, 400, 432, 435, 436, 439, 440, 443, 452, 459, 464, 472, 473, 495, 501, 508, 528, 533], "e_d": [234, 235], "cov": [234, 235, 384], "0910": [234, 235], "4881": [234, 235], "evaluate_energy_flux": [234, 235], "vert": 235, "constantspatialmodel": [237, 377, 459, 464, 504], "templatendspatialmodel": [237, 459], "generalizedgaussianspatialmodel": [237, 402, 459, 507], "piecewisenormspatialmodel": [237, 419, 459, 508], "shell2spatialmodel": [237, 241, 459, 511], "constantspectralmodel": [238, 377, 440, 459, 517], "compoundspectralmodel": [238, 377, 419, 459, 464, 514, 516, 520, 523, 525, 528, 533], "brokenpowerlawspectralmodel": [238, 244, 377, 402, 459, 515], "piecewisenormspectralmodel": [238, 382, 402, 405, 418, 420, 459, 495, 525], "expcutoffpowerlaw3fglspectralmodel": [238, 377, 425, 459, 519], "superexpcutoffpowerlaw3fglspectralmodel": [238, 377, 459, 530], "superexpcutoffpowerlaw4fgldr3spectralmodel": [238, 459, 531], "superexpcutoffpowerlaw4fglspectralmodel": [238, 377, 459, 532], "gaussianspectralmodel": [238, 377, 459, 521], "eblabsorptionnormspectralmodel": [238, 377, 402, 459, 514], "naimaspectralmodel": [238, 377, 405, 459, 488, 524], "darkmatterdecayspectralmodel": [238, 420, 450, 459], "__main__": [238, 354, 461, 470, 548], "mycustomspectralmodel": [238, 459], "shell2": [240, 422, 459, 502, 513], "circleannulusskyregion": [240, 241, 497], "sinusoid": [242, 541], "sine": [242, 365, 422, 502, 544], "pulsat": 242, "sinu": [242, 459], "temporal_model": [243, 367, 439, 440, 447, 459, 535, 536, 537, 538, 539, 540, 541, 542, 543], "apply_irf": [243, 401], "factoris": [243, 377, 459, 545], "At": [243, 368, 371, 380, 381, 384, 398, 439, 456, 463, 493, 546], "gamma_1": [244, 247, 248, 249, 377, 530, 531, 532], "gamma_2": [244, 247, 248, 249, 377, 530, 531, 532], "sbpl": [244, 377, 459], "index_1": [247, 248, 249, 530, 531, 532], "index_2": [247, 248, 249, 530, 531, 532], "secpl": [247, 248, 249, 377, 459], "expfactor": [248, 249, 531, 532], "constanttemporalmodel": [250, 377, 398, 459, 535], "lineartemporalmodel": [250, 459, 539], "lightcurvetemplatetemporalmodel": [250, 377, 416, 419, 440, 459, 543], "expdecaytemporalmodel": [250, 377, 401, 405, 439, 447, 459, 536], "gaussiantemporalmodel": [250, 377, 401, 459, 537], "generalizedgaussiantemporalmodel": [250, 407, 459, 538], "powerlawtemporalmodel": [250, 459, 540], "sinetemporalmodel": [250, 459, 541], "templatephasecurvetemporalmodel": [250, 416, 459, 542], "hpxndmap": [251, 405, 499], "templatend": [251, 252, 459], "energy_cent": 253, "background_map": [253, 365], "phasecurv": [254, 413, 542], "interpolatedunivariatesplin": 254, "liner": [254, 368], "48442": 254, "phi_ref": [254, 542], "f0": [254, 542], "frequenc": [254, 480], "946923": 254, "f1": [254, 542], "f2": [254, 542], "plot_phasogram": 254, "phasogram": [254, 542], "s2": 254, "s3": 254, "bewar": [254, 424, 446], "cover": [254, 354, 356, 368, 369, 370, 378, 424, 445, 446, 452, 456, 468, 474, 489], "fitt": 255, "planar": [255, 365], "map_cent": 255, "regulargridinterpol": [256, 295, 354], "from_region_map": 256, "read_xspec_model": 256, "absorb": [256, 364, 377, 412, 514], "table_model": [256, 377], "proton": [258, 524], "2013aph": 258, "43": [258, 322, 368, 427, 428, 437, 447, 452, 456, 474, 501], "171b": 258, "hadron": [258, 360, 365, 433, 452, 463, 484, 497], "shoulder": 258, "he": [258, 364, 369], "fe": 258, "candl": [259, 547], "2000apj": 259, "539": [259, 458], "317a": 259, "hess_pl": 259, "hess_ecpl": [259, 427], "2006a": 259, "457": [259, 410, 458, 544], "899a": 259, "magic_lp": [259, 429], "magic_ecpl": 259, "2015jheap": 259, "30a": 259, "crab_hess_ecpl": 259, "dnde_cu": 259, "196991563774588": 259, "And": [259, 354, 357, 372, 374, 380, 385, 424, 425, 427, 428, 435, 439, 441, 447, 452, 453, 456, 457, 459, 463, 465, 472, 473, 474], "flux_int_cu": 259, "535058216604496": 259, "diffuse_model": 260, "herm": [262, 264, 420], "n_free_paramet": 265, "switch": [265, 354, 361, 364, 407, 411], "wilk": [265, 486, 550], "theorem": [265, 486, 550], "hypothes": [265, 419, 488, 550], "fit_results_nul": 265, "3fhl_dataset": [265, 436, 457], "3fhl_model": [265, 436, 458], "fermi_dataset": [265, 458, 464], "previous": [265, 371, 401, 413, 414, 423, 427, 435, 436, 451, 455, 457], "weaker": 265, "move": [265, 359, 360, 361, 362, 365, 368, 373, 374, 375, 378, 383, 389, 395, 396, 398, 399, 400, 401, 405, 406, 410, 411, 413, 414, 415, 416, 430], "value_scan": 266, "interp_scal": [266, 296], "parabol": [266, 296, 453], "fine": [266, 296, 367, 433, 452, 464, 501, 548], "n_on": [267, 268, 269, 275, 277, 278, 280, 390, 548, 549, 550], "countsstatist": [267, 268, 378, 401, 402, 405, 416], "known": [267, 268, 283, 367, 427, 431, 433, 438, 445, 455, 456, 457, 474, 488, 498, 548, 549, 550], "n_bkg": [267, 268, 550], "n_sig": [267, 268, 448, 550], "p_valu": [267, 268, 453, 548, 550], "distinguish": [267, 268, 378, 381, 423, 456], "fluctuat": [267, 268, 378, 430, 443, 461, 550], "stat_max": [267, 268], "compute_errn": [267, 268, 416, 550], "downward": [267, 268], "compute_errp": [267, 268, 550], "upward": [267, 268], "compute_upper_limit": [267, 268], "n_sig_matching_signific": [267, 268], "summat": [267, 268, 360], "mu_sig": [268, 278, 280, 549, 550], "unknown": [268, 431, 453, 547, 549, 550], "mu_on": [269, 275, 550], "truncation_valu": [269, 275], "mu_": [269, 275, 549, 550, 551], "1979": [269, 275, 394, 547], "apj": [269, 275], "228": [269, 275, 362, 368, 427, 428, 433, 451, 455, 466], "939": [269, 275], "chi": [271, 369, 549, 550, 551], "chisquar": 271, "chisq": 271, "t_i": 272, "log_2": 272, "f_": [272, 274, 282, 484], "f_i": 272, "subsequ": [272, 363], "doubling_dict": 272, "f_pp": 273, "strongli": [273, 369, 371, 380, 405, 432, 453, 461], "f_var": 273, "probe": [273, 459], "shorter": [273, 354, 355, 368, 374, 379, 402, 430, 446, 459, 548], "white": [273, 343, 344, 437, 448, 453, 458, 476, 501], "nois": [273, 372, 547], "longer": [273, 354, 360, 361, 368, 369, 371, 374, 387, 405, 408, 413, 414, 416, 419, 424, 430, 445], "fpp": 273, "fpp_err": [273, 444], "edelson2002": 273, "soft": 273, "seyfert": 273, "arakelian": 273, "564": [273, 411, 427, 458], "ton": [273, 463], "s180": 273, "edelson": [273, 444], "iopscienc": 273, "iop": 273, "1086": 273, "323779": 273, "var": [274, 386, 388], "fvar_err": [274, 444], "vaughan2003": 274, "character": [274, 378, 439], "vaughan": [274, 444], "2003": [274, 444], "2003mnra": 274, "345": [274, 423, 458], "1271v": 274, "_f_cash_root_cython": 279, "extra_term": 280, "habilit": 280, "nauroi": [280, 547], "141": [280, 437, 451], "linkage_kwarg": 281, "fcluster_kwarg": [281, 460], "hierarchi": [281, 365, 398], "linkag": 281, "ward": 281, "metric": 281, "euclidean": 281, "fcluster": [281, 460], "maxclust": 281, "get_irfs_featur": [281, 282, 419, 460], "scaled_features_irf": [281, 282, 460], "3020791585772495": 281, "20326": [281, 424], "2471938975366008": 281, "3319831545301117": 281, "20327": [281, 424], "4586649826004114": 281, "7763307219821931": 281, "20339": 281, "6705024680435898": 281, "9677107409819438": 281, "20343": 281, "9500979841335693": 281, "820562952023891": 281, "20344": 281, "8160964882165554": 281, "7771617763704126": 281, "20345": 281, "7718272408581743": 281, "8449575657133206": 281, "20346": 281, "8383396349722769": 281, "scaled_featur": 282, "1379190199428797": 282, "18046952655570045": 282, "2878662980210884": 282, "20137": [282, 466], "3049664466089965": 282, "1499472780781963": 282, "20151": 282, "1244969200533408": 282, "unitbas": 283, "parseabl": 283, "introspect": 283, "upcast": 283, "__array__": 283, "care": [283, 354, 363, 370, 379, 424, 429, 435, 456, 548], "subok": 283, "dex": 283, "ndmin": 283, "Ones": 283, "pend": 283, "lon_pnt": [285, 289], "lat_pnt": [285, 289], "lon_t": [285, 289], "lat_t": [285, 289], "dz": 287, "displac": 287, "vx": [287, 290, 379], "vy": [287, 290], "vz": [287, 290], "v_glon": 290, "v_glat": 290, "file_dir": 291, "file_nam": 291, "hdu_nam": 291, "localis": 291, "mapper": 291, "get_hdu": 291, "stdout": [291, 354], "abs_path": 291, "trapz": 294, "points_scal": 295, "magnitud": [295, 439], "x_1": 295, "x_2": 295, "x_3": 295, "neighbour": [295, 509], "interp1d": 296, "parallelbackendenum": 298, "poolmethodenum": 299, "starmap": [299, 303, 304], "pool": [299, 303, 304], "__int__": 301, "toward": [301, 361, 368, 374, 415], "preced": [301, 368, 370, 380, 459], "whitespac": 301, "0b100": 301, "pool_kwarg": [303, 304], "method_kwarg": [303, 304], "apply_async": [303, 304], "fpe": [303, 376, 378, 427, 437, 448, 473], "task_nam": 304, "task": [304, 374, 378, 380, 381, 383, 384, 415, 428, 431, 455, 456, 464, 468, 472, 488, 496, 546, 548, 552], "cdf": [305, 367, 439, 453], "drawn": [305, 367], "sample_axi": 305, "dist": [306, 384], "singleton": 307, "noth": [307, 371, 461], "mathworld": [310, 311], "wolfram": [310, 311], "randomnumb": 310, "lon_rang": 311, "lat_rang": 311, "spherepointpick": 311, "return_diff": 313, "return_delta": 313, "hz": [313, 474], "186484131475074": 313, "radius_max": [315, 441], "radius_min": 315, "concentr": 315, "orthogon": 316, "region_new": 317, "compoundpixelregion": 318, "tox": [319, 355, 357, 416, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 520, 523, 536], "build_doc": [319, 355, 357, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 520, 523, 536], "lib": [319, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 520, 523, 536], "python3": [319, 387, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 520, 523, 536], "site": [319, 384, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 512, 520, 523, 536, 548], "logger": [321, 323, 354, 437], "recurs": [322, 381], "stackoverflow": 322, "question": [322, 357, 359, 361, 362, 363, 365, 366, 367, 368, 371, 373, 378, 389, 394, 395, 413, 414, 415, 437, 474, 488, 489, 548], "3232943": 322, "3233356": 322, "99": [322, 430, 431, 432, 443, 473, 474], "sort_kei": 323, "table_oth": 324, "make_quant": 325, "standardis": [326, 327, 339, 413], "standardise_unit": [326, 340], "ident": [329, 357, 369, 416, 429], "behaviour": [329, 354, 376, 377, 402, 407, 413, 420, 446, 457, 464, 484, 549], "aren": [330, 354, 368, 373, 374, 385, 386, 388], "__enter__": 332, "savefig": [332, 390], "__exit__": 332, "trigger": [332, 354, 383, 465], "buffer": 332, "decor": [333, 334, 354, 381, 548], "test_using_data_fil": 333, "test_using_scipi": 334, "human": [335, 365, 384, 407, 428, 472], "readabl": [335, 365, 407, 428, 472], "isot": [335, 552], "epoch": 337, "default_epoch": 337, "ph": 339, "ct": [339, 414, 453], "shini": 339, "bunit": [340, 414, 456], "xlim": [341, 435, 461, 464, 482], "ylim": [341, 433, 461, 464, 480, 482, 521, 530, 531, 532], "npanel": 341, "plotter": 341, "gridspec": 341, "plot_panel": 341, "panel_fov": 341, "img": [342, 456], "axesimag": [342, 343], "cbar": 342, "add_subplot": 342, "111": [342, 361, 413, 422, 435, 451, 544], "im": [343, 453], "valfmt": 343, "2f": [343, 423, 428, 460, 473, 550], "textcolor": 343, "textkw": 343, "heatmap": [343, 348], "ticker": 343, "formatt": [343, 456], "middl": [343, 370], "colormap": [343, 344, 345, 393, 406, 474], "collabor": [344, 345, 359, 361, 363, 367, 407, 438, 464, 547], "yellow": 344, "imagenorm": [344, 345], "linearsegmentedcolormap": [344, 345], "mpl_normal": [344, 345], "linearstretch": [344, 345], "huestart": 345, "grai": [345, 497, 524], "jet": 345, "criticis": 345, "exagger": 345, "small": [345, 354, 360, 362, 368, 370, 371, 374, 376, 381, 384, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 445, 446, 456, 461, 463, 464, 465, 466, 506, 510, 511, 547, 548], "hue": 345, "kwargs_hist": [347, 433, 435], "kwargs_ax": [347, 433, 435], "_map": 347, "curve_fit": 347, "result_list": 347, "dictionnari": 347, "axis_edg": 347, "infodict": 347, "tsmap_est": 347, "sig": [347, 549, 550, 551], "row_label": 348, "col_label": 348, "cbar_kw": 348, "cbarlabel": 348, "rgb": [349, 351, 419, 423, 427], "make_lupton_rgb": 349, "axis_rgb": 349, "af": 350, "legend": [351, 423, 425, 427, 429, 435, 436, 440, 444, 445, 446, 448, 450, 453, 459, 460, 461, 464, 481, 482, 490, 514, 520, 523, 524, 528], "legend_kwarg": 351, "handler_map": 351, "cycler": [351, 423], "prop_cycl": 351, "prioriti": [351, 363, 365, 366, 368, 380, 383], "edgecolor": [351, 427, 429, 431, 437, 438, 441, 448, 450, 497, 505, 506, 507], "rcparam": 351, "patch": [351, 354, 361, 380, 408, 417, 427, 429, 437, 441, 448], "facecolor": [351, 427, 429, 437, 438, 441, 448, 450, 505, 506, 507], "never": [351, 353, 354, 357, 360, 364, 368, 376, 465], "thick": 351, "linewidth": [351, 355], "visualis": [351, 366, 368, 375, 401, 416, 429, 431, 454, 459, 461, 463, 488], "cycl": [351, 357, 358, 359, 371, 373, 387, 412, 416], "dynam": [351, 485], "datasets1": 351, "datasets2": 351, "columnspac": 351, "fontsiz": [351, 448, 453], "cyan": 351, "datasets3": 351, "magenta": [351, 438, 460], "theta2_min": 352, "theta2_max": 352, "conda": [353, 357, 361, 362, 371, 374, 379, 383, 384, 386, 387, 388, 389, 390, 395, 397, 413, 414, 548], "fingertip": 353, "pip": [353, 357, 361, 371, 385, 386, 388, 395, 414, 463, 548], "pyjok": 353, "rare": [353, 354, 373, 456], "uninstal": 353, "almost": [353, 355, 357, 368, 464, 474], "forg": [353, 371, 383, 384, 386, 387, 390, 413, 463], "click": [353, 370, 371, 390, 398, 413, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 548], "pyyaml": [353, 371, 394, 398], "mix": [353, 354, 370, 452, 456], "jupyt": [353, 361, 370, 371, 374, 385, 386, 388, 389, 391, 396, 411, 412, 413, 415, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548], "jupyterlab": [353, 371, 374, 390, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "later": [354, 359, 360, 361, 365, 366, 367, 370, 371, 372, 373, 374, 375, 393, 395, 405, 406, 408, 409, 415, 427, 429, 435, 436, 452, 455, 456, 459, 464, 474, 484], "psf_theta": 354, "fov_theta": 354, "fov_": 354, "_lon": 354, "_lat": 354, "_phi": 354, "unclear": [354, 364, 365, 371, 381], "postfix": 354, "_true": 354, "_reco": 354, "energy_reco": [354, 443], "pedant": 354, "everywher": [354, 368, 373, 374, 394], "quickli": [354, 355, 357, 359, 370, 371, 374, 380, 384, 386, 412, 427, 435, 444, 465, 492, 548], "becom": [354, 362, 364, 365, 368, 373, 381, 439, 446, 459, 488, 548, 551], "annoi": [354, 548], "why": [354, 355, 359, 361, 368, 453, 501], "ra_tru": [354, 367], "thu": [354, 361, 368, 371, 372, 374, 409, 423, 432, 433, 437, 439, 545, 551], "eventu": [354, 359, 370, 373, 374, 390, 459], "agreement": [354, 357, 375, 448], "seem": [354, 361, 362, 365, 371, 375, 476], "unrealist": 354, "legaci": [354, 413, 414], "our": [354, 357, 363, 368, 370, 371, 373, 376, 377, 378, 380, 395, 396, 412, 423, 424, 427, 428, 429, 432, 433, 435, 436, 437, 440, 446, 447, 448, 456, 457, 461, 465, 472, 473, 548], "strategi": [354, 361, 368, 419, 453, 551], "Of": [354, 357, 390, 435, 452, 456, 464, 548, 551], "cours": [354, 357, 361, 364, 371, 390, 428, 435, 452, 456, 464, 472, 548, 551], "stone": [354, 374], "advoc": 354, "encourag": [354, 359, 380, 383, 413], "realis": [354, 359, 368, 380], "backward": [354, 359, 368, 377, 378, 379, 397, 486], "incompat": [354, 379, 407], "had": [354, 360, 362, 380, 402, 408, 412, 413], "past": [354, 359, 362, 370, 371, 374, 375, 377, 380, 382, 390, 411, 413, 414, 456, 548], "although": [354, 367, 368, 369, 371, 374, 378, 453, 463, 510, 511, 545, 552], "decis": [354, 355], "controversi": [354, 359, 360, 374], "gh": [354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384], "1396": [354, 428], "yt": 354, "gpl3": 354, "lgpl": 354, "upstream": [354, 357], "gammalib": [354, 367], "claus": [354, 380], "standpoint": 354, "wcslib": 354, "fit_statist": 354, "mainten": [354, 361, 380, 384, 396, 418], "easier": [354, 360, 365, 373, 378, 413, 416, 463], "too": [354, 359, 360, 404, 405, 418, 419, 420, 453, 457], "rememb": [354, 368, 453, 468, 548], "privat": [354, 357, 363, 377, 413, 465, 466], "__all__": 354, "decid": [354, 360, 363, 364, 365, 366, 368, 369, 373, 376, 377, 378, 383, 428, 460, 472, 552], "thing": [354, 357, 359, 362, 368, 369, 370, 371, 374, 378, 384, 393, 412, 429, 432, 447, 448, 457, 464], "caller": [354, 365], "namedtupl": 354, "ok": [354, 368, 453], "consent": 354, "adult": 354, "do_someth": 354, "elif": [354, 368, 381], "isinst": [354, 365, 368, 377, 381, 382], "everyth": [354, 372, 373, 488], "asanyarrai": 354, "realli": [354, 361, 368, 371, 430, 443, 453], "put": [354, 355, 357, 359, 361, 362, 365, 374, 383, 384, 390, 396, 430, 439, 457, 464, 548], "boilerpl": 354, "unboundlocalerror": 354, "referenc": [354, 547], "better": [354, 357, 359, 360, 361, 362, 363, 367, 368, 373, 374, 375, 378, 395, 412, 413, 435, 436, 439, 448, 453, 456, 457, 464, 484], "fun": [354, 357], "program": [354, 370], "awar": [354, 359, 366, 374, 380], "million": [354, 381], "billion": 354, "inaccur": 354, "errat": 354, "hard": [354, 355, 377, 382, 400, 461], "But": [354, 359, 362, 368, 373, 381, 384, 390, 414, 427, 428, 453, 461, 463, 472, 476, 548], "docstr": [354, 374, 380, 405, 406, 407, 409, 412, 418, 419, 420, 459], "make_random_stuff": 354, "determinist": 354, "stuff1": 354, "make_some_random_stuff": 354, "stuff2": 354, "make_more_random_stuff": 354, "pattern": [354, 360, 368], "inspir": [354, 378], "sklearn": 354, "check_random_st": 354, "felt": 354, "confus": [354, 355, 360, 373], "statement": [354, 357, 361, 418, 420, 477], "easi": [354, 355, 360, 365, 368, 369, 370, 373, 374, 378, 381, 399, 405, 413, 456, 457, 464, 485, 545, 546, 548, 552], "stderr": 354, "timestamp": 354, "piec": [354, 360, 368, 373, 382], "chatti": [354, 437], "said": [354, 359, 361, 465, 466, 548], "long": [354, 357, 359, 361, 368, 370, 373, 374, 376, 379, 381, 407, 416, 451, 468, 500], "sens": [354, 361, 364, 368, 370, 373, 374, 375, 433], "wrong": [354, 403, 417, 418, 419], "extrem": [354, 381, 456, 507], "complex": [354, 355, 360, 364, 368, 369, 370, 376, 378, 390, 424, 427, 437, 440, 444, 447, 452, 456, 457, 459, 460, 464, 497], "modest": [354, 506], "worth": [354, 476], "captur": [354, 370], "getlogg": [354, 433, 437, 445, 446, 447, 470], "__name__": [354, 433, 445, 446, 447, 450, 470, 482, 548], "process_lots_of_data": 354, "infil": 354, "outfil": 354, "fast": [354, 368, 372, 453], "robust": [354, 414], "fanci": [354, 448], "unstabl": [354, 463], "interp_param": 354, "compromis": [354, 359, 367, 461], "refus": 354, "spot": 354, "lose": 354, "unsaf": 354, "assert_allclos": 354, "dozen": 354, "pytest": [354, 355, 357, 384, 413], "33333333": 354, "digit": 354, "assert_quantity_allclos": [354, 409], "discourag": 354, "establish": [354, 367], "assert_equ": 354, "mpl_check_plot": 354, "stream": 354, "short": [354, 355, 358, 359, 363, 368, 371, 374, 377, 380, 402, 444, 446, 464, 488, 489, 547, 550, 553], "mpl_plot_check": 354, "test_plot": 354, "mpl": 354, "astropy_vers": 354, "minor": [354, 359, 374, 377, 379, 404, 417, 506, 507], "xfail": 354, "test_someth": 354, "levelnam": 354, "host": 354, "push": [354, 357, 383, 416], "pr": [354, 364, 366, 368, 377, 378, 380, 382, 383, 399, 400], "eg": [354, 435, 443, 447, 452, 454, 458, 459], "typo": [354, 391, 417, 418], "ci": [354, 357, 361, 380, 384, 399, 405, 407, 410, 416], "commit": [354, 357, 362, 368, 379, 380, 392, 393, 416], "draft": [354, 358, 359, 382, 414], "incomplet": [354, 384, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "pain": [354, 357, 361], "autopep8": 354, "strang": 354, "clean": [354, 355, 357, 362, 363, 368, 370, 372, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 412, 413, 414, 415], "fdx": 354, "print0": 354, "xarg": 354, "dos2unix": 354, "cd": [354, 355, 357, 370, 386, 387, 388], "astropy_help": [354, 395, 396, 397], "checkout": [354, 357, 396, 435, 439, 459], "branch": [354, 357, 361, 368, 379, 384, 393], "bug": [354, 357, 360, 361, 379, 380, 383, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 417, 418], "meeseeksmachin": 354, "forgot": 354, "meeseeksdev": 354, "branchnam": 354, "instruct": [354, 363, 371, 383, 385, 386, 394, 405, 409, 413, 439, 463], "cherri": [354, 361, 368, 379], "pick": [354, 361, 368, 379, 395, 474], "changelog": [354, 383, 406, 414], "pro": [354, 370], "con": [354, 370], "ve": [354, 355, 357, 548], "wait": [354, 383, 384], "until": [354, 357, 361, 368, 379, 412], "contributor": [354, 357, 374, 384, 392, 403, 404], "rebas": [354, 368], "lt": [354, 380, 407, 416, 510, 511], "abruptli": [354, 379], "forecom": [354, 379], "announc": [354, 359, 361, 368, 370, 373, 375, 377, 379, 380, 383, 384], "affect": [354, 362, 366, 368, 379, 396, 397, 408, 417, 461], "deprecated_funct": 354, "new_funct": 354, "deprecated_renamed_argu": 354, "gammapydeprecationwarn": [354, 520, 523], "deprecated_argument_funct": 354, "arg_in_kwarg": 354, "deprecated_argument_function_kwarg": 354, "deprecated_attribut": 354, "some_class": 354, "old_attribut": 354, "new_attribut": 354, "_old_attribut": 354, "_new_attribut": 354, "disable_unicode_literals_warn": 354, "pure": [354, 371, 373, 374, 497], "consol": [354, 548], "seterr": 354, "advic": [354, 380], "sy": [354, 389], "warn_with_traceback": 354, "categori": [354, 365, 378, 405, 457, 459, 502], "lineno": 354, "print_stack": 354, "hasattr": 354, "formatwarn": 354, "showwarn": 354, "guidelin": [354, 358, 391, 413], "__repr__": [354, 400, 414], "__str__": [354, 366, 381, 397], "person": [354, 357, 359, 361, 362, 363, 367, 372, 375], "anna": 354, "0x105fe3b70": 354, "repl": 354, "seen": [354, 368, 375, 424, 431, 436, 446, 456, 459, 464], "0x105fd0cf8": 354, "attr": 354, "dataclass": 354, "mainli": [354, 364, 365, 368, 375, 456], "nice": [354, 359, 365, 371, 373, 381, 397, 405, 431, 435, 451, 548], "__class__": [354, 378, 450, 482], "refactor": [354, 366, 368, 369, 370, 377, 395, 396, 397, 399, 400, 401, 402, 405, 407, 409, 411, 413], "printout": [354, 412, 413, 452], "hi": [354, 412], "my": [354, 376, 377, 385, 439, 440, 452, 459], "heidelberg": 354, "add_loc": 354, "ni": 354, "usabl": 354, "monkei": 354, "summaris": [354, 359, 361, 374], "nameerror": 354, "attributeerror": 354, "forgotten": 354, "test_person_txt": 354, "startswith": 354, "endswith": 354, "rich": [354, 370], "latex": [354, 355], "svg": 354, "_repr_html_": 354, "underscor": 354, "nicer": [354, 390, 453, 474], "tend": [354, 507], "escap": [354, 380], "ultim": 354, "fallback": 354, "0x129602550": 354, "to_html": 354, "nearli": [354, 405, 424], "grand": 354, "implent": 354, "ipynb_to_galleri": 354, "path_to_notebook": 354, "path_to_script": 354, "straight": [355, 386, 488], "Or": [355, 373, 374, 428, 435, 452, 456, 463, 464, 486], "_build": [355, 384], "pdflatex": 355, "nonstopmod": 355, "tex": 355, "repo": [355, 362, 383, 384, 393, 406], "stuff": [355, 384, 488], "texliv": 355, "snippet": [355, 374, 488], "block": [355, 357, 360, 367, 374, 393, 413], "know": [355, 357, 359, 363, 368, 370, 371, 378, 384, 396, 413, 414, 415, 437, 440, 450, 454, 455, 456, 463, 465, 466, 548], "testcod": 355, "testoutput": 355, "contrari": [355, 362], "123456789": [355, 552], "51179": [355, 552], "00000143": [355, 552], "55197": [355, 552], "advis": [355, 380, 453, 461, 468], "whilst": [355, 460, 468], "zsh": 355, "pictur": 355, "orang": [355, 427, 435, 441, 445, 448, 450, 461, 497], "sphinx_gallery_thumbnail_numb": [355, 427, 429, 431, 433, 438, 441, 454, 514], "xlabel": [355, 419, 433, 447, 453, 461, 464, 480, 481, 482, 505, 542], "ylabel": [355, 447, 453, 461, 464, 480, 481, 482, 505, 542], "hover": 355, "edit": [355, 357, 359, 361, 362, 363, 370, 374, 383, 384, 387, 472, 548], "analysis_2": [355, 422, 473, 475], "extern": [355, 380, 406, 410, 411, 414, 463, 488], "linkcheck": 355, "fermi_ts_imag": 355, "restructur": [355, 369, 370, 371, 373, 375, 381, 384, 399, 405, 406, 407, 408, 410, 419], "scientif": [355, 361, 377, 380, 387], "develop": [355, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 387, 391, 393, 406, 413, 414, 415, 463], "quickest": 355, "editor": [355, 380, 428, 472, 548], "github": [355, 357, 358, 359, 360, 362, 363, 372, 374, 380, 383, 384, 387, 389, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 410, 411, 412, 413, 414, 415], "ask": [355, 357, 359, 361, 368, 370, 371, 374, 380, 389, 445, 474, 488, 489, 548], "pull": [355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 374, 379, 380, 384, 392], "email": [355, 357, 380, 384], "mail": [355, 357, 359, 361, 368, 370, 373, 375, 377, 380, 383, 389, 394, 395, 474, 548], "repeat": [355, 435, 465], "sidereal_tim": 355, "codebas": [355, 371, 393, 412, 414], "circle_area": 355, "mess": 355, "getter": 355, "setter": [355, 382, 399, 405, 452], "contact": [356, 361, 363, 380, 389, 391, 394, 395, 396, 410, 413], "webpag": [356, 362, 374, 380, 383, 413, 416], "ideal": [356, 357, 364, 368, 369, 378, 382, 383, 425, 464], "join": [356, 365, 366, 463], "slack": [356, 357, 361, 377, 383, 389, 394, 395, 548], "technic": [356, 357, 359, 367, 374, 376, 378, 380, 384, 432, 488], "recip": [356, 370, 391, 405, 448, 489, 550], "propos": [356, 358, 359, 360, 361, 363, 371, 379, 380, 382, 395, 398, 399, 401, 402, 413, 419], "partli": [357, 363, 364, 368, 374, 375], "introduct": [357, 375, 376, 377, 395, 399, 400, 401, 402, 425, 428, 459, 465, 466, 472, 473, 477], "guid": [357, 370, 372, 386, 387, 388, 391, 414, 468, 488, 503, 513, 534, 544], "aspect": [357, 380, 489, 548, 553], "sphinx": [357, 361, 374, 384, 396, 400, 407, 413, 414, 416, 420, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "happi": [357, 361, 374, 394, 395, 414], "skill": [357, 390], "anytim": [357, 396], "exercis": [357, 370, 374, 380], "complain": 357, "tracker": [357, 368], "colleagu": [357, 548], "suggest": [357, 359, 361, 364, 368, 374, 376, 378, 382, 431, 439, 440, 488, 548], "student": 357, "acknowledg": [357, 380, 391], "poster": [357, 380, 384, 409], "concern": [357, 359, 368, 370, 371, 373, 375, 377, 380, 405, 415, 465, 550], "readm": [357, 380], "rst": [357, 359, 374, 380, 383, 384, 400, 405], "shall": 357, "md": [357, 374, 380], "bind": 357, "cite": [357, 380], "willing": 357, "four": [357, 365, 378, 445, 463, 464, 492, 494, 500, 547], "amend": 357, "signoff": 357, "hook": [357, 416], "pseudonym": 357, "anonym": 357, "grant": [357, 380], "ongo": [357, 360, 361, 384], "vain": 357, "talk": [357, 359, 361, 371, 380], "someon": [357, 359, 374], "soon": [357, 368, 384], "anywai": [357, 368], "mentor": [357, 374], "review": [357, 362, 363, 364, 367, 368, 370, 371, 373, 374, 375, 377, 378, 380, 382, 415, 416, 500], "proce": [357, 384, 386, 388, 416, 424, 427, 428, 439, 443, 446, 457, 458, 464, 472, 473], "stage": [357, 370, 433, 435, 447, 452, 484, 547], "feedback": [357, 359, 363, 368, 370, 371, 374, 375, 377, 383, 413, 454, 488], "finish": [357, 361, 363, 383, 411, 413], "mind": [357, 374, 443, 453], "chime": 357, "experi": [357, 359, 363, 365, 369, 382, 384, 413, 476, 547, 552], "confirm": 357, "pleasant": 357, "drag": 357, "worst": 357, "sit": 357, "week": [357, 362, 372, 374, 379, 383], "invest": 357, "regress": 357, "certainli": 357, "isn": [357, 361, 368, 370, 373, 384, 437, 548], "ctapip": [357, 361, 363, 370, 371, 373, 374, 375], "workflow": [357, 362, 363, 370, 375, 379, 384, 399, 428, 433, 468, 472, 473, 489], "get_devel_vers": 357, "workspac": 357, "fork": 357, "somewher": [357, 371, 384], "machin": [357, 361, 362, 367, 371, 384, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "clone": [357, 387, 414], "usernam": 357, "env": [357, 371, 383, 385, 386, 388, 389, 414, 548], "yml": [357, 371, 383, 384, 385, 386, 388, 413], "mamba": [357, 385, 386, 407], "remot": 357, "reliabl": [357, 387, 433, 453, 457, 549], "stick": [357, 377, 395, 414, 453, 547], "prune": 357, "dedic": [357, 368, 369, 378, 380, 381, 384, 400, 401, 402, 420, 427, 428, 429, 435, 448, 453, 472, 473, 485], "compil": [357, 406], "cython": [357, 396, 406], "pyx": [357, 384], "pwd": [357, 386, 388], "adher": 357, "pep8": 357, "virtual": [357, 384, 386, 387, 388, 548], "mutltipl": 357, "codestyl": 357, "py310": 357, "numpy121": 357, "listenv": 357, "suffici": [357, 360, 367, 380, 419], "preview": [357, 466], "flake8": 357, "finalis": 358, "reject": [358, 359, 367], "withdrawn": [358, 359, 364, 365, 366, 369, 376, 378], "organ": [358, 374, 379, 380, 405, 465, 466, 485, 500], "plan": [358, 359, 363, 364, 368, 370, 371, 374, 379, 383, 394, 411, 413, 414, 415, 545], "roadmap": [358, 361, 370, 379, 394, 415], "authorship": 358, "polici": 358, "christoph": [359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 393, 394, 395, 396, 397, 398, 399, 400, 406, 409, 410, 411, 412, 413, 414, 415], "deil": [359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 393, 394, 395, 396, 397, 398, 399, 400, 406, 409, 410, 411, 412, 413, 414, 415], "jan": [359, 360, 363, 366, 371, 375, 392], "1239": 359, "stand": 359, "design": [359, 360, 363, 364, 367, 368, 370, 374, 376, 378, 379, 393, 413, 420], "disambigu": 359, "ap": [359, 371, 379], "pep": 359, "nep": [359, 379], "jep": 359, "enhanc": [359, 363, 390], "goal": [359, 368, 382, 453], "think": [359, 371, 372, 374], "chanc": 359, "topic": [359, 363, 374, 382, 474], "consciou": 359, "parti": 359, "anyon": [359, 361, 463], "welcom": [359, 368, 464], "submit": [359, 380], "face": [359, 362], "bring": 359, "titl": [359, 441, 450], "bullet": 359, "placehold": 359, "peopl": [359, 361, 374, 380, 383, 384, 450, 476, 488, 548], "formal": [359, 382, 431], "sentenc": [359, 374, 380], "interspers": 359, "favour": [359, 367, 382, 461], "timelin": [359, 361, 413], "389": 359, "argpars": [359, 548], "leav": [359, 366, 368, 369, 371, 374, 383, 385, 458], "optpars": 359, "alon": 359, "481": [359, 410], "cpython": 359, "intent": 359, "great": [359, 368, 373, 411, 468], "idea": [359, 362, 369, 373, 374, 375, 428, 454, 460, 464, 472], "vision": 359, "manpow": [359, 371], "hope": 359, "sent": 359, "thought": [359, 368], "inlin": [359, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 459, 463, 464, 466, 472, 473, 474], "spell": [359, 488], "mistak": [359, 379], "committe": [359, 361, 379, 380], "particip": [359, 363, 374], "consensu": [359, 380], "outcom": [359, 368], "unusu": 359, "disagr": 359, "paragraph": 359, "team": [359, 363, 371, 374, 376, 380, 392, 413], "rigid": 359, "bureaucrat": 359, "hasn": [359, 552], "vagu": 359, "clarif": 359, "basi": [359, 360, 370, 373, 383, 407, 409, 448, 450], "aris": [359, 370], "opinion": [359, 548], "friendli": [359, 381, 416, 428, 472, 488], "everyon": 359, "honk": 359, "r\u00e9gi": [360, 363, 364, 368, 369, 371, 373, 375, 376, 377, 378, 379, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "terrier": [360, 363, 364, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "jul": [360, 369, 371, 373, 392], "1277": 360, "modular": 360, "ten": [360, 374], "similarli": [360, 362, 378, 381, 405, 451, 453, 454, 456, 457, 459, 501], "orchestr": [360, 364, 366, 370, 428, 472, 473], "make_map_xxx": 360, "multidimension": [360, 370, 382, 420, 468, 493, 546], "energydependenttablepsf": [360, 375, 394, 405], "realiz": [360, 547], "reprocess": 360, "databas": [360, 488], "incid": [360, 547], "wherea": [360, 368, 371, 548], "ordereddict": [360, 371, 398], "techniqu": [360, 369, 370, 372, 424, 427, 435, 438, 455, 457, 495, 498, 546], "mosaic": 360, "make_map_cutout": 360, "mapgeom": [360, 415, 416], "make_map_count": 360, "make_map_exposure_reco_energi": 360, "make_map_hadron_accept": 360, "make_map_fov_background": 360, "make_map_ring_background": 360, "ringbackgroundestim": [360, 413], "meant": [360, 419, 423, 430, 432, 435, 437, 443, 447, 463], "skyimag": [360, 373, 411, 412, 413, 414], "skycub": [360, 373, 411, 412, 413, 414], "adonath": 360, "ljouvin": 360, "singleobsimagemak": 360, "stackedobsimagemak": 360, "singleobscubemak": 360, "stackedobscubemak": 360, "iactbasicimageestim": [360, 413], "sequenti": [360, 427, 473], "rid": 360, "bot": 360, "weekli": [360, 363, 367, 368, 445], "feb": [360, 361, 371, 375, 390, 392], "juli": [360, 363, 368, 370, 371, 373, 377, 379, 381, 446], "regi": [360, 365, 366, 370], "notic": [360, 453, 468], "master": [360, 361, 368, 383, 384, 393], "rewrit": [360, 363, 370, 400, 410, 411, 413, 414, 415, 548], "approv": [360, 361, 362], "matthew": [361, 411, 413, 414], "wood": [361, 411, 413, 414], "nov": [361, 366, 371, 372, 374, 378, 392, 416], "1278": 361, "march": [361, 363, 392, 394, 415], "2019": [361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 392, 414, 415, 438, 463, 547], "earlier": [361, 380], "indefinit": 361, "ship": [361, 362, 371, 394, 412, 430, 443, 448, 459, 488], "linux": [361, 371, 384, 387, 414, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474, 548], "older": [361, 371, 387, 412, 451], "fermipi": [361, 363, 366, 370, 374, 378, 411, 413, 464, 476], "backport": [361, 379, 383], "effort": [361, 363, 370, 371, 373, 374, 377, 396, 484], "spent": [361, 455], "life": [361, 453], "languag": [361, 373], "did": [361, 368, 373, 374, 375, 377, 380, 396, 423, 430, 432, 435, 437, 443, 447, 453, 461, 463], "questionnair": [361, 413], "januari": [361, 363, 379], "challeng": [361, 363, 367, 412, 433, 435, 437, 463], "august": [361, 367, 370, 373, 437], "wasn": [361, 414], "becam": 361, "trivial": 361, "big": [361, 364, 371, 383, 415, 464, 549, 551], "impact": [361, 367, 371, 465], "ago": 361, "lst": [361, 463], "harder": [361, 548], "1167": [361, 368], "caus": [361, 368, 414, 417, 488], "shim": 361, "amount": [361, 368, 382, 488], "cleanup": [361, 373, 384, 393, 398, 399, 404, 405, 406, 410, 411, 413], "organis": [361, 370, 373, 380, 413], "bugfix": [361, 363, 379, 412, 413], "hopefulli": 361, "wide": [361, 380, 381, 395, 414, 425, 436, 547], "jos\u00e9": [362, 370, 374, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 413, 414, 415], "enriqu": [362, 370, 374, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 413, 414, 415], "ruiz": [362, 370, 374, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 413, 414, 415], "oct": [362, 364, 365, 369, 371, 374, 380], "1419": [362, 415], "different": 362, "coupl": [362, 368, 373, 384, 402, 414, 456], "kb": 362, "compress": 362, "grow": [362, 373, 413], "gb": [362, 364, 463, 465], "pace": [362, 363], "1237": 362, "1369": [362, 414], "700": [362, 440, 457], "405": 362, "1131": 362, "cell": [362, 390, 416, 436, 448, 456, 463, 464, 474], "advantag": [362, 368, 371, 378, 405, 456, 461, 524, 548], "guarante": [362, 377, 379], "nbstripout": 362, "mechan": [362, 372, 378, 381], "binder": [362, 383, 413, 416, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "ipynb": [362, 374, 396, 399, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 473, 474, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "upcom": [362, 363], "url": 362, "cwd": 362, "subfold": [362, 405], "far": [362, 367, 369, 371, 375, 378, 381, 390, 405, 439, 476], "dockerfil": [362, 383, 384], "somehow": [362, 368, 373, 476], "submodul": [362, 395, 396, 401, 456, 474, 486], "pointer": 362, "mono": 362, "overal": [362, 368, 427], "summer": 362, "tri": [362, 368], "sprint": [362, 363, 367, 370, 371, 372, 373, 375], "axel": [363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "donath": [363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "1841": 363, "anticip": 363, "conclud": 363, "address": [363, 366, 367, 368, 370, 380, 461, 487], "dc1": [363, 374, 415, 439, 448, 454, 458, 463], "slide": [363, 431, 451], "summar": [363, 476], "suss": [363, 380], "workshop": 363, "indico": 363, "novemb": [363, 392, 402, 403, 404, 405], "octob": 363, "envis": 363, "2020": [363, 374, 375, 376, 377, 378, 392, 438, 439, 447, 456, 536, 537, 538], "septemb": [363, 371, 373, 374, 379], "schedul": 363, "aim": [363, 364, 380, 435, 439, 450, 460, 476, 547], "mileston": [363, 383], "fridai": 363, "am": 363, "monthli": [363, 381, 386, 415], "disccus": 363, "tackl": 363, "coverag": [363, 369, 384, 393, 397, 405, 411, 414, 446, 453], "runtim": [363, 381], "experienc": [363, 389], "simpifi": 363, "redesign": 363, "astropy_healpix": 363, "classic": [363, 372, 386, 395, 424, 427, 433, 437, 452, 455, 486, 488, 497, 498, 547, 550], "backround": 363, "enabl": [363, 366, 387, 396, 405, 414, 423, 430, 432, 435, 437, 443, 447, 463], "xml": [363, 364, 365, 398, 412, 414, 463, 476], "baysian": 363, "front": [363, 383, 412], "emce": [363, 371, 395, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "diagnosi": 363, "dc2": 363, "preliminari": [363, 374, 382, 410, 412, 420, 431, 454, 464], "board": [363, 374], "cc": [363, 368, 370, 373, 375, 377, 380, 382], "deadlin": [363, 367], "david": [364, 369, 394, 414, 415], "fidalgo": [364, 369, 394, 414, 415], "1877": 364, "foreseen": [364, 379], "focus": [364, 380], "analyz": [364, 465, 547], "sole": [364, 380], "ctool": [364, 367, 370, 374, 522], "emerg": 364, "spring": [364, 415], "madrid": 364, "deadc": 364, "manifest": 364, "connect": [364, 427, 441, 443, 457, 473, 545], "proxi": 364, "observationcta": 364, "capabl": [364, 464, 476], "superflu": [364, 448], "she": [364, 369], "observationlist": [364, 415], "cumbersom": [364, 372], "3000": [364, 451], "gtselect": [364, 464], "gtmktime": [364, 464], "dss": 364, "csobsselect": 364, "ctselect": 364, "essenti": [364, 366, 369, 399, 400, 401, 441, 456], "fly": 364, "datastoreindex": 364, "datastorexml": 364, "datastoreinmemori": 364, "child": 364, "mere": 364, "focu": [364, 374, 399, 412, 429, 548], "__len__": 364, "__getitem__": [364, 365, 366], "select_phas": 364, "readi": [364, 381, 389, 547], "feel": [364, 548], "withdraw": [364, 365, 366, 369, 376, 378], "room": 364, "gammmapi": [364, 371], "1971": 365, "thereof": 365, "framework": [365, 367, 368, 370, 372, 373, 377, 395, 396, 402, 414, 448, 459, 478, 488], "varieti": [365, 546], "spectraltempl": 365, "tablemodel": [365, 415], "spectralbackground": 365, "logparabola": [365, 523], "skyspatialmodel": [365, 414], "spatialtempl": 365, "skydiffusemap": [365, 396], "spatialbackground": 365, "spatialgaussian": 365, "phasecurvetempl": 365, "lightcurvetempl": 365, "phasecurvetablemodel": [365, 367], "lightcurvetablemodel": [365, 367], "temporalbackground": 365, "sourcetempl": 365, "skydiffusecub": [365, 377, 396, 401, 402, 414], "sourcebackground": 365, "parenthes": [365, 371, 417, 419], "spectralgaussian": [365, 397], "spatialconst": 365, "spectralconst": 365, "arthmet": 365, "autograd": [365, 372], "staticmethod": [365, 377, 382, 459, 461], "apply_psf": [365, 398], "dispatch": 365, "par": [365, 377, 382, 453, 461, 463], "wrap_at": 365, "backgroundtempl": 365, "predic": 365, "countspredictor": 365, "spectral_irf_model": 365, "mapevalu": [365, 366, 398, 399, 402, 405, 416, 417, 418, 420], "hidden": 365, "systemat": [365, 378, 380, 381, 402, 427, 445, 455, 486, 547, 549], "source_irf_model": 365, "compoundskymodel": 365, "difficult": [365, 368, 384], "compoundsourcemodel": 365, "reimplement": 365, "component_1": 365, "component_2": 365, "total_model": 365, "quival": 365, "spectralcompoundmodel": 365, "source_1": [365, 370], "source_2": 365, "cryptic": 365, "par_00x_": 365, "likelihood_profil": [365, 395], "skycood": 365, "pointsourc": [365, 476], "point_sourc": 365, "simplif": [365, 377, 416], "skygaussianelong": 365, "skydiskelong": 365, "loggaussian": 365, "mapfit": [365, 366, 395, 414, 415], "xx": [365, 380], "recognis": [365, 548], "irfmodel": 365, "modelevalu": 365, "spectralevalu": 365, "sourceevalu": 365, "backgroundevalu": 365, "atreye": [366, 369, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420], "sinha": [366, 369, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420], "4th": [366, 392], "30th": 366, "1986": 366, "advanc": [366, 370, 371, 374, 382, 386, 454, 456, 488, 547, 548], "likelhood": 366, "userdataset": 366, "stat_per_bin": 366, "map_dataset": [366, 448], "bkg_model": [366, 376, 382, 435, 439, 440, 443, 458, 473, 508], "backgroundmodel": [366, 376, 377, 398, 400, 401, 402, 405], "spectrum_dataset_1": 366, "spectrum_dataset_2": 366, "flux_point_dataset": 366, "cstat": [366, 399], "dataset_onoff": 366, "aceptance_off": 366, "spectralbackgroundmodel": 366, "countsspectrum": [366, 369, 396, 397, 399, 401, 410], "accordingli": [366, 380, 396, 402, 457], "effectiveareat": [366, 393, 405, 409], "spectrumobserv": [366, 396, 412], "spectrumdatasetsonoff": 366, "ne": 366, "central": [366, 375, 425, 474], "random_se": 366, "unbin": [366, 367, 414], "stai": 366, "serializiaton": 366, "fluxpointfit": 366, "2023": [366, 381, 382, 392, 395], "2026": [366, 395], "2030": [366, 395], "2045": 366, "2071": [366, 395], "2264": [366, 397], "obviou": [366, 373, 374, 375, 381], "inspect": [366, 370, 390, 427, 429, 435, 439, 440, 453, 456, 458, 463, 464], "advanteg": 366, "Such": [366, 454, 492], "un": [366, 380, 402, 458], "fabio": [367, 372, 395, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 412, 414, 416, 418, 419, 420], "pintor": [367, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 416, 418, 419, 420], "andrea": 367, "giuliani": 367, "aug": [367, 370, 371, 373, 392], "2136": [367, 398], "inversecdf": 367, "astrisim": 367, "agil": 367, "choic": [367, 371, 373, 380, 427, 428, 430, 432, 453, 465, 472, 489, 545, 548], "gtobsim": 367, "rej_sampl": 367, "envelop": [367, 453, 473], "spend": [367, 374], "pmf": 367, "practic": [367, 371, 375, 378, 379, 380, 381, 427, 452, 457, 459, 473, 484, 488, 497, 547], "enough": [367, 369, 370, 427, 430, 433, 443, 445, 457], "hli": [367, 400, 401, 405, 416, 422, 426, 468, 487, 547], "procedur": [367, 379, 384, 431, 435], "expomap": 367, "geom_irf": 367, "event_id": [367, 463, 464, 474, 485], "mapdatasetsampl": 367, "events_list": 367, "compute_npr": 367, "events_src": 367, "n_events_bkg": 367, "events_bkg": 367, "events_tot": 367, "get_events_meta_data": 367, "src": [367, 438, 484], "exposure_tim": 367, "irrespect": [367, 435, 456, 500], "inversecdfsampl": [367, 397], "2229": [367, 397], "dec_tru": 367, "uniformli": [367, 486], "pipelin": [367, 369, 401], "monitor": [367, 463, 488], "conception": [367, 376], "scope": [367, 368, 369, 370, 373, 381, 477], "fundament": [367, 376, 381], "expir": 367, "jun": [368, 370, 371, 376, 377], "2129": [368, 397], "subspac": 368, "histori": [368, 380, 416], "ahead": [368, 394], "earli": [368, 373, 374, 463], "pyregion": 368, "affili": [368, 380, 416], "situat": [368, 369, 371, 493], "pretti": [368, 374, 384, 390], "surprisingli": 368, "tricki": 368, "semant": [368, 379], "distort": [368, 397], "aitoff": 368, "disjoint": 368, "exchang": 368, "to_pixel": [368, 427, 437, 450, 455, 459, 497, 505, 506, 507], "skycoord_to_pixel_scale_angl": 368, "circlepixelregion": 368, "shear": 368, "to_polygon": 368, "accuraci": [368, 453, 488], "polygonpixelregion": 368, "vertex": 368, "feasibl": [368, 373, 430, 443, 452], "180": [368, 386, 388, 393, 451, 456], "wedg": 368, "make_region": 368, "ds9parser": 368, "pixcoord": 368, "make_pixel_region": 368, "pixelregion": [368, 497], "gather": [368, 374, 383], "make_sky_coord": 368, "wouldn": 368, "disk_inc": 368, "hpx_pixel": 368, "corner": [368, 371, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "221": [368, 406, 422, 427, 513], "select_sky_box": 368, "skycoord_from_t": 368, "hoc": 368, "berge2007": [368, 497, 498, 547], "ambigu": [368, 413], "2089": [368, 397], "isol": [368, 385, 457], "complic": [368, 501], "fewer": [368, 374], "arctan": 368, "specialis": [368, 374], "anywher": [368, 371, 373, 484], "specutil": 368, "spectralregion": 368, "1805": 368, "beyond": [368, 378, 381, 401, 455, 476], "whatev": [368, 370, 371, 548], "bump": [368, 412], "1172": 368, "360": [368, 456, 476], "1715": 368, "1445": 368, "polygonis": 368, "june": [368, 372, 392], "1451": 369, "spectrumonoffdataset": 369, "fluxpointestim": [369, 396, 402, 415], "night": [369, 446], "elev": 369, "atmospher": [369, 386, 391, 463], "transpar": 369, "pollut": 369, "spectrumextract": [369, 396, 399, 412], "backgroundestim": [369, 399], "apart": 369, "drawback": [369, 373], "rerun": 369, "time_step": 369, "nstep": 369, "time_bin": 369, "tmin": 369, "tmax": 369, "zip": [369, 382, 383, 427, 446, 450, 453, 458, 468, 482, 502, 507, 511, 524], "absenc": [369, 433, 455, 457, 497, 549], "carri": [369, 377, 379, 381, 405, 425, 473], "recurr": 369, "hea": 369, "ftool": 369, "mgtime": 369, "fashion": [369, 374], "lc_estim": 369, "rpovid": 369, "simple_rebin_lc": 369, "min_significance_lc": 369, "min_signific": 369, "timeseri": 369, "time_bin_start": 369, "time_bin_s": 369, "time_bin_end": 369, "distinct": [369, 370, 375, 465, 551], "astropy_timeseri": 369, "lomb": [369, 413], "scargl": [369, 413, 444], "periodogram": [369, 414], "fit_stat_scan": 369, "lar": [370, 394, 395, 396, 412, 413, 414, 417, 419], "mohrmann": [370, 394, 395, 396, 412, 413, 414, 417, 419, 547], "2219": [370, 398], "hap": 370, "commun": [370, 376, 380, 383, 385, 391, 466], "embryon": 370, "demonstr": [370, 395, 398, 399, 400, 401, 402, 407, 419, 420, 444, 445, 456, 458, 468, 500], "pillar": 370, "papermil": 370, "moreov": [370, 451, 455, 484], "benchmark": [370, 380, 384], "atom": 370, "spectrumanalysisiact": [370, 398, 412], "session": [370, 380, 487], "recov": 370, "diagnost": 370, "uncom": [370, 463], "sketch": 370, "understand": [370, 391, 399, 400, 424, 427, 428, 429, 432, 439, 440, 444, 446, 447, 456, 457, 458, 463, 472, 473, 476, 548], "out_fold": 370, "store_per_ob": 370, "max_offset": 370, "energy_saf": 370, "roi_max": 370, "111140": [370, 432, 435, 437], "111159": [370, 432, 435, 437, 463], "conesearch": 370, "gal_diffus": 370, "drive": 370, "agent": 370, "reflectedbgestim": 370, "toolbox": [370, 410], "deliv": 370, "deleg": 370, "mkdir": [370, 427, 428, 435, 436, 439, 472, 473], "gammapy_analysis_config": 370, "juypter": 370, "reduce_data": 370, "supervisor": 370, "source_42": 370, "energy_bin": 370, "spectral_point": 370, "data_reduct": 370, "eager": 370, "incorpor": [370, 374, 382, 547], "skeleton": 370, "proven": 370, "queri": [370, 410, 451], "forens": 370, "research": [370, 380], "reus": [370, 402, 420], "fermitool": 370, "traitlet": [370, 381], "consider": [370, 395, 405, 413, 435], "enrico": 370, "assist": 370, "enrico_config": 370, "enrico_xml": 370, "tweak": [370, 405, 456], "op": 370, "cookiecutt": 370, "unus": [370, 397, 399], "benn": 370, "brigitta": [371, 395, 397, 399, 401, 410, 411, 412, 413, 414, 415, 416], "sipocz": [371, 395, 397, 399, 401, 410, 411, 412, 413, 414, 415], "2218": [371, 398], "macport": [371, 412, 414], "benefit": 371, "exot": 371, "platform": [371, 380, 405], "pypi": [371, 381, 383, 384, 386, 387], "maco": [371, 414], "upload": [371, 383, 463], "anaconda": [371, 385, 386], "vast": [371, 407], "debian": [371, 387, 409], "expertis": 371, "wheel": 371, "homebrew": 371, "mar": [371, 392, 417], "jsonschema": [371, 398, 399], "sunpi": [371, 374, 375], "alphabet": [371, 380, 395, 396, 397, 398, 399, 400, 401, 402, 405], "parfiv": [371, 398], "outdat": [371, 374], "unsupport": 371, "plain": [371, 456], "numba": 371, "somewhat": [371, 463], "modernis": [371, 399], "2279": [371, 398], "docker": [371, 384], "sink": 371, "suffer": [371, 448], "metapackag": 371, "glueviz": 371, "familiar": [371, 372, 456, 457, 474], "newer": [371, 384, 395, 414], "2270": 371, "workaround": 371, "extras_requir": 371, "quentin": [372, 376, 377, 397, 398, 399, 400, 401, 402, 405, 407, 408, 416, 417, 418, 419, 420], "r\u00e9my": [372, 405, 407, 408, 416], "acero": [372, 395, 397, 399, 402, 405, 407, 412, 414, 420], "2255": [372, 460], "autodiff": 372, "mcmc": [372, 374, 395, 400, 402, 524], "bayesian": 372, "uncertaint": 372, "mont": [372, 493], "carlo": [372, 493], "mc": 372, "mcerp": 372, "primer": 372, "accur": [372, 415, 435, 453, 495], "absopt": 372, "complaint": 372, "1046": 372, "2007": [372, 547], "2190": 372, "posterior": [372, 461], "frequentist": 372, "multivari": 372, "jax": 372, "tensorflow": [372, 374], "pytorch": 372, "chainer": 372, "2304": 372, "fitmc": 372, "multinorm": 372, "pymc": 372, "3ml": [372, 464], "receiv": [372, 374, 375, 377, 379], "2274": [373, 398, 423], "six": [373, 379], "inconveni": [373, 414], "make_model": 373, "spectralexponentialcutoffpowerlaw3fgl": 373, "weak": [373, 461], "erlangen": 373, "2290": 373, "background_estim": 373, "background_r": [373, 452], "problemat": [373, 378, 381, 446, 488], "illustrate_colormap": 373, "grayify_colormap": 373, "biggest": 373, "lowest": [373, 444], "energy_logspac": 373, "sqrt_space": [373, 399], "sample_powerlaw": 373, "sphericalcircleskyregion": [373, 448, 474], "alma": 373, "4d": 373, "wavelength": 373, "map_analysi": 373, "tightli": 373, "2463": [374, 399], "grown": 374, "reorganis": 374, "oldest": 374, "readili": 374, "april": [374, 381, 401], "adass": 374, "xviii": 374, "proceed": [374, 380, 465], "autogener": 374, "contrast": [374, 547], "irap": 374, "omp": 374, "eu": 374, "djangoproject": 374, "expert": 374, "undertak": 374, "admit": 374, "bottom": [374, 376, 439, 445, 447, 451], "howto": [374, 416, 417], "subsect": [374, 456], "glossari": [374, 416, 484, 501], "revis": 374, "minut": [374, 384, 413, 427, 431, 433, 435, 437, 438, 439, 441, 446, 447, 450, 452, 453, 455, 461, 472], "plai": [374, 437], "customis": [374, 454], "prod3": 374, "cta_data_analysi": [374, 422, 437, 442], "fermi_lat": [374, 414, 422, 464, 467], "image_analysi": [374, 394], "sed_fitting_gammacat_fermi": 374, "spectrum_simul": [374, 422, 426, 430], "simulate_3d": [374, 414, 422, 442, 443], "cta_sensist": 374, "pulsar_analysi": [374, 422, 448, 449], "complement": 374, "getting_start": 374, "detect_t": 374, "cwt": [374, 399, 411, 414], "mcmc_sampl": [374, 397], "astro_dark_matt": [374, 422, 450, 462], "source_population_model": [374, 399], "image_fitting_with_sherpa": [374, 415], "spectrum_fitting_with_sherpa": 374, "mini": 374, "handbook": [374, 468], "processor": 374, "jupytext": 374, "attract": 374, "season": 374, "ctao": [374, 380, 463, 488], "rearrang": 374, "phone": 374, "2720": [375, 401], "subpackag": [375, 381, 398, 405, 409], "intuit": [375, 551], "analogi": 375, "asmoothestim": 375, "2555": 375, "mappanelplott": [375, 553], "colormap_hess": [375, 553], "limamapestim": [375, 401], "kernelbackgroundmapestim": 375, "tablepsf": [375, 393, 395], "delai": [375, 379], "remi": [376, 377, 397, 398, 399, 400, 401, 402, 405, 416, 417, 418, 419, 420], "apr": [376, 391, 392], "26th": 376, "2942": 376, "indiviud": 376, "resid": [376, 459], "server": [376, 386, 388, 468], "set_models_paramet": 376, "my_sourc": 376, "bkg_maker": [376, 424, 427, 429, 437, 446, 497], "backgroundirfmodel": 376, "implic": 376, "2944": [377, 402], "piecewisebrokenpowerlawnormspectralmodel": 377, "constantnormspectralmodel": 377, "pwl_norm": [377, 459, 528], "log_parabola_norm": 377, "bpwl_norm": 377, "const_norm": 377, "angular_separ": [377, 418, 420, 459], "mycustomgaussianmodel": [377, 459], "sigma_1tev": [377, 459], "sigma_10tev": [377, 459], "energy_nod": [377, 459], "expon": [377, 459], "from_refer": 377, "sersicspatialmodel": 377, "sersic2d": 377, "brokenpowerlaw": 377, "eqnarrai": 377, "e_b": 377, "phasecurvemodel": 377, "piecewisebrokenpowerlawnormspectramodel": 377, "pwbpl": 377, "eblabsorbtionnormspectralmodel": 377, "absorbt": 377, "sersic": 377, "spectral_typ": 377, "spectral_par": 377, "spatial_typ": 377, "spatial_par": 377, "temporal_typ": 377, "0e": [377, 428, 430, 432, 436, 439, 443, 447, 452, 454, 456, 458, 459, 464, 472, 504, 505, 506, 507, 509, 510, 511, 512, 515, 516, 518, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "14th": [378, 381, 392], "3075": 378, "regard": [378, 381, 427], "deduc": [378, 420], "excessprofileestim": [378, 402], "divers": 378, "fp_dnde": 378, "to_sed_typ": 378, "fp_energy_flux": 378, "ingredi": [378, 450], "mappabl": 378, "_data": 378, "fluxpointsetim": 378, "excessestim": 378, "importantli": [378, 414, 424, 548], "sparsif": 378, "my_flux_map": 378, "new_flux_map": 378, "energy_column": 378, "time_column": 378, "_energy_t": 378, "_time_group": 378, "_time_t": 378, "flux_points_at_tim": 378, "lightcurve_at_energi": 378, "abil": [378, 461], "necess": [378, 461], "priori": [378, 433, 457], "fluxmapestim": 378, "excesspointsestim": 378, "clarifi": [378, 419], "thank": [378, 399, 400, 405, 407, 455, 488], "get_group_by_idx": 378, "phase_axi": 378, "group_by_axi": 378, "datasets_in_phase_bin_3": 378, "12th": [379, 392], "2022": [379, 380, 392, 395, 465], "2nd": 379, "3950": [379, 416], "facil": 379, "calendar": [379, 383], "took": 379, "semver": 379, "candid": [379, 407, 451], "0029": 379, "deprecation_polici": 379, "train": 379, "bruno": [380, 397, 399, 402, 405, 408, 412, 413, 414, 416, 417, 418, 419, 420], "kh\u00e9lifi": [380, 416, 418, 419, 420], "thoma": [380, 413], "vuillaum": [380, 413], "25th": 380, "20th": 380, "3970": 380, "recognit": 380, "complianc": [380, 416], "fair": 380, "principl": [380, 382, 427, 498], "fair4r": 380, "licens": [380, 390], "bsd": 380, "remind": [380, 437, 552], "oral": 380, "doi": 380, "consequ": [380, 440, 501], "zenodo": [380, 407], "hal": 380, "swhid": 380, "heritag": 380, "archiv": [380, 466, 473], "who": [380, 450, 476], "deploy": 380, "devop": 380, "school": 380, "social": 380, "media": 380, "aforement": 380, "offici": [380, 489, 548], "regul": 380, "europ": 380, "authoris": 380, "orcid": 380, "certif": 380, "certifi": 380, "wrote": 380, "licenc": 380, "synchronis": 380, "commod": 380, "swh": 380, "whose": [380, 384, 440, 494, 506], "potentiel": 380, "duti": 380, "examin": [380, 492], "facto": 380, "optin": 380, "editori": 380, "journal": 380, "v2": [380, 381, 405, 413, 420, 463], "in2p3": [380, 463], "fr": [380, 463], "fellowship": 380, "oo": 380, "ff": 380, "eco": 380, "268": [380, 431, 437, 451, 458, 474], "famili": 380, "yyyi": 380, "lab": [380, 390, 413], "yy": 380, "0000": 380, "eosc": 380, "elabor": [380, 431], "deposit": 380, "charg": [380, 524], "todai": 380, "tributor": 380, "former": [380, 396, 401, 424, 458, 546, 549], "carefulli": [380, 439, 440, 461], "lts_author": 380, "stipul": 380, "contract": 380, "movement": 380, "settl": [380, 552], "safeti": 380, "optout": 380, "acada": 380, "dpp": 380, "spirit": 380, "respond": 380, "10th": [381, 392], "4491": [381, 420], "crucial": [381, 439, 440, 452], "heterogen": [381, 425, 436], "hardli": 381, "sporad": 381, "aggreg": 381, "transfer": 381, "consortium": [381, 463], "fulfil": [381, 456], "flow": [381, 546, 547], "scriptabl": 381, "plausibl": [381, 438], "30d00m00": 381, "creatormedadata": 381, "observationmetadata": 381, "reader": [381, 423, 430, 432, 435, 437, 440, 443, 447, 463], "hint": [381, 431, 486], "ecosystem": 381, "viabil": 381, "traittyp": 381, "metadatabasemodel": 381, "validate_al": 381, "hdr_dict": 381, "hdr": 381, "arbitrarytypemetadata": 381, "pointing_altaz": [381, 419], "validate_loc": 381, "observatory_loc": [381, 407, 423, 430, 439, 440, 443, 447], "validate_zenith_angl": 381, "metadatabas": 381, "daughter": 381, "datastoremetadata": 381, "pointingmetadata": 381, "gtimetadata": 381, "irfmetadata": 381, "stateless": 381, "fluxpointsdatasetmetadata": 381, "datasetsmetadata": 381, "modelsmetadata": 381, "modelmetadata": 381, "fluxmapsmetadata": 381, "fluxpointsmetadata": 381, "discard": [381, 451], "noah": [382, 420], "biederbeck": [382, 420], "katrin": [382, 418, 419, 420], "streil": [382, 418, 419, 420], "4381": [382, 420], "fledg": 382, "knowledg": [382, 390, 425, 430, 436, 438, 441, 443, 445, 453, 455, 456, 458, 461], "realist": 382, "trustworthi": 382, "regularli": [382, 466], "fovbackground": [382, 401], "gaussianprior": [382, 461], "tilt_prior": 382, "norm_prior": 382, "powerlawspectramodel": 382, "stepprior": 382, "tikonov": 382, "regularis": 382, "covariancegaussianprior": 382, "priorfitstatist": 382, "simultan": [382, 447, 452, 459, 461, 484], "multivariategaussianprior": 382, "from_covariance_matrix": 382, "covariance_typ": 382, "2075": 382, "priormodel": 382, "_weight": 382, "_type": [382, 461], "priorparamet": [382, 461], "getattr": 382, "converg": [382, 396, 417, 427, 429, 435, 453, 484, 488, 505], "uniformprior": [382, 461], "uni": 382, "_prior": 382, "parameters_stat_sum": 382, "writeabl": 382, "testpar": 382, "4620": [382, 420], "whatsnew": 383, "citat": 383, "cff": 383, "0rc1": 383, "1rc1": 383, "succed": 383, "tutorials_jupyt": [383, 468], "0rc": 383, "advertis": 383, "rc1": 383, "switcher": 383, "ot": 383, "feedstock": [383, 384], "send": 383, "forum": 383, "mailman": 383, "listinfo": 383, "wp": [383, 463], "xyz": 383, "her": 383, "him": 383, "tent": 383, "__": 383, "infrastructur": [384, 405, 416, 419], "tar": [384, 463], "makefil": [384, 409], "fit_statistics_cython": 384, "galleri": [384, 400, 402, 405, 416, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 474, 489, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "sphinx_gallery_conf": 384, "htmlcov": 384, "lf": 384, "sdist": 384, "cruft": 384, "curat": [384, 394], "logo": 384, "banner": 384, "variant": 384, "huge": [384, 506], "ye": 384, "land": 384, "badli": 384, "mybind": [384, 413], "cloud": [384, 468], "coveral": [384, 393], "lgtm": 384, "codaci": 384, "dashboard": 384, "checklist": 384, "straightforward": [384, 551], "slowest": 384, "miniconda": 385, "deactiv": 385, "appl": [386, 388, 390], "silicon": [386, 388], "m1": [386, 388], "arm64": [386, 388], "architectur": [386, 388], "bash": [386, 388, 548], "dialog": [386, 388], "troubleshoot": [386, 387, 388], "water": [386, 465], "jargon": 386, "mutipl": 386, "nightli": [386, 445], "easiest": 387, "egg": 387, "sudo": 387, "apt": 387, "ipython3": 387, "yearli": [387, 412], "insight": 389, "grep": 389, "__version__": 389, "consult": 389, "cheat": 389, "sheet": [389, 488], "believ": [389, 461], "acquir": 390, "haven": 390, "hello": [390, 437], "keyboard": 390, "gcc": 390, "llvm": 390, "clang": 390, "703": 390, "darwin": 390, "copyright": 390, "credit": 390, "cashcountsstatist": [390, 420, 548, 550], "397918129147546": [390, 548], "39791813": [390, 548], "7613": 390, "513": [390, 456], "53343": [390, 445], "92234009259": [390, 445], "94186555556": [390, 445], "44e": 390, "53e": [390, 430], "58": [390, 393, 430, 435, 438, 451, 455, 456, 458, 466, 472], "418007850646973": 390, "desktop": 391, "quickstart": 391, "saw": 391, "februari": 392, "29th": 392, "13th": 392, "decemb": 392, "6th": 392, "16th": 392, "22nd": 392, "19th": 392, "2014": [392, 476], "rolf": 393, "b\u00fchler": 393, "elli": [393, 406], "owen": [393, 406], "177": [393, 422, 464, 465, 513], "misc": [393, 406, 410, 411, 412], "167": [393, 437, 443], "166": [393, 422, 437, 451, 453, 462], "157": [393, 474], "156": [393, 428, 431, 437, 458], "155": 393, "154": [393, 423, 451], "151": [393, 458], "138": [393, 425, 439, 474], "128": [393, 448, 476], "lafferti": [393, 547], "wyatt": [393, 547], "1995": [393, 394], "117": [393, 427, 514], "synthet": 393, "116": 393, "109": [393, 456], "routin": 393, "96": [393, 430, 452, 456, 514], "88": [393, 415, 427, 429, 437, 438, 451, 456, 474], "pyfact": [393, 411], "tevpi": 393, "wavelet": [393, 411], "blob": 393, "7e955f": 393, "11af4c": 393, "went": 394, "apologis": [394, 395, 414], "disrupt": [394, 395], "gammapy_extra": 394, "cta_simul": 394, "prod": 394, "1994": [394, 547], "1991": 394, "1989": 394, "1988": 394, "1975": 394, "1969": 394, "observationstat": [394, 399], "1966": 394, "1962": 394, "1951": 394, "skyellips": [395, 396, 397, 398], "elong": [395, 398, 399, 505, 506], "skygaussian": 395, "forev": 395, "unmaintain": 395, "hugovk": 395, "jason": 395, "watson": 395, "luca": [395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 416, 419], "giunti": [395, 396, 397, 398, 399, 400, 401, 402, 405, 407, 408, 416, 419], "2098": 395, "2097": [395, 423, 430, 432, 435, 437, 443, 447, 463], "2093": 395, "2085": 395, "2077": 395, "2076": 395, "2069": 395, "2066": 395, "2065": 395, "2064": 395, "simulate_dataset": [395, 399, 400], "2054": 395, "2051": 395, "l\u00e9a": [395, 397, 398, 399, 402, 410, 411, 412, 413, 414], "jouvin": [395, 397, 398, 399, 402, 410, 411, 412, 413, 414], "2050": 395, "2049": [395, 451, 474], "select_map_mask": 395, "2046": 395, "2039": 395, "2038": 395, "marion": [395, 414], "spir": [395, 414], "jacob": [395, 414], "2037": 395, "2035": 395, "2034": 395, "2033": 395, "2031": 395, "2028": 395, "homework": 396, "basement": 396, "trash": 396, "spectrumobservationlist": [396, 411], "spectrumfit": [396, 412, 413, 414], "nddata": [396, 399], "naimamodel": [396, 399, 401], "skydisk": 396, "dirk": [396, 410, 412], "lennarz": [396, 410, 412], "debanjan": 396, "bose": 396, "2171": 396, "2169": 396, "2166": 396, "phacountsspectrumlist": 396, "2163": 396, "2160": 396, "2157": 396, "counts_on": 396, "2154": [396, 451], "datastoremak": [396, 407], "2153": [396, 451], "2152": 396, "2151": 396, "2146": 396, "2145": 396, "2142": 396, "2141": 396, "2140": 396, "2139": 396, "2133": 396, "dataaxi": 396, "binneddataaxi": [396, 412], "2132": 396, "2131": [396, 451], "2130": 396, "2128": 396, "feldman": [396, 402, 410, 412, 547], "cousin": [396, 402, 410, 412, 547], "2126": 396, "2124": 396, "2123": 396, "2121": 396, "2119": 396, "pycharm": 396, "2118": 396, "astropy_introduct": 396, "2115": 396, "spectrumresult": 396, "2114": 396, "2112": [396, 473], "2111": 396, "2108": 396, "2106": 396, "2104": 396, "72": [397, 451, 455, 474], "plsuperexpcutoff4fgl": 397, "phacountsspectrum": 397, "energybound": 397, "khelifi": [397, 399, 402, 405, 408, 412, 413, 414, 416, 417], "kaori": 397, "nakashima": 397, "silvia": 397, "manconi": 397, "yu": 397, "wun": 397, "wong": 397, "2296": 397, "2310": 397, "2305": 397, "spectrumsimul": [397, 411, 414], "2300": 397, "2298": 397, "2297": 397, "2294": 397, "2289": 397, "2287": 397, "methoda": 397, "2278": 397, "crabspectrum": 397, "2277": 397, "2276": 397, "2272": 397, "spectrumstat": 397, "2262": 397, "2259": 397, "minos_contour": [397, 415, 453], "2257": 397, "v3": 397, "2254": 397, "2250": 397, "2244": 397, "2243": 397, "2240": 397, "nddataarrai": [397, 411, 412], "2239": 397, "generalrandom": 397, "2238": 397, "mapeventsampl": [397, 398], "2237": [397, 474], "2235": 397, "2230": 397, "2217": 397, "2206": 397, "iter_by_pix": 397, "iter_by_coord": 397, "2204": 397, "2200": 397, "2192": 397, "101": [398, 422, 438, 442, 448, 451], "clearer": 398, "spectrumdatasetonoffstack": 398, "johann": [398, 405, 409, 410, 411, 412, 413, 414], "2412": 398, "2404": 398, "2401": 398, "2400": 398, "2385": 398, "2381": 398, "2379": 398, "2378": 398, "2377": 398, "2375": 398, "mapmakerob": [398, 399], "2368": 398, "2367": 398, "skypointsourc": 398, "2366": 398, "2365": 398, "2360": 398, "2359": 398, "2358": 398, "2356": 398, "2354": 398, "2351": 398, "2347": 398, "2346": 398, "2345": 398, "2344": 398, "2343": 398, "2342": 398, "2338": 398, "2335": 398, "2334": 398, "2330": 398, "2326": 398, "2323": 398, "2321": 398, "dissolv": 398, "2320": [398, 451, 452], "2314": 398, "2313": 398, "2308": 398, "2292": 398, "187": [399, 406, 437], "newli": [399, 400, 401], "unif": 399, "1fhl": [399, 412], "absorbedspectralmodel": [399, 412], "2660": 399, "2654": 399, "2651": 399, "2645": 399, "chi2assym": 399, "2637": 399, "2635": 399, "2627": 399, "2619": 399, "2620": 399, "2616": 399, "2604": 399, "2595": 399, "fluxpointdataset": 399, "2594": 399, "2587": 399, "2585": 399, "2580": 399, "2574": 399, "2567": 399, "2564": 399, "hpxsparsemap": 399, "2563": 399, "2562": 399, "2561": 399, "2559": 399, "2558": 399, "2557": 399, "2553": 399, "2552": [399, 451], "2551": 399, "2546": 399, "2540": 399, "2538": 399, "2536": [399, 458], "cutout_info": 399, "2535": 399, "2528": 399, "2525": 399, "2523": 399, "2521": 399, "to_sherpa": [399, 413, 414], "2520": 399, "2510": 399, "2505": 399, "2502": [399, 437], "observationssummari": 399, "2501": 399, "quetin": 399, "2499": 399, "2498": 399, "2497": 399, "phasebackgroundestim": 399, "2496": 399, "2493": 399, "2492": 399, "2491": 399, "2490": 399, "2486": 399, "2483": 399, "2481": 399, "2479": [399, 473], "geom_tru": 399, "2478": 399, "2477": 399, "2476": 399, "2475": 399, "2472": 399, "2470": 399, "2468": 399, "2464": 399, "2461": 399, "2459": 399, "2455": 399, "2454": 399, "2450": [399, 458], "2449": 399, "2448": 399, "2446": [399, 458], "2444": [399, 431], "2441": 399, "2435": 399, "2433": 399, "travi": [399, 401, 405], "2405": 399, "logscal": 399, "2350": 399, "coordsi": 400, "2756": 400, "2747": 400, "2752": 400, "2755": 400, "2753": 400, "2751": 400, "2750": 400, "2746": 400, "rework": 400, "2743": 400, "2742": 400, "2741": 400, "2739": 400, "2738": 400, "2737": 400, "2735": 400, "2733": 400, "2731": 400, "2730": 400, "2729": 400, "2728": 400, "2727": 400, "2726": 400, "likelihood_typ": 400, "2725": 400, "trapz_loglog": 400, "2723": 400, "2719": 400, "2718": 400, "2715": 400, "2713": 400, "2712": 400, "2711": 400, "2709": 400, "2707": 400, "2705": 400, "2703": 400, "2697": 400, "2692": 400, "2687": 400, "2685": 400, "2684": 400, "2681": 400, "2674": 400, "2673": 400, "2672": 400, "2155": [400, 444, 446, 447, 451, 460, 474, 514], "2667": 400, "81": [401, 422, 445, 514], "compute_lima_map": 401, "significance_lima": 401, "2846": [401, 437], "2841": 401, "2845": 401, "2842": 401, "2839": 401, "2837": 401, "2832": 401, "2829": 401, "2828": 401, "2827": 401, "2823": 401, "2822": [401, 458], "2820": 401, "2818": 401, "2817": 401, "spectrumevalu": 401, "2816": [401, 458], "2815": 401, "2812": 401, "2811": 401, "2810": 401, "2809": 401, "2808": 401, "2805": 401, "2804": 401, "2803": 401, "2802": 401, "2801": 401, "2799": 401, "2798": 401, "2797": 401, "kernelbackgroundestim": 401, "2796": 401, "2794": 401, "2793": 401, "azur": 401, "2792": 401, "2791": 401, "2790": 401, "2789": 401, "2788": 401, "2787": 401, "2785": 401, "2784": 401, "2783": 401, "2782": 401, "2781": 401, "2779": 401, "2778": 401, "2777": 401, "2776": 401, "2775": 401, "2772": 401, "2771": 401, "2768": 401, "2767": 401, "2765": 401, "2764": 401, "2762": 401, "significancemapestim": 401, "2761": 401, "lazyfitsdata": 401, "2759": 401, "osx": 401, "notat": [402, 490, 492, 498, 551], "piecewisenormsectralmodel": 402, "irfstack": [402, 411], "alexi": [402, 405], "almeida": 402, "coutinho": [402, 405], "cosimo": [402, 405, 407, 413, 414, 416, 419], "nigro": [402, 405, 407, 413, 414, 416, 419], "jalel": [402, 405], "hajlaoui": [402, 405], "laura": [402, 405, 407, 408, 414, 416, 418, 419, 420], "olivera": [402, 405, 407, 408, 416, 418, 419, 420], "nieto": [402, 405, 407, 408, 416, 418, 419, 420], "lea": 402, "noeth": [402, 403], "3106": 402, "3100": 402, "3092": 402, "3091": 402, "3089": 402, "3088": 402, "3086": 402, "3085": 402, "3083": 402, "3081": 402, "3080": 402, "3076": 402, "3074": 402, "3072": 402, "3070": 402, "3069": 402, "3063": 402, "3060": 402, "3058": 402, "3054": 402, "3053": 402, "3052": 402, "3051": 402, "3045": 402, "3042": 402, "3041": 402, "3039": 402, "3038": [402, 474], "3037": 402, "3035": 402, "3032": 402, "3030": 402, "inconsist": [402, 408, 418, 419], "3012": 402, "3007": 402, "3005": 402, "3002": 402, "from_gaussian": 402, "3001": 402, "2999": [402, 451], "e_edg": 402, "2998": 402, "2993": 402, "2992": 402, "2991": 402, "2990": 402, "2984": 402, "2981": 402, "2976": 402, "2974": 402, "2967": 402, "2966": 402, "2965": 402, "2956": 402, "2951": 402, "2950": 402, "2948": 402, "2947": 402, "2945": 402, "2943": 402, "2939": 402, "2938": 402, "2932": 402, "plot_spectrum_datasets_off_region": [402, 418, 419, 427, 429, 437, 497], "2931": 402, "2929": 402, "2927": 402, "2924": 402, "2912": 402, "2907": 402, "2903": [402, 458], "2897": 402, "2896": 402, "pyproject": 402, "toml": 402, "2891": 402, "2885": 402, "2874": [402, 474], "2872": 402, "3116": 403, "3114": 403, "3113": 403, "3112": 403, "3111": 403, "3110": 403, "3130": 404, "3129": 404, "_propagate_error": 404, "3127": 404, "3126": 404, "3123": 404, "3125": 404, "3124": 404, "3122": 404, "excess_matching_signific": [404, 414], "390": 405, "heavili": 405, "significantli": [405, 439, 463, 547], "reorgan": 405, "treatment": [405, 435, 547], "labelmapaxi": [405, 419], "unnecessari": [405, 416, 435], "ly": [405, 458], "dimitri": [405, 407], "papadopoulo": [405, 407], "buchner": 405, "mathieu": [405, 408], "boni": [405, 408], "maximilian": [405, 407, 408, 417, 418, 419, 420], "n\u00f6the": [405, 407, 408], "sebastian": 405, "panni": 405, "vika": 405, "joshi": 405, "3592": 405, "3584": 405, "3568": 405, "3561": 405, "3559": 405, "codespel": 405, "3544": 405, "3529": 405, "overload": 405, "3523": 405, "gaussiantemporalmod": 405, "3515": 405, "3491": 405, "3488": 405, "3480": 405, "3474": 405, "3471": 405, "to_spectrum": 405, "3468": 405, "3466": 405, "3458": 405, "3454": 405, "3453": 405, "3449": 405, "3447": 405, "3446": 405, "3445": 405, "3439": 405, "3438": 405, "3434": 405, "3428": 405, "3426": 405, "3423": 405, "3420": 405, "3418": 405, "3416": 405, "3413": 405, "3406": 405, "3404": 405, "3403": 405, "3402": 405, "3399": 405, "3397": 405, "3395": 405, "3393": 405, "3392": 405, "3390": 405, "3381": 405, "3379": 405, "find_root": 405, "3377": 405, "jose": [405, 407, 413], "3374": 405, "make_theta_squared_t": [405, 466], "3369": 405, "3363": 405, "3358": 405, "3357": 405, "3353": 405, "need_upd": 405, "3349": 405, "3347": 405, "3346": 405, "3343": 405, "3342": 405, "3338": 405, "3337": 405, "3335": 405, "3333": 405, "3328": 405, "3323": [405, 452], "3320": 405, "3319": 405, "3314": 405, "3310": 405, "3309": 405, "3308": 405, "3307": 405, "3306": 405, "3305": 405, "3304": 405, "3303": 405, "3302": 405, "3301": 405, "3293": 405, "thumbnail": 405, "3285": 405, "3284": 405, "3283": 405, "plot_spati": 405, "3281": 405, "shorten": 405, "3279": 405, "3278": 405, "3277": 405, "3276": 405, "3272": 405, "3262": 405, "3258": 405, "3257": 405, "3254": 405, "mailmap": [405, 416], "3246": 405, "3243": 405, "3241": 405, "3238": 405, "3230": 405, "3228": 405, "3222": 405, "3219": 405, "3217": 405, "classproperti": 405, "3216": 405, "3211": 405, "3208": 405, "3207": 405, "3202": 405, "3199": 405, "3197": 405, "3191": 405, "3185": 405, "3182": 405, "3180": 405, "3178": 405, "3173": 405, "3169": 405, "3168": 405, "3165": 405, "3162": 405, "3158": 405, "3155": 405, "layout": [405, 435, 443, 456, 472, 473], "3153": 405, "3152": 405, "3148": 405, "3145": 405, "_compute_flux_spati": 405, "3141": 405, "3140": 405, "3138": 405, "3136": 405, "3131": [405, 458], "manuel": [406, 409, 410], "paz": [406, 409, 410], "arriba": [406, 409, 410], "254": 406, "252": [406, 427, 437, 451], "248": 406, "246": 406, "245": [406, 428], "inset": 406, "236": [406, 451], "235": [406, 427], "234": [406, 448], "231": 406, "230": [406, 431], "setuptool": [406, 548], "entry_point": 406, "xmltodict": [406, 463], "210": [406, 451], "205": [406, 437, 456], "healpix_to_imag": 406, "194": [406, 427], "tevcat": [406, 451], "188": [406, 422, 423, 451, 461, 462], "spectral_cub": 406, "integral_flux_imag": 406, "186": [406, 437, 451], "radmax": [407, 408, 419, 420], "wobbleregionfind": 407, "theme": [407, 414], "pydata": 407, "predefin": [407, 441, 445, 446, 472], "arnau": [407, 416, 417, 418, 419], "aguasca": [407, 416, 417, 418, 419], "tyler": 407, "cahil": 407, "alisha": 407, "chromei": 407, "3941": 407, "3936": 407, "3933": 407, "3918": 407, "3915": 407, "3906": 407, "3905": 407, "3904": 407, "3898": 407, "3895": 407, "__eq__": 407, "__neq__": 407, "3892": 407, "3887": 407, "3876": 407, "3874": 407, "mapdatasetoff": 407, "read_lazi": 407, "3873": 407, "3860": 407, "3856": 407, "3846": 407, "3842": 407, "3837": 407, "3833": 407, "codemeta": 407, "3817": 407, "3810": 407, "3806": 407, "3804": 407, "3802": 407, "3797": 407, "3796": 407, "3783": 407, "3777": 407, "3761": 407, "3760": 407, "pyflak": 407, "3752": 407, "3748": 407, "3740": 407, "3733": 407, "3728": 407, "3722": 407, "3720": 407, "3713": 407, "3712": 407, "3699": 407, "3684": 407, "3669": 407, "3535": 407, "17th": 408, "3990": 408, "3988": 408, "3983": 408, "3987": 408, "3986": 408, "3979": [408, 548], "nmcid": 408, "mid": [408, 419, 463], "3975": 408, "onoff": [408, 484], "3966": 408, "3959": 408, "make_map_background_irf": 408, "3948": 408, "required_hdu": 408, "hspec": [409, 410, 411], "ignasi": 409, "reichardt": 409, "icrc": 409, "jonathan": [409, 410], "harri": [409, 410], "stefan": [409, 420], "klepser": 409, "victor": 409, "zabalza": 409, "326": [409, 422, 513], "318": [409, 427], "317": [409, 430], "312": 409, "306": [409, 430, 549], "301": [409, 430], "299": [409, 430, 451], "296": [409, 428], "fitspectrum": 409, "295": 409, "291": 409, "shower": [409, 463, 493], "289": [409, 430], "286": [409, 430], "285": [409, 430, 447], "283": [409, 427, 430], "sample_spher": [409, 552], "279": 409, "snrcat": [409, 451], "276": 409, "temp": [409, 440], "262": [409, 431, 458, 474], "261": [409, 474], "260": [409, 474], "108": [410, 422, 447, 544], "women": 410, "hack": 410, "appveyor": 410, "luigi": 410, "tibaldo": 410, "olga": [410, 411], "vorokh": [410, 411], "518": [410, 458], "510": 410, "507": 410, "506": [410, 426], "503": 410, "502": 410, "487": [410, 472], "485": 410, "offdatabackgroundmak": 410, "484": 410, "478": 410, "475": [410, 458], "474": 410, "473": 410, "462": [410, 427], "461": 410, "pacman": 410, "459": [410, 452, 458], "456": 410, "455": [410, 425], "447": 410, "436": [410, 422, 427, 472, 475], "435": 410, "421": [410, 441, 474, 547], "403": [410, 437, 458], "415": [410, 524], "414": [410, 435], "398": [410, 435], "396": 410, "395": 410, "394": [410, 427], "392": [410, 428], "387": [410, 474], "energyoffsetarrai": 410, "379": 410, "375": [410, 456], "371": [410, 422, 428, 475], "369": 410, "367": [410, 441, 458], "364": [410, 427], "pipe": [410, 411, 412], "359": [410, 437, 451, 474], "352": [410, 451], "351": [410, 451, 474], "347": [410, 424], "342": 410, "339": [410, 441], "poissonlikelihoodfitt": 410, "338": [410, 422, 451, 513], "337": [410, 430], "335": 410, "330": [410, 430, 458], "319": [410, 464], "290": [410, 427, 430, 438], "domenico": 411, "tiziani": 411, "helen": 411, "poon": 411, "julien": [411, 412, 413], "lefaucheur": [411, 412, 413], "nachiketa": [411, 412], "chakraborti": [411, 412], "790": [411, 427], "789": 411, "783": [411, 451, 474], "778": [411, 427, 451], "777": 411, "774": [411, 443], "772": [411, 423], "767": 411, "checker": [411, 414], "766": [411, 431], "763": 411, "tablepsfcheck": 411, "762": 411, "759": 411, "754": 411, "753": [411, 428], "746": 411, "740": 411, "spectrumobservationstack": 411, "739": [411, 427], "738": [411, 451], "731": 411, "719": [411, 427, 458], "713": [411, 451], "710": 411, "709": 411, "679": 411, "677": 411, "661": 411, "660": 411, "653": [411, 424], "649": 411, "648": 411, "647": 411, "641": [411, 474], "640": 411, "635": 411, "631": [411, 435], "exclusionmask": 411, "628": 411, "622": [411, 425], "599": [411, 441, 446, 458], "594": [411, 427], "configpars": 411, "593": 411, "591": [411, 451], "582": 411, "skyimagelist": 411, "558": 411, "569": 411, "\u00e0": 411, "la": 411, "bgstat": 411, "565": 411, "exptest": 411, "559": 411, "look_up": 411, "557": [411, 458], "556": [411, 427, 550], "549": 411, "547": [411, 423, 451], "546": 411, "545": [411, 427], "544": [411, 451, 464], "541": [411, 442], "535": [411, 427, 451], "531": [411, 441], "observationtablesummari": 411, "530": 411, "529": 411, "data_summari": 411, "527": [411, 464], "526": 411, "to_table_psf": 411, "524": [411, 451, 458], "523": [411, 456], "521": 411, "147": [412, 451, 456], "bi": [412, 415], "port": 412, "py35": 412, "rewritten": [412, 415], "arjun": [412, 413], "voruganti": [412, 413], "arpit": 412, "gogia": 412, "z\u00e9": 412, "vin\u00edciu": 412, "1006": 412, "1002": 412, "areasc": [412, 414], "1001": [412, 439, 440], "997": 412, "compute_chisq": 412, "994": 412, "988": [412, 451, 458], "985": [412, 425], "976": 412, "975": 412, "plsuperexpcutoff3fgl": 412, "966": [412, 422, 534], "skymask": 412, "950": 412, "933": 412, "932": 412, "919": 412, "911": 412, "get_respons": 412, "906": [412, 451], "getitem": 412, "898": 412, "893": 412, "888": 412, "885": 412, "884": [412, 422, 475], "883": [412, 422, 426, 433, 434], "881": [412, 423, 431], "875": 412, "872": 412, "871": 412, "868": [412, 451], "865": [412, 431], "864": [412, 427, 474], "859": [412, 427], "image_profil": 412, "858": 412, "855": 412, "854": 412, "851": 412, "847": 412, "842": [412, 451], "840": [412, 431], "837": [412, 458], "836": [412, 431, 448, 451], "835": 412, "834": [412, 447], "833": [412, 428], "832": 412, "831": 412, "830": 412, "827": 412, "826": 412, "825": [412, 423, 451], "820": 412, "816": [412, 438], "814": 412, "813": [412, 447], "812": 412, "811": 412, "810": [412, 451], "798": 412, "796": [412, 458], "logenergyaxi": 412, "797": 412, "793": 412, "791": 412, "784": [412, 428], "178": 413, "openastronomi": 413, "navig": [413, 415], "servic": 413, "launch": [413, 548], "role": [413, 455], "lemi\u00e8r": 413, "jean": [413, 414], "philipp": [413, 414], "lenain": [413, 414], "kai": [413, 414], "br\u00fcgge": [413, 414], "saha": 413, "matthia": [413, 414], "wegen": [413, 414], "oscar": [413, 414], "blanch": [413, 414], "peter": 413, "deiml": 413, "roberta": [413, 414], "zanin": [413, 414], "rub\u00e9n": 413, "l\u00f3pez": 413, "coto": 413, "armstrong": 413, "yve": 413, "gallant": 413, "spectrumstack": 413, "1318": 413, "1316": 413, "1312": 413, "1305": 413, "1300": 413, "1294": 413, "1291": 413, "1290": 413, "image_pip": 413, "1289": 413, "1287": 413, "1281": 413, "1266": 413, "1268": 413, "to_energy_dependent_table_psf": 413, "1246": 413, "1240": 413, "1238": 413, "1235": 413, "1227": 413, "1226": 413, "1220": 413, "1215": 413, "1211": [413, 451], "1210": 413, "spectrumenergygroup": 413, "1207": 413, "1204": 413, "1195": 413, "1190": 413, "1183": 413, "1179": 413, "1176": 413, "1170": 413, "1169": 413, "1166": 413, "1162": 413, "1150": 413, "1134": 413, "1133": 413, "energy_resolut": 413, "1127": 413, "1115": 413, "1110": 413, "atnf": 413, "1108": 413, "1107": 413, "gaussianband2d": 413, "1105": 413, "1104": 413, "1103": 413, "flask": 413, "1102": 413, "1100": 413, "1098": 413, "1093": [413, 431], "1092": [413, 431], "1090": 413, "1089": 413, "1088": 413, "1087": 413, "1085": 413, "1084": 413, "1083": 413, "1082": 413, "saniti": 413, "1078": 413, "1076": 413, "1073": 413, "1070": [413, 474], "1069": 413, "1067": 413, "tsimageestim": 413, "1065": 413, "obs_list": [413, 415], "1057": 413, "1054": 413, "1053": 413, "1051": 413, "1045": 413, "1043": 413, "1040": 413, "1038": 413, "mpl_style": 413, "1136": 413, "1035": 413, "1032": 413, "1031": [413, 447], "1029": 413, "1027": 413, "resourc": [413, 468], "1026": 413, "1025": 413, "butterfli": [413, 453, 474], "1021": 413, "make_base_catalog_galact": [413, 478], "ruben": 413, "1014": 413, "1013": 413, "845": 413, "314": 414, "intro_map": 414, "heavi": [414, 415], "pin": 414, "analysis_3d": [414, 422, 435, 442, 445], "aplpi": 414, "andrew": 414, "chen": 414, "gabriel": 414, "emeri": 414, "hubert": 414, "siejkowski": 414, "vega": 414, "garcia": 414, "1822": 414, "1821": 414, "1818": 414, "1812": 414, "1808": [414, 451, 474], "1800": [414, 440, 456, 463], "observationtablecheck": 414, "1799": 414, "1791": 414, "1785": [414, 423], "1764": [414, 437], "1761": 414, "1760": 414, "1759": 414, "1755": [414, 431], "1751": 414, "1750": 414, "eventlistdataset": 414, "1748": [414, 458], "datastorecheck": 414, "observationcheck": 414, "1746": [414, 474], "1731": [414, 458], "1711": 414, "1702": 414, "1697": 414, "1696": 414, "1695": 414, "1685": 414, "1681": 414, "make_imag": 414, "1675": 414, "1660": 414, "1658": 414, "skimag": 414, "block_reduc": 414, "1634": 414, "1630": [414, 474], "1616": 414, "1606": 414, "fluxpointfitt": 414, "1605": 414, "1594": 414, "1582": 414, "1576": 414, "1573": 414, "1568": 414, "1564": 414, "1562": 414, "1558": 414, "1556": [414, 451, 474], "sync": 414, "1554": 414, "1543": 414, "1527": 414, "1517": 414, "cta_util": 414, "ctaspectrumobserv": 414, "1515": 414, "1505": 414, "1495": 414, "1492": 414, "1489": 414, "1476": 414, "1475": 414, "1474": 414, "1470": [414, 474], "1456": 414, "1447": 414, "1446": 414, "1444": 414, "1443": 414, "1435": 414, "1433": 414, "1432": 414, "1426": 414, "1421": 414, "1412": 414, "1408": [414, 474], "1406": 414, "1401": 414, "catalogimageestim": 414, "1397": 414, "1395": 414, "1387": 414, "1381": 414, "1386": 414, "1378": 414, "1377": 414, "1376": 414, "1374": 414, "1373": 414, "1372": 414, "1367": [414, 520], "1362": 414, "1360": 414, "rtd": 414, "1357": 414, "1354": 414, "1347": 414, "1346": 414, "transpos": 414, "1345": 414, "1343": 414, "1341": 414, "1339": 414, "1337": 414, "1334": 414, "1331": 414, "1317": 414, "1231": 414, "daniel": [415, 418, 420], "morcuend": [415, 418, 420], "ignacio": 415, "minaya": 415, "lui": 415, "contrera": 415, "1949": 415, "1937": [415, 451], "1934": 415, "1933": 415, "1930": 415, "1929": 415, "1927": 415, "1926": 415, "1922": 415, "1921": 415, "1919": 415, "1918": 415, "1912": 415, "1909": 415, "load_cta_irf": [415, 419], "1908": 415, "1904": [415, 447], "1903": 415, "1898": 415, "1895": 415, "1894": 415, "1893": 415, "1891": 415, "1890": 415, "1888": 415, "1884": 415, "analysis3d": 415, "1883": 415, "1871": 415, "constantmodel": 415, "1862": 415, "make_mean_psf": 415, "make_mean_edisp": 415, "1861": 415, "1859": 415, "1857": 415, "1855": 415, "1854": [415, 451], "fluxpointprofil": 415, "1846": 415, "1845": 415, "1837": 415, "1836": 415, "1807": 415, "1849": 415, "1766": 415, "1763": [415, 451], "1710": 415, "cleaner": 416, "button": [416, 456], "anymor": 416, "incorrectli": [416, 457], "templatelightcurvetemporalmodel": 416, "positv": 416, "mireia": 416, "nieva": 416, "rosillo": 416, "sip\u0151cz": 416, "4119": 416, "4115": 416, "conduct": [416, 447], "4113": 416, "4108": 416, "4107": 416, "4106": 416, "reactiv": 416, "4105": 416, "4103": 416, "4098": 416, "failur": [416, 419], "4095": 416, "4093": 416, "4089": 416, "4088": 416, "4084": 416, "templatetemporalmodel": 416, "4083": 416, "4080": 416, "4079": 416, "4076": 416, "4075": 416, "4073": 416, "4071": 416, "4067": 416, "4058": 416, "4054": 416, "aaguasca": 416, "4051": 416, "4044": 416, "4043": 416, "colour": 416, "blind": [416, 488], "4037": 416, "4026": 416, "4025": 416, "4024": 416, "4022": 416, "4018": 416, "4017": 416, "4015": 416, "4014": 416, "4013": 416, "4000": 416, "mnt": 416, "silent": 416, "3956": 416, "3925": 416, "3862": 416, "linhoff": [417, 418, 419, 420], "regeard": [417, 418, 419, 420], "4359": [417, 419], "4344": 417, "norm_only_chang": 417, "4336": [417, 419], "4324": [417, 419], "4301": [417, 419], "4275": [417, 419], "4268": 417, "4231": [417, 419], "4221": 417, "manner": [418, 419], "array_shap": [418, 420], "kirsti": [418, 419, 420], "feijen": [418, 419, 420], "claudio": [418, 420], "galelli": [418, 420], "simon": [418, 419, 420], "mender": [418, 419, 420], "michael": [418, 420], "punch": [418, 420], "4937": [418, 420], "4936": [418, 420], "4913": 418, "nooverlaperror": 418, "4876": 418, "4772": 418, "4755": 418, "4753": [418, 420], "4728": 418, "4721": 418, "4681": 418, "4677": [418, 420], "4657": [418, 420], "4653": 418, "4631": 418, "impos": [418, 423, 497], "4619": 418, "4593": 418, "4578": 418, "4574": [418, 420], "4524": 418, "4520": 418, "4500": [418, 419], "4486": [418, 419], "4453": [418, 419], "4435": [418, 419], "tick": [418, 419], "4412": [418, 419], "lightcurvetemplatemodel": [418, 419], "4397": [418, 419], "4394": 418, "4393": [418, 419], "4382": 418, "4380": [418, 419], "129": 419, "hierarchical_clust": [419, 460], "select_nested_model": 419, "ins": 419, "plot_map_rgb": 419, "plot_npred_sign": [419, 435, 437, 473], "pointing_zen": 419, "elpas": 419, "table_from_row_data": 419, "to_st": 419, "latex_inlin": 419, "unit_string_format": [419, 423], "gr\u00e9aux": 419, "4545": 419, "4521": 419, "4510": [419, 435, 474], "4508": 419, "4506": 419, "4504": 419, "4495": 419, "move_axi": 419, "4466": [419, 435], "4459": 419, "dep": 419, "4458": 419, "4444": 419, "4430": 419, "4428": 419, "to_str": [419, 423], "4418": 419, "_evaluate_timevar_sourc": 419, "4417": 419, "4409": 419, "4406": 419, "4402": 419, "4395": 419, "4370": 419, "_sample_coord_time_energi": 419, "4369": 419, "4352": 419, "4350": 419, "4346": 419, "4326": 419, "4305": 419, "4294": 419, "4288": 419, "4282": 419, "4280": 419, "4277": 419, "4264": 419, "4252": 419, "4245": 419, "4243": 419, "_check_interv": 419, "4242": 419, "4219": 419, "4216": 419, "teststatisticnest": 419, "4215": 419, "4213": 419, "4212": 419, "unneed": 419, "4210": 419, "plot_rgb": 419, "4209": 419, "4208": 419, "4191": 419, "axisymmetr": 420, "quantifi": [420, 438, 444, 461], "observationeventsampl": 420, "observationseventsampl": 420, "ivoa": 420, "obscor": 420, "energydependentmorphologyestim": [420, 438], "juan": 420, "bernet": 420, "julia": 420, "djuvsland": 420, "fr\u00f6se": 420, "jana": 420, "konrad": 420, "paula": 420, "kornecki": 420, "kurt": 420, "hanna": 420, "stapel": 420, "tim": 420, "unbehaun": 420, "5044": 420, "5040": 420, "5015": 420, "4994": 420, "4992": 420, "4989": 420, "4978": 420, "4975": 420, "4973": 420, "4971": 420, "4970": 420, "4942": 420, "4940": 420, "apply_edisp": 420, "4917": 420, "4904": 420, "4902": 420, "4886": 420, "4879": 420, "4854": 420, "4851": 420, "4850": 420, "4849": [420, 451, 474], "4847": 420, "4845": 420, "4837": 420, "4835": 420, "4834": 420, "4829": 420, "4828": 420, "4822": 420, "4817": 420, "4814": [420, 474], "4810": 420, "4808": 420, "4805": 420, "4802": 420, "4785": 420, "4783": 420, "4770": 420, "4759": 420, "4750": 420, "4741": 420, "4740": 420, "4738": 420, "4729": 420, "4726": 420, "4714": 420, "4703": 420, "4697": 420, "4671": 420, "4669": 420, "4668": 420, "4664": 420, "4660": 420, "4638": 420, "4635": 420, "4628": 420, "pyirf": 420, "jbernet": 420, "4615": 420, "4608": 420, "4599": 420, "4595": 420, "4584": 420, "4567": 420, "4561": 420, "paulakx": 420, "4546": 420, "4540": 420, "4501": 420, "4485": 420, "4432": 420, "4408": 420, "4217": 420, "384": [422, 426], "mem": [422, 426, 434, 442, 449, 462, 467, 469, 471, 475, 503, 513, 534, 544], "light_curve_flar": [422, 446, 449], "33": [422, 428, 444, 446, 449, 450, 452, 453, 456, 474, 488], "469": [422, 435, 442], "413": [422, 437, 450, 462], "event_sampl": [422, 439, 442], "707": [422, 439, 442], "flux_profil": [422, 441, 442], "751": [422, 441, 442], "energy_dependent_estim": [422, 438, 442], "light_curve_simul": [422, 447, 449], "346": [422, 447, 449, 458], "663": [422, 437, 442, 549], "003": [422, 431, 434, 448, 458, 464], "spectral_analysi": [422, 426, 427], "886": [422, 426, 427, 451], "603": [422, 452, 458, 462, 474], "446": [422, 455, 458, 462, 550], "analysis_1": [422, 472, 475], "ring_background": [422, 433, 434], "993": [422, 424, 442], "model_manag": [422, 458, 462], "310": [422, 428, 462], "spectral_analysis_hli": [422, 426, 428], "575": [422, 426], "185": [422, 457, 467], "139": [422, 426, 427, 431, 464], "358": [422, 437, 449, 451, 474], "analysis_mwl": [422, 436, 442], "857": [422, 442], "645": [422, 452, 467], "sed_fit": [422, 425, 426], "modeling_2d": [422, 432, 434], "152": [422, 431, 434, 437, 473], "extended_source_spectral_analysi": [422, 424, 426], "331": [422, 426], "spectral_analysis_rad_max": [422, 426, 429], "307": [422, 426, 430], "observation_clust": [422, 460, 462], "065": [422, 462], "768": [422, 462], "605": [422, 467], "146": [422, 462, 474], "event_sampling_nrg_depend_model": [422, 440, 442], "696": [422, 462], "survey_map": [422, 469, 470], "589": [422, 469], "292": [422, 462], "plot_absorb": [422, 514, 534], "cta_sensit": [422, 423, 426], "variability_estim": [422, 444, 449], "646": [422, 449], "plot_constant_tempor": [422, 535, 544], "486": [422, 544], "plot_naima": [422, 524, 534], "plot_const": [422, 504, 513], "plot_disk": [422, 505, 513], "plot_powerlaw2": [422, 527, 534], "321": [422, 441, 534], "plot_smooth_broken_powerlaw": [422, 529, 534], "plot_powerlaw": [422, 526, 534], "316": [422, 430, 464, 465, 534], "plot_broken_powerlaw": [422, 515, 534], "309": [422, 534], "plot_compound": [422, 516, 534], "293": [422, 430, 534], "plot_logparabola_norm_spectr": [422, 523, 534], "281": [422, 430, 451, 534], "plot_powerlaw_norm_spectr": [422, 528, 534], "271": [422, 430, 431, 474, 534], "plot_templ": [422, 512, 513], "224": [422, 447, 513], "plot_piecewise_norm_spectr": [422, 525, 534], "223": [422, 458, 534], "plot_gen_gauss": [422, 507, 513], "plot_gauss_spectr": [422, 521, 534], "220": [422, 435, 451, 458, 534, 549, 550], "plot_super_exp_cutoff_powerlaw_4fgl_dr1": [422, 532, 534], "219": [422, 534], "plot_super_exp_cutoff_powerlaw_4fgl": [422, 531, 534], "plot_super_exp_cutoff_powerlaw_3fgl": [422, 530, 534], "plot_exp_cutoff_powerlaw_norm_spectr": [422, 520, 534], "211": [422, 451, 452, 534], "plot_gauss": [422, 506, 513], "209": [422, 437, 447, 513], "plot_constant_spectr": [422, 517, 534], "207": [422, 437, 441, 458, 534], "plot_logparabola": [422, 522, 534], "203": [422, 427, 534], "plot_template_spectr": [422, 533, 534], "plot_point": [422, 509, 513], "plot_powerlaw_tempor": [422, 540, 544], "192": [422, 544], "plot_shel": [422, 510, 513], "182": [422, 513], "plot_shell2": [422, 511, 513], "plot_exp_cutoff_powerlaw": [422, 518, 534], "174": [422, 534], "plot_exp_cutoff_powerlaw_3fgl": [422, 519, 534], "172": [422, 441, 534], "plot_piecewise_norm_spati": [422, 508, 513], "plot_template_phase_tempor": [422, 542, 544], "plot_template_tempor": [422, 543, 544], "plot_generalized_gaussian_tempor": [422, 538, 544], "plot_expdecay_tempor": [422, 536, 544], "plot_gaussian_tempor": [422, 537, 544], "plot_sine_tempor": [422, 541, 544], "106": [422, 544], "plot_linear_tempor": [422, 539, 544], "zenith": [423, 436, 460, 463, 464, 465, 493], "check_tutorials_setup": [423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "python_execut": [423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "python_vers": [423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "x86_64": [423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "source_posit": [423, 438, 460], "directional_offset_bi": [423, 430], "on_region_radiu": [423, 427, 430, 439, 440, 446], "empty_dataset": 423, "unitswarn": [423, 430, 432, 435, 437, 443, 447, 463], "def_unit": [423, 430, 432, 435, 437, 443, 447, 463], "recogn": [423, 430, 432, 435, 437, 439, 443, 447, 463], "add_enabled_unit": [423, 430, 432, 435, 437, 443, 447, 463], "combining_and_defin": [423, 430, 432, 435, 437, 443, 447, 463], "msg": [423, 430, 432, 435, 437, 443, 447, 463], "spectrum_mak": 423, "on_radii": 423, "sensitivity_estim": 423, "sensitivity_t": 423, "0356551": 423, "0423761": 423, "0756e": 423, "1642": 423, "32847": 423, "0503641": 423, "0598579": 423, "33368e": 423, "16506": 423, "0711412": 423, "0845515": 423, "70634e": 423, "482": 423, "297": 423, "7567": 423, "10049": 423, "119432": 423, "33055e": 423, "341": 423, "929": [423, 428], "3765": 423, "63": [423, 427, 429, 447, 452, 455, 465, 466, 472, 473, 495, 497, 498, 501], "141945": 423, "168702": 423, "71944e": 423, "237": 423, "200503": 423, "238298": 423, "74542e": 423, "077": 423, "283218": 423, "336606": 423, "21236e": 423, "107": [423, 456], "112": 423, "400056": 423, "475468": 423, "54721e": 423, "73": [423, 474], "7922": 423, "565095": 423, "671616": 423, "81699e": 423, "9343": 423, "74": [423, 430, 433, 474], "1691": 423, "798218": 423, "948683": 423, "53482e": 423, "37": [423, 428, 430, 447, 453, 464, 550], "9876": 423, "654": [423, 451], "12751": 423, "34005": 423, "30015e": 423, "3536": 423, "6033": 423, "59265": 423, "89287": 423, "04939e": 423, "6823": 423, "9845": 423, "24968": 423, "67375": 423, "93128e": 423, "6464": 423, "43113": 423, "17776": 423, "77678": 423, "05637e": 423, "5411": 423, "66104": 423, "48871": 423, "33484": 423, "49078e": 423, "34047": 423, "53566": 423, "4579e": 423, "8669": 423, "95615": 423, "6444": 423, "00931e": 423, "845693": 423, "6509": 423, "0356": 423, "33013e": 423, "447552": 423, "8699": 423, "2384": 423, "59254e": 423, "266192": 423, "2419": 423, "25162e": 423, "126585": 423, "set_prop_cycl": 423, "xerr": [423, 461], "linestyl": [423, 448, 450, 461, 482, 501, 505, 506], "set_xlabel": [423, 424, 427, 430, 448, 453, 460, 461], "set_ylabel": [423, 424, 427, 441, 448, 450, 453, 460, 514], "ax1": [423, 431, 433, 437, 448, 457, 458], "blackground": 423, "ax2": [423, 431, 433, 437, 448, 457, 458], "twinx": 423, "psf68": 423, "tick_param": 423, "labelcolor": 423, "set_ylim": [423, 425, 427, 428, 429, 445, 448, 490, 514], "simplest": [423, 427, 444], "dataset_on_off1": 423, "44749e": 423, "6390": 423, "63902": 423, "squeez": [423, 454], "vhe": [424, 476], "rx": 424, "j1713": 424, "3935": 424, "3945": [424, 451], "20349": 424, "20350": 424, "20396": 424, "20397": 424, "other_id": 424, "20421": 424, "20422": 424, "20517": 424, "20518": 424, "20519": 424, "20521": 424, "20898": 424, "20899": 424, "20900": 424, "dataset_empti": [424, 427, 429, 430, 437, 446, 452, 455, 465, 497], "geolat": 424, "altitud": 424, "271777777777796": 424, "1834": 424, "9999999997835": 424, "1216": 424, "170": 424, "2339": [424, 451, 474], "270": [424, 431, 451, 458, 474], "3521": 424, "480": [424, 451, 458], "4684": 424, "5895": 424, "874": 424, "66650390625": 424, "77358627319336": 424, "45515263080596924": 424, "6985": 424, "16650390625": 424, "48602294921875": 424, "4618695378303528": 424, "ax_excess": [424, 427], "ax_sqrt_t": [424, 427], "nrow": [424, 427, 453, 514], "set_titl": [424, 427, 431, 433, 437, 448, 450, 453, 454, 455, 458, 497, 507, 511, 514], "rxj": 424, "1713": 424, "fit_joint": [424, 427, 435, 436], "result_joint": [424, 427, 435], "79": [424, 430, 451], "1102e": 424, "3576e": 424, "catalog_registri": [425, 451, 457], "j1507": 425, "j1506": 425, "6219": 425, "6228e": 425, "catalog_3fgl": 425, "get_cl": [425, 451, 457], "catalog_3fhl": [425, 451], "catalog_gammacat": [425, 451], "source_fermi_3fgl": 425, "source_fermi_3fhl": 425, "source_gammacat": 425, "dataset_gammacat": 425, "dataset_3fgl": 425, "dataset_3fhl": 425, "e_refe_mine_maxdndednde_errpdnde_errndnde_ulsqrt_tsis_ul": 425, "gevgevgev1": 425, "float64float64float64float64float64float64float64float32bool": 425, "14210": 425, "00020": 425, "0009": 425, "288e": 425, "343e": 425, "128e": 425, "12nan5": 425, "660fals": 425, "62320": 425, "00050": 425, "0002": [425, 474], "572e": 425, "818e": 425, "13nan6": 425, "940fals": 425, "86": [425, 427, 428, 431, 456, 474, 485], "60350": 425, "000150": 425, "335e": 425, "131": [425, 437], "055e": 425, "554e": 425, "14nan3": 425, "835fals": 425, "861150": 425, "000500": 425, "0006": 425, "411e": 425, "697e": 425, "133e": [425, 431], "14nan5": 425, "697fals": 425, "0002000": 425, "188e": 425, "214": [425, 431], "034e": 425, "15nan8": 425, "068e": 425, "000true": 425, "result_pwl": 425, "6e": [425, 451, 458], "yaxi": [425, 488], "set_unit": [425, 488], "1e2": [425, 480, 482], "set_xlim": [425, 428, 436, 448, 490, 514], "result_ecpl": 425, "894": 425, "96e": 425, "9e": [425, 451, 533], "078": 425, "log_parabola": 425, "result_log_parabola": 425, "88e": [425, 451], "8e": [425, 435, 438, 440, 458, 464, 533], "144": [425, 458, 474], "049": [425, 435], "j0835": [425, 474], "devoid": [427, 491], "emitt": 427, "nuisanc": [427, 453, 547, 551], "resample_energy_edg": [427, 488], "create_crab_spectral_model": [427, 429, 436], "23559": [427, 428, 445, 452, 455, 472, 473, 495, 497, 498, 548], "23592": [427, 428, 445, 452, 455, 472, 473, 495, 497, 498, 548], "j0521": 427, "183": [427, 435], "604": 427, "708": [427, 428], "exclusion_region": 427, "dataset_mak": [427, 429, 437, 446, 455, 497], "safe_mask_mask": [427, 429, 437, 446, 455], "userwarn": [427, 429, 436, 437, 441, 464], "xy": [427, 437, 441, 505], "mpl_kwarg": [427, 437, 441], "plot_kwarg": [427, 429, 437], "149": [427, 455, 458], "0833333358168602": 427, "303": [427, 430, 451], "227": 427, "99996948242188": 427, "0833333432674408": 427, "439": [427, 464], "408": [427, 456], "7743835449219": 427, "373": [427, 437], "3919677734375": 427, "05088486522436142": 427, "550": 427, "512": 427, "135498046875": 427, "05487060546875": 427, "04357249662280083": 427, "spectrum_analysi": 427, "exist_ok": [427, 428, 435, 436, 439, 472, 473], "obs_": 427, "model_best_joint": 427, "2727e": 427, "7913e": 427, "2097e": 427, "assess": [427, 429, 444], "dataset_stack": [427, 435], "659": [427, 431], "590": 427, "737": [427, 534], "62": [427, 433, 451, 465, 473], "683": 427, "823": 427, "920": 427, "140": [427, 465], "451": 427, "028": [427, 449], "148": [427, 431], "409": 427, "381": [427, 458], "434": [427, 451], "77": 427, "311": [427, 508, 550], "795": 427, "602": 427, "080": 427, "491": 427, "497": 427, "169": [427, 437], "536": 427, "483": 427, "910": 427, "892": [427, 458], "092": 427, "429": 427, "689": 427, "066": 427, "420": 427, "454": 427, "081": 427, "913": 427, "darkorang": [427, 428], "flux_points_dataset": [427, 437, 448], "stacked_fit": 427, "result_stack": 427, "model_best_stack": 427, "566e": 427, "600e": 427, "000e": [427, 430, 436, 443, 447, 451, 459, 474, 533], "382e": 427, "2785e": 427, "563e": [427, 437], "7800e": 427, "1830e": 427, "329e": [427, 451], "yunit": [427, 429, 450, 451, 464, 525], "midli": 427, "hood": [428, 468, 472], "forget": [428, 438, 472], "exclusion_mask_crab": [428, 472], "427": 428, "401": 428, "64e": 428, "581": 428, "450": [428, 458], "tob": 428, "1f": 428, "hli_spectrum_analysi": 428, "model_str": 428, "600": [428, 431, 436], "6768e": 428, "6795e": 428, "676836990188792": 428, "10350021860740599": 428, "679478012854058e": 428, "678684049503813e": 428, "fit_covari": [428, 472], "02t07": [428, 459, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "488513": 428, "crab_fp": 428, "crab_fp_tabl": 428, "924": 428, "061": [428, 474], "323": [428, 430, 437, 447], "096": 428, "137": [428, 431, 438], "686": 428, "694": 428, "572": 428, "873": 428, "617": 428, "190": [428, 451], "044": 428, "669": 428, "680": [428, 458], "974": 428, "779": [428, 451], "090": 428, "233": 428, "921": 428, "509": 428, "ax_s": [428, 472], "overlai": 428, "subtract": 429, "emploi": 429, "leak": [429, 497], "remark": 429, "fed": 429, "wobbleregionsfind": 429, "5029747": 429, "1e5": [429, 464, 482, 500, 501], "n_off_posit": 429, "tell": 429, "viridi": [429, 450], "best_fit_model": 429, "fromnumer": 429, "runtimewarn": [429, 439, 466, 536], "passkwarg": 429, "213": 429, "2903e": 429, "5819e": 429, "9580e": 429, "xunit": [429, 514], "crab_magic_lp": 429, "lw": [429, 431, 437, 448, 453, 501, 505, 507], "crimson": 429, "bias": [429, 549], "dataset_simul": 429, "simulated_d": 429, "simulated_model": 429, "1359e": 429, "6341e": 429, "4271e": 429, "position_angl": 430, "model_simu": [430, 443, 447], "5e": [430, 440, 451, 458], "5000e": 430, "51544": [430, 439, 440, 443], "3600": [430, 439, 440, 456], "298": [430, 437, 451], "275": [430, 447, 451, 542], "77e": [430, 451], "1811": 430, "50e": [430, 458], "q0jbahd6": 430, "n_ob": [430, 439, 447], "dataset_fak": 430, "253": [430, 458], "272": [430, 431, 435, 451, 458], "00000000000001": 430, "19999999999999998": 430, "258": [430, 512], "99999999999999": [430, 451], "20000000000000004": 430, "308": [430, 437, 508], "284": [430, 451, 552], "91": [430, 456, 461, 501], "259": [430, 472, 474], "313": [430, 447], "302": [430, 436], "94": [430, 451, 456, 463, 472, 474], "322": 430, "277": 430, "97": [430, 451, 454, 460, 472, 473], "inject": [430, 443], "axvlin": [430, 450, 460, 461], "0036925550381217": 430, "08081469527619482": 430, "steep": 430, "find_peaks_in_flux_map": 431, "803": [431, 512], "fitsfixedwarn": [431, 512], "datfix": 431, "dateref": 431, "mjdref": [431, 456], "54682": [431, 451, 464, 474], "655283": 431, "57236": [431, 451, 464, 474], "967546": 431, "ebel": 431, "asinh": 431, "mattox": 431, "brent": 431, "ax3": [431, 437], "subplot_kw": [431, 433, 437, 448, 457, 497], "gridspec_kw": [431, 437, 445, 447, 514], "nsou": 431, "get_transform": [431, 437, 505, 506], "206": [431, 451], "41449": 431, "97054": 431, "43197": 431, "54282": 431, "171": 431, "16056": 431, "74479": 431, "143": 431, "40919": 431, "47797": 431, "15899": 431, "98049": 431, "7642": 431, "119": [431, 435, 462], "18257": 431, "52587": 431, "7947": 431, "46711": 431, "63326": 431, "3501": 431, "97596": 431, "77174": 431, "8086": 431, "193": [431, 464], "59696": 431, "69138": 431, "48068": 431, "64323": 431, "8767": 431, "15140": 431, "58926": 431, "6659": 431, "127": 431, "77351": 431, "97934": 431, "6556": 431, "251": [431, 435], "90685": 431, "05853": 431, "4732": 431, "181": 431, "17020": 431, "26173": 431, "4236": 431, "78188": 431, "98429": 431, "82739": 431, "02653": [431, 437], "0674": 431, "132": 431, "12148": 431, "23306": 431, "0447": 431, "37773": 431, "84233": 431, "sources_flux_map": 431, "62111": 431, "167e": 431, "347e": 431, "692": 431, "59451": 431, "923e": 431, "872e": 431, "723": 431, "70546": 431, "614e": 431, "740e": 431, "838": 431, "88781": 431, "765e": 431, "599e": 431, "39224": 431, "295e": [431, 451], "186e": 431, "22149": 431, "708e": 431, "925e": 431, "433": 431, "37517": 431, "357e": 431, "54892": 431, "287e": 431, "058e": 431, "611": [431, 549], "76473": 431, "129e": 431, "889e": 431, "445": 431, "28958": 431, "653e": 431, "721e": 431, "655": 431, "77218": 431, "271e": 431, "137e": 431, "98258": 431, "714e": 431, "070e": 431, "846": [431, 451, 549], "92490": 431, "774e": [431, 451], "965e": 431, "46225": 431, "609e": 431, "312e": 431, "1044": 431, "25763": 431, "586e": 431, "293e": 431, "1036": 431, "42361": 431, "442e": 431, "833e": 431, "41995": 431, "023e": 431, "699e": 431, "30287": 431, "424e": 431, "945e": 431, "resort": 432, "disc": [432, 433, 435, 440], "fov_background": [432, 472], "85625": 432, "85624": 432, "14e": [432, 450], "120000": 432, "96602": 432, "bother": 432, "1496e": 432, "7613e": 432, "3570e": 432, "9445e": 432, "renorm": [433, 495], "msh": [433, 451, 455], "plot_distribut": [433, 435], "1552": 433, "source_po": [433, 437, 455], "from_nam": [433, 437], "geom_imag": [433, 437, 501], "ring_mak": 433, "stacked_on_off": 433, "40051": 433, "39151": 433, "11e": [433, 451], "30e": [433, 454, 458], "22500": 433, "26392": 433, "88113384": 433, "49447596": 433, "lima_map": 433, "significance_map": [433, 435], "significance_map_off": 433, "yscale": [433, 540], "037": [434, 458], "programmat": 435, "config_stack": 435, "config_joint": 435, "clutter": [435, 488], "analysis_stack": 435, "121241": 435, "108043": 435, "13197": 435, "2000000": 435, "1411180": 435, "children": [435, 443, 456, 472, 473], "selectionslid": [435, 443, 456, 472, 473], "continuous_upd": [435, 443, 456, 472, 473], "sliderstyl": [435, 443, 456, 472, 473], "description_width": [435, 443, 456, 472, 473], "radiobutton": [435, 443, 456, 472, 473], "descriptionstyl": [435, 443, 456, 472, 473], "_dom_class": [435, 443, 456, 472, 473], "models_stack": 435, "print_level": [435, 443, 453, 473], "180458": 435, "4144e": 435, "6623e": 435, "3396e": 435, "8069e": 435, "2610e": 435, "3481e": 435, "handi": 435, "coolwarm": [435, 464, 465, 473], "heavier": 435, "breviti": [435, 488], "analysis_joint": 435, "pkohjbq3": 435, "hxy77jac": 435, "np4rnkao": 435, "40481": 435, "36014": 435, "68e": [435, 451], "1085000": 435, "693940": 435, "models_joint": 435, "model_joint": 435, "n_fit_bin": [435, 447, 452, 458], "4930435940405": 435, "40525": 435, "505523195905": 435, "40235": 435, "4220": 435, "480554966147": 435, "66e": [435, 452], "013": 435, "048": [435, 464], "053": 435, "748259": 435, "84e": 435, "039": [435, 436], "dc": [435, 463], "g0": [435, 464], "3fhl_data_fermi": 436, "018182745349064267": 436, "003026327991562108": 436, "054833602905273e": 436, "652368617859867": 436, "05762513693893088": 436, "03921700077803329": 436, "00521472221220211": 436, "63310241699219": 436, "019899368286133": 436, "3004625872247901": 436, "07512322002655547": 436, "82e": 436, "652": [436, 467], "020": [436, 451], "simplic": [436, 439, 446, 453, 459, 461, 464], "datasets_hess": 436, "dataset_hess": [436, 453], "1905": 436, "12518": 436, "flux_points_hawc": 436, "dataset_hawc": 436, "3dataset": 436, "crab_10gev_100tev_dataset": 436, "results_joint": 436, "12697": 436, "crab_spec": 436, "9741e": 436, "125e": 436, "0548e": 436, "2634e": 436, "707e": 436, "1321e": 436, "flux_points_fermi": 436, "flux_points_hess": 436, "tini": [437, 463], "setlevel": 437, "pos_ob": 437, "glon_pnt": [437, 463], "glat_pnt": [437, 463], "pos_target": [437, 448], "obs_col": 437, "9999912037958": 437, "299995937905366": 437, "4999833830074": 437, "3000020211954284": 437, "5000056568267741": 437, "299940468335294": 437, "axis_tru": 437, "maker_safe_mask": [437, 443, 473], "dataset_imag": [437, 452], "ts_image_estim": 437, "images_t": 437, "42400": 437, "00490": 437, "969": [437, 451], "202": 437, "85900": 437, "18386": 437, "199": [437, 458], "16303": 437, "85527": 437, "8673": 437, "79470": 437, "97749": 437, "3585": 437, "42267": 437, "08192": 437, "2695": 437, "94723": 437, "06430": 437, "07455": 437, "10409": 437, "1491": 437, "226": [437, 464], "78333": 437, "87897": 437, "0164": 437, "16511": 437, "09348": 437, "42399798": 437, "00490483": 437, "85900392": 437, "18385658": 437, "16303044": 437, "85527359": 437, "79469899": 437, "97749371": 437, "4226731": 437, "08192101": 437, "94722599": 437, "0643032": 437, "07454639": 437, "10409446": 437, "78332719": 437, "87897418": 437, "16511148": 437, "093477": 437, "on_radiu": [437, 448], "104": 437, "stacked_dataset": [437, 438], "327": 437, "328": 437, "94e": [437, 451], "2095": 437, "744": 437, "e_refe_mine_maxdndednde_errtssqrt_tsnprednpred_excessstatstat_nullcountssuccess": 437, "tevtevtev1": 437, "float64float64float64float64float64float64float64float64": 437, "float64float64float64": 437, "3750": 437, "9462": 437, "447e": [437, 451], "783e": 437, "13152": 437, "51312": 437, "350105": 437, "7752244878226383": 437, "8989213": 437, "412165": 437, "925106": 437, "0true": 437, "6992": 437, "0003": 437, "6413": 437, "835e": 437, "14150": 437, "65412": 437, "27473": 437, "0251191219844263": 437, "132472": 437, "245152": 437, "89873": 437, "2953": 437, "6417": 437, "7007": 437, "332e": 437, "138e": 437, "14121": 437, "57011": 437, "98359208475904647": 437, "4558750": 437, "624122": 437, "19354": 437, "1987": 437, "70016": 437, "353e": 437, "154e": 437, "1521": 437, "7894": 437, "66813": 437, "18842983819716610": 437, "6604475": 437, "74427": 437, "53213": 437, "97116": 437, "28429": 437, "6451": 437, "109e": 437, "938e": [437, 451], "5004": 437, "14531053887243": 437, "1979892": 437, "8999": 437, "1494": 437, "favourit": 437, "investig": 438, "exhibit": 438, "pwne": 438, "j1825": 438, "aharonian": 438, "princip": 438, "mock": 438, "firstli": [438, 439], "energydependentmorphologi": 438, "weighted_chi2_paramet": 438, "ts_to_sigma": [438, 550], "mock_dl4": 438, "dataset_energy_depend": 438, "\u03c3": 438, "table_bkg_src": 438, "src_above_bkg": 438, "998": 438, "0521842481248": 438, "277522957147003": 438, "712": 438, "873581766271": 438, "34613004113985": 438, "41405230487": 438, "56413952067279": 438, "h_0": [438, 550], "h_1": [438, 550], "energy_depend": 438, "u03c3": 438, "results_t": 438, "76": [438, 456], "sigma_err": 438, "h0": 438, "21525376976022406": 438, "005914854792576181": 438, "h1": 438, "2568720263723087": 438, "009431203058496632": 438, "19735897928723367": 438, "008164325487530225": 438, "13500566998758723": 438, "008898002182656187": 438, "56393115380234": 438, "14671140315352": 438, "690311850083152": 438, "6654036168695552": 438, "3035897658854436": 438, "641635917844372": 438, "cautious": 438, "lat_0_err": 438, "lon_0_err": 438, "model_plot": 438, "hereaft": 439, "chose": [439, 464, 465, 550, 552], "south": [439, 440], "hr": [439, 440, 443, 447], "irf_filenam": [439, 440, 454, 463], "prod5": [439, 440], "20deg": [439, 440], "averageaz": [439, 440], "14msts37sst": [439, 440], "180000": [439, 440], "inde": [439, 506], "energet": 439, "finer": [439, 452, 501], "2degx2deg": 439, "evt_sampl": 439, "spectral_model_pwl": 439, "spatial_model_point": 439, "sky_model_pntpwl": 439, "file_model": 439, "15319": 439, "primary_hdu": 439, "primaryhdu": [439, 456], "hdu_evt": 439, "hdu_gti": 439, "hdu_al": 439, "events_0001": 439, "374": [439, 441], "astropydeprecationwarn": 439, "tctypn": 439, "tcunin": 439, "2800": [439, 458, 474], "expdecay_model": [439, 536], "sake": [439, 453], "boost": 439, "pwl_decai": 439, "1523": 439, "15246": 439, "src_posit": [439, 440], "src_event": [439, 440], "trend": 439, "template_model": 439, "gll_iem_v06_gc": [439, 456, 458, 459, 464], "brighter": 439, "artifici": 439, "models_diffus": 439, "062": [439, 458, 459, 464], "irf_path": 439, "enumer": [439, 451, 458, 461], "events_": 439, "04d": 439, "inverse_cdf": 439, "673": [439, 466, 536], "__array_ufunc__": [439, 466, 536], "timeunit": 439, "timeref": 439, "631155605": 439, "631159205": 439, "000000000006": 439, "631177205": 439, "631180805": 439, "3599": 439, "999999999997": 439, "631170005": 439, "631173605": 439, "000000000002": 439, "visit": 440, "720": [440, 451], "temporal_model_map": 440, "skymap_band": [440, 543], "skymap_region": 440, "rotang": 440, "1600": 440, "ga": 441, "annuli": [441, 501], "rectangular": [441, 497, 501], "make_concentric_annulus_sky_region": 441, "counts_imag": [441, 452], "400x200": 441, "i4": 441, "350": [441, 448], "10d": 441, "350d": 441, "flux_profile_estim": 441, "0x7f1b121dc130": 441, "0x7f1b121dc880": 441, "flux_profile_fermi": 441, "profile_new": 441, "1960784313725492": 441, "5882352941176467": 441, "392156862745098": 441, "9803921568627443": 441, "7843137254901955": 441, "163": [441, 549], "3725490196078436": 441, "176470588235294": 441, "448": 441, "764705882352942": 441, "5686274509803928": 441, "15686274509804": 441, "960784313725491": 441, "354": 441, "549019607843138": 441, "3529411764705888": 441, "941176470588236": 441, "745098039215687": 441, "3333333333333344": 441, "137254901960785": 441, "725490196078432": 441, "529411764705883": 441, "458": [441, 451], "882352941176466": 441, "274509803921596": 441, "07843137254903": 441, "666666666666696": 441, "470588235294144": 441, "058823529411775": 441, "862745098039234": 441, "4509803921569": 441, "254901960784338": 441, "843137254902004": 441, "647058823529452": 441, "370": [441, 451, 458], "235294117647083": 441, "039215686274545": 441, "410": 441, "627450980392158": 441, "43137254901962": 441, "336": [441, 451], "01960784313726": 441, "82352941176471": 441, "41176470588239": 441, "215686274509824": 441, "803921568627494": 441, "607843137254942": 441, "gc_imag": 441, "mpatch": 441, "pathpatch": 441, "throught": 441, "profile_high": 441, "simu": [443, 447, 461], "7200": 443, "161250": 443, "08e": [443, 458], "58e": [443, 451], "810000": 443, "804492": 443, "169604": 443, "8353": 443, "169871": 443, "8620": 443, "562169": 443, "464": 443, "models_fit": 443, "93e": [443, 451], "189": [443, 454], "294": 443, "0039e": 443, "934e": 443, "9269e": 443, "230e": 443, "8880e": 443, "663e": 443, "0549e": 443, "723e": [443, 451], "9391e": 443, "882e": 443, "burst": 444, "grb": [444, 447], "heighten": 444, "304": [444, 446, 447, 451, 460, 474, 514], "trough": 444, "bayesian_block": 444, "compute_lightcurve_doublingtim": 444, "compute_lightcurve_fpp": 444, "compute_lightcurve_fvar": 444, "boller": 444, "tension": 444, "f_mean": 444, "f_mean_err": 444, "f_max": 444, "f_max_err": 444, "argmax": 444, "f_min": 444, "f_min_err": 444, "argmin": 444, "amplitude_maximum_vari": 444, "amplitude_maximum_signific": 444, "41584196": 444, "kovalev": 444, "relative_variability_amplitud": 444, "relative_variability_error": 444, "relative_variability_signific": 444, "613114": 444, "heidt": 444, "wagner": 444, "variability_amplitud": 444, "variability_amplitude_100": 444, "variability_amplitude_error": 444, "ddof": 444, "variability_amplitude_signific": 444, "12525306": 444, "fvar_tabl": 444, "min_energi": 444, "max_energi": 444, "5915030546513255": 444, "184989894219835": 444, "01700709977114979": 444, "082691868487906": 444, "granular": 444, "fpp_tabl": 444, "017442925431194484": 444, "2995484265169": 444, "dtime_t": 444, "halving_err": 444, "halving_coord": 444, "935826709880043": 444, "53946": 444, "00422666667": 444, "oppos": [444, 524, 548], "introductori": 444, "poissonian": [444, 448, 547], "bayesian_edg": 444, "ncp": 444, "coincid": 444, "axis_origin": 444, "0x7f1afd762670": 444, "crabnebula": 445, "conf_3d": 445, "63308": [445, 473], "01450": [445, 473], "702": [445, 451, 473], "712e": [445, 473], "lc_maker_3d": 445, "lc_3d": 445, "1193777560333226e": 445, "95421509259": 445, "97369425926": 445, "140779935183259e": 445, "53345": 445, "96198129629": 445, "98149518518": 445, "7872234642813915e": 445, "53347": 445, "913196574074": 445, "93271046296": 445, "912868843587422e": 445, "conf_1d": 445, "leakag": 445, "analysis_1d": 445, "lc_maker_1d": [445, 446, 447], "4517490659800822": 445, "53344": 445, "53346": 445, "53348": 445, "nightwise_lc": 445, "get_rebinned_axi": 446, "71693826": [446, 460, 488], "2255890": [446, 460], "29t20": 446, "n_time_bin": 446, "53945": 446, "85416667": 446, "86111111": 446, "short_observ": 446, "9999999999978": 446, "207520865": 446, "18400002": 446, "207521465": 446, "wider": [446, 457], "pks2155": 446, "lc_new": 446, "6666666666583865": 446, "overkil": 447, "suffic": 447, "filterwarn": [447, 448], "camera": [447, 454, 455], "gti_t0": 447, "8909e": 447, "lvtm": 447, "empty_i": 447, "6812310184489": 447, "6731": 447, "625657909233": 447, "76419591747674": 447, "1948": 447, "1762550692083": 447, "3947637541758": 447, "1712": 447, "2194478726876": 447, "315": [447, 451], "2227134679628": 447, "5159673047474": 447, "22271346796282": 447, "1280": 447, "8960752509613": 447, "52839183495354": 447, "693220710067": 447, "22271346796283": 447, "799389193576204": 447, "78952750835169": 447, "51096528696996": 447, "114416978060046": 447, "5829314786106": 447, "636688324856333": 447, "417943081610964": 447, "model_fit": 447, "minimis": [447, 460], "dataset_fp": 447, "dataset_lc": 447, "spectral_model1": 447, "temporal_model1": 447, "1518": 447, "58909": 447, "0030e": 447, "763e": 447, "7632e": 447, "222e": 447, "2487e": 447, "258e": 447, "spectral_model2": 447, "temporal_model2": 447, "test2": 447, "0082e": 447, "183e": 447, "8391e": 447, "365e": 447, "1876e": 447, "085e": 447, "vel": 448, "tempo2": [448, 488], "pint": [448, 488], "wstatcountsstatist": [448, 550], "id_obs_vela": 448, "obs_list_vela": 448, "101430": 448, "59300": 448, "833333333336": 448, "854166666664": 448, "52e": [448, 472], "events_vela": 448, "468": [448, 451], "33e": 448, "07e": 448, "81847286": 448, "45646095": 448, "111507416": 448, "43416595": 448, "76837444": 448, "3639946": 448, "58693695": 448, "51095676": 448, "5606985": 448, "2505703": 448, "phase_min": 448, "phase_max": 448, "bin_edg": 448, "bin_cent": 448, "values_err": 448, "yerr": 448, "on_phase_rang": 448, "off_phase_rang": 448, "mask_off": 448, "count_bkg": 448, "zone": 448, "bkg_err": 448, "redo": 448, "x_bkg": 448, "ones_lik": 448, "grei": 448, "on_patch": 448, "royalblu": 448, "ec": [448, 459, 501], "off_patch": 448, "hatch": 448, "895": 448, "region_ev": 448, "on_ev": 448, "off_ev": 448, "pulse_stat": 448, "00000000000003": 448, "211770556360534": 448, "9002269877996247": 448, "map_dataset_empti": 448, "map_dataset_mak": 448, "phase_bkg_mak": 448, "map_dataset_on_off": 448, "excess_map_estim": 448, "estimator_result": 448, "spectrum_dataset_empti": [448, 455], "spectrum_dataset_mak": [448, 455], "spectrum_dataset_on_off": 448, "wo": 448, "psr": [448, 451, 474], "emin_fit": 448, "emax_fit": 448, "joint_fit": 448, "joint_result": 448, "log10": 448, "ts_threshold_ul": [448, 486], "amplitude_ref": 448, "4e": [448, 451, 458, 533], "spec_model_tru": 448, "dash": [448, 450, 461], "indirect": [450, 476], "1012": 450, "4515": 450, "chapter": 450, "lognorm": 450, "jfactori": 450, "__subclasses__": 450, "centr": [450, 457, 476], "nfwprofil": 450, "jfact": 450, "jfact_map": 450, "sky_reg": 450, "pix_reg": 450, "sky_reg_rec": 450, "pix_reg_rec": 450, "1607": 450, "08142": 450, "67e21": 450, "total_jfact": 450, "3g": [450, 451], "36e": [450, 451], "cm5": 450, "jfact_decai": 450, "total_jfact_decai": 450, "rf": 450, "subplots_adjust": 450, "hspace": 450, "diff_flux": 450, "int_flux": 450, "thew": 451, "overplot": [451, 483], "tediou": 451, "crowd": 451, "7195": 451, "gll_psc_v20": 451, "5066": 451, "3034": 451, "catalog_4fgl": 451, "catalog_hgp": 451, "raj2000": [451, 474], "dej2000": [451, 474], "j0001": [451, 474], "0748": [451, 474], "3107": [451, 474], "8075": [451, 474], "4155": [451, 474], "9303": [451, 474], "j0002": [451, 474], "6728": [451, 474], "5283": [451, 474], "4825": [451, 474], "31067517": 451, "8075185": 451, "4848653": 451, "93026": 451, "52826166": 451, "48248": 451, "j0008": [451, 474], "2509": 451, "assoc_prob_bai": 451, "assoc_prob_lr": 451, "class1": 451, "class2": 451, "571": 451, "110": [451, 464], "915": 451, "725": 451, "semimajor": 451, "1553": [451, 474], "semiminor": 451, "2518": 451, "1963": 451, "1344": 451, "407": 451, "889": 451, "85e": 451, "48e": [451, 458, 473], "34e": [451, 458], "97e": 451, "601e": 451, "477e": 451, "086e": 451, "856e": 451, "419e": 451, "015": 451, "539e": 451, "036e": 451, "398e": 451, "498e": [451, 474], "611e": 451, "239e": 451, "810e": 451, "102e": 451, "147e": 451, "852e": 451, "306e": 451, "334e": 451, "905": 451, "227e": 451, "307e": 451, "596e": 451, "706e": 451, "305e": 451, "585": 451, "177e": 451, "940e": 451, "974e": 451, "175e": 451, "432e": 451, "30000": 451, "771e": 451, "719e": 451, "042e": 451, "087e": 451, "142e": 451, "816e": 451, "548e": 451, "286e": 451, "149e": 451, "211e": 451, "107e": 451, "299e": 451, "215e": 451, "426": 451, "j0010": 451, "0008": 451, "59976": 451, "28118133544922": 451, "40050506591797": 451, "28120079": 451, "40051035": 451, "brightest": 451, "mask_bright": 451, "7d": 451, "j0534": [451, 474], "99e": 451, "553": 451, "j0851": 451, "4620e": 451, "24e": [451, 458], "j1036": 451, "5833e": 451, "57e": 451, "691": [451, 475], "j1104": [451, 474], "3812": [451, 474], "1111": [451, 474], "j1653": 451, "27e": 451, "1219": 451, "j1824": 451, "1351e": 451, "1361": 451, "j2028": 451, "4110e": 451, "75e": [451, 473], "catalog_3fhl_bright": 451, "mask_roi": 451, "catalog_4fgl_roi": 451, "j2158": 451, "3013": 451, "26e": [451, 458], "1160": 451, "973": 451, "773": 451, "042": 451, "714": 451, "2971e": 451, "735e": 451, "0225e": 451, "2591e": 451, "317e": 451, "1610e": 451, "7733e": 451, "029e": 451, "1893e": 451, "743e": 451, "models_4fgl_roi": 451, "47e": 451, "4281": 451, "748": 451, "465": [451, 458], "j0003": [451, 474], "1928": 451, "73e": [451, 472], "1064": 451, "136": 451, "j0006": 451, "1813": 451, "578": [451, 549], "4481": 451, "651": 451, "2431": 451, "98e": 451, "344": 451, "39e": 451, "1299": 451, "717": 451, "900": 451, "j0013": 451, "3299": 451, "164": 451, "912": 451, "j0021": 451, "2221": 451, "620": 451, "662": 451, "357": [451, 474], "009": 451, "082": 451, "391": 451, "j0022": 451, "1482": 451, "670": 451, "788": 451, "907": 451, "j0025": 451, "7e": [451, 458, 459], "2399": 451, "2231": 451, "3071": 451, "533": 451, "j0031": 451, "2327": [451, 458], "1686": 451, "153": 451, "841": 451, "551": [451, 512], "756": 451, "j2357": [451, 474], "59e": [451, 458, 464], "1978": 451, "430": 451, "619": 451, "j2358": [451, 474], "60e": 451, "1980": 451, "032": 451, "074": [451, 464], "639": 451, "j2359": [451, 474], "928": 451, "2930": 451, "819": 451, "retain": [451, 501], "1804": 451, "02432": 451, "discarded_ind": 451, "component_class": 451, "discarded_t": 451, "discarded_spati": 451, "glat_err": 451, "surface_brightness_err": 451, "width_err": 451, "000000": 451, "205357": 451, "251932": 451, "064108e": 451, "269385": 451, "137990": 451, "959198": 451, "120154": 451, "058201": 451, "346488e": 451, "088742": 451, "041882": 451, "918365": 451, "095232": 451, "089881": 451, "117877e": 451, "167219": 451, "111797": 451, "877563": 451, "257642": 451, "065071": 451, "230542e": 451, "156525": 451, "056130": 451, "836731": 451, "283487": 451, "066442": 451, "336444e": 451, "205192": 451, "049676": 451, "71067811865478": 451, "00000000000004": 451, "1173775": 451, "173": 451, "20508075688775": 451, "99999999999994": 451, "332525": 451, "722557505166": 451, "9999999999998": 451, "62258": 451, "1732": 451, "0508075688763": 451, "9999999999977": 451, "84529": 451, "5477": 451, "225575051666": 451, "00000000001": 451, "62503": 451, "17320": 451, "50807568877": 451, "000000000007": 451, "068245": 451, "54772": 451, "255750516626": 451, "05227": 451, "316227": 451, "7660168382": 451, "999999": 451, "9999999995": 451, "402712": 451, "j0349": 451, "2103": 451, "65603794185": 451, "55045": 451, "301668796295": 451, "3872": 451, "9833462074166": 451, "809505": 451, "55410": 451, "57944657407": 451, "118355": 451, "55775": 451, "85722435185": 451, "6116853": 451, "56141": 451, "13500212963": 451, "432878": 451, "56506": 451, "412779907405": 451, "800932": 451, "56871": 451, "690557685186": 451, "687685": 451, "96833546296": [451, 464], "500249": 451, "57602": 451, "24611324074": 451, "146472": 451, "57967": 451, "523891018514": 451, "539397": 451, "58332": 451, "801668796295": 451, "76739": 451, "58698": 451, "07944657407": 451, "498784": 451, "59063": 451, "35722435185": 451, "3674884": 451, "59428": 451, "63500212963": 451, "8593054": 451, "59793": 451, "912779907405": 451, "248122": 451, "j1514": 451, "15h14m00": 451, "59d09m41": 451, "008": [451, 549], "007": 451, "023": 451, "024": 451, "025": [451, 464], "145": 451, "3502": 451, "2440": 451, "2414": 451, "1052": 451, "552": 451, "1825": 451, "2061": 451, "417": 451, "878": [451, 458], "579": 451, "437": [451, 458], "241": 451, "860": 451, "052": 451, "562": 451, "439e": 451, "509e": 451, "489e": 451, "654e": 451, "970e": 451, "217": 451, "788e": 451, "898e": 451, "302e": 451, "085": 451, "220e": 451, "282e": 451, "571e": 451, "991": 451, "994e": 451, "858e": 451, "588e": 451, "623": [451, 474], "474e": 451, "480e": 451, "919e": 451, "005": 451, "057": 451, "168": [451, 474], "055": 451, "5915e": [451, 473], "098903": 451, "j1513": 451, "5908": 451, "026914": 451, "094834": 451, "comp": 451, "g320": 451, "070483": 451, "b1509": 451, "026891": 451, "identified_object": 451, "2005a": 451, "435l": 451, "17a": 451, "distance_refer": 451, "199999809265137": 451, "799999952316284": 451, "599999904632568": 451, "constitut": 452, "coars": 452, "110000": [452, 455], "0x7f1afd791d90": 452, "0x7f1b101507c0": 452, "0x7f1b10150dc0": 452, "0x7f1b101502b0": 452, "dataset_cta": 452, "3046875": [452, 458], "41009347393684": 452, "6953125": 452, "68628538586": 452, "exposure_min": 452, "62842028": 452, "exposure_max": 452, "90242058e": 452, "5292": 452, "00010298": 452, "5400": 452, "counts_rat": 452, "71220672": 452, "29170324": 452, "excess_r": 452, "42050348": 452, "n_bin": 452, "08675": 452, "model_bkg": 452, "91719": 452, "424649": 452, "650": 452, "npred_sourc": 452, "mask_spac": 452, "mask_energi": [452, 457], "downsampled_energi": 452, "153600": 452, "22608": 452, "67824": 452, "44318": 452, "energy_axis_new": 452, "reg_dataset": 452, "5644": 452, "89e": 452, "fp_dataset": 452, "313714614138": 452, "324424288934": 452, "pha_": 452, "13e": 452, "63e": 452, "1530": 452, "1149": 452, "datasets_sl": 452, "emphasi": 453, "itertool": 453, "plot_contour_lin": 453, "crab_spectrum": 453, "crab_model": 453, "scipy_opt": 453, "bfg": 453, "ftol": 453, "gtol": 453, "fit_scipi": 453, "result_scipi": 453, "opt_method": 453, "sherpa_opt": 453, "maxfev": 453, "1e4": [453, 464, 465], "fit_sherpa": 453, "results_simplex": 453, "tol": 453, "minuit_opt": 453, "result_minuit": 453, "rel_reduction_of_f_": 453, "_factr": 453, "epsmch": 453, "fcn": 453, "nfcn": 453, "edm": 453, "42e": [453, 458], "err": 453, "par_000_amplitud": 453, "par_001_alpha": 453, "par_002_beta": 453, "0689": 453, "total_stat": [453, 549], "349530550405035": 453, "8122425483643125e": 453, "2264827111476982": 453, "349724940685938": 453, "8157971601581226e": 453, "34971209244579": 453, "808687936570502e": 453, "34953932636892": 453, "812951371538087e": 453, "349536723056637": 453, "8115337251905373e": 453, "35052105086856": 453, "350556388466543": 453, "34953910575007": 453, "349542158419318": 453, "35030398537787": 453, "2278975306934438": 453, "349537804239922": 453, "8122169596532167e": 453, "22662622801631419": 453, "34953807814367": 453, "22635140877790516": 453, "34953077463306": 453, "812358724314062e": 453, "22648881839710966": 453, "34953075819191": 453, "812075194992371e": 453, "349530807529028": 453, "349530725254468": 453, "34953073943366": 453, "2265163003209506": 453, "34953079334042": 453, "22646133647326874": 453, "349535814693404": 453, "8129257829574434e": 453, "349537158300407": 453, "349559366703698": 453, "8122e": 453, "1958e": 453, "2649e": 453, "_scan": 453, "25743553e": 453, "00000000e": [453, 454], "54676837e": 453, "17016482e": 453, "89492144e": 453, "31139074e": 453, "95024543e": 453, "2625818241224747": 453, "ellipsoid": 453, "nsigma": 453, "answer": [453, 488], "make_contour": 453, "npoint": 453, "cts_sigma": 453, "idx1": 453, "idx2": 453, "name1": 453, "name2": 453, "contour_": 453, "tolist": 453, "cx": 453, "contour_alpha_amplitud": 453, "cy": 453, "1e11": 453, "contour_beta_amplitud": 453, "contour_alpha_beta": 453, "tight_layout": [453, 461, 507, 511], "consum": [453, 488], "mathcal": [453, 484], "agnost": 453, "par_alpha": 453, "par_beta": 453, "speak": 453, "gaussian_sigma": 453, "isf": [453, 550], "clabel": 453, "fmt": [453, 461], "0f": [453, 464, 474], "quantity_support": [454, 505], "common_irf_head": 454, "irf_dl3_hdu_specif": 454, "make_edisp_kernel_map": 454, "make_psf_map": 454, "9391360e": 454, "6772235e": 454, "1955810e": 454, "0000000e": 454, "1976572e": 454, "3710784e": 454, "6018166e": 454, "2827988e": 454, "4933657e": 454, "9277492e": 454, "6318811e": 454, "2217412e": 454, "9053906e": 454, "7097381e": 454, "5188338e": 454, "1269263e": 454, "5835918e": 454, "0376213e": 454, "4120719e": 454, "4971704e": 454, "8613613e": 454, "7351418e": 454, "6046689e": 454, "7537086e": 454, "8954039e": 454, "6218742e": 454, "8455480e": 454, "0139252e": 454, "0631757e": 454, "4360750e": 454, "2121164e": 454, "4875723e": 454, "4225631e": 454, "2825456e": 454, "6194453e": 454, "0149044e": 454, "8893600e": 454, "7755386e": 454, "4428634e": 454, "2362506e": 454, "2068682e": 454, "3058422e": 454, "1899070e": 454, "8349780e": 454, "8943121e": 454, "1567629e": 454, "8908866e": 454, "7990194e": 454, "3380311e": 454, "3812160e": 454, "5692809e": 454, "7190994e": 454, "4834488e": 454, "9489822e": 454, "9163195e": 454, "5162628e": 454, "3302565e": 454, "1554106e": 454, "9529719e": 454, "3659253e": 454, "4420073e": 454, "4303606e": 454, "9977859e": 454, "9269494e": 454, "0322775e": 454, "9834338e": 454, "1456479e": 454, "9969731e": 454, "8570719e": 454, "8037638e": 454, "6652219e": 454, "7997221e": 454, "0902437e": 454, "7681656e": 454, "6181862e": 454, "3499075e": 454, "2443672e": 454, "7385727e": 454, "8062607e": 454, "1099306e": 454, "7395744e": 454, "1618850e": 454, "8555500e": 454, "0076540e": 454, "7876233e": 454, "5867488e": 454, "9280475e": 454, "2040469e": 454, "5892966e": 454, "5842497e": 454, "7765957e": 454, "2162670e": 454, "1264500e": 454, "0183519e": 454, "3590188e": 454, "2699878e": 454, "5607778e": 454, "5719922e": 454, "4968236e": 454, "2062580e": 454, "4819444e": 454, "9215375e": 454, "0505949e": 454, "0122385e": 454, "8475576e": 454, "5297030e": 454, "8799800e": 454, "7284447e": 454, "0520119e": 454, "4420222e": 454, "3037632e": 454, "9053655e": 454, "5194769e": 454, "5951631e": 454, "8031431e": 454, "7887840e": 454, "6253652e": 454, "2635108e": 454, "2041222e": 454, "3117988e": 454, "5779092e": 454, "0016288e": 454, "9912648e": 454, "5768262e": 454, "5230376e": 454, "9205875e": 454, "4480056e": 454, "3368855e": 454, "1926520e": 454, "8515948e": 454, "8699165e": 454, "9847406e": 454, "2104353e": 454, "4212028e": 454, "4642048e": 454, "0395135e": 454, "1510240e": 454, "4647544e": 454, "1629219e": 454, "6419578e": 454, "5427520e": 454, "3886270e": 454, "4904078e": 454, "1061971e": 454, "8834862e": 454, "8369650e": 454, "7596682e": 454, "4080942e": 454, "6554088e": 454, "3962942e": 454, "9074812e": 454, "6556248e": 454, "9023670e": 454, "7240965e": 454, "9912712e": 454, "7479085e": 454, "0375512e": 454, "0462798e": 454, "1072542e": 454, "8377268e": 454, "0739282e": 454, "9910796e": 454, "9608912e": 454, "7580410e": 454, "2058705e": 454, "5561760e": 454, "2560538e": 454, "3279955e": 454, "1768896e": 454, "5545130e": 454, "4198250e": 454, "8441040e": 454, "3812120e": 454, "5538942e": 454, "6402822e": 454, "7350380e": 454, "7123895e": 454, "2164425e": 454, "5192420e": 454, "7652512e": 454, "9816452e": 454, "8769240e": 454, "7692170e": 454, "2880470e": 454, "5438860e": 454, "0800792e": 454, "2079930e": 454, "5754970e": 454, "8475650e": 454, "2628525e": 454, "8222980e": 454, "0025508e": 454, "4225498e": 454, "9606540e": 454, "5763635e": 454, "6471115e": 454, "7471700e": 454, "1438465e": 454, "7804888e": 454, "6909290e": 454, "0354700e": 454, "0028272e": 454, "3364130e": 454, "3689322e": 454, "1486415e": 454, "0064830e": 454, "0474750e": 454, "1556008e": 454, "8290458e": 454, "0894640e": 454, "9776920e": 454, "2465055e": 454, "5345275e": 454, "1062535e": 454, "8885138e": 454, "2021345e": 454, "0907128e": 454, "6105760e": 454, "3715810e": 454, "0482342e": 454, "6259962e": 454, "3739292e": 454, "9499210e": 454, "900269": 454, "83242471": 454, "3398360": 454, "62514628": 454, "coordiant": 454, "ev": [454, 488, 524], "27093776e": 454, "12423250e": 454, "85188496e": 454, "67759236e": 454, "01235137e": 454, "05901956e": 454, "74465974e": 454, "24685677e": 454, "65357608e": 454, "ev2": 454, "80982039": 454, "28382603": 454, "pointspreadfunct": 454, "05075": 454, "08075": 454, "66984341": 454, "35569283": 454, "effectivearea3d": 454, "aeff_3d": 454, "fov_lon_axi": 454, "fov_lat_axi": 454, "aeff_ev": 454, "cax": 454, "12493874": 454, "80683246": 454, "extnam": 454, "column_nam": 454, "effarea": 454, "mandatory_keyword": 454, "hduclas2": 454, "eff_area": 454, "hduclas3": 454, "hduclasn": 454, "hduclas4": 454, "test_aeff3d": 454, "aeff_new": 454, "f8": [454, 464], "energydispersion3d": 454, "edisp_3d": 454, "20e": 454, "edisp3d": 454, "edisp_ev": 454, "61489": 454, "620398": 454, "60075": 454, "597774": 454, "617835": 454, "623397": 454, "603625": 454, "600661": 454, "69735": 454, "70437": 454, "68125": 454, "67861": 454, "test_edisp": 454, "edisp_new": 454, "x27": 454, "gt": 454, "etru": 454, "20097159": 454, "2009851": 454, "20099855": 454, "20072608": 454, "20009124": 454, "19932878": 454, "asymmetri": 454, "psf_assym": 454, "18921591": 454, "23905561": 454, "psfnd": 454, "test_psf": 454, "psf_new": 454, "make_effective_livetime_map": 455, "make_observation_time_map": 455, "0wkl0zrw": 455, "abcmeta": 455, "c56o": 455, "1866": 455, "19e": 455, "09e": [455, 464], "spill": 455, "poorli": 455, "rescal": 455, "fov_bkg_mak": [455, 495], "imperfect": 455, "local_dataset": 455, "j60ggx1b": 455, "7972": 455, "7555": 455, "04e": 455, "22e": 455, "687500": 455, "687214": 455, "global_dataset": 455, "datasets_mak": 455, "yqfqfz39": 455, "jve4knsq": 455, "yprr_2ak": 455, "8bro": 455, "viv": 455, "implicitli": 455, "exclusion_mask_2d": 455, "reflected_bkg_mak": 455, "total_obstim": 455, "effective_livetim": 455, "obs_time_src": 455, "effective_times_src": 455, "250185": 455, "316227766016838": 455, "249965667724609": 455, "1622776601683795": [455, 456, 472], "234359264373779": 455, "thorough": [456, 476], "pixilis": 456, "hypercub": [456, 500, 501], "lengthi": 456, "m_allski": 456, "m_hpx": 456, "m_gc": 456, "250": [456, 547], "quadrat": [456, 466, 474, 551], "anti": [456, 457], "21731921e": 456, "21733761e": 456, "21735587e": 456, "m_cube": 456, "m_4d": 456, "16227766": 456, "6227766": 456, "77827941": 456, "62341325": 456, "7827941": 456, "23413252": 456, "time_map_axi": 456, "map_4d": 456, "attrribut": 456, "time_map_axis_contigu": 456, "label_axi": 456, "label_axis2": 456, "778279410038923": 456, "623413251903492": 456, "78279410038923": 456, "000000000000002": 456, "234132519034915": 456, "62277660168379": 456, "transport": 456, "m_3fhl_gc": 456, "i8": [456, 474], "ver": 456, "example_cub": 456, "example_cube_fgst": 456, "primary_band": 456, "96r": 456, "7c": 456, "bitpix": 456, "naxi": 456, "naxis1": 456, "naxis2": 456, "naxis3": 456, "naxis4": 456, "crpix1": 456, "crpix2": 456, "cdelt1": 456, "cdelt2": 456, "cunit1": 456, "cunit2": 456, "ctype1": 456, "ctype2": 456, "crval1": 456, "crval2": 456, "lonpol": 456, "celesti": [456, 500, 505, 509, 552], "latpol": 456, "fiduci": 456, "axcols1": 456, "interp1": 456, "axcols2": 456, "interp2": 456, "wcsshape": 456, "bandshdu": 456, "accessor": 456, "m_sub": 456, "axis1": 456, "axis2": 456, "isnan": [456, 457], "xxx_by_coord": 456, "2e3": 456, "counts_3d": 456, "reference_map": 456, "cubic": 456, "m_iem_gc": 456, "wcs_geom_cel": 456, "m_iem_10gev": 456, "wcs_geom_3d": 456, "m_iem_interp": 456, "iem_plus_iem": 456, "iem_minus_iem": 456, "iem_times_two": 456, "is_nul": 456, "m_iem_cutout": 456, "inferno": 456, "ipywidget": 456, "78": [456, 457, 465, 473], "274": 456, "slider": 456, "lai": 457, "secur": 457, "ndmap": 457, "0x7f1b03b44190": 457, "0x7f1b03b44d30": 457, "0x7f1afb53aaf0": 457, "mask_data": 457, "Their": 457, "633083": 457, "0145": 457, "regions_ds9": 457, "inside_geom": 457, "exclusion_radiu": 457, "mask_map_catalog": 457, "significance_mask": 457, "invalid_pixel": 457, "weakli": 457, "overcom": 457, "apply_hysteresis_threshold": 457, "AND": [457, 458], "NOT": [457, 488], "symbol": 457, "significance_mask_inv": 457, "psf_r95": 457, "thaw": 458, "create_fermi_isotropic_diffuse_model": [458, 464], "cta_dataset": 458, "27727": 458, "3792": 458, "244140625": 458, "633600": 458, "diffuse_iso": [458, 464], "iso_p8r2_source_v6_v06": [458, 464], "fermi_bkg_model": 458, "diffuse_galactic_fermi": 458, "template_diffus": [458, 464], "diffuse_iem": [458, 464], "iem": [458, 464], "fit2": 458, "result2": 458, "gc_sep": 458, "models_3fhl": 458, "models_select": 458, "j1731": 458, "3003": 458, "j1732": 458, "j1741": 458, "j1744": 458, "2609": 458, "j1745": 458, "2900": 458, "3028e": 458, "j1746": 458, "2852": 458, "j1747": 458, "2959": 458, "j1748": 458, "j1753": 458, "2537": 458, "j1800": 458, "2343e": 458, "2357": 458, "j1801": 458, "j1802": 458, "3043": 458, "j1809": 458, "2332": 458, "j1811": 458, "742": 458, "949": 458, "687": 458, "596": 458, "76e": 458, "models_or": 458, "17e": 458, "012": 458, "forbidden": 458, "afmhot": [458, 474], "models_gc": 458, "datasets_read": [458, 464], "78e": 458, "25e": 458, "438": 458, "610": 458, "727": 458, "54e": 458, "419": 458, "011": 458, "165": 458, "453": 458, "528": 458, "010": 458, "43e": 458, "704": 458, "624": 458, "802": [458, 474], "995": 458, "91e": 458, "658": 458, "638": 458, "576": 458, "953": 458, "050": 458, "876": 458, "722": 458, "804": 458, "spectral_model_registri": 459, "2000e": 459, "7000e": 459, "70000000e": 459, "40822469e": 459, "70358483e": 459, "51948705e": 459, "108034597491956e": 459, "982075849517389e": 459, "64794383e": 459, "60090769e": 459, "03978226e": 459, "12794487": 459, "89595846": 459, "79432823": 459, "7116851": 459, "tabular": [459, 533], "normed_templ": 459, "model_add": [459, 516], "spatial_model_registri": 459, "flux_per_omega": 459, "13061": 459, "88470839": 459, "10172": 459, "60603928": 459, "6000000000000001": 459, "gauss_elong": 459, "region_pix": 459, "add_artist": [459, 505, 506], "fc": [459, 501], "write_ds9": 459, "gauss_temp": 459, "59240": 459, "9240e": 459, "temporal_model_registri": 459, "32465247": 459, "59233": 459, "59250": 459, "70e": 459, "meaning": 459, "model_without_nam": 459, "w8wrmpjh": 459, "customari": 459, "compulsori": 459, "model_spectrum": 459, "diffuse_cub": 459, "i8hvazc2": 459, "unambigu": 459, "thrown": 459, "models_yaml": 459, "0625": 459, "282037": 459, "models_read": 459, "pwl2": 459, "0x7f1b03327610": 459, "unique_id": 459, "source1": 459, "source2": 459, "nnnlka3z": 459, "465622": 459, "mathemat": [459, 461], "my_custom_model": 459, "1442739329466746e": 459, "regist": 459, "tradition": [459, 549], "parameter": 459, "sigma_nod": 459, "log_en": 459, "highli": 459, "span": 460, "sensibl": 460, "obs_zenith": 460, "zen_pnt": 460, "obs_muoneff": 460, "median_zenith": 460, "zen": 460, "low_zenith": 460, "high_zenith": 460, "grouped_observ": 460, "group_high_zenith": 460, "0x7f1b032be580": 460, "group_low_zenith": 460, "0x7f1b032bec40": 460, "diamond": 460, "36834038301420274": 460, "339835555384604": 460, "3237948931463171": 460, "30535345877453707": 460, "33790": 460, "09426693227142095": 460, "28755283551095173": 460, "33791": 460, "08894569035619496": 460, "27409496735322464": 460, "33792": 460, "08447355125099419": 460, "26665050077722524": 460, "33793": 460, "0811551760882139": 460, "26272868097919794": 460, "33794": 460, "07943648658692837": 460, "2639554729438709": 460, "33795": 460, "0799109224230051": 460, "26887783978974283": 460, "33796": 460, "08191603310406206": 460, "2777074437073429": 460, "33797": 460, "0855013383552432": 460, "29355238360800506": 460, "33798": 460, "0897868126630783": 460, "31186857659616535": 460, "33799": 460, "09623312838375568": 460, "33164865722698683": 460, "33800": 460, "10470702368766069": 460, "3503706026275275": 460, "33801": 460, "12276676166802643": 460, "3011061699260256": 460, "47802": 460, "09740295372903346": 460, "2861432787940619": 460, "47803": 460, "08880368117243051": 460, "27057337686547633": 460, "47804": 460, "08388624433428049": 460, "29882214027996945": 460, "47827": 460, "09610314778983592": 460, "28385358839966657": 460, "47828": 460, "08795162606984375": 460, "268663733018811": 460, "08328557573258877": 460, "3885947175689592": 460, "053212009682775": 460, "4351637481047363": 460, "363472509034498": 460, "8986348363207728": 460, "5237647004325865": 460, "2818047723094509": 460, "020420144596410953": 460, "3135914081482271": 460, "36669663417038234": 460, "7637308880733709": 460, "6577182894355391": 460, "012733796525585": 460, "873659477745188": 460, "1439110308062257": 460, "985502122122975": 460, "102877228833871": 460, "9546285068162436": 460, "9382336444241555": 460, "8241471833009617": 460, "6429005895278312": 460, "590835686434463": 460, "11291820875721864": 460, "3119611261122878": 460, "49972277488662115": 460, "10752883769757363": 460, "1613279491744304": 460, "6589622747787678": 460, "7875405607868806": 460, "8341884287660133": 460, "1397412321592923": 460, "1836544903987521": 460, "36073833513766157": 460, "3759377929871826": 460, "8815212313941426": 460, "6959369197218669": 460, "06334488877417636": 460, "09907043184188653": 460, "4373240195300975": 460, "4313847458879893": 460, "9453950989269149": 460, "7350250533013533": 460, "feature_irf": 460, "mask_1": 460, "mask_2": 460, "group_1": 460, "0x7f1afef8d340": 460, "group_2": 460, "0x7f1af8c4caf0": 460, "jointli": [460, 465], "pl_spectrum": 461, "asimov": 461, "dataset1": [461, 484], "theoret": 461, "stronger": 461, "model_prior": 461, "i_scan": 461, "dataset1_prior": 461, "results_prior": 461, "herebi": 461, "scan_prior": 461, "posteriori": 461, "truth": 461, "belief": 461, "index_scan": 461, "capsiz": 461, "darkblu": 461, "darkgreen": 461, "arb": 461, "critic": 461, "falsifi": 461, "model_weak": 461, "model_weak_prior": 461, "infin": 461, "influenc": 461, "uni_prior_stat_sum": 461, "a_scan": 461, "showcas": 461, "dataset2": [461, 484], "dataset2_prior": 461, "fit_prior": 461, "parnam": 461, "specfif": 461, "jeffrei": 461, "quar": 461, "mycustomprior": 461, "maxmimum": 461, "costom": 461, "prior_registri": 461, "costomprior": 461, "costum": 461, "model_read": 461, "0x7f1b03a6f940": 461, "2017icrc": 463, "766d": 463, "press": 463, "ran": 463, "prod3b": 463, "egal": 463, "untar": 463, "ctadata": 463, "publicli": [463, 465, 466], "southern": 463, "got": 463, "mst": 463, "664502403": 463, "0454683": 463, "63541": 463, "514854": 463, "9077294": 463, "2727693": 463, "664502405": 463, "2579999": 463, "64103": 463, "262728": 463, "3443842": 463, "2838398": 463, "664502408": 463, "8205513": 463, "20372": 463, "599625": 463, "0049409": 463, "7769775": 463, "664502409": 463, "0143764": 463, "03383": 463, "269627": 463, "32684833": 463, "496021": 463, "664502414": 463, "8090746": 463, "330505": 463, "319725": 463, "716062": 463, "8733348": 463, "air": 463, "noisi": 463, "unreli": 463, "furthermor": 463, "0x7f1aff741220": 463, "0x7f1aff76da00": 463, "0x7f1aff7585e0": 463, "0x7f1b00f2b760": 463, "km2": 463, "783587001383003": 463, "2053315944536949e": 463, "useless": 463, "elementtre": 463, "tail": [463, 548], "models_gp": 463, "source_librari": 463, "par_to_v": 463, "xf": 463, "irfs1": 463, "irfs2": 463, "south_z40_50h": 463, "roll": 464, "gtexpcube2": 464, "glast": 464, "697317": 464, "65603222222": 464, "azimuth": 464, "earth_azimuth_angl": [464, 474], "run_id": [464, 474], "recon_vers": [464, 474], "calib_vers": [464, 474], "conversion_typ": [464, 474], "difrsp0": [464, 474], "difrsp1": [464, 474], "difrsp2": [464, 474], "difrsp3": [464, 474], "difrsp4": [464, 474], "12856": 464, "5205": 464, "64438": 464, "93702": 464, "14773": 464, "04454": 464, "55275": 464, "23273": 464, "21325": 464, "002018": 464, "41866": 464, "85287": 464, "577398": 464, "42463": 464, "86676": 464, "152477": 464, "782": 464, "28905": 464, "61051": 464, "99848e": 464, "n_bad": 464, "23628": 464, "gc_po": 464, "3e4": 464, "3e5": 464, "2e6": 464, "accident": [464, 548], "watch": [464, 552], "exposure_hpx": 464, "fermi_3fhl_exposure_cube_hpx": 464, "49152": 464, "22974080e": 464, "29585273e": 464, "90605275e": 464, "tke": 464, "fermi_3fhl_psf_gc": 464, "psf_mean": 464, "1e3": [464, 490], "19646": 464, "776": 464, "041": 464, "597": 464, "fermi_model": 464, "mexico": 465, "hundr": 465, "pass4": 465, "briefli": [465, 466], "nn": 465, "plot_theta_squared_t": [465, 466], "energy_estim": 465, "classifi": 465, "fhit": 465, "data_path": 465, "crab_events_pass4": 465, "hdu_filenam": 465, "obs_filenam": 465, "103000133": 465, "unexpect": 465, "safemask_mak": 465, "safemask": 465, "45\u00ba": 465, "6h": 465, "compris": 465, "transit_map": 465, "transitsmap_crab": 465, "transit_numb": 465, "glimps": [465, 468], "excess_estim": 465, "excess_estimator_integr": 465, "excess_integr": 465, "namibia": 466, "confluenc": 466, "desi": 466, "excerpt": 466, "ra_pnt": 466, "dec_pnt": 466, "6125": 466, "771667": 466, "msh15": 466, "theta2_axi": 466, "deg2": 466, "theta2_t": 466, "temporari": 468, "whirlwind": 468, "tour": 468, "devot": 468, "tutorials_python": 468, "2485": 472, "1997": 472, "19991": 472, "5563052715230388": 472, "10317325958321796": 472, "55026401977972e": 472, "733360190578827e": 472, "619794257232": 472, "003131946268913696": 472, "024551293715163": 472, "0029490222317034775": 472, "9864771491419372": 472, "023473560586078527": 472, "202564": 472, "config_dict": 472, "2589254117941673": 472, "356263170943497e": 472, "264516271942103": 472, "9952623149688797": 472, "855887646638273e": 472, "400023002295445": 472, "4888969467051004e": 472, "7660365375951": 472, "011872336272724": 472, "15228678433255e": 472, "908700583573673": 472, "943282347242818": 472, "439306769641669e": 472, "300451666228708": 472, "rdbu": 472, "maker_fov": 473, "366": 473, "16240": 473, "6002e": 473, "3619e": 473, "2024e": 473, "3485e": 473, "gc_3fhl": 474, "closer": 474, "ordinari": 474, "32684": 474, "gc_3fhl_smooth": 474, "gc_3fhl_cutout": 474, "sgr": 474, "events_3fhl": 474, "12186": 474, "642": 474, "45935": 474, "553337": 474, "36273": 474, "25496": 474, "598": 474, "37506": 474, "395004": 474, "09607": 474, "15621": 474, "498": 474, "56973": 474, "409416": 474, "05673": 474, "12816": 474, "95883": 474, "340391": 474, "45856": 474, "18988": 474, "8568": 474, "355804": 474, "23734": 474, "11610": 474, "15518": 474, "224436": 474, "1986027": 474, "13960": 474, "44742": 474, "615316": 474, "6267247": 474, "10477": 474, "3981": 474, "96814": 474, "97003": 474, "13030": 474, "70428": 474, "632627": 474, "59348": 474, "11517": 474, "904": 474, "00894": 474, "065119": 474, "40112": 474, "387834": 474, "3779": 474, "56711": 474, "171749": 474, "20559": 474, "5538": 474, "345692": 474, "200638": 474, "27209": 474, "59344": 474, "52607": 474, "72775": 474, "13911": 474, "269": 474, "30997": 474, "239439": 474, "7684028": 474, "13226": 474, "425": 474, "16287": 474, "344238": 474, "7796942": 474, "17445": 474, "463": 474, "63342": 474, "807201": 474, "21464892": 474, "13133": 474, "42474": 474, "651058": 474, "251185": 474, "32095": 474, "705": 474, "77206": 474, "1034": 474, "18465": 474, "39728": 474, "105953": 474, "85202": 474, "14457": 474, "72217": 474, "388405": 474, "7184": 474, "32843": 474, "event_3fhl": 474, "186643": 474, "4966": 474, "621499": 474, "095707": 474, "465784": 474, "457251": 474, "36228879": 474, "75408483": 474, "09562941": 474, "6522806": 474, "05628243": 474, "44528685": 474, "10295505": 474, "1359316": 474, "85157506": 474, "08269984": 474, "71795506": 474, "26883694": 474, "82946153": 474, "89243456": 474, "89709472": 474, "75267735": 474, "57233": 474, "37455141": 474, "44802852": 474, "events_gc_3fhl": 474, "1917": 474, "85925": 474, "builtin": 474, "nupeak_ob": 474, "306196370000000": 474, "6309576500000000": 474, "4466832000000000": 474, "5248": 474, "8300": 474, "8150": 474, "079464e": 474, "j0007": 474, "7303": 474, "7647": 474, "0560": 474, "4711": 474, "9931": 474, "1920": 474, "2511884200000000": 474, "1243": 474, "6514": 474, "524807800000000": 474, "j0009": 474, "0628": 474, "663742400000000": 474, "5030": 474, "3504": 474, "5049": 474, "1412536400000000": 474, "4319": 474, "4450": 474, "3195": 474, "j2347": 474, "356": 474, "9978": 474, "5106": 474, "5760": 474, "9332549000000": 474, "j2350": 474, "3006": 474, "6354": 474, "3981075200000000": 474, "j2351": 474, "7559": 474, "8926": 474, "9890": 474, "j2352": 474, "1753": 474, "0415": 474, "8865": 474, "1737799900000000": 474, "j2356": 474, "4035": 474, "0746": 474, "5985": 474, "1310": 474, "1717": 474, "3690": 474, "2996": 474, "912525e": 474, "6205": 474, "3829": 474, "6266": 474, "4963": 474, "7760": 474, "6397": 474, "1650": 474, "818388e": 474, "8293": 474, "8256": 474, "0960": 474, "4073799600000000": 474, "signif_avg": 474, "top_five_ts_3fhl": 474, "five": 474, "mkn": [474, 547], "bll": 474, "406": 474, "801": [474, 497], "j0633": 474, "734": 474, "j1555": 474, "pg": 474, "113": 474, "411": 474, "mkn_421_3fhl": 474, "40611": 474, "6803": 474, "3331": 474, "crab_3fhl": 474, "crab_3fhl_spec": 474, "2202e": 474, "7132e": 474, "389e": 474, "2726e": 474, "ax_crab_3fhl": 474, "3848912826152664e": 474, "67457342435522e": 474, "convinc": 474, "ourself": 474, "658909145253801e": 474, "311489174710791e": 474, "359e": 474, "715": 474, "024e": 474, "087": 474, "861": 474, "660e": 474, "076": 474, "291e": 474, "aka": 474, "halo": 476, "navarro": 476, "frenk": 476, "cuspi": 476, "tabul": 476, "gmodelspatialradialprofiledmburkert": 476, "gmodelspatialradialprofiledmeinasto": 476, "gmodelspatialradialprofiledmzhao": 476, "1520": 476, "superfici": 476, "dmfitfunct": 476, "dm_exampl": 476, "gammamc_dif": 476, "sigmav": 476, "bratio": 476, "channel0": 476, "channel1": 476, "skydirfunct": 476, "8272": 476, "1762": 476, "dmsky": 476, "literatur": [476, 478, 547], "dmpipe": 476, "jeltema": 476, "profuma": 476, "darksusi": 476, "astromodel": 476, "sight": 476, "cern": 476, "dwarf": 476, "tandem": 476, "gambit": 476, "darkbit": 476, "synthesi": [478, 479], "besancon": 478, "valleespir": 478, "faucherspir": 478, "1e12": [480, 490], "cg": 480, "1e0": 480, "m_sun": 481, "1e40": 481, "snr_model": 482, "vline": [482, 505, 506], "1kpc": 482, "pred": 484, "sum_": 484, "psf_": 484, "circledast": 484, "edisp_": 484, "sum_j": 484, "t_j": 484, "_l": 484, "jl": 484, "sum_k": 484, "kl": 484, "jkl": 484, "edispersionmap": 484, "conserv": [484, 509], "strike": 484, "balanc": 484, "eventlistlat": 485, "data_storag": 485, "selected_energi": 485, "57185": 485, "selected_tim": 485, "selected_offset": 485, "selected_region": 485, "selected_id": 485, "5407363826067": 485, "5407363826070": 485, "filename_1": 485, "filename_2": 485, "hess_dl3_dr1_obs_id_023526": 485, "events_1": 485, "events_2": 485, "gti_1": 485, "gti_2": 485, "combined_ev": 485, "test_gti": 485, "test_events_with_gti": 485, "overestim": [486, 550], "lima1983": [486, 547, 550], "hessian": 486, "underestim": 486, "dataset_1": 486, "dataset_2": 486, "pha_obs23592": 486, "automatis": 487, "pronounc": 488, "pronunci": 488, "\u0261\u00e6m\u0259pa\u026a": 488, "syllabl": 488, "english": 488, "pie": 488, "listen": 488, "xaxi": 488, "s_0": 488, "s_1": 488, "glue": 488, "18392464": 488, "tip": 488, "budget": 488, "verifywarn": 488, "catch_warn": 488, "simplefilt": 488, "tqdm": 488, "pbar": 488, "show_progress_bar": 488, "progress_download": 488, "run_multiprocess": 488, "xxxx": 488, "tableau": 488, "colorblind10": 488, "seaborn": 488, "colorblind": 488, "prohibit": 488, "events_new": 488, "o2": 488, "p_": [490, 492, 493, 494], "parameteris": [490, 492], "disp": [492, 493], "redistribut": 492, "depriv": 495, "unfrozen": 495, "abdalla2018": [497, 498, 547], "ellipseannulusskyregion": [497, 501], "on_circl": 497, "on_ellipse_annulu": 497, "inner_width": [497, 501], "outer_width": [497, 501], "inner_height": [497, 501], "outer_height": [497, 501], "130": 497, "another_posit": 497, "on_rectangl": 497, "701": 497, "target_nam": 497, "crab_posit": 497, "enlarg": 498, "ring_bkg_mak": 498, "interchang": 500, "obei": 500, "axis0": 500, "deform": 501, "ellipt": [501, 507], "center_ski": 501, "fk5": [501, 512], "angular_s": 501, "geom_24_energy_bin": 501, "geom_6_energy_bin": 501, "geom_energi": 501, "purpl": 501, "perhap": 501, "region_map_2": 501, "region_map_1": 501, "gallery_python": 502, "gallery_jupyt": 502, "192110": 504, "leq": [505, 510, 511], "b_0": [505, 506], "sin": [505, 506, 507, 541], "ymin": [505, 506], "ymax": [505, 506], "edge_min": 505, "edge_max": 505, "xytext": 505, "arrowprop": 505, "arrowstyl": 505, "hline": 505, "va": 505, "633066": 505, "sigma_m": 506, "perfectli": [506, 548], "956568": 506, "r_m": 507, "reval": 507, "eta_rang": [507, 511], "meval": 507, "pixreg": 507, "set_xtick": [507, 511], "set_ytick": [507, 511], "303612": 507, "optionali": 508, "norm_0": [508, 525], "norm_1": [508, 525], "norm_2": [508, 525], "norm_3": [508, 525], "21500000000003": 508, "78499999999997": 508, "785": 508, "568087": 508, "889395": 509, "182228": 510, "rightarrow": [511, 551], "481732": 511, "extended_archive_v18": 512, "rxj1713_2016_250gev": 512, "radecsi": 512, "radesysa": 512, "wcsprm": 512, "_wc": 512, "celfix": 512, "388": 512, "762199399999986": 512, "818283": 512, "ebl_data_builtin": 514, "saldana21": 514, "ax_ebl": 514, "ax_model": 514, "franceschni": 514, "quiescent": 514, "dict_kei": 514, "81e": 514, "910282": 514, "354544": 515, "771825": 516, "097651": 517, "384832": 518, "667191": 519, "ecpl_norm": 520, "expcutoffpowerlaw": 520, "987679": 520, "335023": 521, "645482": 522, "lp_norm": 523, "1673": 523, "1679": 523, "034620": 523, "relativist": 524, "exponentialcutoffpowerlaw": 524, "1e30": 524, "cmb": 524, "fir": 524, "eemin": 524, "ic": 524, "e_cutoff": 524, "550738": 524, "norm_4": 525, "norm_5": 525, "894119": 525, "323996": 526, "scitool": 527, "source_model": 527, "law2": 527, "763027": 527, "154784": 528, "596789": 529, "936282": 530, "268213": 531, "603196": 532, "3e6": 533, "3e7": 533, "new_model": 533, "3000000": 533, "10000000": 533, "30000000": 533, "919623": 533, "constant_model": 535, "521489": 535, "59123": [536, 537, 538], "764035": 536, "gaussian_model": 537, "996356": 537, "gen_gaussian_model": 538, "generalized_gaussian_model": 538, "6666666666666666": 538, "234959": 538, "linear_model": 539, "60402": [539, 540, 541], "22655509569": 539, "462718": 539, "t_0": 540, "pl_model": 540, "226557749906": 540, "780200": 540, "sine_model": 541, "7853981633974483": 541, "2265612705": 541, "997586": 541, "phasecurve_lsi_dc": 542, "43366": 542, "phase_model": 542, "59100": [542, 543], "59200": 542, "phase_curve_model": 542, "03745318352059925": 542, "243776": 542, "59365": 543, "light_curve_model": 543, "485439": 543, "icon": 546, "arrow": 546, "apertur": 547, "acquisit": 547, "cost": 547, "bibliographi": 547, "albert2007": 547, "albert": 547, "unfold": 547, "berg": 547, "cash1979": [547, 550], "cousins2007": [547, 550], "feldman1998": [547, 550], "lafferty1994": 547, "1983": 547, "meyer2010": 547, "mohrmann2019": 547, "naurois2012": 547, "piron2001": 547, "piron": 547, "rolke2005": [547, 550], "rolk": 547, "foremost": 548, "discov": 548, "prompt": 548, "imagin": 548, "n_observ": 548, "mu_background": 548, "4f": [548, 549, 550], "usr": 548, "chmod": 548, "disadvantag": 548, "tast": 548, "highlight": 548, "01648855015875024": 548, "popular": 548, "pymotw": 548, "parser": 548, "parse_arg": 548, "yourself": [548, 549], "csh": 548, "unheard": 548, "troubl": 548, "echo": 548, "stuck": 548, "56353481": 549, "56922612": 549, "54566271": 549, "6784": 549, "faint": 549, "736": [549, 550], "034": 549, "656": 549, "substitut": 549, "m_i": 549, "t_b": 549, "m_b": 549, "mu_off": 550, "a_on": 550, "a_off": 550, "mu_x": 550, "heart": 550, "asymptot": [550, 551], "dof": 550, "sigma_to_t": 550, "sf": 550, "suspect": 550, "0033": 550, "count_statist": 550, "errn_2sigma": 550, "errp_2sigma": 550, "750": 550, "580": 550, "undefin": 551, "ever": 551, "unphys": 551, "unrel": 552, "terrestri": 552, "julian": 552, "plot_dat": 552, "10592": 552, "14610": 552, "diagram": 552, "sider": 552, "nutshel": 552, "brief": 552, "ut1": 552, "time_ref_from_dict": 552, "time_relative_to_ref": 552, "absolute_tim": 552, "colormap_milagro": 553}, "objects": {"gammapy": [[0, 0, 0, "-", "analysis"], [2, 0, 0, "-", "catalog"], [3, 0, 0, "-", "data"], [4, 0, 0, "-", "datasets"], [5, 0, 0, "-", "estimators"], [7, 0, 0, "-", "irf"], [8, 0, 0, "-", "makers"], [9, 0, 0, "-", "maps"], [10, 0, 0, "-", "modeling"], [12, 0, 0, "-", "stats"], [14, 0, 0, "-", "visualization"], [11, 6, 1, "cmdoption-gammapy-ignore-warnings", "--ignore-warnings"], [11, 6, 1, "cmdoption-gammapy-log-level", "--log-level"], [11, 6, 1, "cmdoption-gammapy-version", "--version"]], "gammapy.analysis": [[15, 1, 1, "", "Analysis"], [16, 1, 1, "", "AnalysisConfig"]], "gammapy.analysis.Analysis": [[15, 2, 1, "", "config"], [15, 3, 1, "", "get_datasets"], [15, 3, 1, "", "get_excess_map"], [15, 3, 1, "", "get_flux_points"], [15, 3, 1, "", "get_light_curve"], [15, 3, 1, "", "get_observations"], [15, 2, 1, "", "models"], [15, 3, 1, "", "read_datasets"], [15, 3, 1, "", "read_models"], [15, 3, 1, "", "run_fit"], [15, 3, 1, "", "set_models"], [15, 3, 1, "", "update_config"], [15, 3, 1, "", "write_datasets"], [15, 3, 1, "", "write_models"]], "gammapy.analysis.AnalysisConfig": [[16, 3, 1, "", "construct"], [16, 3, 1, "", "copy"], [16, 3, 1, "", "dict"], [16, 3, 1, "", "from_orm"], [16, 3, 1, "", "from_yaml"], [16, 3, 1, "", "json"], [16, 2, 1, "", "model_computed_fields"], [16, 2, 1, "", "model_config"], [16, 3, 1, "", "model_construct"], [16, 3, 1, "", "model_copy"], [16, 3, 1, "", "model_dump"], [16, 3, 1, "", "model_dump_json"], [16, 2, 1, "", "model_extra"], [16, 2, 1, "", "model_fields"], [16, 2, 1, "", "model_fields_set"], [16, 3, 1, "", "model_json_schema"], [16, 3, 1, "", "model_parametrized_name"], [16, 3, 1, "", "model_post_init"], [16, 3, 1, "", "model_rebuild"], [16, 3, 1, "", "model_validate"], [16, 3, 1, "", "model_validate_json"], [16, 3, 1, "", "model_validate_strings"], [16, 3, 1, "", "parse_file"], [16, 3, 1, "", "parse_obj"], [16, 3, 1, "", "parse_raw"], [16, 3, 1, "", "read"], [16, 3, 1, "", "schema"], [16, 3, 1, "", "schema_json"], [16, 3, 1, "", "set_logging"], [16, 3, 1, "", "to_yaml"], [16, 3, 1, "", "update"], [16, 3, 1, "", "update_forward_refs"], [16, 3, 1, "", "validate"], [16, 3, 1, "", "write"]], "gammapy.astro": [[1, 0, 0, "-", "darkmatter"], [1, 0, 0, "-", "population"], [1, 0, 0, "-", "source"]], "gammapy.astro.darkmatter": [[17, 1, 1, "", "BurkertProfile"], [18, 1, 1, "", "DMProfile"], [19, 1, 1, "", "DarkMatterAnnihilationSpectralModel"], [20, 1, 1, "", "DarkMatterDecaySpectralModel"], [21, 1, 1, "", "EinastoProfile"], [22, 1, 1, "", "IsothermalProfile"], [23, 1, 1, "", "JFactory"], [24, 1, 1, "", "MooreProfile"], [25, 1, 1, "", "NFWProfile"], [26, 1, 1, "", "PrimaryFlux"], [27, 1, 1, "", "ZhaoProfile"]], "gammapy.astro.darkmatter.BurkertProfile": [[17, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [17, 2, 1, "", "DISTANCE_GC"], [17, 2, 1, "", "LOCAL_DENSITY"], [17, 3, 1, "", "__call__"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "integral"], [17, 3, 1, "", "integrate_spectrum_separation"], [17, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.DMProfile": [[18, 2, 1, "", "DISTANCE_GC"], [18, 2, 1, "", "LOCAL_DENSITY"], [18, 3, 1, "", "__call__"], [18, 3, 1, "", "integral"], [18, 3, 1, "", "integrate_spectrum_separation"], [18, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel": [[19, 2, 1, "", "THERMAL_RELIC_CROSS_SECTION"], [19, 3, 1, "", "__call__"], [19, 3, 1, "", "copy"], [19, 2, 1, "", "covariance"], [19, 2, 1, "", "default_parameters"], [19, 3, 1, "", "energy_flux"], [19, 3, 1, "", "energy_flux_error"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "evaluate_error"], [19, 3, 1, "", "freeze"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_parameters"], [19, 2, 1, "", "frozen"], [19, 3, 1, "", "integral"], [19, 3, 1, "", "integral_error"], [19, 3, 1, "", "inverse"], [19, 3, 1, "", "inverse_all"], [19, 2, 1, "", "is_norm_spectral_model"], [19, 2, 1, "", "parameters"], [19, 2, 1, "", "pivot_energy"], [19, 3, 1, "", "plot"], [19, 3, 1, "", "plot_error"], [19, 3, 1, "", "reassign"], [19, 3, 1, "", "reference_fluxes"], [19, 2, 1, "", "scale"], [19, 3, 1, "", "spectral_index"], [19, 3, 1, "", "spectral_index_error"], [19, 2, 1, "", "tag"], [19, 3, 1, "", "to_dict"], [19, 2, 1, "", "type"], [19, 3, 1, "", "unfreeze"]], "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel": [[20, 2, 1, "", "LIFETIME_AGE_OF_UNIVERSE"], [20, 3, 1, "", "__call__"], [20, 3, 1, "", "copy"], [20, 2, 1, "", "covariance"], [20, 2, 1, "", "default_parameters"], [20, 3, 1, "", "energy_flux"], [20, 3, 1, "", "energy_flux_error"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "evaluate_error"], [20, 3, 1, "", "freeze"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_parameters"], [20, 2, 1, "", "frozen"], [20, 3, 1, "", "integral"], [20, 3, 1, "", "integral_error"], [20, 3, 1, "", "inverse"], [20, 3, 1, "", "inverse_all"], [20, 2, 1, "", "is_norm_spectral_model"], [20, 2, 1, "", "parameters"], [20, 2, 1, "", "pivot_energy"], [20, 3, 1, "", "plot"], [20, 3, 1, "", "plot_error"], [20, 3, 1, "", "reassign"], [20, 3, 1, "", "reference_fluxes"], [20, 2, 1, "", "scale"], [20, 3, 1, "", "spectral_index"], [20, 3, 1, "", "spectral_index_error"], [20, 2, 1, "", "tag"], [20, 3, 1, "", "to_dict"], [20, 2, 1, "", "type"], [20, 3, 1, "", "unfreeze"]], "gammapy.astro.darkmatter.EinastoProfile": [[21, 2, 1, "", "DEFAULT_ALPHA"], [21, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [21, 2, 1, "", "DISTANCE_GC"], [21, 2, 1, "", "LOCAL_DENSITY"], [21, 3, 1, "", "__call__"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "integral"], [21, 3, 1, "", "integrate_spectrum_separation"], [21, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.IsothermalProfile": [[22, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [22, 2, 1, "", "DISTANCE_GC"], [22, 2, 1, "", "LOCAL_DENSITY"], [22, 3, 1, "", "__call__"], [22, 3, 1, "", "evaluate"], [22, 3, 1, "", "integral"], [22, 3, 1, "", "integrate_spectrum_separation"], [22, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.JFactory": [[23, 3, 1, "", "compute_differential_jfactor"], [23, 3, 1, "", "compute_jfactor"]], "gammapy.astro.darkmatter.MooreProfile": [[24, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [24, 2, 1, "", "DISTANCE_GC"], [24, 2, 1, "", "LOCAL_DENSITY"], [24, 3, 1, "", "__call__"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "integral"], [24, 3, 1, "", "integrate_spectrum_separation"], [24, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.NFWProfile": [[25, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [25, 2, 1, "", "DISTANCE_GC"], [25, 2, 1, "", "LOCAL_DENSITY"], [25, 3, 1, "", "__call__"], [25, 3, 1, "", "evaluate"], [25, 3, 1, "", "integral"], [25, 3, 1, "", "integrate_spectrum_separation"], [25, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.darkmatter.PrimaryFlux": [[26, 3, 1, "", "__call__"], [26, 2, 1, "", "allowed_channels"], [26, 2, 1, "", "channel"], [26, 2, 1, "", "channel_registry"], [26, 3, 1, "", "copy"], [26, 2, 1, "", "covariance"], [26, 2, 1, "", "default_parameters"], [26, 3, 1, "", "energy_flux"], [26, 3, 1, "", "energy_flux_error"], [26, 3, 1, "", "evaluate"], [26, 3, 1, "", "evaluate_error"], [26, 3, 1, "", "freeze"], [26, 3, 1, "", "from_dict"], [26, 3, 1, "", "from_parameters"], [26, 2, 1, "", "frozen"], [26, 3, 1, "", "integral"], [26, 3, 1, "", "integral_error"], [26, 3, 1, "", "inverse"], [26, 3, 1, "", "inverse_all"], [26, 2, 1, "", "is_norm_spectral_model"], [26, 2, 1, "", "mDM"], [26, 2, 1, "", "map"], [26, 2, 1, "", "parameters"], [26, 2, 1, "", "pivot_energy"], [26, 3, 1, "", "plot"], [26, 3, 1, "", "plot_error"], [26, 3, 1, "", "reassign"], [26, 3, 1, "", "reference_fluxes"], [26, 3, 1, "", "spectral_index"], [26, 3, 1, "", "spectral_index_error"], [26, 2, 1, "", "table_filename"], [26, 2, 1, "", "tag"], [26, 3, 1, "", "to_dict"], [26, 2, 1, "", "type"], [26, 3, 1, "", "unfreeze"], [26, 3, 1, "", "write"]], "gammapy.astro.darkmatter.ZhaoProfile": [[27, 2, 1, "", "DEFAULT_ALPHA"], [27, 2, 1, "", "DEFAULT_BETA"], [27, 2, 1, "", "DEFAULT_GAMMA"], [27, 2, 1, "", "DEFAULT_SCALE_RADIUS"], [27, 2, 1, "", "DISTANCE_GC"], [27, 2, 1, "", "LOCAL_DENSITY"], [27, 3, 1, "", "__call__"], [27, 3, 1, "", "evaluate"], [27, 3, 1, "", "integral"], [27, 3, 1, "", "integrate_spectrum_separation"], [27, 3, 1, "", "scale_to_local_density"]], "gammapy.astro.population": [[28, 1, 1, "", "CaseBattacharya1998"], [29, 1, 1, "", "Exponential"], [30, 1, 1, "", "FaucherKaspi2006"], [31, 1, 1, "", "FaucherKaspi2006VelocityBimodal"], [32, 1, 1, "", "FaucherKaspi2006VelocityMaxwellian"], [33, 1, 1, "", "FaucherSpiral"], [34, 1, 1, "", "LogSpiral"], [35, 1, 1, "", "Lorimer2006"], [36, 1, 1, "", "Paczynski1990"], [37, 1, 1, "", "Paczynski1990Velocity"], [38, 1, 1, "", "ValleeSpiral"], [39, 1, 1, "", "YusifovKucuk2004"], [40, 1, 1, "", "YusifovKucuk2004B"], [41, 4, 1, "", "add_observed_parameters"], [42, 4, 1, "", "add_pulsar_parameters"], [43, 4, 1, "", "add_pwn_parameters"], [44, 4, 1, "", "add_snr_parameters"], [45, 4, 1, "", "make_base_catalog_galactic"], [46, 4, 1, "", "make_catalog_random_positions_cube"], [47, 4, 1, "", "make_catalog_random_positions_sphere"], [48, 5, 1, "", "radial_distributions"], [49, 5, 1, "", "velocity_distributions"]], "gammapy.astro.population.CaseBattacharya1998": [[28, 3, 1, "", "__call__"], [28, 2, 1, "", "alpha"], [28, 2, 1, "", "amplitude"], [28, 2, 1, "", "bbox_with_units"], [28, 2, 1, "", "beta"], [28, 2, 1, "", "bounding_box"], [28, 2, 1, "", "bounds"], [28, 3, 1, "", "coerce_units"], [28, 2, 1, "", "col_fit_deriv"], [28, 3, 1, "", "copy"], [28, 2, 1, "", "cov_matrix"], [28, 3, 1, "", "deepcopy"], [28, 2, 1, "", "eqcons"], [28, 3, 1, "", "evaluate"], [28, 2, 1, "", "evolved"], [28, 2, 1, "", "fit_deriv"], [28, 2, 1, "", "fittable"], [28, 2, 1, "", "fixed"], [28, 3, 1, "", "get_bounding_box"], [28, 3, 1, "", "has_inverse"], [28, 2, 1, "", "has_user_bounding_box"], [28, 2, 1, "", "has_user_inverse"], [28, 2, 1, "", "ineqcons"], [28, 3, 1, "", "input_shape"], [28, 2, 1, "", "input_units"], [28, 2, 1, "", "input_units_allow_dimensionless"], [28, 2, 1, "", "input_units_equivalencies"], [28, 2, 1, "", "input_units_strict"], [28, 2, 1, "", "inputs"], [28, 2, 1, "", "inverse"], [28, 2, 1, "", "linear"], [28, 2, 1, "", "meta"], [28, 2, 1, "", "model_constraints"], [28, 2, 1, "", "model_set_axis"], [28, 2, 1, "", "n_inputs"], [28, 2, 1, "", "n_outputs"], [28, 2, 1, "", "n_submodels"], [28, 2, 1, "", "name"], [28, 3, 1, "", "output_units"], [28, 2, 1, "", "outputs"], [28, 2, 1, "", "param_names"], [28, 2, 1, "", "param_sets"], [28, 2, 1, "", "parameter_constraints"], [28, 2, 1, "", "parameters"], [28, 3, 1, "", "prepare_inputs"], [28, 3, 1, "", "prepare_outputs"], [28, 3, 1, "", "rename"], [28, 3, 1, "", "render"], [28, 2, 1, "", "return_units"], [28, 2, 1, "", "separable"], [28, 3, 1, "", "set_slice_args"], [28, 2, 1, "", "standard_broadcasting"], [28, 2, 1, "", "stds"], [28, 3, 1, "", "strip_units_from_tree"], [28, 3, 1, "", "sum_of_implicit_terms"], [28, 2, 1, "", "sync_constraints"], [28, 2, 1, "", "tied"], [28, 2, 1, "", "uses_quantity"], [28, 3, 1, "", "with_units_from_data"], [28, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Exponential": [[29, 3, 1, "", "__call__"], [29, 2, 1, "", "amplitude"], [29, 2, 1, "", "bbox_with_units"], [29, 2, 1, "", "bounding_box"], [29, 2, 1, "", "bounds"], [29, 3, 1, "", "coerce_units"], [29, 2, 1, "", "col_fit_deriv"], [29, 3, 1, "", "copy"], [29, 2, 1, "", "cov_matrix"], [29, 3, 1, "", "deepcopy"], [29, 2, 1, "", "eqcons"], [29, 3, 1, "", "evaluate"], [29, 2, 1, "", "evolved"], [29, 2, 1, "", "fit_deriv"], [29, 2, 1, "", "fittable"], [29, 2, 1, "", "fixed"], [29, 3, 1, "", "get_bounding_box"], [29, 3, 1, "", "has_inverse"], [29, 2, 1, "", "has_user_bounding_box"], [29, 2, 1, "", "has_user_inverse"], [29, 2, 1, "", "ineqcons"], [29, 3, 1, "", "input_shape"], [29, 2, 1, "", "input_units"], [29, 2, 1, "", "input_units_allow_dimensionless"], [29, 2, 1, "", "input_units_equivalencies"], [29, 2, 1, "", "input_units_strict"], [29, 2, 1, "", "inputs"], [29, 2, 1, "", "inverse"], [29, 2, 1, "", "linear"], [29, 2, 1, "", "meta"], [29, 2, 1, "", "model_constraints"], [29, 2, 1, "", "model_set_axis"], [29, 2, 1, "", "n_inputs"], [29, 2, 1, "", "n_outputs"], [29, 2, 1, "", "n_submodels"], [29, 2, 1, "", "name"], [29, 3, 1, "", "output_units"], [29, 2, 1, "", "outputs"], [29, 2, 1, "", "param_names"], [29, 2, 1, "", "param_sets"], [29, 2, 1, "", "parameter_constraints"], [29, 2, 1, "", "parameters"], [29, 3, 1, "", "prepare_inputs"], [29, 3, 1, "", "prepare_outputs"], [29, 3, 1, "", "rename"], [29, 3, 1, "", "render"], [29, 2, 1, "", "return_units"], [29, 2, 1, "", "separable"], [29, 3, 1, "", "set_slice_args"], [29, 2, 1, "", "standard_broadcasting"], [29, 2, 1, "", "stds"], [29, 3, 1, "", "strip_units_from_tree"], [29, 3, 1, "", "sum_of_implicit_terms"], [29, 2, 1, "", "sync_constraints"], [29, 2, 1, "", "tied"], [29, 2, 1, "", "uses_quantity"], [29, 3, 1, "", "with_units_from_data"], [29, 3, 1, "", "without_units_for_data"], [29, 2, 1, "", "z_0"]], "gammapy.astro.population.FaucherKaspi2006": [[30, 3, 1, "", "__call__"], [30, 2, 1, "", "amplitude"], [30, 2, 1, "", "bbox_with_units"], [30, 2, 1, "", "bounding_box"], [30, 2, 1, "", "bounds"], [30, 3, 1, "", "coerce_units"], [30, 2, 1, "", "col_fit_deriv"], [30, 3, 1, "", "copy"], [30, 2, 1, "", "cov_matrix"], [30, 3, 1, "", "deepcopy"], [30, 2, 1, "", "eqcons"], [30, 3, 1, "", "evaluate"], [30, 2, 1, "", "evolved"], [30, 2, 1, "", "fit_deriv"], [30, 2, 1, "", "fittable"], [30, 2, 1, "", "fixed"], [30, 3, 1, "", "get_bounding_box"], [30, 3, 1, "", "has_inverse"], [30, 2, 1, "", "has_user_bounding_box"], [30, 2, 1, "", "has_user_inverse"], [30, 2, 1, "", "ineqcons"], [30, 3, 1, "", "input_shape"], [30, 2, 1, "", "input_units"], [30, 2, 1, "", "input_units_allow_dimensionless"], [30, 2, 1, "", "input_units_equivalencies"], [30, 2, 1, "", "input_units_strict"], [30, 2, 1, "", "inputs"], [30, 2, 1, "", "inverse"], [30, 2, 1, "", "linear"], [30, 2, 1, "", "meta"], [30, 2, 1, "", "model_constraints"], [30, 2, 1, "", "model_set_axis"], [30, 2, 1, "", "n_inputs"], [30, 2, 1, "", "n_outputs"], [30, 2, 1, "", "n_submodels"], [30, 2, 1, "", "name"], [30, 3, 1, "", "output_units"], [30, 2, 1, "", "outputs"], [30, 2, 1, "", "param_names"], [30, 2, 1, "", "param_sets"], [30, 2, 1, "", "parameter_constraints"], [30, 2, 1, "", "parameters"], [30, 3, 1, "", "prepare_inputs"], [30, 3, 1, "", "prepare_outputs"], [30, 2, 1, "", "r_0"], [30, 3, 1, "", "rename"], [30, 3, 1, "", "render"], [30, 2, 1, "", "return_units"], [30, 2, 1, "", "separable"], [30, 3, 1, "", "set_slice_args"], [30, 2, 1, "", "sigma"], [30, 2, 1, "", "standard_broadcasting"], [30, 2, 1, "", "stds"], [30, 3, 1, "", "strip_units_from_tree"], [30, 3, 1, "", "sum_of_implicit_terms"], [30, 2, 1, "", "sync_constraints"], [30, 2, 1, "", "tied"], [30, 2, 1, "", "uses_quantity"], [30, 3, 1, "", "with_units_from_data"], [30, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherKaspi2006VelocityBimodal": [[31, 3, 1, "", "__call__"], [31, 2, 1, "", "amplitude"], [31, 2, 1, "", "bbox_with_units"], [31, 2, 1, "", "bounding_box"], [31, 2, 1, "", "bounds"], [31, 3, 1, "", "coerce_units"], [31, 2, 1, "", "col_fit_deriv"], [31, 3, 1, "", "copy"], [31, 2, 1, "", "cov_matrix"], [31, 3, 1, "", "deepcopy"], [31, 2, 1, "", "eqcons"], [31, 3, 1, "", "evaluate"], [31, 2, 1, "", "fit_deriv"], [31, 2, 1, "", "fittable"], [31, 2, 1, "", "fixed"], [31, 3, 1, "", "get_bounding_box"], [31, 3, 1, "", "has_inverse"], [31, 2, 1, "", "has_user_bounding_box"], [31, 2, 1, "", "has_user_inverse"], [31, 2, 1, "", "ineqcons"], [31, 3, 1, "", "input_shape"], [31, 2, 1, "", "input_units"], [31, 2, 1, "", "input_units_allow_dimensionless"], [31, 2, 1, "", "input_units_equivalencies"], [31, 2, 1, "", "input_units_strict"], [31, 2, 1, "", "inputs"], [31, 2, 1, "", "inverse"], [31, 2, 1, "", "linear"], [31, 2, 1, "", "meta"], [31, 2, 1, "", "model_constraints"], [31, 2, 1, "", "model_set_axis"], [31, 2, 1, "", "n_inputs"], [31, 2, 1, "", "n_outputs"], [31, 2, 1, "", "n_submodels"], [31, 2, 1, "", "name"], [31, 3, 1, "", "output_units"], [31, 2, 1, "", "outputs"], [31, 2, 1, "", "param_names"], [31, 2, 1, "", "param_sets"], [31, 2, 1, "", "parameter_constraints"], [31, 2, 1, "", "parameters"], [31, 3, 1, "", "prepare_inputs"], [31, 3, 1, "", "prepare_outputs"], [31, 3, 1, "", "rename"], [31, 3, 1, "", "render"], [31, 2, 1, "", "return_units"], [31, 2, 1, "", "separable"], [31, 3, 1, "", "set_slice_args"], [31, 2, 1, "", "sigma_1"], [31, 2, 1, "", "sigma_2"], [31, 2, 1, "", "standard_broadcasting"], [31, 2, 1, "", "stds"], [31, 3, 1, "", "strip_units_from_tree"], [31, 3, 1, "", "sum_of_implicit_terms"], [31, 2, 1, "", "sync_constraints"], [31, 2, 1, "", "tied"], [31, 2, 1, "", "uses_quantity"], [31, 2, 1, "", "w"], [31, 3, 1, "", "with_units_from_data"], [31, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian": [[32, 3, 1, "", "__call__"], [32, 2, 1, "", "amplitude"], [32, 2, 1, "", "bbox_with_units"], [32, 2, 1, "", "bounding_box"], [32, 2, 1, "", "bounds"], [32, 3, 1, "", "coerce_units"], [32, 2, 1, "", "col_fit_deriv"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "cov_matrix"], [32, 3, 1, "", "deepcopy"], [32, 2, 1, "", "eqcons"], [32, 3, 1, "", "evaluate"], [32, 2, 1, "", "fit_deriv"], [32, 2, 1, "", "fittable"], [32, 2, 1, "", "fixed"], [32, 3, 1, "", "get_bounding_box"], [32, 3, 1, "", "has_inverse"], [32, 2, 1, "", "has_user_bounding_box"], [32, 2, 1, "", "has_user_inverse"], [32, 2, 1, "", "ineqcons"], [32, 3, 1, "", "input_shape"], [32, 2, 1, "", "input_units"], [32, 2, 1, "", "input_units_allow_dimensionless"], [32, 2, 1, "", "input_units_equivalencies"], [32, 2, 1, "", "input_units_strict"], [32, 2, 1, "", "inputs"], [32, 2, 1, "", "inverse"], [32, 2, 1, "", "linear"], [32, 2, 1, "", "meta"], [32, 2, 1, "", "model_constraints"], [32, 2, 1, "", "model_set_axis"], [32, 2, 1, "", "n_inputs"], [32, 2, 1, "", "n_outputs"], [32, 2, 1, "", "n_submodels"], [32, 2, 1, "", "name"], [32, 3, 1, "", "output_units"], [32, 2, 1, "", "outputs"], [32, 2, 1, "", "param_names"], [32, 2, 1, "", "param_sets"], [32, 2, 1, "", "parameter_constraints"], [32, 2, 1, "", "parameters"], [32, 3, 1, "", "prepare_inputs"], [32, 3, 1, "", "prepare_outputs"], [32, 3, 1, "", "rename"], [32, 3, 1, "", "render"], [32, 2, 1, "", "return_units"], [32, 2, 1, "", "separable"], [32, 3, 1, "", "set_slice_args"], [32, 2, 1, "", "sigma"], [32, 2, 1, "", "standard_broadcasting"], [32, 2, 1, "", "stds"], [32, 3, 1, "", "strip_units_from_tree"], [32, 3, 1, "", "sum_of_implicit_terms"], [32, 2, 1, "", "sync_constraints"], [32, 2, 1, "", "tied"], [32, 2, 1, "", "uses_quantity"], [32, 3, 1, "", "with_units_from_data"], [32, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.FaucherSpiral": [[33, 3, 1, "", "__call__"], [33, 2, 1, "", "k"], [33, 2, 1, "", "r_0"], [33, 3, 1, "", "radius"], [33, 2, 1, "", "spiralarms"], [33, 3, 1, "", "theta"], [33, 2, 1, "", "theta_0"], [33, 3, 1, "", "xy_position"]], "gammapy.astro.population.LogSpiral": [[34, 3, 1, "", "radius"], [34, 3, 1, "", "theta"], [34, 3, 1, "", "xy_position"]], "gammapy.astro.population.Lorimer2006": [[35, 2, 1, "", "B"], [35, 2, 1, "", "C"], [35, 3, 1, "", "__call__"], [35, 2, 1, "", "amplitude"], [35, 2, 1, "", "bbox_with_units"], [35, 2, 1, "", "bounding_box"], [35, 2, 1, "", "bounds"], [35, 3, 1, "", "coerce_units"], [35, 2, 1, "", "col_fit_deriv"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "cov_matrix"], [35, 3, 1, "", "deepcopy"], [35, 2, 1, "", "eqcons"], [35, 3, 1, "", "evaluate"], [35, 2, 1, "", "evolved"], [35, 2, 1, "", "fit_deriv"], [35, 2, 1, "", "fittable"], [35, 2, 1, "", "fixed"], [35, 3, 1, "", "get_bounding_box"], [35, 3, 1, "", "has_inverse"], [35, 2, 1, "", "has_user_bounding_box"], [35, 2, 1, "", "has_user_inverse"], [35, 2, 1, "", "ineqcons"], [35, 3, 1, "", "input_shape"], [35, 2, 1, "", "input_units"], [35, 2, 1, "", "input_units_allow_dimensionless"], [35, 2, 1, "", "input_units_equivalencies"], [35, 2, 1, "", "input_units_strict"], [35, 2, 1, "", "inputs"], [35, 2, 1, "", "inverse"], [35, 2, 1, "", "linear"], [35, 2, 1, "", "meta"], [35, 2, 1, "", "model_constraints"], [35, 2, 1, "", "model_set_axis"], [35, 2, 1, "", "n_inputs"], [35, 2, 1, "", "n_outputs"], [35, 2, 1, "", "n_submodels"], [35, 2, 1, "", "name"], [35, 3, 1, "", "output_units"], [35, 2, 1, "", "outputs"], [35, 2, 1, "", "param_names"], [35, 2, 1, "", "param_sets"], [35, 2, 1, "", "parameter_constraints"], [35, 2, 1, "", "parameters"], [35, 3, 1, "", "prepare_inputs"], [35, 3, 1, "", "prepare_outputs"], [35, 3, 1, "", "rename"], [35, 3, 1, "", "render"], [35, 2, 1, "", "return_units"], [35, 2, 1, "", "separable"], [35, 3, 1, "", "set_slice_args"], [35, 2, 1, "", "standard_broadcasting"], [35, 2, 1, "", "stds"], [35, 3, 1, "", "strip_units_from_tree"], [35, 3, 1, "", "sum_of_implicit_terms"], [35, 2, 1, "", "sync_constraints"], [35, 2, 1, "", "tied"], [35, 2, 1, "", "uses_quantity"], [35, 3, 1, "", "with_units_from_data"], [35, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Paczynski1990": [[36, 3, 1, "", "__call__"], [36, 2, 1, "", "amplitude"], [36, 2, 1, "", "bbox_with_units"], [36, 2, 1, "", "bounding_box"], [36, 2, 1, "", "bounds"], [36, 3, 1, "", "coerce_units"], [36, 2, 1, "", "col_fit_deriv"], [36, 3, 1, "", "copy"], [36, 2, 1, "", "cov_matrix"], [36, 3, 1, "", "deepcopy"], [36, 2, 1, "", "eqcons"], [36, 3, 1, "", "evaluate"], [36, 2, 1, "", "evolved"], [36, 2, 1, "", "fit_deriv"], [36, 2, 1, "", "fittable"], [36, 2, 1, "", "fixed"], [36, 3, 1, "", "get_bounding_box"], [36, 3, 1, "", "has_inverse"], [36, 2, 1, "", "has_user_bounding_box"], [36, 2, 1, "", "has_user_inverse"], [36, 2, 1, "", "ineqcons"], [36, 3, 1, "", "input_shape"], [36, 2, 1, "", "input_units"], [36, 2, 1, "", "input_units_allow_dimensionless"], [36, 2, 1, "", "input_units_equivalencies"], [36, 2, 1, "", "input_units_strict"], [36, 2, 1, "", "inputs"], [36, 2, 1, "", "inverse"], [36, 2, 1, "", "linear"], [36, 2, 1, "", "meta"], [36, 2, 1, "", "model_constraints"], [36, 2, 1, "", "model_set_axis"], [36, 2, 1, "", "n_inputs"], [36, 2, 1, "", "n_outputs"], [36, 2, 1, "", "n_submodels"], [36, 2, 1, "", "name"], [36, 3, 1, "", "output_units"], [36, 2, 1, "", "outputs"], [36, 2, 1, "", "param_names"], [36, 2, 1, "", "param_sets"], [36, 2, 1, "", "parameter_constraints"], [36, 2, 1, "", "parameters"], [36, 3, 1, "", "prepare_inputs"], [36, 3, 1, "", "prepare_outputs"], [36, 2, 1, "", "r_exp"], [36, 3, 1, "", "rename"], [36, 3, 1, "", "render"], [36, 2, 1, "", "return_units"], [36, 2, 1, "", "separable"], [36, 3, 1, "", "set_slice_args"], [36, 2, 1, "", "standard_broadcasting"], [36, 2, 1, "", "stds"], [36, 3, 1, "", "strip_units_from_tree"], [36, 3, 1, "", "sum_of_implicit_terms"], [36, 2, 1, "", "sync_constraints"], [36, 2, 1, "", "tied"], [36, 2, 1, "", "uses_quantity"], [36, 3, 1, "", "with_units_from_data"], [36, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.Paczynski1990Velocity": [[37, 3, 1, "", "__call__"], [37, 2, 1, "", "amplitude"], [37, 2, 1, "", "bbox_with_units"], [37, 2, 1, "", "bounding_box"], [37, 2, 1, "", "bounds"], [37, 3, 1, "", "coerce_units"], [37, 2, 1, "", "col_fit_deriv"], [37, 3, 1, "", "copy"], [37, 2, 1, "", "cov_matrix"], [37, 3, 1, "", "deepcopy"], [37, 2, 1, "", "eqcons"], [37, 3, 1, "", "evaluate"], [37, 2, 1, "", "fit_deriv"], [37, 2, 1, "", "fittable"], [37, 2, 1, "", "fixed"], [37, 3, 1, "", "get_bounding_box"], [37, 3, 1, "", "has_inverse"], [37, 2, 1, "", "has_user_bounding_box"], [37, 2, 1, "", "has_user_inverse"], [37, 2, 1, "", "ineqcons"], [37, 3, 1, "", "input_shape"], [37, 2, 1, "", "input_units"], [37, 2, 1, "", "input_units_allow_dimensionless"], [37, 2, 1, "", "input_units_equivalencies"], [37, 2, 1, "", "input_units_strict"], [37, 2, 1, "", "inputs"], [37, 2, 1, "", "inverse"], [37, 2, 1, "", "linear"], [37, 2, 1, "", "meta"], [37, 2, 1, "", "model_constraints"], [37, 2, 1, "", "model_set_axis"], [37, 2, 1, "", "n_inputs"], [37, 2, 1, "", "n_outputs"], [37, 2, 1, "", "n_submodels"], [37, 2, 1, "", "name"], [37, 3, 1, "", "output_units"], [37, 2, 1, "", "outputs"], [37, 2, 1, "", "param_names"], [37, 2, 1, "", "param_sets"], [37, 2, 1, "", "parameter_constraints"], [37, 2, 1, "", "parameters"], [37, 3, 1, "", "prepare_inputs"], [37, 3, 1, "", "prepare_outputs"], [37, 3, 1, "", "rename"], [37, 3, 1, "", "render"], [37, 2, 1, "", "return_units"], [37, 2, 1, "", "separable"], [37, 3, 1, "", "set_slice_args"], [37, 2, 1, "", "standard_broadcasting"], [37, 2, 1, "", "stds"], [37, 3, 1, "", "strip_units_from_tree"], [37, 3, 1, "", "sum_of_implicit_terms"], [37, 2, 1, "", "sync_constraints"], [37, 2, 1, "", "tied"], [37, 2, 1, "", "uses_quantity"], [37, 2, 1, "", "v_0"], [37, 3, 1, "", "with_units_from_data"], [37, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.ValleeSpiral": [[38, 2, 1, "", "bar_radius"], [38, 2, 1, "", "m"], [38, 2, 1, "", "p"], [38, 2, 1, "", "r_0"], [38, 2, 1, "", "r_sun"], [38, 3, 1, "", "radius"], [38, 2, 1, "", "spiralarms"], [38, 3, 1, "", "theta"], [38, 2, 1, "", "theta_0"], [38, 3, 1, "", "xy_position"]], "gammapy.astro.population.YusifovKucuk2004": [[39, 3, 1, "", "__call__"], [39, 2, 1, "", "a"], [39, 2, 1, "", "amplitude"], [39, 2, 1, "", "b"], [39, 2, 1, "", "bbox_with_units"], [39, 2, 1, "", "bounding_box"], [39, 2, 1, "", "bounds"], [39, 3, 1, "", "coerce_units"], [39, 2, 1, "", "col_fit_deriv"], [39, 3, 1, "", "copy"], [39, 2, 1, "", "cov_matrix"], [39, 3, 1, "", "deepcopy"], [39, 2, 1, "", "eqcons"], [39, 3, 1, "", "evaluate"], [39, 2, 1, "", "evolved"], [39, 2, 1, "", "fit_deriv"], [39, 2, 1, "", "fittable"], [39, 2, 1, "", "fixed"], [39, 3, 1, "", "get_bounding_box"], [39, 3, 1, "", "has_inverse"], [39, 2, 1, "", "has_user_bounding_box"], [39, 2, 1, "", "has_user_inverse"], [39, 2, 1, "", "ineqcons"], [39, 3, 1, "", "input_shape"], [39, 2, 1, "", "input_units"], [39, 2, 1, "", "input_units_allow_dimensionless"], [39, 2, 1, "", "input_units_equivalencies"], [39, 2, 1, "", "input_units_strict"], [39, 2, 1, "", "inputs"], [39, 2, 1, "", "inverse"], [39, 2, 1, "", "linear"], [39, 2, 1, "", "meta"], [39, 2, 1, "", "model_constraints"], [39, 2, 1, "", "model_set_axis"], [39, 2, 1, "", "n_inputs"], [39, 2, 1, "", "n_outputs"], [39, 2, 1, "", "n_submodels"], [39, 2, 1, "", "name"], [39, 3, 1, "", "output_units"], [39, 2, 1, "", "outputs"], [39, 2, 1, "", "param_names"], [39, 2, 1, "", "param_sets"], [39, 2, 1, "", "parameter_constraints"], [39, 2, 1, "", "parameters"], [39, 3, 1, "", "prepare_inputs"], [39, 3, 1, "", "prepare_outputs"], [39, 2, 1, "", "r_1"], [39, 3, 1, "", "rename"], [39, 3, 1, "", "render"], [39, 2, 1, "", "return_units"], [39, 2, 1, "", "separable"], [39, 3, 1, "", "set_slice_args"], [39, 2, 1, "", "standard_broadcasting"], [39, 2, 1, "", "stds"], [39, 3, 1, "", "strip_units_from_tree"], [39, 3, 1, "", "sum_of_implicit_terms"], [39, 2, 1, "", "sync_constraints"], [39, 2, 1, "", "tied"], [39, 2, 1, "", "uses_quantity"], [39, 3, 1, "", "with_units_from_data"], [39, 3, 1, "", "without_units_for_data"]], "gammapy.astro.population.YusifovKucuk2004B": [[40, 3, 1, "", "__call__"], [40, 2, 1, "", "a"], [40, 2, 1, "", "amplitude"], [40, 2, 1, "", "b"], [40, 2, 1, "", "bbox_with_units"], [40, 2, 1, "", "bounding_box"], [40, 2, 1, "", "bounds"], [40, 3, 1, "", "coerce_units"], [40, 2, 1, "", "col_fit_deriv"], [40, 3, 1, "", "copy"], [40, 2, 1, "", "cov_matrix"], [40, 3, 1, "", "deepcopy"], [40, 2, 1, "", "eqcons"], [40, 3, 1, "", "evaluate"], [40, 2, 1, "", "evolved"], [40, 2, 1, "", "fit_deriv"], [40, 2, 1, "", "fittable"], [40, 2, 1, "", "fixed"], [40, 3, 1, "", "get_bounding_box"], [40, 3, 1, "", "has_inverse"], [40, 2, 1, "", "has_user_bounding_box"], [40, 2, 1, "", "has_user_inverse"], [40, 2, 1, "", "ineqcons"], [40, 3, 1, "", "input_shape"], [40, 2, 1, "", "input_units"], [40, 2, 1, "", "input_units_allow_dimensionless"], [40, 2, 1, "", "input_units_equivalencies"], [40, 2, 1, "", "input_units_strict"], [40, 2, 1, "", "inputs"], [40, 2, 1, "", "inverse"], [40, 2, 1, "", "linear"], [40, 2, 1, "", "meta"], [40, 2, 1, "", "model_constraints"], [40, 2, 1, "", "model_set_axis"], [40, 2, 1, "", "n_inputs"], [40, 2, 1, "", "n_outputs"], [40, 2, 1, "", "n_submodels"], [40, 2, 1, "", "name"], [40, 3, 1, "", "output_units"], [40, 2, 1, "", "outputs"], [40, 2, 1, "", "param_names"], [40, 2, 1, "", "param_sets"], [40, 2, 1, "", "parameter_constraints"], [40, 2, 1, "", "parameters"], [40, 3, 1, "", "prepare_inputs"], [40, 3, 1, "", "prepare_outputs"], [40, 3, 1, "", "rename"], [40, 3, 1, "", "render"], [40, 2, 1, "", "return_units"], [40, 2, 1, "", "separable"], [40, 3, 1, "", "set_slice_args"], [40, 2, 1, "", "standard_broadcasting"], [40, 2, 1, "", "stds"], [40, 3, 1, "", "strip_units_from_tree"], [40, 3, 1, "", "sum_of_implicit_terms"], [40, 2, 1, "", "sync_constraints"], [40, 2, 1, "", "tied"], [40, 2, 1, "", "uses_quantity"], [40, 3, 1, "", "with_units_from_data"], [40, 3, 1, "", "without_units_for_data"]], "gammapy.astro.source": [[50, 1, 1, "", "PWN"], [51, 1, 1, "", "Pulsar"], [52, 1, 1, "", "SNR"], [53, 1, 1, "", "SNRTrueloveMcKee"], [54, 1, 1, "", "SimplePulsar"]], "gammapy.astro.source.PWN": [[50, 3, 1, "", "magnetic_field"], [50, 3, 1, "", "radius"]], "gammapy.astro.source.Pulsar": [[51, 3, 1, "", "energy_integrated"], [51, 3, 1, "", "luminosity_spindown"], [51, 3, 1, "", "magnetic_field"], [51, 3, 1, "", "period"], [51, 3, 1, "", "period_dot"], [51, 3, 1, "", "tau"]], "gammapy.astro.source.SNR": [[52, 3, 1, "", "luminosity_tev"], [52, 3, 1, "", "radius"], [52, 3, 1, "", "radius_inner"], [52, 2, 1, "", "sedov_taylor_begin"], [52, 2, 1, "", "sedov_taylor_end"]], "gammapy.astro.source.SNRTrueloveMcKee": [[53, 3, 1, "", "luminosity_tev"], [53, 3, 1, "", "radius"], [53, 3, 1, "", "radius_inner"], [53, 3, 1, "", "radius_reverse_shock"], [53, 2, 1, "", "sedov_taylor_begin"], [53, 2, 1, "", "sedov_taylor_end"]], "gammapy.astro.source.SimplePulsar": [[54, 2, 1, "", "luminosity_spindown"], [54, 2, 1, "", "magnetic_field"], [54, 2, 1, "", "tau"]], "gammapy.catalog": [[55, 5, 1, "", "CATALOG_REGISTRY"], [56, 1, 1, "", "SourceCatalog"], [57, 1, 1, "", "SourceCatalog1LHAASO"], [58, 1, 1, "", "SourceCatalog2FHL"], [59, 1, 1, "", "SourceCatalog2HWC"], [60, 1, 1, "", "SourceCatalog3FGL"], [61, 1, 1, "", "SourceCatalog3FHL"], [62, 1, 1, "", "SourceCatalog3HWC"], [63, 1, 1, "", "SourceCatalog4FGL"], [64, 1, 1, "", "SourceCatalogGammaCat"], [65, 1, 1, "", "SourceCatalogHGPS"], [66, 1, 1, "", "SourceCatalogLargeScaleHGPS"], [67, 1, 1, "", "SourceCatalogObject"], [68, 1, 1, "", "SourceCatalogObject1LHAASO"], [69, 1, 1, "", "SourceCatalogObject2FHL"], [70, 1, 1, "", "SourceCatalogObject2HWC"], [71, 1, 1, "", "SourceCatalogObject3FGL"], [72, 1, 1, "", "SourceCatalogObject3FHL"], [73, 1, 1, "", "SourceCatalogObject3HWC"], [74, 1, 1, "", "SourceCatalogObject4FGL"], [75, 1, 1, "", "SourceCatalogObjectGammaCat"], [76, 1, 1, "", "SourceCatalogObjectHGPS"], [77, 1, 1, "", "SourceCatalogObjectHGPSComponent"]], "gammapy.catalog.SourceCatalog": [[56, 3, 1, "", "description"], [56, 2, 1, "", "positions"], [56, 3, 1, "", "row_index"], [56, 3, 1, "", "source_name"], [56, 2, 1, "", "tag"], [56, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog1LHAASO": [[57, 2, 1, "", "description"], [57, 2, 1, "", "positions"], [57, 3, 1, "", "row_index"], [57, 3, 1, "", "source_name"], [57, 2, 1, "", "tag"], [57, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog2FHL": [[58, 2, 1, "", "description"], [58, 2, 1, "", "positions"], [58, 3, 1, "", "row_index"], [58, 3, 1, "", "source_name"], [58, 2, 1, "", "tag"], [58, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog2HWC": [[59, 2, 1, "", "description"], [59, 2, 1, "", "positions"], [59, 3, 1, "", "row_index"], [59, 3, 1, "", "source_name"], [59, 2, 1, "", "tag"], [59, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3FGL": [[60, 2, 1, "", "description"], [60, 2, 1, "", "positions"], [60, 3, 1, "", "row_index"], [60, 3, 1, "", "source_name"], [60, 2, 1, "", "tag"], [60, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3FHL": [[61, 2, 1, "", "description"], [61, 2, 1, "", "positions"], [61, 3, 1, "", "row_index"], [61, 3, 1, "", "source_name"], [61, 2, 1, "", "tag"], [61, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog3HWC": [[62, 2, 1, "", "description"], [62, 2, 1, "", "positions"], [62, 3, 1, "", "row_index"], [62, 3, 1, "", "source_name"], [62, 2, 1, "", "tag"], [62, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalog4FGL": [[63, 2, 1, "", "description"], [63, 2, 1, "", "positions"], [63, 3, 1, "", "row_index"], [63, 3, 1, "", "source_name"], [63, 2, 1, "", "tag"], [63, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogGammaCat": [[64, 2, 1, "", "description"], [64, 2, 1, "", "positions"], [64, 3, 1, "", "row_index"], [64, 3, 1, "", "source_name"], [64, 2, 1, "", "tag"], [64, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogHGPS": [[65, 2, 1, "", "description"], [65, 3, 1, "", "gaussian_component"], [65, 2, 1, "", "large_scale_component"], [65, 2, 1, "", "positions"], [65, 3, 1, "", "row_index"], [65, 3, 1, "", "source_name"], [65, 2, 1, "", "table_associations"], [65, 2, 1, "", "table_components"], [65, 2, 1, "", "table_identifications"], [65, 2, 1, "", "table_large_scale_component"], [65, 2, 1, "", "tag"], [65, 3, 1, "", "to_models"]], "gammapy.catalog.SourceCatalogLargeScaleHGPS": [[66, 3, 1, "", "evaluate"], [66, 3, 1, "", "peak_brightness"], [66, 3, 1, "", "peak_brightness_error"], [66, 3, 1, "", "peak_latitude"], [66, 3, 1, "", "peak_latitude_error"], [66, 3, 1, "", "width"], [66, 3, 1, "", "width_error"]], "gammapy.catalog.SourceCatalogObject": [[67, 2, 1, "", "name"], [67, 2, 1, "", "position"], [67, 2, 1, "", "row_index"]], "gammapy.catalog.SourceCatalogObject1LHAASO": [[68, 2, 1, "", "name"], [68, 2, 1, "", "position"], [68, 2, 1, "", "row_index"], [68, 3, 1, "", "sky_model"], [68, 3, 1, "", "spatial_model"], [68, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject2FHL": [[69, 2, 1, "", "asso"], [69, 2, 1, "", "energy_range"], [69, 2, 1, "", "flux_points"], [69, 2, 1, "", "flux_points_meta"], [69, 2, 1, "", "flux_points_table"], [69, 3, 1, "", "info"], [69, 2, 1, "", "is_pointlike"], [69, 2, 1, "", "name"], [69, 2, 1, "", "position"], [69, 2, 1, "", "row_index"], [69, 3, 1, "", "sky_model"], [69, 3, 1, "", "spatial_model"], [69, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject2HWC": [[70, 3, 1, "", "info"], [70, 2, 1, "", "n_models"], [70, 2, 1, "", "name"], [70, 2, 1, "", "position"], [70, 2, 1, "", "row_index"], [70, 3, 1, "", "sky_model"], [70, 3, 1, "", "spatial_model"], [70, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3FGL": [[71, 2, 1, "", "asso"], [71, 2, 1, "", "energy_range"], [71, 2, 1, "", "flux_points"], [71, 2, 1, "", "flux_points_meta"], [71, 2, 1, "", "flux_points_table"], [71, 3, 1, "", "info"], [71, 2, 1, "", "is_pointlike"], [71, 3, 1, "", "lightcurve"], [71, 2, 1, "", "name"], [71, 2, 1, "", "position"], [71, 2, 1, "", "row_index"], [71, 3, 1, "", "sky_model"], [71, 3, 1, "", "spatial_model"], [71, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3FHL": [[72, 2, 1, "", "asso"], [72, 2, 1, "", "energy_range"], [72, 2, 1, "", "flux_points"], [72, 2, 1, "", "flux_points_meta"], [72, 2, 1, "", "flux_points_table"], [72, 3, 1, "", "info"], [72, 2, 1, "", "is_pointlike"], [72, 2, 1, "", "name"], [72, 2, 1, "", "position"], [72, 2, 1, "", "row_index"], [72, 3, 1, "", "sky_model"], [72, 3, 1, "", "spatial_model"], [72, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject3HWC": [[73, 3, 1, "", "info"], [73, 2, 1, "", "is_pointlike"], [73, 2, 1, "", "n_models"], [73, 2, 1, "", "name"], [73, 2, 1, "", "position"], [73, 2, 1, "", "row_index"], [73, 3, 1, "", "sky_model"], [73, 3, 1, "", "spatial_model"], [73, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObject4FGL": [[74, 2, 1, "", "asso"], [74, 2, 1, "", "flux_points"], [74, 2, 1, "", "flux_points_meta"], [74, 2, 1, "", "flux_points_table"], [74, 3, 1, "", "info"], [74, 2, 1, "", "is_pointlike"], [74, 3, 1, "", "lightcurve"], [74, 2, 1, "", "name"], [74, 2, 1, "", "position"], [74, 2, 1, "", "row_index"], [74, 3, 1, "", "sky_model"], [74, 3, 1, "", "spatial_model"], [74, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectGammaCat": [[75, 2, 1, "", "flux_points"], [75, 2, 1, "", "flux_points_table"], [75, 3, 1, "", "info"], [75, 2, 1, "", "name"], [75, 2, 1, "", "position"], [75, 2, 1, "", "row_index"], [75, 3, 1, "", "sky_model"], [75, 3, 1, "", "spatial_model"], [75, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectHGPS": [[76, 3, 1, "", "components_models"], [76, 2, 1, "", "energy_range"], [76, 2, 1, "", "flux_points"], [76, 2, 1, "", "flux_points_table"], [76, 3, 1, "", "info"], [76, 2, 1, "", "name"], [76, 2, 1, "", "position"], [76, 2, 1, "", "row_index"], [76, 3, 1, "", "sky_model"], [76, 3, 1, "", "spatial_model"], [76, 3, 1, "", "spectral_model"]], "gammapy.catalog.SourceCatalogObjectHGPSComponent": [[77, 2, 1, "", "name"], [77, 2, 1, "", "position"], [77, 2, 1, "", "row_index"], [77, 3, 1, "", "spatial_model"]], "gammapy.data": [[78, 1, 1, "", "DataStore"], [79, 1, 1, "", "EventList"], [80, 1, 1, "", "EventListMetaData"], [81, 1, 1, "", "FixedPointingInfo"], [82, 1, 1, "", "GTI"], [83, 1, 1, "", "HDUIndexTable"], [84, 1, 1, "", "Observation"], [85, 1, 1, "", "ObservationFilter"], [86, 1, 1, "", "ObservationTable"], [87, 1, 1, "", "Observations"], [88, 1, 1, "", "ObservationsEventsSampler"], [89, 1, 1, "", "PointingInfo"], [90, 1, 1, "", "PointingMode"], [91, 4, 1, "", "get_irfs_features"], [92, 5, 1, "", "observatory_locations"]], "gammapy.data.DataStore": [[78, 2, 1, "", "DEFAULT_HDU_TABLE"], [78, 2, 1, "", "DEFAULT_OBS_TABLE"], [78, 3, 1, "", "check"], [78, 3, 1, "", "copy_obs"], [78, 3, 1, "", "from_dir"], [78, 3, 1, "", "from_events_files"], [78, 3, 1, "", "from_file"], [78, 3, 1, "", "get_observations"], [78, 3, 1, "", "info"], [78, 3, 1, "", "obs"], [78, 2, 1, "", "obs_ids"]], "gammapy.data.EventList": [[79, 2, 1, "", "altaz"], [79, 2, 1, "", "altaz_frame"], [79, 2, 1, "", "altaz_from_table"], [79, 3, 1, "", "check"], [79, 3, 1, "", "copy"], [79, 2, 1, "", "energy"], [79, 3, 1, "", "from_stack"], [79, 2, 1, "", "galactic"], [79, 2, 1, "", "galactic_median"], [79, 2, 1, "", "is_pointed_observation"], [79, 3, 1, "", "map_coord"], [79, 2, 1, "", "observation_dead_time_fraction"], [79, 2, 1, "", "observation_live_time_duration"], [79, 2, 1, "", "observation_time_duration"], [79, 2, 1, "", "observation_time_start"], [79, 2, 1, "", "observation_time_stop"], [79, 2, 1, "", "observatory_earth_location"], [79, 2, 1, "", "offset"], [79, 2, 1, "", "offset_from_median"], [79, 3, 1, "", "peek"], [79, 3, 1, "", "plot_energy"], [79, 3, 1, "", "plot_energy_offset"], [79, 3, 1, "", "plot_image"], [79, 3, 1, "", "plot_offset2_distribution"], [79, 3, 1, "", "plot_time"], [79, 2, 1, "", "pointing_radec"], [79, 2, 1, "", "radec"], [79, 3, 1, "", "read"], [79, 3, 1, "", "select_energy"], [79, 3, 1, "", "select_mask"], [79, 3, 1, "", "select_offset"], [79, 3, 1, "", "select_parameter"], [79, 3, 1, "", "select_rad_max"], [79, 3, 1, "", "select_region"], [79, 3, 1, "", "select_row_subset"], [79, 3, 1, "", "select_time"], [79, 3, 1, "", "stack"], [79, 2, 1, "", "time"], [79, 2, 1, "", "time_ref"], [79, 3, 1, "", "to_table_hdu"], [79, 3, 1, "", "write"]], "gammapy.data.EventListMetaData": [[80, 3, 1, "", "construct"], [80, 3, 1, "", "copy"], [80, 3, 1, "", "dict"], [80, 3, 1, "", "from_header"], [80, 3, 1, "", "from_orm"], [80, 3, 1, "", "json"], [80, 2, 1, "", "model_computed_fields"], [80, 2, 1, "", "model_config"], [80, 3, 1, "", "model_construct"], [80, 3, 1, "", "model_copy"], [80, 3, 1, "", "model_dump"], [80, 3, 1, "", "model_dump_json"], [80, 2, 1, "", "model_extra"], [80, 2, 1, "", "model_fields"], [80, 2, 1, "", "model_fields_set"], [80, 3, 1, "", "model_json_schema"], [80, 3, 1, "", "model_parametrized_name"], [80, 3, 1, "", "model_post_init"], [80, 3, 1, "", "model_rebuild"], [80, 3, 1, "", "model_validate"], [80, 3, 1, "", "model_validate_json"], [80, 3, 1, "", "model_validate_strings"], [80, 3, 1, "", "parse_file"], [80, 3, 1, "", "parse_obj"], [80, 3, 1, "", "parse_raw"], [80, 3, 1, "", "schema"], [80, 3, 1, "", "schema_json"], [80, 2, 1, "", "tag"], [80, 3, 1, "", "to_header"], [80, 3, 1, "", "to_yaml"], [80, 3, 1, "", "update_forward_refs"], [80, 3, 1, "", "validate"]], "gammapy.data.FixedPointingInfo": [[81, 2, 1, "", "fixed_altaz"], [81, 2, 1, "", "fixed_icrs"], [81, 3, 1, "", "from_fits_header"], [81, 3, 1, "", "get_altaz"], [81, 3, 1, "", "get_icrs"], [81, 2, 1, "", "mode"], [81, 3, 1, "", "read"], [81, 3, 1, "", "to_fits_header"]], "gammapy.data.GTI": [[82, 3, 1, "", "copy"], [82, 3, 1, "", "create"], [82, 3, 1, "", "delete_interval"], [82, 3, 1, "", "from_stack"], [82, 3, 1, "", "from_table_hdu"], [82, 3, 1, "", "from_time_intervals"], [82, 3, 1, "", "group_table"], [82, 2, 1, "", "met_start"], [82, 2, 1, "", "met_stop"], [82, 3, 1, "", "read"], [82, 3, 1, "", "select_time"], [82, 3, 1, "", "stack"], [82, 2, 1, "", "time_delta"], [82, 2, 1, "", "time_intervals"], [82, 2, 1, "", "time_ref"], [82, 2, 1, "", "time_start"], [82, 2, 1, "", "time_stop"], [82, 2, 1, "", "time_sum"], [82, 3, 1, "", "to_table_hdu"], [82, 3, 1, "", "union"], [82, 3, 1, "", "write"]], "gammapy.data.HDUIndexTable": [[83, 2, 1, "", "ColumnClass"], [83, 2, 1, "", "VALID_HDU_CLASS"], [83, 2, 1, "", "VALID_HDU_TYPE"], [83, 3, 1, "", "add_column"], [83, 3, 1, "", "add_columns"], [83, 3, 1, "", "add_index"], [83, 3, 1, "", "add_row"], [83, 3, 1, "", "argsort"], [83, 3, 1, "", "as_array"], [83, 2, 1, "", "base_dir"], [83, 2, 1, "", "colnames"], [83, 3, 1, "", "convert_bytestring_to_unicode"], [83, 3, 1, "", "convert_unicode_to_bytestring"], [83, 3, 1, "", "copy"], [83, 2, 1, "", "dtype"], [83, 3, 1, "", "field"], [83, 3, 1, "", "filled"], [83, 3, 1, "", "from_pandas"], [83, 3, 1, "", "group_by"], [83, 2, 1, "", "groups"], [83, 2, 1, "", "has_masked_columns"], [83, 2, 1, "", "has_masked_values"], [83, 2, 1, "", "has_mixin_columns"], [83, 2, 1, "", "hdu_class_unique"], [83, 3, 1, "", "hdu_location"], [83, 2, 1, "", "hdu_type_unique"], [83, 2, 1, "", "iloc"], [83, 3, 1, "", "index_column"], [83, 3, 1, "", "index_mode"], [83, 2, 1, "", "indices"], [83, 2, 1, "", "info"], [83, 3, 1, "", "insert_row"], [83, 3, 1, "", "items"], [83, 3, 1, "", "itercols"], [83, 3, 1, "", "iterrows"], [83, 3, 1, "", "keep_columns"], [83, 3, 1, "", "keys"], [83, 2, 1, "", "loc"], [83, 2, 1, "", "loc_indices"], [83, 3, 1, "", "location_info"], [83, 2, 1, "", "mask"], [83, 2, 1, "", "masked"], [83, 2, 1, "", "meta"], [83, 3, 1, "", "more"], [83, 2, 1, "", "obs_id_unique"], [83, 3, 1, "", "pformat"], [83, 3, 1, "", "pformat_all"], [83, 3, 1, "", "pprint"], [83, 3, 1, "", "pprint_all"], [83, 2, 1, "", "pprint_exclude_names"], [83, 2, 1, "", "pprint_include_names"], [83, 3, 1, "", "read"], [83, 3, 1, "", "remove_column"], [83, 3, 1, "", "remove_columns"], [83, 3, 1, "", "remove_indices"], [83, 3, 1, "", "remove_row"], [83, 3, 1, "", "remove_rows"], [83, 3, 1, "", "rename_column"], [83, 3, 1, "", "rename_columns"], [83, 3, 1, "", "replace_column"], [83, 3, 1, "", "reverse"], [83, 3, 1, "", "round"], [83, 3, 1, "", "row_idx"], [83, 3, 1, "", "show_in_browser"], [83, 3, 1, "", "show_in_notebook"], [83, 3, 1, "", "sort"], [83, 3, 1, "", "summary"], [83, 3, 1, "", "to_pandas"], [83, 3, 1, "", "update"], [83, 3, 1, "", "values"], [83, 3, 1, "", "values_equal"], [83, 2, 1, "", "write"]], "gammapy.data.Observation": [[84, 2, 1, "", "aeff"], [84, 2, 1, "", "available_hdus"], [84, 2, 1, "", "available_irfs"], [84, 2, 1, "", "bkg"], [84, 3, 1, "", "check"], [84, 3, 1, "", "copy"], [84, 3, 1, "", "create"], [84, 2, 1, "", "edisp"], [84, 2, 1, "", "events"], [84, 3, 1, "", "get_pointing_altaz"], [84, 3, 1, "", "get_pointing_icrs"], [84, 2, 1, "", "gti"], [84, 2, 1, "", "meta"], [84, 2, 1, "", "muoneff"], [84, 2, 1, "", "obs_info"], [84, 2, 1, "", "observation_dead_time_fraction"], [84, 2, 1, "", "observation_live_time_duration"], [84, 2, 1, "", "observation_time_duration"], [84, 2, 1, "", "observatory_earth_location"], [84, 3, 1, "", "peek"], [84, 2, 1, "", "pointing"], [84, 2, 1, "", "psf"], [84, 2, 1, "", "rad_max"], [84, 3, 1, "", "read"], [84, 3, 1, "", "select_time"], [84, 2, 1, "", "target_radec"], [84, 2, 1, "", "tmid"], [84, 2, 1, "", "tstart"], [84, 2, 1, "", "tstop"], [84, 3, 1, "", "write"]], "gammapy.data.ObservationFilter": [[85, 2, 1, "", "EVENT_FILTER_TYPES"], [85, 3, 1, "", "copy"], [85, 3, 1, "", "filter_events"], [85, 3, 1, "", "filter_gti"], [85, 2, 1, "", "livetime_fraction"]], "gammapy.data.ObservationTable": [[86, 2, 1, "", "ColumnClass"], [86, 3, 1, "", "add_column"], [86, 3, 1, "", "add_columns"], [86, 3, 1, "", "add_index"], [86, 3, 1, "", "add_row"], [86, 3, 1, "", "argsort"], [86, 3, 1, "", "as_array"], [86, 2, 1, "", "colnames"], [86, 3, 1, "", "convert_bytestring_to_unicode"], [86, 3, 1, "", "convert_unicode_to_bytestring"], [86, 3, 1, "", "copy"], [86, 2, 1, "", "dtype"], [86, 3, 1, "", "field"], [86, 3, 1, "", "filled"], [86, 3, 1, "", "from_pandas"], [86, 3, 1, "", "group_by"], [86, 2, 1, "", "groups"], [86, 2, 1, "", "has_masked_columns"], [86, 2, 1, "", "has_masked_values"], [86, 2, 1, "", "has_mixin_columns"], [86, 2, 1, "", "iloc"], [86, 3, 1, "", "index_column"], [86, 3, 1, "", "index_mode"], [86, 2, 1, "", "indices"], [86, 2, 1, "", "info"], [86, 3, 1, "", "insert_row"], [86, 3, 1, "", "items"], [86, 3, 1, "", "itercols"], [86, 3, 1, "", "iterrows"], [86, 3, 1, "", "keep_columns"], [86, 3, 1, "", "keys"], [86, 2, 1, "", "loc"], [86, 2, 1, "", "loc_indices"], [86, 2, 1, "", "mask"], [86, 2, 1, "", "masked"], [86, 2, 1, "", "meta"], [86, 3, 1, "", "more"], [86, 3, 1, "", "pformat"], [86, 3, 1, "", "pformat_all"], [86, 2, 1, "", "pointing_galactic"], [86, 2, 1, "", "pointing_radec"], [86, 3, 1, "", "pprint"], [86, 3, 1, "", "pprint_all"], [86, 2, 1, "", "pprint_exclude_names"], [86, 2, 1, "", "pprint_include_names"], [86, 3, 1, "", "read"], [86, 3, 1, "", "remove_column"], [86, 3, 1, "", "remove_columns"], [86, 3, 1, "", "remove_indices"], [86, 3, 1, "", "remove_row"], [86, 3, 1, "", "remove_rows"], [86, 3, 1, "", "rename_column"], [86, 3, 1, "", "rename_columns"], [86, 3, 1, "", "replace_column"], [86, 3, 1, "", "reverse"], [86, 3, 1, "", "round"], [86, 3, 1, "", "select_obs_id"], [86, 3, 1, "", "select_observations"], [86, 3, 1, "", "select_range"], [86, 3, 1, "", "select_sky_circle"], [86, 3, 1, "", "select_time_range"], [86, 3, 1, "", "show_in_browser"], [86, 3, 1, "", "show_in_notebook"], [86, 3, 1, "", "sort"], [86, 3, 1, "", "summary"], [86, 2, 1, "", "time_ref"], [86, 2, 1, "", "time_start"], [86, 2, 1, "", "time_stop"], [86, 3, 1, "", "to_pandas"], [86, 3, 1, "", "update"], [86, 3, 1, "", "values"], [86, 3, 1, "", "values_equal"], [86, 2, 1, "", "write"]], "gammapy.data.Observations": [[87, 3, 1, "", "append"], [87, 3, 1, "", "clear"], [87, 3, 1, "", "count"], [87, 3, 1, "", "extend"], [87, 3, 1, "", "from_stack"], [87, 3, 1, "", "group_by_label"], [87, 2, 1, "", "ids"], [87, 3, 1, "", "in_memory_generator"], [87, 3, 1, "", "index"], [87, 3, 1, "", "insert"], [87, 3, 1, "", "pop"], [87, 3, 1, "", "remove"], [87, 3, 1, "", "reverse"], [87, 3, 1, "", "select_time"]], "gammapy.data.ObservationsEventsSampler": [[88, 2, 1, "", "n_jobs"], [88, 2, 1, "", "parallel_backend"], [88, 3, 1, "", "run"], [88, 3, 1, "", "simulate_observation"]], "gammapy.data.PointingInfo": [[89, 2, 1, "", "altaz"], [89, 2, 1, "", "altaz_frame"], [89, 2, 1, "", "altaz_from_table"], [89, 3, 1, "", "altaz_interpolate"], [89, 2, 1, "", "duration"], [89, 3, 1, "", "get_altaz"], [89, 3, 1, "", "get_icrs"], [89, 2, 1, "", "location"], [89, 2, 1, "", "radec"], [89, 3, 1, "", "read"], [89, 2, 1, "", "time"], [89, 2, 1, "", "time_ref"]], "gammapy.data.PointingMode": [[90, 2, 1, "", "DRIFT"], [90, 2, 1, "", "POINTING"]], "gammapy.datasets": [[93, 5, 1, "", "DATASET_REGISTRY"], [94, 1, 1, "", "Dataset"], [95, 1, 1, "", "Datasets"], [96, 1, 1, "", "FluxPointsDataset"], [97, 1, 1, "", "MapDataset"], [98, 1, 1, "", "MapDatasetEventSampler"], [99, 1, 1, "", "MapDatasetMetaData"], [100, 1, 1, "", "MapDatasetOnOff"], [101, 1, 1, "", "OGIPDatasetReader"], [102, 1, 1, "", "OGIPDatasetWriter"], [103, 1, 1, "", "ObservationEventSampler"], [104, 1, 1, "", "SpectrumDataset"], [105, 1, 1, "", "SpectrumDatasetOnOff"], [106, 4, 1, "", "create_map_dataset_from_observation"], [107, 4, 1, "", "create_map_dataset_geoms"]], "gammapy.datasets.Dataset": [[94, 3, 1, "", "copy"], [94, 2, 1, "", "mask"], [94, 2, 1, "", "name"], [94, 3, 1, "", "stat_array"], [94, 3, 1, "", "stat_sum"], [94, 2, 1, "", "tag"], [94, 3, 1, "", "to_dict"]], "gammapy.datasets.Datasets": [[95, 3, 1, "", "append"], [95, 3, 1, "", "clear"], [95, 2, 1, "", "contributes_to_stat"], [95, 3, 1, "", "copy"], [95, 3, 1, "", "count"], [95, 2, 1, "", "energy_axes_are_aligned"], [95, 2, 1, "", "energy_ranges"], [95, 3, 1, "", "extend"], [95, 2, 1, "", "gti"], [95, 3, 1, "", "index"], [95, 3, 1, "", "info_table"], [95, 3, 1, "", "insert"], [95, 2, 1, "", "is_all_same_energy_shape"], [95, 2, 1, "", "is_all_same_shape"], [95, 2, 1, "", "is_all_same_type"], [95, 2, 1, "", "meta_table"], [95, 2, 1, "", "models"], [95, 2, 1, "", "names"], [95, 2, 1, "", "parameters"], [95, 3, 1, "", "pop"], [95, 3, 1, "", "read"], [95, 3, 1, "", "remove"], [95, 3, 1, "", "reverse"], [95, 3, 1, "", "select_time"], [95, 3, 1, "", "slice_by_energy"], [95, 3, 1, "", "stack_reduce"], [95, 3, 1, "", "stat_sum"], [95, 3, 1, "", "to_spectrum_datasets"], [95, 3, 1, "", "write"]], "gammapy.datasets.FluxPointsDataset": [[96, 3, 1, "", "copy"], [96, 3, 1, "", "data_shape"], [96, 3, 1, "", "flux_pred"], [96, 3, 1, "", "from_dict"], [96, 2, 1, "", "gti"], [96, 2, 1, "", "mask"], [96, 2, 1, "", "models"], [96, 2, 1, "", "name"], [96, 3, 1, "", "plot_fit"], [96, 3, 1, "", "plot_residuals"], [96, 3, 1, "", "plot_spectrum"], [96, 3, 1, "", "read"], [96, 3, 1, "", "residuals"], [96, 3, 1, "", "stat_array"], [96, 3, 1, "", "stat_sum"], [96, 2, 1, "", "stat_type"], [96, 2, 1, "", "tag"], [96, 3, 1, "", "to_dict"], [96, 3, 1, "", "write"]], "gammapy.datasets.MapDataset": [[97, 2, 1, "", "background"], [97, 2, 1, "", "background_model"], [97, 3, 1, "", "copy"], [97, 2, 1, "", "counts"], [97, 3, 1, "", "create"], [97, 3, 1, "", "cutout"], [97, 2, 1, "", "data_shape"], [97, 3, 1, "", "downsample"], [97, 2, 1, "", "edisp"], [97, 2, 1, "", "energy_range"], [97, 2, 1, "", "energy_range_fit"], [97, 2, 1, "", "energy_range_safe"], [97, 2, 1, "", "energy_range_total"], [97, 2, 1, "", "evaluators"], [97, 2, 1, "", "excess"], [97, 2, 1, "", "exposure"], [97, 3, 1, "", "fake"], [97, 3, 1, "", "from_dict"], [97, 3, 1, "", "from_geoms"], [97, 3, 1, "", "from_hdulist"], [97, 2, 1, "", "geoms"], [97, 2, 1, "", "gti"], [97, 3, 1, "", "info_dict"], [97, 2, 1, "", "mask"], [97, 2, 1, "", "mask_fit"], [97, 2, 1, "", "mask_fit_image"], [97, 2, 1, "", "mask_image"], [97, 2, 1, "", "mask_safe"], [97, 2, 1, "", "mask_safe_edisp"], [97, 2, 1, "", "mask_safe_image"], [97, 2, 1, "", "mask_safe_psf"], [97, 2, 1, "", "meta"], [97, 2, 1, "", "meta_table"], [97, 2, 1, "", "models"], [97, 2, 1, "", "name"], [97, 3, 1, "", "npred"], [97, 3, 1, "", "npred_background"], [97, 3, 1, "", "npred_signal"], [97, 3, 1, "", "pad"], [97, 3, 1, "", "peek"], [97, 3, 1, "", "plot_residuals"], [97, 3, 1, "", "plot_residuals_spatial"], [97, 3, 1, "", "plot_residuals_spectral"], [97, 2, 1, "", "psf"], [97, 3, 1, "", "read"], [97, 3, 1, "", "resample_energy_axis"], [97, 3, 1, "", "reset_data_cache"], [97, 3, 1, "", "residuals"], [97, 3, 1, "", "slice_by_energy"], [97, 3, 1, "", "slice_by_idx"], [97, 3, 1, "", "stack"], [97, 3, 1, "", "stat_array"], [97, 3, 1, "", "stat_sum"], [97, 2, 1, "", "stat_type"], [97, 2, 1, "", "tag"], [97, 3, 1, "", "to_dict"], [97, 3, 1, "", "to_hdulist"], [97, 3, 1, "", "to_image"], [97, 3, 1, "", "to_masked"], [97, 3, 1, "", "to_region_map_dataset"], [97, 3, 1, "", "to_spectrum_dataset"], [97, 3, 1, "", "write"]], "gammapy.datasets.MapDatasetEventSampler": [[98, 3, 1, "", "event_det_coords"], [98, 3, 1, "", "event_list_meta"], [98, 3, 1, "", "run"], [98, 3, 1, "", "sample_background"], [98, 3, 1, "", "sample_edisp"], [98, 3, 1, "", "sample_psf"], [98, 3, 1, "", "sample_sources"]], "gammapy.datasets.MapDatasetMetaData": [[99, 3, 1, "", "construct"], [99, 3, 1, "", "copy"], [99, 3, 1, "", "dict"], [99, 3, 1, "", "from_header"], [99, 3, 1, "", "from_orm"], [99, 3, 1, "", "json"], [99, 2, 1, "", "model_computed_fields"], [99, 2, 1, "", "model_config"], [99, 3, 1, "", "model_construct"], [99, 3, 1, "", "model_copy"], [99, 3, 1, "", "model_dump"], [99, 3, 1, "", "model_dump_json"], [99, 2, 1, "", "model_extra"], [99, 2, 1, "", "model_fields"], [99, 2, 1, "", "model_fields_set"], [99, 3, 1, "", "model_json_schema"], [99, 3, 1, "", "model_parametrized_name"], [99, 3, 1, "", "model_post_init"], [99, 3, 1, "", "model_rebuild"], [99, 3, 1, "", "model_validate"], [99, 3, 1, "", "model_validate_json"], [99, 3, 1, "", "model_validate_strings"], [99, 3, 1, "", "parse_file"], [99, 3, 1, "", "parse_obj"], [99, 3, 1, "", "parse_raw"], [99, 3, 1, "", "schema"], [99, 3, 1, "", "schema_json"], [99, 3, 1, "", "stack"], [99, 2, 1, "", "tag"], [99, 3, 1, "", "to_header"], [99, 3, 1, "", "to_yaml"], [99, 3, 1, "", "update_forward_refs"], [99, 3, 1, "", "validate"]], "gammapy.datasets.MapDatasetOnOff": [[100, 2, 1, "", "alpha"], [100, 2, 1, "", "background"], [100, 2, 1, "", "background_model"], [100, 3, 1, "", "copy"], [100, 2, 1, "", "counts"], [100, 3, 1, "", "create"], [100, 3, 1, "", "cutout"], [100, 2, 1, "", "data_shape"], [100, 3, 1, "", "downsample"], [100, 2, 1, "", "edisp"], [100, 2, 1, "", "energy_range"], [100, 2, 1, "", "energy_range_fit"], [100, 2, 1, "", "energy_range_safe"], [100, 2, 1, "", "energy_range_total"], [100, 2, 1, "", "evaluators"], [100, 2, 1, "", "excess"], [100, 2, 1, "", "exposure"], [100, 3, 1, "", "fake"], [100, 3, 1, "", "from_dict"], [100, 3, 1, "", "from_geoms"], [100, 3, 1, "", "from_hdulist"], [100, 3, 1, "", "from_map_dataset"], [100, 2, 1, "", "geoms"], [100, 2, 1, "", "gti"], [100, 3, 1, "", "info_dict"], [100, 2, 1, "", "mask"], [100, 2, 1, "", "mask_fit"], [100, 2, 1, "", "mask_fit_image"], [100, 2, 1, "", "mask_image"], [100, 2, 1, "", "mask_safe"], [100, 2, 1, "", "mask_safe_edisp"], [100, 2, 1, "", "mask_safe_image"], [100, 2, 1, "", "mask_safe_psf"], [100, 2, 1, "", "meta"], [100, 2, 1, "", "meta_table"], [100, 2, 1, "", "models"], [100, 2, 1, "", "name"], [100, 3, 1, "", "npred"], [100, 3, 1, "", "npred_background"], [100, 3, 1, "", "npred_off"], [100, 3, 1, "", "npred_signal"], [100, 3, 1, "", "pad"], [100, 3, 1, "", "peek"], [100, 3, 1, "", "plot_residuals"], [100, 3, 1, "", "plot_residuals_spatial"], [100, 3, 1, "", "plot_residuals_spectral"], [100, 2, 1, "", "psf"], [100, 3, 1, "", "read"], [100, 3, 1, "", "resample_energy_axis"], [100, 3, 1, "", "reset_data_cache"], [100, 3, 1, "", "residuals"], [100, 3, 1, "", "slice_by_energy"], [100, 3, 1, "", "slice_by_idx"], [100, 3, 1, "", "stack"], [100, 3, 1, "", "stat_array"], [100, 3, 1, "", "stat_sum"], [100, 2, 1, "", "stat_type"], [100, 2, 1, "", "tag"], [100, 3, 1, "", "to_dict"], [100, 3, 1, "", "to_hdulist"], [100, 3, 1, "", "to_image"], [100, 3, 1, "", "to_map_dataset"], [100, 3, 1, "", "to_masked"], [100, 3, 1, "", "to_region_map_dataset"], [100, 3, 1, "", "to_spectrum_dataset"], [100, 3, 1, "", "write"]], "gammapy.datasets.OGIPDatasetReader": [[101, 3, 1, "", "get_filenames"], [101, 3, 1, "", "get_valid_path"], [101, 3, 1, "", "read"], [101, 3, 1, "", "read_arf"], [101, 3, 1, "", "read_bkg"], [101, 3, 1, "", "read_pha"], [101, 3, 1, "", "read_rmf"], [101, 2, 1, "", "tag"]], "gammapy.datasets.OGIPDatasetWriter": [[102, 3, 1, "", "get_filenames"], [102, 3, 1, "", "get_ogip_meta"], [102, 2, 1, "", "tag"], [102, 3, 1, "", "to_counts_hdulist"], [102, 3, 1, "", "write"], [102, 3, 1, "", "write_arf"], [102, 3, 1, "", "write_bkg"], [102, 3, 1, "", "write_pha"], [102, 3, 1, "", "write_rmf"]], "gammapy.datasets.ObservationEventSampler": [[103, 3, 1, "", "event_det_coords"], [103, 3, 1, "", "event_list_meta"], [103, 3, 1, "", "run"], [103, 3, 1, "", "sample_background"], [103, 3, 1, "", "sample_edisp"], [103, 3, 1, "", "sample_psf"], [103, 3, 1, "", "sample_sources"]], "gammapy.datasets.SpectrumDataset": [[104, 2, 1, "", "background"], [104, 2, 1, "", "background_model"], [104, 3, 1, "", "copy"], [104, 2, 1, "", "counts"], [104, 3, 1, "", "create"], [104, 3, 1, "", "cutout"], [104, 2, 1, "", "data_shape"], [104, 3, 1, "", "downsample"], [104, 2, 1, "", "edisp"], [104, 2, 1, "", "energy_range"], [104, 2, 1, "", "energy_range_fit"], [104, 2, 1, "", "energy_range_safe"], [104, 2, 1, "", "energy_range_total"], [104, 2, 1, "", "evaluators"], [104, 2, 1, "", "excess"], [104, 2, 1, "", "exposure"], [104, 3, 1, "", "fake"], [104, 3, 1, "", "from_dict"], [104, 3, 1, "", "from_geoms"], [104, 3, 1, "", "from_hdulist"], [104, 2, 1, "", "geoms"], [104, 2, 1, "", "gti"], [104, 3, 1, "", "info_dict"], [104, 2, 1, "", "mask"], [104, 2, 1, "", "mask_fit"], [104, 2, 1, "", "mask_fit_image"], [104, 2, 1, "", "mask_image"], [104, 2, 1, "", "mask_safe"], [104, 2, 1, "", "mask_safe_edisp"], [104, 2, 1, "", "mask_safe_image"], [104, 2, 1, "", "mask_safe_psf"], [104, 2, 1, "", "meta"], [104, 2, 1, "", "meta_table"], [104, 2, 1, "", "models"], [104, 2, 1, "", "name"], [104, 3, 1, "", "npred"], [104, 3, 1, "", "npred_background"], [104, 3, 1, "", "npred_signal"], [104, 3, 1, "", "pad"], [104, 3, 1, "", "peek"], [104, 3, 1, "", "plot_counts"], [104, 3, 1, "", "plot_excess"], [104, 3, 1, "", "plot_fit"], [104, 3, 1, "", "plot_masks"], [104, 3, 1, "", "plot_residuals"], [104, 3, 1, "", "plot_residuals_spatial"], [104, 3, 1, "", "plot_residuals_spectral"], [104, 2, 1, "", "psf"], [104, 3, 1, "", "read"], [104, 3, 1, "", "resample_energy_axis"], [104, 3, 1, "", "reset_data_cache"], [104, 3, 1, "", "residuals"], [104, 3, 1, "", "slice_by_energy"], [104, 3, 1, "", "slice_by_idx"], [104, 3, 1, "", "stack"], [104, 3, 1, "", "stat_array"], [104, 3, 1, "", "stat_sum"], [104, 2, 1, "", "stat_type"], [104, 2, 1, "", "tag"], [104, 3, 1, "", "to_dict"], [104, 3, 1, "", "to_hdulist"], [104, 3, 1, "", "to_image"], [104, 3, 1, "", "to_masked"], [104, 3, 1, "", "to_region_map_dataset"], [104, 3, 1, "", "to_spectrum_dataset"], [104, 3, 1, "", "write"]], "gammapy.datasets.SpectrumDatasetOnOff": [[105, 2, 1, "", "alpha"], [105, 2, 1, "", "background"], [105, 2, 1, "", "background_model"], [105, 3, 1, "", "copy"], [105, 2, 1, "", "counts"], [105, 3, 1, "", "create"], [105, 3, 1, "", "cutout"], [105, 2, 1, "", "data_shape"], [105, 3, 1, "", "downsample"], [105, 2, 1, "", "edisp"], [105, 2, 1, "", "energy_range"], [105, 2, 1, "", "energy_range_fit"], [105, 2, 1, "", "energy_range_safe"], [105, 2, 1, "", "energy_range_total"], [105, 2, 1, "", "evaluators"], [105, 2, 1, "", "excess"], [105, 2, 1, "", "exposure"], [105, 3, 1, "", "fake"], [105, 3, 1, "", "from_dict"], [105, 3, 1, "", "from_geoms"], [105, 3, 1, "", "from_hdulist"], [105, 3, 1, "", "from_map_dataset"], [105, 3, 1, "", "from_spectrum_dataset"], [105, 2, 1, "", "geoms"], [105, 2, 1, "", "gti"], [105, 3, 1, "", "info_dict"], [105, 2, 1, "", "mask"], [105, 2, 1, "", "mask_fit"], [105, 2, 1, "", "mask_fit_image"], [105, 2, 1, "", "mask_image"], [105, 2, 1, "", "mask_safe"], [105, 2, 1, "", "mask_safe_edisp"], [105, 2, 1, "", "mask_safe_image"], [105, 2, 1, "", "mask_safe_psf"], [105, 2, 1, "", "meta"], [105, 2, 1, "", "meta_table"], [105, 2, 1, "", "models"], [105, 2, 1, "", "name"], [105, 3, 1, "", "npred"], [105, 3, 1, "", "npred_background"], [105, 3, 1, "", "npred_off"], [105, 3, 1, "", "npred_signal"], [105, 3, 1, "", "pad"], [105, 3, 1, "", "peek"], [105, 3, 1, "", "plot_counts"], [105, 3, 1, "", "plot_excess"], [105, 3, 1, "", "plot_fit"], [105, 3, 1, "", "plot_masks"], [105, 3, 1, "", "plot_residuals"], [105, 3, 1, "", "plot_residuals_spatial"], [105, 3, 1, "", "plot_residuals_spectral"], [105, 2, 1, "", "psf"], [105, 3, 1, "", "read"], [105, 3, 1, "", "resample_energy_axis"], [105, 3, 1, "", "reset_data_cache"], [105, 3, 1, "", "residuals"], [105, 3, 1, "", "slice_by_energy"], [105, 3, 1, "", "slice_by_idx"], [105, 3, 1, "", "stack"], [105, 3, 1, "", "stat_array"], [105, 3, 1, "", "stat_sum"], [105, 2, 1, "", "stat_type"], [105, 2, 1, "", "tag"], [105, 3, 1, "", "to_dict"], [105, 3, 1, "", "to_hdulist"], [105, 3, 1, "", "to_image"], [105, 3, 1, "", "to_map_dataset"], [105, 3, 1, "", "to_masked"], [105, 3, 1, "", "to_region_map_dataset"], [105, 3, 1, "", "to_spectrum_dataset"], [105, 3, 1, "", "write"]], "gammapy.estimators": [[108, 1, 1, "", "ASmoothMapEstimator"], [109, 5, 1, "", "ESTIMATOR_REGISTRY"], [110, 1, 1, "", "EnergyDependentMorphologyEstimator"], [111, 1, 1, "", "Estimator"], [112, 1, 1, "", "ExcessMapEstimator"], [113, 1, 1, "", "FluxMaps"], [114, 1, 1, "", "FluxMetaData"], [115, 1, 1, "", "FluxPoints"], [116, 1, 1, "", "FluxPointsEstimator"], [117, 1, 1, "", "FluxProfileEstimator"], [118, 1, 1, "", "ImageProfile"], [119, 1, 1, "", "ImageProfileEstimator"], [120, 1, 1, "", "LightCurveEstimator"], [121, 1, 1, "", "ParameterEstimator"], [122, 1, 1, "", "SensitivityEstimator"], [123, 1, 1, "", "TSMapEstimator"], [5, 0, 0, "-", "utils"]], "gammapy.estimators.ASmoothMapEstimator": [[108, 2, 1, "", "config_parameters"], [108, 3, 1, "", "copy"], [108, 3, 1, "", "estimate_maps"], [108, 3, 1, "", "get_kernels"], [108, 3, 1, "", "get_scales"], [108, 3, 1, "", "run"], [108, 3, 1, "", "selection_all"], [108, 2, 1, "", "selection_optional"], [108, 2, 1, "", "tag"]], "gammapy.estimators.EnergyDependentMorphologyEstimator": [[110, 2, 1, "", "config_parameters"], [110, 3, 1, "", "copy"], [110, 3, 1, "", "estimate_energy_dependence"], [110, 3, 1, "", "run"], [110, 2, 1, "", "selection_optional"], [110, 2, 1, "", "tag"]], "gammapy.estimators.Estimator": [[111, 2, 1, "", "config_parameters"], [111, 3, 1, "", "copy"], [111, 3, 1, "", "run"], [111, 2, 1, "", "selection_optional"], [111, 2, 1, "", "tag"]], "gammapy.estimators.ExcessMapEstimator": [[112, 2, 1, "", "config_parameters"], [112, 3, 1, "", "copy"], [112, 2, 1, "", "correlation_radius"], [112, 3, 1, "", "estimate_excess_map"], [112, 3, 1, "", "estimate_exposure_reco_energy"], [112, 3, 1, "", "estimate_kernel"], [112, 3, 1, "", "estimate_mask_default"], [112, 3, 1, "", "run"], [112, 2, 1, "", "selection_optional"], [112, 2, 1, "", "tag"]], "gammapy.estimators.FluxMaps": [[113, 3, 1, "", "all_quantities"], [113, 2, 1, "", "available_quantities"], [113, 2, 1, "", "counts"], [113, 2, 1, "", "dnde"], [113, 2, 1, "", "dnde_err"], [113, 2, 1, "", "dnde_errn"], [113, 2, 1, "", "dnde_errp"], [113, 2, 1, "", "dnde_ref"], [113, 2, 1, "", "dnde_ul"], [113, 2, 1, "", "e2dnde"], [113, 2, 1, "", "e2dnde_err"], [113, 2, 1, "", "e2dnde_errn"], [113, 2, 1, "", "e2dnde_errp"], [113, 2, 1, "", "e2dnde_ref"], [113, 2, 1, "", "e2dnde_ul"], [113, 2, 1, "", "eflux"], [113, 2, 1, "", "eflux_err"], [113, 2, 1, "", "eflux_errn"], [113, 2, 1, "", "eflux_errp"], [113, 2, 1, "", "eflux_ref"], [113, 2, 1, "", "eflux_ul"], [113, 2, 1, "", "energy_axis"], [113, 2, 1, "", "energy_max"], [113, 2, 1, "", "energy_min"], [113, 2, 1, "", "energy_ref"], [113, 2, 1, "", "filter_success_nan"], [113, 2, 1, "", "flux"], [113, 2, 1, "", "flux_err"], [113, 2, 1, "", "flux_errn"], [113, 2, 1, "", "flux_errp"], [113, 2, 1, "", "flux_ref"], [113, 2, 1, "", "flux_sensitivity"], [113, 2, 1, "", "flux_ul"], [113, 3, 1, "", "from_hdulist"], [113, 3, 1, "", "from_maps"], [113, 3, 1, "", "from_stack"], [113, 2, 1, "", "geom"], [113, 3, 1, "", "get_flux_points"], [113, 2, 1, "", "has_any_ts"], [113, 2, 1, "", "has_stat_profiles"], [113, 2, 1, "", "has_success"], [113, 2, 1, "", "has_ul"], [113, 2, 1, "", "is_convertible_to_flux_sed_type"], [113, 2, 1, "", "is_ul"], [113, 3, 1, "", "iter_by_axis"], [113, 2, 1, "", "n_dof"], [113, 2, 1, "", "n_sigma"], [113, 2, 1, "", "n_sigma_ul"], [113, 2, 1, "", "niter"], [113, 2, 1, "", "norm"], [113, 2, 1, "", "norm_err"], [113, 2, 1, "", "norm_errn"], [113, 2, 1, "", "norm_errp"], [113, 2, 1, "", "norm_sensitivity"], [113, 2, 1, "", "norm_ul"], [113, 2, 1, "", "npred"], [113, 2, 1, "", "npred_background"], [113, 2, 1, "", "npred_excess"], [113, 2, 1, "", "npred_excess_err"], [113, 2, 1, "", "npred_excess_errn"], [113, 2, 1, "", "npred_excess_errp"], [113, 2, 1, "", "npred_excess_ref"], [113, 2, 1, "", "npred_excess_ul"], [113, 3, 1, "", "read"], [113, 2, 1, "", "reference_model"], [113, 2, 1, "", "reference_model_default"], [113, 2, 1, "", "reference_spectral_model"], [113, 2, 1, "", "sed_type_init"], [113, 2, 1, "", "sed_type_plot_default"], [113, 3, 1, "", "slice_by_coord"], [113, 3, 1, "", "slice_by_energy"], [113, 3, 1, "", "slice_by_idx"], [113, 3, 1, "", "slice_by_time"], [113, 2, 1, "", "sqrt_ts"], [113, 2, 1, "", "sqrt_ts_threshold_ul"], [113, 2, 1, "", "stat"], [113, 2, 1, "", "stat_null"], [113, 2, 1, "", "stat_scan"], [113, 2, 1, "", "success"], [113, 3, 1, "", "to_hdulist"], [113, 3, 1, "", "to_maps"], [113, 2, 1, "", "ts"], [113, 2, 1, "", "ts_scan"], [113, 3, 1, "", "write"]], "gammapy.estimators.FluxMetaData": [[114, 3, 1, "", "construct"], [114, 3, 1, "", "copy"], [114, 3, 1, "", "dict"], [114, 3, 1, "", "from_header"], [114, 3, 1, "", "from_orm"], [114, 3, 1, "", "json"], [114, 2, 1, "", "model_computed_fields"], [114, 2, 1, "", "model_config"], [114, 3, 1, "", "model_construct"], [114, 3, 1, "", "model_copy"], [114, 3, 1, "", "model_dump"], [114, 3, 1, "", "model_dump_json"], [114, 2, 1, "", "model_extra"], [114, 2, 1, "", "model_fields"], [114, 2, 1, "", "model_fields_set"], [114, 3, 1, "", "model_json_schema"], [114, 3, 1, "", "model_parametrized_name"], [114, 3, 1, "", "model_post_init"], [114, 3, 1, "", "model_rebuild"], [114, 3, 1, "", "model_validate"], [114, 3, 1, "", "model_validate_json"], [114, 3, 1, "", "model_validate_strings"], [114, 3, 1, "", "parse_file"], [114, 3, 1, "", "parse_obj"], [114, 3, 1, "", "parse_raw"], [114, 3, 1, "", "schema"], [114, 3, 1, "", "schema_json"], [114, 2, 1, "", "tag"], [114, 3, 1, "", "to_header"], [114, 3, 1, "", "to_yaml"], [114, 3, 1, "", "update_forward_refs"], [114, 3, 1, "", "validate"]], "gammapy.estimators.FluxPoints": [[115, 3, 1, "", "all_quantities"], [115, 2, 1, "", "available_quantities"], [115, 2, 1, "", "counts"], [115, 2, 1, "", "dnde"], [115, 2, 1, "", "dnde_err"], [115, 2, 1, "", "dnde_errn"], [115, 2, 1, "", "dnde_errp"], [115, 2, 1, "", "dnde_ref"], [115, 2, 1, "", "dnde_ul"], [115, 2, 1, "", "e2dnde"], [115, 2, 1, "", "e2dnde_err"], [115, 2, 1, "", "e2dnde_errn"], [115, 2, 1, "", "e2dnde_errp"], [115, 2, 1, "", "e2dnde_ref"], [115, 2, 1, "", "e2dnde_ul"], [115, 2, 1, "", "eflux"], [115, 2, 1, "", "eflux_err"], [115, 2, 1, "", "eflux_errn"], [115, 2, 1, "", "eflux_errp"], [115, 2, 1, "", "eflux_ref"], [115, 2, 1, "", "eflux_ul"], [115, 2, 1, "", "energy_axis"], [115, 2, 1, "", "energy_max"], [115, 2, 1, "", "energy_min"], [115, 2, 1, "", "energy_ref"], [115, 2, 1, "", "filter_success_nan"], [115, 2, 1, "", "flux"], [115, 2, 1, "", "flux_err"], [115, 2, 1, "", "flux_errn"], [115, 2, 1, "", "flux_errp"], [115, 2, 1, "", "flux_ref"], [115, 2, 1, "", "flux_sensitivity"], [115, 2, 1, "", "flux_ul"], [115, 3, 1, "", "from_hdulist"], [115, 3, 1, "", "from_maps"], [115, 3, 1, "", "from_stack"], [115, 3, 1, "", "from_table"], [115, 2, 1, "", "geom"], [115, 3, 1, "", "get_flux_points"], [115, 2, 1, "", "has_any_ts"], [115, 2, 1, "", "has_stat_profiles"], [115, 2, 1, "", "has_success"], [115, 2, 1, "", "has_ul"], [115, 2, 1, "", "is_convertible_to_flux_sed_type"], [115, 2, 1, "", "is_ul"], [115, 3, 1, "", "iter_by_axis"], [115, 2, 1, "", "n_dof"], [115, 2, 1, "", "n_sigma"], [115, 2, 1, "", "n_sigma_ul"], [115, 2, 1, "", "niter"], [115, 2, 1, "", "norm"], [115, 2, 1, "", "norm_err"], [115, 2, 1, "", "norm_errn"], [115, 2, 1, "", "norm_errp"], [115, 2, 1, "", "norm_sensitivity"], [115, 2, 1, "", "norm_ul"], [115, 2, 1, "", "npred"], [115, 2, 1, "", "npred_background"], [115, 2, 1, "", "npred_excess"], [115, 2, 1, "", "npred_excess_err"], [115, 2, 1, "", "npred_excess_errn"], [115, 2, 1, "", "npred_excess_errp"], [115, 2, 1, "", "npred_excess_ref"], [115, 2, 1, "", "npred_excess_ul"], [115, 3, 1, "", "plot"], [115, 3, 1, "", "plot_ts_profiles"], [115, 3, 1, "", "read"], [115, 3, 1, "", "recompute_ul"], [115, 2, 1, "", "reference_model"], [115, 2, 1, "", "reference_model_default"], [115, 2, 1, "", "reference_spectral_model"], [115, 3, 1, "", "resample_axis"], [115, 2, 1, "", "sed_type_init"], [115, 2, 1, "", "sed_type_plot_default"], [115, 3, 1, "", "slice_by_coord"], [115, 3, 1, "", "slice_by_energy"], [115, 3, 1, "", "slice_by_idx"], [115, 3, 1, "", "slice_by_time"], [115, 2, 1, "", "sqrt_ts"], [115, 2, 1, "", "sqrt_ts_threshold_ul"], [115, 2, 1, "", "stat"], [115, 2, 1, "", "stat_null"], [115, 2, 1, "", "stat_scan"], [115, 2, 1, "", "success"], [115, 3, 1, "", "to_hdulist"], [115, 3, 1, "", "to_maps"], [115, 3, 1, "", "to_table"], [115, 2, 1, "", "ts"], [115, 2, 1, "", "ts_scan"], [115, 3, 1, "", "write"]], "gammapy.estimators.FluxPointsEstimator": [[116, 2, 1, "", "config_parameters"], [116, 3, 1, "", "copy"], [116, 3, 1, "", "estimate_best_fit"], [116, 3, 1, "", "estimate_counts"], [116, 3, 1, "", "estimate_errn_errp"], [116, 3, 1, "", "estimate_flux_point"], [116, 3, 1, "", "estimate_npred"], [116, 3, 1, "", "estimate_npred_excess"], [116, 3, 1, "", "estimate_scan"], [116, 3, 1, "", "estimate_ts"], [116, 3, 1, "", "estimate_ul"], [116, 3, 1, "", "get_scale_model"], [116, 2, 1, "", "n_jobs"], [116, 2, 1, "", "norm_max"], [116, 2, 1, "", "norm_min"], [116, 2, 1, "", "norm_n_values"], [116, 2, 1, "", "norm_values"], [116, 2, 1, "", "parallel_backend"], [116, 3, 1, "", "run"], [116, 2, 1, "", "selection_optional"], [116, 2, 1, "", "tag"]], "gammapy.estimators.FluxProfileEstimator": [[117, 2, 1, "", "config_parameters"], [117, 3, 1, "", "copy"], [117, 3, 1, "", "estimate_best_fit"], [117, 3, 1, "", "estimate_counts"], [117, 3, 1, "", "estimate_errn_errp"], [117, 3, 1, "", "estimate_flux_point"], [117, 3, 1, "", "estimate_npred"], [117, 3, 1, "", "estimate_npred_excess"], [117, 3, 1, "", "estimate_scan"], [117, 3, 1, "", "estimate_ts"], [117, 3, 1, "", "estimate_ul"], [117, 3, 1, "", "get_scale_model"], [117, 2, 1, "", "n_jobs"], [117, 2, 1, "", "norm_max"], [117, 2, 1, "", "norm_min"], [117, 2, 1, "", "norm_n_values"], [117, 2, 1, "", "norm_values"], [117, 2, 1, "", "parallel_backend"], [117, 2, 1, "", "projected_distance_axis"], [117, 3, 1, "", "run"], [117, 2, 1, "", "selection_optional"], [117, 2, 1, "", "tag"]], "gammapy.estimators.ImageProfile": [[118, 3, 1, "", "normalize"], [118, 3, 1, "", "peek"], [118, 3, 1, "", "plot"], [118, 3, 1, "", "plot_err"], [118, 2, 1, "", "profile"], [118, 2, 1, "", "profile_err"], [118, 3, 1, "", "smooth"], [118, 2, 1, "", "x_max"], [118, 2, 1, "", "x_min"], [118, 2, 1, "", "x_ref"]], "gammapy.estimators.ImageProfileEstimator": [[119, 2, 1, "", "config_parameters"], [119, 3, 1, "", "copy"], [119, 3, 1, "", "run"], [119, 2, 1, "", "selection_optional"], [119, 2, 1, "", "tag"]], "gammapy.estimators.LightCurveEstimator": [[120, 2, 1, "", "config_parameters"], [120, 3, 1, "", "copy"], [120, 3, 1, "", "estimate_best_fit"], [120, 3, 1, "", "estimate_counts"], [120, 3, 1, "", "estimate_errn_errp"], [120, 3, 1, "", "estimate_flux_point"], [120, 3, 1, "", "estimate_npred"], [120, 3, 1, "", "estimate_npred_excess"], [120, 3, 1, "", "estimate_scan"], [120, 3, 1, "", "estimate_time_bin_flux"], [120, 3, 1, "", "estimate_ts"], [120, 3, 1, "", "estimate_ul"], [120, 3, 1, "", "expand_map"], [120, 3, 1, "", "get_scale_model"], [120, 2, 1, "", "n_jobs"], [120, 2, 1, "", "norm_max"], [120, 2, 1, "", "norm_min"], [120, 2, 1, "", "norm_n_values"], [120, 2, 1, "", "norm_values"], [120, 2, 1, "", "parallel_backend"], [120, 3, 1, "", "run"], [120, 2, 1, "", "selection_optional"], [120, 2, 1, "", "tag"]], "gammapy.estimators.ParameterEstimator": [[121, 2, 1, "", "config_parameters"], [121, 3, 1, "", "copy"], [121, 3, 1, "", "estimate_best_fit"], [121, 3, 1, "", "estimate_counts"], [121, 3, 1, "", "estimate_errn_errp"], [121, 3, 1, "", "estimate_npred"], [121, 3, 1, "", "estimate_scan"], [121, 3, 1, "", "estimate_ts"], [121, 3, 1, "", "estimate_ul"], [121, 3, 1, "", "run"], [121, 2, 1, "", "selection_optional"], [121, 2, 1, "", "tag"]], "gammapy.estimators.SensitivityEstimator": [[122, 2, 1, "", "config_parameters"], [122, 3, 1, "", "copy"], [122, 3, 1, "", "estimate_min_e2dnde"], [122, 3, 1, "", "estimate_min_excess"], [122, 3, 1, "", "run"], [122, 2, 1, "", "selection_optional"], [122, 2, 1, "", "tag"]], "gammapy.estimators.TSMapEstimator": [[123, 2, 1, "", "config_parameters"], [123, 3, 1, "", "copy"], [123, 3, 1, "", "estimate_fit_input_maps"], [123, 3, 1, "", "estimate_flux_default"], [123, 3, 1, "", "estimate_flux_map"], [123, 3, 1, "", "estimate_kernel"], [123, 3, 1, "", "estimate_mask_default"], [123, 3, 1, "", "estimate_pad_width"], [123, 2, 1, "", "n_jobs"], [123, 2, 1, "", "parallel_backend"], [123, 3, 1, "", "run"], [123, 2, 1, "", "selection_all"], [123, 2, 1, "", "selection_optional"], [123, 2, 1, "", "tag"]], "gammapy.estimators.utils": [[124, 4, 1, "", "compute_lightcurve_doublingtime"], [125, 4, 1, "", "compute_lightcurve_fpp"], [126, 4, 1, "", "compute_lightcurve_fvar"], [127, 4, 1, "", "estimate_exposure_reco_energy"], [128, 4, 1, "", "find_peaks"], [129, 4, 1, "", "find_peaks_in_flux_map"], [130, 4, 1, "", "get_rebinned_axis"], [131, 4, 1, "", "resample_energy_edges"]], "gammapy.irf": [[132, 1, 1, "", "Background2D"], [133, 1, 1, "", "Background3D"], [134, 1, 1, "", "BackgroundIRF"], [135, 1, 1, "", "EDispKernel"], [136, 1, 1, "", "EDispKernelMap"], [137, 1, 1, "", "EDispMap"], [138, 1, 1, "", "EffectiveAreaTable2D"], [139, 1, 1, "", "EnergyDependentMultiGaussPSF"], [140, 1, 1, "", "EnergyDispersion2D"], [141, 1, 1, "", "FoVAlignment"], [142, 1, 1, "", "IRF"], [143, 1, 1, "", "IRFMap"], [144, 5, 1, "", "IRF_REGISTRY"], [145, 1, 1, "", "PSF3D"], [146, 1, 1, "", "PSFKernel"], [147, 1, 1, "", "PSFKing"], [148, 1, 1, "", "PSFMap"], [149, 1, 1, "", "ParametricPSF"], [150, 1, 1, "", "RadMax2D"], [151, 1, 1, "", "RecoPSFMap"], [152, 4, 1, "", "load_irf_dict_from_file"]], "gammapy.irf.Background2D": [[132, 2, 1, "", "axes"], [132, 3, 1, "", "cumsum"], [132, 2, 1, "", "data"], [132, 2, 1, "", "default_interp_kwargs"], [132, 2, 1, "", "default_unit"], [132, 3, 1, "", "evaluate"], [132, 2, 1, "", "fov_alignment"], [132, 3, 1, "", "from_hdulist"], [132, 3, 1, "", "from_table"], [132, 2, 1, "", "has_offset_axis"], [132, 3, 1, "", "integral"], [132, 3, 1, "", "integrate_log_log"], [132, 3, 1, "", "interp_missing_data"], [132, 3, 1, "", "is_allclose"], [132, 2, 1, "", "is_pointlike"], [132, 3, 1, "", "normalize"], [132, 3, 1, "", "pad"], [132, 3, 1, "", "peek"], [132, 3, 1, "", "plot"], [132, 3, 1, "", "plot_at_energy"], [132, 3, 1, "", "plot_energy_dependence"], [132, 3, 1, "", "plot_offset_dependence"], [132, 3, 1, "", "plot_spectrum"], [132, 2, 1, "", "quantity"], [132, 3, 1, "", "read"], [132, 2, 1, "", "required_axes"], [132, 3, 1, "", "slice_by_idx"], [132, 2, 1, "", "tag"], [132, 3, 1, "", "to_3d"], [132, 3, 1, "", "to_hdulist"], [132, 3, 1, "", "to_table"], [132, 3, 1, "", "to_table_hdu"], [132, 3, 1, "", "to_unit"], [132, 2, 1, "", "unit"], [132, 3, 1, "", "write"]], "gammapy.irf.Background3D": [[133, 2, 1, "", "axes"], [133, 3, 1, "", "cumsum"], [133, 2, 1, "", "data"], [133, 2, 1, "", "default_interp_kwargs"], [133, 2, 1, "", "default_unit"], [133, 3, 1, "", "evaluate"], [133, 2, 1, "", "fov_alignment"], [133, 3, 1, "", "from_hdulist"], [133, 3, 1, "", "from_table"], [133, 2, 1, "", "has_offset_axis"], [133, 3, 1, "", "integral"], [133, 3, 1, "", "integrate_log_log"], [133, 3, 1, "", "interp_missing_data"], [133, 3, 1, "", "is_allclose"], [133, 2, 1, "", "is_pointlike"], [133, 3, 1, "", "normalize"], [133, 3, 1, "", "pad"], [133, 3, 1, "", "peek"], [133, 3, 1, "", "plot_at_energy"], [133, 2, 1, "", "quantity"], [133, 3, 1, "", "read"], [133, 2, 1, "", "required_axes"], [133, 3, 1, "", "slice_by_idx"], [133, 2, 1, "", "tag"], [133, 3, 1, "", "to_2d"], [133, 3, 1, "", "to_hdulist"], [133, 3, 1, "", "to_table"], [133, 3, 1, "", "to_table_hdu"], [133, 3, 1, "", "to_unit"], [133, 2, 1, "", "unit"], [133, 3, 1, "", "write"]], "gammapy.irf.BackgroundIRF": [[134, 2, 1, "", "axes"], [134, 3, 1, "", "cumsum"], [134, 2, 1, "", "data"], [134, 2, 1, "", "default_interp_kwargs"], [134, 3, 1, "", "evaluate"], [134, 2, 1, "", "fov_alignment"], [134, 3, 1, "", "from_hdulist"], [134, 3, 1, "", "from_table"], [134, 2, 1, "", "has_offset_axis"], [134, 3, 1, "", "integral"], [134, 3, 1, "", "integrate_log_log"], [134, 3, 1, "", "interp_missing_data"], [134, 3, 1, "", "is_allclose"], [134, 2, 1, "", "is_pointlike"], [134, 3, 1, "", "normalize"], [134, 3, 1, "", "pad"], [134, 2, 1, "", "quantity"], [134, 3, 1, "", "read"], [134, 2, 1, "", "required_axes"], [134, 3, 1, "", "slice_by_idx"], [134, 2, 1, "", "tag"], [134, 3, 1, "", "to_hdulist"], [134, 3, 1, "", "to_table"], [134, 3, 1, "", "to_table_hdu"], [134, 3, 1, "", "to_unit"], [134, 2, 1, "", "unit"], [134, 3, 1, "", "write"]], "gammapy.irf.EDispKernel": [[135, 2, 1, "", "axes"], [135, 3, 1, "", "cumsum"], [135, 2, 1, "", "data"], [135, 2, 1, "", "default_interp_kwargs"], [135, 3, 1, "", "evaluate"], [135, 2, 1, "", "fov_alignment"], [135, 3, 1, "", "from_diagonal_response"], [135, 3, 1, "", "from_gauss"], [135, 3, 1, "", "from_hdulist"], [135, 3, 1, "", "from_table"], [135, 3, 1, "", "get_bias"], [135, 3, 1, "", "get_bias_energy"], [135, 3, 1, "", "get_mean"], [135, 3, 1, "", "get_resolution"], [135, 2, 1, "", "has_offset_axis"], [135, 3, 1, "", "integral"], [135, 3, 1, "", "integrate_log_log"], [135, 3, 1, "", "interp_missing_data"], [135, 3, 1, "", "is_allclose"], [135, 2, 1, "", "is_pointlike"], [135, 3, 1, "", "normalize"], [135, 3, 1, "", "pad"], [135, 3, 1, "", "pdf_in_safe_range"], [135, 2, 1, "", "pdf_matrix"], [135, 3, 1, "", "peek"], [135, 3, 1, "", "plot_bias"], [135, 3, 1, "", "plot_matrix"], [135, 2, 1, "", "quantity"], [135, 3, 1, "", "read"], [135, 2, 1, "", "required_axes"], [135, 3, 1, "", "slice_by_idx"], [135, 2, 1, "", "tag"], [135, 3, 1, "", "to_hdulist"], [135, 3, 1, "", "to_image"], [135, 3, 1, "", "to_table"], [135, 3, 1, "", "to_table_hdu"], [135, 3, 1, "", "to_unit"], [135, 2, 1, "", "unit"], [135, 3, 1, "", "write"]], "gammapy.irf.EDispKernelMap": [[136, 3, 1, "", "copy"], [136, 3, 1, "", "cutout"], [136, 3, 1, "", "downsample"], [136, 2, 1, "", "edisp_map"], [136, 3, 1, "", "from_diagonal_response"], [136, 3, 1, "", "from_edisp_kernel"], [136, 3, 1, "", "from_gauss"], [136, 3, 1, "", "from_geom"], [136, 3, 1, "", "from_hdulist"], [136, 3, 1, "", "get_edisp_kernel"], [136, 2, 1, "", "mask_safe_image"], [136, 3, 1, "", "peek"], [136, 3, 1, "", "read"], [136, 2, 1, "", "required_axes"], [136, 3, 1, "", "resample_energy_axis"], [136, 3, 1, "", "slice_by_idx"], [136, 3, 1, "", "stack"], [136, 2, 1, "", "tag"], [136, 3, 1, "", "to_hdulist"], [136, 3, 1, "", "to_image"], [136, 3, 1, "", "to_region_nd_map"], [136, 3, 1, "", "write"]], "gammapy.irf.EDispMap": [[137, 3, 1, "", "copy"], [137, 3, 1, "", "cutout"], [137, 3, 1, "", "downsample"], [137, 2, 1, "", "edisp_map"], [137, 3, 1, "", "from_diagonal_response"], [137, 3, 1, "", "from_geom"], [137, 3, 1, "", "from_hdulist"], [137, 3, 1, "", "get_edisp_kernel"], [137, 2, 1, "", "mask_safe_image"], [137, 3, 1, "", "normalize"], [137, 3, 1, "", "peek"], [137, 3, 1, "", "read"], [137, 2, 1, "", "required_axes"], [137, 3, 1, "", "sample_coord"], [137, 3, 1, "", "slice_by_idx"], [137, 3, 1, "", "stack"], [137, 2, 1, "", "tag"], [137, 3, 1, "", "to_edisp_kernel_map"], [137, 3, 1, "", "to_hdulist"], [137, 3, 1, "", "to_region_nd_map"], [137, 3, 1, "", "write"]], "gammapy.irf.EffectiveAreaTable2D": [[138, 2, 1, "", "axes"], [138, 3, 1, "", "cumsum"], [138, 2, 1, "", "data"], [138, 2, 1, "", "default_interp_kwargs"], [138, 2, 1, "", "default_unit"], [138, 3, 1, "", "evaluate"], [138, 2, 1, "", "fov_alignment"], [138, 3, 1, "", "from_hdulist"], [138, 3, 1, "", "from_parametrization"], [138, 3, 1, "", "from_table"], [138, 2, 1, "", "has_offset_axis"], [138, 3, 1, "", "integral"], [138, 3, 1, "", "integrate_log_log"], [138, 3, 1, "", "interp_missing_data"], [138, 3, 1, "", "is_allclose"], [138, 2, 1, "", "is_pointlike"], [138, 3, 1, "", "normalize"], [138, 3, 1, "", "pad"], [138, 3, 1, "", "peek"], [138, 3, 1, "", "plot"], [138, 3, 1, "", "plot_energy_dependence"], [138, 3, 1, "", "plot_offset_dependence"], [138, 2, 1, "", "quantity"], [138, 3, 1, "", "read"], [138, 2, 1, "", "required_axes"], [138, 3, 1, "", "slice_by_idx"], [138, 2, 1, "", "tag"], [138, 3, 1, "", "to_hdulist"], [138, 3, 1, "", "to_table"], [138, 3, 1, "", "to_table_hdu"], [138, 3, 1, "", "to_unit"], [138, 2, 1, "", "unit"], [138, 3, 1, "", "write"]], "gammapy.irf.EnergyDependentMultiGaussPSF": [[139, 2, 1, "", "axes"], [139, 3, 1, "", "containment"], [139, 3, 1, "", "containment_radius"], [139, 3, 1, "", "cumsum"], [139, 2, 1, "", "data"], [139, 2, 1, "", "default_interp_kwargs"], [139, 3, 1, "", "evaluate"], [139, 3, 1, "", "evaluate_containment"], [139, 3, 1, "", "evaluate_direct"], [139, 3, 1, "", "evaluate_parameters"], [139, 2, 1, "", "fov_alignment"], [139, 3, 1, "", "from_hdulist"], [139, 3, 1, "", "from_table"], [139, 2, 1, "", "has_offset_axis"], [139, 3, 1, "", "info"], [139, 3, 1, "", "integral"], [139, 3, 1, "", "integrate_log_log"], [139, 3, 1, "", "interp_missing_data"], [139, 3, 1, "", "is_allclose"], [139, 2, 1, "", "is_pointlike"], [139, 3, 1, "", "normalize"], [139, 3, 1, "", "pad"], [139, 3, 1, "", "peek"], [139, 3, 1, "", "plot_containment_radius"], [139, 3, 1, "", "plot_containment_radius_vs_energy"], [139, 3, 1, "", "plot_psf_vs_rad"], [139, 2, 1, "", "quantity"], [139, 3, 1, "", "read"], [139, 2, 1, "", "required_axes"], [139, 2, 1, "", "required_parameters"], [139, 3, 1, "", "slice_by_idx"], [139, 2, 1, "", "tag"], [139, 3, 1, "", "to_hdulist"], [139, 3, 1, "", "to_psf3d"], [139, 3, 1, "", "to_table"], [139, 3, 1, "", "to_table_hdu"], [139, 3, 1, "", "to_unit"], [139, 2, 1, "", "unit"], [139, 3, 1, "", "write"]], "gammapy.irf.EnergyDispersion2D": [[140, 2, 1, "", "axes"], [140, 3, 1, "", "cumsum"], [140, 2, 1, "", "data"], [140, 2, 1, "", "default_interp_kwargs"], [140, 2, 1, "", "default_unit"], [140, 3, 1, "", "evaluate"], [140, 2, 1, "", "fov_alignment"], [140, 3, 1, "", "from_gauss"], [140, 3, 1, "", "from_hdulist"], [140, 3, 1, "", "from_table"], [140, 2, 1, "", "has_offset_axis"], [140, 3, 1, "", "integral"], [140, 3, 1, "", "integrate_log_log"], [140, 3, 1, "", "interp_missing_data"], [140, 3, 1, "", "is_allclose"], [140, 2, 1, "", "is_pointlike"], [140, 3, 1, "", "normalize"], [140, 3, 1, "", "pad"], [140, 3, 1, "", "peek"], [140, 3, 1, "", "plot_bias"], [140, 3, 1, "", "plot_migration"], [140, 2, 1, "", "quantity"], [140, 3, 1, "", "read"], [140, 2, 1, "", "required_axes"], [140, 3, 1, "", "slice_by_idx"], [140, 2, 1, "", "tag"], [140, 3, 1, "", "to_edisp_kernel"], [140, 3, 1, "", "to_hdulist"], [140, 3, 1, "", "to_table"], [140, 3, 1, "", "to_table_hdu"], [140, 3, 1, "", "to_unit"], [140, 2, 1, "", "unit"], [140, 3, 1, "", "write"]], "gammapy.irf.FoVAlignment": [[141, 2, 1, "", "ALTAZ"], [141, 2, 1, "", "RADEC"]], "gammapy.irf.IRF": [[142, 2, 1, "", "axes"], [142, 3, 1, "", "cumsum"], [142, 2, 1, "", "data"], [142, 2, 1, "", "default_interp_kwargs"], [142, 3, 1, "", "evaluate"], [142, 2, 1, "", "fov_alignment"], [142, 3, 1, "", "from_hdulist"], [142, 3, 1, "", "from_table"], [142, 2, 1, "", "has_offset_axis"], [142, 3, 1, "", "integral"], [142, 3, 1, "", "integrate_log_log"], [142, 3, 1, "", "interp_missing_data"], [142, 3, 1, "", "is_allclose"], [142, 2, 1, "", "is_pointlike"], [142, 3, 1, "", "normalize"], [142, 3, 1, "", "pad"], [142, 2, 1, "", "quantity"], [142, 3, 1, "", "read"], [142, 2, 1, "", "required_axes"], [142, 3, 1, "", "slice_by_idx"], [142, 2, 1, "", "tag"], [142, 3, 1, "", "to_hdulist"], [142, 3, 1, "", "to_table"], [142, 3, 1, "", "to_table_hdu"], [142, 3, 1, "", "to_unit"], [142, 2, 1, "", "unit"], [142, 3, 1, "", "write"]], "gammapy.irf.IRFMap": [[143, 3, 1, "", "copy"], [143, 3, 1, "", "cutout"], [143, 3, 1, "", "downsample"], [143, 3, 1, "", "from_hdulist"], [143, 2, 1, "", "mask_safe_image"], [143, 3, 1, "", "read"], [143, 2, 1, "", "required_axes"], [143, 3, 1, "", "slice_by_idx"], [143, 3, 1, "", "stack"], [143, 2, 1, "", "tag"], [143, 3, 1, "", "to_hdulist"], [143, 3, 1, "", "to_region_nd_map"], [143, 3, 1, "", "write"]], "gammapy.irf.PSF3D": [[145, 2, 1, "", "axes"], [145, 3, 1, "", "containment"], [145, 3, 1, "", "containment_radius"], [145, 3, 1, "", "cumsum"], [145, 2, 1, "", "data"], [145, 2, 1, "", "default_interp_kwargs"], [145, 2, 1, "", "default_unit"], [145, 3, 1, "", "evaluate"], [145, 2, 1, "", "fov_alignment"], [145, 3, 1, "", "from_hdulist"], [145, 3, 1, "", "from_table"], [145, 2, 1, "", "has_offset_axis"], [145, 3, 1, "", "info"], [145, 3, 1, "", "integral"], [145, 3, 1, "", "integrate_log_log"], [145, 3, 1, "", "interp_missing_data"], [145, 3, 1, "", "is_allclose"], [145, 2, 1, "", "is_pointlike"], [145, 3, 1, "", "normalize"], [145, 3, 1, "", "pad"], [145, 3, 1, "", "peek"], [145, 3, 1, "", "plot_containment_radius"], [145, 3, 1, "", "plot_containment_radius_vs_energy"], [145, 3, 1, "", "plot_psf_vs_rad"], [145, 2, 1, "", "quantity"], [145, 3, 1, "", "read"], [145, 2, 1, "", "required_axes"], [145, 3, 1, "", "slice_by_idx"], [145, 2, 1, "", "tag"], [145, 3, 1, "", "to_hdulist"], [145, 3, 1, "", "to_table"], [145, 3, 1, "", "to_table_hdu"], [145, 3, 1, "", "to_unit"], [145, 2, 1, "", "unit"], [145, 3, 1, "", "write"]], "gammapy.irf.PSFKernel": [[146, 2, 1, "", "data"], [146, 3, 1, "", "from_gauss"], [146, 3, 1, "", "from_spatial_model"], [146, 3, 1, "", "normalize"], [146, 3, 1, "", "peek"], [146, 3, 1, "", "plot_kernel"], [146, 2, 1, "", "psf_kernel_map"], [146, 3, 1, "", "read"], [146, 3, 1, "", "slice_by_idx"], [146, 3, 1, "", "to_image"], [146, 3, 1, "", "write"]], "gammapy.irf.PSFKing": [[147, 2, 1, "", "axes"], [147, 3, 1, "", "containment"], [147, 3, 1, "", "containment_radius"], [147, 3, 1, "", "cumsum"], [147, 2, 1, "", "data"], [147, 2, 1, "", "default_interp_kwargs"], [147, 3, 1, "", "evaluate"], [147, 3, 1, "", "evaluate_containment"], [147, 3, 1, "", "evaluate_direct"], [147, 3, 1, "", "evaluate_parameters"], [147, 2, 1, "", "fov_alignment"], [147, 3, 1, "", "from_hdulist"], [147, 3, 1, "", "from_table"], [147, 2, 1, "", "has_offset_axis"], [147, 3, 1, "", "info"], [147, 3, 1, "", "integral"], [147, 3, 1, "", "integrate_log_log"], [147, 3, 1, "", "interp_missing_data"], [147, 3, 1, "", "is_allclose"], [147, 2, 1, "", "is_pointlike"], [147, 3, 1, "", "normalize"], [147, 3, 1, "", "pad"], [147, 3, 1, "", "peek"], [147, 3, 1, "", "plot_containment_radius"], [147, 3, 1, "", "plot_containment_radius_vs_energy"], [147, 3, 1, "", "plot_psf_vs_rad"], [147, 2, 1, "", "quantity"], [147, 3, 1, "", "read"], [147, 2, 1, "", "required_axes"], [147, 2, 1, "", "required_parameters"], [147, 3, 1, "", "slice_by_idx"], [147, 2, 1, "", "tag"], [147, 3, 1, "", "to_hdulist"], [147, 3, 1, "", "to_psf3d"], [147, 3, 1, "", "to_table"], [147, 3, 1, "", "to_table_hdu"], [147, 3, 1, "", "to_unit"], [147, 2, 1, "", "unit"], [147, 3, 1, "", "write"]], "gammapy.irf.PSFMap": [[148, 3, 1, "", "containment"], [148, 3, 1, "", "containment_radius"], [148, 3, 1, "", "containment_radius_map"], [148, 3, 1, "", "copy"], [148, 3, 1, "", "cutout"], [148, 3, 1, "", "downsample"], [148, 2, 1, "", "energy_name"], [148, 3, 1, "", "from_gauss"], [148, 3, 1, "", "from_geom"], [148, 3, 1, "", "from_hdulist"], [148, 3, 1, "", "get_psf_kernel"], [148, 2, 1, "", "mask_safe_image"], [148, 3, 1, "", "normalize"], [148, 3, 1, "", "peek"], [148, 3, 1, "", "plot_containment_radius_vs_energy"], [148, 3, 1, "", "plot_psf_vs_rad"], [148, 2, 1, "", "psf_map"], [148, 3, 1, "", "read"], [148, 2, 1, "", "required_axes"], [148, 3, 1, "", "sample_coord"], [148, 3, 1, "", "slice_by_idx"], [148, 3, 1, "", "stack"], [148, 2, 1, "", "tag"], [148, 3, 1, "", "to_hdulist"], [148, 3, 1, "", "to_image"], [148, 3, 1, "", "to_region_nd_map"], [148, 3, 1, "", "write"]], "gammapy.irf.ParametricPSF": [[149, 2, 1, "", "axes"], [149, 3, 1, "", "containment"], [149, 3, 1, "", "containment_radius"], [149, 3, 1, "", "cumsum"], [149, 2, 1, "", "data"], [149, 2, 1, "", "default_interp_kwargs"], [149, 3, 1, "", "evaluate"], [149, 3, 1, "", "evaluate_containment"], [149, 3, 1, "", "evaluate_direct"], [149, 3, 1, "", "evaluate_parameters"], [149, 2, 1, "", "fov_alignment"], [149, 3, 1, "", "from_hdulist"], [149, 3, 1, "", "from_table"], [149, 2, 1, "", "has_offset_axis"], [149, 3, 1, "", "info"], [149, 3, 1, "", "integral"], [149, 3, 1, "", "integrate_log_log"], [149, 3, 1, "", "interp_missing_data"], [149, 3, 1, "", "is_allclose"], [149, 2, 1, "", "is_pointlike"], [149, 3, 1, "", "normalize"], [149, 3, 1, "", "pad"], [149, 3, 1, "", "peek"], [149, 3, 1, "", "plot_containment_radius"], [149, 3, 1, "", "plot_containment_radius_vs_energy"], [149, 3, 1, "", "plot_psf_vs_rad"], [149, 2, 1, "", "quantity"], [149, 3, 1, "", "read"], [149, 2, 1, "", "required_axes"], [149, 2, 1, "", "required_parameters"], [149, 3, 1, "", "slice_by_idx"], [149, 2, 1, "", "tag"], [149, 3, 1, "", "to_hdulist"], [149, 3, 1, "", "to_psf3d"], [149, 3, 1, "", "to_table"], [149, 3, 1, "", "to_table_hdu"], [149, 3, 1, "", "to_unit"], [149, 2, 1, "", "unit"], [149, 3, 1, "", "write"]], "gammapy.irf.RadMax2D": [[150, 2, 1, "", "axes"], [150, 3, 1, "", "cumsum"], [150, 2, 1, "", "data"], [150, 2, 1, "", "default_interp_kwargs"], [150, 2, 1, "", "default_unit"], [150, 3, 1, "", "evaluate"], [150, 2, 1, "", "fov_alignment"], [150, 3, 1, "", "from_hdulist"], [150, 3, 1, "", "from_irf"], [150, 3, 1, "", "from_table"], [150, 2, 1, "", "has_offset_axis"], [150, 3, 1, "", "integral"], [150, 3, 1, "", "integrate_log_log"], [150, 3, 1, "", "interp_missing_data"], [150, 3, 1, "", "is_allclose"], [150, 2, 1, "", "is_fixed_rad_max"], [150, 2, 1, "", "is_pointlike"], [150, 3, 1, "", "normalize"], [150, 3, 1, "", "pad"], [150, 3, 1, "", "plot_rad_max_vs_energy"], [150, 2, 1, "", "quantity"], [150, 3, 1, "", "read"], [150, 2, 1, "", "required_axes"], [150, 3, 1, "", "slice_by_idx"], [150, 2, 1, "", "tag"], [150, 3, 1, "", "to_hdulist"], [150, 3, 1, "", "to_table"], [150, 3, 1, "", "to_table_hdu"], [150, 3, 1, "", "to_unit"], [150, 2, 1, "", "unit"], [150, 3, 1, "", "write"]], "gammapy.irf.RecoPSFMap": [[151, 3, 1, "", "containment"], [151, 3, 1, "", "containment_radius"], [151, 3, 1, "", "containment_radius_map"], [151, 3, 1, "", "copy"], [151, 3, 1, "", "cutout"], [151, 3, 1, "", "downsample"], [151, 2, 1, "", "energy_name"], [151, 3, 1, "", "from_gauss"], [151, 3, 1, "", "from_geom"], [151, 3, 1, "", "from_hdulist"], [151, 3, 1, "", "get_psf_kernel"], [151, 2, 1, "", "mask_safe_image"], [151, 3, 1, "", "normalize"], [151, 3, 1, "", "peek"], [151, 3, 1, "", "plot_containment_radius_vs_energy"], [151, 3, 1, "", "plot_psf_vs_rad"], [151, 2, 1, "", "psf_map"], [151, 3, 1, "", "read"], [151, 2, 1, "", "required_axes"], [151, 3, 1, "", "sample_coord"], [151, 3, 1, "", "slice_by_idx"], [151, 3, 1, "", "stack"], [151, 2, 1, "", "tag"], [151, 3, 1, "", "to_hdulist"], [151, 3, 1, "", "to_image"], [151, 3, 1, "", "to_region_nd_map"], [151, 3, 1, "", "write"]], "gammapy.makers": [[153, 1, 1, "", "AdaptiveRingBackgroundMaker"], [154, 1, 1, "", "DatasetsMaker"], [155, 1, 1, "", "FoVBackgroundMaker"], [156, 5, 1, "", "MAKER_REGISTRY"], [157, 1, 1, "", "Maker"], [158, 1, 1, "", "MapDatasetMaker"], [159, 1, 1, "", "PhaseBackgroundMaker"], [160, 1, 1, "", "ReflectedRegionsBackgroundMaker"], [161, 1, 1, "", "ReflectedRegionsFinder"], [162, 1, 1, "", "RegionsFinder"], [163, 1, 1, "", "RingBackgroundMaker"], [164, 1, 1, "", "SafeMaskMaker"], [165, 1, 1, "", "SpectrumDatasetMaker"], [166, 1, 1, "", "WobbleRegionsFinder"], [8, 0, 0, "-", "utils"]], "gammapy.makers.AdaptiveRingBackgroundMaker": [[153, 3, 1, "", "kernels"], [153, 3, 1, "", "make_cubes"], [153, 3, 1, "", "run"], [153, 2, 1, "", "tag"]], "gammapy.makers.DatasetsMaker": [[154, 3, 1, "", "callback"], [154, 3, 1, "", "error_callback"], [154, 3, 1, "", "make_dataset"], [154, 2, 1, "", "n_jobs"], [154, 2, 1, "", "offset_max"], [154, 2, 1, "", "parallel_backend"], [154, 3, 1, "", "run"], [154, 2, 1, "", "safe_mask_maker"], [154, 2, 1, "", "tag"]], "gammapy.makers.FoVBackgroundMaker": [[155, 2, 1, "", "available_methods"], [155, 3, 1, "", "make_background_fit"], [155, 3, 1, "", "make_background_scale"], [155, 3, 1, "", "make_default_fov_background_model"], [155, 3, 1, "", "make_exclusion_mask"], [155, 2, 1, "", "method"], [155, 3, 1, "", "run"], [155, 2, 1, "", "tag"]], "gammapy.makers.Maker": [[157, 3, 1, "", "run"], [157, 2, 1, "", "tag"]], "gammapy.makers.MapDatasetMaker": [[158, 2, 1, "", "available_selection"], [158, 3, 1, "", "make_background"], [158, 3, 1, "", "make_counts"], [158, 3, 1, "", "make_edisp"], [158, 3, 1, "", "make_edisp_kernel"], [158, 3, 1, "", "make_exposure"], [158, 3, 1, "", "make_exposure_irf"], [158, 3, 1, "", "make_meta_table"], [158, 3, 1, "", "make_psf"], [158, 3, 1, "", "run"], [158, 2, 1, "", "tag"]], "gammapy.makers.PhaseBackgroundMaker": [[159, 3, 1, "", "make_counts"], [159, 3, 1, "", "make_counts_off"], [159, 3, 1, "", "run"], [159, 2, 1, "", "tag"]], "gammapy.makers.ReflectedRegionsBackgroundMaker": [[160, 3, 1, "", "make_counts_off"], [160, 3, 1, "", "run"], [160, 2, 1, "", "tag"]], "gammapy.makers.ReflectedRegionsFinder": [[161, 3, 1, "", "run"]], "gammapy.makers.RegionsFinder": [[162, 3, 1, "", "run"]], "gammapy.makers.RingBackgroundMaker": [[163, 3, 1, "", "kernel"], [163, 3, 1, "", "make_maps_off"], [163, 3, 1, "", "run"], [163, 2, 1, "", "tag"]], "gammapy.makers.SafeMaskMaker": [[164, 2, 1, "", "available_methods"], [164, 3, 1, "", "make_mask_bkg_invalid"], [164, 3, 1, "", "make_mask_energy_aeff_default"], [164, 3, 1, "", "make_mask_energy_aeff_max"], [164, 3, 1, "", "make_mask_energy_bkg_peak"], [164, 3, 1, "", "make_mask_energy_edisp_bias"], [164, 3, 1, "", "make_mask_offset_max"], [164, 3, 1, "", "run"], [164, 2, 1, "", "tag"]], "gammapy.makers.SpectrumDatasetMaker": [[165, 2, 1, "", "available_selection"], [165, 3, 1, "", "make_background"], [165, 3, 1, "", "make_counts"], [165, 3, 1, "", "make_edisp"], [165, 3, 1, "", "make_edisp_kernel"], [165, 3, 1, "", "make_exposure"], [165, 3, 1, "", "make_exposure_irf"], [165, 3, 1, "", "make_meta_table"], [165, 3, 1, "", "make_psf"], [165, 3, 1, "", "run"], [165, 2, 1, "", "tag"]], "gammapy.makers.WobbleRegionsFinder": [[166, 3, 1, "", "run"]], "gammapy.makers.utils": [[167, 4, 1, "", "make_counts_rad_max"], [168, 4, 1, "", "make_edisp_kernel_map"], [169, 4, 1, "", "make_edisp_map"], [170, 4, 1, "", "make_effective_livetime_map"], [171, 4, 1, "", "make_map_background_irf"], [172, 4, 1, "", "make_map_exposure_true_energy"], [173, 4, 1, "", "make_observation_time_map"], [174, 4, 1, "", "make_psf_map"], [175, 4, 1, "", "make_theta_squared_table"]], "gammapy.maps": [[176, 1, 1, "", "Geom"], [177, 1, 1, "", "HpxGeom"], [178, 1, 1, "", "HpxMap"], [179, 1, 1, "", "HpxNDMap"], [180, 1, 1, "", "LabelMapAxis"], [181, 1, 1, "", "Map"], [182, 1, 1, "", "MapAxes"], [183, 1, 1, "", "MapAxis"], [184, 1, 1, "", "MapCoord"], [185, 1, 1, "", "Maps"], [186, 1, 1, "", "RegionGeom"], [187, 1, 1, "", "RegionNDMap"], [188, 1, 1, "", "TimeMapAxis"], [189, 1, 1, "", "WcsGeom"], [190, 1, 1, "", "WcsMap"], [191, 1, 1, "", "WcsNDMap"], [192, 4, 1, "", "containment_radius"], [193, 4, 1, "", "containment_region"]], "gammapy.maps.Geom": [[176, 2, 1, "", "as_energy_true"], [176, 2, 1, "", "center_coord"], [176, 2, 1, "", "center_pix"], [176, 2, 1, "", "center_skydir"], [176, 3, 1, "", "contains"], [176, 3, 1, "", "contains_pix"], [176, 3, 1, "", "coord_to_idx"], [176, 3, 1, "", "coord_to_pix"], [176, 3, 1, "", "copy"], [176, 3, 1, "", "crop"], [176, 3, 1, "", "data_nbytes"], [176, 2, 1, "", "data_shape"], [176, 3, 1, "", "downsample"], [176, 3, 1, "", "drop"], [176, 3, 1, "", "energy_mask"], [176, 3, 1, "", "from_hdulist"], [176, 3, 1, "", "get_coord"], [176, 3, 1, "", "get_idx"], [176, 2, 1, "", "has_energy_axis"], [176, 2, 1, "", "is_allsky"], [176, 2, 1, "", "is_flat"], [176, 2, 1, "", "is_image"], [176, 3, 1, "", "pad"], [176, 3, 1, "", "pix_to_coord"], [176, 3, 1, "", "pix_to_idx"], [176, 3, 1, "", "rename_axes"], [176, 3, 1, "", "replace_axis"], [176, 3, 1, "", "resample_axis"], [176, 3, 1, "", "slice_by_idx"], [176, 3, 1, "", "solid_angle"], [176, 3, 1, "", "squash"], [176, 3, 1, "", "to_bands_hdu"], [176, 3, 1, "", "to_cube"], [176, 3, 1, "", "to_image"], [176, 3, 1, "", "upsample"]], "gammapy.maps.HpxGeom": [[177, 2, 1, "", "as_energy_true"], [177, 2, 1, "", "axes"], [177, 2, 1, "", "axes_names"], [177, 2, 1, "", "center_coord"], [177, 2, 1, "", "center_pix"], [177, 2, 1, "", "center_skydir"], [177, 3, 1, "", "contains"], [177, 3, 1, "", "contains_pix"], [177, 3, 1, "", "coord_to_idx"], [177, 3, 1, "", "coord_to_pix"], [177, 3, 1, "", "copy"], [177, 3, 1, "", "create"], [177, 3, 1, "", "crop"], [177, 3, 1, "", "cutout"], [177, 3, 1, "", "data_nbytes"], [177, 2, 1, "", "data_shape"], [177, 2, 1, "", "data_shape_axes"], [177, 3, 1, "", "downsample"], [177, 3, 1, "", "drop"], [177, 3, 1, "", "energy_mask"], [177, 2, 1, "", "frame"], [177, 3, 1, "", "from_hdu"], [177, 3, 1, "", "from_hdulist"], [177, 3, 1, "", "from_header"], [177, 3, 1, "", "get_coord"], [177, 3, 1, "", "get_idx"], [177, 3, 1, "", "get_index_list"], [177, 3, 1, "", "global_to_local"], [177, 2, 1, "", "has_energy_axis"], [177, 3, 1, "", "interp_weights"], [177, 2, 1, "", "ipix"], [177, 3, 1, "", "is_aligned"], [177, 3, 1, "", "is_allclose"], [177, 2, 1, "", "is_allsky"], [177, 2, 1, "", "is_flat"], [177, 2, 1, "", "is_hpx"], [177, 2, 1, "", "is_image"], [177, 2, 1, "", "is_region"], [177, 2, 1, "", "is_regular"], [177, 3, 1, "", "local_to_global"], [177, 2, 1, "", "ndim"], [177, 2, 1, "", "nest"], [177, 2, 1, "", "npix"], [177, 2, 1, "", "npix_max"], [177, 2, 1, "", "nside"], [177, 2, 1, "", "order"], [177, 2, 1, "", "ordering"], [177, 3, 1, "", "pad"], [177, 3, 1, "", "pix_to_coord"], [177, 3, 1, "", "pix_to_idx"], [177, 2, 1, "", "pixel_scales"], [177, 2, 1, "", "projection"], [177, 2, 1, "", "region"], [177, 3, 1, "", "region_mask"], [177, 3, 1, "", "rename_axes"], [177, 3, 1, "", "replace_axis"], [177, 3, 1, "", "resample_axis"], [177, 3, 1, "", "separation"], [177, 2, 1, "", "shape_axes"], [177, 3, 1, "", "slice_by_idx"], [177, 3, 1, "", "solid_angle"], [177, 3, 1, "", "squash"], [177, 3, 1, "", "to_bands_hdu"], [177, 3, 1, "", "to_binsz"], [177, 3, 1, "", "to_cube"], [177, 3, 1, "", "to_header"], [177, 3, 1, "", "to_image"], [177, 3, 1, "", "to_nside"], [177, 3, 1, "", "to_swapped"], [177, 3, 1, "", "to_wcs_geom"], [177, 3, 1, "", "to_wcs_tiles"], [177, 3, 1, "", "upsample"], [177, 2, 1, "", "width"]], "gammapy.maps.HpxMap": [[178, 3, 1, "", "coadd"], [178, 3, 1, "", "copy"], [178, 3, 1, "", "create"], [178, 3, 1, "", "crop"], [178, 3, 1, "", "cumsum"], [178, 2, 1, "", "data"], [178, 3, 1, "", "dot"], [178, 3, 1, "", "downsample"], [178, 3, 1, "", "fill_by_coord"], [178, 3, 1, "", "fill_by_idx"], [178, 3, 1, "", "fill_by_pix"], [178, 3, 1, "", "fill_events"], [178, 3, 1, "", "from_geom"], [178, 3, 1, "", "from_hdulist"], [178, 3, 1, "", "from_stack"], [178, 2, 1, "", "geom"], [178, 3, 1, "", "get_by_coord"], [178, 3, 1, "", "get_by_idx"], [178, 3, 1, "", "get_by_pix"], [178, 3, 1, "", "get_image_by_coord"], [178, 3, 1, "", "get_image_by_idx"], [178, 3, 1, "", "get_image_by_pix"], [178, 3, 1, "", "get_spectrum"], [178, 3, 1, "", "integral"], [178, 3, 1, "", "interp_by_coord"], [178, 3, 1, "", "interp_by_pix"], [178, 3, 1, "", "interp_to_geom"], [178, 3, 1, "", "is_allclose"], [178, 2, 1, "", "is_mask"], [178, 3, 1, "", "iter_by_axis"], [178, 3, 1, "", "iter_by_image"], [178, 3, 1, "", "iter_by_image_data"], [178, 3, 1, "", "iter_by_image_index"], [178, 3, 1, "", "mask_nearest_position"], [178, 2, 1, "", "meta"], [178, 3, 1, "", "normalize"], [178, 3, 1, "", "pad"], [178, 3, 1, "", "plot_grid"], [178, 3, 1, "", "plot_interactive"], [178, 2, 1, "", "quantity"], [178, 3, 1, "", "read"], [178, 3, 1, "", "reduce"], [178, 3, 1, "", "reduce_over_axes"], [178, 3, 1, "", "rename_axes"], [178, 3, 1, "", "reorder_axes"], [178, 3, 1, "", "reproject_by_image"], [178, 3, 1, "", "reproject_to_geom"], [178, 3, 1, "", "resample"], [178, 3, 1, "", "resample_axis"], [178, 3, 1, "", "sample_coord"], [178, 3, 1, "", "set_by_coord"], [178, 3, 1, "", "set_by_idx"], [178, 3, 1, "", "set_by_pix"], [178, 3, 1, "", "slice_by_idx"], [178, 3, 1, "", "split_by_axis"], [178, 3, 1, "", "sum_over_axes"], [178, 2, 1, "", "tag"], [178, 3, 1, "", "to_cube"], [178, 3, 1, "", "to_hdu"], [178, 3, 1, "", "to_hdulist"], [178, 3, 1, "", "to_swapped"], [178, 3, 1, "", "to_unit"], [178, 3, 1, "", "to_wcs"], [178, 2, 1, "", "unit"], [178, 3, 1, "", "upsample"], [178, 3, 1, "", "write"]], "gammapy.maps.HpxNDMap": [[179, 3, 1, "", "coadd"], [179, 3, 1, "", "convolve"], [179, 3, 1, "", "convolve_full"], [179, 3, 1, "", "convolve_wcs"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "create"], [179, 3, 1, "", "crop"], [179, 3, 1, "", "cumsum"], [179, 3, 1, "", "cutout"], [179, 2, 1, "", "data"], [179, 3, 1, "", "dot"], [179, 3, 1, "", "downsample"], [179, 3, 1, "", "fill_by_coord"], [179, 3, 1, "", "fill_by_idx"], [179, 3, 1, "", "fill_by_pix"], [179, 3, 1, "", "fill_events"], [179, 3, 1, "", "from_geom"], [179, 3, 1, "", "from_hdu"], [179, 3, 1, "", "from_hdulist"], [179, 3, 1, "", "from_stack"], [179, 3, 1, "", "from_wcs_tiles"], [179, 2, 1, "", "geom"], [179, 3, 1, "", "get_by_coord"], [179, 3, 1, "", "get_by_idx"], [179, 3, 1, "", "get_by_pix"], [179, 3, 1, "", "get_image_by_coord"], [179, 3, 1, "", "get_image_by_idx"], [179, 3, 1, "", "get_image_by_pix"], [179, 3, 1, "", "get_spectrum"], [179, 3, 1, "", "integral"], [179, 3, 1, "", "interp_by_coord"], [179, 3, 1, "", "interp_by_pix"], [179, 3, 1, "", "interp_to_geom"], [179, 3, 1, "", "is_allclose"], [179, 2, 1, "", "is_mask"], [179, 3, 1, "", "iter_by_axis"], [179, 3, 1, "", "iter_by_image"], [179, 3, 1, "", "iter_by_image_data"], [179, 3, 1, "", "iter_by_image_index"], [179, 3, 1, "", "mask_nearest_position"], [179, 2, 1, "", "meta"], [179, 3, 1, "", "normalize"], [179, 3, 1, "", "pad"], [179, 3, 1, "", "plot"], [179, 3, 1, "", "plot_grid"], [179, 3, 1, "", "plot_interactive"], [179, 3, 1, "", "plot_mask"], [179, 2, 1, "", "quantity"], [179, 3, 1, "", "read"], [179, 3, 1, "", "reduce"], [179, 3, 1, "", "reduce_over_axes"], [179, 3, 1, "", "rename_axes"], [179, 3, 1, "", "reorder_axes"], [179, 3, 1, "", "reproject_by_image"], [179, 3, 1, "", "reproject_to_geom"], [179, 3, 1, "", "resample"], [179, 3, 1, "", "resample_axis"], [179, 3, 1, "", "sample_coord"], [179, 3, 1, "", "set_by_coord"], [179, 3, 1, "", "set_by_idx"], [179, 3, 1, "", "set_by_pix"], [179, 3, 1, "", "slice_by_idx"], [179, 3, 1, "", "smooth"], [179, 3, 1, "", "split_by_axis"], [179, 3, 1, "", "stack"], [179, 3, 1, "", "sum_over_axes"], [179, 2, 1, "", "tag"], [179, 3, 1, "", "to_cube"], [179, 3, 1, "", "to_hdu"], [179, 3, 1, "", "to_hdulist"], [179, 3, 1, "", "to_nside"], [179, 3, 1, "", "to_region_nd_map"], [179, 3, 1, "", "to_swapped"], [179, 3, 1, "", "to_unit"], [179, 3, 1, "", "to_wcs"], [179, 3, 1, "", "to_wcs_tiles"], [179, 2, 1, "", "unit"], [179, 3, 1, "", "upsample"], [179, 3, 1, "", "write"]], "gammapy.maps.LabelMapAxis": [[180, 2, 1, "", "as_plot_center"], [180, 2, 1, "", "as_plot_edges"], [180, 2, 1, "", "as_plot_labels"], [180, 2, 1, "", "as_plot_xerr"], [180, 3, 1, "", "assert_name"], [180, 2, 1, "", "bin_width"], [180, 2, 1, "", "center"], [180, 3, 1, "", "concatenate"], [180, 3, 1, "", "coord_to_idx"], [180, 3, 1, "", "coord_to_pix"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "downsample"], [180, 2, 1, "", "edges"], [180, 2, 1, "", "edges_max"], [180, 2, 1, "", "edges_min"], [180, 3, 1, "", "format_plot_xaxis"], [180, 3, 1, "", "from_stack"], [180, 3, 1, "", "from_table"], [180, 3, 1, "", "is_allclose"], [180, 2, 1, "", "name"], [180, 2, 1, "", "nbin"], [180, 2, 1, "", "node_type"], [180, 3, 1, "", "pad"], [180, 3, 1, "", "pix_to_coord"], [180, 3, 1, "", "pix_to_idx"], [180, 3, 1, "", "resample"], [180, 3, 1, "", "slice"], [180, 3, 1, "", "squash"], [180, 3, 1, "", "to_header"], [180, 2, 1, "", "unit"], [180, 3, 1, "", "upsample"]], "gammapy.maps.Map": [[181, 3, 1, "", "coadd"], [181, 3, 1, "", "copy"], [181, 3, 1, "", "create"], [181, 3, 1, "", "crop"], [181, 3, 1, "", "cumsum"], [181, 2, 1, "", "data"], [181, 3, 1, "", "dot"], [181, 3, 1, "", "downsample"], [181, 3, 1, "", "fill_by_coord"], [181, 3, 1, "", "fill_by_idx"], [181, 3, 1, "", "fill_by_pix"], [181, 3, 1, "", "fill_events"], [181, 3, 1, "", "from_geom"], [181, 3, 1, "", "from_hdulist"], [181, 3, 1, "", "from_stack"], [181, 2, 1, "", "geom"], [181, 3, 1, "", "get_by_coord"], [181, 3, 1, "", "get_by_idx"], [181, 3, 1, "", "get_by_pix"], [181, 3, 1, "", "get_image_by_coord"], [181, 3, 1, "", "get_image_by_idx"], [181, 3, 1, "", "get_image_by_pix"], [181, 3, 1, "", "get_spectrum"], [181, 3, 1, "", "integral"], [181, 3, 1, "", "interp_by_coord"], [181, 3, 1, "", "interp_by_pix"], [181, 3, 1, "", "interp_to_geom"], [181, 3, 1, "", "is_allclose"], [181, 2, 1, "", "is_mask"], [181, 3, 1, "", "iter_by_axis"], [181, 3, 1, "", "iter_by_image"], [181, 3, 1, "", "iter_by_image_data"], [181, 3, 1, "", "iter_by_image_index"], [181, 3, 1, "", "mask_nearest_position"], [181, 2, 1, "", "meta"], [181, 3, 1, "", "normalize"], [181, 3, 1, "", "pad"], [181, 3, 1, "", "plot_grid"], [181, 3, 1, "", "plot_interactive"], [181, 2, 1, "", "quantity"], [181, 3, 1, "", "read"], [181, 3, 1, "", "reduce"], [181, 3, 1, "", "reduce_over_axes"], [181, 3, 1, "", "rename_axes"], [181, 3, 1, "", "reorder_axes"], [181, 3, 1, "", "reproject_by_image"], [181, 3, 1, "", "reproject_to_geom"], [181, 3, 1, "", "resample"], [181, 3, 1, "", "resample_axis"], [181, 3, 1, "", "sample_coord"], [181, 3, 1, "", "set_by_coord"], [181, 3, 1, "", "set_by_idx"], [181, 3, 1, "", "set_by_pix"], [181, 3, 1, "", "slice_by_idx"], [181, 3, 1, "", "split_by_axis"], [181, 3, 1, "", "sum_over_axes"], [181, 2, 1, "", "tag"], [181, 3, 1, "", "to_cube"], [181, 3, 1, "", "to_unit"], [181, 2, 1, "", "unit"], [181, 3, 1, "", "upsample"], [181, 3, 1, "", "write"]], "gammapy.maps.MapAxes": [[182, 3, 1, "", "assert_names"], [182, 3, 1, "", "bin_volume"], [182, 2, 1, "", "center_coord"], [182, 3, 1, "", "coord_to_idx"], [182, 3, 1, "", "coord_to_pix"], [182, 3, 1, "", "copy"], [182, 3, 1, "", "count"], [182, 3, 1, "", "downsample"], [182, 3, 1, "", "drop"], [182, 3, 1, "", "from_default"], [182, 3, 1, "", "from_table"], [182, 3, 1, "", "from_table_hdu"], [182, 3, 1, "", "get_coord"], [182, 3, 1, "", "index"], [182, 3, 1, "", "index_data"], [182, 3, 1, "", "is_allclose"], [182, 2, 1, "", "is_flat"], [182, 2, 1, "", "is_unidimensional"], [182, 2, 1, "", "iter_with_reshape"], [182, 2, 1, "", "names"], [182, 3, 1, "", "pad"], [182, 3, 1, "", "pix_to_coord"], [182, 3, 1, "", "pix_to_idx"], [182, 2, 1, "", "primary_axis"], [182, 3, 1, "", "rename_axes"], [182, 3, 1, "", "replace"], [182, 3, 1, "", "resample"], [182, 2, 1, "", "reverse"], [182, 2, 1, "", "shape"], [182, 3, 1, "", "slice_by_idx"], [182, 3, 1, "", "squash"], [182, 3, 1, "", "to_header"], [182, 3, 1, "", "to_table"], [182, 3, 1, "", "to_table_hdu"], [182, 3, 1, "", "upsample"]], "gammapy.maps.MapAxis": [[183, 2, 1, "", "as_plot_center"], [183, 2, 1, "", "as_plot_edges"], [183, 2, 1, "", "as_plot_labels"], [183, 2, 1, "", "as_plot_scale"], [183, 2, 1, "", "as_plot_xerr"], [183, 3, 1, "", "assert_name"], [183, 2, 1, "", "bin_width"], [183, 2, 1, "", "bounds"], [183, 2, 1, "", "center"], [183, 3, 1, "", "concatenate"], [183, 3, 1, "", "coord_to_idx"], [183, 3, 1, "", "coord_to_pix"], [183, 3, 1, "", "copy"], [183, 3, 1, "", "downsample"], [183, 2, 1, "", "edges"], [183, 2, 1, "", "edges_max"], [183, 2, 1, "", "edges_min"], [183, 3, 1, "", "format_plot_xaxis"], [183, 3, 1, "", "format_plot_yaxis"], [183, 3, 1, "", "from_bounds"], [183, 3, 1, "", "from_edges"], [183, 3, 1, "", "from_energy_bounds"], [183, 3, 1, "", "from_energy_edges"], [183, 3, 1, "", "from_nodes"], [183, 3, 1, "", "from_stack"], [183, 3, 1, "", "from_table"], [183, 3, 1, "", "from_table_hdu"], [183, 3, 1, "", "group_table"], [183, 2, 1, "", "interp"], [183, 3, 1, "", "is_aligned"], [183, 3, 1, "", "is_allclose"], [183, 2, 1, "", "is_energy_axis"], [183, 2, 1, "", "iter_by_edges"], [183, 2, 1, "", "name"], [183, 2, 1, "", "nbin"], [183, 2, 1, "", "nbin_per_decade"], [183, 2, 1, "", "node_type"], [183, 3, 1, "", "pad"], [183, 3, 1, "", "pix_to_coord"], [183, 3, 1, "", "pix_to_idx"], [183, 3, 1, "", "rename"], [183, 3, 1, "", "round"], [183, 3, 1, "", "slice"], [183, 3, 1, "", "squash"], [183, 3, 1, "", "to_header"], [183, 3, 1, "", "to_node_type"], [183, 3, 1, "", "to_table"], [183, 3, 1, "", "to_table_hdu"], [183, 2, 1, "", "unit"], [183, 3, 1, "", "upsample"], [183, 2, 1, "", "use_center_as_plot_labels"]], "gammapy.maps.MapCoord": [[184, 3, 1, "", "apply_mask"], [184, 2, 1, "", "axis_names"], [184, 2, 1, "", "broadcasted"], [184, 3, 1, "", "copy"], [184, 3, 1, "", "create"], [184, 2, 1, "", "flat"], [184, 2, 1, "", "frame"], [184, 2, 1, "", "lat"], [184, 2, 1, "", "lon"], [184, 2, 1, "", "match_by_name"], [184, 2, 1, "", "ndim"], [184, 2, 1, "", "phi"], [184, 2, 1, "", "shape"], [184, 2, 1, "", "size"], [184, 2, 1, "", "skycoord"], [184, 2, 1, "", "theta"], [184, 3, 1, "", "to_frame"]], "gammapy.maps.Maps": [[185, 3, 1, "", "clear"], [185, 3, 1, "", "from_geom"], [185, 3, 1, "", "from_hdulist"], [185, 2, 1, "", "geom"], [185, 3, 1, "", "get"], [185, 3, 1, "", "items"], [185, 3, 1, "", "keys"], [185, 3, 1, "", "pop"], [185, 3, 1, "", "popitem"], [185, 3, 1, "", "read"], [185, 3, 1, "", "setdefault"], [185, 3, 1, "", "to_hdulist"], [185, 3, 1, "", "update"], [185, 3, 1, "", "values"], [185, 3, 1, "", "write"]], "gammapy.maps.RegionGeom": [[186, 2, 1, "", "as_energy_true"], [186, 2, 1, "", "axes"], [186, 2, 1, "", "axes_names"], [186, 3, 1, "", "bin_volume"], [186, 2, 1, "", "binsz_wcs"], [186, 2, 1, "", "center_coord"], [186, 2, 1, "", "center_pix"], [186, 2, 1, "", "center_skydir"], [186, 3, 1, "", "contains"], [186, 3, 1, "", "contains_pix"], [186, 3, 1, "", "contains_wcs_pix"], [186, 3, 1, "", "coord_to_idx"], [186, 3, 1, "", "coord_to_pix"], [186, 3, 1, "", "copy"], [186, 3, 1, "", "create"], [186, 3, 1, "", "crop"], [186, 3, 1, "", "data_nbytes"], [186, 2, 1, "", "data_shape"], [186, 2, 1, "", "data_shape_axes"], [186, 3, 1, "", "downsample"], [186, 3, 1, "", "drop"], [186, 3, 1, "", "energy_mask"], [186, 2, 1, "", "frame"], [186, 3, 1, "", "from_hdulist"], [186, 3, 1, "", "from_regions"], [186, 3, 1, "", "get_coord"], [186, 3, 1, "", "get_idx"], [186, 3, 1, "", "get_wcs_coord_and_weights"], [186, 2, 1, "", "has_energy_axis"], [186, 2, 1, "", "is_all_point_sky_regions"], [186, 3, 1, "", "is_allclose"], [186, 2, 1, "", "is_allsky"], [186, 2, 1, "", "is_flat"], [186, 2, 1, "", "is_hpx"], [186, 2, 1, "", "is_image"], [186, 2, 1, "", "is_region"], [186, 2, 1, "", "is_regular"], [186, 2, 1, "", "npix"], [186, 3, 1, "", "pad"], [186, 3, 1, "", "pix_to_coord"], [186, 3, 1, "", "pix_to_idx"], [186, 3, 1, "", "plot_region"], [186, 2, 1, "", "projection"], [186, 2, 1, "", "region"], [186, 3, 1, "", "rename_axes"], [186, 3, 1, "", "replace_axis"], [186, 3, 1, "", "resample_axis"], [186, 3, 1, "", "separation"], [186, 3, 1, "", "slice_by_idx"], [186, 3, 1, "", "solid_angle"], [186, 3, 1, "", "squash"], [186, 3, 1, "", "to_bands_hdu"], [186, 3, 1, "", "to_binsz"], [186, 3, 1, "", "to_binsz_wcs"], [186, 3, 1, "", "to_cube"], [186, 3, 1, "", "to_hdulist"], [186, 3, 1, "", "to_image"], [186, 3, 1, "", "to_wcs_geom"], [186, 3, 1, "", "union"], [186, 3, 1, "", "upsample"], [186, 2, 1, "", "wcs"], [186, 2, 1, "", "width"]], "gammapy.maps.RegionNDMap": [[187, 3, 1, "", "coadd"], [187, 3, 1, "", "copy"], [187, 3, 1, "", "create"], [187, 3, 1, "", "crop"], [187, 3, 1, "", "cumsum"], [187, 3, 1, "", "cutout"], [187, 2, 1, "", "data"], [187, 3, 1, "", "dot"], [187, 3, 1, "", "downsample"], [187, 3, 1, "", "fill_by_coord"], [187, 3, 1, "", "fill_by_idx"], [187, 3, 1, "", "fill_by_pix"], [187, 3, 1, "", "fill_events"], [187, 3, 1, "", "from_geom"], [187, 3, 1, "", "from_hdulist"], [187, 3, 1, "", "from_stack"], [187, 3, 1, "", "from_table"], [187, 2, 1, "", "geom"], [187, 3, 1, "", "get_by_coord"], [187, 3, 1, "", "get_by_idx"], [187, 3, 1, "", "get_by_pix"], [187, 3, 1, "", "get_image_by_coord"], [187, 3, 1, "", "get_image_by_idx"], [187, 3, 1, "", "get_image_by_pix"], [187, 3, 1, "", "get_spectrum"], [187, 3, 1, "", "integral"], [187, 3, 1, "", "interp_by_coord"], [187, 3, 1, "", "interp_by_pix"], [187, 3, 1, "", "interp_to_geom"], [187, 3, 1, "", "is_allclose"], [187, 2, 1, "", "is_mask"], [187, 3, 1, "", "iter_by_axis"], [187, 3, 1, "", "iter_by_axis_data"], [187, 3, 1, "", "iter_by_image"], [187, 3, 1, "", "iter_by_image_data"], [187, 3, 1, "", "iter_by_image_index"], [187, 3, 1, "", "mask_nearest_position"], [187, 2, 1, "", "meta"], [187, 3, 1, "", "normalize"], [187, 3, 1, "", "pad"], [187, 3, 1, "", "plot"], [187, 3, 1, "", "plot_grid"], [187, 3, 1, "", "plot_hist"], [187, 3, 1, "", "plot_interactive"], [187, 3, 1, "", "plot_mask"], [187, 3, 1, "", "plot_region"], [187, 2, 1, "", "quantity"], [187, 3, 1, "", "read"], [187, 3, 1, "", "reduce"], [187, 3, 1, "", "reduce_over_axes"], [187, 3, 1, "", "rename_axes"], [187, 3, 1, "", "reorder_axes"], [187, 3, 1, "", "reproject_by_image"], [187, 3, 1, "", "reproject_to_geom"], [187, 3, 1, "", "resample"], [187, 3, 1, "", "resample_axis"], [187, 3, 1, "", "sample_coord"], [187, 3, 1, "", "set_by_coord"], [187, 3, 1, "", "set_by_idx"], [187, 3, 1, "", "set_by_pix"], [187, 3, 1, "", "slice_by_idx"], [187, 3, 1, "", "split_by_axis"], [187, 3, 1, "", "stack"], [187, 3, 1, "", "sum_over_axes"], [187, 2, 1, "", "tag"], [187, 3, 1, "", "to_cube"], [187, 3, 1, "", "to_hdulist"], [187, 3, 1, "", "to_region_nd_map"], [187, 3, 1, "", "to_table"], [187, 3, 1, "", "to_unit"], [187, 2, 1, "", "unit"], [187, 3, 1, "", "upsample"], [187, 3, 1, "", "write"]], "gammapy.maps.TimeMapAxis": [[188, 2, 1, "", "as_plot_center"], [188, 2, 1, "", "as_plot_edges"], [188, 2, 1, "", "as_plot_labels"], [188, 2, 1, "", "as_plot_xerr"], [188, 3, 1, "", "assert_name"], [188, 2, 1, "", "bin_width"], [188, 2, 1, "", "bounds"], [188, 2, 1, "", "center"], [188, 3, 1, "", "coord_to_idx"], [188, 3, 1, "", "coord_to_pix"], [188, 3, 1, "", "copy"], [188, 3, 1, "", "downsample"], [188, 2, 1, "", "edges"], [188, 2, 1, "", "edges_max"], [188, 2, 1, "", "edges_min"], [188, 3, 1, "", "format_plot_xaxis"], [188, 3, 1, "", "from_gti"], [188, 3, 1, "", "from_gti_bounds"], [188, 3, 1, "", "from_table"], [188, 3, 1, "", "from_time_bounds"], [188, 3, 1, "", "from_time_edges"], [188, 3, 1, "", "group_table"], [188, 2, 1, "", "interp"], [188, 3, 1, "", "is_aligned"], [188, 3, 1, "", "is_allclose"], [188, 2, 1, "", "is_contiguous"], [188, 2, 1, "", "iter_by_edges"], [188, 2, 1, "", "name"], [188, 2, 1, "", "nbin"], [188, 2, 1, "", "node_type"], [188, 3, 1, "", "pix_to_coord"], [188, 3, 1, "", "pix_to_idx"], [188, 2, 1, "", "reference_time"], [188, 3, 1, "", "slice"], [188, 3, 1, "", "squash"], [188, 2, 1, "", "time_bounds"], [188, 2, 1, "", "time_delta"], [188, 2, 1, "", "time_edges"], [188, 2, 1, "", "time_format"], [188, 2, 1, "", "time_max"], [188, 2, 1, "", "time_mid"], [188, 2, 1, "", "time_min"], [188, 3, 1, "", "to_contiguous"], [188, 3, 1, "", "to_gti"], [188, 3, 1, "", "to_header"], [188, 2, 1, "", "unit"], [188, 3, 1, "", "upsample"]], "gammapy.maps.WcsGeom": [[189, 2, 1, "", "as_energy_true"], [189, 2, 1, "", "axes"], [189, 2, 1, "", "axes_names"], [189, 3, 1, "", "bin_volume"], [189, 3, 1, "", "binary_structure"], [189, 3, 1, "", "boundary_mask"], [189, 2, 1, "", "center_coord"], [189, 2, 1, "", "center_pix"], [189, 2, 1, "", "center_skydir"], [189, 3, 1, "", "contains"], [189, 3, 1, "", "contains_pix"], [189, 3, 1, "", "coord_to_idx"], [189, 3, 1, "", "coord_to_pix"], [189, 3, 1, "", "copy"], [189, 3, 1, "", "create"], [189, 3, 1, "", "crop"], [189, 3, 1, "", "cutout"], [189, 3, 1, "", "cutout_slices"], [189, 3, 1, "", "data_nbytes"], [189, 2, 1, "", "data_shape"], [189, 2, 1, "", "data_shape_axes"], [189, 2, 1, "", "data_shape_image"], [189, 3, 1, "", "downsample"], [189, 3, 1, "", "drop"], [189, 3, 1, "", "energy_mask"], [189, 2, 1, "", "footprint"], [189, 2, 1, "", "footprint_rectangle_sky_region"], [189, 2, 1, "", "frame"], [189, 3, 1, "", "from_aligned"], [189, 3, 1, "", "from_hdulist"], [189, 3, 1, "", "from_header"], [189, 3, 1, "", "get_coord"], [189, 3, 1, "", "get_idx"], [189, 3, 1, "", "get_pix"], [189, 2, 1, "", "has_energy_axis"], [189, 3, 1, "", "is_aligned"], [189, 3, 1, "", "is_allclose"], [189, 2, 1, "", "is_allsky"], [189, 2, 1, "", "is_flat"], [189, 2, 1, "", "is_hpx"], [189, 2, 1, "", "is_image"], [189, 2, 1, "", "is_region"], [189, 2, 1, "", "is_regular"], [189, 2, 1, "", "ndim"], [189, 2, 1, "", "npix"], [189, 3, 1, "", "pad"], [189, 3, 1, "", "pix_to_coord"], [189, 3, 1, "", "pix_to_idx"], [189, 2, 1, "", "pixel_area"], [189, 2, 1, "", "pixel_scales"], [189, 2, 1, "", "projection"], [189, 3, 1, "", "region_mask"], [189, 3, 1, "", "region_weights"], [189, 3, 1, "", "rename_axes"], [189, 3, 1, "", "replace_axis"], [189, 3, 1, "", "resample_axis"], [189, 3, 1, "", "separation"], [189, 2, 1, "", "shape_axes"], [189, 3, 1, "", "slice_by_idx"], [189, 3, 1, "", "solid_angle"], [189, 3, 1, "", "squash"], [189, 3, 1, "", "to_bands_hdu"], [189, 3, 1, "", "to_binsz"], [189, 3, 1, "", "to_cube"], [189, 3, 1, "", "to_even_npix"], [189, 3, 1, "", "to_header"], [189, 3, 1, "", "to_image"], [189, 3, 1, "", "to_odd_npix"], [189, 3, 1, "", "upsample"], [189, 2, 1, "", "wcs"], [189, 2, 1, "", "width"]], "gammapy.maps.WcsMap": [[190, 3, 1, "", "coadd"], [190, 3, 1, "", "copy"], [190, 3, 1, "", "create"], [190, 3, 1, "", "crop"], [190, 3, 1, "", "cumsum"], [190, 2, 1, "", "data"], [190, 3, 1, "", "dot"], [190, 3, 1, "", "downsample"], [190, 3, 1, "", "fill_by_coord"], [190, 3, 1, "", "fill_by_idx"], [190, 3, 1, "", "fill_by_pix"], [190, 3, 1, "", "fill_events"], [190, 3, 1, "", "from_geom"], [190, 3, 1, "", "from_hdulist"], [190, 3, 1, "", "from_stack"], [190, 2, 1, "", "geom"], [190, 3, 1, "", "get_by_coord"], [190, 3, 1, "", "get_by_idx"], [190, 3, 1, "", "get_by_pix"], [190, 3, 1, "", "get_image_by_coord"], [190, 3, 1, "", "get_image_by_idx"], [190, 3, 1, "", "get_image_by_pix"], [190, 3, 1, "", "get_spectrum"], [190, 3, 1, "", "integral"], [190, 3, 1, "", "interp_by_coord"], [190, 3, 1, "", "interp_by_pix"], [190, 3, 1, "", "interp_to_geom"], [190, 3, 1, "", "is_allclose"], [190, 2, 1, "", "is_mask"], [190, 3, 1, "", "iter_by_axis"], [190, 3, 1, "", "iter_by_image"], [190, 3, 1, "", "iter_by_image_data"], [190, 3, 1, "", "iter_by_image_index"], [190, 3, 1, "", "mask_nearest_position"], [190, 2, 1, "", "meta"], [190, 3, 1, "", "normalize"], [190, 3, 1, "", "pad"], [190, 3, 1, "", "plot_grid"], [190, 3, 1, "", "plot_interactive"], [190, 2, 1, "", "quantity"], [190, 3, 1, "", "read"], [190, 3, 1, "", "reduce"], [190, 3, 1, "", "reduce_over_axes"], [190, 3, 1, "", "rename_axes"], [190, 3, 1, "", "reorder_axes"], [190, 3, 1, "", "reproject_by_image"], [190, 3, 1, "", "reproject_to_geom"], [190, 3, 1, "", "resample"], [190, 3, 1, "", "resample_axis"], [190, 3, 1, "", "sample_coord"], [190, 3, 1, "", "set_by_coord"], [190, 3, 1, "", "set_by_idx"], [190, 3, 1, "", "set_by_pix"], [190, 3, 1, "", "slice_by_idx"], [190, 3, 1, "", "split_by_axis"], [190, 3, 1, "", "sum_over_axes"], [190, 2, 1, "", "tag"], [190, 3, 1, "", "to_cube"], [190, 3, 1, "", "to_hdu"], [190, 3, 1, "", "to_hdulist"], [190, 3, 1, "", "to_unit"], [190, 2, 1, "", "unit"], [190, 3, 1, "", "upsample"], [190, 3, 1, "", "write"]], "gammapy.maps.WcsNDMap": [[191, 3, 1, "", "binary_dilate"], [191, 3, 1, "", "binary_erode"], [191, 3, 1, "", "coadd"], [191, 3, 1, "", "convolve"], [191, 3, 1, "", "copy"], [191, 3, 1, "", "create"], [191, 3, 1, "", "crop"], [191, 3, 1, "", "cumsum"], [191, 3, 1, "", "cutout"], [191, 3, 1, "", "cutout_and_mask_region"], [191, 2, 1, "", "data"], [191, 3, 1, "", "dot"], [191, 3, 1, "", "downsample"], [191, 3, 1, "", "fill_by_coord"], [191, 3, 1, "", "fill_by_idx"], [191, 3, 1, "", "fill_by_pix"], [191, 3, 1, "", "fill_events"], [191, 3, 1, "", "from_geom"], [191, 3, 1, "", "from_hdu"], [191, 3, 1, "", "from_hdulist"], [191, 3, 1, "", "from_stack"], [191, 2, 1, "", "geom"], [191, 3, 1, "", "get_by_coord"], [191, 3, 1, "", "get_by_idx"], [191, 3, 1, "", "get_by_pix"], [191, 3, 1, "", "get_image_by_coord"], [191, 3, 1, "", "get_image_by_idx"], [191, 3, 1, "", "get_image_by_pix"], [191, 3, 1, "", "get_spectrum"], [191, 3, 1, "", "integral"], [191, 3, 1, "", "interp_by_coord"], [191, 3, 1, "", "interp_by_pix"], [191, 3, 1, "", "interp_to_geom"], [191, 3, 1, "", "is_allclose"], [191, 2, 1, "", "is_mask"], [191, 3, 1, "", "iter_by_axis"], [191, 3, 1, "", "iter_by_image"], [191, 3, 1, "", "iter_by_image_data"], [191, 3, 1, "", "iter_by_image_index"], [191, 3, 1, "", "mask_contains_region"], [191, 3, 1, "", "mask_nearest_position"], [191, 2, 1, "", "meta"], [191, 3, 1, "", "normalize"], [191, 3, 1, "", "pad"], [191, 3, 1, "", "plot"], [191, 3, 1, "", "plot_grid"], [191, 3, 1, "", "plot_interactive"], [191, 3, 1, "", "plot_mask"], [191, 2, 1, "", "quantity"], [191, 3, 1, "", "read"], [191, 3, 1, "", "reduce"], [191, 3, 1, "", "reduce_over_axes"], [191, 3, 1, "", "rename_axes"], [191, 3, 1, "", "reorder_axes"], [191, 3, 1, "", "reproject_by_image"], [191, 3, 1, "", "reproject_to_geom"], [191, 3, 1, "", "resample"], [191, 3, 1, "", "resample_axis"], [191, 3, 1, "", "sample_coord"], [191, 3, 1, "", "set_by_coord"], [191, 3, 1, "", "set_by_idx"], [191, 3, 1, "", "set_by_pix"], [191, 3, 1, "", "slice_by_idx"], [191, 3, 1, "", "smooth"], [191, 3, 1, "", "split_by_axis"], [191, 3, 1, "", "stack"], [191, 3, 1, "", "sum_over_axes"], [191, 2, 1, "", "tag"], [191, 3, 1, "", "to_cube"], [191, 3, 1, "", "to_hdu"], [191, 3, 1, "", "to_hdulist"], [191, 3, 1, "", "to_region_nd_map"], [191, 3, 1, "", "to_region_nd_map_histogram"], [191, 3, 1, "", "to_unit"], [191, 2, 1, "", "unit"], [191, 3, 1, "", "upsample"], [191, 3, 1, "", "write"]], "gammapy.modeling": [[194, 1, 1, "", "Covariance"], [195, 1, 1, "", "Fit"], [196, 1, 1, "", "Parameter"], [197, 1, 1, "", "Parameters"], [198, 1, 1, "", "PriorParameter"], [199, 1, 1, "", "PriorParameters"], [10, 0, 0, "-", "models"], [265, 4, 1, "", "select_nested_models"], [266, 4, 1, "", "stat_profile_ul_scipy"]], "gammapy.modeling.Covariance": [[194, 2, 1, "", "correlation"], [194, 2, 1, "", "data"], [194, 3, 1, "", "from_factor_matrix"], [194, 3, 1, "", "from_stack"], [194, 3, 1, "", "get_subcovariance"], [194, 3, 1, "", "plot_correlation"], [194, 2, 1, "", "scipy_mvn"], [194, 3, 1, "", "set_subcovariance"], [194, 2, 1, "", "shape"]], "gammapy.modeling.Fit": [[195, 3, 1, "", "confidence"], [195, 3, 1, "", "covariance"], [195, 3, 1, "", "optimize"], [195, 3, 1, "", "run"], [195, 3, 1, "", "stat_contour"], [195, 3, 1, "", "stat_profile"], [195, 3, 1, "", "stat_surface"]], "gammapy.modeling.Parameter": [[196, 3, 1, "", "autoscale"], [196, 3, 1, "", "check_limits"], [196, 2, 1, "", "conf_max"], [196, 2, 1, "", "conf_min"], [196, 3, 1, "", "copy"], [196, 2, 1, "", "error"], [196, 2, 1, "", "factor"], [196, 2, 1, "", "factor_max"], [196, 2, 1, "", "factor_min"], [196, 2, 1, "", "frozen"], [196, 2, 1, "", "is_norm"], [196, 2, 1, "", "max"], [196, 2, 1, "", "min"], [196, 2, 1, "", "name"], [196, 2, 1, "", "norm_parameters"], [196, 2, 1, "", "prior"], [196, 3, 1, "", "prior_stat_sum"], [196, 2, 1, "", "quantity"], [196, 2, 1, "", "scale"], [196, 2, 1, "", "scale_method"], [196, 2, 1, "", "scan_max"], [196, 2, 1, "", "scan_min"], [196, 2, 1, "", "scan_n_sigma"], [196, 2, 1, "", "scan_values"], [196, 3, 1, "", "to_dict"], [196, 2, 1, "", "type"], [196, 2, 1, "", "unit"], [196, 3, 1, "", "update_from_dict"], [196, 2, 1, "", "value"]], "gammapy.modeling.Parameters": [[197, 3, 1, "", "autoscale"], [197, 3, 1, "", "check_limits"], [197, 3, 1, "", "copy"], [197, 3, 1, "", "count"], [197, 2, 1, "", "free_parameters"], [197, 3, 1, "", "freeze_all"], [197, 3, 1, "", "from_dict"], [197, 3, 1, "", "from_stack"], [197, 3, 1, "", "index"], [197, 2, 1, "", "max"], [197, 2, 1, "", "min"], [197, 2, 1, "", "names"], [197, 2, 1, "", "norm_parameters"], [197, 2, 1, "", "prior"], [197, 3, 1, "", "prior_stat_sum"], [197, 3, 1, "", "restore_status"], [197, 3, 1, "", "select"], [197, 3, 1, "", "set_parameter_factors"], [197, 3, 1, "", "to_dict"], [197, 3, 1, "", "to_table"], [197, 2, 1, "", "types"], [197, 3, 1, "", "unfreeze_all"], [197, 2, 1, "", "unique_parameters"], [197, 2, 1, "", "value"]], "gammapy.modeling.PriorParameter": [[198, 3, 1, "", "autoscale"], [198, 3, 1, "", "check_limits"], [198, 2, 1, "", "conf_max"], [198, 2, 1, "", "conf_min"], [198, 3, 1, "", "copy"], [198, 2, 1, "", "error"], [198, 2, 1, "", "factor"], [198, 2, 1, "", "factor_max"], [198, 2, 1, "", "factor_min"], [198, 2, 1, "", "frozen"], [198, 2, 1, "", "is_norm"], [198, 2, 1, "", "max"], [198, 2, 1, "", "min"], [198, 2, 1, "", "name"], [198, 2, 1, "", "norm_parameters"], [198, 2, 1, "", "prior"], [198, 3, 1, "", "prior_stat_sum"], [198, 2, 1, "", "quantity"], [198, 2, 1, "", "scale"], [198, 2, 1, "", "scale_method"], [198, 2, 1, "", "scan_max"], [198, 2, 1, "", "scan_min"], [198, 2, 1, "", "scan_n_sigma"], [198, 2, 1, "", "scan_values"], [198, 3, 1, "", "to_dict"], [198, 2, 1, "", "type"], [198, 2, 1, "", "unit"], [198, 3, 1, "", "update_from_dict"], [198, 2, 1, "", "value"]], "gammapy.modeling.PriorParameters": [[199, 3, 1, "", "autoscale"], [199, 3, 1, "", "check_limits"], [199, 3, 1, "", "copy"], [199, 3, 1, "", "count"], [199, 2, 1, "", "free_parameters"], [199, 3, 1, "", "freeze_all"], [199, 3, 1, "", "from_dict"], [199, 3, 1, "", "from_stack"], [199, 3, 1, "", "index"], [199, 2, 1, "", "max"], [199, 2, 1, "", "min"], [199, 2, 1, "", "names"], [199, 2, 1, "", "norm_parameters"], [199, 2, 1, "", "prior"], [199, 3, 1, "", "prior_stat_sum"], [199, 3, 1, "", "restore_status"], [199, 3, 1, "", "select"], [199, 3, 1, "", "set_parameter_factors"], [199, 3, 1, "", "to_dict"], [199, 3, 1, "", "to_table"], [199, 2, 1, "", "types"], [199, 3, 1, "", "unfreeze_all"], [199, 2, 1, "", "unique_parameters"], [199, 2, 1, "", "value"]], "gammapy.modeling.models": [[200, 1, 1, "", "BrokenPowerLawSpectralModel"], [201, 1, 1, "", "CompoundSpectralModel"], [202, 1, 1, "", "ConstantFluxSpatialModel"], [203, 1, 1, "", "ConstantSpatialModel"], [204, 1, 1, "", "ConstantSpectralModel"], [205, 1, 1, "", "ConstantTemporalModel"], [206, 1, 1, "", "DatasetModels"], [207, 1, 1, "", "DiskSpatialModel"], [208, 1, 1, "", "EBLAbsorptionNormSpectralModel"], [209, 5, 1, "", "EBL_DATA_BUILTIN"], [210, 1, 1, "", "ExpCutoffPowerLaw3FGLSpectralModel"], [211, 1, 1, "", "ExpCutoffPowerLawNormSpectralModel"], [212, 1, 1, "", "ExpCutoffPowerLawSpectralModel"], [213, 1, 1, "", "ExpDecayTemporalModel"], [214, 1, 1, "", "FoVBackgroundModel"], [215, 1, 1, "", "GaussianSpatialModel"], [216, 1, 1, "", "GaussianSpectralModel"], [217, 1, 1, "", "GaussianTemporalModel"], [218, 1, 1, "", "GeneralizedGaussianSpatialModel"], [219, 1, 1, "", "GeneralizedGaussianTemporalModel"], [220, 1, 1, "", "LightCurveTemplateTemporalModel"], [221, 1, 1, "", "LinearTemporalModel"], [222, 1, 1, "", "LogParabolaNormSpectralModel"], [223, 1, 1, "", "LogParabolaSpectralModel"], [224, 5, 1, "", "MODEL_REGISTRY"], [225, 1, 1, "", "MeyerCrabSpectralModel"], [226, 1, 1, "", "Model"], [227, 1, 1, "", "ModelBase"], [228, 1, 1, "", "Models"], [229, 1, 1, "", "NaimaSpectralModel"], [230, 1, 1, "", "PiecewiseNormSpatialModel"], [231, 1, 1, "", "PiecewiseNormSpectralModel"], [232, 1, 1, "", "PointSpatialModel"], [233, 1, 1, "", "PowerLaw2SpectralModel"], [234, 1, 1, "", "PowerLawNormSpectralModel"], [235, 1, 1, "", "PowerLawSpectralModel"], [236, 1, 1, "", "PowerLawTemporalModel"], [237, 5, 1, "", "SPATIAL_MODEL_REGISTRY"], [238, 5, 1, "", "SPECTRAL_MODEL_REGISTRY"], [239, 1, 1, "", "ScaleSpectralModel"], [240, 1, 1, "", "Shell2SpatialModel"], [241, 1, 1, "", "ShellSpatialModel"], [242, 1, 1, "", "SineTemporalModel"], [243, 1, 1, "", "SkyModel"], [244, 1, 1, "", "SmoothBrokenPowerLawSpectralModel"], [245, 1, 1, "", "SpatialModel"], [246, 1, 1, "", "SpectralModel"], [247, 1, 1, "", "SuperExpCutoffPowerLaw3FGLSpectralModel"], [248, 1, 1, "", "SuperExpCutoffPowerLaw4FGLDR3SpectralModel"], [249, 1, 1, "", "SuperExpCutoffPowerLaw4FGLSpectralModel"], [250, 5, 1, "", "TEMPORAL_MODEL_REGISTRY"], [251, 1, 1, "", "TemplateNDSpatialModel"], [252, 1, 1, "", "TemplateNDSpectralModel"], [253, 1, 1, "", "TemplateNPredModel"], [254, 1, 1, "", "TemplatePhaseCurveTemporalModel"], [255, 1, 1, "", "TemplateSpatialModel"], [256, 1, 1, "", "TemplateSpectralModel"], [257, 1, 1, "", "TemporalModel"], [258, 4, 1, "", "create_cosmic_ray_spectral_model"], [259, 4, 1, "", "create_crab_spectral_model"], [260, 4, 1, "", "create_fermi_isotropic_diffuse_model"], [261, 4, 1, "", "integrate_spectrum"], [262, 4, 1, "", "read_hermes_cube"], [263, 4, 1, "", "scale_plot_flux"], [10, 0, 0, "-", "utils"]], "gammapy.modeling.models.BrokenPowerLawSpectralModel": [[200, 3, 1, "", "__call__"], [200, 2, 1, "", "amplitude"], [200, 3, 1, "", "copy"], [200, 2, 1, "", "covariance"], [200, 2, 1, "", "default_parameters"], [200, 2, 1, "", "ebreak"], [200, 3, 1, "", "energy_flux"], [200, 3, 1, "", "energy_flux_error"], [200, 3, 1, "", "evaluate"], [200, 3, 1, "", "evaluate_error"], [200, 3, 1, "", "freeze"], [200, 3, 1, "", "from_dict"], [200, 3, 1, "", "from_parameters"], [200, 2, 1, "", "frozen"], [200, 2, 1, "", "index1"], [200, 2, 1, "", "index2"], [200, 3, 1, "", "integral"], [200, 3, 1, "", "integral_error"], [200, 3, 1, "", "inverse"], [200, 3, 1, "", "inverse_all"], [200, 2, 1, "", "is_norm_spectral_model"], [200, 2, 1, "", "parameters"], [200, 2, 1, "", "pivot_energy"], [200, 3, 1, "", "plot"], [200, 3, 1, "", "plot_error"], [200, 3, 1, "", "reassign"], [200, 3, 1, "", "reference_fluxes"], [200, 3, 1, "", "spectral_index"], [200, 3, 1, "", "spectral_index_error"], [200, 2, 1, "", "tag"], [200, 3, 1, "", "to_dict"], [200, 2, 1, "", "type"], [200, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.CompoundSpectralModel": [[201, 3, 1, "", "__call__"], [201, 3, 1, "", "copy"], [201, 2, 1, "", "covariance"], [201, 2, 1, "", "default_parameters"], [201, 3, 1, "", "energy_flux"], [201, 3, 1, "", "energy_flux_error"], [201, 3, 1, "", "evaluate"], [201, 3, 1, "", "evaluate_error"], [201, 3, 1, "", "freeze"], [201, 3, 1, "", "from_dict"], [201, 3, 1, "", "from_parameters"], [201, 2, 1, "", "frozen"], [201, 3, 1, "", "integral"], [201, 3, 1, "", "integral_error"], [201, 3, 1, "", "inverse"], [201, 3, 1, "", "inverse_all"], [201, 2, 1, "", "is_norm_spectral_model"], [201, 2, 1, "", "parameters"], [201, 2, 1, "", "pivot_energy"], [201, 3, 1, "", "plot"], [201, 3, 1, "", "plot_error"], [201, 3, 1, "", "reassign"], [201, 3, 1, "", "reference_fluxes"], [201, 3, 1, "", "spectral_index"], [201, 3, 1, "", "spectral_index_error"], [201, 2, 1, "", "tag"], [201, 3, 1, "", "to_dict"], [201, 2, 1, "", "type"], [201, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantFluxSpatialModel": [[202, 3, 1, "", "__call__"], [202, 3, 1, "", "copy"], [202, 2, 1, "", "covariance"], [202, 2, 1, "", "default_parameters"], [202, 3, 1, "", "evaluate"], [202, 3, 1, "", "evaluate_geom"], [202, 2, 1, "", "evaluation_bin_size_min"], [202, 2, 1, "", "evaluation_radius"], [202, 2, 1, "", "evaluation_region"], [202, 2, 1, "", "frame"], [202, 3, 1, "", "freeze"], [202, 3, 1, "", "from_dict"], [202, 3, 1, "", "from_parameters"], [202, 3, 1, "", "from_position"], [202, 2, 1, "", "frozen"], [202, 3, 1, "", "integrate_geom"], [202, 2, 1, "", "is_energy_dependent"], [202, 2, 1, "", "parameters"], [202, 2, 1, "", "phi_0"], [202, 3, 1, "", "plot"], [202, 3, 1, "", "plot_error"], [202, 3, 1, "", "plot_grid"], [202, 3, 1, "", "plot_interactive"], [202, 3, 1, "", "plot_position_error"], [202, 2, 1, "", "position"], [202, 2, 1, "", "position_error"], [202, 2, 1, "", "position_lonlat"], [202, 3, 1, "", "reassign"], [202, 2, 1, "", "tag"], [202, 3, 1, "", "to_dict"], [202, 3, 1, "", "to_region"], [202, 2, 1, "", "type"], [202, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantSpatialModel": [[203, 3, 1, "", "__call__"], [203, 3, 1, "", "copy"], [203, 2, 1, "", "covariance"], [203, 2, 1, "", "default_parameters"], [203, 3, 1, "", "evaluate"], [203, 3, 1, "", "evaluate_geom"], [203, 2, 1, "", "evaluation_bin_size_min"], [203, 2, 1, "", "evaluation_radius"], [203, 2, 1, "", "evaluation_region"], [203, 2, 1, "", "frame"], [203, 3, 1, "", "freeze"], [203, 3, 1, "", "from_dict"], [203, 3, 1, "", "from_parameters"], [203, 3, 1, "", "from_position"], [203, 2, 1, "", "frozen"], [203, 3, 1, "", "integrate_geom"], [203, 2, 1, "", "is_energy_dependent"], [203, 2, 1, "", "parameters"], [203, 2, 1, "", "phi_0"], [203, 3, 1, "", "plot"], [203, 3, 1, "", "plot_error"], [203, 3, 1, "", "plot_grid"], [203, 3, 1, "", "plot_interactive"], [203, 3, 1, "", "plot_position_error"], [203, 2, 1, "", "position"], [203, 2, 1, "", "position_error"], [203, 2, 1, "", "position_lonlat"], [203, 3, 1, "", "reassign"], [203, 2, 1, "", "tag"], [203, 3, 1, "", "to_dict"], [203, 3, 1, "", "to_region"], [203, 2, 1, "", "type"], [203, 3, 1, "", "unfreeze"], [203, 2, 1, "", "value"]], "gammapy.modeling.models.ConstantSpectralModel": [[204, 3, 1, "", "__call__"], [204, 2, 1, "", "const"], [204, 3, 1, "", "copy"], [204, 2, 1, "", "covariance"], [204, 2, 1, "", "default_parameters"], [204, 3, 1, "", "energy_flux"], [204, 3, 1, "", "energy_flux_error"], [204, 3, 1, "", "evaluate"], [204, 3, 1, "", "evaluate_error"], [204, 3, 1, "", "freeze"], [204, 3, 1, "", "from_dict"], [204, 3, 1, "", "from_parameters"], [204, 2, 1, "", "frozen"], [204, 3, 1, "", "integral"], [204, 3, 1, "", "integral_error"], [204, 3, 1, "", "inverse"], [204, 3, 1, "", "inverse_all"], [204, 2, 1, "", "is_norm_spectral_model"], [204, 2, 1, "", "parameters"], [204, 2, 1, "", "pivot_energy"], [204, 3, 1, "", "plot"], [204, 3, 1, "", "plot_error"], [204, 3, 1, "", "reassign"], [204, 3, 1, "", "reference_fluxes"], [204, 3, 1, "", "spectral_index"], [204, 3, 1, "", "spectral_index_error"], [204, 2, 1, "", "tag"], [204, 3, 1, "", "to_dict"], [204, 2, 1, "", "type"], [204, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ConstantTemporalModel": [[205, 3, 1, "", "__call__"], [205, 3, 1, "", "copy"], [205, 2, 1, "", "covariance"], [205, 2, 1, "", "default_parameters"], [205, 3, 1, "", "evaluate"], [205, 3, 1, "", "freeze"], [205, 3, 1, "", "from_dict"], [205, 3, 1, "", "from_parameters"], [205, 2, 1, "", "frozen"], [205, 3, 1, "", "integral"], [205, 2, 1, "", "is_energy_dependent"], [205, 2, 1, "", "parameters"], [205, 3, 1, "", "plot"], [205, 3, 1, "", "reassign"], [205, 2, 1, "", "reference_time"], [205, 3, 1, "", "sample_time"], [205, 2, 1, "", "tag"], [205, 3, 1, "", "time_sum"], [205, 3, 1, "", "to_dict"], [205, 2, 1, "", "type"], [205, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.DatasetModels": [[206, 3, 1, "", "copy"], [206, 3, 1, "", "count"], [206, 2, 1, "", "covariance"], [206, 3, 1, "", "freeze"], [206, 3, 1, "", "from_dict"], [206, 3, 1, "", "from_yaml"], [206, 2, 1, "", "frozen"], [206, 3, 1, "", "index"], [206, 2, 1, "", "names"], [206, 2, 1, "", "parameters"], [206, 2, 1, "", "parameters_unique_names"], [206, 3, 1, "", "plot_positions"], [206, 3, 1, "", "plot_regions"], [206, 2, 1, "", "positions"], [206, 3, 1, "", "read"], [206, 3, 1, "", "read_covariance"], [206, 3, 1, "", "reassign"], [206, 3, 1, "", "restore_status"], [206, 3, 1, "", "select"], [206, 3, 1, "", "select_from_geom"], [206, 3, 1, "", "select_mask"], [206, 3, 1, "", "select_region"], [206, 3, 1, "", "selection_mask"], [206, 3, 1, "", "set_parameters_bounds"], [206, 3, 1, "", "to_dict"], [206, 3, 1, "", "to_parameters_table"], [206, 3, 1, "", "to_regions"], [206, 3, 1, "", "to_template_sky_model"], [206, 3, 1, "", "to_template_spectral_model"], [206, 3, 1, "", "to_yaml"], [206, 3, 1, "", "unfreeze"], [206, 3, 1, "", "update_link_label"], [206, 3, 1, "", "update_parameters_from_table"], [206, 2, 1, "", "wcs_geom"], [206, 3, 1, "", "write"], [206, 3, 1, "", "write_covariance"]], "gammapy.modeling.models.DiskSpatialModel": [[207, 3, 1, "", "__call__"], [207, 3, 1, "", "copy"], [207, 2, 1, "", "covariance"], [207, 2, 1, "", "default_parameters"], [207, 2, 1, "", "e"], [207, 2, 1, "", "edge_width"], [207, 3, 1, "", "evaluate"], [207, 3, 1, "", "evaluate_geom"], [207, 2, 1, "", "evaluation_bin_size_min"], [207, 2, 1, "", "evaluation_radius"], [207, 2, 1, "", "evaluation_region"], [207, 3, 1, "", "freeze"], [207, 3, 1, "", "from_dict"], [207, 3, 1, "", "from_parameters"], [207, 3, 1, "", "from_position"], [207, 3, 1, "", "from_region"], [207, 2, 1, "", "frozen"], [207, 3, 1, "", "integrate_geom"], [207, 2, 1, "", "is_energy_dependent"], [207, 2, 1, "", "lat_0"], [207, 2, 1, "", "lon_0"], [207, 2, 1, "", "parameters"], [207, 2, 1, "", "phi"], [207, 2, 1, "", "phi_0"], [207, 3, 1, "", "plot"], [207, 3, 1, "", "plot_error"], [207, 3, 1, "", "plot_grid"], [207, 3, 1, "", "plot_interactive"], [207, 3, 1, "", "plot_position_error"], [207, 2, 1, "", "position"], [207, 2, 1, "", "position_error"], [207, 2, 1, "", "position_lonlat"], [207, 2, 1, "", "r_0"], [207, 3, 1, "", "reassign"], [207, 2, 1, "", "tag"], [207, 3, 1, "", "to_dict"], [207, 3, 1, "", "to_region"], [207, 2, 1, "", "type"], [207, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.EBLAbsorptionNormSpectralModel": [[208, 3, 1, "", "__call__"], [208, 2, 1, "", "alpha_norm"], [208, 3, 1, "", "copy"], [208, 2, 1, "", "covariance"], [208, 2, 1, "", "default_parameters"], [208, 3, 1, "", "energy_flux"], [208, 3, 1, "", "energy_flux_error"], [208, 3, 1, "", "evaluate"], [208, 3, 1, "", "evaluate_error"], [208, 3, 1, "", "freeze"], [208, 3, 1, "", "from_dict"], [208, 3, 1, "", "from_parameters"], [208, 2, 1, "", "frozen"], [208, 3, 1, "", "integral"], [208, 3, 1, "", "integral_error"], [208, 3, 1, "", "inverse"], [208, 3, 1, "", "inverse_all"], [208, 2, 1, "", "is_norm_spectral_model"], [208, 2, 1, "", "parameters"], [208, 2, 1, "", "pivot_energy"], [208, 3, 1, "", "plot"], [208, 3, 1, "", "plot_error"], [208, 3, 1, "", "read"], [208, 3, 1, "", "read_builtin"], [208, 3, 1, "", "reassign"], [208, 2, 1, "", "redshift"], [208, 3, 1, "", "reference_fluxes"], [208, 3, 1, "", "spectral_index"], [208, 3, 1, "", "spectral_index_error"], [208, 2, 1, "", "tag"], [208, 3, 1, "", "to_dict"], [208, 2, 1, "", "type"], [208, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel": [[210, 3, 1, "", "__call__"], [210, 2, 1, "", "amplitude"], [210, 3, 1, "", "copy"], [210, 2, 1, "", "covariance"], [210, 2, 1, "", "default_parameters"], [210, 2, 1, "", "ecut"], [210, 3, 1, "", "energy_flux"], [210, 3, 1, "", "energy_flux_error"], [210, 3, 1, "", "evaluate"], [210, 3, 1, "", "evaluate_error"], [210, 3, 1, "", "freeze"], [210, 3, 1, "", "from_dict"], [210, 3, 1, "", "from_parameters"], [210, 2, 1, "", "frozen"], [210, 2, 1, "", "index"], [210, 3, 1, "", "integral"], [210, 3, 1, "", "integral_error"], [210, 3, 1, "", "inverse"], [210, 3, 1, "", "inverse_all"], [210, 2, 1, "", "is_norm_spectral_model"], [210, 2, 1, "", "parameters"], [210, 2, 1, "", "pivot_energy"], [210, 3, 1, "", "plot"], [210, 3, 1, "", "plot_error"], [210, 3, 1, "", "reassign"], [210, 2, 1, "", "reference"], [210, 3, 1, "", "reference_fluxes"], [210, 3, 1, "", "spectral_index"], [210, 3, 1, "", "spectral_index_error"], [210, 2, 1, "", "tag"], [210, 3, 1, "", "to_dict"], [210, 2, 1, "", "type"], [210, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel": [[211, 3, 1, "", "__call__"], [211, 2, 1, "", "alpha"], [211, 3, 1, "", "copy"], [211, 2, 1, "", "covariance"], [211, 2, 1, "", "default_parameters"], [211, 3, 1, "", "energy_flux"], [211, 3, 1, "", "energy_flux_error"], [211, 3, 1, "", "evaluate"], [211, 3, 1, "", "evaluate_error"], [211, 3, 1, "", "freeze"], [211, 3, 1, "", "from_dict"], [211, 3, 1, "", "from_parameters"], [211, 2, 1, "", "frozen"], [211, 2, 1, "", "index"], [211, 3, 1, "", "integral"], [211, 3, 1, "", "integral_error"], [211, 3, 1, "", "inverse"], [211, 3, 1, "", "inverse_all"], [211, 2, 1, "", "is_norm_spectral_model"], [211, 2, 1, "", "lambda_"], [211, 2, 1, "", "norm"], [211, 2, 1, "", "parameters"], [211, 2, 1, "", "pivot_energy"], [211, 3, 1, "", "plot"], [211, 3, 1, "", "plot_error"], [211, 3, 1, "", "reassign"], [211, 2, 1, "", "reference"], [211, 3, 1, "", "reference_fluxes"], [211, 3, 1, "", "spectral_index"], [211, 3, 1, "", "spectral_index_error"], [211, 2, 1, "", "tag"], [211, 3, 1, "", "to_dict"], [211, 2, 1, "", "type"], [211, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel": [[212, 3, 1, "", "__call__"], [212, 2, 1, "", "alpha"], [212, 2, 1, "", "amplitude"], [212, 3, 1, "", "copy"], [212, 2, 1, "", "covariance"], [212, 2, 1, "", "default_parameters"], [212, 2, 1, "", "e_peak"], [212, 3, 1, "", "energy_flux"], [212, 3, 1, "", "energy_flux_error"], [212, 3, 1, "", "evaluate"], [212, 3, 1, "", "evaluate_error"], [212, 3, 1, "", "freeze"], [212, 3, 1, "", "from_dict"], [212, 3, 1, "", "from_parameters"], [212, 2, 1, "", "frozen"], [212, 2, 1, "", "index"], [212, 3, 1, "", "integral"], [212, 3, 1, "", "integral_error"], [212, 3, 1, "", "inverse"], [212, 3, 1, "", "inverse_all"], [212, 2, 1, "", "is_norm_spectral_model"], [212, 2, 1, "", "lambda_"], [212, 2, 1, "", "parameters"], [212, 2, 1, "", "pivot_energy"], [212, 3, 1, "", "plot"], [212, 3, 1, "", "plot_error"], [212, 3, 1, "", "reassign"], [212, 2, 1, "", "reference"], [212, 3, 1, "", "reference_fluxes"], [212, 3, 1, "", "spectral_index"], [212, 3, 1, "", "spectral_index_error"], [212, 2, 1, "", "tag"], [212, 3, 1, "", "to_dict"], [212, 2, 1, "", "type"], [212, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ExpDecayTemporalModel": [[213, 3, 1, "", "__call__"], [213, 3, 1, "", "copy"], [213, 2, 1, "", "covariance"], [213, 2, 1, "", "default_parameters"], [213, 3, 1, "", "evaluate"], [213, 3, 1, "", "freeze"], [213, 3, 1, "", "from_dict"], [213, 3, 1, "", "from_parameters"], [213, 2, 1, "", "frozen"], [213, 3, 1, "", "integral"], [213, 2, 1, "", "is_energy_dependent"], [213, 2, 1, "", "parameters"], [213, 3, 1, "", "plot"], [213, 3, 1, "", "reassign"], [213, 2, 1, "", "reference_time"], [213, 3, 1, "", "sample_time"], [213, 2, 1, "", "t0"], [213, 2, 1, "", "t_ref"], [213, 2, 1, "", "tag"], [213, 3, 1, "", "time_sum"], [213, 3, 1, "", "to_dict"], [213, 2, 1, "", "type"], [213, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.FoVBackgroundModel": [[214, 3, 1, "", "contributes"], [214, 3, 1, "", "copy"], [214, 2, 1, "", "covariance"], [214, 2, 1, "", "default_parameters"], [214, 3, 1, "", "evaluate"], [214, 3, 1, "", "evaluate_geom"], [214, 3, 1, "", "freeze"], [214, 3, 1, "", "from_dict"], [214, 3, 1, "", "from_parameters"], [214, 2, 1, "", "frozen"], [214, 2, 1, "", "name"], [214, 2, 1, "", "parameters"], [214, 3, 1, "", "reassign"], [214, 3, 1, "", "reset_to_default"], [214, 2, 1, "", "spatial_model"], [214, 2, 1, "", "spectral_model"], [214, 2, 1, "", "tag"], [214, 3, 1, "", "to_dict"], [214, 2, 1, "", "type"], [214, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianSpatialModel": [[215, 3, 1, "", "__call__"], [215, 3, 1, "", "copy"], [215, 2, 1, "", "covariance"], [215, 2, 1, "", "default_parameters"], [215, 2, 1, "", "e"], [215, 3, 1, "", "evaluate"], [215, 3, 1, "", "evaluate_geom"], [215, 2, 1, "", "evaluation_bin_size_min"], [215, 2, 1, "", "evaluation_radius"], [215, 2, 1, "", "evaluation_region"], [215, 3, 1, "", "freeze"], [215, 3, 1, "", "from_dict"], [215, 3, 1, "", "from_parameters"], [215, 3, 1, "", "from_position"], [215, 2, 1, "", "frozen"], [215, 3, 1, "", "integrate_geom"], [215, 2, 1, "", "is_energy_dependent"], [215, 2, 1, "", "lat_0"], [215, 2, 1, "", "lon_0"], [215, 2, 1, "", "parameters"], [215, 2, 1, "", "phi"], [215, 2, 1, "", "phi_0"], [215, 3, 1, "", "plot"], [215, 3, 1, "", "plot_error"], [215, 3, 1, "", "plot_grid"], [215, 3, 1, "", "plot_interactive"], [215, 3, 1, "", "plot_position_error"], [215, 2, 1, "", "position"], [215, 2, 1, "", "position_error"], [215, 2, 1, "", "position_lonlat"], [215, 3, 1, "", "reassign"], [215, 2, 1, "", "sigma"], [215, 2, 1, "", "tag"], [215, 3, 1, "", "to_dict"], [215, 3, 1, "", "to_region"], [215, 2, 1, "", "type"], [215, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianSpectralModel": [[216, 3, 1, "", "__call__"], [216, 2, 1, "", "amplitude"], [216, 3, 1, "", "copy"], [216, 2, 1, "", "covariance"], [216, 2, 1, "", "default_parameters"], [216, 3, 1, "", "energy_flux"], [216, 3, 1, "", "energy_flux_error"], [216, 3, 1, "", "evaluate"], [216, 3, 1, "", "evaluate_error"], [216, 3, 1, "", "freeze"], [216, 3, 1, "", "from_dict"], [216, 3, 1, "", "from_parameters"], [216, 2, 1, "", "frozen"], [216, 3, 1, "", "integral"], [216, 3, 1, "", "integral_error"], [216, 3, 1, "", "inverse"], [216, 3, 1, "", "inverse_all"], [216, 2, 1, "", "is_norm_spectral_model"], [216, 2, 1, "", "mean"], [216, 2, 1, "", "parameters"], [216, 2, 1, "", "pivot_energy"], [216, 3, 1, "", "plot"], [216, 3, 1, "", "plot_error"], [216, 3, 1, "", "reassign"], [216, 3, 1, "", "reference_fluxes"], [216, 2, 1, "", "sigma"], [216, 3, 1, "", "spectral_index"], [216, 3, 1, "", "spectral_index_error"], [216, 2, 1, "", "tag"], [216, 3, 1, "", "to_dict"], [216, 2, 1, "", "type"], [216, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GaussianTemporalModel": [[217, 3, 1, "", "__call__"], [217, 3, 1, "", "copy"], [217, 2, 1, "", "covariance"], [217, 2, 1, "", "default_parameters"], [217, 3, 1, "", "evaluate"], [217, 3, 1, "", "freeze"], [217, 3, 1, "", "from_dict"], [217, 3, 1, "", "from_parameters"], [217, 2, 1, "", "frozen"], [217, 3, 1, "", "integral"], [217, 2, 1, "", "is_energy_dependent"], [217, 2, 1, "", "parameters"], [217, 3, 1, "", "plot"], [217, 3, 1, "", "reassign"], [217, 2, 1, "", "reference_time"], [217, 3, 1, "", "sample_time"], [217, 2, 1, "", "sigma"], [217, 2, 1, "", "t_ref"], [217, 2, 1, "", "tag"], [217, 3, 1, "", "time_sum"], [217, 3, 1, "", "to_dict"], [217, 2, 1, "", "type"], [217, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GeneralizedGaussianSpatialModel": [[218, 3, 1, "", "__call__"], [218, 3, 1, "", "copy"], [218, 2, 1, "", "covariance"], [218, 2, 1, "", "default_parameters"], [218, 2, 1, "", "e"], [218, 2, 1, "", "eta"], [218, 3, 1, "", "evaluate"], [218, 3, 1, "", "evaluate_geom"], [218, 2, 1, "", "evaluation_bin_size_min"], [218, 2, 1, "", "evaluation_radius"], [218, 2, 1, "", "evaluation_region"], [218, 3, 1, "", "freeze"], [218, 3, 1, "", "from_dict"], [218, 3, 1, "", "from_parameters"], [218, 3, 1, "", "from_position"], [218, 2, 1, "", "frozen"], [218, 3, 1, "", "integrate_geom"], [218, 2, 1, "", "is_energy_dependent"], [218, 2, 1, "", "lat_0"], [218, 2, 1, "", "lon_0"], [218, 2, 1, "", "parameters"], [218, 2, 1, "", "phi"], [218, 2, 1, "", "phi_0"], [218, 3, 1, "", "plot"], [218, 3, 1, "", "plot_error"], [218, 3, 1, "", "plot_grid"], [218, 3, 1, "", "plot_interactive"], [218, 3, 1, "", "plot_position_error"], [218, 2, 1, "", "position"], [218, 2, 1, "", "position_error"], [218, 2, 1, "", "position_lonlat"], [218, 2, 1, "", "r_0"], [218, 3, 1, "", "reassign"], [218, 2, 1, "", "tag"], [218, 3, 1, "", "to_dict"], [218, 3, 1, "", "to_region"], [218, 2, 1, "", "type"], [218, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.GeneralizedGaussianTemporalModel": [[219, 3, 1, "", "__call__"], [219, 3, 1, "", "copy"], [219, 2, 1, "", "covariance"], [219, 2, 1, "", "default_parameters"], [219, 2, 1, "", "eta"], [219, 3, 1, "", "evaluate"], [219, 3, 1, "", "freeze"], [219, 3, 1, "", "from_dict"], [219, 3, 1, "", "from_parameters"], [219, 2, 1, "", "frozen"], [219, 3, 1, "", "integral"], [219, 2, 1, "", "is_energy_dependent"], [219, 2, 1, "", "parameters"], [219, 3, 1, "", "plot"], [219, 3, 1, "", "reassign"], [219, 2, 1, "", "reference_time"], [219, 3, 1, "", "sample_time"], [219, 2, 1, "", "t_decay"], [219, 2, 1, "", "t_ref"], [219, 2, 1, "", "t_rise"], [219, 2, 1, "", "tag"], [219, 3, 1, "", "time_sum"], [219, 3, 1, "", "to_dict"], [219, 2, 1, "", "type"], [219, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LightCurveTemplateTemporalModel": [[220, 3, 1, "", "__call__"], [220, 3, 1, "", "copy"], [220, 2, 1, "", "covariance"], [220, 2, 1, "", "default_parameters"], [220, 3, 1, "", "evaluate"], [220, 3, 1, "", "freeze"], [220, 3, 1, "", "from_dict"], [220, 3, 1, "", "from_parameters"], [220, 3, 1, "", "from_table"], [220, 2, 1, "", "frozen"], [220, 3, 1, "", "integral"], [220, 2, 1, "", "is_energy_dependent"], [220, 2, 1, "", "parameters"], [220, 3, 1, "", "plot"], [220, 3, 1, "", "read"], [220, 3, 1, "", "reassign"], [220, 2, 1, "", "reference_time"], [220, 3, 1, "", "sample_time"], [220, 2, 1, "", "t_ref"], [220, 2, 1, "", "tag"], [220, 3, 1, "", "time_sum"], [220, 3, 1, "", "to_dict"], [220, 3, 1, "", "to_table"], [220, 2, 1, "", "type"], [220, 3, 1, "", "unfreeze"], [220, 3, 1, "", "write"]], "gammapy.modeling.models.LinearTemporalModel": [[221, 3, 1, "", "__call__"], [221, 2, 1, "", "alpha"], [221, 2, 1, "", "beta"], [221, 3, 1, "", "copy"], [221, 2, 1, "", "covariance"], [221, 2, 1, "", "default_parameters"], [221, 3, 1, "", "evaluate"], [221, 3, 1, "", "freeze"], [221, 3, 1, "", "from_dict"], [221, 3, 1, "", "from_parameters"], [221, 2, 1, "", "frozen"], [221, 3, 1, "", "integral"], [221, 2, 1, "", "is_energy_dependent"], [221, 2, 1, "", "parameters"], [221, 3, 1, "", "plot"], [221, 3, 1, "", "reassign"], [221, 2, 1, "", "reference_time"], [221, 3, 1, "", "sample_time"], [221, 2, 1, "", "t_ref"], [221, 2, 1, "", "tag"], [221, 3, 1, "", "time_sum"], [221, 3, 1, "", "to_dict"], [221, 2, 1, "", "type"], [221, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LogParabolaNormSpectralModel": [[222, 3, 1, "", "__call__"], [222, 2, 1, "", "alpha"], [222, 2, 1, "", "beta"], [222, 3, 1, "", "copy"], [222, 2, 1, "", "covariance"], [222, 2, 1, "", "default_parameters"], [222, 3, 1, "", "energy_flux"], [222, 3, 1, "", "energy_flux_error"], [222, 3, 1, "", "evaluate"], [222, 3, 1, "", "evaluate_error"], [222, 3, 1, "", "freeze"], [222, 3, 1, "", "from_dict"], [222, 3, 1, "", "from_log10"], [222, 3, 1, "", "from_parameters"], [222, 2, 1, "", "frozen"], [222, 3, 1, "", "integral"], [222, 3, 1, "", "integral_error"], [222, 3, 1, "", "inverse"], [222, 3, 1, "", "inverse_all"], [222, 2, 1, "", "is_norm_spectral_model"], [222, 2, 1, "", "norm"], [222, 2, 1, "", "parameters"], [222, 2, 1, "", "pivot_energy"], [222, 3, 1, "", "plot"], [222, 3, 1, "", "plot_error"], [222, 3, 1, "", "reassign"], [222, 2, 1, "", "reference"], [222, 3, 1, "", "reference_fluxes"], [222, 3, 1, "", "spectral_index"], [222, 3, 1, "", "spectral_index_error"], [222, 2, 1, "", "tag"], [222, 3, 1, "", "to_dict"], [222, 2, 1, "", "type"], [222, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.LogParabolaSpectralModel": [[223, 3, 1, "", "__call__"], [223, 2, 1, "", "alpha"], [223, 2, 1, "", "amplitude"], [223, 2, 1, "", "beta"], [223, 3, 1, "", "copy"], [223, 2, 1, "", "covariance"], [223, 2, 1, "", "default_parameters"], [223, 2, 1, "", "e_peak"], [223, 3, 1, "", "energy_flux"], [223, 3, 1, "", "energy_flux_error"], [223, 3, 1, "", "evaluate"], [223, 3, 1, "", "evaluate_error"], [223, 3, 1, "", "freeze"], [223, 3, 1, "", "from_dict"], [223, 3, 1, "", "from_log10"], [223, 3, 1, "", "from_parameters"], [223, 2, 1, "", "frozen"], [223, 3, 1, "", "integral"], [223, 3, 1, "", "integral_error"], [223, 3, 1, "", "inverse"], [223, 3, 1, "", "inverse_all"], [223, 2, 1, "", "is_norm_spectral_model"], [223, 2, 1, "", "parameters"], [223, 2, 1, "", "pivot_energy"], [223, 3, 1, "", "plot"], [223, 3, 1, "", "plot_error"], [223, 3, 1, "", "reassign"], [223, 2, 1, "", "reference"], [223, 3, 1, "", "reference_fluxes"], [223, 3, 1, "", "spectral_index"], [223, 3, 1, "", "spectral_index_error"], [223, 2, 1, "", "tag"], [223, 3, 1, "", "to_dict"], [223, 2, 1, "", "type"], [223, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.MeyerCrabSpectralModel": [[225, 3, 1, "", "__call__"], [225, 2, 1, "", "coefficients"], [225, 3, 1, "", "copy"], [225, 2, 1, "", "covariance"], [225, 2, 1, "", "default_parameters"], [225, 3, 1, "", "energy_flux"], [225, 3, 1, "", "energy_flux_error"], [225, 3, 1, "", "evaluate"], [225, 3, 1, "", "evaluate_error"], [225, 3, 1, "", "freeze"], [225, 3, 1, "", "from_dict"], [225, 3, 1, "", "from_parameters"], [225, 2, 1, "", "frozen"], [225, 3, 1, "", "integral"], [225, 3, 1, "", "integral_error"], [225, 3, 1, "", "inverse"], [225, 3, 1, "", "inverse_all"], [225, 2, 1, "", "is_norm_spectral_model"], [225, 2, 1, "", "norm"], [225, 2, 1, "", "parameters"], [225, 2, 1, "", "pivot_energy"], [225, 3, 1, "", "plot"], [225, 3, 1, "", "plot_error"], [225, 3, 1, "", "reassign"], [225, 3, 1, "", "reference_fluxes"], [225, 3, 1, "", "spectral_index"], [225, 3, 1, "", "spectral_index_error"], [225, 3, 1, "", "to_dict"], [225, 2, 1, "", "type"], [225, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Model": [[226, 3, 1, "", "create"], [226, 3, 1, "", "from_dict"]], "gammapy.modeling.models.ModelBase": [[227, 3, 1, "", "copy"], [227, 2, 1, "", "covariance"], [227, 3, 1, "", "freeze"], [227, 3, 1, "", "from_dict"], [227, 3, 1, "", "from_parameters"], [227, 2, 1, "", "frozen"], [227, 2, 1, "", "parameters"], [227, 3, 1, "", "reassign"], [227, 3, 1, "", "to_dict"], [227, 2, 1, "", "type"], [227, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Models": [[228, 3, 1, "", "append"], [228, 3, 1, "", "clear"], [228, 3, 1, "", "copy"], [228, 3, 1, "", "count"], [228, 2, 1, "", "covariance"], [228, 3, 1, "", "extend"], [228, 3, 1, "", "freeze"], [228, 3, 1, "", "from_dict"], [228, 3, 1, "", "from_yaml"], [228, 2, 1, "", "frozen"], [228, 3, 1, "", "index"], [228, 3, 1, "", "insert"], [228, 2, 1, "", "names"], [228, 2, 1, "", "parameters"], [228, 2, 1, "", "parameters_unique_names"], [228, 3, 1, "", "plot_positions"], [228, 3, 1, "", "plot_regions"], [228, 3, 1, "", "pop"], [228, 2, 1, "", "positions"], [228, 3, 1, "", "read"], [228, 3, 1, "", "read_covariance"], [228, 3, 1, "", "reassign"], [228, 3, 1, "", "remove"], [228, 3, 1, "", "restore_status"], [228, 3, 1, "", "reverse"], [228, 3, 1, "", "select"], [228, 3, 1, "", "select_from_geom"], [228, 3, 1, "", "select_mask"], [228, 3, 1, "", "select_region"], [228, 3, 1, "", "selection_mask"], [228, 3, 1, "", "set_parameters_bounds"], [228, 3, 1, "", "set_prior"], [228, 3, 1, "", "to_dict"], [228, 3, 1, "", "to_parameters_table"], [228, 3, 1, "", "to_regions"], [228, 3, 1, "", "to_template_sky_model"], [228, 3, 1, "", "to_template_spectral_model"], [228, 3, 1, "", "to_yaml"], [228, 3, 1, "", "unfreeze"], [228, 3, 1, "", "update_link_label"], [228, 3, 1, "", "update_parameters_from_table"], [228, 2, 1, "", "wcs_geom"], [228, 3, 1, "", "write"], [228, 3, 1, "", "write_covariance"]], "gammapy.modeling.models.NaimaSpectralModel": [[229, 3, 1, "", "__call__"], [229, 3, 1, "", "copy"], [229, 2, 1, "", "covariance"], [229, 2, 1, "", "default_parameters"], [229, 3, 1, "", "energy_flux"], [229, 3, 1, "", "energy_flux_error"], [229, 3, 1, "", "evaluate"], [229, 3, 1, "", "evaluate_error"], [229, 3, 1, "", "freeze"], [229, 3, 1, "", "from_dict"], [229, 3, 1, "", "from_parameters"], [229, 2, 1, "", "frozen"], [229, 2, 1, "", "include_ssc"], [229, 3, 1, "", "integral"], [229, 3, 1, "", "integral_error"], [229, 3, 1, "", "inverse"], [229, 3, 1, "", "inverse_all"], [229, 2, 1, "", "is_norm_spectral_model"], [229, 2, 1, "", "parameters"], [229, 2, 1, "", "particle_distribution"], [229, 2, 1, "", "pivot_energy"], [229, 3, 1, "", "plot"], [229, 3, 1, "", "plot_error"], [229, 3, 1, "", "reassign"], [229, 3, 1, "", "reference_fluxes"], [229, 3, 1, "", "spectral_index"], [229, 3, 1, "", "spectral_index_error"], [229, 2, 1, "", "ssc_model"], [229, 2, 1, "", "tag"], [229, 3, 1, "", "to_dict"], [229, 2, 1, "", "type"], [229, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PiecewiseNormSpatialModel": [[230, 3, 1, "", "__call__"], [230, 2, 1, "", "coords"], [230, 3, 1, "", "copy"], [230, 2, 1, "", "covariance"], [230, 2, 1, "", "default_parameters"], [230, 3, 1, "", "evaluate"], [230, 3, 1, "", "evaluate_geom"], [230, 2, 1, "", "evaluation_bin_size_min"], [230, 2, 1, "", "evaluation_radius"], [230, 2, 1, "", "evaluation_region"], [230, 3, 1, "", "freeze"], [230, 3, 1, "", "from_dict"], [230, 3, 1, "", "from_parameters"], [230, 3, 1, "", "from_position"], [230, 2, 1, "", "frozen"], [230, 3, 1, "", "integrate_geom"], [230, 2, 1, "", "is_energy_dependent"], [230, 2, 1, "", "norms"], [230, 2, 1, "", "parameters"], [230, 2, 1, "", "phi_0"], [230, 3, 1, "", "plot"], [230, 3, 1, "", "plot_error"], [230, 3, 1, "", "plot_grid"], [230, 3, 1, "", "plot_interactive"], [230, 3, 1, "", "plot_position_error"], [230, 2, 1, "", "position"], [230, 2, 1, "", "position_error"], [230, 2, 1, "", "position_lonlat"], [230, 3, 1, "", "reassign"], [230, 2, 1, "", "tag"], [230, 3, 1, "", "to_dict"], [230, 2, 1, "", "type"], [230, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PiecewiseNormSpectralModel": [[231, 3, 1, "", "__call__"], [231, 3, 1, "", "copy"], [231, 2, 1, "", "covariance"], [231, 2, 1, "", "default_parameters"], [231, 2, 1, "", "energy"], [231, 3, 1, "", "energy_flux"], [231, 3, 1, "", "energy_flux_error"], [231, 3, 1, "", "evaluate"], [231, 3, 1, "", "evaluate_error"], [231, 3, 1, "", "freeze"], [231, 3, 1, "", "from_dict"], [231, 3, 1, "", "from_parameters"], [231, 2, 1, "", "frozen"], [231, 3, 1, "", "integral"], [231, 3, 1, "", "integral_error"], [231, 3, 1, "", "inverse"], [231, 3, 1, "", "inverse_all"], [231, 2, 1, "", "is_norm_spectral_model"], [231, 2, 1, "", "norms"], [231, 2, 1, "", "parameters"], [231, 2, 1, "", "pivot_energy"], [231, 3, 1, "", "plot"], [231, 3, 1, "", "plot_error"], [231, 3, 1, "", "reassign"], [231, 3, 1, "", "reference_fluxes"], [231, 3, 1, "", "spectral_index"], [231, 3, 1, "", "spectral_index_error"], [231, 2, 1, "", "tag"], [231, 3, 1, "", "to_dict"], [231, 2, 1, "", "type"], [231, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PointSpatialModel": [[232, 3, 1, "", "__call__"], [232, 3, 1, "", "copy"], [232, 2, 1, "", "covariance"], [232, 2, 1, "", "default_parameters"], [232, 3, 1, "", "evaluate_geom"], [232, 2, 1, "", "evaluation_bin_size_min"], [232, 2, 1, "", "evaluation_radius"], [232, 2, 1, "", "evaluation_region"], [232, 3, 1, "", "freeze"], [232, 3, 1, "", "from_dict"], [232, 3, 1, "", "from_parameters"], [232, 3, 1, "", "from_position"], [232, 2, 1, "", "frozen"], [232, 3, 1, "", "integrate_geom"], [232, 2, 1, "", "is_energy_dependent"], [232, 2, 1, "", "lat_0"], [232, 2, 1, "", "lon_0"], [232, 2, 1, "", "parameters"], [232, 2, 1, "", "phi_0"], [232, 3, 1, "", "plot"], [232, 3, 1, "", "plot_error"], [232, 3, 1, "", "plot_grid"], [232, 3, 1, "", "plot_interactive"], [232, 3, 1, "", "plot_position_error"], [232, 2, 1, "", "position"], [232, 2, 1, "", "position_error"], [232, 2, 1, "", "position_lonlat"], [232, 3, 1, "", "reassign"], [232, 2, 1, "", "tag"], [232, 3, 1, "", "to_dict"], [232, 3, 1, "", "to_region"], [232, 2, 1, "", "type"], [232, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLaw2SpectralModel": [[233, 3, 1, "", "__call__"], [233, 2, 1, "", "amplitude"], [233, 3, 1, "", "copy"], [233, 2, 1, "", "covariance"], [233, 2, 1, "", "default_parameters"], [233, 2, 1, "", "emax"], [233, 2, 1, "", "emin"], [233, 3, 1, "", "energy_flux"], [233, 3, 1, "", "energy_flux_error"], [233, 3, 1, "", "evaluate"], [233, 3, 1, "", "evaluate_error"], [233, 3, 1, "", "evaluate_integral"], [233, 3, 1, "", "freeze"], [233, 3, 1, "", "from_dict"], [233, 3, 1, "", "from_parameters"], [233, 2, 1, "", "frozen"], [233, 2, 1, "", "index"], [233, 3, 1, "", "integral"], [233, 3, 1, "", "integral_error"], [233, 3, 1, "", "inverse"], [233, 3, 1, "", "inverse_all"], [233, 2, 1, "", "is_norm_spectral_model"], [233, 2, 1, "", "parameters"], [233, 2, 1, "", "pivot_energy"], [233, 3, 1, "", "plot"], [233, 3, 1, "", "plot_error"], [233, 3, 1, "", "reassign"], [233, 3, 1, "", "reference_fluxes"], [233, 3, 1, "", "spectral_index"], [233, 3, 1, "", "spectral_index_error"], [233, 2, 1, "", "tag"], [233, 3, 1, "", "to_dict"], [233, 2, 1, "", "type"], [233, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawNormSpectralModel": [[234, 3, 1, "", "__call__"], [234, 3, 1, "", "copy"], [234, 2, 1, "", "covariance"], [234, 2, 1, "", "default_parameters"], [234, 3, 1, "", "energy_flux"], [234, 3, 1, "", "energy_flux_error"], [234, 3, 1, "", "evaluate"], [234, 3, 1, "", "evaluate_energy_flux"], [234, 3, 1, "", "evaluate_error"], [234, 3, 1, "", "evaluate_integral"], [234, 3, 1, "", "freeze"], [234, 3, 1, "", "from_dict"], [234, 3, 1, "", "from_parameters"], [234, 2, 1, "", "frozen"], [234, 3, 1, "", "integral"], [234, 3, 1, "", "integral_error"], [234, 3, 1, "", "inverse"], [234, 3, 1, "", "inverse_all"], [234, 2, 1, "", "is_norm_spectral_model"], [234, 2, 1, "", "norm"], [234, 2, 1, "", "parameters"], [234, 2, 1, "", "pivot_energy"], [234, 3, 1, "", "plot"], [234, 3, 1, "", "plot_error"], [234, 3, 1, "", "reassign"], [234, 2, 1, "", "reference"], [234, 3, 1, "", "reference_fluxes"], [234, 3, 1, "", "spectral_index"], [234, 3, 1, "", "spectral_index_error"], [234, 2, 1, "", "tag"], [234, 2, 1, "", "tilt"], [234, 3, 1, "", "to_dict"], [234, 2, 1, "", "type"], [234, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawSpectralModel": [[235, 3, 1, "", "__call__"], [235, 2, 1, "", "amplitude"], [235, 3, 1, "", "copy"], [235, 2, 1, "", "covariance"], [235, 2, 1, "", "default_parameters"], [235, 3, 1, "", "energy_flux"], [235, 3, 1, "", "energy_flux_error"], [235, 3, 1, "", "evaluate"], [235, 3, 1, "", "evaluate_energy_flux"], [235, 3, 1, "", "evaluate_error"], [235, 3, 1, "", "evaluate_integral"], [235, 3, 1, "", "freeze"], [235, 3, 1, "", "from_dict"], [235, 3, 1, "", "from_parameters"], [235, 2, 1, "", "frozen"], [235, 2, 1, "", "index"], [235, 3, 1, "", "integral"], [235, 3, 1, "", "integral_error"], [235, 3, 1, "", "inverse"], [235, 3, 1, "", "inverse_all"], [235, 2, 1, "", "is_norm_spectral_model"], [235, 2, 1, "", "parameters"], [235, 2, 1, "", "pivot_energy"], [235, 3, 1, "", "plot"], [235, 3, 1, "", "plot_error"], [235, 3, 1, "", "reassign"], [235, 2, 1, "", "reference"], [235, 3, 1, "", "reference_fluxes"], [235, 3, 1, "", "spectral_index"], [235, 3, 1, "", "spectral_index_error"], [235, 2, 1, "", "tag"], [235, 3, 1, "", "to_dict"], [235, 2, 1, "", "type"], [235, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.PowerLawTemporalModel": [[236, 3, 1, "", "__call__"], [236, 2, 1, "", "alpha"], [236, 3, 1, "", "copy"], [236, 2, 1, "", "covariance"], [236, 2, 1, "", "default_parameters"], [236, 3, 1, "", "evaluate"], [236, 3, 1, "", "freeze"], [236, 3, 1, "", "from_dict"], [236, 3, 1, "", "from_parameters"], [236, 2, 1, "", "frozen"], [236, 3, 1, "", "integral"], [236, 2, 1, "", "is_energy_dependent"], [236, 2, 1, "", "parameters"], [236, 3, 1, "", "plot"], [236, 3, 1, "", "reassign"], [236, 2, 1, "", "reference_time"], [236, 3, 1, "", "sample_time"], [236, 2, 1, "", "t0"], [236, 2, 1, "", "t_ref"], [236, 2, 1, "", "tag"], [236, 3, 1, "", "time_sum"], [236, 3, 1, "", "to_dict"], [236, 2, 1, "", "type"], [236, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ScaleSpectralModel": [[239, 3, 1, "", "__call__"], [239, 3, 1, "", "copy"], [239, 2, 1, "", "covariance"], [239, 2, 1, "", "default_parameters"], [239, 3, 1, "", "energy_flux"], [239, 3, 1, "", "energy_flux_error"], [239, 3, 1, "", "evaluate"], [239, 3, 1, "", "evaluate_error"], [239, 3, 1, "", "freeze"], [239, 3, 1, "", "from_dict"], [239, 3, 1, "", "from_parameters"], [239, 2, 1, "", "frozen"], [239, 3, 1, "", "integral"], [239, 3, 1, "", "integral_error"], [239, 3, 1, "", "inverse"], [239, 3, 1, "", "inverse_all"], [239, 2, 1, "", "is_norm_spectral_model"], [239, 2, 1, "", "norm"], [239, 2, 1, "", "parameters"], [239, 2, 1, "", "pivot_energy"], [239, 3, 1, "", "plot"], [239, 3, 1, "", "plot_error"], [239, 3, 1, "", "reassign"], [239, 3, 1, "", "reference_fluxes"], [239, 3, 1, "", "spectral_index"], [239, 3, 1, "", "spectral_index_error"], [239, 2, 1, "", "tag"], [239, 3, 1, "", "to_dict"], [239, 2, 1, "", "type"], [239, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.Shell2SpatialModel": [[240, 3, 1, "", "__call__"], [240, 3, 1, "", "copy"], [240, 2, 1, "", "covariance"], [240, 2, 1, "", "default_parameters"], [240, 2, 1, "", "eta"], [240, 3, 1, "", "evaluate"], [240, 3, 1, "", "evaluate_geom"], [240, 2, 1, "", "evaluation_bin_size_min"], [240, 2, 1, "", "evaluation_radius"], [240, 2, 1, "", "evaluation_region"], [240, 3, 1, "", "freeze"], [240, 3, 1, "", "from_dict"], [240, 3, 1, "", "from_parameters"], [240, 3, 1, "", "from_position"], [240, 2, 1, "", "frozen"], [240, 3, 1, "", "integrate_geom"], [240, 2, 1, "", "is_energy_dependent"], [240, 2, 1, "", "lat_0"], [240, 2, 1, "", "lon_0"], [240, 2, 1, "", "parameters"], [240, 2, 1, "", "phi_0"], [240, 3, 1, "", "plot"], [240, 3, 1, "", "plot_error"], [240, 3, 1, "", "plot_grid"], [240, 3, 1, "", "plot_interactive"], [240, 3, 1, "", "plot_position_error"], [240, 2, 1, "", "position"], [240, 2, 1, "", "position_error"], [240, 2, 1, "", "position_lonlat"], [240, 2, 1, "", "r_0"], [240, 2, 1, "", "r_in"], [240, 3, 1, "", "reassign"], [240, 2, 1, "", "tag"], [240, 3, 1, "", "to_dict"], [240, 3, 1, "", "to_region"], [240, 2, 1, "", "type"], [240, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.ShellSpatialModel": [[241, 3, 1, "", "__call__"], [241, 3, 1, "", "copy"], [241, 2, 1, "", "covariance"], [241, 2, 1, "", "default_parameters"], [241, 3, 1, "", "evaluate"], [241, 3, 1, "", "evaluate_geom"], [241, 2, 1, "", "evaluation_bin_size_min"], [241, 2, 1, "", "evaluation_radius"], [241, 2, 1, "", "evaluation_region"], [241, 3, 1, "", "freeze"], [241, 3, 1, "", "from_dict"], [241, 3, 1, "", "from_parameters"], [241, 3, 1, "", "from_position"], [241, 2, 1, "", "frozen"], [241, 3, 1, "", "integrate_geom"], [241, 2, 1, "", "is_energy_dependent"], [241, 2, 1, "", "lat_0"], [241, 2, 1, "", "lon_0"], [241, 2, 1, "", "parameters"], [241, 2, 1, "", "phi_0"], [241, 3, 1, "", "plot"], [241, 3, 1, "", "plot_error"], [241, 3, 1, "", "plot_grid"], [241, 3, 1, "", "plot_interactive"], [241, 3, 1, "", "plot_position_error"], [241, 2, 1, "", "position"], [241, 2, 1, "", "position_error"], [241, 2, 1, "", "position_lonlat"], [241, 2, 1, "", "radius"], [241, 3, 1, "", "reassign"], [241, 2, 1, "", "tag"], [241, 3, 1, "", "to_dict"], [241, 3, 1, "", "to_region"], [241, 2, 1, "", "type"], [241, 3, 1, "", "unfreeze"], [241, 2, 1, "", "width"]], "gammapy.modeling.models.SineTemporalModel": [[242, 3, 1, "", "__call__"], [242, 2, 1, "", "amp"], [242, 3, 1, "", "copy"], [242, 2, 1, "", "covariance"], [242, 2, 1, "", "default_parameters"], [242, 3, 1, "", "evaluate"], [242, 3, 1, "", "freeze"], [242, 3, 1, "", "from_dict"], [242, 3, 1, "", "from_parameters"], [242, 2, 1, "", "frozen"], [242, 3, 1, "", "integral"], [242, 2, 1, "", "is_energy_dependent"], [242, 2, 1, "", "omega"], [242, 2, 1, "", "parameters"], [242, 3, 1, "", "plot"], [242, 3, 1, "", "reassign"], [242, 2, 1, "", "reference_time"], [242, 3, 1, "", "sample_time"], [242, 2, 1, "", "t_ref"], [242, 2, 1, "", "tag"], [242, 3, 1, "", "time_sum"], [242, 3, 1, "", "to_dict"], [242, 2, 1, "", "type"], [242, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SkyModel": [[243, 3, 1, "", "__call__"], [243, 3, 1, "", "contributes"], [243, 3, 1, "", "copy"], [243, 2, 1, "", "covariance"], [243, 3, 1, "", "create"], [243, 2, 1, "", "default_parameters"], [243, 3, 1, "", "evaluate"], [243, 3, 1, "", "evaluate_geom"], [243, 2, 1, "", "evaluation_bin_size_min"], [243, 2, 1, "", "evaluation_radius"], [243, 2, 1, "", "evaluation_region"], [243, 2, 1, "", "frame"], [243, 3, 1, "", "freeze"], [243, 3, 1, "", "from_dict"], [243, 3, 1, "", "from_parameters"], [243, 2, 1, "", "frozen"], [243, 3, 1, "", "integrate_geom"], [243, 2, 1, "", "name"], [243, 2, 1, "", "parameters"], [243, 2, 1, "", "position"], [243, 2, 1, "", "position_lonlat"], [243, 3, 1, "", "reassign"], [243, 2, 1, "", "spatial_model"], [243, 2, 1, "", "spectral_model"], [243, 2, 1, "", "tag"], [243, 2, 1, "", "temporal_model"], [243, 3, 1, "", "to_dict"], [243, 2, 1, "", "type"], [243, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel": [[244, 3, 1, "", "__call__"], [244, 2, 1, "", "amplitude"], [244, 2, 1, "", "beta"], [244, 3, 1, "", "copy"], [244, 2, 1, "", "covariance"], [244, 2, 1, "", "default_parameters"], [244, 2, 1, "", "ebreak"], [244, 3, 1, "", "energy_flux"], [244, 3, 1, "", "energy_flux_error"], [244, 3, 1, "", "evaluate"], [244, 3, 1, "", "evaluate_error"], [244, 3, 1, "", "freeze"], [244, 3, 1, "", "from_dict"], [244, 3, 1, "", "from_parameters"], [244, 2, 1, "", "frozen"], [244, 2, 1, "", "index1"], [244, 2, 1, "", "index2"], [244, 3, 1, "", "integral"], [244, 3, 1, "", "integral_error"], [244, 3, 1, "", "inverse"], [244, 3, 1, "", "inverse_all"], [244, 2, 1, "", "is_norm_spectral_model"], [244, 2, 1, "", "parameters"], [244, 2, 1, "", "pivot_energy"], [244, 3, 1, "", "plot"], [244, 3, 1, "", "plot_error"], [244, 3, 1, "", "reassign"], [244, 2, 1, "", "reference"], [244, 3, 1, "", "reference_fluxes"], [244, 3, 1, "", "spectral_index"], [244, 3, 1, "", "spectral_index_error"], [244, 2, 1, "", "tag"], [244, 3, 1, "", "to_dict"], [244, 2, 1, "", "type"], [244, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SpatialModel": [[245, 3, 1, "", "__call__"], [245, 3, 1, "", "copy"], [245, 2, 1, "", "covariance"], [245, 2, 1, "", "default_parameters"], [245, 3, 1, "", "evaluate_geom"], [245, 2, 1, "", "evaluation_bin_size_min"], [245, 2, 1, "", "evaluation_radius"], [245, 2, 1, "", "evaluation_region"], [245, 3, 1, "", "freeze"], [245, 3, 1, "", "from_dict"], [245, 3, 1, "", "from_parameters"], [245, 3, 1, "", "from_position"], [245, 2, 1, "", "frozen"], [245, 3, 1, "", "integrate_geom"], [245, 2, 1, "", "is_energy_dependent"], [245, 2, 1, "", "parameters"], [245, 2, 1, "", "phi_0"], [245, 3, 1, "", "plot"], [245, 3, 1, "", "plot_error"], [245, 3, 1, "", "plot_grid"], [245, 3, 1, "", "plot_interactive"], [245, 3, 1, "", "plot_position_error"], [245, 2, 1, "", "position"], [245, 2, 1, "", "position_error"], [245, 2, 1, "", "position_lonlat"], [245, 3, 1, "", "reassign"], [245, 3, 1, "", "to_dict"], [245, 2, 1, "", "type"], [245, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SpectralModel": [[246, 3, 1, "", "__call__"], [246, 3, 1, "", "copy"], [246, 2, 1, "", "covariance"], [246, 2, 1, "", "default_parameters"], [246, 3, 1, "", "energy_flux"], [246, 3, 1, "", "energy_flux_error"], [246, 3, 1, "", "evaluate_error"], [246, 3, 1, "", "freeze"], [246, 3, 1, "", "from_dict"], [246, 3, 1, "", "from_parameters"], [246, 2, 1, "", "frozen"], [246, 3, 1, "", "integral"], [246, 3, 1, "", "integral_error"], [246, 3, 1, "", "inverse"], [246, 3, 1, "", "inverse_all"], [246, 2, 1, "", "is_norm_spectral_model"], [246, 2, 1, "", "parameters"], [246, 2, 1, "", "pivot_energy"], [246, 3, 1, "", "plot"], [246, 3, 1, "", "plot_error"], [246, 3, 1, "", "reassign"], [246, 3, 1, "", "reference_fluxes"], [246, 3, 1, "", "spectral_index"], [246, 3, 1, "", "spectral_index_error"], [246, 3, 1, "", "to_dict"], [246, 2, 1, "", "type"], [246, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel": [[247, 3, 1, "", "__call__"], [247, 2, 1, "", "amplitude"], [247, 3, 1, "", "copy"], [247, 2, 1, "", "covariance"], [247, 2, 1, "", "default_parameters"], [247, 2, 1, "", "ecut"], [247, 3, 1, "", "energy_flux"], [247, 3, 1, "", "energy_flux_error"], [247, 3, 1, "", "evaluate"], [247, 3, 1, "", "evaluate_error"], [247, 3, 1, "", "freeze"], [247, 3, 1, "", "from_dict"], [247, 3, 1, "", "from_parameters"], [247, 2, 1, "", "frozen"], [247, 2, 1, "", "index_1"], [247, 2, 1, "", "index_2"], [247, 3, 1, "", "integral"], [247, 3, 1, "", "integral_error"], [247, 3, 1, "", "inverse"], [247, 3, 1, "", "inverse_all"], [247, 2, 1, "", "is_norm_spectral_model"], [247, 2, 1, "", "parameters"], [247, 2, 1, "", "pivot_energy"], [247, 3, 1, "", "plot"], [247, 3, 1, "", "plot_error"], [247, 3, 1, "", "reassign"], [247, 2, 1, "", "reference"], [247, 3, 1, "", "reference_fluxes"], [247, 3, 1, "", "spectral_index"], [247, 3, 1, "", "spectral_index_error"], [247, 2, 1, "", "tag"], [247, 3, 1, "", "to_dict"], [247, 2, 1, "", "type"], [247, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel": [[248, 3, 1, "", "__call__"], [248, 2, 1, "", "amplitude"], [248, 3, 1, "", "copy"], [248, 2, 1, "", "covariance"], [248, 2, 1, "", "default_parameters"], [248, 3, 1, "", "energy_flux"], [248, 3, 1, "", "energy_flux_error"], [248, 3, 1, "", "evaluate"], [248, 3, 1, "", "evaluate_error"], [248, 2, 1, "", "expfactor"], [248, 3, 1, "", "freeze"], [248, 3, 1, "", "from_dict"], [248, 3, 1, "", "from_parameters"], [248, 2, 1, "", "frozen"], [248, 2, 1, "", "index_1"], [248, 2, 1, "", "index_2"], [248, 3, 1, "", "integral"], [248, 3, 1, "", "integral_error"], [248, 3, 1, "", "inverse"], [248, 3, 1, "", "inverse_all"], [248, 2, 1, "", "is_norm_spectral_model"], [248, 2, 1, "", "parameters"], [248, 2, 1, "", "pivot_energy"], [248, 3, 1, "", "plot"], [248, 3, 1, "", "plot_error"], [248, 3, 1, "", "reassign"], [248, 2, 1, "", "reference"], [248, 3, 1, "", "reference_fluxes"], [248, 3, 1, "", "spectral_index"], [248, 3, 1, "", "spectral_index_error"], [248, 2, 1, "", "tag"], [248, 3, 1, "", "to_dict"], [248, 2, 1, "", "type"], [248, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel": [[249, 3, 1, "", "__call__"], [249, 2, 1, "", "amplitude"], [249, 3, 1, "", "copy"], [249, 2, 1, "", "covariance"], [249, 2, 1, "", "default_parameters"], [249, 3, 1, "", "energy_flux"], [249, 3, 1, "", "energy_flux_error"], [249, 3, 1, "", "evaluate"], [249, 3, 1, "", "evaluate_error"], [249, 2, 1, "", "expfactor"], [249, 3, 1, "", "freeze"], [249, 3, 1, "", "from_dict"], [249, 3, 1, "", "from_parameters"], [249, 2, 1, "", "frozen"], [249, 2, 1, "", "index_1"], [249, 2, 1, "", "index_2"], [249, 3, 1, "", "integral"], [249, 3, 1, "", "integral_error"], [249, 3, 1, "", "inverse"], [249, 3, 1, "", "inverse_all"], [249, 2, 1, "", "is_norm_spectral_model"], [249, 2, 1, "", "parameters"], [249, 2, 1, "", "pivot_energy"], [249, 3, 1, "", "plot"], [249, 3, 1, "", "plot_error"], [249, 3, 1, "", "reassign"], [249, 2, 1, "", "reference"], [249, 3, 1, "", "reference_fluxes"], [249, 3, 1, "", "spectral_index"], [249, 3, 1, "", "spectral_index_error"], [249, 2, 1, "", "tag"], [249, 3, 1, "", "to_dict"], [249, 2, 1, "", "type"], [249, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.TemplateNDSpatialModel": [[251, 3, 1, "", "__call__"], [251, 3, 1, "", "copy"], [251, 2, 1, "", "covariance"], [251, 2, 1, "", "default_parameters"], [251, 3, 1, "", "evaluate"], [251, 3, 1, "", "evaluate_geom"], [251, 2, 1, "", "evaluation_bin_size_min"], [251, 2, 1, "", "evaluation_radius"], [251, 2, 1, "", "evaluation_region"], [251, 3, 1, "", "freeze"], [251, 3, 1, "", "from_dict"], [251, 3, 1, "", "from_parameters"], [251, 3, 1, "", "from_position"], [251, 2, 1, "", "frozen"], [251, 3, 1, "", "integrate_geom"], [251, 2, 1, "", "is_energy_dependent"], [251, 2, 1, "", "map"], [251, 2, 1, "", "parameters"], [251, 2, 1, "", "phi_0"], [251, 3, 1, "", "plot"], [251, 3, 1, "", "plot_error"], [251, 3, 1, "", "plot_grid"], [251, 3, 1, "", "plot_interactive"], [251, 3, 1, "", "plot_position_error"], [251, 2, 1, "", "position"], [251, 2, 1, "", "position_error"], [251, 2, 1, "", "position_lonlat"], [251, 3, 1, "", "reassign"], [251, 2, 1, "", "tag"], [251, 3, 1, "", "to_dict"], [251, 2, 1, "", "type"], [251, 3, 1, "", "unfreeze"], [251, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateNDSpectralModel": [[252, 3, 1, "", "__call__"], [252, 3, 1, "", "copy"], [252, 2, 1, "", "covariance"], [252, 2, 1, "", "default_parameters"], [252, 3, 1, "", "energy_flux"], [252, 3, 1, "", "energy_flux_error"], [252, 3, 1, "", "evaluate"], [252, 3, 1, "", "evaluate_error"], [252, 3, 1, "", "freeze"], [252, 3, 1, "", "from_dict"], [252, 3, 1, "", "from_parameters"], [252, 2, 1, "", "frozen"], [252, 3, 1, "", "integral"], [252, 3, 1, "", "integral_error"], [252, 3, 1, "", "inverse"], [252, 3, 1, "", "inverse_all"], [252, 2, 1, "", "is_norm_spectral_model"], [252, 2, 1, "", "map"], [252, 2, 1, "", "parameters"], [252, 2, 1, "", "pivot_energy"], [252, 3, 1, "", "plot"], [252, 3, 1, "", "plot_error"], [252, 3, 1, "", "reassign"], [252, 3, 1, "", "reference_fluxes"], [252, 3, 1, "", "spectral_index"], [252, 3, 1, "", "spectral_index_error"], [252, 2, 1, "", "tag"], [252, 3, 1, "", "to_dict"], [252, 2, 1, "", "type"], [252, 3, 1, "", "unfreeze"], [252, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateNPredModel": [[253, 3, 1, "", "copy"], [253, 2, 1, "", "covariance"], [253, 3, 1, "", "cutout"], [253, 2, 1, "", "default_parameters"], [253, 2, 1, "", "energy_center"], [253, 3, 1, "", "evaluate"], [253, 2, 1, "", "evaluation_radius"], [253, 3, 1, "", "freeze"], [253, 3, 1, "", "from_dict"], [253, 3, 1, "", "from_parameters"], [253, 2, 1, "", "frozen"], [253, 2, 1, "", "map"], [253, 2, 1, "", "name"], [253, 2, 1, "", "parameters"], [253, 2, 1, "", "position"], [253, 3, 1, "", "reassign"], [253, 3, 1, "", "slice_by_energy"], [253, 2, 1, "", "spectral_model"], [253, 3, 1, "", "stack"], [253, 2, 1, "", "tag"], [253, 3, 1, "", "to_dict"], [253, 2, 1, "", "type"], [253, 3, 1, "", "unfreeze"], [253, 3, 1, "", "write"]], "gammapy.modeling.models.TemplatePhaseCurveTemporalModel": [[254, 3, 1, "", "__call__"], [254, 3, 1, "", "copy"], [254, 2, 1, "", "covariance"], [254, 2, 1, "", "default_parameters"], [254, 3, 1, "", "evaluate"], [254, 2, 1, "", "f0"], [254, 2, 1, "", "f1"], [254, 2, 1, "", "f2"], [254, 3, 1, "", "freeze"], [254, 3, 1, "", "from_dict"], [254, 3, 1, "", "from_parameters"], [254, 2, 1, "", "frozen"], [254, 3, 1, "", "integral"], [254, 2, 1, "", "is_energy_dependent"], [254, 2, 1, "", "parameters"], [254, 2, 1, "", "phi_ref"], [254, 3, 1, "", "plot"], [254, 3, 1, "", "plot_phasogram"], [254, 3, 1, "", "read"], [254, 3, 1, "", "reassign"], [254, 2, 1, "", "reference_time"], [254, 3, 1, "", "sample_time"], [254, 2, 1, "", "t_ref"], [254, 2, 1, "", "tag"], [254, 3, 1, "", "time_sum"], [254, 3, 1, "", "to_dict"], [254, 2, 1, "", "type"], [254, 3, 1, "", "unfreeze"], [254, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateSpatialModel": [[255, 3, 1, "", "__call__"], [255, 3, 1, "", "copy"], [255, 2, 1, "", "covariance"], [255, 2, 1, "", "default_parameters"], [255, 3, 1, "", "evaluate"], [255, 3, 1, "", "evaluate_geom"], [255, 2, 1, "", "evaluation_bin_size_min"], [255, 2, 1, "", "evaluation_radius"], [255, 2, 1, "", "evaluation_region"], [255, 3, 1, "", "freeze"], [255, 3, 1, "", "from_dict"], [255, 3, 1, "", "from_parameters"], [255, 3, 1, "", "from_position"], [255, 2, 1, "", "frozen"], [255, 3, 1, "", "integrate_geom"], [255, 2, 1, "", "is_energy_dependent"], [255, 2, 1, "", "lat_0"], [255, 2, 1, "", "lon_0"], [255, 2, 1, "", "map"], [255, 2, 1, "", "map_center"], [255, 2, 1, "", "parameters"], [255, 2, 1, "", "phi_0"], [255, 3, 1, "", "plot"], [255, 3, 1, "", "plot_error"], [255, 3, 1, "", "plot_grid"], [255, 3, 1, "", "plot_interactive"], [255, 3, 1, "", "plot_position_error"], [255, 2, 1, "", "position"], [255, 2, 1, "", "position_error"], [255, 2, 1, "", "position_lonlat"], [255, 3, 1, "", "read"], [255, 3, 1, "", "reassign"], [255, 2, 1, "", "tag"], [255, 3, 1, "", "to_dict"], [255, 3, 1, "", "to_region"], [255, 2, 1, "", "type"], [255, 3, 1, "", "unfreeze"], [255, 3, 1, "", "write"]], "gammapy.modeling.models.TemplateSpectralModel": [[256, 3, 1, "", "__call__"], [256, 3, 1, "", "copy"], [256, 2, 1, "", "covariance"], [256, 2, 1, "", "default_parameters"], [256, 3, 1, "", "energy_flux"], [256, 3, 1, "", "energy_flux_error"], [256, 3, 1, "", "evaluate"], [256, 3, 1, "", "evaluate_error"], [256, 3, 1, "", "freeze"], [256, 3, 1, "", "from_dict"], [256, 3, 1, "", "from_parameters"], [256, 3, 1, "", "from_region_map"], [256, 2, 1, "", "frozen"], [256, 3, 1, "", "integral"], [256, 3, 1, "", "integral_error"], [256, 3, 1, "", "inverse"], [256, 3, 1, "", "inverse_all"], [256, 2, 1, "", "is_norm_spectral_model"], [256, 2, 1, "", "parameters"], [256, 2, 1, "", "pivot_energy"], [256, 3, 1, "", "plot"], [256, 3, 1, "", "plot_error"], [256, 3, 1, "", "read_xspec_model"], [256, 3, 1, "", "reassign"], [256, 3, 1, "", "reference_fluxes"], [256, 3, 1, "", "spectral_index"], [256, 3, 1, "", "spectral_index_error"], [256, 2, 1, "", "tag"], [256, 3, 1, "", "to_dict"], [256, 2, 1, "", "type"], [256, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.TemporalModel": [[257, 3, 1, "", "__call__"], [257, 3, 1, "", "copy"], [257, 2, 1, "", "covariance"], [257, 2, 1, "", "default_parameters"], [257, 3, 1, "", "freeze"], [257, 3, 1, "", "from_dict"], [257, 3, 1, "", "from_parameters"], [257, 2, 1, "", "frozen"], [257, 3, 1, "", "integral"], [257, 2, 1, "", "is_energy_dependent"], [257, 2, 1, "", "parameters"], [257, 3, 1, "", "plot"], [257, 3, 1, "", "reassign"], [257, 2, 1, "", "reference_time"], [257, 3, 1, "", "sample_time"], [257, 3, 1, "", "time_sum"], [257, 3, 1, "", "to_dict"], [257, 2, 1, "", "type"], [257, 3, 1, "", "unfreeze"]], "gammapy.modeling.models.utils": [[264, 4, 1, "", "read_hermes_cube"]], "gammapy.stats": [[267, 1, 1, "", "CashCountsStatistic"], [268, 1, 1, "", "WStatCountsStatistic"], [269, 4, 1, "", "cash"], [270, 4, 1, "", "cash_sum_cython"], [271, 4, 1, "", "compute_chisq"], [272, 4, 1, "", "compute_flux_doubling"], [273, 4, 1, "", "compute_fpp"], [274, 4, 1, "", "compute_fvar"], [275, 4, 1, "", "cstat"], [276, 4, 1, "", "f_cash_root_cython"], [277, 4, 1, "", "get_wstat_gof_terms"], [278, 4, 1, "", "get_wstat_mu_bkg"], [279, 4, 1, "", "norm_bounds_cython"], [280, 4, 1, "", "wstat"]], "gammapy.stats.CashCountsStatistic": [[267, 3, 1, "", "compute_errn"], [267, 3, 1, "", "compute_errp"], [267, 3, 1, "", "compute_upper_limit"], [267, 2, 1, "", "error"], [267, 3, 1, "", "info_dict"], [267, 2, 1, "", "n_bkg"], [267, 2, 1, "", "n_sig"], [267, 3, 1, "", "n_sig_matching_significance"], [267, 2, 1, "", "p_value"], [267, 2, 1, "", "sqrt_ts"], [267, 2, 1, "", "stat_max"], [267, 2, 1, "", "stat_null"], [267, 3, 1, "", "sum"], [267, 2, 1, "", "ts"]], "gammapy.stats.WStatCountsStatistic": [[268, 3, 1, "", "compute_errn"], [268, 3, 1, "", "compute_errp"], [268, 3, 1, "", "compute_upper_limit"], [268, 2, 1, "", "error"], [268, 3, 1, "", "info_dict"], [268, 2, 1, "", "n_bkg"], [268, 2, 1, "", "n_sig"], [268, 3, 1, "", "n_sig_matching_significance"], [268, 2, 1, "", "p_value"], [268, 2, 1, "", "sqrt_ts"], [268, 2, 1, "", "stat_max"], [268, 2, 1, "", "stat_null"], [268, 3, 1, "", "sum"], [268, 2, 1, "", "ts"]], "gammapy.utils": [[13, 0, 0, "-", "cluster"], [13, 0, 0, "-", "coordinates"], [13, 0, 0, "-", "fits"], [13, 0, 0, "-", "integrate"], [13, 0, 0, "-", "interpolation"], [13, 0, 0, "-", "parallel"], [13, 0, 0, "-", "random"], [13, 0, 0, "-", "regions"], [13, 0, 0, "-", "scripts"], [13, 0, 0, "-", "table"], [13, 0, 0, "-", "testing"], [13, 0, 0, "-", "time"], [13, 0, 0, "-", "units"]], "gammapy.utils.cluster": [[281, 4, 1, "", "hierarchical_clustering"], [282, 4, 1, "", "standard_scaler"]], "gammapy.utils.coordinates": [[283, 5, 1, "", "D_SUN_TO_GALACTIC_CENTER"], [284, 4, 1, "", "cartesian"], [285, 4, 1, "", "fov_to_sky"], [286, 4, 1, "", "galactic"], [287, 4, 1, "", "motion_since_birth"], [288, 4, 1, "", "polar"], [289, 4, 1, "", "sky_to_fov"], [290, 4, 1, "", "velocity_glon_glat"]], "gammapy.utils.fits": [[291, 1, 1, "", "HDULocation"], [292, 1, 1, "", "LazyFitsData"], [293, 4, 1, "", "earth_location_from_dict"]], "gammapy.utils.fits.HDULocation": [[291, 3, 1, "", "get_hdu"], [291, 3, 1, "", "info"], [291, 3, 1, "", "load"], [291, 3, 1, "", "path"]], "gammapy.utils.integrate": [[294, 4, 1, "", "trapz_loglog"]], "gammapy.utils.interpolation": [[295, 1, 1, "", "ScaledRegularGridInterpolator"], [296, 4, 1, "", "interpolate_profile"], [297, 4, 1, "", "interpolation_scale"]], "gammapy.utils.interpolation.ScaledRegularGridInterpolator": [[295, 3, 1, "", "__call__"]], "gammapy.utils.parallel": [[298, 5, 1, "", "BACKEND_DEFAULT"], [299, 5, 1, "", "METHOD_DEFAULT"], [300, 5, 1, "", "METHOD_KWARGS_DEFAULT"], [301, 5, 1, "", "N_JOBS_DEFAULT"], [302, 5, 1, "", "POOL_KWARGS_DEFAULT"], [303, 1, 1, "", "multiprocessing_manager"], [304, 4, 1, "", "run_multiprocessing"]], "gammapy.utils.random": [[305, 1, 1, "", "InverseCDFSampler"], [306, 4, 1, "", "draw"], [307, 4, 1, "", "get_random_state"], [308, 4, 1, "", "normalize"], [309, 4, 1, "", "pdf"], [310, 4, 1, "", "sample_powerlaw"], [311, 4, 1, "", "sample_sphere"], [312, 4, 1, "", "sample_sphere_distance"], [313, 4, 1, "", "sample_times"]], "gammapy.utils.random.InverseCDFSampler": [[305, 3, 1, "", "sample"], [305, 3, 1, "", "sample_axis"]], "gammapy.utils.regions": [[314, 4, 1, "", "compound_region_to_regions"], [315, 4, 1, "", "make_concentric_annulus_sky_regions"], [316, 4, 1, "", "make_orthogonal_rectangle_sky_regions"], [317, 4, 1, "", "region_to_frame"], [318, 4, 1, "", "regions_to_compound_region"]], "gammapy.utils.scripts": [[319, 4, 1, "", "get_images_paths"], [320, 4, 1, "", "make_path"], [321, 4, 1, "", "read_yaml"], [322, 4, 1, "", "recursive_merge_dicts"], [323, 4, 1, "", "write_yaml"]], "gammapy.utils.table": [[324, 4, 1, "", "hstack_columns"], [325, 4, 1, "", "table_row_to_dict"], [326, 4, 1, "", "table_standardise_units_copy"], [327, 4, 1, "", "table_standardise_units_inplace"]], "gammapy.utils.testing": [[328, 1, 1, "", "Checker"], [329, 4, 1, "", "assert_quantity_allclose"], [330, 4, 1, "", "assert_skycoord_allclose"], [331, 4, 1, "", "assert_time_allclose"], [332, 4, 1, "", "mpl_plot_check"], [333, 4, 1, "", "requires_data"], [334, 4, 1, "", "requires_dependency"]], "gammapy.utils.testing.Checker": [[328, 3, 1, "", "run"]], "gammapy.utils.time": [[335, 4, 1, "", "absolute_time"], [336, 4, 1, "", "time_ref_from_dict"], [337, 4, 1, "", "time_ref_to_dict"], [338, 4, 1, "", "time_relative_to_ref"]], "gammapy.utils.units": [[339, 4, 1, "", "standardise_unit"], [340, 4, 1, "", "unit_from_fits_image_hdu"]], "gammapy.visualization": [[341, 1, 1, "", "MapPanelPlotter"], [342, 4, 1, "", "add_colorbar"], [343, 4, 1, "", "annotate_heatmap"], [344, 4, 1, "", "colormap_hess"], [345, 4, 1, "", "colormap_milagro"], [346, 4, 1, "", "plot_contour_line"], [347, 4, 1, "", "plot_distribution"], [348, 4, 1, "", "plot_heatmap"], [349, 4, 1, "", "plot_map_rgb"], [350, 4, 1, "", "plot_npred_signal"], [351, 4, 1, "", "plot_spectrum_datasets_off_regions"], [352, 4, 1, "", "plot_theta_squared_table"]], "gammapy.visualization.MapPanelPlotter": [[341, 3, 1, "", "plot"], [341, 3, 1, "", "plot_panel"]], "gammapy-analysis-config": [[11, 6, 1, "cmdoption-gammapy-analysis-config-filename", "--filename"], [11, 6, 1, "cmdoption-gammapy-analysis-config-overwrite", "--overwrite"]], "gammapy-analysis-run": [[11, 6, 1, "cmdoption-gammapy-analysis-run-filename", "--filename"], [11, 6, 1, "cmdoption-gammapy-analysis-run-out", "--out"], [11, 6, 1, "cmdoption-gammapy-analysis-run-overwrite", "--overwrite"]], "gammapy-download-datasets": [[11, 6, 1, "cmdoption-gammapy-download-datasets-out", "--out"], [11, 6, 1, "cmdoption-gammapy-download-datasets-release", "--release"]], "gammapy-download-notebooks": [[11, 6, 1, "cmdoption-gammapy-download-notebooks-out", "--out"], [11, 6, 1, "cmdoption-gammapy-download-notebooks-release", "--release"]], "gammapy-info": [[11, 6, 1, "cmdoption-gammapy-info-dependencies", "--dependencies"], [11, 6, 1, "cmdoption-gammapy-info-envvar", "--envvar"], [11, 6, 1, "cmdoption-gammapy-info-dependencies", "--no-dependencies"], [11, 6, 1, "cmdoption-gammapy-info-envvar", "--no-envvar"], [11, 6, 1, "cmdoption-gammapy-info-system", "--no-system"], [11, 6, 1, "cmdoption-gammapy-info-version", "--no-version"], [11, 6, 1, "cmdoption-gammapy-info-system", "--system"], [11, 6, 1, "cmdoption-gammapy-info-version", "--version"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function", "5": "py:data", "6": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["std", "cmdoption", "program option"]}, "titleterms": {"analysi": [0, 11, 15, 360, 363, 423, 424, 427, 428, 429, 430, 435, 436, 437, 445, 448, 468, 472, 484, 487, 546], "high": [0, 5, 363, 370, 472, 487], "level": [0, 5, 360, 363, 370, 472, 473, 487], "interfac": [0, 363, 365, 370, 472, 487, 500], "gammapi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 354, 357, 360, 363, 371, 373, 374, 375, 379, 380, 381, 383, 384, 390, 391, 454, 463, 464, 465, 466, 476, 479, 483, 484, 485, 486, 487, 493, 495, 496, 497, 500, 545, 546, 552], "packag": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 373, 375, 384, 387, 407, 468, 476, 477, 546], "class": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 354, 355, 364, 365, 378, 381, 473, 494, 550], "astro": [1, 476, 479], "astrophys": [1, 477, 478, 479], "darkmatt": [1, 476], "popul": [1, 478], "function": [1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 354, 355, 463, 490, 491, 492, 493, 494, 550, 552], "variabl": [1, 2, 3, 4, 5, 7, 8, 10, 13, 439, 444], "sourc": [1, 2, 423, 424, 427, 431, 437, 438, 439, 440, 447, 451, 457, 461, 463, 474, 478, 479, 480, 481, 483], "catalog": [2, 451, 457, 458, 474, 483], "data": [3, 8, 354, 360, 362, 363, 369, 381, 384, 424, 427, 428, 429, 435, 436, 438, 441, 445, 446, 448, 452, 455, 456, 465, 468, 472, 473, 474, 485, 496, 548, 549], "dl3": [3, 436, 466, 485, 493, 496], "observ": [3, 84, 87, 363, 364, 427, 428, 437, 439, 440, 445, 446, 455, 460, 472, 473], "dataset": [4, 11, 94, 95, 354, 363, 366, 375, 376, 381, 423, 424, 428, 429, 432, 433, 435, 436, 440, 445, 446, 447, 452, 453, 455, 457, 458, 461, 465, 472, 473, 484, 487], "reduc": [4, 432, 433, 452, 472, 473], "estim": [5, 111, 372, 375, 378, 381, 428, 431, 438, 441, 444, 445, 455, 486, 496, 497, 550], "util": [5, 8, 10, 13, 373, 546, 550, 552], "modul": [5, 8, 10, 13], "api": [6, 354, 355, 376, 378, 381, 382, 416, 419, 420, 468, 473], "refer": [6, 374, 547, 548, 549], "irf": [7, 142, 363, 381, 423, 452, 454, 463, 493], "instrument": [7, 436, 493], "respons": [7, 493], "maker": [8, 157, 375, 381, 424, 446, 455, 472, 473, 495, 496, 497], "reduct": [8, 363, 369, 424, 427, 428, 429, 435, 445, 446, 455, 465, 472, 473, 496, 548], "map": [9, 181, 185, 360, 363, 364, 431, 432, 433, 436, 437, 443, 448, 450, 454, 456, 457, 458, 470, 474, 486, 499, 500, 501], "sky": [9, 365, 368, 437, 439, 457, 492, 500], "model": [10, 226, 228, 363, 365, 373, 376, 377, 381, 382, 424, 427, 428, 429, 432, 435, 436, 437, 439, 440, 445, 446, 447, 450, 451, 452, 453, 458, 459, 461, 463, 472, 473, 474, 478, 479, 480, 481, 482, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 549], "fit": [10, 13, 195, 363, 369, 424, 425, 427, 428, 429, 432, 435, 436, 437, 443, 447, 453, 457, 461, 464, 472, 473, 501, 545, 549, 550, 551], "script": [11, 13, 354, 390, 468, 470], "command": [11, 354, 548], "line": [11, 354, 548], "tool": [11, 354, 548], "config": [11, 432, 433, 548], "run": [11, 357, 427, 428, 429, 438, 440, 441, 445, 472, 548], "check": [11, 354, 355, 389, 423, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "log": [11, 354, 425, 522, 523], "download": [11, 384], "notebook": [11, 354, 362, 390], "info": [11, 354], "stat": 12, "statist": [12, 427, 457, 549, 550], "cluster": [13, 460], "coordin": [13, 354, 365, 491, 501], "integr": [13, 384, 423], "interpol": [13, 354, 456], "random": [13, 354], "region": [13, 365, 368, 423, 424, 427, 429, 455, 457, 458, 497, 501], "parallel": [13, 366], "tabl": [13, 438, 451, 485], "test": [13, 354, 357, 438, 448], "time": [13, 363, 369, 422, 426, 434, 439, 442, 444, 446, 447, 449, 462, 467, 468, 469, 471, 475, 503, 513, 534, 544, 552], "unit": [13, 354], "visual": [14, 375, 456, 501, 553], "plot": [14, 354, 427, 428, 431, 437, 438, 441, 456, 458, 473, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 553], "featur": [14, 379, 383, 416, 419, 420], "analysisconfig": 16, "burkertprofil": 17, "dmprofil": 18, "darkmatterannihilationspectralmodel": [19, 476], "darkmatterdecayspectralmodel": 20, "einastoprofil": 21, "isothermalprofil": 22, "jfactori": 23, "mooreprofil": 24, "nfwprofil": 25, "primaryflux": 26, "zhaoprofil": 27, "casebattacharya1998": 28, "exponenti": [29, 425, 518, 519, 520, 530, 531, 532], "faucherkaspi2006": 30, "faucherkaspi2006velocitybimod": 31, "faucherkaspi2006velocitymaxwellian": 32, "faucherspir": 33, "logspir": 34, "lorimer2006": 35, "paczynski1990": 36, "paczynski1990veloc": 37, "valleespir": 38, "yusifovkucuk2004": 39, "yusifovkucuk2004b": 40, "add_observed_paramet": 41, "add_pulsar_paramet": 42, "add_pwn_paramet": 43, "add_snr_paramet": 44, "make_base_catalog_galact": 45, "make_catalog_random_positions_cub": 46, "make_catalog_random_positions_spher": 47, "radial_distribut": 48, "velocity_distribut": 49, "pwn": 50, "pulsar": [51, 448, 480, 481], "snr": 52, "snrtruelovemcke": 53, "simplepulsar": 54, "catalog_registri": 55, "sourcecatalog": 56, "sourcecatalog1lhaaso": 57, "sourcecatalog2fhl": 58, "sourcecatalog2hwc": 59, "sourcecatalog3fgl": 60, "sourcecatalog3fhl": [61, 483], "sourcecatalog3hwc": 62, "sourcecatalog4fgl": 63, "sourcecataloggammacat": [64, 483], "sourcecataloghgp": 65, "sourcecataloglargescalehgp": 66, "sourcecatalogobject": 67, "sourcecatalogobject1lhaaso": 68, "sourcecatalogobject2fhl": 69, "sourcecatalogobject2hwc": 70, "sourcecatalogobject3fgl": 71, "sourcecatalogobject3fhl": 72, "sourcecatalogobject3hwc": 73, "sourcecatalogobject4fgl": 74, "sourcecatalogobjectgammacat": 75, "sourcecatalogobjecthgp": 76, "sourcecatalogobjecthgpscompon": 77, "datastor": [78, 463, 473, 485], "eventlist": [79, 485], "eventlistmetadata": 80, "fixedpointinginfo": 81, "gti": [82, 485], "hduindext": 83, "observationfilt": 85, "observationt": 86, "observationseventssampl": 88, "pointinginfo": 89, "pointingmod": 90, "get_irfs_featur": 91, "observatory_loc": 92, "dataset_registri": 93, "fluxpointsdataset": [96, 366, 452], "mapdataset": [97, 366, 435, 439, 452, 465, 484], "mapdataseteventsampl": [98, 367], "mapdatasetmetadata": 99, "mapdatasetonoff": [100, 366], "ogipdatasetread": 101, "ogipdatasetwrit": 102, "observationeventsampl": 103, "spectrumdataset": [104, 366, 452], "spectrumdatasetonoff": [105, 366, 484], "create_map_dataset_from_observ": 106, "create_map_dataset_geom": 107, "asmoothmapestim": 108, "estimator_registri": 109, "energydependentmorphologyestim": 110, "excessmapestim": 112, "fluxmap": [113, 378], "fluxmetadata": 114, "fluxpoint": 115, "fluxpointsestim": [116, 486], "fluxprofileestim": 117, "imageprofil": 118, "imageprofileestim": 119, "lightcurveestim": [120, 486], "parameterestim": 121, "sensitivityestim": 122, "tsmapestim": 123, "compute_lightcurve_doublingtim": 124, "compute_lightcurve_fpp": 125, "compute_lightcurve_fvar": 126, "estimate_exposure_reco_energi": 127, "find_peak": 128, "find_peaks_in_flux_map": 129, "get_rebinned_axi": 130, "resample_energy_edg": 131, "background2d": 132, "background3d": 133, "backgroundirf": 134, "edispkernel": 135, "edispkernelmap": [136, 493], "edispmap": 137, "effectiveareatable2d": 138, "energydependentmultigausspsf": 139, "energydispersion2d": 140, "fovalign": 141, "irfmap": 143, "irf_registri": 144, "psf3d": 145, "psfkernel": 146, "psfking": 147, "psfmap": [148, 454, 493], "parametricpsf": 149, "radmax2d": 150, "recopsfmap": 151, "load_irf_dict_from_fil": [152, 493], "adaptiveringbackgroundmak": 153, "datasetsmak": 154, "fovbackgroundmak": [155, 495], "maker_registri": 156, "mapdatasetmak": [158, 496], "phasebackgroundmak": 159, "reflectedregionsbackgroundmak": [160, 497], "reflectedregionsfind": 161, "regionsfind": 162, "ringbackgroundmak": 163, "safemaskmak": 164, "spectrumdatasetmak": [165, 496], "wobbleregionsfind": 166, "make_counts_rad_max": 167, "make_edisp_kernel_map": 168, "make_edisp_map": 169, "make_effective_livetime_map": 170, "make_map_background_irf": 171, "make_map_exposure_true_energi": 172, "make_observation_time_map": 173, "make_psf_map": 174, "make_theta_squared_t": 175, "geom": 176, "hpxgeom": 177, "hpxmap": 178, "hpxndmap": [179, 500], "labelmapaxi": [180, 456], "mapax": 182, "mapaxi": 183, "mapcoord": [184, 500], "regiongeom": [186, 501], "regionndmap": [187, 500, 501], "timemapaxi": [188, 456], "wcsgeom": 189, "wcsmap": 190, "wcsndmap": [191, 500], "containment_radiu": 192, "containment_region": 193, "covari": [194, 453], "paramet": [196, 197, 365, 377, 382, 428, 438, 453, 458, 459, 472], "priorparamet": [198, 199], "brokenpowerlawspectralmodel": 200, "compoundspectralmodel": 201, "constantfluxspatialmodel": 202, "constantspatialmodel": 203, "constantspectralmodel": 204, "constanttemporalmodel": 205, "datasetmodel": 206, "diskspatialmodel": 207, "eblabsorptionnormspectralmodel": 208, "ebl_data_builtin": 209, "expcutoffpowerlaw3fglspectralmodel": 210, "expcutoffpowerlawnormspectralmodel": 211, "expcutoffpowerlawspectralmodel": 212, "expdecaytemporalmodel": 213, "fovbackgroundmodel": 214, "gaussianspatialmodel": 215, "gaussianspectralmodel": 216, "gaussiantemporalmodel": 217, "generalizedgaussianspatialmodel": 218, "generalizedgaussiantemporalmodel": 219, "lightcurvetemplatetemporalmodel": 220, "lineartemporalmodel": 221, "logparabolanormspectralmodel": 222, "logparabolaspectralmodel": 223, "model_registri": 224, "meyercrabspectralmodel": 225, "modelbas": 227, "naimaspectralmodel": 229, "piecewisenormspatialmodel": 230, "piecewisenormspectralmodel": 231, "pointspatialmodel": 232, "powerlaw2spectralmodel": 233, "powerlawnormspectralmodel": 234, "powerlawspectralmodel": 235, "powerlawtemporalmodel": 236, "spatial_model_registri": 237, "spectral_model_registri": 238, "scalespectralmodel": 239, "shell2spatialmodel": 240, "shellspatialmodel": 241, "sinetemporalmodel": 242, "skymodel": [243, 459], "smoothbrokenpowerlawspectralmodel": 244, "spatialmodel": 245, "spectralmodel": 246, "superexpcutoffpowerlaw3fglspectralmodel": 247, "superexpcutoffpowerlaw4fgldr3spectralmodel": 248, "superexpcutoffpowerlaw4fglspectralmodel": 249, "temporal_model_registri": 250, "templatendspatialmodel": 251, "templatendspectralmodel": 252, "templatenpredmodel": 253, "templatephasecurvetemporalmodel": 254, "templatespatialmodel": 255, "templatespectralmodel": 256, "temporalmodel": 257, "create_cosmic_ray_spectral_model": 258, "create_crab_spectral_model": 259, "create_fermi_isotropic_diffuse_model": 260, "integrate_spectrum": 261, "read_hermes_cub": [262, 264], "scale_plot_flux": 263, "select_nested_model": 265, "stat_profile_ul_scipi": 266, "cashcountsstatist": 267, "wstatcountsstatist": 268, "cash": [269, 549, 550], "cash_sum_cython": 270, "compute_chisq": 271, "compute_flux_doubl": 272, "compute_fpp": 273, "compute_fvar": 274, "cstat": 275, "f_cash_root_cython": 276, "get_wstat_gof_term": 277, "get_wstat_mu_bkg": 278, "norm_bounds_cython": 279, "wstat": [280, 549, 550, 551], "hierarchical_clust": 281, "standard_scal": 282, "d_sun_to_galactic_cent": 283, "cartesian": 284, "fov_to_ski": 285, "galact": [286, 464], "motion_since_birth": 287, "polar": 288, "sky_to_fov": 289, "velocity_glon_glat": 290, "hduloc": 291, "lazyfitsdata": 292, "earth_location_from_dict": 293, "trapz_loglog": 294, "scaledregulargridinterpol": 295, "interpolate_profil": 296, "interpolation_scal": 297, "backend_default": 298, "method_default": 299, "method_kwargs_default": 300, "n_jobs_default": 301, "pool_kwargs_default": 302, "multiprocessing_manag": 303, "run_multiprocess": 304, "inversecdfsampl": 305, "draw": 306, "get_random_st": 307, "normal": [308, 472], "pdf": 309, "sample_powerlaw": 310, "sample_spher": 311, "sample_sphere_dist": 312, "sample_tim": 313, "compound_region_to_region": 314, "make_concentric_annulus_sky_region": 315, "make_orthogonal_rectangle_sky_region": 316, "region_to_fram": 317, "regions_to_compound_region": 318, "get_images_path": 319, "make_path": 320, "read_yaml": 321, "recursive_merge_dict": 322, "write_yaml": 323, "hstack_column": 324, "table_row_to_dict": 325, "table_standardise_units_copi": 326, "table_standardise_units_inplac": 327, "checker": 328, "assert_quantity_allclos": 329, "note": [329, 354, 392, 549], "assert_skycoord_allclos": 330, "assert_time_allclos": 331, "mpl_plot_check": 332, "requires_data": 333, "requires_depend": 334, "absolute_tim": 335, "time_ref_from_dict": 336, "time_ref_to_dict": 337, "time_relative_to_ref": 338, "standardise_unit": 339, "unit_from_fits_image_hdu": 340, "mappanelplott": 341, "add_colorbar": 342, "annotate_heatmap": 343, "colormap_hess": 344, "colormap_milagro": 345, "plot_contour_lin": 346, "plot_distribut": 347, "plot_heatmap": 348, "plot_map_rgb": 349, "plot_npred_sign": 350, "plot_spectrum_datasets_off_region": 351, "plot_theta_squared_t": 352, "depend": [353, 371, 377, 407, 429, 438, 440, 459], "requir": [353, 354, 371, 381], "option": [353, 371, 453], "develop": [354, 356, 357, 361], "how": [354, 355, 357, 374, 383, 456, 488], "To": [354, 355, 374, 488], "gener": [354, 360, 364, 369, 380, 381, 486, 507, 538], "convent": 354, "python": [354, 355, 361, 379, 390], "version": [354, 379, 383, 392, 443], "support": [354, 361, 379, 380, 382, 454, 484], "axi": [354, 493], "name": [354, 365, 493], "clobber": 354, "overwrit": 354, "pixel": [354, 368, 457], "bsd": 354, "gpl": 354, "licens": 354, "write": [354, 359, 428, 440, 456, 457, 485, 501, 548], "code": [354, 355, 360, 363, 384], "where": 354, "should": 354, "i": [354, 357, 359, 441], "import": [354, 443], "from": [354, 446, 456, 457, 458, 501], "return": [354, 355], "sever": 354, "valu": [354, 382, 438, 456, 461], "what": [354, 357, 359, 362, 364, 369, 370, 378, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 425, 427, 428, 431, 437, 445, 472, 474], "convers": 354, "do": 354, "input": [354, 381, 431], "float": 354, "type": [354, 381, 484], "32": 354, "bit": 354, "64": 354, "us": [354, 364, 382, 387, 390, 428, 438, 439, 445, 452, 453, 454, 456, 472, 473, 476, 479, 483, 484, 485, 486, 487, 493, 495, 496, 497, 500, 519, 530, 531, 532, 545], "number": [354, 379, 493], "messag": 354, "extrapol": 354, "assert": 354, "skip": 354, "some": [354, 364, 457], "astropi": [354, 379], "caplog": 354, "fixtur": 354, "make": [354, 357, 383, 437, 440, 448, 473], "pull": [354, 357, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "request": [354, 357, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "new": [354, 365, 369, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 446], "modifi": [354, 456, 459], "which": 354, "github": 354, "action": [354, 374], "fix": [354, 407, 416, 419, 420], "non": [354, 456, 501], "unix": 354, "end": 354, "backport": 354, "releas": [354, 363, 379, 380, 383, 384, 392], "handl": [354, 363, 364, 365, 376, 380, 455, 552], "break": 354, "chang": [354, 375, 416, 419, 420], "deprec": [354, 379], "renam": 354, "an": [354, 423, 439, 440, 452, 457], "argument": [354, 368], "remov": [354, 458], "attribut": [354, 355, 365], "other": [354, 355, 364, 384, 387, 476], "click": 354, "bundl": 354, "extern": 354, "locat": 354, "origin": [354, 357], "warn": 354, "object": [354, 355, 364, 376, 432, 433, 439, 440, 451, 460], "text": 354, "repr": 354, "str": 354, "output": 354, "jupyt": [354, 390], "cell": 354, "convert": 354, "sphinx": [354, 355], "galleri": [354, 355, 502], "format": [354, 552], "document": [355, 357, 363, 374, 420], "build": [355, 357, 384, 445, 446], "rst": 355, "file": [355, 380, 428, 432, 433, 436, 463, 472, 485, 501], "docstr": 355, "extens": 355, "choos": 355, "thumbnail": 355, "tooltip": 355, "tutori": [355, 362, 374, 386, 438, 463, 468], "deal": 355, "link": 355, "broken": [355, 515, 529], "includ": [355, 461], "png": 355, "imag": [355, 360, 368, 373, 431, 437, 456, 468], "In": 355, "guidelin": [355, 359, 360, 374], "method": [355, 366, 367, 382, 444, 456, 486, 500], "singl": [355, 430], "guid": [356, 489], "contribut": [357, 380, 458], "thi": 357, "accept": 357, "certif": 357, "dco": [357, 380], "get": [357, 374, 386, 432, 433, 456, 477, 478, 479, 485, 500], "touch": 357, "earli": 357, "small": 357, "set": [357, 428, 456, 472], "up": [357, 373, 375], "pig": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "1": [359, 363, 382, 392, 393, 400, 401, 403, 408, 416, 417, 418, 419, 420, 421, 461], "purpos": 359, "abstract": [359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "review": 359, "statu": [359, 364, 373, 379], "final": [359, 383, 428, 551], "remark": 359, "decis": [359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "2": [360, 361, 382, 392, 404, 406, 418, 420, 461, 527], "organ": [360, 369], "low": [360, 473], "The": [360, 384, 436, 438, 453, 461, 485, 497], "case": [360, 364, 382, 551], "cube": [360, 456, 468], "style": 360, "subpackag": 360, "exist": 360, "3": [361, 382, 392, 399, 409, 421], "plan": 361, "drop": 361, "7": [361, 365, 392, 413], "user": [361, 489], "perspect": 361, "maintain": [361, 380], "detail": [361, 435], "4": [362, 392, 410], "setup": [362, 384, 386, 388, 389, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 472, 473, 474], "we": [362, 369, 370, 378, 465], "have": [362, 364, 369, 370, 378], "propos": [362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 381, 424, 425, 428, 430, 431, 432, 433, 436, 439, 440, 441, 443, 444, 445, 446, 447, 453, 457, 458, 460, 472, 473], "altern": [362, 365, 367, 368, 369, 370, 371, 372, 374, 375, 378, 381], "5": [363, 392, 411], "0": [363, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "roadmap": 363, "meet": 363, "project": [363, 384], "mainten": 363, "qualiti": [363, 384, 427, 429, 435, 453], "event": [363, 367, 439, 440, 448, 456, 463, 464, 466, 474, 485, 493], "simul": [363, 366, 429, 430, 439, 440, 443, 447], "paper": 363, "manag": [363, 387], "6": [364, 392, 412], "cta": [364, 463], "terminologi": 364, "limit": 364, "scenario": 364, "idea": 364, "diagram": 364, "implement": [364, 365, 374, 380, 382, 459, 461], "road": 364, "introduct": [365, 368, 369, 371, 372, 374, 378, 380, 381, 423, 427, 429, 437, 448, 450, 451, 452, 455, 456, 463, 464, 468, 474, 476, 478, 479, 549], "introduc": [365, 373, 375, 377, 378, 441], "scheme": [365, 380], "unifi": [365, 378], "call": 365, "background": [365, 369, 373, 376, 382, 433, 438, 439, 455, 458, 463, 464, 472, 491, 495, 496, 497, 498, 549], "backgroundmodel": 365, "backgroundirfmodel": 365, "forward": 365, "fold": 365, "spectralirfmodel": 365, "spatialirfmodel": 365, "sourceirfmodel": 365, "improv": [365, 377, 407, 416, 419, 420], "sourcemodel": 365, "seril": 365, "spatial": [365, 377, 437, 450, 456, 459, 478, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512], "default": 365, "evalu": [365, 366, 367], "specif": [365, 374, 451], "expos": 365, "add": [365, 458], "parametr": 365, "task": [365, 366, 367, 368, 369, 370, 371], "list": [365, 366, 367, 368, 369, 370, 371, 439, 446, 451, 456, 457, 458, 459, 474, 485], "8": [366, 392, 414], "helper": 366, "conveni": 366, "serial": [366, 381, 436], "outlook": [366, 367, 368, 370, 371, 373, 374, 375, 378], "lazi": 366, "load": [366, 423, 425, 427, 429, 451, 458], "9": [367, 392, 415], "sampl": [367, 439, 440], "perform": [367, 424, 463, 473], "precis": 367, "10": [368, 392, 394], "rotat": 368, "mask": [368, 427, 428, 433, 452, 457, 472], "11": [369, 392, 395], "light": [369, 445, 446, 447, 543], "curv": [369, 445, 446, 447, 542, 543], "lightcurv": [369, 439, 444, 447, 451], "gamma": [369, 450], "rai": [369, 450], "astronomi": 369, "now": 369, "approach": [369, 424, 425, 428, 430, 431, 432, 433, 436, 439, 440, 441, 443, 444, 445, 446, 447, 453, 457, 458, 460, 472, 473], "bin": [369, 423, 438, 501], "prepar": [369, 379, 423, 424, 440, 473], "store": [369, 428, 492], "result": [369, 378, 423, 424, 428, 431, 438, 441, 445, 551], "further": [369, 549], "studi": 369, "discuss": 369, "12": [370, 392, 396], "13": [371, 392, 397, 406, 409], "distribut": [371, 466, 478], "14": [372, 392, 398], "uncertainti": 372, "16": [373, 392, 400], "structur": [373, 375, 407, 474, 546], "dissolv": 373, "clean": 373, "18": [374, 392, 402, 403, 404], "start": [374, 386, 477, 478, 479, 485, 500], "section": 374, "restructur": 374, "overview": [374, 386, 438, 463, 495, 497, 498], "instal": [374, 386, 387, 389], "changelog": 374, "19": [375, 392, 405], "follow": 375, "resolv": [375, 448], "detect": [375, 431, 437, 493], "minor": 375, "20": [376, 392, 407, 408, 410], "global": 376, "interact": 376, "between": 376, "21": 377, "spectral": [377, 382, 424, 425, 427, 428, 429, 436, 437, 450, 459, 468, 474, 502, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533], "norm": [377, 459, 508, 520, 523, 525, 528], "energi": [377, 423, 429, 438, 440, 454, 457, 459, 463, 464, 486, 490, 491, 492, 494], "absorpt": [377, 514], "addit": [377, 382, 494, 546], "simplifi": 377, "yaml": [377, 428, 472, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "represent": [377, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "shorter": 377, "alia": 377, "tag": 377, "22": [378, 411], "flux": [378, 382, 423, 425, 427, 428, 436, 441, 450, 451, 472, 473, 474, 486], "fluxestim": 378, "base": [378, 381, 499], "fluxpointscollect": 378, "unif": 378, "excess": [378, 424, 433, 444, 550], "generalist": 378, "23": [379, 414], "cycl": 379, "current": 379, "schedul": 379, "lt": 379, "freez": [379, 383, 458], "cython": [379, 384], "numpi": 379, "24": 380, "authorship": 380, "polici": 380, "citat": 380, "definit": [380, 445, 496], "contributor": [380, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "long": 380, "term": 380, "public": 380, "confer": 380, "metadata": [380, 381], "cff": 380, "codemeta": 380, "json": 380, "possibl": 380, "collect": 380, "person": 380, "inform": [380, 451, 461, 492], "author": 380, "materi": 380, "suggest": 380, "25": [381, 393], "contain": 381, "valid": 381, "hierarchi": 381, "solut": 381, "pydant": 381, "arbitrari": 381, "propag": 381, "along": 381, "dataflow": 381, "26": [382, 397], "prior": [382, 461], "motiv": 382, "systemat": 382, "nuisanc": 382, "3955": 382, "favor": 382, "posit": [382, 461, 492], "amplitud": [382, 461], "unfold": 382, "point": [382, 423, 425, 427, 428, 436, 437, 439, 444, 451, 463, 472, 473, 474, 486, 494, 509], "4122": 382, "exemplari": 382, "subclass": 382, "serialis": [382, 428, 441, 454, 458, 459, 464, 484], "outlin": 382, "branch": 383, "first": [383, 428], "major": 383, "candid": [383, 431], "post": 383, "bugfix": 383, "repositori": 384, "doc": 384, "extra": 384, "old": 384, "exampl": [384, 461, 476, 483, 484, 485, 486, 487, 493, 495, 496, 497, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 545, 549], "folder": 384, "webpag": 384, "org": 384, "binder": 384, "continu": 384, "virtual": 385, "environ": 385, "conda": 385, "venv": 385, "recommend": [386, 388], "anaconda": 387, "miniconda": 387, "mamba": 387, "pip": 387, "troubleshoot": [389, 548], "your": [389, 428, 548], "issu": 389, "help": 389, "ipython": 390, "17": [392, 401], "15": [392, 399], "aug": [393, 409], "2014": 393, "summari": [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 435, 464], "jan": 394, "28": [394, 412, 413], "2019": [394, 395, 396, 397, 398, 399], "": [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 428, 440, 466, 472], "mar": 395, "29": [395, 415], "mai": [396, 407], "30": [396, 398], "jul": 397, "sep": [398, 414], "dec": 399, "feb": [400, 413], "2020": [400, 401, 402, 403, 404], "apr": [401, 406, 410, 412], "nov": [402, 403, 404, 405, 411, 415], "4th": 402, "6th": [403, 418], "19th": 404, "22nd": 405, "2021": 405, "2015": [406, 409], "12th": 407, "2022": [407, 408, 416], "bug": [407, 416, 419, 420], "june": [408, 419], "16th": 408, "2016": [410, 411], "2017": 412, "2018": [413, 414, 415], "novemb": 416, "10th": 416, "march": 417, "14th": 417, "2023": [417, 418, 419], "decemb": 418, "13th": 419, "februari": 420, "29th": 420, "2024": 420, "unreleas": 421, "comput": [422, 423, 426, 427, 428, 433, 434, 437, 442, 449, 453, 462, 467, 469, 471, 473, 475, 503, 513, 534, 544], "sensit": 423, "defin": [423, 424, 427, 429, 437, 439, 440, 445, 446, 457, 473, 501], "obtain": [423, 438, 447, 460], "exercis": [423, 425, 427, 430, 435, 437, 439, 440, 447, 463, 464, 465, 466, 474], "extend": [424, 439], "prerequisit": [424, 425, 427, 428, 429, 430, 432, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 453, 457, 458, 461, 472, 473], "context": [424, 425, 427, 428, 429, 430, 431, 432, 433, 436, 438, 439, 441, 443, 444, 445, 446, 447, 457, 460, 461, 472, 473], "select": [424, 428, 437, 445, 446, 451, 458, 472, 473, 485], "creation": [424, 428, 446], "ON": [424, 429, 436], "geometri": [424, 437, 445, 446, 456, 457, 472, 473, 499, 501], "creat": [424, 427, 432, 433, 440, 452, 454, 456, 457, 473, 501], "loop": [424, 455, 473], "explor": [424, 428, 437, 468], "cumul": 424, "signific": [424, 431, 433, 457, 550], "power": [425, 515, 518, 519, 520, 526, 527, 528, 529, 530, 531, 532], "law": [425, 515, 518, 519, 520, 526, 527, 528, 529, 530, 531, 532], "cut": [425, 429], "off": [425, 427, 430, 436], "powerlaw": [425, 540], "parabola": [425, 522, 523], "next": [425, 427, 428, 431, 437, 445, 463, 465, 466, 472, 474], "target": 427, "exclus": [427, 428, 433, 457, 472], "chain": [427, 429], "spectrum": [427, 429, 430, 437, 448, 455, 473], "residu": [427, 429, 435, 473], "stack": [427, 433, 435, 484], "hli": 428, "configur": [428, 435, 441, 445, 472, 546], "step": [428, 463, 465, 466, 546], "save": [428, 472, 473], "disk": [428, 440, 472, 473, 505], "1d": [428, 430, 436, 445, 446, 468], "direct": 429, "compar": [429, 445], "against": 429, "literatur": 429, "On": 430, "read": [431, 436, 440, 441, 456, 457, 458, 501], "adapt": 431, "smooth": [431, 529], "t": [431, 550], "2d": [432, 468], "ring": [433, 455, 498], "extract": [433, 445, 446, 447], "correl": 433, "3d": [435, 436, 443, 445, 468], "joint": [435, 436, 484], "assess": [435, 453], "multi": 436, "differ": [436, 456, 552], "fermi": [436, 464], "lat": [436, 464], "3fhl": 436, "hess": 436, "hawc": [436, 465], "basic": [437, 456], "show": [437, 438, 460], "morpholog": 438, "signal": 438, "abov": 438, "each": 438, "chi": 438, "squar": [438, 466], "interest": 438, "like": 439, "templat": [439, 512, 533], "multipl": [439, 458, 461, 484], "tempor": [440, 447, 459, 502, 535, 536, 537, 538, 539, 540, 541, 542, 543], "evolut": 440, "sampler": 440, "let": 440, "profil": [441, 450, 551], "o": 441, "character": 444, "fraction": 444, "varianc": 444, "doubl": 444, "halv": 444, "bayesian": 444, "block": 444, "night": 445, "wise": 445, "lc": 445, "flare": 446, "interv": 446, "filter": 446, "assign": [446, 458], "all": 446, "vari": 447, "open": 448, "phasogram": 448, "li": 448, "ma": 448, "over": 448, "phase": [448, 542], "dark": [450, 476], "matter": [450, 476], "j": 450, "factor": 450, "spectra": 450, "product": [450, 454], "annihil": 450, "decai": 450, "avail": 451, "subset": 451, "hgp": 451, "pretti": 451, "print": 451, "empti": 452, "access": [452, 456, 465, 485], "content": [452, 501], "resampl": 452, "error": [453, 550], "confid": 453, "contour": 453, "stat_contour": 453, "stat_surfac": 453, "inbuilt": 454, "asymmetr": 454, "effect": [454, 455, 463, 490], "area": [454, 463, 490], "exposur": [454, 464], "dispers": [454, 463, 464, 492], "edisp": 454, "kernel": 454, "psf": [454, 464, 494], "dl4": [454, 484, 486, 496, 500, 545], "safe": [455, 496], "rang": [455, 496], "fov": [455, 495], "reflect": [455, 497], "durat": 455, "livetim": 455, "wc": [456, 501], "factori": 456, "ad": 456, "ax": [456, 501], "contigu": 456, "index": [456, 461, 485], "slice": 456, "sub": [456, 477], "iter": 456, "fill": [456, 501], "onto": 456, "oper": [456, 457], "cutout": 456, "manual": [457, 460], "modif": 457, "dilat": 457, "eros": 457, "boundari": 457, "aim": 458, "given": 458, "combin": [458, 485], "two": 458, "count": [458, 464, 484, 550], "unfreez": 458, "compound": [459, 516], "share": 459, "custom": [459, 461, 545], "morphologi": 459, "variou": 460, "quantiti": [460, 486], "group": 460, "hierarch": 460, "about": 461, "without": 461, "encourag": 461, "1dc": 463, "spread": [463, 494], "diffus": 464, "isotrop": 464, "produc": 465, "h": 466, "e": 466, "dr1": [466, 532], "theta": 466, "survei": [470, 553], "inspect": 473, "butterfli": 473, "gammalib": 476, "fermist": 476, "clumpi": 476, "gamlik": 476, "galactocentr": 478, "spiral": 478, "arm": 478, "veloc": 478, "wind": 481, "nebula": 481, "supernova": 482, "remnant": 482, "predict": 484, "work": 485, "dl5": [486, 545], "dl6": 486, "edg": 486, "true": [490, 492, 494], "offset": [490, 491, 492, 494], "angl": [490, 491, 492, 494], "aeff_2d": 490, "reconstruct": 491, "detector": 491, "bkg_3d": 491, "radial": 491, "symmetr": 491, "bkg_2d": 491, "edisp_2d": 492, "rmf": 492, "expect": 493, "factoris": 493, "As": 494, "psf_tabl": 494, "finder": 497, "healpix": 499, "accessor": 500, "skycoord": 500, "volum": 501, "angular": 501, "size": 501, "upsampl": 501, "downsampl": 501, "relat": 501, "underli": 501, "constant": [504, 517, 535], "gaussian": [506, 507, 521, 537, 538], "piecewis": [508, 525], "shell": 510, "shell2": 511, "ebl": 514, "cutoff": [518, 519, 520, 530, 531, 532], "3fgl": [519, 530], "naima": 524, "super": [530, 531, 532], "4fgl": [531, 532], "dr3": 531, "dr2": 532, "expdecai": 536, "linear": 539, "sine": 541, "built": 545, "workflow": 546, "glossari": 547, "execut": 548, "driven": 548, "own": 548, "cli": 548, "found": 548, "poisson": 549, "measur": 549, "caveat": 549, "notat": 550, "deriv": 551, "formula": 551, "likelihood": 551, "good": 551, "special": 551, "scale": 552, "mission": 552, "elaps": 552, "met": 552, "colormap": 553, "panel": 553}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"analysis - High level interface": [[0, "analysis-high-level-interface"]], "gammapy.analysis Package": [[0, "module-gammapy.analysis"]], "Classes": [[0, "classes"], [1, "classes"], [1, "id1"], [1, "id2"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [10, "id2"], [12, "classes"], [13, "classes"], [13, "id5"], [13, "id7"], [13, "id10"], [13, "id15"], [14, "classes"]], "astro - Astrophysics": [[1, "astro-astrophysics"]], "gammapy.astro.darkmatter Package": [[1, "module-gammapy.astro.darkmatter"]], "gammapy.astro.population Package": [[1, "module-gammapy.astro.population"]], "Functions": [[1, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [10, "id1"], [10, "id3"], [12, "functions"], [13, "functions"], [13, "id1"], [13, "id2"], [13, "id3"], [13, "id4"], [13, "id6"], [13, "id8"], [13, "id9"], [13, "id12"], [13, "id13"], [13, "id14"], [13, "id16"], [13, "id17"], [14, "functions"]], "Variables": [[1, "variables"], [2, "variables"], [3, "variables"], [4, "variables"], [5, "variables"], [7, "variables"], [8, "variables"], [10, "variables"], [13, "variables"], [13, "id11"]], "gammapy.astro.source Package": [[1, "module-gammapy.astro.source"]], "catalog - Source catalogs": [[2, "catalog-source-catalogs"]], "gammapy.catalog Package": [[2, "module-gammapy.catalog"]], "data - DL3 data and observations": [[3, "data-dl3-data-and-observations"]], "gammapy.data Package": [[3, "module-gammapy.data"]], "datasets - Reduced datasets": [[4, "datasets-reduced-datasets"]], "gammapy.datasets Package": [[4, "module-gammapy.datasets"]], "estimators - High level estimators": [[5, "estimators-high-level-estimators"]], "gammapy.estimators Package": [[5, "module-gammapy.estimators"]], "gammapy.estimators.utils Module": [[5, "module-gammapy.estimators.utils"]], "API reference": [[6, "api-reference"]], "irf - Instrument response functions": [[7, "irf-instrument-response-functions"]], "gammapy.irf Package": [[7, "module-gammapy.irf"]], "makers - Data reduction": [[8, "makers-data-reduction"]], "gammapy.makers Package": [[8, "module-gammapy.makers"]], "gammapy.makers.utils Module": [[8, "module-gammapy.makers.utils"]], "maps - Sky maps": [[9, "maps-sky-maps"]], "gammapy.maps Package": [[9, "module-gammapy.maps"]], "modeling - Models and fitting": [[10, "modeling-models-and-fitting"]], "gammapy.modeling Package": [[10, "module-gammapy.modeling"]], "gammapy.modeling.models Package": [[10, "module-gammapy.modeling.models"]], "gammapy.modeling.models.utils Module": [[10, "module-gammapy.modeling.models.utils"]], "scripts - Command line tools": [[11, "scripts-command-line-tools"]], "gammapy": [[11, "gammapy"]], "analysis": [[11, "gammapy-analysis"]], "config": [[11, "gammapy-analysis-config"]], "run": [[11, "gammapy-analysis-run"]], "check": [[11, "gammapy-check"]], "logging": [[11, "gammapy-check-logging"]], "download": [[11, "gammapy-download"]], "datasets": [[11, "gammapy-download-datasets"]], "notebooks": [[11, "gammapy-download-notebooks"]], "info": [[11, "gammapy-info"]], "stats - Statistics": [[12, "stats-statistics"]], "gammapy.stats Package": [[12, "module-gammapy.stats"]], "utils - Utilities": [[13, "utils-utilities"]], "gammapy.utils.cluster Module": [[13, "module-gammapy.utils.cluster"]], "gammapy.utils.coordinates Package": [[13, "module-gammapy.utils.coordinates"]], "gammapy.utils.integrate Module": [[13, "module-gammapy.utils.integrate"]], "gammapy.utils.interpolation Module": [[13, "module-gammapy.utils.interpolation"]], "gammapy.utils.fits Module": [[13, "module-gammapy.utils.fits"]], "gammapy.utils.random Package": [[13, "module-gammapy.utils.random"]], "gammapy.utils.regions Module": [[13, "module-gammapy.utils.regions"]], "gammapy.utils.parallel Module": [[13, "module-gammapy.utils.parallel"]], "gammapy.utils.scripts Module": [[13, "module-gammapy.utils.scripts"]], "gammapy.utils.table Module": [[13, "module-gammapy.utils.table"]], "gammapy.utils.testing Module": [[13, "module-gammapy.utils.testing"]], "gammapy.utils.time Module": [[13, "module-gammapy.utils.time"]], "gammapy.utils.units Module": [[13, "module-gammapy.utils.units"]], "visualization - Plotting features": [[14, "visualization-plotting-features"]], "gammapy.visualization Package": [[14, "module-gammapy.visualization"]], "Analysis": [[15, "analysis"]], "AnalysisConfig": [[16, "analysisconfig"]], "BurkertProfile": [[17, "burkertprofile"]], "DMProfile": [[18, "dmprofile"]], "DarkMatterAnnihilationSpectralModel": [[19, "darkmatterannihilationspectralmodel"]], "DarkMatterDecaySpectralModel": [[20, "darkmatterdecayspectralmodel"]], "EinastoProfile": [[21, "einastoprofile"]], "IsothermalProfile": [[22, "isothermalprofile"]], "JFactory": [[23, "jfactory"]], "MooreProfile": [[24, "mooreprofile"]], "NFWProfile": [[25, "nfwprofile"]], "PrimaryFlux": [[26, "primaryflux"]], "ZhaoProfile": [[27, "zhaoprofile"]], "CaseBattacharya1998": [[28, "casebattacharya1998"]], "Exponential": [[29, "exponential"]], "FaucherKaspi2006": [[30, "faucherkaspi2006"]], "FaucherKaspi2006VelocityBimodal": [[31, "faucherkaspi2006velocitybimodal"]], "FaucherKaspi2006VelocityMaxwellian": [[32, "faucherkaspi2006velocitymaxwellian"]], "FaucherSpiral": [[33, "faucherspiral"]], "LogSpiral": [[34, "logspiral"]], "Lorimer2006": [[35, "lorimer2006"]], "Paczynski1990": [[36, "paczynski1990"]], "Paczynski1990Velocity": [[37, "paczynski1990velocity"]], "ValleeSpiral": [[38, "valleespiral"]], "YusifovKucuk2004": [[39, "yusifovkucuk2004"]], "YusifovKucuk2004B": [[40, "yusifovkucuk2004b"]], "add_observed_parameters": [[41, "add-observed-parameters"]], "add_pulsar_parameters": [[42, "add-pulsar-parameters"]], "add_pwn_parameters": [[43, "add-pwn-parameters"]], "add_snr_parameters": [[44, "add-snr-parameters"]], "make_base_catalog_galactic": [[45, "make-base-catalog-galactic"]], "make_catalog_random_positions_cube": [[46, "make-catalog-random-positions-cube"]], "make_catalog_random_positions_sphere": [[47, "make-catalog-random-positions-sphere"]], "radial_distributions": [[48, "radial-distributions"]], "velocity_distributions": [[49, "velocity-distributions"]], "PWN": [[50, "pwn"]], "Pulsar": [[51, "pulsar"]], "SNR": [[52, "snr"]], "SNRTrueloveMcKee": [[53, "snrtruelovemckee"]], "SimplePulsar": [[54, "simplepulsar"]], "CATALOG_REGISTRY": [[55, "catalog-registry"]], "SourceCatalog": [[56, "sourcecatalog"]], "SourceCatalog1LHAASO": [[57, "sourcecatalog1lhaaso"]], "SourceCatalog2FHL": [[58, "sourcecatalog2fhl"]], "SourceCatalog2HWC": [[59, "sourcecatalog2hwc"]], "SourceCatalog3FGL": [[60, "sourcecatalog3fgl"]], "SourceCatalog3FHL": [[61, "sourcecatalog3fhl"]], "SourceCatalog3HWC": [[62, "sourcecatalog3hwc"]], "SourceCatalog4FGL": [[63, "sourcecatalog4fgl"]], "SourceCatalogGammaCat": [[64, "sourcecataloggammacat"]], "SourceCatalogHGPS": [[65, "sourcecataloghgps"]], "SourceCatalogLargeScaleHGPS": [[66, "sourcecataloglargescalehgps"]], "SourceCatalogObject": [[67, "sourcecatalogobject"]], "SourceCatalogObject1LHAASO": [[68, "sourcecatalogobject1lhaaso"]], "SourceCatalogObject2FHL": [[69, "sourcecatalogobject2fhl"]], "SourceCatalogObject2HWC": [[70, "sourcecatalogobject2hwc"]], "SourceCatalogObject3FGL": [[71, "sourcecatalogobject3fgl"]], "SourceCatalogObject3FHL": [[72, "sourcecatalogobject3fhl"]], "SourceCatalogObject3HWC": [[73, "sourcecatalogobject3hwc"]], "SourceCatalogObject4FGL": [[74, "sourcecatalogobject4fgl"]], "SourceCatalogObjectGammaCat": [[75, "sourcecatalogobjectgammacat"]], "SourceCatalogObjectHGPS": [[76, "sourcecatalogobjecthgps"]], "SourceCatalogObjectHGPSComponent": [[77, "sourcecatalogobjecthgpscomponent"]], "DataStore": [[78, "datastore"]], "EventList": [[79, "eventlist"]], "EventListMetaData": [[80, "eventlistmetadata"]], "FixedPointingInfo": [[81, "fixedpointinginfo"]], "GTI": [[82, "gti"]], "HDUIndexTable": [[83, "hduindextable"]], "Observation": [[84, "observation"]], "ObservationFilter": [[85, "observationfilter"]], "ObservationTable": [[86, "observationtable"]], "Observations": [[87, "observations"]], "ObservationsEventsSampler": [[88, "observationseventssampler"]], "PointingInfo": [[89, "pointinginfo"]], "PointingMode": [[90, "pointingmode"]], "get_irfs_features": [[91, "get-irfs-features"]], "observatory_locations": [[92, "observatory-locations"]], "DATASET_REGISTRY": [[93, "dataset-registry"]], "Dataset": [[94, "dataset"], [366, "dataset"], [455, "dataset"]], "Datasets": [[95, "datasets"], [363, "datasets"], [366, "datasets"], [381, "datasets"], [452, "datasets"]], "FluxPointsDataset": [[96, "fluxpointsdataset"], [366, "fluxpointsdataset"], [452, "fluxpointsdataset"]], "MapDataset": [[97, "mapdataset"], [366, "mapdataset"], [452, "mapdataset"]], "MapDatasetEventSampler": [[98, "mapdataseteventsampler"], [367, "mapdataseteventsampler"]], "MapDatasetMetaData": [[99, "mapdatasetmetadata"]], "MapDatasetOnOff": [[100, "mapdatasetonoff"], [366, "mapdatasetonoff"]], "OGIPDatasetReader": [[101, "ogipdatasetreader"]], "OGIPDatasetWriter": [[102, "ogipdatasetwriter"]], "ObservationEventSampler": [[103, "observationeventsampler"]], "SpectrumDataset": [[104, "spectrumdataset"], [366, "spectrumdataset"], [452, "spectrumdataset"]], "SpectrumDatasetOnOff": [[105, "spectrumdatasetonoff"], [366, "spectrumdatasetonoff"]], "create_map_dataset_from_observation": [[106, "create-map-dataset-from-observation"]], "create_map_dataset_geoms": [[107, "create-map-dataset-geoms"]], "ASmoothMapEstimator": [[108, "asmoothmapestimator"]], "ESTIMATOR_REGISTRY": [[109, "estimator-registry"]], "EnergyDependentMorphologyEstimator": [[110, "energydependentmorphologyestimator"]], "Estimator": [[111, "estimator"]], "ExcessMapEstimator": [[112, "excessmapestimator"]], "FluxMaps": [[113, "fluxmaps"]], "FluxMetaData": [[114, "fluxmetadata"]], "FluxPoints": [[115, "fluxpoints"]], "FluxPointsEstimator": [[116, "fluxpointsestimator"]], "FluxProfileEstimator": [[117, "fluxprofileestimator"]], "ImageProfile": [[118, "imageprofile"]], "ImageProfileEstimator": [[119, "imageprofileestimator"]], "LightCurveEstimator": [[120, "lightcurveestimator"]], "ParameterEstimator": [[121, "parameterestimator"]], "SensitivityEstimator": [[122, "sensitivityestimator"]], "TSMapEstimator": [[123, "tsmapestimator"]], "compute_lightcurve_doublingtime": [[124, "compute-lightcurve-doublingtime"]], "compute_lightcurve_fpp": [[125, "compute-lightcurve-fpp"]], "compute_lightcurve_fvar": [[126, "compute-lightcurve-fvar"]], "estimate_exposure_reco_energy": [[127, "estimate-exposure-reco-energy"]], "find_peaks": [[128, "find-peaks"]], "find_peaks_in_flux_map": [[129, "find-peaks-in-flux-map"]], "get_rebinned_axis": [[130, "get-rebinned-axis"]], "resample_energy_edges": [[131, "resample-energy-edges"]], "Background2D": [[132, "background2d"]], "Background3D": [[133, "background3d"]], "BackgroundIRF": [[134, "backgroundirf"]], "EDispKernel": [[135, "edispkernel"]], "EDispKernelMap": [[136, "edispkernelmap"]], "EDispMap": [[137, "edispmap"]], "EffectiveAreaTable2D": [[138, "effectiveareatable2d"]], "EnergyDependentMultiGaussPSF": [[139, "energydependentmultigausspsf"]], "EnergyDispersion2D": [[140, "energydispersion2d"]], "FoVAlignment": [[141, "fovalignment"]], "IRF": [[142, "irf"], [381, "irf"]], "IRFMap": [[143, "irfmap"]], "IRF_REGISTRY": [[144, "irf-registry"]], "PSF3D": [[145, "psf3d"]], "PSFKernel": [[146, "psfkernel"]], "PSFKing": [[147, "psfking"]], "PSFMap": [[148, "psfmap"]], "ParametricPSF": [[149, "parametricpsf"]], "RadMax2D": [[150, "radmax2d"]], "RecoPSFMap": [[151, "recopsfmap"]], "load_irf_dict_from_file": [[152, "load-irf-dict-from-file"]], "AdaptiveRingBackgroundMaker": [[153, "adaptiveringbackgroundmaker"]], "DatasetsMaker": [[154, "datasetsmaker"]], "FoVBackgroundMaker": [[155, "fovbackgroundmaker"]], "MAKER_REGISTRY": [[156, "maker-registry"]], "Maker": [[157, "maker"]], "MapDatasetMaker": [[158, "mapdatasetmaker"]], "PhaseBackgroundMaker": [[159, "phasebackgroundmaker"]], "ReflectedRegionsBackgroundMaker": [[160, "reflectedregionsbackgroundmaker"]], "ReflectedRegionsFinder": [[161, "reflectedregionsfinder"]], "RegionsFinder": [[162, "regionsfinder"]], "RingBackgroundMaker": [[163, "ringbackgroundmaker"]], "SafeMaskMaker": [[164, "safemaskmaker"]], "SpectrumDatasetMaker": [[165, "spectrumdatasetmaker"]], "WobbleRegionsFinder": [[166, "wobbleregionsfinder"]], "make_counts_rad_max": [[167, "make-counts-rad-max"]], "make_edisp_kernel_map": [[168, "make-edisp-kernel-map"]], "make_edisp_map": [[169, "make-edisp-map"]], "make_effective_livetime_map": [[170, "make-effective-livetime-map"]], "make_map_background_irf": [[171, "make-map-background-irf"]], "make_map_exposure_true_energy": [[172, "make-map-exposure-true-energy"]], "make_observation_time_map": [[173, "make-observation-time-map"]], "make_psf_map": [[174, "make-psf-map"]], "make_theta_squared_table": [[175, "make-theta-squared-table"]], "Geom": [[176, "geom"]], "HpxGeom": [[177, "hpxgeom"]], "HpxMap": [[178, "hpxmap"]], "HpxNDMap": [[179, "hpxndmap"]], "LabelMapAxis": [[180, "labelmapaxis"], [456, "labelmapaxis"]], "Map": [[181, "map"]], "MapAxes": [[182, "mapaxes"]], "MapAxis": [[183, "mapaxis"]], "MapCoord": [[184, "mapcoord"], [500, "mapcoord"]], "Maps": [[185, "maps"], [363, "maps"], [456, "maps"], [474, "maps"]], "RegionGeom": [[186, "regiongeom"], [501, "regiongeom"]], "RegionNDMap": [[187, "regionndmap"], [501, "regionndmap"]], "TimeMapAxis": [[188, "timemapaxis"], [456, "timemapaxis"]], "WcsGeom": [[189, "wcsgeom"]], "WcsMap": [[190, "wcsmap"]], "WcsNDMap": [[191, "wcsndmap"]], "containment_radius": [[192, "containment-radius"]], "containment_region": [[193, "containment-region"]], "Covariance": [[194, "covariance"]], "Fit": [[195, "fit"], [443, "fit"], [464, "fit"]], "Parameter": [[196, "parameter"]], "Parameters": [[197, "parameters"]], "PriorParameter": [[198, "priorparameter"]], "PriorParameters": [[199, "priorparameters"]], "BrokenPowerLawSpectralModel": [[200, "brokenpowerlawspectralmodel"]], "CompoundSpectralModel": [[201, "compoundspectralmodel"]], "ConstantFluxSpatialModel": [[202, "constantfluxspatialmodel"]], "ConstantSpatialModel": [[203, "constantspatialmodel"]], "ConstantSpectralModel": [[204, "constantspectralmodel"]], "ConstantTemporalModel": [[205, "constanttemporalmodel"]], "DatasetModels": [[206, "datasetmodels"]], "DiskSpatialModel": [[207, "diskspatialmodel"]], "EBLAbsorptionNormSpectralModel": [[208, "eblabsorptionnormspectralmodel"]], "EBL_DATA_BUILTIN": [[209, "ebl-data-builtin"]], "ExpCutoffPowerLaw3FGLSpectralModel": [[210, "expcutoffpowerlaw3fglspectralmodel"]], "ExpCutoffPowerLawNormSpectralModel": [[211, "expcutoffpowerlawnormspectralmodel"]], "ExpCutoffPowerLawSpectralModel": [[212, "expcutoffpowerlawspectralmodel"]], "ExpDecayTemporalModel": [[213, "expdecaytemporalmodel"]], "FoVBackgroundModel": [[214, "fovbackgroundmodel"]], "GaussianSpatialModel": [[215, "gaussianspatialmodel"]], "GaussianSpectralModel": [[216, "gaussianspectralmodel"]], "GaussianTemporalModel": [[217, "gaussiantemporalmodel"]], "GeneralizedGaussianSpatialModel": [[218, "generalizedgaussianspatialmodel"]], "GeneralizedGaussianTemporalModel": [[219, "generalizedgaussiantemporalmodel"]], "LightCurveTemplateTemporalModel": [[220, "lightcurvetemplatetemporalmodel"]], "LinearTemporalModel": [[221, "lineartemporalmodel"]], "LogParabolaNormSpectralModel": [[222, "logparabolanormspectralmodel"]], "LogParabolaSpectralModel": [[223, "logparabolaspectralmodel"]], "MODEL_REGISTRY": [[224, "model-registry"]], "MeyerCrabSpectralModel": [[225, "meyercrabspectralmodel"]], "Model": [[226, "model"]], "ModelBase": [[227, "modelbase"]], "Models": [[228, "models"], [459, "models"]], "NaimaSpectralModel": [[229, "naimaspectralmodel"]], "PiecewiseNormSpatialModel": [[230, "piecewisenormspatialmodel"]], "PiecewiseNormSpectralModel": [[231, "piecewisenormspectralmodel"]], "PointSpatialModel": [[232, "pointspatialmodel"]], "PowerLaw2SpectralModel": [[233, "powerlaw2spectralmodel"]], "PowerLawNormSpectralModel": [[234, "powerlawnormspectralmodel"]], "PowerLawSpectralModel": [[235, "powerlawspectralmodel"]], "PowerLawTemporalModel": [[236, "powerlawtemporalmodel"]], "SPATIAL_MODEL_REGISTRY": [[237, "spatial-model-registry"]], "SPECTRAL_MODEL_REGISTRY": [[238, "spectral-model-registry"]], "ScaleSpectralModel": [[239, "scalespectralmodel"]], "Shell2SpatialModel": [[240, "shell2spatialmodel"]], "ShellSpatialModel": [[241, "shellspatialmodel"]], "SineTemporalModel": [[242, "sinetemporalmodel"]], "SkyModel": [[243, "skymodel"], [459, "skymodel"]], "SmoothBrokenPowerLawSpectralModel": [[244, "smoothbrokenpowerlawspectralmodel"]], "SpatialModel": [[245, "spatialmodel"]], "SpectralModel": [[246, "spectralmodel"]], "SuperExpCutoffPowerLaw3FGLSpectralModel": [[247, "superexpcutoffpowerlaw3fglspectralmodel"]], "SuperExpCutoffPowerLaw4FGLDR3SpectralModel": [[248, "superexpcutoffpowerlaw4fgldr3spectralmodel"]], "SuperExpCutoffPowerLaw4FGLSpectralModel": [[249, "superexpcutoffpowerlaw4fglspectralmodel"]], "TEMPORAL_MODEL_REGISTRY": [[250, "temporal-model-registry"]], "TemplateNDSpatialModel": [[251, "templatendspatialmodel"]], "TemplateNDSpectralModel": [[252, "templatendspectralmodel"]], "TemplateNPredModel": [[253, "templatenpredmodel"]], "TemplatePhaseCurveTemporalModel": [[254, "templatephasecurvetemporalmodel"]], "TemplateSpatialModel": [[255, "templatespatialmodel"]], "TemplateSpectralModel": [[256, "templatespectralmodel"]], "TemporalModel": [[257, "temporalmodel"]], "create_cosmic_ray_spectral_model": [[258, "create-cosmic-ray-spectral-model"]], "create_crab_spectral_model": [[259, "create-crab-spectral-model"]], "create_fermi_isotropic_diffuse_model": [[260, "create-fermi-isotropic-diffuse-model"]], "integrate_spectrum": [[261, "integrate-spectrum"]], "read_hermes_cube": [[262, "read-hermes-cube"], [264, "read-hermes-cube"]], "scale_plot_flux": [[263, "scale-plot-flux"]], "select_nested_models": [[265, "select-nested-models"]], "stat_profile_ul_scipy": [[266, "stat-profile-ul-scipy"]], "CashCountsStatistic": [[267, "cashcountsstatistic"]], "WStatCountsStatistic": [[268, "wstatcountsstatistic"]], "cash": [[269, "cash"]], "cash_sum_cython": [[270, "cash-sum-cython"]], "compute_chisq": [[271, "compute-chisq"]], "compute_flux_doubling": [[272, "compute-flux-doubling"]], "compute_fpp": [[273, "compute-fpp"]], "compute_fvar": [[274, "compute-fvar"]], "cstat": [[275, "cstat"]], "f_cash_root_cython": [[276, "f-cash-root-cython"]], "get_wstat_gof_terms": [[277, "get-wstat-gof-terms"]], "get_wstat_mu_bkg": [[278, "get-wstat-mu-bkg"]], "norm_bounds_cython": [[279, "norm-bounds-cython"]], "wstat": [[280, "wstat"]], "hierarchical_clustering": [[281, "hierarchical-clustering"]], "standard_scaler": [[282, "standard-scaler"]], "D_SUN_TO_GALACTIC_CENTER": [[283, "d-sun-to-galactic-center"]], "cartesian": [[284, "cartesian"]], "fov_to_sky": [[285, "fov-to-sky"]], "galactic": [[286, "galactic"]], "motion_since_birth": [[287, "motion-since-birth"]], "polar": [[288, "polar"]], "sky_to_fov": [[289, "sky-to-fov"]], "velocity_glon_glat": [[290, "velocity-glon-glat"]], "HDULocation": [[291, "hdulocation"]], "LazyFitsData": [[292, "lazyfitsdata"]], "earth_location_from_dict": [[293, "earth-location-from-dict"]], "trapz_loglog": [[294, "trapz-loglog"]], "ScaledRegularGridInterpolator": [[295, "scaledregulargridinterpolator"]], "interpolate_profile": [[296, "interpolate-profile"]], "interpolation_scale": [[297, "interpolation-scale"]], "BACKEND_DEFAULT": [[298, "backend-default"]], "METHOD_DEFAULT": [[299, "method-default"]], "METHOD_KWARGS_DEFAULT": [[300, "method-kwargs-default"]], "N_JOBS_DEFAULT": [[301, "n-jobs-default"]], "POOL_KWARGS_DEFAULT": [[302, "pool-kwargs-default"]], "multiprocessing_manager": [[303, "multiprocessing-manager"]], "run_multiprocessing": [[304, "run-multiprocessing"]], "InverseCDFSampler": [[305, "inversecdfsampler"]], "draw": [[306, "draw"]], "get_random_state": [[307, "get-random-state"]], "normalize": [[308, "normalize"]], "pdf": [[309, "pdf"]], "sample_powerlaw": [[310, "sample-powerlaw"]], "sample_sphere": [[311, "sample-sphere"]], "sample_sphere_distance": [[312, "sample-sphere-distance"]], "sample_times": [[313, "sample-times"]], "compound_region_to_regions": [[314, "compound-region-to-regions"]], "make_concentric_annulus_sky_regions": [[315, "make-concentric-annulus-sky-regions"]], "make_orthogonal_rectangle_sky_regions": [[316, "make-orthogonal-rectangle-sky-regions"]], "region_to_frame": [[317, "region-to-frame"]], "regions_to_compound_region": [[318, "regions-to-compound-region"]], "get_images_paths": [[319, "get-images-paths"]], "make_path": [[320, "make-path"]], "read_yaml": [[321, "read-yaml"]], "recursive_merge_dicts": [[322, "recursive-merge-dicts"]], "write_yaml": [[323, "write-yaml"]], "hstack_columns": [[324, "hstack-columns"]], "table_row_to_dict": [[325, "table-row-to-dict"]], "table_standardise_units_copy": [[326, "table-standardise-units-copy"]], "table_standardise_units_inplace": [[327, "table-standardise-units-inplace"]], "Checker": [[328, "checker"]], "assert_quantity_allclose": [[329, "assert-quantity-allclose"]], "Notes": [[329, "notes"], [549, "notes"]], "assert_skycoord_allclose": [[330, "assert-skycoord-allclose"]], "assert_time_allclose": [[331, "assert-time-allclose"]], "mpl_plot_check": [[332, "mpl-plot-check"]], "requires_data": [[333, "requires-data"]], "requires_dependency": [[334, "requires-dependency"]], "absolute_time": [[335, "absolute-time"]], "time_ref_from_dict": [[336, "time-ref-from-dict"]], "time_ref_to_dict": [[337, "time-ref-to-dict"]], "time_relative_to_ref": [[338, "time-relative-to-ref"]], "standardise_unit": [[339, "standardise-unit"]], "unit_from_fits_image_hdu": [[340, "unit-from-fits-image-hdu"]], "MapPanelPlotter": [[341, "mappanelplotter"]], "add_colorbar": [[342, "add-colorbar"]], "annotate_heatmap": [[343, "annotate-heatmap"]], "colormap_hess": [[344, "colormap-hess"]], "colormap_milagro": [[345, "colormap-milagro"]], "plot_contour_line": [[346, "plot-contour-line"]], "plot_distribution": [[347, "plot-distribution"]], "plot_heatmap": [[348, "plot-heatmap"]], "plot_map_rgb": [[349, "plot-map-rgb"]], "plot_npred_signal": [[350, "plot-npred-signal"]], "plot_spectrum_datasets_off_regions": [[351, "plot-spectrum-datasets-off-regions"]], "plot_theta_squared_table": [[352, "plot-theta-squared-table"]], "Dependencies": [[353, "dependencies"], [371, "dependencies"]], "Required dependencies": [[353, "required-dependencies"], [371, "required-dependencies"]], "Optional dependencies": [[353, "optional-dependencies"], [371, "optional-dependencies"]], "Developer How To": [[354, "developer-how-to"]], "General conventions": [[354, "general-conventions"]], "Python version support": [[354, "python-version-support"]], "Coordinate and axis names": [[354, "coordinate-and-axis-names"]], "Clobber or overwrite?": [[354, "clobber-or-overwrite"]], "Pixel coordinate convention": [[354, "pixel-coordinate-convention"]], "BSD or GPL license?": [[354, "bsd-or-gpl-license"]], "How to write code": [[354, "how-to-write-code"]], "Where should I import from?": [[354, "where-should-i-import-from"]], "Functions returning several values": [[354, "functions-returning-several-values"]], "What checks and conversions should I do for inputs?": [[354, "what-checks-and-conversions-should-i-do-for-inputs"]], "Float data type: 32 bit or 64 bit?": [[354, "float-data-type-32-bit-or-64-bit"]], "How to use random numbers": [[354, "how-to-use-random-numbers"]], "How to use logging": [[354, "how-to-use-logging"]], "Generating log messages": [[354, "generating-log-messages"]], "Interpolation and extrapolation": [[354, "interpolation-and-extrapolation"]], "How to write tests": [[354, "how-to-write-tests"]], "Assert convention": [[354, "assert-convention"]], "Testing of plotting functions": [[354, "testing-of-plotting-functions"]], "Skip unit tests for some Astropy versions": [[354, "skip-unit-tests-for-some-astropy-versions"]], "Caplog fixture": [[354, "caplog-fixture"]], "How to make a pull request": [[354, "how-to-make-a-pull-request"]], "Making a pull request with new or modified datasets": [[354, "making-a-pull-request-with-new-or-modified-datasets"]], "Making a pull request which skips GitHub Actions": [[354, "making-a-pull-request-which-skips-github-actions"]], "Fix non-Unix line endings": [[354, "fix-non-unix-line-endings"]], "Making a pull request that requires backport": [[354, "making-a-pull-request-that-requires-backport"]], "Release notes": [[354, "release-notes"], [392, "release-notes"]], "How to handle API breaking changes?": [[354, "how-to-handle-api-breaking-changes"]], "Deprecating a function or a class": [[354, "deprecating-a-function-or-a-class"]], "Renaming an argument": [[354, "renaming-an-argument"]], "Removing an attribute": [[354, "removing-an-attribute"]], "Others": [[354, "others"], [384, "others"]], "Command line tools using click": [[354, "command-line-tools-using-click"]], "Bundled gammapy.extern code": [[354, "bundled-gammapy-extern-code"]], "Locate origin of warnings": [[354, "locate-origin-of-warnings"]], "Object text repr, str and info": [[354, "object-text-repr-str-and-info"]], "Output in Jupyter notebook cells": [[354, "output-in-jupyter-notebook-cells"]], "Convert a jupyter notebook to python script in the sphinx-gallery format": [[354, "convert-a-jupyter-notebook-to-python-script-in-the-sphinx-gallery-format"]], "Documentation How To": [[355, "documentation-how-to"]], "Documentation building": [[355, "documentation-building"]], "Check Python code": [[355, "check-python-code"]], "Code in RST files": [[355, "code-in-rst-files"]], "Code in docstrings in Python files": [[355, "code-in-docstrings-in-python-files"]], "Sphinx gallery extension": [[355, "sphinx-gallery-extension"]], "Choose a thumbnail and tooltip for the tutorial gallery": [[355, "choose-a-thumbnail-and-tooltip-for-the-tutorial-gallery"]], "Dealing with links": [[355, "dealing-with-links"]], "Links to other tutorials": [[355, "links-to-other-tutorials"]], "API Links": [[355, "api-links"]], "Check broken links": [[355, "check-broken-links"]], "Include png files as images": [[355, "include-png-files-as-images"]], "In the RST files": [[355, "in-the-rst-files"]], "Documentation guidelines": [[355, "documentation-guidelines"]], "Functions or class methods that return a single object": [[355, "functions-or-class-methods-that-return-a-single-object"]], "Class attributes": [[355, "class-attributes"]], "Developer guide": [[356, "developer-guide"]], "How to contribute to Gammapy": [[357, "how-to-contribute-to-gammapy"]], "What is this?": [[357, "what-is-this"]], "Acceptation of the Developer Certificate of Origin (DCO)": [[357, "acceptation-of-the-developer-certificate-of-origin-dco"]], "Get in touch early": [[357, "get-in-touch-early"]], "Make small pull requests": [[357, "make-small-pull-requests"]], "Get set up": [[357, "get-set-up"]], "Running tests & building Documentation": [[357, "running-tests-building-documentation"]], "PIGs": [[358, "pigs"]], "PIG 1 - PIG purpose and guidelines": [[359, "pig-1-pig-purpose-and-guidelines"]], "Abstract": [[359, "abstract"], [360, "abstract"], [361, "abstract"], [362, "abstract"], [363, "abstract"], [364, "abstract"], [366, "abstract"], [367, "abstract"], [368, "abstract"], [369, "abstract"], [370, "abstract"], [371, "abstract"], [372, "abstract"], [373, "abstract"], [374, "abstract"], [375, "abstract"], [376, "abstract"], [377, "abstract"], [378, "abstract"], [379, "abstract"], [380, "abstract"], [381, "abstract"], [382, "abstract"]], "What is a PIG?": [[359, "what-is-a-pig"]], "Writing a PIG": [[359, "writing-a-pig"]], "PIG review": [[359, "pig-review"]], "PIG status": [[359, "pig-status"]], "Final remarks": [[359, "final-remarks"]], "Decision": [[359, "decision"], [360, "decision"], [361, "decision"], [362, "decision"], [363, "decision"], [364, "decision"], [365, "decision"], [366, "decision"], [367, "decision"], [368, "decision"], [369, "decision"], [370, "decision"], [371, "decision"], [372, "decision"], [373, "decision"], [374, "decision"], [375, "decision"], [376, "decision"], [377, "decision"], [378, "decision"], [379, "decision"], [380, "decision"], [381, "decision"], [382, "decision"]], "PIG 2 - Organization of low level analysis code": [[360, "pig-2-organization-of-low-level-analysis-code"]], "The case of image and cube analysis": [[360, "the-case-of-image-and-cube-analysis"]], "General code style guidelines": [[360, "general-code-style-guidelines"]], "Data analysis subpackages in gammapy": [[360, "data-analysis-subpackages-in-gammapy"]], "Low level map and cube analysis": [[360, "low-level-map-and-cube-analysis"]], "Existing code": [[360, "existing-code"]], "PIG 3 - Plan for dropping Python 2.7 support": [[361, "pig-3-plan-for-dropping-python-2-7-support"]], "User perspective": [[361, "user-perspective"]], "Maintainer and developer perspective": [[361, "maintainer-and-developer-perspective"]], "Detailed plan": [[361, "detailed-plan"]], "PIG 4 - Setup for tutorial notebooks and data": [[362, "pig-4-setup-for-tutorial-notebooks-and-data"]], "What we have": [[362, "what-we-have"], [370, "what-we-have"], [378, "what-we-have"]], "Proposal": [[362, "proposal"], [364, "proposal"], [365, "proposal"], [366, "proposal"], [367, "proposal"], [368, "proposal"], [369, "proposal"], [370, "proposal"], [372, "proposal"], [373, "proposal"], [374, "proposal"], [375, "proposal"], [376, "proposal"], [377, "proposal"]], "Alternatives": [[362, "alternatives"], [365, "alternatives"], [368, "alternatives"], [370, "alternatives"], [371, "alternatives"], [372, "alternatives"], [374, "alternatives"], [375, "alternatives"], [381, "alternatives"]], "PIG 5 - Gammapy 1.0 roadmap": [[363, "pig-5-gammapy-1-0-roadmap"]], "Releases": [[363, "releases"], [380, "releases"], [384, "releases"]], "Meetings": [[363, "meetings"]], "Projects": [[363, "projects"]], "Maintenance and Code Quality": [[363, "maintenance-and-code-quality"]], "Documentation": [[363, "documentation"], [420, "documentation"]], "Data and Observation handling": [[363, "data-and-observation-handling"]], "IRFs": [[363, "irfs"], [463, "irfs"]], "Map Analysis / Data Reduction": [[363, "map-analysis-data-reduction"]], "Modeling": [[363, "modeling"], [381, "modeling"]], "Fitting": [[363, "fitting"], [453, "fitting"]], "Event Simulation": [[363, "event-simulation"]], "Timing Analysis": [[363, "timing-analysis"]], "High level interface": [[363, "high-level-interface"], [472, "high-level-interface"]], "Papers": [[363, "papers"]], "Project Management": [[363, "project-management"]], "PIG 6 - CTA observation handling": [[364, "pig-6-cta-observation-handling"]], "Some terminology": [[364, "some-terminology"]], "Status": [[364, "status"], [373, "status"]], "Limitations": [[364, "limitations"]], "Objectives": [[364, "objectives"]], "Use cases / scenarios": [[364, "use-cases-scenarios"]], "What others have": [[364, "what-others-have"]], "General idea and class diagram": [[364, "general-idea-and-class-diagram"]], "Implementation road map": [[364, "implementation-road-map"]], "Proposed class diagram": [[364, "proposed-class-diagram"]], "PIG 7 - Models": [[365, "pig-7-models"]], "Introduction": [[365, "introduction"], [368, "introduction"], [369, "introduction"], [371, "introduction"], [372, "introduction"], [374, "introduction"], [378, "introduction"], [380, "introduction"], [381, "introduction"], [423, "introduction"], [427, "introduction"], [429, "introduction"], [437, "introduction"], [448, "introduction"], [450, "introduction"], [451, "introduction"], [452, "introduction"], [455, "introduction"], [456, "introduction"], [463, "introduction"], [464, "introduction"], [468, "introduction"], [474, "introduction"], [476, "introduction"], [478, "introduction"], [479, "introduction"], [549, "introduction"]], "Introduce naming scheme for models": [[365, "introduce-naming-scheme-for-models"]], "Unify calling interface for models": [[365, "unify-calling-interface-for-models"]], "Introduction of background models": [[365, "introduction-of-background-models"]], "BackgroundModel": [[365, "backgroundmodel"]], "BackgroundIRFModel": [[365, "backgroundirfmodel"]], "Introduction of \u201cforward folded\u201d models": [[365, "introduction-of-forward-folded-models"]], "SpectralIRFModel": [[365, "spectralirfmodel"]], "SpatialIRFModel": [[365, "spatialirfmodel"]], "SourceIRFModel": [[365, "sourceirfmodel"]], "Improve SourceModels class": [[365, "improve-sourcemodels-class"]], "Introduction of model name attributes": [[365, "introduction-of-model-name-attributes"]], "Improve and implement model serilization": [[365, "improve-and-implement-model-serilization"]], "Improve spatial models": [[365, "improve-spatial-models"]], "Implement sky coordinate handling": [[365, "implement-sky-coordinate-handling"]], "Implement default parameters": [[365, "implement-default-parameters"]], "Implement evaluation region specifications": [[365, "implement-evaluation-region-specifications"]], "Expose model parameters as attributes": [[365, "expose-model-parameters-as-attributes"]], "Add new parametric models": [[365, "add-new-parametric-models"]], "Task list": [[365, "task-list"], [367, "task-list"], [368, "task-list"], [369, "task-list"], [370, "task-list"], [371, "task-list"]], "PIG 8 - Datasets": [[366, "pig-8-datasets"]], "Dataset helper / convenience methods": [[366, "dataset-helper-convenience-methods"]], "Simulation of MapDataset and SpectrumDataset": [[366, "simulation-of-mapdataset-and-spectrumdataset"]], "Dataset serialization": [[366, "dataset-serialization"]], "Task List": [[366, "task-list"]], "Outlook": [[366, "outlook"], [368, "outlook"], [370, "outlook"], [371, "outlook"], [373, "outlook"], [374, "outlook"], [375, "outlook"], [378, "outlook"]], "Parallel evaluation of datasets": [[366, "parallel-evaluation-of-datasets"]], "Lazy loading of Datasets": [[366, "lazy-loading-of-datasets"]], "PIG 9 - Event sampling": [[367, "pig-9-event-sampling"]], "Sampling methods": [[367, "sampling-methods"]], "Performance and precision evaluation": [[367, "performance-and-precision-evaluation"]], "Alternatives / Outlook": [[367, "alternatives-outlook"]], "PIG 10 - Regions": [[368, "pig-10-regions"]], "Region arguments": [[368, "region-arguments"]], "Sky and pixel regions": [[368, "sky-and-pixel-regions"]], "Rotated regions": [[368, "rotated-regions"]], "Images and masks": [[368, "images-and-masks"]], "PIG 11 - Light curves": [[369, "pig-11-light-curves"]], "Lightcurves in gamma-ray astronomy": [[369, "lightcurves-in-gamma-ray-astronomy"]], "Background / What we have now": [[369, "background-what-we-have-now"]], "General organization of the new approach": [[369, "general-organization-of-the-new-approach"]], "Time bin preparation": [[369, "time-bin-preparation"]], "Data reduction": [[369, "data-reduction"], [435, "data-reduction"], [435, "id1"], [472, "data-reduction"], [473, "data-reduction"]], "Data Fitting": [[369, "data-fitting"]], "Storing the results and further studies": [[369, "storing-the-results-and-further-studies"]], "Discussion / Alternatives": [[369, "discussion-alternatives"]], "Time bins": [[369, "time-bins"]], "Light Curve Fitting": [[369, "light-curve-fitting"]], "Lightcurve": [[369, "lightcurve"]], "PIG 12 - High level interface": [[370, "pig-12-high-level-interface"]], "PIG 13 - Gammapy dependencies and distribution": [[371, "pig-13-gammapy-dependencies-and-distribution"]], "Distributions": [[371, "distributions"], [371, "id1"]], "PIG 14 - Uncertainty estimation": [[372, "pig-14-uncertainty-estimation"]], "PIG 16 - Gammapy package structure": [[373, "pig-16-gammapy-package-structure"]], "Introduce gammapy.modeling": [[373, "introduce-gammapy-modeling"]], "Dissolve gammapy.background": [[373, "dissolve-gammapy-background"]], "Dissolve gammapy.image": [[373, "dissolve-gammapy-image"]], "Clean up gammapy.utils": [[373, "clean-up-gammapy-utils"]], "PIG 18 - Documentation": [[374, "pig-18-documentation"]], "Guidelines and specific actions": [[374, "guidelines-and-specific-actions"]], "Getting started section restructuring": [[374, "getting-started-section-restructuring"]], "Gammapy overview": [[374, "gammapy-overview"]], "Installation": [[374, "installation"], [386, "installation"], [387, "installation"]], "Getting started": [[374, "getting-started"], [386, "getting-started"], [477, "getting-started"], [478, "getting-started"], [479, "getting-started"]], "Tutorials": [[374, "tutorials"], [468, "tutorials"]], "How To": [[374, "how-to"], [488, "how-to"]], "Reference": [[374, "reference"], [548, "reference"]], "Changelog": [[374, "changelog"]], "Implementation": [[374, "implementation"], [382, "implementation"]], "PIG 19 - Gammapy package structure follow up": [[375, "pig-19-gammapy-package-structure-follow-up"]], "Introduce gammapy.datasets": [[375, "introduce-gammapy-datasets"]], "Introduce gammapy.makers": [[375, "introduce-gammapy-makers"]], "Introduce gammapy.estimators": [[375, "introduce-gammapy-estimators"]], "Introduce gammapy.visualization": [[375, "introduce-gammapy-visualization"]], "Resolve gammapy.detect": [[375, "resolve-gammapy-detect"]], "Minor changes": [[375, "minor-changes"]], "PIG 20 - Global Model API": [[376, "pig-20-global-model-api"]], "Global Model Handling": [[376, "global-model-handling"]], "Interaction Between Models and Dataset Objects": [[376, "interaction-between-models-and-dataset-objects"]], "Background Model Handling": [[376, "background-model-handling"]], "PIG 21 - Models improvements": [[377, "pig-21-models-improvements"]], "Spectral Norm Models": [[377, "spectral-norm-models"]], "Energy Dependent Spatial Models": [[377, "energy-dependent-spatial-models"]], "Spectral Absorption Model": [[377, "spectral-absorption-model"]], "Additional Models": [[377, "additional-models"]], "Simplify YAML Representation": [[377, "simplify-yaml-representation"]], "Introduce Shorter YAML Alias Tags": [[377, "introduce-shorter-yaml-alias-tags"]], "Simplify YAML Parameter Representation": [[377, "simplify-yaml-parameter-representation"]], "PIG 22 - Unified flux estimators API": [[378, "pig-22-unified-flux-estimators-api"]], "Proposal of API for flux estimate results": [[378, "proposal-of-api-for-flux-estimate-results"]], "Introduce a FluxEstimate base class": [[378, "introduce-a-fluxestimate-base-class"]], "Introduce a FluxMap API": [[378, "introduce-a-fluxmap-api"]], "Introduce a FluxPointsCollection API": [[378, "introduce-a-fluxpointscollection-api"]], "Unification of flux estimators?": [[378, "unification-of-flux-estimators"]], "Excess estimators": [[378, "excess-estimators"]], "Generalist estimators": [[378, "generalist-estimators"]], "Alternative": [[378, "alternative"]], "PIG 23 - Gammapy release cycle and version numbering": [[379, "pig-23-gammapy-release-cycle-and-version-numbering"]], "Current status": [[379, "current-status"]], "Release scheduling and LTS": [[379, "release-scheduling-and-lts"]], "Version numbering": [[379, "version-numbering"]], "Release preparation, feature freeze": [[379, "release-preparation-feature-freeze"]], "Deprecation": [[379, "deprecation"]], "Support of python Cython, numpy and astropy versions": [[379, "support-of-python-cython-numpy-and-astropy-versions"]], "PIG 24 - Authorship policy": [[380, "pig-24-authorship-policy"]], "Citation scheme": [[380, "citation-scheme"]], "Authorship policy": [[380, "authorship-policy"]], "Definition of a Contributor": [[380, "definition-of-a-contributor"]], "Long Term Support releases": [[380, "long-term-support-releases"]], "General Gammapy publications": [[380, "general-gammapy-publications"]], "Contribution in conferences": [[380, "contribution-in-conferences"]], "Metadata files": [[380, "metadata-files"]], "CITATION.cff": [[380, "citation-cff"]], "codemeta.json": [[380, "codemeta-json"]], "Definition of the Maintainer": [[380, "definition-of-the-maintainer"]], "Possible implementations": [[380, "possible-implementations"]], "DCO implementation": [[380, "dco-implementation"]], "Collection of the personal information of authors": [[380, "collection-of-the-personal-information-of-authors"]], "Handling of conference material": [[380, "handling-of-conference-material"]], "Suggestions": [[380, "suggestions"]], "PIG 25 - Metadata container for Gammapy": [[381, "pig-25-metadata-container-for-gammapy"]], "Requirements": [[381, "requirements"]], "Metadata API": [[381, "metadata-api"]], "Type validation": [[381, "type-validation"]], "Hierarchy": [[381, "hierarchy"]], "Serialization": [[381, "serialization"]], "Proposed solution": [[381, "proposed-solution"]], "pydantic": [[381, "pydantic"]], "the base class": [[381, "the-base-class"]], "arbitrary type input and validation": [[381, "arbitrary-type-input-and-validation"]], "Proposed metadata classes": [[381, "proposed-metadata-classes"]], "data": [[381, "data"]], "Makers": [[381, "makers"]], "Estimators": [[381, "estimators"]], "Metadata generation and propagation along the dataflow": [[381, "metadata-generation-and-propagation-along-the-dataflow"]], "PIG 26 - Model Priors API": [[382, "pig-26-model-priors-api"]], "Motivation": [[382, "motivation"]], "Use cases": [[382, "use-cases"]], "Case 1: Background systematics as a nuisance parameter #3955": [[382, "case-1-background-systematics-as-a-nuisance-parameter-3955"]], "Case 2: Favoring positive values for flux amplitudes": [[382, "case-2-favoring-positive-values-for-flux-amplitudes"]], "Case 3: Support unfolding methods for spectral flux points #4122": [[382, "case-3-support-unfolding-methods-for-spectral-flux-points-4122"]], "Exemplary additional prior subclasses:": [[382, "exemplary-additional-prior-subclasses"]], "Serialisation": [[382, "serialisation"], [454, "serialisation"], [454, "id1"], [454, "id2"], [464, "serialisation"]], "Implementation Outline": [[382, "implementation-outline"]], "How to make a Gammapy release": [[383, "how-to-make-a-gammapy-release"]], "Feature Freeze and Branching": [[383, "feature-freeze-and-branching"]], "Releasing the first major release candidate": [[383, "releasing-the-first-major-release-candidate"]], "Releasing the final version of the major release": [[383, "releasing-the-final-version-of-the-major-release"]], "Post release": [[383, "post-release"]], "Make a Bugfix release": [[383, "make-a-bugfix-release"]], "Project setup": [[384, "project-setup"]], "Gammapy repository": [[384, "gammapy-repository"]], "Package and docs": [[384, "package-and-docs"]], "Download": [[384, "download"]], "Build": [[384, "build"]], "Cython": [[384, "cython"]], "The gammapy-data repository": [[384, "the-gammapy-data-repository"]], "The gammapy-extra repository": [[384, "the-gammapy-extra-repository"]], "Old example data": [[384, "old-example-data"]], "Other folders": [[384, "other-folders"]], "Other repositories": [[384, "other-repositories"]], "Gammapy webpages": [[384, "gammapy-webpages"]], "gammapy.org": [[384, "gammapy-org"]], "docs.gammapy.org": [[384, "docs-gammapy-org"]], "Gammapy Binder": [[384, "id1"]], "Continuous integration": [[384, "continuous-integration"]], "Code quality": [[384, "code-quality"]], "Virtual Environments": [[385, "virtual-environments"]], "Conda Environments": [[385, "conda-environments"]], "Venv Environments": [[385, "venv-environments"]], "Recommended Setup": [[386, "recommended-setup"], [388, "recommended-setup"]], "Tutorials Overview": [[386, "tutorials-overview"]], "Using Anaconda / Miniconda": [[387, "using-anaconda-miniconda"]], "Using Mamba": [[387, "using-mamba"]], "Using pip": [[387, "using-pip"]], "Using other package managers": [[387, "using-other-package-managers"]], "Troubleshooting": [[389, "troubleshooting"], [548, "troubleshooting"]], "Check your setup": [[389, "check-your-setup"]], "Install issues": [[389, "install-issues"]], "Help!?": [[389, "help"]], "Using Gammapy": [[390, "using-gammapy"]], "Jupyter notebooks": [[390, "jupyter-notebooks"]], "Python": [[390, "id2"]], "IPython": [[390, "id3"]], "Python scripts": [[390, "python-scripts"]], "Gammapy": [[391, "gammapy"]], "Version 1.2": [[392, "version-1-2"]], "Version 1.1": [[392, "version-1-1"]], "Version 1.0.2": [[392, "version-1-0-2"]], "Version 1.0.1": [[392, "version-1-0-1"]], "Version 1.0": [[392, "version-1-0"]], "Version 0.20.1": [[392, "version-0-20-1"]], "Version 0.20": [[392, "version-0-20"]], "Version 0.19": [[392, "version-0-19"]], "Version 0.18": [[392, "version-0-18"]], "Version 0.17": [[392, "version-0-17"]], "Version 0.16": [[392, "version-0-16"]], "Version 0.15": [[392, "version-0-15"]], "Version 0.14": [[392, "version-0-14"]], "Version 0.13": [[392, "version-0-13"]], "Version 0.12": [[392, "version-0-12"]], "Version 0.11": [[392, "version-0-11"]], "Version 0.10": [[392, "version-0-10"]], "Version 0.9": [[392, "version-0-9"]], "Version 0.8": [[392, "version-0-8"]], "Version 0.7": [[392, "version-0-7"]], "Version 0.6": [[392, "version-0-6"]], "Version 0.5": [[392, "version-0-5"]], "Version 0.4": [[392, "version-0-4"]], "Version 0.3": [[392, "version-0-3"]], "Version 0.2": [[392, "version-0-2"]], "Version 0.1": [[392, "version-0-1"]], "0.1 (Aug 25, 2014)": [[393, "aug-25-2014"]], "Summary": [[393, "summary"], [394, "summary"], [395, "summary"], [396, "summary"], [397, "summary"], [398, "summary"], [399, "summary"], [400, "summary"], [401, "summary"], [402, "summary"], [403, "summary"], [404, "summary"], [405, "summary"], [406, "summary"], [407, "summary"], [408, "summary"], [409, "summary"], [410, "summary"], [411, "summary"], [412, "summary"], [413, "summary"], [414, "summary"], [415, "summary"], [416, "summary"], [417, "summary"], [418, "summary"], [419, "summary"], [420, "summary"], [435, "summary"], [464, "summary"]], "Contributors": [[393, "contributors"], [394, "contributors"], [395, "contributors"], [396, "contributors"], [397, "contributors"], [398, "contributors"], [399, "contributors"], [400, "contributors"], [401, "contributors"], [402, "contributors"], [405, "contributors"], [406, "contributors"], [407, "contributors"], [408, "contributors"], [409, "contributors"], [410, "contributors"], [411, "contributors"], [412, "contributors"], [413, "contributors"], [414, "contributors"], [415, "contributors"], [416, "contributors"], [417, "contributors"], [418, "contributors"], [419, "contributors"], [420, "contributors"]], "Pull requests": [[393, "pull-requests"], [394, "pull-requests"], [395, "pull-requests"], [396, "pull-requests"], [397, "pull-requests"], [398, "pull-requests"], [399, "pull-requests"], [400, "pull-requests"], [401, "pull-requests"], [402, "pull-requests"], [403, "pull-requests"], [404, "pull-requests"], [405, "pull-requests"], [406, "pull-requests"], [409, "pull-requests"], [410, "pull-requests"], [411, "pull-requests"], [412, "pull-requests"], [413, "pull-requests"], [414, "pull-requests"], [415, "pull-requests"]], "0.10 (Jan 28, 2019)": [[394, "jan-28-2019"]], "What\u2019s new?": [[394, "what-s-new"], [395, "what-s-new"], [396, "what-s-new"], [397, "what-s-new"], [398, "what-s-new"], [399, "what-s-new"], [400, "what-s-new"], [401, "what-s-new"], [402, "what-s-new"], [403, "what-s-new"], [404, "what-s-new"], [405, "what-s-new"], [407, "what-s-new"], [408, "what-s-new"], [410, "what-s-new"], [411, "what-s-new"], [412, "what-s-new"], [413, "what-s-new"], [414, "what-s-new"], [415, "what-s-new"]], "0.11 (Mar 29, 2019)": [[395, "mar-29-2019"]], "0.12 (May 30, 2019)": [[396, "may-30-2019"]], "0.13 (Jul 26, 2019)": [[397, "jul-26-2019"]], "0.14 (Sep 30, 2019)": [[398, "sep-30-2019"]], "0.15 (Dec 3, 2019)": [[399, "dec-3-2019"]], "0.16 (Feb 1, 2020)": [[400, "feb-1-2020"]], "0.17 (Apr 1, 2020)": [[401, "apr-1-2020"]], "0.18 (Nov 4th, 2020)": [[402, "nov-4th-2020"]], "0.18.1 (Nov 6th, 2020)": [[403, "nov-6th-2020"]], "0.18.2 (Nov 19th, 2020)": [[404, "nov-19th-2020"]], "0.19 (Nov 22nd, 2021)": [[405, "nov-22nd-2021"]], "0.2 (Apr 13, 2015)": [[406, "apr-13-2015"]], "0.20 (May 12th, 2022)": [[407, "may-12th-2022"]], "Package structure and dependencies": [[407, "package-structure-and-dependencies"]], "Bug fixes and improvements": [[407, "bug-fixes-and-improvements"], [416, "bug-fixes-and-improvements"], [419, "bug-fixes-and-improvements"], [420, "bug-fixes-and-improvements"]], "Pull Requests": [[407, "pull-requests"], [408, "pull-requests"], [416, "pull-requests"], [417, "pull-requests"], [418, "pull-requests"], [419, "pull-requests"], [420, "pull-requests"]], "0.20.1 (June 16th, 2022)": [[408, "june-16th-2022"]], "0.3 (Aug 13, 2015)": [[409, "aug-13-2015"]], "0.4 (Apr 20, 2016)": [[410, "apr-20-2016"]], "0.5 (Nov 22, 2016)": [[411, "nov-22-2016"]], "0.6 (Apr 28, 2017)": [[412, "apr-28-2017"]], "0.7 (Feb 28, 2018)": [[413, "feb-28-2018"]], "0.8 (Sep 23, 2018)": [[414, "sep-23-2018"]], "0.9 (Nov 29, 2018)": [[415, "nov-29-2018"]], "1.0 (November 10th, 2022)": [[416, "november-10th-2022"]], "New features": [[416, "new-features"], [419, "new-features"], [420, "new-features"]], "API changes": [[416, "api-changes"], [419, "api-changes"], [420, "api-changes"]], "1.0.1 (March 14th, 2023)": [[417, "march-14th-2023"]], "1.0.2 (December 6th, 2023)": [[418, "december-6th-2023"]], "1.1 (June 13th 2023)": [[419, "june-13th-2023"]], "1.2 (February 29th 2024)": [[420, "february-29th-2024"]], "1.3 (unreleased)": [[421, "unreleased"]], "Computation times": [[422, "computation-times"], [426, "computation-times"], [434, "computation-times"], [442, "computation-times"], [449, "computation-times"], [462, "computation-times"], [467, "computation-times"], [469, "computation-times"], [471, "computation-times"], [475, "computation-times"], [503, "computation-times"], [513, "computation-times"], [534, "computation-times"], [544, "computation-times"]], "Point source sensitivity": [[423, "point-source-sensitivity"]], "Setup": [[423, "setup"], [424, "setup"], [425, "setup"], [427, "setup"], [428, "setup"], [429, "setup"], [430, "setup"], [431, "setup"], [432, "setup"], [433, "setup"], [437, "setup"], [438, "setup"], [439, "setup"], [440, "setup"], [441, "setup"], [444, "setup"], [445, "setup"], [446, "setup"], [447, "setup"], [450, "setup"], [452, "setup"], [455, "setup"], [456, "setup"], [457, "setup"], [458, "setup"], [459, "setup"], [463, "setup"], [464, "setup"], [472, "setup"], [473, "setup"], [474, "setup"]], "Check setup": [[423, "check-setup"], [424, "check-setup"], [427, "check-setup"], [428, "check-setup"], [429, "check-setup"], [430, "check-setup"], [431, "check-setup"], [432, "check-setup"], [433, "check-setup"], [435, "check-setup"], [436, "check-setup"], [437, "check-setup"], [438, "check-setup"], [439, "check-setup"], [440, "check-setup"], [441, "check-setup"], [445, "check-setup"], [446, "check-setup"], [447, "check-setup"], [448, "check-setup"], [450, "check-setup"], [451, "check-setup"], [452, "check-setup"], [453, "check-setup"], [455, "check-setup"], [456, "check-setup"], [457, "check-setup"], [458, "check-setup"], [459, "check-setup"], [461, "check-setup"], [463, "check-setup"], [464, "check-setup"], [465, "check-setup"], [466, "check-setup"], [472, "check-setup"], [473, "check-setup"], [474, "check-setup"]], "Define analysis region and energy binning": [[423, "define-analysis-region-and-energy-binning"]], "Load IRFs and prepare dataset": [[423, "load-irfs-and-prepare-dataset"]], "Compute sensitivity": [[423, "compute-sensitivity"]], "Results": [[423, "results"]], "Obtaining an integral flux sensitivity": [[423, "obtaining-an-integral-flux-sensitivity"]], "Exercises": [[423, "exercises"], [425, "exercises"], [427, "exercises"], [430, "exercises"], [435, "exercises"], [437, "exercises"], [439, "exercises"], [440, "exercises"], [447, "exercises"], [463, "exercises"], [464, "exercises"], [465, "exercises"], [466, "exercises"], [474, "exercises"], [474, "id1"], [474, "id2"], [474, "id3"]], "Spectral analysis of extended sources": [[424, "spectral-analysis-of-extended-sources"]], "Prerequisites": [[424, "prerequisites"], [425, "prerequisites"], [427, "prerequisites"], [428, "prerequisites"], [429, "prerequisites"], [430, "prerequisites"], [432, "prerequisites"], [436, "prerequisites"], [438, "prerequisites"], [439, "prerequisites"], [440, "prerequisites"], [441, "prerequisites"], [443, "prerequisites"], [444, "prerequisites"], [445, "prerequisites"], [446, "prerequisites"], [447, "prerequisites"], [453, "prerequisites"], [457, "prerequisites"], [458, "prerequisites"], [461, "prerequisites"], [472, "prerequisites"], [473, "prerequisites"]], "Context": [[424, "context"], [425, "context"], [427, "context"], [428, "context"], [429, "context"], [430, "context"], [431, "context"], [432, "context"], [433, "context"], [436, "context"], [438, "context"], [439, "context"], [441, "context"], [443, "context"], [444, "context"], [445, "context"], [446, "context"], [447, "context"], [457, "context"], [460, "context"], [461, "context"], [472, "context"], [473, "context"]], "Proposed approach": [[424, "proposed-approach"], [425, "proposed-approach"], [428, "proposed-approach"], [430, "proposed-approach"], [431, "proposed-approach"], [432, "proposed-approach"], [433, "proposed-approach"], [436, "proposed-approach"], [439, "proposed-approach"], [440, "proposed-approach"], [443, "proposed-approach"], [444, "proposed-approach"], [445, "proposed-approach"], [446, "proposed-approach"], [447, "proposed-approach"], [453, "proposed-approach"], [457, "proposed-approach"], [458, "proposed-approach"], [460, "proposed-approach"], [472, "proposed-approach"], [473, "proposed-approach"]], "Select the data": [[424, "select-the-data"], [446, "select-the-data"]], "Prepare the datasets creation": [[424, "prepare-the-datasets-creation"]], "Select the ON region": [[424, "select-the-on-region"]], "Define the geometries": [[424, "define-the-geometries"]], "Create the makers": [[424, "create-the-makers"]], "Perform the data reduction loop.": [[424, "perform-the-data-reduction-loop"]], "Explore the results": [[424, "explore-the-results"]], "Cumulative excess and significance": [[424, "cumulative-excess-and-significance"]], "Perform spectral model fitting": [[424, "perform-spectral-model-fitting"]], "Explore the fit results": [[424, "explore-the-fit-results"]], "Flux point fitting": [[425, "flux-point-fitting"]], "Load spectral points": [[425, "load-spectral-points"]], "Power Law Fit": [[425, "power-law-fit"]], "Exponential Cut-Off Powerlaw Fit": [[425, "exponential-cut-off-powerlaw-fit"]], "Log-Parabola Fit": [[425, "log-parabola-fit"]], "What next?": [[425, "what-next"], [427, "what-next"], [431, "what-next"], [437, "what-next"], [445, "what-next"], [474, "what-next"]], "Spectral analysis": [[427, "spectral-analysis"]], "Load Data": [[427, "load-data"]], "Define Target Region": [[427, "define-target-region"]], "Create exclusion mask": [[427, "create-exclusion-mask"], [433, "create-exclusion-mask"]], "Run data reduction chain": [[427, "run-data-reduction-chain"], [429, "run-data-reduction-chain"]], "Plot off regions": [[427, "plot-off-regions"]], "Source statistic": [[427, "source-statistic"]], "Fit spectrum": [[427, "fit-spectrum"], [429, "fit-spectrum"]], "Fit quality and model residuals": [[427, "fit-quality-and-model-residuals"], [429, "fit-quality-and-model-residuals"]], "Compute Flux Points": [[427, "compute-flux-points"]], "Stack observations": [[427, "stack-observations"]], "Spectral analysis with the HLI": [[428, "spectral-analysis-with-the-hli"]], "Analysis configuration": [[428, "analysis-configuration"], [435, "analysis-configuration"], [445, "analysis-configuration"], [472, "analysis-configuration"]], "Using data stored into your computer": [[428, "using-data-stored-into-your-computer"]], "Setting the exclusion mask": [[428, "setting-the-exclusion-mask"], [472, "setting-the-exclusion-mask"]], "Using YAML configuration files for setting/writing the Data Reduction parameters": [[428, "using-yaml-configuration-files-for-setting-writing-the-data-reduction-parameters"]], "Running the first step of the analysis: the Data Reduction": [[428, "running-the-first-step-of-the-analysis-the-data-reduction"]], "Configuration of the analysis": [[428, "configuration-of-the-analysis"]], "Observation selection": [[428, "observation-selection"], [472, "observation-selection"]], "Running the Data Reduction": [[428, "running-the-data-reduction"]], "Results exploration": [[428, "results-exploration"]], "Save dataset to disk": [[428, "save-dataset-to-disk"], [472, "save-dataset-to-disk"], [473, "save-dataset-to-disk"]], "Model fitting": [[428, "model-fitting"], [472, "model-fitting"]], "Creation of the model": [[428, "creation-of-the-model"]], "Setting fitting parameters": [[428, "setting-fitting-parameters"]], "Running the fit": [[428, "running-the-fit"]], "Exploration of the fit results": [[428, "exploration-of-the-fit-results"]], "Serialisation of the fit result": [[428, "serialisation-of-the-fit-result"]], "Creation of the Flux points": [[428, "creation-of-the-flux-points"]], "Running the estimation": [[428, "running-the-estimation"]], "Serialisation of the results": [[428, "serialisation-of-the-results"]], "Plotting the final results of the 1D Analysis": [[428, "plotting-the-final-results-of-the-1d-analysis"]], "What\u2019s next?": [[428, "whats-next"]], "Spectral analysis with energy-dependent directional cuts": [[429, "spectral-analysis-with-energy-dependent-directional-cuts"]], "Load data": [[429, "load-data"]], "Define the ON region": [[429, "define-the-on-region"]], "Compare against the literature": [[429, "compare-against-the-literature"]], "Dataset simulations": [[429, "dataset-simulations"]], "1D spectrum simulation": [[430, "d-spectrum-simulation"]], "Simulation of a single spectrum": [[430, "simulation-of-a-single-spectrum"]], "On-Off analysis": [[430, "on-off-analysis"]], "Source detection and significance maps": [[431, "source-detection-and-significance-maps"]], "Read in input images": [[431, "read-in-input-images"]], "Adaptive smoothing": [[431, "adaptive-smoothing"]], "TS map estimation": [[431, "ts-map-estimation"]], "Plot resulting images": [[431, "plot-resulting-images"]], "Source candidates": [[431, "source-candidates"]], "2D map fitting": [[432, "d-map-fitting"]], "Objective": [[432, "objective"], [433, "objective"], [439, "objective"], [440, "objective"], [460, "objective"]], "Creating the config file": [[432, "creating-the-config-file"], [433, "creating-the-config-file"]], "Getting the reduced dataset": [[432, "getting-the-reduced-dataset"], [433, "getting-the-reduced-dataset"]], "Modelling": [[432, "modelling"], [458, "modelling"]], "Ring background map": [[433, "ring-background-map"]], "Extracting the ring background": [[433, "extracting-the-ring-background"]], "Create a stacked dataset": [[433, "create-a-stacked-dataset"]], "Compute correlated significance and correlated excess maps": [[433, "compute-correlated-significance-and-correlated-excess-maps"]], "3D detailed analysis": [[435, "d-detailed-analysis"]], "Configuration for stacked and joint analysis": [[435, "configuration-for-stacked-and-joint-analysis"]], "Stacked analysis": [[435, "stacked-analysis"]], "Modeling and fitting": [[435, "modeling-and-fitting"]], "Fit quality assessment and model residuals for a MapDataset": [[435, "fit-quality-assessment-and-model-residuals-for-a-mapdataset"]], "Joint analysis": [[435, "joint-analysis"], [436, "joint-analysis"]], "Fit quality assessment and model residuals for a joint Datasets": [[435, "fit-quality-assessment-and-model-residuals-for-a-joint-datasets"]], "Multi instrument joint 3D and 1D analysis": [[436, "multi-instrument-joint-3d-and-1d-analysis"]], "The setup": [[436, "the-setup"], [453, "the-setup"], [461, "the-setup"]], "Data and models files": [[436, "data-and-models-files"]], "Reading different datasets": [[436, "reading-different-datasets"]], "Fermi-LAT 3FHL: map dataset for 3D analysis": [[436, "fermi-lat-3fhl-map-dataset-for-3d-analysis"]], "HESS-DL3: 1D ON/OFF dataset for spectral fitting": [[436, "hess-dl3-1d-on-off-dataset-for-spectral-fitting"]], "HAWC: 1D dataset for flux point fitting": [[436, "hawc-1d-dataset-for-flux-point-fitting"]], "Datasets serialization": [[436, "datasets-serialization"]], "Basic image exploration and fitting": [[437, "basic-image-exploration-and-fitting"]], "Select observations": [[437, "select-observations"]], "Make sky images": [[437, "make-sky-images"]], "Define map geometry": [[437, "define-map-geometry"]], "Compute images": [[437, "compute-images"]], "Show images": [[437, "show-images"]], "Source Detection": [[437, "source-detection"]], "Spatial analysis": [[437, "spatial-analysis"]], "Spectrum": [[437, "spectrum"]], "Model fit": [[437, "model-fit"]], "Spectral points": [[437, "spectral-points"]], "Plot": [[437, "plot"]], "Morphological energy dependence estimation": [[438, "morphological-energy-dependence-estimation"]], "Tutorial overview": [[438, "tutorial-overview"], [463, "tutorial-overview"]], "Obtain the data to use": [[438, "obtain-the-data-to-use"]], "Run Estimator": [[438, "run-estimator"]], "Show the results tables": [[438, "show-the-results-tables"]], "The results of the source signal above the background in each energy bin": [[438, "the-results-of-the-source-signal-above-the-background-in-each-energy-bin"]], "The results for testing energy dependence": [[438, "the-results-for-testing-energy-dependence"]], "The chi-squared value for each parameter of interest": [[438, "the-chi-squared-value-for-each-parameter-of-interest"]], "Plotting the results": [[438, "plotting-the-results"]], "Event sampling": [[439, "event-sampling"]], "Define an Observation": [[439, "define-an-observation"]], "Define the MapDataset": [[439, "define-the-mapdataset"]], "Define the Sky model: a point-like source": [[439, "define-the-sky-model-a-point-like-source"]], "Sampling the source and background events": [[439, "sampling-the-source-and-background-events"]], "Time variable source using a lightcurve": [[439, "time-variable-source-using-a-lightcurve"]], "Extended source using a template": [[439, "extended-source-using-a-template"]], "Simulate multiple event lists": [[439, "simulate-multiple-event-lists"]], "Sample a source with energy-dependent temporal evolution": [[440, "sample-a-source-with-energy-dependent-temporal-evolution"]], "Create the energy-dependent temporal model": [[440, "create-the-energy-dependent-temporal-model"]], "Create the temporal model and write it to disk": [[440, "create-the-temporal-model-and-write-it-to-disk"]], "Read the energy-dependent model": [[440, "read-the-energy-dependent-model"]], "Prepare and run the event sampler": [[440, "prepare-and-run-the-event-sampler"]], "Define the simulation source model": [[440, "define-the-simulation-source-model"]], "Define an observation and make a dataset": [[440, "define-an-observation-and-make-a-dataset"]], "Let\u2019s simulate the model": [[440, "let-s-simulate-the-model"]], "Flux Profile Estimation": [[441, "flux-profile-estimation"]], "Proposed Approach": [[441, "proposed-approach"]], "Read and Introduce Data": [[441, "read-and-introduce-data"]], "Profile Estimation": [[441, "profile-estimation"]], "Configuration": [[441, "configuration"]], "Run Estimation": [[441, "run-estimation"]], "Plotting Results": [[441, "plotting-results"]], "Serialisation and I/O": [[441, "serialisation-and-i-o"]], "3D map simulation": [[443, "d-map-simulation"]], "Imports and versions": [[443, "imports-and-versions"]], "Simulation": [[443, "simulation"]], "Estimation of time variability in a lightcurve": [[444, "estimation-of-time-variability-in-a-lightcurve"]], "Methods to characterize variability": [[444, "methods-to-characterize-variability"]], "Fractional excess variance, point-to-point fractional variance and doubling/halving time": [[444, "fractional-excess-variance-point-to-point-fractional-variance-and-doubling-halving-time"]], "Bayesian blocks": [[444, "bayesian-blocks"]], "Light curves": [[445, "light-curves"]], "Building the 3D analysis configuration": [[445, "building-the-3d-analysis-configuration"]], "Definition of the data selection": [[445, "definition-of-the-data-selection"], [445, "id1"]], "Definition of the dataset geometry": [[445, "definition-of-the-dataset-geometry"], [445, "id2"]], "Run the 3D data reduction": [[445, "run-the-3d-data-reduction"]], "Define the model to be used": [[445, "define-the-model-to-be-used"], [445, "id3"]], "Light Curve estimation by observation": [[445, "light-curve-estimation-by-observation"]], "Running the light curve extraction in 1D": [[445, "running-the-light-curve-extraction-in-1d"]], "Building the 1D analysis configuration": [[445, "building-the-1d-analysis-configuration"]], "Run the 1D data reduction": [[445, "run-the-1d-data-reduction"]], "Extracting the light curve": [[445, "extracting-the-light-curve"]], "Compare results": [[445, "compare-results"]], "Night-wise LC estimation": [[445, "night-wise-lc-estimation"]], "Light curves for flares": [[446, "light-curves-for-flares"]], "Define time intervals": [[446, "define-time-intervals"]], "Filter the observations list in time intervals": [[446, "filter-the-observations-list-in-time-intervals"]], "Building 1D datasets from the new observations": [[446, "building-1d-datasets-from-the-new-observations"]], "Defining the geometry": [[446, "defining-the-geometry"]], "Creation of the data reduction makers": [[446, "creation-of-the-data-reduction-makers"]], "Creation of the datasets": [[446, "creation-of-the-datasets"]], "Define the Model": [[446, "define-the-model"]], "Assign to model to all datasets": [[446, "assign-to-model-to-all-datasets"]], "Extract the light curve": [[446, "extract-the-light-curve"]], "Simulating and fitting a time varying source": [[447, "simulating-and-fitting-a-time-varying-source"]], "Simulating a light curve": [[447, "simulating-a-light-curve"]], "Extract the lightcurve": [[447, "extract-the-lightcurve"]], "Fitting temporal models": [[447, "fitting-temporal-models"]], "Fitting the obtained light curve": [[447, "fitting-the-obtained-light-curve"]], "Fit the datasets": [[447, "fit-the-datasets"]], "Pulsar analysis": [[448, "pulsar-analysis"]], "Opening the data": [[448, "opening-the-data"]], "Phasogram": [[448, "phasogram"]], "Make a Li&Ma test over the events": [[448, "make-a-li-ma-test-over-the-events"]], "Phase-resolved map": [[448, "phase-resolved-map"]], "Phase-resolved spectrum": [[448, "phase-resolved-spectrum"]], "Dark matter spatial and spectral models": [[450, "dark-matter-spatial-and-spectral-models"]], "Profiles": [[450, "profiles"]], "J Factors": [[450, "j-factors"]], "Gamma-ray spectra at production": [[450, "gamma-ray-spectra-at-production"]], "Flux maps for annihilation": [[450, "flux-maps-for-annihilation"]], "Flux maps for decay": [[450, "flux-maps-for-decay"]], "Source catalogs": [[451, "source-catalogs"], [474, "source-catalogs"], [483, "source-catalogs"]], "List available catalogs": [[451, "list-available-catalogs"]], "Load catalogs": [[451, "load-catalogs"]], "Catalog table": [[451, "catalog-table"]], "Source object": [[451, "source-object"]], "Select a source": [[451, "select-a-source"]], "Source information": [[451, "source-information"]], "Select a catalog subset": [[451, "select-a-catalog-subset"]], "Source models": [[451, "source-models"], [463, "source-models"]], "Specificities of the HGPS catalog": [[451, "specificities-of-the-hgps-catalog"]], "Flux points": [[451, "flux-points"], [472, "flux-points"], [486, "flux-points"]], "Lightcurves": [[451, "lightcurves"]], "Pretty-print source information": [[451, "pretty-print-source-information"]], "Datasets - Reduced data, IRFs, models": [[452, "datasets-reduced-data-irfs-models"]], "Creating an empty dataset": [[452, "creating-an-empty-dataset"]], "Accessing contents of a dataset": [[452, "accessing-contents-of-a-dataset"]], "Using masks": [[452, "using-masks"]], "Resampling datasets": [[452, "resampling-datasets"]], "Model and dataset": [[453, "model-and-dataset"], [461, "model-and-dataset"]], "Fitting options": [[453, "fitting-options"]], "Fit quality assessment": [[453, "fit-quality-assessment"]], "Covariance and parameters errors": [[453, "covariance-and-parameters-errors"]], "Confidence contours": [[453, "confidence-contours"]], "Computing contours using stat_contour": [[453, "computing-contours-using-stat-contour"]], "Computing contours using stat_surface": [[453, "computing-contours-using-stat-surface"]], "Using Gammapy IRFs": [[454, "using-gammapy-irfs"]], "Inbuilt Gammapy IRFs": [[454, "inbuilt-gammapy-irfs"]], "Support for Asymmetric IRFs": [[454, "support-for-asymmetric-irfs"]], "Effective Area": [[454, "effective-area"]], "Create exposure map": [[454, "create-exposure-map"]], "Energy Dispersion": [[454, "energy-dispersion"], [464, "energy-dispersion"], [492, "energy-dispersion"]], "Create edisp kernel map": [[454, "create-edisp-kernel-map"]], "PSF": [[454, "psf"], [464, "psf"]], "Create DL4 product - PSFMap": [[454, "create-dl4-product-psfmap"]], "Makers - Data reduction": [[455, "makers-data-reduction"]], "Safe data range handling": [[455, "safe-data-range-handling"]], "Background estimation": [[455, "background-estimation"], [496, "background-estimation"]], "FoV background": [[455, "fov-background"], [495, "fov-background"]], "Ring background": [[455, "ring-background"], [498, "ring-background"]], "Reflected regions background": [[455, "reflected-regions-background"], [497, "reflected-regions-background"]], "Data reduction loop": [[455, "data-reduction-loop"]], "Spectrum dataset": [[455, "spectrum-dataset"]], "Observation duration and effective livetime": [[455, "observation-duration-and-effective-livetime"]], "Creating WCS Maps": [[456, "creating-wcs-maps"]], "Using Factory Methods": [[456, "using-factory-methods"]], "Creating from a Map Geometry": [[456, "creating-from-a-map-geometry"]], "Adding Non-Spatial Axes": [[456, "adding-non-spatial-axes"]], "Adding Non-contiguous axes": [[456, "adding-non-contiguous-axes"]], "Reading and Writing": [[456, "reading-and-writing"]], "Reading Maps": [[456, "reading-maps"]], "Writing Maps": [[456, "writing-maps"]], "Accessing Data": [[456, "accessing-data"]], "How to get data values": [[456, "how-to-get-data-values"]], "Indexing and Slicing Sub-Maps": [[456, "indexing-and-slicing-sub-maps"]], "Iterating by image": [[456, "iterating-by-image"]], "Modifying Data": [[456, "modifying-data"]], "How to set data values": [[456, "how-to-set-data-values"]], "Filling maps from event lists": [[456, "filling-maps-from-event-lists"]], "Filling maps from interpolation": [[456, "filling-maps-from-interpolation"]], "Interpolating onto a different geometry": [[456, "interpolating-onto-a-different-geometry"]], "Maps operations": [[456, "maps-operations"]], "Basic operators": [[456, "basic-operators"]], "Cutouts": [[456, "cutouts"]], "Visualizing and Plotting": [[456, "visualizing-and-plotting"]], "Image Plotting": [[456, "image-plotting"]], "Cube plotting": [[456, "cube-plotting"]], "Mask maps": [[457, "mask-maps"]], "Masks for fitting": [[457, "masks-for-fitting"]], "Exclusion masks": [[457, "exclusion-masks"]], "Creating a mask for fitting": [[457, "creating-a-mask-for-fitting"]], "Create a mask in energy": [[457, "create-a-mask-in-energy"]], "Mask some sky regions": [[457, "mask-some-sky-regions"]], "Creating a mask manually": [[457, "creating-a-mask-manually"]], "Creating an exclusion mask": [[457, "creating-an-exclusion-mask"]], "Define the geometry": [[457, "define-the-geometry"]], "Create the mask from a list of regions": [[457, "create-the-mask-from-a-list-of-regions"]], "Create the mask map": [[457, "create-the-mask-map"]], "Create the mask from a catalog of sources": [[457, "create-the-mask-from-a-catalog-of-sources"]], "Create the mask from statistically significant pixels in a dataset": [[457, "create-the-mask-from-statistically-significant-pixels-in-a-dataset"]], "Masks operations": [[457, "masks-operations"]], "Mask modifications": [[457, "mask-modifications"]], "Mask dilation and erosion": [[457, "mask-dilation-and-erosion"]], "Boundary mask": [[457, "boundary-mask"]], "Reading and writing masks": [[457, "reading-and-writing-masks"]], "Aim": [[458, "aim"]], "Read the datasets": [[458, "read-the-datasets"]], "Assigning background models to datasets": [[458, "assigning-background-models-to-datasets"]], "Add a model on multiple datasets": [[458, "add-a-model-on-multiple-datasets"]], "Loading models from a catalog": [[458, "loading-models-from-a-catalog"]], "Selecting models contributing to a given region": [[458, "selecting-models-contributing-to-a-given-region"]], "Combining two Models": [[458, "combining-two-models"]], "Selecting models from a list": [[458, "selecting-models-from-a-list"]], "Removing a model from a dataset": [[458, "removing-a-model-from-a-dataset"]], "Plotting models on a (counts) map": [[458, "plotting-models-on-a-counts-map"]], "Freezing and unfreezing model parameters": [[458, "freezing-and-unfreezing-model-parameters"]], "Serialising models": [[458, "serialising-models"]], "Spectral models": [[459, "spectral-models"], [502, "spectral-models"]], "Norm Spectral Models": [[459, "norm-spectral-models"]], "Compound Spectral Model": [[459, "compound-spectral-model"]], "Spatial models": [[459, "spatial-models"], [502, "spatial-models"]], "Temporal models": [[459, "temporal-models"], [502, "temporal-models"]], "Modifying model parameters": [[459, "modifying-model-parameters"]], "Model lists and serialisation": [[459, "model-lists-and-serialisation"]], "Models with shared parameter": [[459, "models-with-shared-parameter"]], "Implementing a custom model": [[459, "implementing-a-custom-model"]], "Models with energy dependent morphology": [[459, "models-with-energy-dependent-morphology"]], "Observational clustering": [[460, "observational-clustering"]], "Obtain the observations": [[460, "obtain-the-observations"]], "Show various observation quantities": [[460, "show-various-observation-quantities"]], "Manual grouping of observations": [[460, "manual-grouping-of-observations"]], "Hierarchical clustering of observations": [[460, "hierarchical-clustering-of-observations"]], "Priors": [[461, "priors"]], "Example 1: Including Prior Information about the Sources Index": [[461, "example-1-including-prior-information-about-the-sources-index"]], "Fitting a Dataset with and without the Prior": [[461, "fitting-a-dataset-with-and-without-the-prior"]], "Example 2: Encouraging Positive Amplitude Values": [[461, "example-2-encouraging-positive-amplitude-values"]], "Fitting Multiple Datasets with and without the Prior": [[461, "fitting-multiple-datasets-with-and-without-the-prior"]], "Implementing a custom prior": [[461, "implementing-a-custom-prior"]], "CTA with Gammapy": [[463, "cta-with-gammapy"]], "CTA 1DC": [[463, "cta-1dc"]], "Files": [[463, "files"]], "Datastore": [[463, "datastore"]], "Events": [[463, "events"], [464, "events"]], "Effective area": [[463, "effective-area"], [490, "effective-area"]], "Energy dispersion": [[463, "energy-dispersion"]], "Point spread function": [[463, "point-spread-function"]], "Background": [[463, "background"], [491, "background"]], "CTA performance files": [[463, "cta-performance-files"]], "Next steps": [[463, "next-steps"], [465, "next-steps"], [466, "next-steps"]], "Fermi-LAT with Gammapy": [[464, "fermi-lat-with-gammapy"]], "Counts": [[464, "counts"]], "Exposure": [[464, "exposure"]], "Galactic diffuse background": [[464, "galactic-diffuse-background"]], "Isotropic diffuse background": [[464, "isotropic-diffuse-background"]], "HAWC with Gammapy": [[465, "hawc-with-gammapy"]], "HAWC data access and reduction": [[465, "hawc-data-access-and-reduction"]], "Data reduction into a MapDataset": [[465, "data-reduction-into-a-mapdataset"]], "Check the dataset we produced": [[465, "check-the-dataset-we-produced"]], "H.E.S.S. with Gammapy": [[466, "h-e-s-s-with-gammapy"]], "DL3 DR1": [[466, "dl3-dr1"]], "Theta squared event distribution": [[466, "theta-squared-event-distribution"]], "Data exploration": [[468, "data-exploration"]], "Data analysis": [[468, "data-analysis"]], "1D Spectral": [[468, "d-spectral"]], "2D Image": [[468, "d-image"]], "3D Cube": [[468, "d-cube"]], "Time": [[468, "time"]], "Package / API": [[468, "package-api"]], "Scripts": [[468, "scripts"]], "Survey Map Script": [[470, "survey-map-script"]], "Setting the data to use": [[472, "setting-the-data-to-use"]], "Setting the reduced datasets geometry": [[472, "setting-the-reduced-datasets-geometry"]], "Setting the background normalization maker": [[472, "setting-the-background-normalization-maker"]], "Setting modeling and fitting parameters": [[472, "setting-modeling-and-fitting-parameters"]], "Using YAML configuration files": [[472, "using-yaml-configuration-files"]], "Running the analysis": [[472, "running-the-analysis"]], "What\u2019s next": [[472, "whats-next"]], "Low level API": [[473, "low-level-api"]], "Defining the datastore and selecting observations": [[473, "defining-the-datastore-and-selecting-observations"]], "Preparing reduced datasets geometry": [[473, "preparing-reduced-datasets-geometry"]], "Create the maker classes to be used": [[473, "create-the-maker-classes-to-be-used"]], "Perform the data reduction loop": [[473, "perform-the-data-reduction-loop"]], "Inspect the reduced dataset": [[473, "inspect-the-reduced-dataset"]], "Define the model": [[473, "define-the-model"]], "Fit the model": [[473, "fit-the-model"]], "Inspecting residuals": [[473, "inspecting-residuals"]], "Plot the fitted spectrum": [[473, "plot-the-fitted-spectrum"]], "Making a butterfly plot": [[473, "making-a-butterfly-plot"]], "Computing flux points": [[473, "computing-flux-points"]], "Data structures": [[474, "data-structures"]], "Event lists": [[474, "event-lists"]], "Spectral models and flux points": [[474, "spectral-models-and-flux-points"]], "Dark matter": [[476, "dark-matter"]], "Other packages": [[476, "other-packages"]], "GammaLib": [[476, "gammalib"]], "FermiST": [[476, "fermist"]], "CLUMPY": [[476, "clumpy"]], "gamLike": [[476, "gamlike"]], "Examples using gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel": [[476, "examples-using-gammapy-astro-darkmatter-darkmatterannihilationspectralmodel"]], "Astrophysics": [[477, "astrophysics"]], "Sub-packages": [[477, "sub-packages"]], "Astrophysical source population models": [[478, "astrophysical-source-population-models"]], "Galactocentric spatial distributions": [[478, "galactocentric-spatial-distributions"]], "Spiral arm models": [[478, "spiral-arm-models"]], "Velocity distributions": [[478, "velocity-distributions"]], "Astrophysical source models": [[479, "astrophysical-source-models"]], "Using gammapy.astro.source": [[479, "using-gammapy-astro-source"]], "Pulsar Source Models": [[480, "pulsar-source-models"]], "Pulsar Wind Nebula Source Models": [[481, "pulsar-wind-nebula-source-models"]], "Supernova Remnant Models": [[482, "supernova-remnant-models"]], "Using gammapy.catalog": [[483, "using-gammapy-catalog"]], "Examples using gammapy.catalog.SourceCatalog3FHL": [[483, "examples-using-gammapy-catalog-sourcecatalog3fhl"]], "Examples using gammapy.catalog.SourceCatalogGammaCat": [[483, "examples-using-gammapy-catalog-sourcecataloggammacat"]], "Datasets (DL4)": [[484, "datasets-dl4"]], "Types of supported datasets": [[484, "types-of-supported-datasets"]], "Predicted counts": [[484, "predicted-counts"]], "Stacking Multiple Datasets": [[484, "stacking-multiple-datasets"]], "Joint Analysis": [[484, "joint-analysis"]], "Serialisation of datasets": [[484, "serialisation-of-datasets"]], "Using gammapy.datasets": [[484, "using-gammapy-datasets"], [487, "using-gammapy-datasets"]], "Examples using gammapy.datasets.MapDataset": [[484, "examples-using-gammapy-datasets-mapdataset"]], "Examples using gammapy.datasets.SpectrumDatasetOnOff": [[484, "examples-using-gammapy-datasets-spectrumdatasetonoff"]], "Data access and selection (DL3)": [[485, "data-access-and-selection-dl3"]], "Getting started with data": [[485, "getting-started-with-data"]], "The index tables": [[485, "the-index-tables"]], "Working with event lists": [[485, "working-with-event-lists"]], "Combining event lists and GTIs": [[485, "combining-event-lists-and-gtis"]], "Writing event lists and GTIs to file": [[485, "writing-event-lists-and-gtis-to-file"]], "Using gammapy.data": [[485, "using-gammapy-data"]], "Examples using gammapy.data.EventList": [[485, "examples-using-gammapy-data-eventlist"]], "Examples using gammapy.data.DataStore": [[485, "examples-using-gammapy-data-datastore"]], "Estimators (DL4 to DL5, and DL6)": [[486, "estimators-dl4-to-dl5-and-dl6"]], "General method": [[486, "general-method"]], "Energy edges": [[486, "energy-edges"]], "Flux quantities": [[486, "flux-quantities"]], "Flux maps": [[486, "flux-maps"]], "Using gammapy.estimators": [[486, "using-gammapy-estimators"]], "Examples using gammapy.estimators.FluxPointsEstimator": [[486, "examples-using-gammapy-estimators-fluxpointsestimator"]], "Examples using gammapy.estimators.LightCurveEstimator": [[486, "examples-using-gammapy-estimators-lightcurveestimator"]], "High Level Analysis Interface": [[487, "high-level-analysis-interface"]], "Examples using gammapy.analysis.Analysis": [[487, "examples-using-gammapy-analysis-analysis"]], "User guide": [[489, "user-guide"]], "as a function of true energy and offset angle (AEFF_2D)": [[490, "as-a-function-of-true-energy-and-offset-angle-gadf-aeff-2d"]], "as a function of reconstructed energy and detector coordinates (BKG_3D)": [[491, "as-a-function-of-reconstructed-energy-and-detector-coordinates-gadf-bkg-3d"]], "as a function of reconstructed energy and offset angle, radially symmetric (BKG_2D)": [[491, "as-a-function-of-reconstructed-energy-and-offset-angle-radially-symmetric-gadf-bkg-2d"]], "as a function of of true energy and offset angle (EDISP_2D)": [[492, "as-a-function-of-of-true-energy-and-offset-angle-gadf-edisp-2d"]], "as a function of true energy (RMF)": [[492, "as-a-function-of-true-energy-gadf-ogip-rmf"]], "Storing the energy dispersion information as a function of sky position": [[492, "storing-the-energy-dispersion-information-as-a-function-of-sky-position"]], "Instrument Response Functions (DL3)": [[493, "instrument-response-functions-dl3"]], "Expected number of detected events": [[493, "expected-number-of-detected-events"]], "Factorisation of the IRFs": [[493, "factorisation-of-the-irfs"]], "IRF axis naming": [[493, "irf-axis-naming"]], "Using gammapy.irf": [[493, "using-gammapy-irf"]], "Examples using gammapy.irf.PSFMap": [[493, "examples-using-gammapy-irf-psfmap"]], "Examples using gammapy.irf.EDispKernelMap": [[493, "examples-using-gammapy-irf-edispkernelmap"]], "Examples using gammapy.irf.load_irf_dict_from_file": [[493, "examples-using-gammapy-irf-load-irf-dict-from-file"]], "Point Spread Function": [[494, "point-spread-function"]], "As a function of of true energy and offset angle (PSF_TABLE)": [[494, "as-a-function-of-of-true-energy-and-offset-angle-gadf-psf-table"]], "Additional PSF classes": [[494, "additional-psf-classes"]], "Overview": [[495, "overview"], [497, "overview"], [498, "overview"]], "Examples using gammapy.makers.FoVBackgroundMaker": [[495, "examples-using-gammapy-makers-fovbackgroundmaker"]], "Data reduction (DL3 to DL4)": [[496, "data-reduction-dl3-to-dl4"]], "Safe data range definition": [[496, "safe-data-range-definition"]], "Using gammapy.makers": [[496, "using-gammapy-makers"]], "Examples using gammapy.makers.MapDatasetMaker": [[496, "examples-using-gammapy-makers-mapdatasetmaker"]], "Examples using gammapy.makers.SpectrumDatasetMaker": [[496, "examples-using-gammapy-makers-spectrumdatasetmaker"]], "Using regions": [[497, "using-regions"]], "The reflected region finder": [[497, "the-reflected-region-finder"]], "Using the reflected background estimator": [[497, "using-the-reflected-background-estimator"]], "Examples using gammapy.makers.ReflectedRegionsBackgroundMaker": [[497, "examples-using-gammapy-makers-reflectedregionsbackgroundmaker"]], "HEALPix-based maps": [[499, "healpix-based-maps"]], "HEALPix geometry": [[499, "healpix-geometry"]], "Sky maps (DL4)": [[500, "sky-maps-dl4"]], "Getting started with maps": [[500, "getting-started-with-maps"]], "Accessor methods": [[500, "accessor-methods"]], "Interface with MapCoord and SkyCoord": [[500, "interface-with-mapcoord-and-skycoord"]], "Using gammapy.maps": [[500, "using-gammapy-maps"]], "Examples using gammapy.maps.WcsNDMap": [[500, "examples-using-gammapy-maps-wcsndmap"]], "Examples using gammapy.maps.RegionNDMap": [[500, "examples-using-gammapy-maps-regionndmap"]], "Examples using gammapy.maps.HpxNDMap": [[500, "examples-using-gammapy-maps-hpxndmap"]], "RegionGeom and RegionNDMap": [[501, "regiongeom-and-regionndmap"]], "Creating a RegionGeom": [[501, "creating-a-regiongeom"]], "RegionGeom and coordinates": [[501, "regiongeom-and-coordinates"]], "Bin volume and angular size": [[501, "bin-volume-and-angular-size"]], "Coordinates defined by the RegionGeom": [[501, "coordinates-defined-by-the-regiongeom"]], "Upsampling and downsampling non-spatial axes": [[501, "upsampling-and-downsampling-non-spatial-axes"]], "Relation to WCS geometries": [[501, "relation-to-wcs-geometries"]], "Plotting a RegionGeom": [[501, "plotting-a-regiongeom"]], "Creating a RegionNDMap": [[501, "creating-a-regionndmap"]], "Filling a RegionNDMap": [[501, "filling-a-regionndmap"]], "Visualing a RegionNDMap": [[501, "visualing-a-regionndmap"]], "Plotting the underlying region": [[501, "plotting-the-underlying-region"]], "Plotting the map content": [[501, "plotting-the-map-content"]], "Writing and reading a RegionNDMap to/from a FITS file": [[501, "writing-and-reading-a-regionndmap-to-from-a-fits-file"]], "Model gallery": [[502, "model-gallery"]], "Constant spatial model": [[504, "constant-spatial-model"]], "Example plot": [[504, "example-plot"], [505, "example-plot"], [506, "example-plot"], [507, "example-plot"], [508, "example-plot"], [509, "example-plot"], [510, "example-plot"], [511, "example-plot"], [512, "example-plot"], [514, "example-plot"], [515, "example-plot"], [516, "example-plot"], [517, "example-plot"], [518, "example-plot"], [519, "example-plot"], [520, "example-plot"], [521, "example-plot"], [522, "example-plot"], [523, "example-plot"], [524, "example-plot"], [525, "example-plot"], [526, "example-plot"], [527, "example-plot"], [528, "example-plot"], [529, "example-plot"], [530, "example-plot"], [531, "example-plot"], [532, "example-plot"], [533, "example-plot"], [535, "example-plot"], [536, "example-plot"], [537, "example-plot"], [538, "example-plot"], [539, "example-plot"], [540, "example-plot"], [541, "example-plot"]], "YAML representation": [[504, "yaml-representation"], [505, "yaml-representation"], [506, "yaml-representation"], [507, "yaml-representation"], [508, "yaml-representation"], [509, "yaml-representation"], [510, "yaml-representation"], [511, "yaml-representation"], [512, "yaml-representation"], [514, "yaml-representation"], [515, "yaml-representation"], [516, "yaml-representation"], [517, "yaml-representation"], [518, "yaml-representation"], [519, "yaml-representation"], [520, "yaml-representation"], [521, "yaml-representation"], [522, "yaml-representation"], [523, "yaml-representation"], [524, "yaml-representation"], [525, "yaml-representation"], [526, "yaml-representation"], [527, "yaml-representation"], [528, "yaml-representation"], [529, "yaml-representation"], [530, "yaml-representation"], [531, "yaml-representation"], [532, "yaml-representation"], [533, "yaml-representation"], [535, "yaml-representation"], [536, "yaml-representation"], [537, "yaml-representation"], [538, "yaml-representation"], [539, "yaml-representation"], [540, "yaml-representation"], [541, "yaml-representation"], [542, "yaml-representation"], [543, "yaml-representation"]], "Disk spatial model": [[505, "disk-spatial-model"]], "Gaussian spatial model": [[506, "gaussian-spatial-model"]], "Generalized gaussian spatial model": [[507, "generalized-gaussian-spatial-model"]], "Piecewise norm spatial model": [[508, "piecewise-norm-spatial-model"]], "Point spatial model": [[509, "point-spatial-model"]], "Shell spatial model": [[510, "shell-spatial-model"]], "Shell2 spatial model": [[511, "shell2-spatial-model"]], "Template spatial model": [[512, "template-spatial-model"]], "EBL absorption spectral model": [[514, "ebl-absorption-spectral-model"]], "Broken power law spectral model": [[515, "broken-power-law-spectral-model"]], "Compound spectral model": [[516, "compound-spectral-model"]], "Constant spectral model": [[517, "constant-spectral-model"]], "Exponential cutoff power law spectral model": [[518, "exponential-cutoff-power-law-spectral-model"]], "Exponential cutoff power law spectral model used for 3FGL": [[519, "exponential-cutoff-power-law-spectral-model-used-for-3fgl"]], "Exponential cutoff power law norm spectral model": [[520, "exponential-cutoff-power-law-norm-spectral-model"]], "Gaussian spectral model": [[521, "gaussian-spectral-model"]], "Log parabola spectral model": [[522, "log-parabola-spectral-model"]], "Log parabola spectral norm model": [[523, "log-parabola-spectral-norm-model"]], "Naima spectral model": [[524, "naima-spectral-model"]], "Piecewise  norm spectral model": [[525, "piecewise-norm-spectral-model"]], "Power law spectral model": [[526, "power-law-spectral-model"]], "Power law 2 spectral model": [[527, "power-law-2-spectral-model"]], "Power law norm spectral model": [[528, "power-law-norm-spectral-model"]], "Smooth broken power law spectral model": [[529, "smooth-broken-power-law-spectral-model"]], "Super exponential cutoff power law model used for 3FGL": [[530, "super-exponential-cutoff-power-law-model-used-for-3fgl"]], "Super Exponential Cutoff Power Law Model used for 4FGL-DR3": [[531, "super-exponential-cutoff-power-law-model-used-for-4fgl-dr3"]], "Super Exponential Cutoff Power Law Model used for 4FGL-DR1 (and DR2)": [[532, "super-exponential-cutoff-power-law-model-used-for-4fgl-dr1-and-dr2"]], "Template spectral model": [[533, "template-spectral-model"]], "Constant temporal model": [[535, "constant-temporal-model"]], "ExpDecay temporal model": [[536, "expdecay-temporal-model"]], "Gaussian temporal model": [[537, "gaussian-temporal-model"]], "Generalized Gaussian temporal model": [[538, "generalized-gaussian-temporal-model"]], "Linear temporal model": [[539, "linear-temporal-model"]], "PowerLaw temporal model": [[540, "powerlaw-temporal-model"]], "Sine temporal model": [[541, "sine-temporal-model"]], "Phase curve temporal model": [[542, "phase-curve-temporal-model"]], "Light curve temporal model": [[543, "light-curve-temporal-model"]], "Modeling and Fitting (DL4 to DL5)": [[545, "modeling-and-fitting-dl4-to-dl5"]], "Built-in models": [[545, "built-in-models"]], "Custom models": [[545, "custom-models"]], "Using gammapy.modeling": [[545, "using-gammapy-modeling"]], "Examples using gammapy.modeling.Fit": [[545, "examples-using-gammapy-modeling-fit"]], "Gammapy analysis workflow and package structure": [[546, "gammapy-analysis-workflow-and-package-structure"]], "Analysis workflow": [[546, "analysis-workflow"]], "Analysis steps": [[546, "analysis-steps"]], "Configurable analysis": [[546, "configurable-analysis"]], "Additional utilities": [[546, "additional-utilities"]], "Glossary and references": [[547, "glossary-and-references"]], "Glossary": [[547, "glossary"]], "References": [[547, "publications"]], "Command line tools": [[548, "command-line-tools"]], "Execution": [[548, "execution"]], "Running config driven data reduction": [[548, "running-config-driven-data-reduction"]], "Write your own CLI": [[548, "write-your-own-cli"]], "Command not found": [[548, "command-not-found"]], "Fit statistics": [[549, "fit-statistics"]], "Cash : Poisson data with background model": [[549, "cash-poisson-data-with-background-model"]], "Example": [[549, "example"], [549, "id2"]], "WStat : Poisson data with background measurement": [[549, "wstat-poisson-data-with-background-measurement"]], "Caveat": [[549, "caveat"]], "Further references": [[549, "further-references"]], "Statistical utility functions": [[550, "statistical-utility-functions"]], "Notations": [[550, "notations"]], "Counts and fit statistics": [[550, "counts-and-fit-statistics"]], "Estimating TS": [[550, "estimating-ts"]], "Counts statistics classes": [[550, "counts-statistics-classes"]], "Cash counts statistic": [[550, "cash-counts-statistic"]], "Excess and Significance": [[550, "excess-and-significance"], [550, "id2"]], "Excess errors": [[550, "excess-errors"], [550, "id4"]], "WStat counts statistic": [[550, "wstat-counts-statistic"]], "Derivation of the WStat formula": [[551, "derivation-of-the-wstat-formula"]], "Profile Likelihood": [[551, "profile-likelihood"]], "Goodness of fit": [[551, "goodness-of-fit"]], "Final result": [[551, "final-result"]], "Special cases": [[551, "special-cases"]], "Utility functions": [[552, "utility-functions"]], "Time handling in Gammapy": [[552, "time-handling-in-gammapy"]], "Time format and scale": [[552, "time-format-and-scale"]], "Mission elapsed times (MET)": [[552, "mission-elapsed-times-met"]], "Time differences": [[552, "time-differences"]], "Visualization": [[553, "visualization"]], "Colormaps": [[553, "colormaps"]], "Survey panel plots": [[553, "survey-panel-plots"]]}, "indexentries": {"gammapy.analysis": [[0, "module-gammapy.analysis"]], "module": [[0, "module-gammapy.analysis"], [1, "module-gammapy.astro.darkmatter"], [1, "module-gammapy.astro.population"], [1, "module-gammapy.astro.source"], [2, "module-gammapy.catalog"], [3, "module-gammapy.data"], [4, "module-gammapy.datasets"], [5, "module-gammapy.estimators"], [5, "module-gammapy.estimators.utils"], [7, "module-gammapy.irf"], [8, "module-gammapy.makers"], [8, "module-gammapy.makers.utils"], [9, "module-gammapy.maps"], [10, "module-gammapy.modeling"], [10, "module-gammapy.modeling.models"], [10, "module-gammapy.modeling.models.utils"], [12, "module-gammapy.stats"], [13, "module-gammapy.utils.cluster"], [13, "module-gammapy.utils.coordinates"], [13, "module-gammapy.utils.fits"], [13, "module-gammapy.utils.integrate"], [13, "module-gammapy.utils.interpolation"], [13, "module-gammapy.utils.parallel"], [13, "module-gammapy.utils.random"], [13, "module-gammapy.utils.regions"], [13, "module-gammapy.utils.scripts"], [13, "module-gammapy.utils.table"], [13, "module-gammapy.utils.testing"], [13, "module-gammapy.utils.time"], [13, "module-gammapy.utils.units"], [14, "module-gammapy.visualization"]], "gammapy.astro.darkmatter": [[1, "module-gammapy.astro.darkmatter"]], "gammapy.astro.population": [[1, "module-gammapy.astro.population"]], "gammapy.astro.source": [[1, "module-gammapy.astro.source"]], "gammapy.catalog": [[2, "module-gammapy.catalog"]], "gammapy.data": [[3, "module-gammapy.data"]], "gammapy.datasets": [[4, "module-gammapy.datasets"]], "gammapy.estimators": [[5, "module-gammapy.estimators"]], "gammapy.estimators.utils": [[5, "module-gammapy.estimators.utils"]], "gammapy.irf": [[7, "module-gammapy.irf"]], "gammapy.makers": [[8, "module-gammapy.makers"]], "gammapy.makers.utils": [[8, "module-gammapy.makers.utils"]], "gammapy.maps": [[9, "module-gammapy.maps"]], "gammapy.modeling": [[10, "module-gammapy.modeling"]], "gammapy.modeling.models": [[10, "module-gammapy.modeling.models"]], "gammapy.modeling.models.utils": [[10, "module-gammapy.modeling.models.utils"]], "--dependencies": [[11, "cmdoption-gammapy-info-dependencies"]], "--envvar": [[11, "cmdoption-gammapy-info-envvar"]], "--filename": [[11, "cmdoption-gammapy-analysis-config-filename"], [11, "cmdoption-gammapy-analysis-run-filename"]], "--ignore-warnings": [[11, "cmdoption-gammapy-ignore-warnings"]], "--log-level": [[11, "cmdoption-gammapy-log-level"]], "--no-dependencies": [[11, "cmdoption-gammapy-info-dependencies"]], "--no-envvar": [[11, "cmdoption-gammapy-info-envvar"]], "--no-system": [[11, "cmdoption-gammapy-info-system"]], "--no-version": [[11, "cmdoption-gammapy-info-version"]], "--out": [[11, "cmdoption-gammapy-analysis-run-out"], [11, "cmdoption-gammapy-download-datasets-out"], [11, "cmdoption-gammapy-download-notebooks-out"]], "--overwrite": [[11, "cmdoption-gammapy-analysis-config-overwrite"], [11, "cmdoption-gammapy-analysis-run-overwrite"]], "--release": [[11, "cmdoption-gammapy-download-datasets-release"], [11, "cmdoption-gammapy-download-notebooks-release"]], "--system": [[11, "cmdoption-gammapy-info-system"]], "--version": [[11, "cmdoption-gammapy-info-version"], [11, "cmdoption-gammapy-version"]], "gammapy command line option": [[11, "cmdoption-gammapy-ignore-warnings"], [11, "cmdoption-gammapy-log-level"], [11, "cmdoption-gammapy-version"]], "gammapy-analysis-config command line option": [[11, "cmdoption-gammapy-analysis-config-filename"], [11, "cmdoption-gammapy-analysis-config-overwrite"]], "gammapy-analysis-run command line option": [[11, "cmdoption-gammapy-analysis-run-filename"], [11, "cmdoption-gammapy-analysis-run-out"], [11, "cmdoption-gammapy-analysis-run-overwrite"]], "gammapy-download-datasets command line option": [[11, "cmdoption-gammapy-download-datasets-out"], [11, "cmdoption-gammapy-download-datasets-release"]], "gammapy-download-notebooks command line option": [[11, "cmdoption-gammapy-download-notebooks-out"], [11, "cmdoption-gammapy-download-notebooks-release"]], "gammapy-info command line option": [[11, "cmdoption-gammapy-info-dependencies"], [11, "cmdoption-gammapy-info-envvar"], [11, "cmdoption-gammapy-info-system"], [11, "cmdoption-gammapy-info-version"]], "gammapy.stats": [[12, "module-gammapy.stats"]], "gammapy.utils.cluster": [[13, "module-gammapy.utils.cluster"]], "gammapy.utils.coordinates": [[13, "module-gammapy.utils.coordinates"]], "gammapy.utils.fits": [[13, "module-gammapy.utils.fits"]], "gammapy.utils.integrate": [[13, "module-gammapy.utils.integrate"]], "gammapy.utils.interpolation": [[13, "module-gammapy.utils.interpolation"]], "gammapy.utils.parallel": [[13, "module-gammapy.utils.parallel"]], "gammapy.utils.random": [[13, "module-gammapy.utils.random"]], "gammapy.utils.regions": [[13, "module-gammapy.utils.regions"]], "gammapy.utils.scripts": [[13, "module-gammapy.utils.scripts"]], "gammapy.utils.table": [[13, "module-gammapy.utils.table"]], "gammapy.utils.testing": [[13, "module-gammapy.utils.testing"]], "gammapy.utils.time": [[13, "module-gammapy.utils.time"]], "gammapy.utils.units": [[13, "module-gammapy.utils.units"]], "gammapy.visualization": [[14, "module-gammapy.visualization"]], "analysis (class in gammapy.analysis)": [[15, "gammapy.analysis.Analysis"]], "config (gammapy.analysis.analysis attribute)": [[15, "gammapy.analysis.Analysis.config"]], "get_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_datasets"]], "get_excess_map() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_excess_map"]], "get_flux_points() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_flux_points"]], "get_light_curve() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_light_curve"]], "get_observations() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.get_observations"]], "models (gammapy.analysis.analysis attribute)": [[15, "gammapy.analysis.Analysis.models"]], "read_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.read_datasets"]], "read_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.read_models"]], "run_fit() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.run_fit"]], "set_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.set_models"]], "update_config() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.update_config"]], "write_datasets() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.write_datasets"]], "write_models() (gammapy.analysis.analysis method)": [[15, "gammapy.analysis.Analysis.write_models"]], "analysisconfig (class in gammapy.analysis)": [[16, "gammapy.analysis.AnalysisConfig"]], "construct() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.construct"]], "copy() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.copy"]], "dict() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.dict"]], "from_orm() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.from_orm"]], "from_yaml() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.from_yaml"]], "json() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.json"]], "model_computed_fields (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_computed_fields"]], "model_config (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_config"]], "model_construct() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_construct"]], "model_copy() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_copy"]], "model_dump() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_dump"]], "model_dump_json() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_dump_json"]], "model_extra (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_extra"]], "model_fields (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_fields"]], "model_fields_set (gammapy.analysis.analysisconfig attribute)": [[16, "gammapy.analysis.AnalysisConfig.model_fields_set"]], "model_json_schema() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_json_schema"]], "model_parametrized_name() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_parametrized_name"]], "model_post_init() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.model_post_init"]], "model_rebuild() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_rebuild"]], "model_validate() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate"]], "model_validate_json() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate_json"]], "model_validate_strings() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.model_validate_strings"]], "parse_file() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_file"]], "parse_obj() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_obj"]], "parse_raw() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.parse_raw"]], "read() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.read"]], "schema() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.schema"]], "schema_json() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.schema_json"]], "set_logging() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.set_logging"]], "to_yaml() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.to_yaml"]], "update() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.update"]], "update_forward_refs() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.update_forward_refs"]], "validate() (gammapy.analysis.analysisconfig class method)": [[16, "gammapy.analysis.AnalysisConfig.validate"]], "write() (gammapy.analysis.analysisconfig method)": [[16, "gammapy.analysis.AnalysisConfig.write"]], "burkertprofile (class in gammapy.astro.darkmatter)": [[17, "gammapy.astro.darkmatter.BurkertProfile"]], "default_scale_radius (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.burkertprofile attribute)": [[17, "gammapy.astro.darkmatter.BurkertProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.burkertprofile static method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.burkertprofile method)": [[17, "gammapy.astro.darkmatter.BurkertProfile.scale_to_local_density"]], "distance_gc (gammapy.astro.darkmatter.dmprofile attribute)": [[18, "gammapy.astro.darkmatter.DMProfile.DISTANCE_GC"]], "dmprofile (class in gammapy.astro.darkmatter)": [[18, "gammapy.astro.darkmatter.DMProfile"]], "local_density (gammapy.astro.darkmatter.dmprofile attribute)": [[18, "gammapy.astro.darkmatter.DMProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.__call__"]], "integral() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.dmprofile method)": [[18, "gammapy.astro.darkmatter.DMProfile.scale_to_local_density"]], "darkmatterannihilationspectralmodel (class in gammapy.astro.darkmatter)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel"]], "thermal_relic_cross_section (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.THERMAL_RELIC_CROSS_SECTION"]], "__call__() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.__call__"]], "copy() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.copy"]], "covariance (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.covariance"]], "default_parameters (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.freeze"]], "from_dict() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel class method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel class method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.from_parameters"]], "frozen (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.frozen"]], "integral() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.integral"]], "integral_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.integral_error"]], "inverse() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.inverse"]], "inverse_all() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.parameters"]], "pivot_energy (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.pivot_energy"]], "plot() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.plot"]], "plot_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.plot_error"]], "reassign() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.reference_fluxes"]], "scale (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.scale"]], "spectral_index() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.spectral_index_error"]], "tag (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.tag"]], "to_dict() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.to_dict"]], "type (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel attribute)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.type"]], "unfreeze() (gammapy.astro.darkmatter.darkmatterannihilationspectralmodel method)": [[19, "gammapy.astro.darkmatter.DarkMatterAnnihilationSpectralModel.unfreeze"]], "darkmatterdecayspectralmodel (class in gammapy.astro.darkmatter)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel"]], "lifetime_age_of_universe (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.LIFETIME_AGE_OF_UNIVERSE"]], "__call__() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.__call__"]], "copy() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.copy"]], "covariance (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.covariance"]], "default_parameters (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.freeze"]], "from_dict() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel class method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel class method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.from_parameters"]], "frozen (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.frozen"]], "integral() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.integral"]], "integral_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.integral_error"]], "inverse() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.inverse"]], "inverse_all() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.is_norm_spectral_model"]], "parameters (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.parameters"]], "pivot_energy (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.pivot_energy"]], "plot() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.plot"]], "plot_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.plot_error"]], "reassign() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.reference_fluxes"]], "scale (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.scale"]], "spectral_index() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.spectral_index_error"]], "tag (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.tag"]], "to_dict() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.to_dict"]], "type (gammapy.astro.darkmatter.darkmatterdecayspectralmodel attribute)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.type"]], "unfreeze() (gammapy.astro.darkmatter.darkmatterdecayspectralmodel method)": [[20, "gammapy.astro.darkmatter.DarkMatterDecaySpectralModel.unfreeze"]], "default_alpha (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DEFAULT_ALPHA"]], "default_scale_radius (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.DISTANCE_GC"]], "einastoprofile (class in gammapy.astro.darkmatter)": [[21, "gammapy.astro.darkmatter.EinastoProfile"]], "local_density (gammapy.astro.darkmatter.einastoprofile attribute)": [[21, "gammapy.astro.darkmatter.EinastoProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.einastoprofile static method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.einastoprofile method)": [[21, "gammapy.astro.darkmatter.EinastoProfile.scale_to_local_density"]], "default_scale_radius (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.DISTANCE_GC"]], "isothermalprofile (class in gammapy.astro.darkmatter)": [[22, "gammapy.astro.darkmatter.IsothermalProfile"]], "local_density (gammapy.astro.darkmatter.isothermalprofile attribute)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.LOCAL_DENSITY"]], "__call__() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.isothermalprofile static method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.isothermalprofile method)": [[22, "gammapy.astro.darkmatter.IsothermalProfile.scale_to_local_density"]], "jfactory (class in gammapy.astro.darkmatter)": [[23, "gammapy.astro.darkmatter.JFactory"]], "compute_differential_jfactor() (gammapy.astro.darkmatter.jfactory method)": [[23, "gammapy.astro.darkmatter.JFactory.compute_differential_jfactor"]], "compute_jfactor() (gammapy.astro.darkmatter.jfactory method)": [[23, "gammapy.astro.darkmatter.JFactory.compute_jfactor"]], "default_scale_radius (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.mooreprofile attribute)": [[24, "gammapy.astro.darkmatter.MooreProfile.LOCAL_DENSITY"]], "mooreprofile (class in gammapy.astro.darkmatter)": [[24, "gammapy.astro.darkmatter.MooreProfile"]], "__call__() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.mooreprofile static method)": [[24, "gammapy.astro.darkmatter.MooreProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.mooreprofile method)": [[24, "gammapy.astro.darkmatter.MooreProfile.scale_to_local_density"]], "default_scale_radius (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.nfwprofile attribute)": [[25, "gammapy.astro.darkmatter.NFWProfile.LOCAL_DENSITY"]], "nfwprofile (class in gammapy.astro.darkmatter)": [[25, "gammapy.astro.darkmatter.NFWProfile"]], "__call__() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.nfwprofile static method)": [[25, "gammapy.astro.darkmatter.NFWProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.nfwprofile method)": [[25, "gammapy.astro.darkmatter.NFWProfile.scale_to_local_density"]], "primaryflux (class in gammapy.astro.darkmatter)": [[26, "gammapy.astro.darkmatter.PrimaryFlux"]], "__call__() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.__call__"]], "allowed_channels (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.allowed_channels"]], "channel (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.channel"]], "channel_registry (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.channel_registry"]], "copy() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.copy"]], "covariance (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.covariance"]], "default_parameters (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.default_parameters"]], "energy_flux() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.energy_flux"]], "energy_flux_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.energy_flux_error"]], "evaluate() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.evaluate"]], "evaluate_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.evaluate_error"]], "freeze() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.freeze"]], "from_dict() (gammapy.astro.darkmatter.primaryflux class method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.from_dict"]], "from_parameters() (gammapy.astro.darkmatter.primaryflux class method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.from_parameters"]], "frozen (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.frozen"]], "integral() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.integral"]], "integral_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.integral_error"]], "inverse() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.inverse"]], "inverse_all() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.inverse_all"]], "is_norm_spectral_model (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.is_norm_spectral_model"]], "mdm (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.mDM"]], "map (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.map"]], "parameters (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.parameters"]], "pivot_energy (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.pivot_energy"]], "plot() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.plot"]], "plot_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.plot_error"]], "reassign() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.reassign"]], "reference_fluxes() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.reference_fluxes"]], "spectral_index() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.spectral_index"]], "spectral_index_error() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.spectral_index_error"]], "table_filename (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.table_filename"]], "tag (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.tag"]], "to_dict() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.to_dict"]], "type (gammapy.astro.darkmatter.primaryflux attribute)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.type"]], "unfreeze() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.unfreeze"]], "write() (gammapy.astro.darkmatter.primaryflux method)": [[26, "gammapy.astro.darkmatter.PrimaryFlux.write"]], "default_alpha (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_ALPHA"]], "default_beta (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_BETA"]], "default_gamma (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_GAMMA"]], "default_scale_radius (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DEFAULT_SCALE_RADIUS"]], "distance_gc (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.DISTANCE_GC"]], "local_density (gammapy.astro.darkmatter.zhaoprofile attribute)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.LOCAL_DENSITY"]], "zhaoprofile (class in gammapy.astro.darkmatter)": [[27, "gammapy.astro.darkmatter.ZhaoProfile"]], "__call__() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.__call__"]], "evaluate() (gammapy.astro.darkmatter.zhaoprofile static method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.evaluate"]], "integral() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.integral"]], "integrate_spectrum_separation() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.integrate_spectrum_separation"]], "scale_to_local_density() (gammapy.astro.darkmatter.zhaoprofile method)": [[27, "gammapy.astro.darkmatter.ZhaoProfile.scale_to_local_density"]], "casebattacharya1998 (class in gammapy.astro.population)": [[28, "gammapy.astro.population.CaseBattacharya1998"]], "__call__() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.__call__"]], "alpha (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.alpha"]], "amplitude (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.amplitude"]], "bbox_with_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bbox_with_units"]], "beta (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.beta"]], "bounding_box (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bounding_box"]], "bounds (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.bounds"]], "coerce_units() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.coerce_units"]], "col_fit_deriv (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.col_fit_deriv"]], "copy() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.copy"]], "cov_matrix (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.cov_matrix"]], "deepcopy() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.deepcopy"]], "eqcons (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.eqcons"]], "evaluate() (gammapy.astro.population.casebattacharya1998 static method)": [[28, "gammapy.astro.population.CaseBattacharya1998.evaluate"]], "evolved (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.evolved"]], "fit_deriv (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fit_deriv"]], "fittable (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fittable"]], "fixed (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.fixed"]], "get_bounding_box() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.get_bounding_box"]], "has_inverse() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.has_user_inverse"]], "ineqcons (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.ineqcons"]], "input_shape() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_shape"]], "input_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.input_units_strict"]], "inputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.inputs"]], "inverse (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.inverse"]], "linear (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.linear"]], "meta (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.meta"]], "model_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.model_constraints"]], "model_set_axis (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.model_set_axis"]], "n_inputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_inputs"]], "n_outputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_outputs"]], "n_submodels (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.n_submodels"]], "name (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.name"]], "output_units() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.output_units"]], "outputs (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.outputs"]], "param_names (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.param_names"]], "param_sets (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.param_sets"]], "parameter_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.parameter_constraints"]], "parameters (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.parameters"]], "prepare_inputs() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.prepare_outputs"]], "rename() (gammapy.astro.population.casebattacharya1998 class method)": [[28, "gammapy.astro.population.CaseBattacharya1998.rename"]], "render() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.render"]], "return_units (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.return_units"]], "separable (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.separable"]], "set_slice_args() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.standard_broadcasting"]], "stds (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.stds"]], "strip_units_from_tree() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.sync_constraints"]], "tied (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.tied"]], "uses_quantity (gammapy.astro.population.casebattacharya1998 attribute)": [[28, "gammapy.astro.population.CaseBattacharya1998.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.casebattacharya1998 method)": [[28, "gammapy.astro.population.CaseBattacharya1998.without_units_for_data"]], "exponential (class in gammapy.astro.population)": [[29, "gammapy.astro.population.Exponential"]], "__call__() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.__call__"]], "amplitude (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.amplitude"]], "bbox_with_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bbox_with_units"]], "bounding_box (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bounding_box"]], "bounds (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.bounds"]], "coerce_units() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.coerce_units"]], "col_fit_deriv (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.col_fit_deriv"]], "copy() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.copy"]], "cov_matrix (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.cov_matrix"]], "deepcopy() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.deepcopy"]], "eqcons (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.eqcons"]], "evaluate() (gammapy.astro.population.exponential static method)": [[29, "gammapy.astro.population.Exponential.evaluate"]], "evolved (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.evolved"]], "fit_deriv (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fit_deriv"]], "fittable (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fittable"]], "fixed (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.fixed"]], "get_bounding_box() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.get_bounding_box"]], "has_inverse() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.has_user_inverse"]], "ineqcons (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.ineqcons"]], "input_shape() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.input_shape"]], "input_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.input_units_strict"]], "inputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.inputs"]], "inverse (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.inverse"]], "linear (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.linear"]], "meta (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.meta"]], "model_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.model_constraints"]], "model_set_axis (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.model_set_axis"]], "n_inputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_inputs"]], "n_outputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_outputs"]], "n_submodels (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.n_submodels"]], "name (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.name"]], "output_units() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.output_units"]], "outputs (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.outputs"]], "param_names (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.param_names"]], "param_sets (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.param_sets"]], "parameter_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.parameter_constraints"]], "parameters (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.parameters"]], "prepare_inputs() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.prepare_outputs"]], "rename() (gammapy.astro.population.exponential class method)": [[29, "gammapy.astro.population.Exponential.rename"]], "render() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.render"]], "return_units (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.return_units"]], "separable (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.separable"]], "set_slice_args() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.standard_broadcasting"]], "stds (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.stds"]], "strip_units_from_tree() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.sync_constraints"]], "tied (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.tied"]], "uses_quantity (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.exponential method)": [[29, "gammapy.astro.population.Exponential.without_units_for_data"]], "z_0 (gammapy.astro.population.exponential attribute)": [[29, "gammapy.astro.population.Exponential.z_0"]], "faucherkaspi2006 (class in gammapy.astro.population)": [[30, "gammapy.astro.population.FaucherKaspi2006"]], "__call__() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006 static method)": [[30, "gammapy.astro.population.FaucherKaspi2006.evaluate"]], "evolved (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.evolved"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.linear"]], "meta (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.prepare_outputs"]], "r_0 (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.r_0"]], "rename() (gammapy.astro.population.faucherkaspi2006 class method)": [[30, "gammapy.astro.population.FaucherKaspi2006.rename"]], "render() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.render"]], "return_units (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.set_slice_args"]], "sigma (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.sigma"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006 attribute)": [[30, "gammapy.astro.population.FaucherKaspi2006.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006 method)": [[30, "gammapy.astro.population.FaucherKaspi2006.without_units_for_data"]], "faucherkaspi2006velocitybimodal (class in gammapy.astro.population)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal"]], "__call__() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006velocitybimodal static method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.evaluate"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.linear"]], "meta (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.prepare_outputs"]], "rename() (gammapy.astro.population.faucherkaspi2006velocitybimodal class method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.rename"]], "render() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.render"]], "return_units (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.set_slice_args"]], "sigma_1 (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sigma_1"]], "sigma_2 (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sigma_2"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.uses_quantity"]], "w (gammapy.astro.population.faucherkaspi2006velocitybimodal attribute)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.w"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006velocitybimodal method)": [[31, "gammapy.astro.population.FaucherKaspi2006VelocityBimodal.without_units_for_data"]], "faucherkaspi2006velocitymaxwellian (class in gammapy.astro.population)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian"]], "__call__() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.__call__"]], "amplitude (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.amplitude"]], "bbox_with_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bbox_with_units"]], "bounding_box (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bounding_box"]], "bounds (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.bounds"]], "coerce_units() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.coerce_units"]], "col_fit_deriv (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.col_fit_deriv"]], "copy() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.copy"]], "cov_matrix (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.cov_matrix"]], "deepcopy() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.deepcopy"]], "eqcons (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.eqcons"]], "evaluate() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian static method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.evaluate"]], "fit_deriv (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fit_deriv"]], "fittable (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fittable"]], "fixed (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.fixed"]], "get_bounding_box() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.get_bounding_box"]], "has_inverse() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.has_user_inverse"]], "ineqcons (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.ineqcons"]], "input_shape() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_shape"]], "input_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.input_units_strict"]], "inputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.inputs"]], "inverse (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.inverse"]], "linear (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.linear"]], "meta (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.meta"]], "model_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.model_constraints"]], "model_set_axis (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.model_set_axis"]], "n_inputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_inputs"]], "n_outputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_outputs"]], "n_submodels (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.n_submodels"]], "name (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.name"]], "output_units() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.output_units"]], "outputs (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.outputs"]], "param_names (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.param_names"]], "param_sets (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.param_sets"]], "parameter_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.parameter_constraints"]], "parameters (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.parameters"]], "prepare_inputs() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.prepare_outputs"]], "rename() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian class method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.rename"]], "render() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.render"]], "return_units (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.return_units"]], "separable (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.separable"]], "set_slice_args() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.set_slice_args"]], "sigma (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sigma"]], "standard_broadcasting (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.standard_broadcasting"]], "stds (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.stds"]], "strip_units_from_tree() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.sync_constraints"]], "tied (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.tied"]], "uses_quantity (gammapy.astro.population.faucherkaspi2006velocitymaxwellian attribute)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.faucherkaspi2006velocitymaxwellian method)": [[32, "gammapy.astro.population.FaucherKaspi2006VelocityMaxwellian.without_units_for_data"]], "faucherspiral (class in gammapy.astro.population)": [[33, "gammapy.astro.population.FaucherSpiral"]], "__call__() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.__call__"]], "k (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.k"]], "r_0 (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.r_0"]], "radius() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.radius"]], "spiralarms (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.spiralarms"]], "theta() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.theta"]], "theta_0 (gammapy.astro.population.faucherspiral attribute)": [[33, "gammapy.astro.population.FaucherSpiral.theta_0"]], "xy_position() (gammapy.astro.population.faucherspiral method)": [[33, "gammapy.astro.population.FaucherSpiral.xy_position"]], "logspiral (class in gammapy.astro.population)": [[34, "gammapy.astro.population.LogSpiral"]], "radius() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.radius"]], "theta() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.theta"]], "xy_position() (gammapy.astro.population.logspiral method)": [[34, "gammapy.astro.population.LogSpiral.xy_position"]], "b (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.B"]], "c (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.C"]], "lorimer2006 (class in gammapy.astro.population)": [[35, "gammapy.astro.population.Lorimer2006"]], "__call__() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.__call__"]], "amplitude (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.amplitude"]], "bbox_with_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bbox_with_units"]], "bounding_box (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bounding_box"]], "bounds (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.bounds"]], "coerce_units() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.coerce_units"]], "col_fit_deriv (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.col_fit_deriv"]], "copy() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.copy"]], "cov_matrix (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.cov_matrix"]], "deepcopy() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.deepcopy"]], "eqcons (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.eqcons"]], "evaluate() (gammapy.astro.population.lorimer2006 static method)": [[35, "gammapy.astro.population.Lorimer2006.evaluate"]], "evolved (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.evolved"]], "fit_deriv (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fit_deriv"]], "fittable (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fittable"]], "fixed (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.fixed"]], "get_bounding_box() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.get_bounding_box"]], "has_inverse() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.has_user_inverse"]], "ineqcons (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.ineqcons"]], "input_shape() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.input_shape"]], "input_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.input_units_strict"]], "inputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.inputs"]], "inverse (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.inverse"]], "linear (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.linear"]], "meta (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.meta"]], "model_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.model_constraints"]], "model_set_axis (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.model_set_axis"]], "n_inputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_inputs"]], "n_outputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_outputs"]], "n_submodels (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.n_submodels"]], "name (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.name"]], "output_units() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.output_units"]], "outputs (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.outputs"]], "param_names (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.param_names"]], "param_sets (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.param_sets"]], "parameter_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.parameter_constraints"]], "parameters (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.parameters"]], "prepare_inputs() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.prepare_outputs"]], "rename() (gammapy.astro.population.lorimer2006 class method)": [[35, "gammapy.astro.population.Lorimer2006.rename"]], "render() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.render"]], "return_units (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.return_units"]], "separable (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.separable"]], "set_slice_args() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.standard_broadcasting"]], "stds (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.stds"]], "strip_units_from_tree() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.sync_constraints"]], "tied (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.tied"]], "uses_quantity (gammapy.astro.population.lorimer2006 attribute)": [[35, "gammapy.astro.population.Lorimer2006.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.lorimer2006 method)": [[35, "gammapy.astro.population.Lorimer2006.without_units_for_data"]], "paczynski1990 (class in gammapy.astro.population)": [[36, "gammapy.astro.population.Paczynski1990"]], "__call__() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.__call__"]], "amplitude (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.amplitude"]], "bbox_with_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bbox_with_units"]], "bounding_box (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bounding_box"]], "bounds (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.bounds"]], "coerce_units() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.coerce_units"]], "col_fit_deriv (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.col_fit_deriv"]], "copy() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.copy"]], "cov_matrix (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.cov_matrix"]], "deepcopy() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.deepcopy"]], "eqcons (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.eqcons"]], "evaluate() (gammapy.astro.population.paczynski1990 static method)": [[36, "gammapy.astro.population.Paczynski1990.evaluate"]], "evolved (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.evolved"]], "fit_deriv (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fit_deriv"]], "fittable (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fittable"]], "fixed (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.fixed"]], "get_bounding_box() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.get_bounding_box"]], "has_inverse() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.has_user_inverse"]], "ineqcons (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.ineqcons"]], "input_shape() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.input_shape"]], "input_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.input_units_strict"]], "inputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.inputs"]], "inverse (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.inverse"]], "linear (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.linear"]], "meta (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.meta"]], "model_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.model_constraints"]], "model_set_axis (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.model_set_axis"]], "n_inputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_inputs"]], "n_outputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_outputs"]], "n_submodels (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.n_submodels"]], "name (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.name"]], "output_units() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.output_units"]], "outputs (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.outputs"]], "param_names (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.param_names"]], "param_sets (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.param_sets"]], "parameter_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.parameter_constraints"]], "parameters (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.parameters"]], "prepare_inputs() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.prepare_outputs"]], "r_exp (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.r_exp"]], "rename() (gammapy.astro.population.paczynski1990 class method)": [[36, "gammapy.astro.population.Paczynski1990.rename"]], "render() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.render"]], "return_units (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.return_units"]], "separable (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.separable"]], "set_slice_args() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.standard_broadcasting"]], "stds (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.stds"]], "strip_units_from_tree() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.sync_constraints"]], "tied (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.tied"]], "uses_quantity (gammapy.astro.population.paczynski1990 attribute)": [[36, "gammapy.astro.population.Paczynski1990.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.paczynski1990 method)": [[36, "gammapy.astro.population.Paczynski1990.without_units_for_data"]], "paczynski1990velocity (class in gammapy.astro.population)": [[37, "gammapy.astro.population.Paczynski1990Velocity"]], "__call__() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.__call__"]], "amplitude (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.amplitude"]], "bbox_with_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bbox_with_units"]], "bounding_box (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bounding_box"]], "bounds (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.bounds"]], "coerce_units() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.coerce_units"]], "col_fit_deriv (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.col_fit_deriv"]], "copy() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.copy"]], "cov_matrix (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.cov_matrix"]], "deepcopy() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.deepcopy"]], "eqcons (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.eqcons"]], "evaluate() (gammapy.astro.population.paczynski1990velocity static method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.evaluate"]], "fit_deriv (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fit_deriv"]], "fittable (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fittable"]], "fixed (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.fixed"]], "get_bounding_box() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.get_bounding_box"]], "has_inverse() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.has_user_inverse"]], "ineqcons (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.ineqcons"]], "input_shape() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_shape"]], "input_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.input_units_strict"]], "inputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.inputs"]], "inverse (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.inverse"]], "linear (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.linear"]], "meta (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.meta"]], "model_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.model_constraints"]], "model_set_axis (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.model_set_axis"]], "n_inputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_inputs"]], "n_outputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_outputs"]], "n_submodels (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.n_submodels"]], "name (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.name"]], "output_units() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.output_units"]], "outputs (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.outputs"]], "param_names (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.param_names"]], "param_sets (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.param_sets"]], "parameter_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.parameter_constraints"]], "parameters (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.parameters"]], "prepare_inputs() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.prepare_outputs"]], "rename() (gammapy.astro.population.paczynski1990velocity class method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.rename"]], "render() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.render"]], "return_units (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.return_units"]], "separable (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.separable"]], "set_slice_args() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.standard_broadcasting"]], "stds (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.stds"]], "strip_units_from_tree() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.sync_constraints"]], "tied (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.tied"]], "uses_quantity (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.uses_quantity"]], "v_0 (gammapy.astro.population.paczynski1990velocity attribute)": [[37, "gammapy.astro.population.Paczynski1990Velocity.v_0"]], "with_units_from_data() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.paczynski1990velocity method)": [[37, "gammapy.astro.population.Paczynski1990Velocity.without_units_for_data"]], "valleespiral (class in gammapy.astro.population)": [[38, "gammapy.astro.population.ValleeSpiral"]], "bar_radius (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.bar_radius"]], "m (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.m"]], "p (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.p"]], "r_0 (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.r_0"]], "r_sun (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.r_sun"]], "radius() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.radius"]], "spiralarms (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.spiralarms"]], "theta() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.theta"]], "theta_0 (gammapy.astro.population.valleespiral attribute)": [[38, "gammapy.astro.population.ValleeSpiral.theta_0"]], "xy_position() (gammapy.astro.population.valleespiral method)": [[38, "gammapy.astro.population.ValleeSpiral.xy_position"]], "yusifovkucuk2004 (class in gammapy.astro.population)": [[39, "gammapy.astro.population.YusifovKucuk2004"]], "__call__() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.__call__"]], "a (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.a"]], "amplitude (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.amplitude"]], "b (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.b"]], "bbox_with_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bbox_with_units"]], "bounding_box (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bounding_box"]], "bounds (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.bounds"]], "coerce_units() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.coerce_units"]], "col_fit_deriv (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.col_fit_deriv"]], "copy() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.copy"]], "cov_matrix (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.cov_matrix"]], "deepcopy() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.deepcopy"]], "eqcons (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.eqcons"]], "evaluate() (gammapy.astro.population.yusifovkucuk2004 static method)": [[39, "gammapy.astro.population.YusifovKucuk2004.evaluate"]], "evolved (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.evolved"]], "fit_deriv (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fit_deriv"]], "fittable (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fittable"]], "fixed (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.fixed"]], "get_bounding_box() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.get_bounding_box"]], "has_inverse() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.has_user_inverse"]], "ineqcons (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.ineqcons"]], "input_shape() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_shape"]], "input_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.input_units_strict"]], "inputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.inputs"]], "inverse (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.inverse"]], "linear (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.linear"]], "meta (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.meta"]], "model_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.model_constraints"]], "model_set_axis (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.model_set_axis"]], "n_inputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_inputs"]], "n_outputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_outputs"]], "n_submodels (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.n_submodels"]], "name (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.name"]], "output_units() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.output_units"]], "outputs (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.outputs"]], "param_names (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.param_names"]], "param_sets (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.param_sets"]], "parameter_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.parameter_constraints"]], "parameters (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.parameters"]], "prepare_inputs() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.prepare_outputs"]], "r_1 (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.r_1"]], "rename() (gammapy.astro.population.yusifovkucuk2004 class method)": [[39, "gammapy.astro.population.YusifovKucuk2004.rename"]], "render() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.render"]], "return_units (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.return_units"]], "separable (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.separable"]], "set_slice_args() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.standard_broadcasting"]], "stds (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.stds"]], "strip_units_from_tree() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.sync_constraints"]], "tied (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.tied"]], "uses_quantity (gammapy.astro.population.yusifovkucuk2004 attribute)": [[39, "gammapy.astro.population.YusifovKucuk2004.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.yusifovkucuk2004 method)": [[39, "gammapy.astro.population.YusifovKucuk2004.without_units_for_data"]], "yusifovkucuk2004b (class in gammapy.astro.population)": [[40, "gammapy.astro.population.YusifovKucuk2004B"]], "__call__() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.__call__"]], "a (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.a"]], "amplitude (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.amplitude"]], "b (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.b"]], "bbox_with_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bbox_with_units"]], "bounding_box (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bounding_box"]], "bounds (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.bounds"]], "coerce_units() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.coerce_units"]], "col_fit_deriv (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.col_fit_deriv"]], "copy() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.copy"]], "cov_matrix (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.cov_matrix"]], "deepcopy() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.deepcopy"]], "eqcons (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.eqcons"]], "evaluate() (gammapy.astro.population.yusifovkucuk2004b static method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.evaluate"]], "evolved (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.evolved"]], "fit_deriv (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fit_deriv"]], "fittable (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fittable"]], "fixed (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.fixed"]], "get_bounding_box() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.get_bounding_box"]], "has_inverse() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_inverse"]], "has_user_bounding_box (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_user_bounding_box"]], "has_user_inverse (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.has_user_inverse"]], "ineqcons (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.ineqcons"]], "input_shape() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_shape"]], "input_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units"]], "input_units_allow_dimensionless (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_allow_dimensionless"]], "input_units_equivalencies (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_equivalencies"]], "input_units_strict (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.input_units_strict"]], "inputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.inputs"]], "inverse (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.inverse"]], "linear (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.linear"]], "meta (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.meta"]], "model_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.model_constraints"]], "model_set_axis (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.model_set_axis"]], "n_inputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_inputs"]], "n_outputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_outputs"]], "n_submodels (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.n_submodels"]], "name (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.name"]], "output_units() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.output_units"]], "outputs (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.outputs"]], "param_names (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.param_names"]], "param_sets (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.param_sets"]], "parameter_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.parameter_constraints"]], "parameters (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.parameters"]], "prepare_inputs() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.prepare_inputs"]], "prepare_outputs() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.prepare_outputs"]], "rename() (gammapy.astro.population.yusifovkucuk2004b class method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.rename"]], "render() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.render"]], "return_units (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.return_units"]], "separable (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.separable"]], "set_slice_args() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.set_slice_args"]], "standard_broadcasting (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.standard_broadcasting"]], "stds (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.stds"]], "strip_units_from_tree() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.strip_units_from_tree"]], "sum_of_implicit_terms() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.sum_of_implicit_terms"]], "sync_constraints (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.sync_constraints"]], "tied (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.tied"]], "uses_quantity (gammapy.astro.population.yusifovkucuk2004b attribute)": [[40, "gammapy.astro.population.YusifovKucuk2004B.uses_quantity"]], "with_units_from_data() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.with_units_from_data"]], "without_units_for_data() (gammapy.astro.population.yusifovkucuk2004b method)": [[40, "gammapy.astro.population.YusifovKucuk2004B.without_units_for_data"]], "add_observed_parameters() (in module gammapy.astro.population)": [[41, "gammapy.astro.population.add_observed_parameters"]], "add_pulsar_parameters() (in module gammapy.astro.population)": [[42, "gammapy.astro.population.add_pulsar_parameters"]], "add_pwn_parameters() (in module gammapy.astro.population)": [[43, "gammapy.astro.population.add_pwn_parameters"]], "add_snr_parameters() (in module gammapy.astro.population)": [[44, "gammapy.astro.population.add_snr_parameters"]], "make_base_catalog_galactic() (in module gammapy.astro.population)": [[45, "gammapy.astro.population.make_base_catalog_galactic"]], "make_catalog_random_positions_cube() (in module gammapy.astro.population)": [[46, "gammapy.astro.population.make_catalog_random_positions_cube"]], "make_catalog_random_positions_sphere() (in module gammapy.astro.population)": [[47, "gammapy.astro.population.make_catalog_random_positions_sphere"]], "radial_distributions (in module gammapy.astro.population)": [[48, "gammapy.astro.population.radial_distributions"]], "velocity_distributions (in module gammapy.astro.population)": [[49, "gammapy.astro.population.velocity_distributions"]], "pwn (class in gammapy.astro.source)": [[50, "gammapy.astro.source.PWN"]], "magnetic_field() (gammapy.astro.source.pwn method)": [[50, "gammapy.astro.source.PWN.magnetic_field"]], "radius() (gammapy.astro.source.pwn method)": [[50, "gammapy.astro.source.PWN.radius"]], "pulsar (class in gammapy.astro.source)": [[51, "gammapy.astro.source.Pulsar"]], "energy_integrated() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.energy_integrated"]], "luminosity_spindown() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.luminosity_spindown"]], "magnetic_field() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.magnetic_field"]], "period() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.period"]], "period_dot() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.period_dot"]], "tau() (gammapy.astro.source.pulsar method)": [[51, "gammapy.astro.source.Pulsar.tau"]], "snr (class in gammapy.astro.source)": [[52, "gammapy.astro.source.SNR"]], "luminosity_tev() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.luminosity_tev"]], "radius() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.radius"]], "radius_inner() (gammapy.astro.source.snr method)": [[52, "gammapy.astro.source.SNR.radius_inner"]], "sedov_taylor_begin (gammapy.astro.source.snr attribute)": [[52, "gammapy.astro.source.SNR.sedov_taylor_begin"]], "sedov_taylor_end (gammapy.astro.source.snr attribute)": [[52, "gammapy.astro.source.SNR.sedov_taylor_end"]], "snrtruelovemckee (class in gammapy.astro.source)": [[53, "gammapy.astro.source.SNRTrueloveMcKee"]], "luminosity_tev() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.luminosity_tev"]], "radius() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius"]], "radius_inner() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius_inner"]], "radius_reverse_shock() (gammapy.astro.source.snrtruelovemckee method)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.radius_reverse_shock"]], "sedov_taylor_begin (gammapy.astro.source.snrtruelovemckee attribute)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.sedov_taylor_begin"]], "sedov_taylor_end (gammapy.astro.source.snrtruelovemckee attribute)": [[53, "gammapy.astro.source.SNRTrueloveMcKee.sedov_taylor_end"]], "simplepulsar (class in gammapy.astro.source)": [[54, "gammapy.astro.source.SimplePulsar"]], "luminosity_spindown (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.luminosity_spindown"]], "magnetic_field (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.magnetic_field"]], "tau (gammapy.astro.source.simplepulsar attribute)": [[54, "gammapy.astro.source.SimplePulsar.tau"]], "catalog_registry (in module gammapy.catalog)": [[55, "gammapy.catalog.CATALOG_REGISTRY"]], "sourcecatalog (class in gammapy.catalog)": [[56, "gammapy.catalog.SourceCatalog"]], "description() (gammapy.catalog.sourcecatalog class method)": [[56, "gammapy.catalog.SourceCatalog.description"]], "positions (gammapy.catalog.sourcecatalog attribute)": [[56, "gammapy.catalog.SourceCatalog.positions"]], "row_index() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.row_index"]], "source_name() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.source_name"]], "tag (gammapy.catalog.sourcecatalog attribute)": [[56, "gammapy.catalog.SourceCatalog.tag"]], "to_models() (gammapy.catalog.sourcecatalog method)": [[56, "gammapy.catalog.SourceCatalog.to_models"]], "sourcecatalog1lhaaso (class in gammapy.catalog)": [[57, "gammapy.catalog.SourceCatalog1LHAASO"]], "description (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.description"]], "positions (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.positions"]], "row_index() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.row_index"]], "source_name() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.source_name"]], "tag (gammapy.catalog.sourcecatalog1lhaaso attribute)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.tag"]], "to_models() (gammapy.catalog.sourcecatalog1lhaaso method)": [[57, "gammapy.catalog.SourceCatalog1LHAASO.to_models"]], "sourcecatalog2fhl (class in gammapy.catalog)": [[58, "gammapy.catalog.SourceCatalog2FHL"]], "description (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.description"]], "positions (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.positions"]], "row_index() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.source_name"]], "tag (gammapy.catalog.sourcecatalog2fhl attribute)": [[58, "gammapy.catalog.SourceCatalog2FHL.tag"]], "to_models() (gammapy.catalog.sourcecatalog2fhl method)": [[58, "gammapy.catalog.SourceCatalog2FHL.to_models"]], "sourcecatalog2hwc (class in gammapy.catalog)": [[59, "gammapy.catalog.SourceCatalog2HWC"]], "description (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.description"]], "positions (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.positions"]], "row_index() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.row_index"]], "source_name() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.source_name"]], "tag (gammapy.catalog.sourcecatalog2hwc attribute)": [[59, "gammapy.catalog.SourceCatalog2HWC.tag"]], "to_models() (gammapy.catalog.sourcecatalog2hwc method)": [[59, "gammapy.catalog.SourceCatalog2HWC.to_models"]], "sourcecatalog3fgl (class in gammapy.catalog)": [[60, "gammapy.catalog.SourceCatalog3FGL"]], "description (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.description"]], "positions (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.positions"]], "row_index() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.source_name"]], "tag (gammapy.catalog.sourcecatalog3fgl attribute)": [[60, "gammapy.catalog.SourceCatalog3FGL.tag"]], "to_models() (gammapy.catalog.sourcecatalog3fgl method)": [[60, "gammapy.catalog.SourceCatalog3FGL.to_models"]], "sourcecatalog3fhl (class in gammapy.catalog)": [[61, "gammapy.catalog.SourceCatalog3FHL"]], "description (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.description"]], "positions (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.positions"]], "row_index() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.source_name"]], "tag (gammapy.catalog.sourcecatalog3fhl attribute)": [[61, "gammapy.catalog.SourceCatalog3FHL.tag"]], "to_models() (gammapy.catalog.sourcecatalog3fhl method)": [[61, "gammapy.catalog.SourceCatalog3FHL.to_models"]], "sourcecatalog3hwc (class in gammapy.catalog)": [[62, "gammapy.catalog.SourceCatalog3HWC"]], "description (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.description"]], "positions (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.positions"]], "row_index() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.row_index"]], "source_name() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.source_name"]], "tag (gammapy.catalog.sourcecatalog3hwc attribute)": [[62, "gammapy.catalog.SourceCatalog3HWC.tag"]], "to_models() (gammapy.catalog.sourcecatalog3hwc method)": [[62, "gammapy.catalog.SourceCatalog3HWC.to_models"]], "sourcecatalog4fgl (class in gammapy.catalog)": [[63, "gammapy.catalog.SourceCatalog4FGL"]], "description (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.description"]], "positions (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.positions"]], "row_index() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.row_index"]], "source_name() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.source_name"]], "tag (gammapy.catalog.sourcecatalog4fgl attribute)": [[63, "gammapy.catalog.SourceCatalog4FGL.tag"]], "to_models() (gammapy.catalog.sourcecatalog4fgl method)": [[63, "gammapy.catalog.SourceCatalog4FGL.to_models"]], "sourcecataloggammacat (class in gammapy.catalog)": [[64, "gammapy.catalog.SourceCatalogGammaCat"]], "description (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.description"]], "positions (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.positions"]], "row_index() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.row_index"]], "source_name() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.source_name"]], "tag (gammapy.catalog.sourcecataloggammacat attribute)": [[64, "gammapy.catalog.SourceCatalogGammaCat.tag"]], "to_models() (gammapy.catalog.sourcecataloggammacat method)": [[64, "gammapy.catalog.SourceCatalogGammaCat.to_models"]], "sourcecataloghgps (class in gammapy.catalog)": [[65, "gammapy.catalog.SourceCatalogHGPS"]], "description (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.description"]], "gaussian_component() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.gaussian_component"]], "large_scale_component (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.large_scale_component"]], "positions (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.positions"]], "row_index() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.row_index"]], "source_name() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.source_name"]], "table_associations (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_associations"]], "table_components (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_components"]], "table_identifications (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_identifications"]], "table_large_scale_component (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.table_large_scale_component"]], "tag (gammapy.catalog.sourcecataloghgps attribute)": [[65, "gammapy.catalog.SourceCatalogHGPS.tag"]], "to_models() (gammapy.catalog.sourcecataloghgps method)": [[65, "gammapy.catalog.SourceCatalogHGPS.to_models"]], "sourcecataloglargescalehgps (class in gammapy.catalog)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS"]], "evaluate() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.evaluate"]], "peak_brightness() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_brightness"]], "peak_brightness_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_brightness_error"]], "peak_latitude() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_latitude"]], "peak_latitude_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.peak_latitude_error"]], "width() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.width"]], "width_error() (gammapy.catalog.sourcecataloglargescalehgps method)": [[66, "gammapy.catalog.SourceCatalogLargeScaleHGPS.width_error"]], "sourcecatalogobject (class in gammapy.catalog)": [[67, "gammapy.catalog.SourceCatalogObject"]], "name (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.name"]], "position (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.position"]], "row_index (gammapy.catalog.sourcecatalogobject attribute)": [[67, "gammapy.catalog.SourceCatalogObject.row_index"]], "sourcecatalogobject1lhaaso (class in gammapy.catalog)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO"]], "name (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.name"]], "position (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.position"]], "row_index (gammapy.catalog.sourcecatalogobject1lhaaso attribute)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject1lhaaso method)": [[68, "gammapy.catalog.SourceCatalogObject1LHAASO.spectral_model"]], "sourcecatalogobject2fhl (class in gammapy.catalog)": [[69, "gammapy.catalog.SourceCatalogObject2FHL"]], "asso (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.is_pointlike"]], "name (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.name"]], "position (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.position"]], "row_index (gammapy.catalog.sourcecatalogobject2fhl attribute)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject2fhl method)": [[69, "gammapy.catalog.SourceCatalogObject2FHL.spectral_model"]], "sourcecatalogobject2hwc (class in gammapy.catalog)": [[70, "gammapy.catalog.SourceCatalogObject2HWC"]], "info() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.info"]], "n_models (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.n_models"]], "name (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.name"]], "position (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.position"]], "row_index (gammapy.catalog.sourcecatalogobject2hwc attribute)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject2hwc method)": [[70, "gammapy.catalog.SourceCatalogObject2HWC.spectral_model"]], "sourcecatalogobject3fgl (class in gammapy.catalog)": [[71, "gammapy.catalog.SourceCatalogObject3FGL"]], "asso (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.is_pointlike"]], "lightcurve() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.lightcurve"]], "name (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.name"]], "position (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.position"]], "row_index (gammapy.catalog.sourcecatalogobject3fgl attribute)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3fgl method)": [[71, "gammapy.catalog.SourceCatalogObject3FGL.spectral_model"]], "sourcecatalogobject3fhl (class in gammapy.catalog)": [[72, "gammapy.catalog.SourceCatalogObject3FHL"]], "asso (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.asso"]], "energy_range (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.is_pointlike"]], "name (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.name"]], "position (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.position"]], "row_index (gammapy.catalog.sourcecatalogobject3fhl attribute)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3fhl method)": [[72, "gammapy.catalog.SourceCatalogObject3FHL.spectral_model"]], "sourcecatalogobject3hwc (class in gammapy.catalog)": [[73, "gammapy.catalog.SourceCatalogObject3HWC"]], "info() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.is_pointlike"]], "n_models (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.n_models"]], "name (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.name"]], "position (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.position"]], "row_index (gammapy.catalog.sourcecatalogobject3hwc attribute)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject3hwc method)": [[73, "gammapy.catalog.SourceCatalogObject3HWC.spectral_model"]], "sourcecatalogobject4fgl (class in gammapy.catalog)": [[74, "gammapy.catalog.SourceCatalogObject4FGL"]], "asso (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.asso"]], "flux_points (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points"]], "flux_points_meta (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points_meta"]], "flux_points_table (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.info"]], "is_pointlike (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.is_pointlike"]], "lightcurve() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.lightcurve"]], "name (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.name"]], "position (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.position"]], "row_index (gammapy.catalog.sourcecatalogobject4fgl attribute)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobject4fgl method)": [[74, "gammapy.catalog.SourceCatalogObject4FGL.spectral_model"]], "sourcecatalogobjectgammacat (class in gammapy.catalog)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat"]], "flux_points (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.flux_points"]], "flux_points_table (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.info"]], "name (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.name"]], "position (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.position"]], "row_index (gammapy.catalog.sourcecatalogobjectgammacat attribute)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobjectgammacat method)": [[75, "gammapy.catalog.SourceCatalogObjectGammaCat.spectral_model"]], "sourcecatalogobjecthgps (class in gammapy.catalog)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS"]], "components_models() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.components_models"]], "energy_range (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.energy_range"]], "flux_points (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.flux_points"]], "flux_points_table (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.flux_points_table"]], "info() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.info"]], "name (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.name"]], "position (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.position"]], "row_index (gammapy.catalog.sourcecatalogobjecthgps attribute)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.row_index"]], "sky_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.sky_model"]], "spatial_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.spatial_model"]], "spectral_model() (gammapy.catalog.sourcecatalogobjecthgps method)": [[76, "gammapy.catalog.SourceCatalogObjectHGPS.spectral_model"]], "sourcecatalogobjecthgpscomponent (class in gammapy.catalog)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent"]], "name (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.name"]], "position (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.position"]], "row_index (gammapy.catalog.sourcecatalogobjecthgpscomponent attribute)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.row_index"]], "spatial_model() (gammapy.catalog.sourcecatalogobjecthgpscomponent method)": [[77, "gammapy.catalog.SourceCatalogObjectHGPSComponent.spatial_model"]], "default_hdu_table (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.DEFAULT_HDU_TABLE"]], "default_obs_table (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.DEFAULT_OBS_TABLE"]], "datastore (class in gammapy.data)": [[78, "gammapy.data.DataStore"]], "check() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.check"]], "copy_obs() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.copy_obs"]], "from_dir() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_dir"]], "from_events_files() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_events_files"]], "from_file() (gammapy.data.datastore class method)": [[78, "gammapy.data.DataStore.from_file"]], "get_observations() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.get_observations"]], "info() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.info"]], "obs() (gammapy.data.datastore method)": [[78, "gammapy.data.DataStore.obs"]], "obs_ids (gammapy.data.datastore attribute)": [[78, "gammapy.data.DataStore.obs_ids"]], "eventlist (class in gammapy.data)": [[79, "gammapy.data.EventList"]], "altaz (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz"]], "altaz_frame (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz_frame"]], "altaz_from_table (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.altaz_from_table"]], "check() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.check"]], "copy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.copy"]], "energy (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.energy"]], "from_stack() (gammapy.data.eventlist class method)": [[79, "gammapy.data.EventList.from_stack"]], "galactic (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.galactic"]], "galactic_median (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.galactic_median"]], "is_pointed_observation (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.is_pointed_observation"]], "map_coord() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.map_coord"]], "observation_dead_time_fraction (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_dead_time_fraction"]], "observation_live_time_duration (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_live_time_duration"]], "observation_time_duration (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_duration"]], "observation_time_start (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_start"]], "observation_time_stop (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observation_time_stop"]], "observatory_earth_location (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.observatory_earth_location"]], "offset (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.offset"]], "offset_from_median (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.offset_from_median"]], "peek() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.peek"]], "plot_energy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_energy"]], "plot_energy_offset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_energy_offset"]], "plot_image() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_image"]], "plot_offset2_distribution() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_offset2_distribution"]], "plot_time() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.plot_time"]], "pointing_radec (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.pointing_radec"]], "radec (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.radec"]], "read() (gammapy.data.eventlist class method)": [[79, "gammapy.data.EventList.read"]], "select_energy() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_energy"]], "select_mask() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_mask"]], "select_offset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_offset"]], "select_parameter() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_parameter"]], "select_rad_max() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_rad_max"]], "select_region() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_region"]], "select_row_subset() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_row_subset"]], "select_time() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.select_time"]], "stack() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.stack"]], "time (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.time"]], "time_ref (gammapy.data.eventlist attribute)": [[79, "gammapy.data.EventList.time_ref"]], "to_table_hdu() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.to_table_hdu"]], "write() (gammapy.data.eventlist method)": [[79, "gammapy.data.EventList.write"]], "eventlistmetadata (class in gammapy.data)": [[80, "gammapy.data.EventListMetaData"]], "construct() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.construct"]], "copy() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.copy"]], "dict() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.dict"]], "from_header() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.from_header"]], "from_orm() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.from_orm"]], "json() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.json"]], "model_computed_fields (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_computed_fields"]], "model_config (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_config"]], "model_construct() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_construct"]], "model_copy() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_copy"]], "model_dump() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_dump"]], "model_dump_json() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_dump_json"]], "model_extra (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_extra"]], "model_fields (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_fields"]], "model_fields_set (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.model_fields_set"]], "model_json_schema() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_parametrized_name"]], "model_post_init() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.model_post_init"]], "model_rebuild() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_rebuild"]], "model_validate() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate"]], "model_validate_json() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate_json"]], "model_validate_strings() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.model_validate_strings"]], "parse_file() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_file"]], "parse_obj() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_obj"]], "parse_raw() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.parse_raw"]], "schema() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.schema"]], "schema_json() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.schema_json"]], "tag (gammapy.data.eventlistmetadata attribute)": [[80, "gammapy.data.EventListMetaData.tag"]], "to_header() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.to_header"]], "to_yaml() (gammapy.data.eventlistmetadata method)": [[80, "gammapy.data.EventListMetaData.to_yaml"]], "update_forward_refs() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.update_forward_refs"]], "validate() (gammapy.data.eventlistmetadata class method)": [[80, "gammapy.data.EventListMetaData.validate"]], "fixedpointinginfo (class in gammapy.data)": [[81, "gammapy.data.FixedPointingInfo"]], "fixed_altaz (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.fixed_altaz"]], "fixed_icrs (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.fixed_icrs"]], "from_fits_header() (gammapy.data.fixedpointinginfo class method)": [[81, "gammapy.data.FixedPointingInfo.from_fits_header"]], "get_altaz() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.get_altaz"]], "get_icrs() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.get_icrs"]], "mode (gammapy.data.fixedpointinginfo attribute)": [[81, "gammapy.data.FixedPointingInfo.mode"]], "read() (gammapy.data.fixedpointinginfo class method)": [[81, "gammapy.data.FixedPointingInfo.read"]], "to_fits_header() (gammapy.data.fixedpointinginfo method)": [[81, "gammapy.data.FixedPointingInfo.to_fits_header"]], "gti (class in gammapy.data)": [[82, "gammapy.data.GTI"]], "copy() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.copy"]], "create() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.create"]], "delete_interval() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.delete_interval"]], "from_stack() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_stack"]], "from_table_hdu() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_table_hdu"]], "from_time_intervals() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.from_time_intervals"]], "group_table() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.group_table"]], "met_start (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.met_start"]], "met_stop (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.met_stop"]], "read() (gammapy.data.gti class method)": [[82, "gammapy.data.GTI.read"]], "select_time() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.select_time"]], "stack() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.stack"]], "time_delta (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_delta"]], "time_intervals (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_intervals"]], "time_ref (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_ref"]], "time_start (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_start"]], "time_stop (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_stop"]], "time_sum (gammapy.data.gti attribute)": [[82, "gammapy.data.GTI.time_sum"]], "to_table_hdu() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.to_table_hdu"]], "union() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.union"]], "write() (gammapy.data.gti method)": [[82, "gammapy.data.GTI.write"]], "columnclass (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.ColumnClass"]], "hduindextable (class in gammapy.data)": [[83, "gammapy.data.HDUIndexTable"]], "valid_hdu_class (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.VALID_HDU_CLASS"]], "valid_hdu_type (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.VALID_HDU_TYPE"]], "add_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_column"]], "add_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_columns"]], "add_index() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_index"]], "add_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.add_row"]], "argsort() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.argsort"]], "as_array() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.as_array"]], "base_dir (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.base_dir"]], "colnames (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.colnames"]], "convert_bytestring_to_unicode() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.convert_bytestring_to_unicode"]], "convert_unicode_to_bytestring() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.convert_unicode_to_bytestring"]], "copy() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.copy"]], "dtype (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.dtype"]], "field() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.field"]], "filled() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.filled"]], "from_pandas() (gammapy.data.hduindextable class method)": [[83, "gammapy.data.HDUIndexTable.from_pandas"]], "group_by() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.group_by"]], "groups (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.groups"]], "has_masked_columns (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_masked_columns"]], "has_masked_values (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_masked_values"]], "has_mixin_columns (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.has_mixin_columns"]], "hdu_class_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.hdu_class_unique"]], "hdu_location() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.hdu_location"]], "hdu_type_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.hdu_type_unique"]], "iloc (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.iloc"]], "index_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.index_column"]], "index_mode() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.index_mode"]], "indices (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.indices"]], "info (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.info"]], "insert_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.insert_row"]], "items() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.items"]], "itercols() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.itercols"]], "iterrows() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.iterrows"]], "keep_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.keep_columns"]], "keys() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.keys"]], "loc (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.loc"]], "loc_indices (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.loc_indices"]], "location_info() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.location_info"]], "mask (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.mask"]], "masked (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.masked"]], "meta (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.meta"]], "more() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.more"]], "obs_id_unique (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.obs_id_unique"]], "pformat() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pformat"]], "pformat_all() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pformat_all"]], "pprint() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pprint"]], "pprint_all() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.pprint_all"]], "pprint_exclude_names (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.pprint_exclude_names"]], "pprint_include_names (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.pprint_include_names"]], "read() (gammapy.data.hduindextable class method)": [[83, "gammapy.data.HDUIndexTable.read"]], "remove_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_column"]], "remove_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_columns"]], "remove_indices() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_indices"]], "remove_row() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_row"]], "remove_rows() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.remove_rows"]], "rename_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.rename_column"]], "rename_columns() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.rename_columns"]], "replace_column() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.replace_column"]], "reverse() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.reverse"]], "round() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.round"]], "row_idx() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.row_idx"]], "show_in_browser() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.show_in_browser"]], "show_in_notebook() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.show_in_notebook"]], "sort() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.sort"]], "summary() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.summary"]], "to_pandas() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.to_pandas"]], "update() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.update"]], "values() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.values"]], "values_equal() (gammapy.data.hduindextable method)": [[83, "gammapy.data.HDUIndexTable.values_equal"]], "write (gammapy.data.hduindextable attribute)": [[83, "gammapy.data.HDUIndexTable.write"]], "observation (class in gammapy.data)": [[84, "gammapy.data.Observation"]], "aeff (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.aeff"]], "available_hdus (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.available_hdus"]], "available_irfs (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.available_irfs"]], "bkg (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.bkg"]], "check() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.check"]], "copy() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.copy"]], "create() (gammapy.data.observation class method)": [[84, "gammapy.data.Observation.create"]], "edisp (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.edisp"]], "events (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.events"]], "get_pointing_altaz() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.get_pointing_altaz"]], "get_pointing_icrs() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.get_pointing_icrs"]], "gti (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.gti"]], "meta (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.meta"]], "muoneff (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.muoneff"]], "obs_info (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.obs_info"]], "observation_dead_time_fraction (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_dead_time_fraction"]], "observation_live_time_duration (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_live_time_duration"]], "observation_time_duration (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observation_time_duration"]], "observatory_earth_location (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.observatory_earth_location"]], "peek() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.peek"]], "pointing (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.pointing"]], "psf (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.psf"]], "rad_max (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.rad_max"]], "read() (gammapy.data.observation class method)": [[84, "gammapy.data.Observation.read"]], "select_time() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.select_time"]], "target_radec (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.target_radec"]], "tmid (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tmid"]], "tstart (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tstart"]], "tstop (gammapy.data.observation attribute)": [[84, "gammapy.data.Observation.tstop"]], "write() (gammapy.data.observation method)": [[84, "gammapy.data.Observation.write"]], "event_filter_types (gammapy.data.observationfilter attribute)": [[85, "gammapy.data.ObservationFilter.EVENT_FILTER_TYPES"]], "observationfilter (class in gammapy.data)": [[85, "gammapy.data.ObservationFilter"]], "copy() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.copy"]], "filter_events() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.filter_events"]], "filter_gti() (gammapy.data.observationfilter method)": [[85, "gammapy.data.ObservationFilter.filter_gti"]], "livetime_fraction (gammapy.data.observationfilter attribute)": [[85, "gammapy.data.ObservationFilter.livetime_fraction"]], "columnclass (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.ColumnClass"]], "observationtable (class in gammapy.data)": [[86, "gammapy.data.ObservationTable"]], "add_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_column"]], "add_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_columns"]], "add_index() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_index"]], "add_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.add_row"]], "argsort() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.argsort"]], "as_array() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.as_array"]], "colnames (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.colnames"]], "convert_bytestring_to_unicode() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.convert_bytestring_to_unicode"]], "convert_unicode_to_bytestring() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.convert_unicode_to_bytestring"]], "copy() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.copy"]], "dtype (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.dtype"]], "field() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.field"]], "filled() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.filled"]], "from_pandas() (gammapy.data.observationtable class method)": [[86, "gammapy.data.ObservationTable.from_pandas"]], "group_by() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.group_by"]], "groups (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.groups"]], "has_masked_columns (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_masked_columns"]], "has_masked_values (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_masked_values"]], "has_mixin_columns (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.has_mixin_columns"]], "iloc (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.iloc"]], "index_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.index_column"]], "index_mode() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.index_mode"]], "indices (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.indices"]], "info (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.info"]], "insert_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.insert_row"]], "items() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.items"]], "itercols() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.itercols"]], "iterrows() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.iterrows"]], "keep_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.keep_columns"]], "keys() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.keys"]], "loc (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.loc"]], "loc_indices (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.loc_indices"]], "mask (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.mask"]], "masked (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.masked"]], "meta (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.meta"]], "more() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.more"]], "pformat() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pformat"]], "pformat_all() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pformat_all"]], "pointing_galactic (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pointing_galactic"]], "pointing_radec (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pointing_radec"]], "pprint() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pprint"]], "pprint_all() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.pprint_all"]], "pprint_exclude_names (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pprint_exclude_names"]], "pprint_include_names (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.pprint_include_names"]], "read() (gammapy.data.observationtable class method)": [[86, "gammapy.data.ObservationTable.read"]], "remove_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_column"]], "remove_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_columns"]], "remove_indices() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_indices"]], "remove_row() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_row"]], "remove_rows() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.remove_rows"]], "rename_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.rename_column"]], "rename_columns() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.rename_columns"]], "replace_column() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.replace_column"]], "reverse() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.reverse"]], "round() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.round"]], "select_obs_id() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_obs_id"]], "select_observations() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_observations"]], "select_range() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_range"]], "select_sky_circle() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_sky_circle"]], "select_time_range() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.select_time_range"]], "show_in_browser() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.show_in_browser"]], "show_in_notebook() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.show_in_notebook"]], "sort() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.sort"]], "summary() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.summary"]], "time_ref (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_ref"]], "time_start (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_start"]], "time_stop (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.time_stop"]], "to_pandas() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.to_pandas"]], "update() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.update"]], "values() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.values"]], "values_equal() (gammapy.data.observationtable method)": [[86, "gammapy.data.ObservationTable.values_equal"]], "write (gammapy.data.observationtable attribute)": [[86, "gammapy.data.ObservationTable.write"]], "observations (class in gammapy.data)": [[87, "gammapy.data.Observations"]], "append() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.append"]], "clear() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.clear"]], "count() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.count"]], "extend() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.extend"]], "from_stack() (gammapy.data.observations class method)": [[87, "gammapy.data.Observations.from_stack"]], "group_by_label() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.group_by_label"]], "ids (gammapy.data.observations attribute)": [[87, "gammapy.data.Observations.ids"]], "in_memory_generator() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.in_memory_generator"]], "index() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.index"]], "insert() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.insert"]], "pop() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.pop"]], "remove() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.remove"]], "reverse() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.reverse"]], "select_time() (gammapy.data.observations method)": [[87, "gammapy.data.Observations.select_time"]], "observationseventssampler (class in gammapy.data)": [[88, "gammapy.data.ObservationsEventsSampler"]], "n_jobs (gammapy.data.observationseventssampler attribute)": [[88, "gammapy.data.ObservationsEventsSampler.n_jobs"]], "parallel_backend (gammapy.data.observationseventssampler attribute)": [[88, "gammapy.data.ObservationsEventsSampler.parallel_backend"]], "run() (gammapy.data.observationseventssampler method)": [[88, "gammapy.data.ObservationsEventsSampler.run"]], "simulate_observation() (gammapy.data.observationseventssampler method)": [[88, "gammapy.data.ObservationsEventsSampler.simulate_observation"]], "pointinginfo (class in gammapy.data)": [[89, "gammapy.data.PointingInfo"]], "altaz (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz"]], "altaz_frame (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz_frame"]], "altaz_from_table (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.altaz_from_table"]], "altaz_interpolate() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.altaz_interpolate"]], "duration (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.duration"]], "get_altaz() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.get_altaz"]], "get_icrs() (gammapy.data.pointinginfo method)": [[89, "gammapy.data.PointingInfo.get_icrs"]], "location (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.location"]], "radec (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.radec"]], "read() (gammapy.data.pointinginfo class method)": [[89, "gammapy.data.PointingInfo.read"]], "time (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.time"]], "time_ref (gammapy.data.pointinginfo attribute)": [[89, "gammapy.data.PointingInfo.time_ref"]], "drift (gammapy.data.pointingmode attribute)": [[90, "gammapy.data.PointingMode.DRIFT"]], "pointing (gammapy.data.pointingmode attribute)": [[90, "gammapy.data.PointingMode.POINTING"]], "pointingmode (class in gammapy.data)": [[90, "gammapy.data.PointingMode"]], "get_irfs_features() (in module gammapy.data)": [[91, "gammapy.data.get_irfs_features"]], "observatory_locations (in module gammapy.data)": [[92, "gammapy.data.observatory_locations"]], "dataset_registry (in module gammapy.datasets)": [[93, "gammapy.datasets.DATASET_REGISTRY"]], "dataset (class in gammapy.datasets)": [[94, "gammapy.datasets.Dataset"]], "copy() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.copy"]], "mask (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.mask"]], "name (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.name"]], "stat_array() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.stat_array"]], "stat_sum() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.stat_sum"]], "tag (gammapy.datasets.dataset attribute)": [[94, "gammapy.datasets.Dataset.tag"]], "to_dict() (gammapy.datasets.dataset method)": [[94, "gammapy.datasets.Dataset.to_dict"]], "datasets (class in gammapy.datasets)": [[95, "gammapy.datasets.Datasets"]], "append() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.append"]], "clear() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.clear"]], "contributes_to_stat (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.contributes_to_stat"]], "copy() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.copy"]], "count() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.count"]], "energy_axes_are_aligned (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.energy_axes_are_aligned"]], "energy_ranges (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.energy_ranges"]], "extend() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.extend"]], "gti (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.gti"]], "index() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.index"]], "info_table() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.info_table"]], "insert() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.insert"]], "is_all_same_energy_shape (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_energy_shape"]], "is_all_same_shape (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_shape"]], "is_all_same_type (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.is_all_same_type"]], "meta_table (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.meta_table"]], "models (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.models"]], "names (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.names"]], "parameters (gammapy.datasets.datasets attribute)": [[95, "gammapy.datasets.Datasets.parameters"]], "pop() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.pop"]], "read() (gammapy.datasets.datasets class method)": [[95, "gammapy.datasets.Datasets.read"]], "remove() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.remove"]], "reverse() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.reverse"]], "select_time() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.select_time"]], "slice_by_energy() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.slice_by_energy"]], "stack_reduce() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.stack_reduce"]], "stat_sum() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.stat_sum"]], "to_spectrum_datasets() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.to_spectrum_datasets"]], "write() (gammapy.datasets.datasets method)": [[95, "gammapy.datasets.Datasets.write"]], "fluxpointsdataset (class in gammapy.datasets)": [[96, "gammapy.datasets.FluxPointsDataset"]], "copy() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.copy"]], "data_shape() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.data_shape"]], "flux_pred() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.flux_pred"]], "from_dict() (gammapy.datasets.fluxpointsdataset class method)": [[96, "gammapy.datasets.FluxPointsDataset.from_dict"]], "gti (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.gti"]], "mask (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.mask"]], "models (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.models"]], "name (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.name"]], "plot_fit() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_fit"]], "plot_residuals() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_residuals"]], "plot_spectrum() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.plot_spectrum"]], "read() (gammapy.datasets.fluxpointsdataset class method)": [[96, "gammapy.datasets.FluxPointsDataset.read"]], "residuals() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.residuals"]], "stat_array() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.stat_array"]], "stat_sum() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.stat_sum"]], "stat_type (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.stat_type"]], "tag (gammapy.datasets.fluxpointsdataset attribute)": [[96, "gammapy.datasets.FluxPointsDataset.tag"]], "to_dict() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.to_dict"]], "write() (gammapy.datasets.fluxpointsdataset method)": [[96, "gammapy.datasets.FluxPointsDataset.write"]], "mapdataset (class in gammapy.datasets)": [[97, "gammapy.datasets.MapDataset"]], "background (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.background"]], "background_model (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.background_model"]], "copy() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.copy"]], "counts (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.counts"]], "create() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.create"]], "cutout() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.cutout"]], "data_shape (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.data_shape"]], "downsample() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.downsample"]], "edisp (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.edisp"]], "energy_range (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range"]], "energy_range_fit (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_fit"]], "energy_range_safe (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_safe"]], "energy_range_total (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.energy_range_total"]], "evaluators (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.evaluators"]], "excess (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.excess"]], "exposure (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.exposure"]], "fake() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.fake"]], "from_dict() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_dict"]], "from_geoms() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_geoms"]], "from_hdulist() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.from_hdulist"]], "geoms (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.geoms"]], "gti (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.gti"]], "info_dict() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.info_dict"]], "mask (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask"]], "mask_fit (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_fit"]], "mask_fit_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_fit_image"]], "mask_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_image"]], "mask_safe (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe"]], "mask_safe_edisp (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.mask_safe_psf"]], "meta (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.meta"]], "meta_table (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.meta_table"]], "models (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.models"]], "name (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.name"]], "npred() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred"]], "npred_background() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred_background"]], "npred_signal() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.npred_signal"]], "pad() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.pad"]], "peek() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.peek"]], "plot_residuals() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.plot_residuals_spectral"]], "psf (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.psf"]], "read() (gammapy.datasets.mapdataset class method)": [[97, "gammapy.datasets.MapDataset.read"]], "resample_energy_axis() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.reset_data_cache"]], "residuals() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.residuals"]], "slice_by_energy() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.slice_by_idx"]], "stack() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stack"]], "stat_array() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stat_array"]], "stat_sum() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.stat_sum"]], "stat_type (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.stat_type"]], "tag (gammapy.datasets.mapdataset attribute)": [[97, "gammapy.datasets.MapDataset.tag"]], "to_dict() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_dict"]], "to_hdulist() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_hdulist"]], "to_image() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_image"]], "to_masked() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_masked"]], "to_region_map_dataset() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.to_spectrum_dataset"]], "write() (gammapy.datasets.mapdataset method)": [[97, "gammapy.datasets.MapDataset.write"]], "mapdataseteventsampler (class in gammapy.datasets)": [[98, "gammapy.datasets.MapDatasetEventSampler"]], "event_det_coords() (gammapy.datasets.mapdataseteventsampler static method)": [[98, "gammapy.datasets.MapDatasetEventSampler.event_det_coords"]], "event_list_meta() (gammapy.datasets.mapdataseteventsampler static method)": [[98, "gammapy.datasets.MapDatasetEventSampler.event_list_meta"]], "run() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.run"]], "sample_background() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_background"]], "sample_edisp() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_edisp"]], "sample_psf() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_psf"]], "sample_sources() (gammapy.datasets.mapdataseteventsampler method)": [[98, "gammapy.datasets.MapDatasetEventSampler.sample_sources"]], "mapdatasetmetadata (class in gammapy.datasets)": [[99, "gammapy.datasets.MapDatasetMetaData"]], "construct() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.construct"]], "copy() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.copy"]], "dict() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.dict"]], "from_header() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.from_header"]], "from_orm() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.from_orm"]], "json() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.json"]], "model_computed_fields (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_computed_fields"]], "model_config (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_config"]], "model_construct() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_construct"]], "model_copy() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_copy"]], "model_dump() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_dump"]], "model_dump_json() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_dump_json"]], "model_extra (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_extra"]], "model_fields (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_fields"]], "model_fields_set (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.model_fields_set"]], "model_json_schema() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_parametrized_name"]], "model_post_init() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_post_init"]], "model_rebuild() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_rebuild"]], "model_validate() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate"]], "model_validate_json() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate_json"]], "model_validate_strings() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.model_validate_strings"]], "parse_file() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_file"]], "parse_obj() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_obj"]], "parse_raw() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.parse_raw"]], "schema() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.schema"]], "schema_json() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.schema_json"]], "stack() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.stack"]], "tag (gammapy.datasets.mapdatasetmetadata attribute)": [[99, "gammapy.datasets.MapDatasetMetaData.tag"]], "to_header() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.to_header"]], "to_yaml() (gammapy.datasets.mapdatasetmetadata method)": [[99, "gammapy.datasets.MapDatasetMetaData.to_yaml"]], "update_forward_refs() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.update_forward_refs"]], "validate() (gammapy.datasets.mapdatasetmetadata class method)": [[99, "gammapy.datasets.MapDatasetMetaData.validate"]], "mapdatasetonoff (class in gammapy.datasets)": [[100, "gammapy.datasets.MapDatasetOnOff"]], "alpha (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.alpha"]], "background (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.background"]], "background_model (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.background_model"]], "copy() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.copy"]], "counts (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.counts"]], "create() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.create"]], "cutout() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.cutout"]], "data_shape (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.data_shape"]], "downsample() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.downsample"]], "edisp (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.edisp"]], "energy_range (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range"]], "energy_range_fit (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_fit"]], "energy_range_safe (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_safe"]], "energy_range_total (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.energy_range_total"]], "evaluators (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.evaluators"]], "excess (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.excess"]], "exposure (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.exposure"]], "fake() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.fake"]], "from_dict() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_dict"]], "from_geoms() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_geoms"]], "from_hdulist() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_hdulist"]], "from_map_dataset() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.from_map_dataset"]], "geoms (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.geoms"]], "gti (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.gti"]], "info_dict() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.info_dict"]], "mask (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask"]], "mask_fit (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_fit"]], "mask_fit_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_fit_image"]], "mask_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_image"]], "mask_safe (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe"]], "mask_safe_edisp (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.mask_safe_psf"]], "meta (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.meta"]], "meta_table (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.meta_table"]], "models (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.models"]], "name (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.name"]], "npred() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred"]], "npred_background() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_background"]], "npred_off() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_off"]], "npred_signal() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.npred_signal"]], "pad() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.pad"]], "peek() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.peek"]], "plot_residuals() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.plot_residuals_spectral"]], "psf (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.psf"]], "read() (gammapy.datasets.mapdatasetonoff class method)": [[100, "gammapy.datasets.MapDatasetOnOff.read"]], "resample_energy_axis() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.reset_data_cache"]], "residuals() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.residuals"]], "slice_by_energy() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.slice_by_idx"]], "stack() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stack"]], "stat_array() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_array"]], "stat_sum() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_sum"]], "stat_type (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.stat_type"]], "tag (gammapy.datasets.mapdatasetonoff attribute)": [[100, "gammapy.datasets.MapDatasetOnOff.tag"]], "to_dict() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_dict"]], "to_hdulist() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_hdulist"]], "to_image() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_image"]], "to_map_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_map_dataset"]], "to_masked() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_masked"]], "to_region_map_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.to_spectrum_dataset"]], "write() (gammapy.datasets.mapdatasetonoff method)": [[100, "gammapy.datasets.MapDatasetOnOff.write"]], "ogipdatasetreader (class in gammapy.datasets)": [[101, "gammapy.datasets.OGIPDatasetReader"]], "get_filenames() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.get_filenames"]], "get_valid_path() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.get_valid_path"]], "read() (gammapy.datasets.ogipdatasetreader method)": [[101, "gammapy.datasets.OGIPDatasetReader.read"]], "read_arf() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_arf"]], "read_bkg() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_bkg"]], "read_pha() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_pha"]], "read_rmf() (gammapy.datasets.ogipdatasetreader static method)": [[101, "gammapy.datasets.OGIPDatasetReader.read_rmf"]], "tag (gammapy.datasets.ogipdatasetreader attribute)": [[101, "gammapy.datasets.OGIPDatasetReader.tag"]], "ogipdatasetwriter (class in gammapy.datasets)": [[102, "gammapy.datasets.OGIPDatasetWriter"]], "get_filenames() (gammapy.datasets.ogipdatasetwriter static method)": [[102, "gammapy.datasets.OGIPDatasetWriter.get_filenames"]], "get_ogip_meta() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.get_ogip_meta"]], "tag (gammapy.datasets.ogipdatasetwriter attribute)": [[102, "gammapy.datasets.OGIPDatasetWriter.tag"]], "to_counts_hdulist() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.to_counts_hdulist"]], "write() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write"]], "write_arf() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_arf"]], "write_bkg() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_bkg"]], "write_pha() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_pha"]], "write_rmf() (gammapy.datasets.ogipdatasetwriter method)": [[102, "gammapy.datasets.OGIPDatasetWriter.write_rmf"]], "observationeventsampler (class in gammapy.datasets)": [[103, "gammapy.datasets.ObservationEventSampler"]], "event_det_coords() (gammapy.datasets.observationeventsampler static method)": [[103, "gammapy.datasets.ObservationEventSampler.event_det_coords"]], "event_list_meta() (gammapy.datasets.observationeventsampler static method)": [[103, "gammapy.datasets.ObservationEventSampler.event_list_meta"]], "run() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.run"]], "sample_background() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_background"]], "sample_edisp() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_edisp"]], "sample_psf() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_psf"]], "sample_sources() (gammapy.datasets.observationeventsampler method)": [[103, "gammapy.datasets.ObservationEventSampler.sample_sources"]], "spectrumdataset (class in gammapy.datasets)": [[104, "gammapy.datasets.SpectrumDataset"]], "background (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.background"]], "background_model (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.background_model"]], "copy() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.copy"]], "counts (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.counts"]], "create() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.create"]], "cutout() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.cutout"]], "data_shape (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.data_shape"]], "downsample() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.downsample"]], "edisp (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.edisp"]], "energy_range (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range"]], "energy_range_fit (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_fit"]], "energy_range_safe (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_safe"]], "energy_range_total (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.energy_range_total"]], "evaluators (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.evaluators"]], "excess (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.excess"]], "exposure (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.exposure"]], "fake() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.fake"]], "from_dict() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_dict"]], "from_geoms() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_geoms"]], "from_hdulist() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.from_hdulist"]], "geoms (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.geoms"]], "gti (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.gti"]], "info_dict() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.info_dict"]], "mask (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask"]], "mask_fit (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_fit"]], "mask_fit_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_fit_image"]], "mask_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_image"]], "mask_safe (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe"]], "mask_safe_edisp (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.mask_safe_psf"]], "meta (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.meta"]], "meta_table (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.meta_table"]], "models (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.models"]], "name (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.name"]], "npred() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred"]], "npred_background() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred_background"]], "npred_signal() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.npred_signal"]], "pad() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.pad"]], "peek() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.peek"]], "plot_counts() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_counts"]], "plot_excess() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_excess"]], "plot_fit() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_fit"]], "plot_masks() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_masks"]], "plot_residuals() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.plot_residuals_spectral"]], "psf (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.psf"]], "read() (gammapy.datasets.spectrumdataset class method)": [[104, "gammapy.datasets.SpectrumDataset.read"]], "resample_energy_axis() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.reset_data_cache"]], "residuals() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.residuals"]], "slice_by_energy() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.slice_by_idx"]], "stack() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stack"]], "stat_array() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stat_array"]], "stat_sum() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.stat_sum"]], "stat_type (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.stat_type"]], "tag (gammapy.datasets.spectrumdataset attribute)": [[104, "gammapy.datasets.SpectrumDataset.tag"]], "to_dict() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_dict"]], "to_hdulist() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_hdulist"]], "to_image() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_image"]], "to_masked() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_masked"]], "to_region_map_dataset() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.to_spectrum_dataset"]], "write() (gammapy.datasets.spectrumdataset method)": [[104, "gammapy.datasets.SpectrumDataset.write"]], "spectrumdatasetonoff (class in gammapy.datasets)": [[105, "gammapy.datasets.SpectrumDatasetOnOff"]], "alpha (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.alpha"]], "background (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.background"]], "background_model (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.background_model"]], "copy() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.copy"]], "counts (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.counts"]], "create() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.create"]], "cutout() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.cutout"]], "data_shape (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.data_shape"]], "downsample() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.downsample"]], "edisp (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.edisp"]], "energy_range (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range"]], "energy_range_fit (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_fit"]], "energy_range_safe (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_safe"]], "energy_range_total (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.energy_range_total"]], "evaluators (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.evaluators"]], "excess (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.excess"]], "exposure (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.exposure"]], "fake() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.fake"]], "from_dict() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_dict"]], "from_geoms() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_geoms"]], "from_hdulist() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_hdulist"]], "from_map_dataset() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_map_dataset"]], "from_spectrum_dataset() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.from_spectrum_dataset"]], "geoms (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.geoms"]], "gti (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.gti"]], "info_dict() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.info_dict"]], "mask (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask"]], "mask_fit (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_fit"]], "mask_fit_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_fit_image"]], "mask_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_image"]], "mask_safe (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe"]], "mask_safe_edisp (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_edisp"]], "mask_safe_image (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_image"]], "mask_safe_psf (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.mask_safe_psf"]], "meta (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.meta"]], "meta_table (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.meta_table"]], "models (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.models"]], "name (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.name"]], "npred() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred"]], "npred_background() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_background"]], "npred_off() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_off"]], "npred_signal() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.npred_signal"]], "pad() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.pad"]], "peek() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.peek"]], "plot_counts() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_counts"]], "plot_excess() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_excess"]], "plot_fit() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_fit"]], "plot_masks() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_masks"]], "plot_residuals() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals"]], "plot_residuals_spatial() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals_spatial"]], "plot_residuals_spectral() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.plot_residuals_spectral"]], "psf (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.psf"]], "read() (gammapy.datasets.spectrumdatasetonoff class method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.read"]], "resample_energy_axis() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.resample_energy_axis"]], "reset_data_cache() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.reset_data_cache"]], "residuals() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.residuals"]], "slice_by_energy() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.slice_by_energy"]], "slice_by_idx() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.slice_by_idx"]], "stack() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stack"]], "stat_array() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_array"]], "stat_sum() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_sum"]], "stat_type (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.stat_type"]], "tag (gammapy.datasets.spectrumdatasetonoff attribute)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.tag"]], "to_dict() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_dict"]], "to_hdulist() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_hdulist"]], "to_image() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_image"]], "to_map_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_map_dataset"]], "to_masked() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_masked"]], "to_region_map_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_region_map_dataset"]], "to_spectrum_dataset() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.to_spectrum_dataset"]], "write() (gammapy.datasets.spectrumdatasetonoff method)": [[105, "gammapy.datasets.SpectrumDatasetOnOff.write"]], "create_map_dataset_from_observation() (in module gammapy.datasets)": [[106, "gammapy.datasets.create_map_dataset_from_observation"]], "create_map_dataset_geoms() (in module gammapy.datasets)": [[107, "gammapy.datasets.create_map_dataset_geoms"]], "asmoothmapestimator (class in gammapy.estimators)": [[108, "gammapy.estimators.ASmoothMapEstimator"]], "config_parameters (gammapy.estimators.asmoothmapestimator attribute)": [[108, "gammapy.estimators.ASmoothMapEstimator.config_parameters"]], "copy() (gammapy.estimators.asmoothmapestimator method)": [[108, "gammapy.estimators.ASmoothMapEstimator.copy"]], "estimate_maps() (gammapy.estimators.asmoothmapestimator method)": [[108, "gammapy.estimators.ASmoothMapEstimator.estimate_maps"]], "get_kernels() (gammapy.estimators.asmoothmapestimator method)": [[108, "gammapy.estimators.ASmoothMapEstimator.get_kernels"]], "get_scales() (gammapy.estimators.asmoothmapestimator static method)": [[108, "gammapy.estimators.ASmoothMapEstimator.get_scales"]], "run() (gammapy.estimators.asmoothmapestimator method)": [[108, "gammapy.estimators.ASmoothMapEstimator.run"]], "selection_all() (gammapy.estimators.asmoothmapestimator method)": [[108, "gammapy.estimators.ASmoothMapEstimator.selection_all"]], "selection_optional (gammapy.estimators.asmoothmapestimator attribute)": [[108, "gammapy.estimators.ASmoothMapEstimator.selection_optional"]], "tag (gammapy.estimators.asmoothmapestimator attribute)": [[108, "gammapy.estimators.ASmoothMapEstimator.tag"]], "estimator_registry (in module gammapy.estimators)": [[109, "gammapy.estimators.ESTIMATOR_REGISTRY"]], "energydependentmorphologyestimator (class in gammapy.estimators)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator"]], "config_parameters (gammapy.estimators.energydependentmorphologyestimator attribute)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.config_parameters"]], "copy() (gammapy.estimators.energydependentmorphologyestimator method)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.copy"]], "estimate_energy_dependence() (gammapy.estimators.energydependentmorphologyestimator method)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.estimate_energy_dependence"]], "run() (gammapy.estimators.energydependentmorphologyestimator method)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.run"]], "selection_optional (gammapy.estimators.energydependentmorphologyestimator attribute)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.selection_optional"]], "tag (gammapy.estimators.energydependentmorphologyestimator attribute)": [[110, "gammapy.estimators.EnergyDependentMorphologyEstimator.tag"]], "estimator (class in gammapy.estimators)": [[111, "gammapy.estimators.Estimator"]], "config_parameters (gammapy.estimators.estimator attribute)": [[111, "gammapy.estimators.Estimator.config_parameters"]], "copy() (gammapy.estimators.estimator method)": [[111, "gammapy.estimators.Estimator.copy"]], "run() (gammapy.estimators.estimator method)": [[111, "gammapy.estimators.Estimator.run"]], "selection_optional (gammapy.estimators.estimator attribute)": [[111, "gammapy.estimators.Estimator.selection_optional"]], "tag (gammapy.estimators.estimator attribute)": [[111, "gammapy.estimators.Estimator.tag"]], "excessmapestimator (class in gammapy.estimators)": [[112, "gammapy.estimators.ExcessMapEstimator"]], "config_parameters (gammapy.estimators.excessmapestimator attribute)": [[112, "gammapy.estimators.ExcessMapEstimator.config_parameters"]], "copy() (gammapy.estimators.excessmapestimator method)": [[112, "gammapy.estimators.ExcessMapEstimator.copy"]], "correlation_radius (gammapy.estimators.excessmapestimator attribute)": [[112, "gammapy.estimators.ExcessMapEstimator.correlation_radius"]], "estimate_excess_map() (gammapy.estimators.excessmapestimator method)": [[112, "gammapy.estimators.ExcessMapEstimator.estimate_excess_map"]], "estimate_exposure_reco_energy() (gammapy.estimators.excessmapestimator method)": [[112, "gammapy.estimators.ExcessMapEstimator.estimate_exposure_reco_energy"]], "estimate_kernel() (gammapy.estimators.excessmapestimator method)": [[112, "gammapy.estimators.ExcessMapEstimator.estimate_kernel"]], "estimate_mask_default() (gammapy.estimators.excessmapestimator static method)": [[112, "gammapy.estimators.ExcessMapEstimator.estimate_mask_default"]], "run() (gammapy.estimators.excessmapestimator method)": [[112, "gammapy.estimators.ExcessMapEstimator.run"]], "selection_optional (gammapy.estimators.excessmapestimator attribute)": [[112, "gammapy.estimators.ExcessMapEstimator.selection_optional"]], "tag (gammapy.estimators.excessmapestimator attribute)": [[112, "gammapy.estimators.ExcessMapEstimator.tag"]], "fluxmaps (class in gammapy.estimators)": [[113, "gammapy.estimators.FluxMaps"]], "all_quantities() (gammapy.estimators.fluxmaps static method)": [[113, "gammapy.estimators.FluxMaps.all_quantities"]], "available_quantities (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.available_quantities"]], "counts (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.counts"]], "dnde (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde"]], "dnde_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde_err"]], "dnde_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde_errn"]], "dnde_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde_errp"]], "dnde_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde_ref"]], "dnde_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.dnde_ul"]], "e2dnde (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde"]], "e2dnde_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde_err"]], "e2dnde_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde_errn"]], "e2dnde_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde_errp"]], "e2dnde_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde_ref"]], "e2dnde_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.e2dnde_ul"]], "eflux (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux"]], "eflux_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux_err"]], "eflux_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux_errn"]], "eflux_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux_errp"]], "eflux_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux_ref"]], "eflux_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.eflux_ul"]], "energy_axis (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.energy_axis"]], "energy_max (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.energy_max"]], "energy_min (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.energy_min"]], "energy_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.energy_ref"]], "filter_success_nan (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.filter_success_nan"]], "flux (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux"]], "flux_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_err"]], "flux_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_errn"]], "flux_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_errp"]], "flux_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_ref"]], "flux_sensitivity (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_sensitivity"]], "flux_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.flux_ul"]], "from_hdulist() (gammapy.estimators.fluxmaps class method)": [[113, "gammapy.estimators.FluxMaps.from_hdulist"]], "from_maps() (gammapy.estimators.fluxmaps class method)": [[113, "gammapy.estimators.FluxMaps.from_maps"]], "from_stack() (gammapy.estimators.fluxmaps class method)": [[113, "gammapy.estimators.FluxMaps.from_stack"]], "geom (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.geom"]], "get_flux_points() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.get_flux_points"]], "has_any_ts (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.has_any_ts"]], "has_stat_profiles (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.has_stat_profiles"]], "has_success (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.has_success"]], "has_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.has_ul"]], "is_convertible_to_flux_sed_type (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.is_convertible_to_flux_sed_type"]], "is_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.is_ul"]], "iter_by_axis() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.iter_by_axis"]], "n_dof (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.n_dof"]], "n_sigma (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.n_sigma"]], "n_sigma_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.n_sigma_ul"]], "niter (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.niter"]], "norm (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm"]], "norm_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm_err"]], "norm_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm_errn"]], "norm_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm_errp"]], "norm_sensitivity (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm_sensitivity"]], "norm_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.norm_ul"]], "npred (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred"]], "npred_background (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_background"]], "npred_excess (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess"]], "npred_excess_err (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess_err"]], "npred_excess_errn (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess_errn"]], "npred_excess_errp (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess_errp"]], "npred_excess_ref (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess_ref"]], "npred_excess_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.npred_excess_ul"]], "read() (gammapy.estimators.fluxmaps class method)": [[113, "gammapy.estimators.FluxMaps.read"]], "reference_model (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.reference_model"]], "reference_model_default (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.reference_model_default"]], "reference_spectral_model (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.reference_spectral_model"]], "sed_type_init (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.sed_type_init"]], "sed_type_plot_default (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.sed_type_plot_default"]], "slice_by_coord() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.slice_by_coord"]], "slice_by_energy() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.slice_by_energy"]], "slice_by_idx() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.slice_by_idx"]], "slice_by_time() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.slice_by_time"]], "sqrt_ts (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.sqrt_ts"]], "sqrt_ts_threshold_ul (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.sqrt_ts_threshold_ul"]], "stat (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.stat"]], "stat_null (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.stat_null"]], "stat_scan (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.stat_scan"]], "success (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.success"]], "to_hdulist() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.to_hdulist"]], "to_maps() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.to_maps"]], "ts (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.ts"]], "ts_scan (gammapy.estimators.fluxmaps attribute)": [[113, "gammapy.estimators.FluxMaps.ts_scan"]], "write() (gammapy.estimators.fluxmaps method)": [[113, "gammapy.estimators.FluxMaps.write"]], "fluxmetadata (class in gammapy.estimators)": [[114, "gammapy.estimators.FluxMetaData"]], "construct() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.construct"]], "copy() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.copy"]], "dict() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.dict"]], "from_header() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.from_header"]], "from_orm() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.from_orm"]], "json() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.json"]], "model_computed_fields (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.model_computed_fields"]], "model_config (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.model_config"]], "model_construct() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_construct"]], "model_copy() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.model_copy"]], "model_dump() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.model_dump"]], "model_dump_json() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.model_dump_json"]], "model_extra (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.model_extra"]], "model_fields (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.model_fields"]], "model_fields_set (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.model_fields_set"]], "model_json_schema() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_json_schema"]], "model_parametrized_name() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_parametrized_name"]], "model_post_init() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.model_post_init"]], "model_rebuild() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_rebuild"]], "model_validate() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_validate"]], "model_validate_json() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_validate_json"]], "model_validate_strings() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.model_validate_strings"]], "parse_file() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.parse_file"]], "parse_obj() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.parse_obj"]], "parse_raw() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.parse_raw"]], "schema() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.schema"]], "schema_json() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.schema_json"]], "tag (gammapy.estimators.fluxmetadata attribute)": [[114, "gammapy.estimators.FluxMetaData.tag"]], "to_header() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.to_header"]], "to_yaml() (gammapy.estimators.fluxmetadata method)": [[114, "gammapy.estimators.FluxMetaData.to_yaml"]], "update_forward_refs() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.update_forward_refs"]], "validate() (gammapy.estimators.fluxmetadata class method)": [[114, "gammapy.estimators.FluxMetaData.validate"]], "fluxpoints (class in gammapy.estimators)": [[115, "gammapy.estimators.FluxPoints"]], "all_quantities() (gammapy.estimators.fluxpoints static method)": [[115, "gammapy.estimators.FluxPoints.all_quantities"]], "available_quantities (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.available_quantities"]], "counts (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.counts"]], "dnde (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde"]], "dnde_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde_err"]], "dnde_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde_errn"]], "dnde_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde_errp"]], "dnde_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde_ref"]], "dnde_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.dnde_ul"]], "e2dnde (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde"]], "e2dnde_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde_err"]], "e2dnde_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde_errn"]], "e2dnde_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde_errp"]], "e2dnde_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde_ref"]], "e2dnde_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.e2dnde_ul"]], "eflux (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux"]], "eflux_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux_err"]], "eflux_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux_errn"]], "eflux_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux_errp"]], "eflux_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux_ref"]], "eflux_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.eflux_ul"]], "energy_axis (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.energy_axis"]], "energy_max (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.energy_max"]], "energy_min (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.energy_min"]], "energy_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.energy_ref"]], "filter_success_nan (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.filter_success_nan"]], "flux (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux"]], "flux_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_err"]], "flux_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_errn"]], "flux_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_errp"]], "flux_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_ref"]], "flux_sensitivity (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_sensitivity"]], "flux_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.flux_ul"]], "from_hdulist() (gammapy.estimators.fluxpoints class method)": [[115, "gammapy.estimators.FluxPoints.from_hdulist"]], "from_maps() (gammapy.estimators.fluxpoints class method)": [[115, "gammapy.estimators.FluxPoints.from_maps"]], "from_stack() (gammapy.estimators.fluxpoints class method)": [[115, "gammapy.estimators.FluxPoints.from_stack"]], "from_table() (gammapy.estimators.fluxpoints class method)": [[115, "gammapy.estimators.FluxPoints.from_table"]], "geom (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.geom"]], "get_flux_points() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.get_flux_points"]], "has_any_ts (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.has_any_ts"]], "has_stat_profiles (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.has_stat_profiles"]], "has_success (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.has_success"]], "has_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.has_ul"]], "is_convertible_to_flux_sed_type (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.is_convertible_to_flux_sed_type"]], "is_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.is_ul"]], "iter_by_axis() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.iter_by_axis"]], "n_dof (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.n_dof"]], "n_sigma (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.n_sigma"]], "n_sigma_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.n_sigma_ul"]], "niter (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.niter"]], "norm (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm"]], "norm_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm_err"]], "norm_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm_errn"]], "norm_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm_errp"]], "norm_sensitivity (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm_sensitivity"]], "norm_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.norm_ul"]], "npred (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred"]], "npred_background (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_background"]], "npred_excess (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess"]], "npred_excess_err (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess_err"]], "npred_excess_errn (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess_errn"]], "npred_excess_errp (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess_errp"]], "npred_excess_ref (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess_ref"]], "npred_excess_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.npred_excess_ul"]], "plot() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.plot"]], "plot_ts_profiles() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.plot_ts_profiles"]], "read() (gammapy.estimators.fluxpoints class method)": [[115, "gammapy.estimators.FluxPoints.read"]], "recompute_ul() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.recompute_ul"]], "reference_model (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.reference_model"]], "reference_model_default (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.reference_model_default"]], "reference_spectral_model (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.reference_spectral_model"]], "resample_axis() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.resample_axis"]], "sed_type_init (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.sed_type_init"]], "sed_type_plot_default (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.sed_type_plot_default"]], "slice_by_coord() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.slice_by_coord"]], "slice_by_energy() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.slice_by_energy"]], "slice_by_idx() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.slice_by_idx"]], "slice_by_time() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.slice_by_time"]], "sqrt_ts (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.sqrt_ts"]], "sqrt_ts_threshold_ul (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.sqrt_ts_threshold_ul"]], "stat (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.stat"]], "stat_null (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.stat_null"]], "stat_scan (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.stat_scan"]], "success (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.success"]], "to_hdulist() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.to_hdulist"]], "to_maps() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.to_maps"]], "to_table() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.to_table"]], "ts (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.ts"]], "ts_scan (gammapy.estimators.fluxpoints attribute)": [[115, "gammapy.estimators.FluxPoints.ts_scan"]], "write() (gammapy.estimators.fluxpoints method)": [[115, "gammapy.estimators.FluxPoints.write"]], "fluxpointsestimator (class in gammapy.estimators)": [[116, "gammapy.estimators.FluxPointsEstimator"]], "config_parameters (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.config_parameters"]], "copy() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.fluxpointsestimator static method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.fluxpointsestimator static method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.estimate_ul"]], "get_scale_model() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.n_jobs"]], "norm_max (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.norm_max"]], "norm_min (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.norm_min"]], "norm_n_values (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.norm_n_values"]], "norm_values (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.norm_values"]], "parallel_backend (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.parallel_backend"]], "run() (gammapy.estimators.fluxpointsestimator method)": [[116, "gammapy.estimators.FluxPointsEstimator.run"]], "selection_optional (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.selection_optional"]], "tag (gammapy.estimators.fluxpointsestimator attribute)": [[116, "gammapy.estimators.FluxPointsEstimator.tag"]], "fluxprofileestimator (class in gammapy.estimators)": [[117, "gammapy.estimators.FluxProfileEstimator"]], "config_parameters (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.config_parameters"]], "copy() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.fluxprofileestimator static method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.fluxprofileestimator static method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.estimate_ul"]], "get_scale_model() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.n_jobs"]], "norm_max (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.norm_max"]], "norm_min (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.norm_min"]], "norm_n_values (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.norm_n_values"]], "norm_values (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.norm_values"]], "parallel_backend (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.parallel_backend"]], "projected_distance_axis (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.projected_distance_axis"]], "run() (gammapy.estimators.fluxprofileestimator method)": [[117, "gammapy.estimators.FluxProfileEstimator.run"]], "selection_optional (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.selection_optional"]], "tag (gammapy.estimators.fluxprofileestimator attribute)": [[117, "gammapy.estimators.FluxProfileEstimator.tag"]], "imageprofile (class in gammapy.estimators)": [[118, "gammapy.estimators.ImageProfile"]], "normalize() (gammapy.estimators.imageprofile method)": [[118, "gammapy.estimators.ImageProfile.normalize"]], "peek() (gammapy.estimators.imageprofile method)": [[118, "gammapy.estimators.ImageProfile.peek"]], "plot() (gammapy.estimators.imageprofile method)": [[118, "gammapy.estimators.ImageProfile.plot"]], "plot_err() (gammapy.estimators.imageprofile method)": [[118, "gammapy.estimators.ImageProfile.plot_err"]], "profile (gammapy.estimators.imageprofile attribute)": [[118, "gammapy.estimators.ImageProfile.profile"]], "profile_err (gammapy.estimators.imageprofile attribute)": [[118, "gammapy.estimators.ImageProfile.profile_err"]], "smooth() (gammapy.estimators.imageprofile method)": [[118, "gammapy.estimators.ImageProfile.smooth"]], "x_max (gammapy.estimators.imageprofile attribute)": [[118, "gammapy.estimators.ImageProfile.x_max"]], "x_min (gammapy.estimators.imageprofile attribute)": [[118, "gammapy.estimators.ImageProfile.x_min"]], "x_ref (gammapy.estimators.imageprofile attribute)": [[118, "gammapy.estimators.ImageProfile.x_ref"]], "imageprofileestimator (class in gammapy.estimators)": [[119, "gammapy.estimators.ImageProfileEstimator"]], "config_parameters (gammapy.estimators.imageprofileestimator attribute)": [[119, "gammapy.estimators.ImageProfileEstimator.config_parameters"]], "copy() (gammapy.estimators.imageprofileestimator method)": [[119, "gammapy.estimators.ImageProfileEstimator.copy"]], "run() (gammapy.estimators.imageprofileestimator method)": [[119, "gammapy.estimators.ImageProfileEstimator.run"]], "selection_optional (gammapy.estimators.imageprofileestimator attribute)": [[119, "gammapy.estimators.ImageProfileEstimator.selection_optional"]], "tag (gammapy.estimators.imageprofileestimator attribute)": [[119, "gammapy.estimators.ImageProfileEstimator.tag"]], "lightcurveestimator (class in gammapy.estimators)": [[120, "gammapy.estimators.LightCurveEstimator"]], "config_parameters (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.config_parameters"]], "copy() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.lightcurveestimator static method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_errn_errp"]], "estimate_flux_point() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_flux_point"]], "estimate_npred() (gammapy.estimators.lightcurveestimator static method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_npred"]], "estimate_npred_excess() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_npred_excess"]], "estimate_scan() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_scan"]], "estimate_time_bin_flux() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_time_bin_flux"]], "estimate_ts() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.estimate_ul"]], "expand_map() (gammapy.estimators.lightcurveestimator static method)": [[120, "gammapy.estimators.LightCurveEstimator.expand_map"]], "get_scale_model() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.get_scale_model"]], "n_jobs (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.n_jobs"]], "norm_max (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.norm_max"]], "norm_min (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.norm_min"]], "norm_n_values (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.norm_n_values"]], "norm_values (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.norm_values"]], "parallel_backend (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.parallel_backend"]], "run() (gammapy.estimators.lightcurveestimator method)": [[120, "gammapy.estimators.LightCurveEstimator.run"]], "selection_optional (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.selection_optional"]], "tag (gammapy.estimators.lightcurveestimator attribute)": [[120, "gammapy.estimators.LightCurveEstimator.tag"]], "parameterestimator (class in gammapy.estimators)": [[121, "gammapy.estimators.ParameterEstimator"]], "config_parameters (gammapy.estimators.parameterestimator attribute)": [[121, "gammapy.estimators.ParameterEstimator.config_parameters"]], "copy() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.copy"]], "estimate_best_fit() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_best_fit"]], "estimate_counts() (gammapy.estimators.parameterestimator static method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_counts"]], "estimate_errn_errp() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_errn_errp"]], "estimate_npred() (gammapy.estimators.parameterestimator static method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_npred"]], "estimate_scan() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_scan"]], "estimate_ts() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_ts"]], "estimate_ul() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.estimate_ul"]], "run() (gammapy.estimators.parameterestimator method)": [[121, "gammapy.estimators.ParameterEstimator.run"]], "selection_optional (gammapy.estimators.parameterestimator attribute)": [[121, "gammapy.estimators.ParameterEstimator.selection_optional"]], "tag (gammapy.estimators.parameterestimator attribute)": [[121, "gammapy.estimators.ParameterEstimator.tag"]], "sensitivityestimator (class in gammapy.estimators)": [[122, "gammapy.estimators.SensitivityEstimator"]], "config_parameters (gammapy.estimators.sensitivityestimator attribute)": [[122, "gammapy.estimators.SensitivityEstimator.config_parameters"]], "copy() (gammapy.estimators.sensitivityestimator method)": [[122, "gammapy.estimators.SensitivityEstimator.copy"]], "estimate_min_e2dnde() (gammapy.estimators.sensitivityestimator method)": [[122, "gammapy.estimators.SensitivityEstimator.estimate_min_e2dnde"]], "estimate_min_excess() (gammapy.estimators.sensitivityestimator method)": [[122, "gammapy.estimators.SensitivityEstimator.estimate_min_excess"]], "run() (gammapy.estimators.sensitivityestimator method)": [[122, "gammapy.estimators.SensitivityEstimator.run"]], "selection_optional (gammapy.estimators.sensitivityestimator attribute)": [[122, "gammapy.estimators.SensitivityEstimator.selection_optional"]], "tag (gammapy.estimators.sensitivityestimator attribute)": [[122, "gammapy.estimators.SensitivityEstimator.tag"]], "tsmapestimator (class in gammapy.estimators)": [[123, "gammapy.estimators.TSMapEstimator"]], "config_parameters (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.config_parameters"]], "copy() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.copy"]], "estimate_fit_input_maps() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_fit_input_maps"]], "estimate_flux_default() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_flux_default"]], "estimate_flux_map() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_flux_map"]], "estimate_kernel() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_kernel"]], "estimate_mask_default() (gammapy.estimators.tsmapestimator static method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_mask_default"]], "estimate_pad_width() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.estimate_pad_width"]], "n_jobs (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.n_jobs"]], "parallel_backend (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.parallel_backend"]], "run() (gammapy.estimators.tsmapestimator method)": [[123, "gammapy.estimators.TSMapEstimator.run"]], "selection_all (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.selection_all"]], "selection_optional (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.selection_optional"]], "tag (gammapy.estimators.tsmapestimator attribute)": [[123, "gammapy.estimators.TSMapEstimator.tag"]], "compute_lightcurve_doublingtime() (in module gammapy.estimators.utils)": [[124, "gammapy.estimators.utils.compute_lightcurve_doublingtime"]], "compute_lightcurve_fpp() (in module gammapy.estimators.utils)": [[125, "gammapy.estimators.utils.compute_lightcurve_fpp"]], "compute_lightcurve_fvar() (in module gammapy.estimators.utils)": [[126, "gammapy.estimators.utils.compute_lightcurve_fvar"]], "estimate_exposure_reco_energy() (in module gammapy.estimators.utils)": [[127, "gammapy.estimators.utils.estimate_exposure_reco_energy"]], "find_peaks() (in module gammapy.estimators.utils)": [[128, "gammapy.estimators.utils.find_peaks"]], "find_peaks_in_flux_map() (in module gammapy.estimators.utils)": [[129, "gammapy.estimators.utils.find_peaks_in_flux_map"]], "get_rebinned_axis() (in module gammapy.estimators.utils)": [[130, "gammapy.estimators.utils.get_rebinned_axis"]], "resample_energy_edges() (in module gammapy.estimators.utils)": [[131, "gammapy.estimators.utils.resample_energy_edges"]], "background2d (class in gammapy.irf)": [[132, "gammapy.irf.Background2D"]], "axes (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.axes"]], "cumsum() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.cumsum"]], "data (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.data"]], "default_interp_kwargs (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.default_interp_kwargs"]], "default_unit (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.default_unit"]], "evaluate() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.evaluate"]], "fov_alignment (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.fov_alignment"]], "from_hdulist() (gammapy.irf.background2d class method)": [[132, "gammapy.irf.Background2D.from_hdulist"]], "from_table() (gammapy.irf.background2d class method)": [[132, "gammapy.irf.Background2D.from_table"]], "has_offset_axis (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.has_offset_axis"]], "integral() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.integral"]], "integrate_log_log() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.interp_missing_data"]], "is_allclose() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.is_allclose"]], "is_pointlike (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.is_pointlike"]], "normalize() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.normalize"]], "pad() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.pad"]], "peek() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.peek"]], "plot() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.plot"]], "plot_at_energy() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.plot_at_energy"]], "plot_energy_dependence() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.plot_energy_dependence"]], "plot_offset_dependence() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.plot_offset_dependence"]], "plot_spectrum() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.plot_spectrum"]], "quantity (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.quantity"]], "read() (gammapy.irf.background2d class method)": [[132, "gammapy.irf.Background2D.read"]], "required_axes (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.required_axes"]], "slice_by_idx() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.slice_by_idx"]], "tag (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.tag"]], "to_3d() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.to_3d"]], "to_hdulist() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.to_hdulist"]], "to_table() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.to_table"]], "to_table_hdu() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.to_table_hdu"]], "to_unit() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.to_unit"]], "unit (gammapy.irf.background2d attribute)": [[132, "gammapy.irf.Background2D.unit"]], "write() (gammapy.irf.background2d method)": [[132, "gammapy.irf.Background2D.write"]], "background3d (class in gammapy.irf)": [[133, "gammapy.irf.Background3D"]], "axes (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.axes"]], "cumsum() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.cumsum"]], "data (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.data"]], "default_interp_kwargs (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.default_interp_kwargs"]], "default_unit (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.default_unit"]], "evaluate() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.evaluate"]], "fov_alignment (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.fov_alignment"]], "from_hdulist() (gammapy.irf.background3d class method)": [[133, "gammapy.irf.Background3D.from_hdulist"]], "from_table() (gammapy.irf.background3d class method)": [[133, "gammapy.irf.Background3D.from_table"]], "has_offset_axis (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.has_offset_axis"]], "integral() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.integral"]], "integrate_log_log() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.interp_missing_data"]], "is_allclose() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.is_allclose"]], "is_pointlike (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.is_pointlike"]], "normalize() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.normalize"]], "pad() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.pad"]], "peek() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.peek"]], "plot_at_energy() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.plot_at_energy"]], "quantity (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.quantity"]], "read() (gammapy.irf.background3d class method)": [[133, "gammapy.irf.Background3D.read"]], "required_axes (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.required_axes"]], "slice_by_idx() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.slice_by_idx"]], "tag (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.tag"]], "to_2d() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.to_2d"]], "to_hdulist() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.to_hdulist"]], "to_table() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.to_table"]], "to_table_hdu() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.to_table_hdu"]], "to_unit() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.to_unit"]], "unit (gammapy.irf.background3d attribute)": [[133, "gammapy.irf.Background3D.unit"]], "write() (gammapy.irf.background3d method)": [[133, "gammapy.irf.Background3D.write"]], "backgroundirf (class in gammapy.irf)": [[134, "gammapy.irf.BackgroundIRF"]], "axes (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.axes"]], "cumsum() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.cumsum"]], "data (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.data"]], "default_interp_kwargs (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.default_interp_kwargs"]], "evaluate() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.evaluate"]], "fov_alignment (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.fov_alignment"]], "from_hdulist() (gammapy.irf.backgroundirf class method)": [[134, "gammapy.irf.BackgroundIRF.from_hdulist"]], "from_table() (gammapy.irf.backgroundirf class method)": [[134, "gammapy.irf.BackgroundIRF.from_table"]], "has_offset_axis (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.has_offset_axis"]], "integral() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.integral"]], "integrate_log_log() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.interp_missing_data"]], "is_allclose() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.is_allclose"]], "is_pointlike (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.is_pointlike"]], "normalize() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.normalize"]], "pad() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.pad"]], "quantity (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.quantity"]], "read() (gammapy.irf.backgroundirf class method)": [[134, "gammapy.irf.BackgroundIRF.read"]], "required_axes (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.required_axes"]], "slice_by_idx() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.slice_by_idx"]], "tag (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.tag"]], "to_hdulist() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.to_hdulist"]], "to_table() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.to_table"]], "to_table_hdu() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.to_table_hdu"]], "to_unit() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.to_unit"]], "unit (gammapy.irf.backgroundirf attribute)": [[134, "gammapy.irf.BackgroundIRF.unit"]], "write() (gammapy.irf.backgroundirf method)": [[134, "gammapy.irf.BackgroundIRF.write"]], "edispkernel (class in gammapy.irf)": [[135, "gammapy.irf.EDispKernel"]], "axes (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.axes"]], "cumsum() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.cumsum"]], "data (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.data"]], "default_interp_kwargs (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.default_interp_kwargs"]], "evaluate() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.evaluate"]], "fov_alignment (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.fov_alignment"]], "from_diagonal_response() (gammapy.irf.edispkernel class method)": [[135, "gammapy.irf.EDispKernel.from_diagonal_response"]], "from_gauss() (gammapy.irf.edispkernel class method)": [[135, "gammapy.irf.EDispKernel.from_gauss"]], "from_hdulist() (gammapy.irf.edispkernel class method)": [[135, "gammapy.irf.EDispKernel.from_hdulist"]], "from_table() (gammapy.irf.edispkernel class method)": [[135, "gammapy.irf.EDispKernel.from_table"]], "get_bias() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.get_bias"]], "get_bias_energy() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.get_bias_energy"]], "get_mean() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.get_mean"]], "get_resolution() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.get_resolution"]], "has_offset_axis (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.has_offset_axis"]], "integral() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.integral"]], "integrate_log_log() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.integrate_log_log"]], "interp_missing_data() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.interp_missing_data"]], "is_allclose() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.is_allclose"]], "is_pointlike (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.is_pointlike"]], "normalize() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.normalize"]], "pad() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.pad"]], "pdf_in_safe_range() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.pdf_in_safe_range"]], "pdf_matrix (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.pdf_matrix"]], "peek() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.peek"]], "plot_bias() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.plot_bias"]], "plot_matrix() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.plot_matrix"]], "quantity (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.quantity"]], "read() (gammapy.irf.edispkernel class method)": [[135, "gammapy.irf.EDispKernel.read"]], "required_axes (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.required_axes"]], "slice_by_idx() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.slice_by_idx"]], "tag (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.tag"]], "to_hdulist() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.to_hdulist"]], "to_image() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.to_image"]], "to_table() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.to_table"]], "to_table_hdu() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.to_table_hdu"]], "to_unit() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.to_unit"]], "unit (gammapy.irf.edispkernel attribute)": [[135, "gammapy.irf.EDispKernel.unit"]], "write() (gammapy.irf.edispkernel method)": [[135, "gammapy.irf.EDispKernel.write"]], "edispkernelmap (class in gammapy.irf)": [[136, "gammapy.irf.EDispKernelMap"]], "copy() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.copy"]], "cutout() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.cutout"]], "downsample() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.downsample"]], "edisp_map (gammapy.irf.edispkernelmap attribute)": [[136, "gammapy.irf.EDispKernelMap.edisp_map"]], "from_diagonal_response() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.from_diagonal_response"]], "from_edisp_kernel() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.from_edisp_kernel"]], "from_gauss() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.from_gauss"]], "from_geom() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.from_geom"]], "from_hdulist() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.from_hdulist"]], "get_edisp_kernel() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.get_edisp_kernel"]], "mask_safe_image (gammapy.irf.edispkernelmap attribute)": [[136, "gammapy.irf.EDispKernelMap.mask_safe_image"]], "peek() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.peek"]], "read() (gammapy.irf.edispkernelmap class method)": [[136, "gammapy.irf.EDispKernelMap.read"]], "required_axes (gammapy.irf.edispkernelmap attribute)": [[136, "gammapy.irf.EDispKernelMap.required_axes"]], "resample_energy_axis() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.resample_energy_axis"]], "slice_by_idx() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.slice_by_idx"]], "stack() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.stack"]], "tag (gammapy.irf.edispkernelmap attribute)": [[136, "gammapy.irf.EDispKernelMap.tag"]], "to_hdulist() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.to_hdulist"]], "to_image() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.to_image"]], "to_region_nd_map() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.to_region_nd_map"]], "write() (gammapy.irf.edispkernelmap method)": [[136, "gammapy.irf.EDispKernelMap.write"]], "edispmap (class in gammapy.irf)": [[137, "gammapy.irf.EDispMap"]], "copy() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.copy"]], "cutout() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.cutout"]], "downsample() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.downsample"]], "edisp_map (gammapy.irf.edispmap attribute)": [[137, "gammapy.irf.EDispMap.edisp_map"]], "from_diagonal_response() (gammapy.irf.edispmap class method)": [[137, "gammapy.irf.EDispMap.from_diagonal_response"]], "from_geom() (gammapy.irf.edispmap class method)": [[137, "gammapy.irf.EDispMap.from_geom"]], "from_hdulist() (gammapy.irf.edispmap class method)": [[137, "gammapy.irf.EDispMap.from_hdulist"]], "get_edisp_kernel() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.get_edisp_kernel"]], "mask_safe_image (gammapy.irf.edispmap attribute)": [[137, "gammapy.irf.EDispMap.mask_safe_image"]], "normalize() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.normalize"]], "peek() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.peek"]], "read() (gammapy.irf.edispmap class method)": [[137, "gammapy.irf.EDispMap.read"]], "required_axes (gammapy.irf.edispmap attribute)": [[137, "gammapy.irf.EDispMap.required_axes"]], "sample_coord() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.sample_coord"]], "slice_by_idx() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.slice_by_idx"]], "stack() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.stack"]], "tag (gammapy.irf.edispmap attribute)": [[137, "gammapy.irf.EDispMap.tag"]], "to_edisp_kernel_map() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.to_edisp_kernel_map"]], "to_hdulist() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.to_hdulist"]], "to_region_nd_map() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.to_region_nd_map"]], "write() (gammapy.irf.edispmap method)": [[137, "gammapy.irf.EDispMap.write"]], "effectiveareatable2d (class in gammapy.irf)": [[138, "gammapy.irf.EffectiveAreaTable2D"]], "axes (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.axes"]], "cumsum() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.cumsum"]], "data (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.data"]], "default_interp_kwargs (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.default_interp_kwargs"]], "default_unit (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.default_unit"]], "evaluate() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.evaluate"]], "fov_alignment (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.fov_alignment"]], "from_hdulist() (gammapy.irf.effectiveareatable2d class method)": [[138, "gammapy.irf.EffectiveAreaTable2D.from_hdulist"]], "from_parametrization() (gammapy.irf.effectiveareatable2d class method)": [[138, "gammapy.irf.EffectiveAreaTable2D.from_parametrization"]], "from_table() (gammapy.irf.effectiveareatable2d class method)": [[138, "gammapy.irf.EffectiveAreaTable2D.from_table"]], "has_offset_axis (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.has_offset_axis"]], "integral() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.integral"]], "integrate_log_log() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.interp_missing_data"]], "is_allclose() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.is_allclose"]], "is_pointlike (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.is_pointlike"]], "normalize() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.normalize"]], "pad() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.pad"]], "peek() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.peek"]], "plot() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.plot"]], "plot_energy_dependence() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.plot_energy_dependence"]], "plot_offset_dependence() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.plot_offset_dependence"]], "quantity (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.quantity"]], "read() (gammapy.irf.effectiveareatable2d class method)": [[138, "gammapy.irf.EffectiveAreaTable2D.read"]], "required_axes (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.required_axes"]], "slice_by_idx() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.slice_by_idx"]], "tag (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.tag"]], "to_hdulist() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.to_hdulist"]], "to_table() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.to_table"]], "to_table_hdu() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.to_table_hdu"]], "to_unit() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.to_unit"]], "unit (gammapy.irf.effectiveareatable2d attribute)": [[138, "gammapy.irf.EffectiveAreaTable2D.unit"]], "write() (gammapy.irf.effectiveareatable2d method)": [[138, "gammapy.irf.EffectiveAreaTable2D.write"]], "energydependentmultigausspsf (class in gammapy.irf)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF"]], "axes (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.axes"]], "containment() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.containment"]], "containment_radius() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.containment_radius"]], "cumsum() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.cumsum"]], "data (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.data"]], "default_interp_kwargs (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.default_interp_kwargs"]], "evaluate() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate"]], "evaluate_containment() (gammapy.irf.energydependentmultigausspsf static method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_containment"]], "evaluate_direct() (gammapy.irf.energydependentmultigausspsf static method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.evaluate_parameters"]], "fov_alignment (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.fov_alignment"]], "from_hdulist() (gammapy.irf.energydependentmultigausspsf class method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.from_hdulist"]], "from_table() (gammapy.irf.energydependentmultigausspsf class method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.from_table"]], "has_offset_axis (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.has_offset_axis"]], "info() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.info"]], "integral() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.integral"]], "integrate_log_log() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.interp_missing_data"]], "is_allclose() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.is_allclose"]], "is_pointlike (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.is_pointlike"]], "normalize() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.normalize"]], "pad() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.pad"]], "peek() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.peek"]], "plot_containment_radius() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.plot_psf_vs_rad"]], "quantity (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.quantity"]], "read() (gammapy.irf.energydependentmultigausspsf class method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.read"]], "required_axes (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.required_axes"]], "required_parameters (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.required_parameters"]], "slice_by_idx() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.slice_by_idx"]], "tag (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.tag"]], "to_hdulist() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.to_hdulist"]], "to_psf3d() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.to_psf3d"]], "to_table() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.to_table"]], "to_table_hdu() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.to_table_hdu"]], "to_unit() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.to_unit"]], "unit (gammapy.irf.energydependentmultigausspsf attribute)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.unit"]], "write() (gammapy.irf.energydependentmultigausspsf method)": [[139, "gammapy.irf.EnergyDependentMultiGaussPSF.write"]], "energydispersion2d (class in gammapy.irf)": [[140, "gammapy.irf.EnergyDispersion2D"]], "axes (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.axes"]], "cumsum() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.cumsum"]], "data (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.data"]], "default_interp_kwargs (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.default_interp_kwargs"]], "default_unit (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.default_unit"]], "evaluate() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.evaluate"]], "fov_alignment (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.fov_alignment"]], "from_gauss() (gammapy.irf.energydispersion2d class method)": [[140, "gammapy.irf.EnergyDispersion2D.from_gauss"]], "from_hdulist() (gammapy.irf.energydispersion2d class method)": [[140, "gammapy.irf.EnergyDispersion2D.from_hdulist"]], "from_table() (gammapy.irf.energydispersion2d class method)": [[140, "gammapy.irf.EnergyDispersion2D.from_table"]], "has_offset_axis (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.has_offset_axis"]], "integral() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.integral"]], "integrate_log_log() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.interp_missing_data"]], "is_allclose() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.is_allclose"]], "is_pointlike (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.is_pointlike"]], "normalize() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.normalize"]], "pad() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.pad"]], "peek() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.peek"]], "plot_bias() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.plot_bias"]], "plot_migration() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.plot_migration"]], "quantity (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.quantity"]], "read() (gammapy.irf.energydispersion2d class method)": [[140, "gammapy.irf.EnergyDispersion2D.read"]], "required_axes (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.required_axes"]], "slice_by_idx() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.slice_by_idx"]], "tag (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.tag"]], "to_edisp_kernel() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.to_edisp_kernel"]], "to_hdulist() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.to_hdulist"]], "to_table() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.to_table"]], "to_table_hdu() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.to_table_hdu"]], "to_unit() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.to_unit"]], "unit (gammapy.irf.energydispersion2d attribute)": [[140, "gammapy.irf.EnergyDispersion2D.unit"]], "write() (gammapy.irf.energydispersion2d method)": [[140, "gammapy.irf.EnergyDispersion2D.write"]], "altaz (gammapy.irf.fovalignment attribute)": [[141, "gammapy.irf.FoVAlignment.ALTAZ"]], "fovalignment (class in gammapy.irf)": [[141, "gammapy.irf.FoVAlignment"]], "radec (gammapy.irf.fovalignment attribute)": [[141, "gammapy.irf.FoVAlignment.RADEC"]], "irf (class in gammapy.irf)": [[142, "gammapy.irf.IRF"]], "axes (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.axes"]], "cumsum() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.cumsum"]], "data (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.data"]], "default_interp_kwargs (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.default_interp_kwargs"]], "evaluate() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.evaluate"]], "fov_alignment (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.fov_alignment"]], "from_hdulist() (gammapy.irf.irf class method)": [[142, "gammapy.irf.IRF.from_hdulist"]], "from_table() (gammapy.irf.irf class method)": [[142, "gammapy.irf.IRF.from_table"]], "has_offset_axis (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.has_offset_axis"]], "integral() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.integral"]], "integrate_log_log() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.interp_missing_data"]], "is_allclose() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.is_allclose"]], "is_pointlike (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.is_pointlike"]], "normalize() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.normalize"]], "pad() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.pad"]], "quantity (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.quantity"]], "read() (gammapy.irf.irf class method)": [[142, "gammapy.irf.IRF.read"]], "required_axes (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.required_axes"]], "slice_by_idx() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.slice_by_idx"]], "tag (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.tag"]], "to_hdulist() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.to_hdulist"]], "to_table() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.to_table"]], "to_table_hdu() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.to_table_hdu"]], "to_unit() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.to_unit"]], "unit (gammapy.irf.irf attribute)": [[142, "gammapy.irf.IRF.unit"]], "write() (gammapy.irf.irf method)": [[142, "gammapy.irf.IRF.write"]], "irfmap (class in gammapy.irf)": [[143, "gammapy.irf.IRFMap"]], "copy() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.copy"]], "cutout() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.cutout"]], "downsample() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.downsample"]], "from_hdulist() (gammapy.irf.irfmap class method)": [[143, "gammapy.irf.IRFMap.from_hdulist"]], "mask_safe_image (gammapy.irf.irfmap attribute)": [[143, "gammapy.irf.IRFMap.mask_safe_image"]], "read() (gammapy.irf.irfmap class method)": [[143, "gammapy.irf.IRFMap.read"]], "required_axes (gammapy.irf.irfmap attribute)": [[143, "gammapy.irf.IRFMap.required_axes"]], "slice_by_idx() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.slice_by_idx"]], "stack() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.stack"]], "tag (gammapy.irf.irfmap attribute)": [[143, "gammapy.irf.IRFMap.tag"]], "to_hdulist() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.to_hdulist"]], "to_region_nd_map() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.to_region_nd_map"]], "write() (gammapy.irf.irfmap method)": [[143, "gammapy.irf.IRFMap.write"]], "irf_registry (in module gammapy.irf)": [[144, "gammapy.irf.IRF_REGISTRY"]], "psf3d (class in gammapy.irf)": [[145, "gammapy.irf.PSF3D"]], "axes (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.axes"]], "containment() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.containment"]], "containment_radius() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.containment_radius"]], "cumsum() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.cumsum"]], "data (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.data"]], "default_interp_kwargs (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.default_interp_kwargs"]], "default_unit (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.default_unit"]], "evaluate() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.evaluate"]], "fov_alignment (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.fov_alignment"]], "from_hdulist() (gammapy.irf.psf3d class method)": [[145, "gammapy.irf.PSF3D.from_hdulist"]], "from_table() (gammapy.irf.psf3d class method)": [[145, "gammapy.irf.PSF3D.from_table"]], "has_offset_axis (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.has_offset_axis"]], "info() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.info"]], "integral() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.integral"]], "integrate_log_log() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.interp_missing_data"]], "is_allclose() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.is_allclose"]], "is_pointlike (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.is_pointlike"]], "normalize() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.normalize"]], "pad() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.pad"]], "peek() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.peek"]], "plot_containment_radius() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.plot_psf_vs_rad"]], "quantity (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.quantity"]], "read() (gammapy.irf.psf3d class method)": [[145, "gammapy.irf.PSF3D.read"]], "required_axes (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.required_axes"]], "slice_by_idx() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.slice_by_idx"]], "tag (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.tag"]], "to_hdulist() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.to_hdulist"]], "to_table() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.to_table"]], "to_table_hdu() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.to_table_hdu"]], "to_unit() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.to_unit"]], "unit (gammapy.irf.psf3d attribute)": [[145, "gammapy.irf.PSF3D.unit"]], "write() (gammapy.irf.psf3d method)": [[145, "gammapy.irf.PSF3D.write"]], "psfkernel (class in gammapy.irf)": [[146, "gammapy.irf.PSFKernel"]], "data (gammapy.irf.psfkernel attribute)": [[146, "gammapy.irf.PSFKernel.data"]], "from_gauss() (gammapy.irf.psfkernel class method)": [[146, "gammapy.irf.PSFKernel.from_gauss"]], "from_spatial_model() (gammapy.irf.psfkernel class method)": [[146, "gammapy.irf.PSFKernel.from_spatial_model"]], "normalize() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.normalize"]], "peek() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.peek"]], "plot_kernel() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.plot_kernel"]], "psf_kernel_map (gammapy.irf.psfkernel attribute)": [[146, "gammapy.irf.PSFKernel.psf_kernel_map"]], "read() (gammapy.irf.psfkernel class method)": [[146, "gammapy.irf.PSFKernel.read"]], "slice_by_idx() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.slice_by_idx"]], "to_image() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.to_image"]], "write() (gammapy.irf.psfkernel method)": [[146, "gammapy.irf.PSFKernel.write"]], "psfking (class in gammapy.irf)": [[147, "gammapy.irf.PSFKing"]], "axes (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.axes"]], "containment() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.containment"]], "containment_radius() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.containment_radius"]], "cumsum() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.cumsum"]], "data (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.data"]], "default_interp_kwargs (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.default_interp_kwargs"]], "evaluate() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.evaluate"]], "evaluate_containment() (gammapy.irf.psfking static method)": [[147, "gammapy.irf.PSFKing.evaluate_containment"]], "evaluate_direct() (gammapy.irf.psfking static method)": [[147, "gammapy.irf.PSFKing.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.evaluate_parameters"]], "fov_alignment (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.fov_alignment"]], "from_hdulist() (gammapy.irf.psfking class method)": [[147, "gammapy.irf.PSFKing.from_hdulist"]], "from_table() (gammapy.irf.psfking class method)": [[147, "gammapy.irf.PSFKing.from_table"]], "has_offset_axis (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.has_offset_axis"]], "info() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.info"]], "integral() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.integral"]], "integrate_log_log() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.integrate_log_log"]], "interp_missing_data() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.interp_missing_data"]], "is_allclose() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.is_allclose"]], "is_pointlike (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.is_pointlike"]], "normalize() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.normalize"]], "pad() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.pad"]], "peek() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.peek"]], "plot_containment_radius() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.plot_psf_vs_rad"]], "quantity (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.quantity"]], "read() (gammapy.irf.psfking class method)": [[147, "gammapy.irf.PSFKing.read"]], "required_axes (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.required_axes"]], "required_parameters (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.required_parameters"]], "slice_by_idx() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.slice_by_idx"]], "tag (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.tag"]], "to_hdulist() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.to_hdulist"]], "to_psf3d() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.to_psf3d"]], "to_table() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.to_table"]], "to_table_hdu() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.to_table_hdu"]], "to_unit() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.to_unit"]], "unit (gammapy.irf.psfking attribute)": [[147, "gammapy.irf.PSFKing.unit"]], "write() (gammapy.irf.psfking method)": [[147, "gammapy.irf.PSFKing.write"]], "psfmap (class in gammapy.irf)": [[148, "gammapy.irf.PSFMap"]], "containment() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.containment"]], "containment_radius() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.containment_radius"]], "containment_radius_map() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.containment_radius_map"]], "copy() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.copy"]], "cutout() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.cutout"]], "downsample() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.downsample"]], "energy_name (gammapy.irf.psfmap attribute)": [[148, "gammapy.irf.PSFMap.energy_name"]], "from_gauss() (gammapy.irf.psfmap class method)": [[148, "gammapy.irf.PSFMap.from_gauss"]], "from_geom() (gammapy.irf.psfmap class method)": [[148, "gammapy.irf.PSFMap.from_geom"]], "from_hdulist() (gammapy.irf.psfmap class method)": [[148, "gammapy.irf.PSFMap.from_hdulist"]], "get_psf_kernel() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.get_psf_kernel"]], "mask_safe_image (gammapy.irf.psfmap attribute)": [[148, "gammapy.irf.PSFMap.mask_safe_image"]], "normalize() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.normalize"]], "peek() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.peek"]], "plot_containment_radius_vs_energy() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.plot_psf_vs_rad"]], "psf_map (gammapy.irf.psfmap attribute)": [[148, "gammapy.irf.PSFMap.psf_map"]], "read() (gammapy.irf.psfmap class method)": [[148, "gammapy.irf.PSFMap.read"]], "required_axes (gammapy.irf.psfmap attribute)": [[148, "gammapy.irf.PSFMap.required_axes"]], "sample_coord() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.sample_coord"]], "slice_by_idx() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.slice_by_idx"]], "stack() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.stack"]], "tag (gammapy.irf.psfmap attribute)": [[148, "gammapy.irf.PSFMap.tag"]], "to_hdulist() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.to_hdulist"]], "to_image() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.to_image"]], "to_region_nd_map() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.to_region_nd_map"]], "write() (gammapy.irf.psfmap method)": [[148, "gammapy.irf.PSFMap.write"]], "parametricpsf (class in gammapy.irf)": [[149, "gammapy.irf.ParametricPSF"]], "axes (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.axes"]], "containment() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.containment"]], "containment_radius() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.containment_radius"]], "cumsum() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.cumsum"]], "data (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.data"]], "default_interp_kwargs (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.default_interp_kwargs"]], "evaluate() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.evaluate"]], "evaluate_containment() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.evaluate_containment"]], "evaluate_direct() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.evaluate_direct"]], "evaluate_parameters() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.evaluate_parameters"]], "fov_alignment (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.fov_alignment"]], "from_hdulist() (gammapy.irf.parametricpsf class method)": [[149, "gammapy.irf.ParametricPSF.from_hdulist"]], "from_table() (gammapy.irf.parametricpsf class method)": [[149, "gammapy.irf.ParametricPSF.from_table"]], "has_offset_axis (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.has_offset_axis"]], "info() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.info"]], "integral() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.integral"]], "integrate_log_log() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.integrate_log_log"]], "interp_missing_data() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.interp_missing_data"]], "is_allclose() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.is_allclose"]], "is_pointlike (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.is_pointlike"]], "normalize() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.normalize"]], "pad() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.pad"]], "peek() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.peek"]], "plot_containment_radius() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.plot_containment_radius"]], "plot_containment_radius_vs_energy() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.plot_psf_vs_rad"]], "quantity (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.quantity"]], "read() (gammapy.irf.parametricpsf class method)": [[149, "gammapy.irf.ParametricPSF.read"]], "required_axes (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.required_axes"]], "required_parameters (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.required_parameters"]], "slice_by_idx() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.slice_by_idx"]], "tag (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.tag"]], "to_hdulist() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.to_hdulist"]], "to_psf3d() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.to_psf3d"]], "to_table() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.to_table"]], "to_table_hdu() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.to_table_hdu"]], "to_unit() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.to_unit"]], "unit (gammapy.irf.parametricpsf attribute)": [[149, "gammapy.irf.ParametricPSF.unit"]], "write() (gammapy.irf.parametricpsf method)": [[149, "gammapy.irf.ParametricPSF.write"]], "radmax2d (class in gammapy.irf)": [[150, "gammapy.irf.RadMax2D"]], "axes (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.axes"]], "cumsum() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.cumsum"]], "data (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.data"]], "default_interp_kwargs (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.default_interp_kwargs"]], "default_unit (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.default_unit"]], "evaluate() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.evaluate"]], "fov_alignment (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.fov_alignment"]], "from_hdulist() (gammapy.irf.radmax2d class method)": [[150, "gammapy.irf.RadMax2D.from_hdulist"]], "from_irf() (gammapy.irf.radmax2d class method)": [[150, "gammapy.irf.RadMax2D.from_irf"]], "from_table() (gammapy.irf.radmax2d class method)": [[150, "gammapy.irf.RadMax2D.from_table"]], "has_offset_axis (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.has_offset_axis"]], "integral() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.integral"]], "integrate_log_log() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.integrate_log_log"]], "interp_missing_data() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.interp_missing_data"]], "is_allclose() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.is_allclose"]], "is_fixed_rad_max (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.is_fixed_rad_max"]], "is_pointlike (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.is_pointlike"]], "normalize() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.normalize"]], "pad() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.pad"]], "plot_rad_max_vs_energy() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.plot_rad_max_vs_energy"]], "quantity (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.quantity"]], "read() (gammapy.irf.radmax2d class method)": [[150, "gammapy.irf.RadMax2D.read"]], "required_axes (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.required_axes"]], "slice_by_idx() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.slice_by_idx"]], "tag (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.tag"]], "to_hdulist() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.to_hdulist"]], "to_table() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.to_table"]], "to_table_hdu() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.to_table_hdu"]], "to_unit() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.to_unit"]], "unit (gammapy.irf.radmax2d attribute)": [[150, "gammapy.irf.RadMax2D.unit"]], "write() (gammapy.irf.radmax2d method)": [[150, "gammapy.irf.RadMax2D.write"]], "recopsfmap (class in gammapy.irf)": [[151, "gammapy.irf.RecoPSFMap"]], "containment() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.containment"]], "containment_radius() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.containment_radius"]], "containment_radius_map() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.containment_radius_map"]], "copy() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.copy"]], "cutout() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.cutout"]], "downsample() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.downsample"]], "energy_name (gammapy.irf.recopsfmap attribute)": [[151, "gammapy.irf.RecoPSFMap.energy_name"]], "from_gauss() (gammapy.irf.recopsfmap class method)": [[151, "gammapy.irf.RecoPSFMap.from_gauss"]], "from_geom() (gammapy.irf.recopsfmap class method)": [[151, "gammapy.irf.RecoPSFMap.from_geom"]], "from_hdulist() (gammapy.irf.recopsfmap class method)": [[151, "gammapy.irf.RecoPSFMap.from_hdulist"]], "get_psf_kernel() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.get_psf_kernel"]], "mask_safe_image (gammapy.irf.recopsfmap attribute)": [[151, "gammapy.irf.RecoPSFMap.mask_safe_image"]], "normalize() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.normalize"]], "peek() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.peek"]], "plot_containment_radius_vs_energy() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.plot_containment_radius_vs_energy"]], "plot_psf_vs_rad() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.plot_psf_vs_rad"]], "psf_map (gammapy.irf.recopsfmap attribute)": [[151, "gammapy.irf.RecoPSFMap.psf_map"]], "read() (gammapy.irf.recopsfmap class method)": [[151, "gammapy.irf.RecoPSFMap.read"]], "required_axes (gammapy.irf.recopsfmap attribute)": [[151, "gammapy.irf.RecoPSFMap.required_axes"]], "sample_coord() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.sample_coord"]], "slice_by_idx() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.slice_by_idx"]], "stack() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.stack"]], "tag (gammapy.irf.recopsfmap attribute)": [[151, "gammapy.irf.RecoPSFMap.tag"]], "to_hdulist() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.to_hdulist"]], "to_image() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.to_image"]], "to_region_nd_map() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.to_region_nd_map"]], "write() (gammapy.irf.recopsfmap method)": [[151, "gammapy.irf.RecoPSFMap.write"]], "load_irf_dict_from_file() (in module gammapy.irf)": [[152, "gammapy.irf.load_irf_dict_from_file"]], "adaptiveringbackgroundmaker (class in gammapy.makers)": [[153, "gammapy.makers.AdaptiveRingBackgroundMaker"]], "kernels() (gammapy.makers.adaptiveringbackgroundmaker method)": [[153, "gammapy.makers.AdaptiveRingBackgroundMaker.kernels"]], "make_cubes() (gammapy.makers.adaptiveringbackgroundmaker method)": [[153, "gammapy.makers.AdaptiveRingBackgroundMaker.make_cubes"]], "run() (gammapy.makers.adaptiveringbackgroundmaker method)": [[153, "gammapy.makers.AdaptiveRingBackgroundMaker.run"]], "tag (gammapy.makers.adaptiveringbackgroundmaker attribute)": [[153, "gammapy.makers.AdaptiveRingBackgroundMaker.tag"]], "datasetsmaker (class in gammapy.makers)": [[154, "gammapy.makers.DatasetsMaker"]], "callback() (gammapy.makers.datasetsmaker method)": [[154, "gammapy.makers.DatasetsMaker.callback"]], "error_callback() (gammapy.makers.datasetsmaker method)": [[154, "gammapy.makers.DatasetsMaker.error_callback"]], "make_dataset() (gammapy.makers.datasetsmaker method)": [[154, "gammapy.makers.DatasetsMaker.make_dataset"]], "n_jobs (gammapy.makers.datasetsmaker attribute)": [[154, "gammapy.makers.DatasetsMaker.n_jobs"]], "offset_max (gammapy.makers.datasetsmaker attribute)": [[154, "gammapy.makers.DatasetsMaker.offset_max"]], "parallel_backend (gammapy.makers.datasetsmaker attribute)": [[154, "gammapy.makers.DatasetsMaker.parallel_backend"]], "run() (gammapy.makers.datasetsmaker method)": [[154, "gammapy.makers.DatasetsMaker.run"]], "safe_mask_maker (gammapy.makers.datasetsmaker attribute)": [[154, "gammapy.makers.DatasetsMaker.safe_mask_maker"]], "tag (gammapy.makers.datasetsmaker attribute)": [[154, "gammapy.makers.DatasetsMaker.tag"]], "fovbackgroundmaker (class in gammapy.makers)": [[155, "gammapy.makers.FoVBackgroundMaker"]], "available_methods (gammapy.makers.fovbackgroundmaker attribute)": [[155, "gammapy.makers.FoVBackgroundMaker.available_methods"]], "make_background_fit() (gammapy.makers.fovbackgroundmaker method)": [[155, "gammapy.makers.FoVBackgroundMaker.make_background_fit"]], "make_background_scale() (gammapy.makers.fovbackgroundmaker method)": [[155, "gammapy.makers.FoVBackgroundMaker.make_background_scale"]], "make_default_fov_background_model() (gammapy.makers.fovbackgroundmaker method)": [[155, "gammapy.makers.FoVBackgroundMaker.make_default_fov_background_model"]], "make_exclusion_mask() (gammapy.makers.fovbackgroundmaker method)": [[155, "gammapy.makers.FoVBackgroundMaker.make_exclusion_mask"]], "method (gammapy.makers.fovbackgroundmaker attribute)": [[155, "gammapy.makers.FoVBackgroundMaker.method"]], "run() (gammapy.makers.fovbackgroundmaker method)": [[155, "gammapy.makers.FoVBackgroundMaker.run"]], "tag (gammapy.makers.fovbackgroundmaker attribute)": [[155, "gammapy.makers.FoVBackgroundMaker.tag"]], "maker_registry (in module gammapy.makers)": [[156, "gammapy.makers.MAKER_REGISTRY"]], "maker (class in gammapy.makers)": [[157, "gammapy.makers.Maker"]], "run() (gammapy.makers.maker method)": [[157, "gammapy.makers.Maker.run"]], "tag (gammapy.makers.maker attribute)": [[157, "gammapy.makers.Maker.tag"]], "mapdatasetmaker (class in gammapy.makers)": [[158, "gammapy.makers.MapDatasetMaker"]], "available_selection (gammapy.makers.mapdatasetmaker attribute)": [[158, "gammapy.makers.MapDatasetMaker.available_selection"]], "make_background() (gammapy.makers.mapdatasetmaker method)": [[158, "gammapy.makers.MapDatasetMaker.make_background"]], "make_counts() (gammapy.makers.mapdatasetmaker static method)": [[158, "gammapy.makers.MapDatasetMaker.make_counts"]], "make_edisp() (gammapy.makers.mapdatasetmaker method)": [[158, "gammapy.makers.MapDatasetMaker.make_edisp"]], "make_edisp_kernel() (gammapy.makers.mapdatasetmaker method)": [[158, "gammapy.makers.MapDatasetMaker.make_edisp_kernel"]], "make_exposure() (gammapy.makers.mapdatasetmaker static method)": [[158, "gammapy.makers.MapDatasetMaker.make_exposure"]], "make_exposure_irf() (gammapy.makers.mapdatasetmaker static method)": [[158, "gammapy.makers.MapDatasetMaker.make_exposure_irf"]], "make_meta_table() (gammapy.makers.mapdatasetmaker static method)": [[158, "gammapy.makers.MapDatasetMaker.make_meta_table"]], "make_psf() (gammapy.makers.mapdatasetmaker method)": [[158, "gammapy.makers.MapDatasetMaker.make_psf"]], "run() (gammapy.makers.mapdatasetmaker method)": [[158, "gammapy.makers.MapDatasetMaker.run"]], "tag (gammapy.makers.mapdatasetmaker attribute)": [[158, "gammapy.makers.MapDatasetMaker.tag"]], "phasebackgroundmaker (class in gammapy.makers)": [[159, "gammapy.makers.PhaseBackgroundMaker"]], "make_counts() (gammapy.makers.phasebackgroundmaker method)": [[159, "gammapy.makers.PhaseBackgroundMaker.make_counts"]], "make_counts_off() (gammapy.makers.phasebackgroundmaker method)": [[159, "gammapy.makers.PhaseBackgroundMaker.make_counts_off"]], "run() (gammapy.makers.phasebackgroundmaker method)": [[159, "gammapy.makers.PhaseBackgroundMaker.run"]], "tag (gammapy.makers.phasebackgroundmaker attribute)": [[159, "gammapy.makers.PhaseBackgroundMaker.tag"]], "reflectedregionsbackgroundmaker (class in gammapy.makers)": [[160, "gammapy.makers.ReflectedRegionsBackgroundMaker"]], "make_counts_off() (gammapy.makers.reflectedregionsbackgroundmaker method)": [[160, "gammapy.makers.ReflectedRegionsBackgroundMaker.make_counts_off"]], "run() (gammapy.makers.reflectedregionsbackgroundmaker method)": [[160, "gammapy.makers.ReflectedRegionsBackgroundMaker.run"]], "tag (gammapy.makers.reflectedregionsbackgroundmaker attribute)": [[160, "gammapy.makers.ReflectedRegionsBackgroundMaker.tag"]], "reflectedregionsfinder (class in gammapy.makers)": [[161, "gammapy.makers.ReflectedRegionsFinder"]], "run() (gammapy.makers.reflectedregionsfinder method)": [[161, "gammapy.makers.ReflectedRegionsFinder.run"]], "regionsfinder (class in gammapy.makers)": [[162, "gammapy.makers.RegionsFinder"]], "run() (gammapy.makers.regionsfinder method)": [[162, "gammapy.makers.RegionsFinder.run"]], "ringbackgroundmaker (class in gammapy.makers)": [[163, "gammapy.makers.RingBackgroundMaker"]], "kernel() (gammapy.makers.ringbackgroundmaker method)": [[163, "gammapy.makers.RingBackgroundMaker.kernel"]], "make_maps_off() (gammapy.makers.ringbackgroundmaker method)": [[163, "gammapy.makers.RingBackgroundMaker.make_maps_off"]], "run() (gammapy.makers.ringbackgroundmaker method)": [[163, "gammapy.makers.RingBackgroundMaker.run"]], "tag (gammapy.makers.ringbackgroundmaker attribute)": [[163, "gammapy.makers.RingBackgroundMaker.tag"]], "safemaskmaker (class in gammapy.makers)": [[164, "gammapy.makers.SafeMaskMaker"]], "available_methods (gammapy.makers.safemaskmaker attribute)": [[164, "gammapy.makers.SafeMaskMaker.available_methods"]], "make_mask_bkg_invalid() (gammapy.makers.safemaskmaker static method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_bkg_invalid"]], "make_mask_energy_aeff_default() (gammapy.makers.safemaskmaker static method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_energy_aeff_default"]], "make_mask_energy_aeff_max() (gammapy.makers.safemaskmaker method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_energy_aeff_max"]], "make_mask_energy_bkg_peak() (gammapy.makers.safemaskmaker method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_energy_bkg_peak"]], "make_mask_energy_edisp_bias() (gammapy.makers.safemaskmaker method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_energy_edisp_bias"]], "make_mask_offset_max() (gammapy.makers.safemaskmaker method)": [[164, "gammapy.makers.SafeMaskMaker.make_mask_offset_max"]], "run() (gammapy.makers.safemaskmaker method)": [[164, "gammapy.makers.SafeMaskMaker.run"]], "tag (gammapy.makers.safemaskmaker attribute)": [[164, "gammapy.makers.SafeMaskMaker.tag"]], "spectrumdatasetmaker (class in gammapy.makers)": [[165, "gammapy.makers.SpectrumDatasetMaker"]], "available_selection (gammapy.makers.spectrumdatasetmaker attribute)": [[165, "gammapy.makers.SpectrumDatasetMaker.available_selection"]], "make_background() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_background"]], "make_counts() (gammapy.makers.spectrumdatasetmaker static method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_counts"]], "make_edisp() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_edisp"]], "make_edisp_kernel() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_edisp_kernel"]], "make_exposure() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_exposure"]], "make_exposure_irf() (gammapy.makers.spectrumdatasetmaker static method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_exposure_irf"]], "make_meta_table() (gammapy.makers.spectrumdatasetmaker static method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_meta_table"]], "make_psf() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.make_psf"]], "run() (gammapy.makers.spectrumdatasetmaker method)": [[165, "gammapy.makers.SpectrumDatasetMaker.run"]], "tag (gammapy.makers.spectrumdatasetmaker attribute)": [[165, "gammapy.makers.SpectrumDatasetMaker.tag"]], "wobbleregionsfinder (class in gammapy.makers)": [[166, "gammapy.makers.WobbleRegionsFinder"]], "run() (gammapy.makers.wobbleregionsfinder method)": [[166, "gammapy.makers.WobbleRegionsFinder.run"]], "make_counts_rad_max() (in module gammapy.makers.utils)": [[167, "gammapy.makers.utils.make_counts_rad_max"]], "make_edisp_kernel_map() (in module gammapy.makers.utils)": [[168, "gammapy.makers.utils.make_edisp_kernel_map"]], "make_edisp_map() (in module gammapy.makers.utils)": [[169, "gammapy.makers.utils.make_edisp_map"]], "make_effective_livetime_map() (in module gammapy.makers.utils)": [[170, "gammapy.makers.utils.make_effective_livetime_map"]], "make_map_background_irf() (in module gammapy.makers.utils)": [[171, "gammapy.makers.utils.make_map_background_irf"]], "make_map_exposure_true_energy() (in module gammapy.makers.utils)": [[172, "gammapy.makers.utils.make_map_exposure_true_energy"]], "make_observation_time_map() (in module gammapy.makers.utils)": [[173, "gammapy.makers.utils.make_observation_time_map"]], "make_psf_map() (in module gammapy.makers.utils)": [[174, "gammapy.makers.utils.make_psf_map"]], "make_theta_squared_table() (in module gammapy.makers.utils)": [[175, "gammapy.makers.utils.make_theta_squared_table"]], "geom (class in gammapy.maps)": [[176, "gammapy.maps.Geom"]], "as_energy_true (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.as_energy_true"]], "center_coord (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.center_coord"]], "center_pix (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.center_pix"]], "center_skydir (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.center_skydir"]], "contains() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.contains"]], "contains_pix() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.contains_pix"]], "coord_to_idx() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.coord_to_pix"]], "copy() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.copy"]], "crop() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.crop"]], "data_nbytes() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.data_nbytes"]], "data_shape (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.data_shape"]], "downsample() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.downsample"]], "drop() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.drop"]], "energy_mask() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.energy_mask"]], "from_hdulist() (gammapy.maps.geom class method)": [[176, "gammapy.maps.Geom.from_hdulist"]], "get_coord() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.get_coord"]], "get_idx() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.get_idx"]], "has_energy_axis (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.has_energy_axis"]], "is_allsky (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.is_allsky"]], "is_flat (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.is_flat"]], "is_image (gammapy.maps.geom attribute)": [[176, "gammapy.maps.Geom.is_image"]], "pad() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.pad"]], "pix_to_coord() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.pix_to_idx"]], "rename_axes() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.rename_axes"]], "replace_axis() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.replace_axis"]], "resample_axis() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.resample_axis"]], "slice_by_idx() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.slice_by_idx"]], "solid_angle() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.solid_angle"]], "squash() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.squash"]], "to_bands_hdu() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.to_bands_hdu"]], "to_cube() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.to_cube"]], "to_image() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.to_image"]], "upsample() (gammapy.maps.geom method)": [[176, "gammapy.maps.Geom.upsample"]], "hpxgeom (class in gammapy.maps)": [[177, "gammapy.maps.HpxGeom"]], "as_energy_true (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.as_energy_true"]], "axes (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.axes"]], "axes_names (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.axes_names"]], "center_coord (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.center_coord"]], "center_pix (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.center_pix"]], "center_skydir (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.center_skydir"]], "contains() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.contains"]], "contains_pix() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.contains_pix"]], "coord_to_idx() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.coord_to_pix"]], "copy() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.copy"]], "create() (gammapy.maps.hpxgeom class method)": [[177, "gammapy.maps.HpxGeom.create"]], "crop() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.crop"]], "cutout() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.cutout"]], "data_nbytes() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.data_nbytes"]], "data_shape (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.data_shape"]], "data_shape_axes (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.data_shape_axes"]], "downsample() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.downsample"]], "drop() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.drop"]], "energy_mask() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.energy_mask"]], "frame (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.frame"]], "from_hdu() (gammapy.maps.hpxgeom class method)": [[177, "gammapy.maps.HpxGeom.from_hdu"]], "from_hdulist() (gammapy.maps.hpxgeom class method)": [[177, "gammapy.maps.HpxGeom.from_hdulist"]], "from_header() (gammapy.maps.hpxgeom class method)": [[177, "gammapy.maps.HpxGeom.from_header"]], "get_coord() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.get_coord"]], "get_idx() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.get_idx"]], "get_index_list() (gammapy.maps.hpxgeom static method)": [[177, "gammapy.maps.HpxGeom.get_index_list"]], "global_to_local() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.global_to_local"]], "has_energy_axis (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.has_energy_axis"]], "interp_weights() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.interp_weights"]], "ipix (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.ipix"]], "is_aligned() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.is_aligned"]], "is_allclose() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.is_allclose"]], "is_allsky (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_allsky"]], "is_flat (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_flat"]], "is_hpx (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_hpx"]], "is_image (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_image"]], "is_region (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_region"]], "is_regular (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.is_regular"]], "local_to_global() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.local_to_global"]], "ndim (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.ndim"]], "nest (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.nest"]], "npix (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.npix"]], "npix_max (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.npix_max"]], "nside (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.nside"]], "order (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.order"]], "ordering (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.ordering"]], "pad() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.pad"]], "pix_to_coord() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.pix_to_idx"]], "pixel_scales (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.pixel_scales"]], "projection (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.projection"]], "region (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.region"]], "region_mask() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.region_mask"]], "rename_axes() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.rename_axes"]], "replace_axis() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.replace_axis"]], "resample_axis() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.resample_axis"]], "separation() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.separation"]], "shape_axes (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.shape_axes"]], "slice_by_idx() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.solid_angle"]], "squash() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.squash"]], "to_bands_hdu() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_binsz"]], "to_cube() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_cube"]], "to_header() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_header"]], "to_image() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_image"]], "to_nside() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_nside"]], "to_swapped() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_swapped"]], "to_wcs_geom() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_wcs_geom"]], "to_wcs_tiles() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.to_wcs_tiles"]], "upsample() (gammapy.maps.hpxgeom method)": [[177, "gammapy.maps.HpxGeom.upsample"]], "width (gammapy.maps.hpxgeom attribute)": [[177, "gammapy.maps.HpxGeom.width"]], "hpxmap (class in gammapy.maps)": [[178, "gammapy.maps.HpxMap"]], "coadd() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.coadd"]], "copy() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.copy"]], "create() (gammapy.maps.hpxmap class method)": [[178, "gammapy.maps.HpxMap.create"]], "crop() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.crop"]], "cumsum() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.cumsum"]], "data (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.data"]], "dot() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.dot"]], "downsample() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.downsample"]], "fill_by_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.fill_by_pix"]], "fill_events() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.fill_events"]], "from_geom() (gammapy.maps.hpxmap static method)": [[178, "gammapy.maps.HpxMap.from_geom"]], "from_hdulist() (gammapy.maps.hpxmap class method)": [[178, "gammapy.maps.HpxMap.from_hdulist"]], "from_stack() (gammapy.maps.hpxmap class method)": [[178, "gammapy.maps.HpxMap.from_stack"]], "geom (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.geom"]], "get_by_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_by_coord"]], "get_by_idx() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_by_idx"]], "get_by_pix() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.get_spectrum"]], "integral() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.integral"]], "interp_by_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.interp_to_geom"]], "is_allclose() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.is_allclose"]], "is_mask (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.is_mask"]], "iter_by_axis() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.mask_nearest_position"]], "meta (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.meta"]], "normalize() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.normalize"]], "pad() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.pad"]], "plot_grid() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.plot_grid"]], "plot_interactive() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.plot_interactive"]], "quantity (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.quantity"]], "read() (gammapy.maps.hpxmap static method)": [[178, "gammapy.maps.HpxMap.read"]], "reduce() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.reduce"]], "reduce_over_axes() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.rename_axes"]], "reorder_axes() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.reproject_to_geom"]], "resample() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.resample"]], "resample_axis() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.resample_axis"]], "sample_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.sample_coord"]], "set_by_coord() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.set_by_coord"]], "set_by_idx() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.set_by_idx"]], "set_by_pix() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.split_by_axis"]], "sum_over_axes() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.sum_over_axes"]], "tag (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.tag"]], "to_cube() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_cube"]], "to_hdu() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_hdu"]], "to_hdulist() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_hdulist"]], "to_swapped() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_swapped"]], "to_unit() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_unit"]], "to_wcs() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.to_wcs"]], "unit (gammapy.maps.hpxmap attribute)": [[178, "gammapy.maps.HpxMap.unit"]], "upsample() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.upsample"]], "write() (gammapy.maps.hpxmap method)": [[178, "gammapy.maps.HpxMap.write"]], "hpxndmap (class in gammapy.maps)": [[179, "gammapy.maps.HpxNDMap"]], "coadd() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.coadd"]], "convolve() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.convolve"]], "convolve_full() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.convolve_full"]], "convolve_wcs() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.convolve_wcs"]], "copy() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.copy"]], "create() (gammapy.maps.hpxndmap class method)": [[179, "gammapy.maps.HpxNDMap.create"]], "crop() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.crop"]], "cumsum() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.cumsum"]], "cutout() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.cutout"]], "data (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.data"]], "dot() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.dot"]], "downsample() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.downsample"]], "fill_by_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.fill_events"]], "from_geom() (gammapy.maps.hpxndmap static method)": [[179, "gammapy.maps.HpxNDMap.from_geom"]], "from_hdu() (gammapy.maps.hpxndmap class method)": [[179, "gammapy.maps.HpxNDMap.from_hdu"]], "from_hdulist() (gammapy.maps.hpxndmap class method)": [[179, "gammapy.maps.HpxNDMap.from_hdulist"]], "from_stack() (gammapy.maps.hpxndmap class method)": [[179, "gammapy.maps.HpxNDMap.from_stack"]], "from_wcs_tiles() (gammapy.maps.hpxndmap class method)": [[179, "gammapy.maps.HpxNDMap.from_wcs_tiles"]], "geom (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.geom"]], "get_by_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.get_spectrum"]], "integral() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.integral"]], "interp_by_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.is_allclose"]], "is_mask (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.mask_nearest_position"]], "meta (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.meta"]], "normalize() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.normalize"]], "pad() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.pad"]], "plot() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.plot"]], "plot_grid() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.plot_grid"]], "plot_interactive() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.plot_mask"]], "quantity (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.quantity"]], "read() (gammapy.maps.hpxndmap static method)": [[179, "gammapy.maps.HpxNDMap.read"]], "reduce() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.reproject_to_geom"]], "resample() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.resample"]], "resample_axis() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.resample_axis"]], "sample_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.slice_by_idx"]], "smooth() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.smooth"]], "split_by_axis() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.split_by_axis"]], "stack() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.stack"]], "sum_over_axes() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.sum_over_axes"]], "tag (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.tag"]], "to_cube() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_cube"]], "to_hdu() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_hdu"]], "to_hdulist() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_hdulist"]], "to_nside() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_nside"]], "to_region_nd_map() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_region_nd_map"]], "to_swapped() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_swapped"]], "to_unit() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_unit"]], "to_wcs() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_wcs"]], "to_wcs_tiles() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.to_wcs_tiles"]], "unit (gammapy.maps.hpxndmap attribute)": [[179, "gammapy.maps.HpxNDMap.unit"]], "upsample() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.upsample"]], "write() (gammapy.maps.hpxndmap method)": [[179, "gammapy.maps.HpxNDMap.write"]], "labelmapaxis (class in gammapy.maps)": [[180, "gammapy.maps.LabelMapAxis"]], "as_plot_center (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.as_plot_labels"]], "as_plot_xerr (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.assert_name"]], "bin_width (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.bin_width"]], "center (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.center"]], "concatenate() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.concatenate"]], "coord_to_idx() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.coord_to_pix"]], "copy() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.copy"]], "downsample() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.downsample"]], "edges (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.edges"]], "edges_max (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.edges_max"]], "edges_min (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.format_plot_xaxis"]], "from_stack() (gammapy.maps.labelmapaxis class method)": [[180, "gammapy.maps.LabelMapAxis.from_stack"]], "from_table() (gammapy.maps.labelmapaxis class method)": [[180, "gammapy.maps.LabelMapAxis.from_table"]], "is_allclose() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.is_allclose"]], "name (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.name"]], "nbin (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.nbin"]], "node_type (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.node_type"]], "pad() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.pad"]], "pix_to_coord() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.pix_to_idx"]], "resample() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.resample"]], "slice() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.slice"]], "squash() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.squash"]], "to_header() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.to_header"]], "unit (gammapy.maps.labelmapaxis attribute)": [[180, "gammapy.maps.LabelMapAxis.unit"]], "upsample() (gammapy.maps.labelmapaxis method)": [[180, "gammapy.maps.LabelMapAxis.upsample"]], "map (class in gammapy.maps)": [[181, "gammapy.maps.Map"]], "coadd() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.coadd"]], "copy() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.copy"]], "create() (gammapy.maps.map static method)": [[181, "gammapy.maps.Map.create"]], "crop() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.crop"]], "cumsum() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.cumsum"]], "data (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.data"]], "dot() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.dot"]], "downsample() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.downsample"]], "fill_by_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.fill_by_coord"]], "fill_by_idx() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.fill_by_idx"]], "fill_by_pix() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.fill_by_pix"]], "fill_events() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.fill_events"]], "from_geom() (gammapy.maps.map static method)": [[181, "gammapy.maps.Map.from_geom"]], "from_hdulist() (gammapy.maps.map static method)": [[181, "gammapy.maps.Map.from_hdulist"]], "from_stack() (gammapy.maps.map class method)": [[181, "gammapy.maps.Map.from_stack"]], "geom (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.geom"]], "get_by_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_by_coord"]], "get_by_idx() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_by_idx"]], "get_by_pix() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_by_pix"]], "get_image_by_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_image_by_pix"]], "get_spectrum() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.get_spectrum"]], "integral() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.integral"]], "interp_by_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.interp_by_coord"]], "interp_by_pix() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.interp_by_pix"]], "interp_to_geom() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.interp_to_geom"]], "is_allclose() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.is_allclose"]], "is_mask (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.is_mask"]], "iter_by_axis() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.iter_by_axis"]], "iter_by_image() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.iter_by_image"]], "iter_by_image_data() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.mask_nearest_position"]], "meta (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.meta"]], "normalize() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.normalize"]], "pad() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.pad"]], "plot_grid() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.plot_grid"]], "plot_interactive() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.plot_interactive"]], "quantity (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.quantity"]], "read() (gammapy.maps.map static method)": [[181, "gammapy.maps.Map.read"]], "reduce() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.reduce"]], "reduce_over_axes() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.reduce_over_axes"]], "rename_axes() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.rename_axes"]], "reorder_axes() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.reorder_axes"]], "reproject_by_image() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.reproject_to_geom"]], "resample() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.resample"]], "resample_axis() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.resample_axis"]], "sample_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.sample_coord"]], "set_by_coord() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.set_by_coord"]], "set_by_idx() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.set_by_idx"]], "set_by_pix() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.set_by_pix"]], "slice_by_idx() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.slice_by_idx"]], "split_by_axis() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.split_by_axis"]], "sum_over_axes() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.sum_over_axes"]], "tag (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.tag"]], "to_cube() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.to_cube"]], "to_unit() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.to_unit"]], "unit (gammapy.maps.map attribute)": [[181, "gammapy.maps.Map.unit"]], "upsample() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.upsample"]], "write() (gammapy.maps.map method)": [[181, "gammapy.maps.Map.write"]], "mapaxes (class in gammapy.maps)": [[182, "gammapy.maps.MapAxes"]], "assert_names() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.assert_names"]], "bin_volume() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.bin_volume"]], "center_coord (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.center_coord"]], "coord_to_idx() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.coord_to_idx"]], "coord_to_pix() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.coord_to_pix"]], "copy() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.copy"]], "count() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.count"]], "downsample() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.downsample"]], "drop() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.drop"]], "from_default() (gammapy.maps.mapaxes class method)": [[182, "gammapy.maps.MapAxes.from_default"]], "from_table() (gammapy.maps.mapaxes class method)": [[182, "gammapy.maps.MapAxes.from_table"]], "from_table_hdu() (gammapy.maps.mapaxes class method)": [[182, "gammapy.maps.MapAxes.from_table_hdu"]], "get_coord() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.get_coord"]], "index() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.index"]], "index_data() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.index_data"]], "is_allclose() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.is_allclose"]], "is_flat (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.is_flat"]], "is_unidimensional (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.is_unidimensional"]], "iter_with_reshape (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.iter_with_reshape"]], "names (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.names"]], "pad() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.pad"]], "pix_to_coord() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.pix_to_coord"]], "pix_to_idx() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.pix_to_idx"]], "primary_axis (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.primary_axis"]], "rename_axes() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.rename_axes"]], "replace() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.replace"]], "resample() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.resample"]], "reverse (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.reverse"]], "shape (gammapy.maps.mapaxes attribute)": [[182, "gammapy.maps.MapAxes.shape"]], "slice_by_idx() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.slice_by_idx"]], "squash() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.squash"]], "to_header() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.to_header"]], "to_table() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.to_table"]], "to_table_hdu() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.to_table_hdu"]], "upsample() (gammapy.maps.mapaxes method)": [[182, "gammapy.maps.MapAxes.upsample"]], "mapaxis (class in gammapy.maps)": [[183, "gammapy.maps.MapAxis"]], "as_plot_center (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.as_plot_labels"]], "as_plot_scale (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.as_plot_scale"]], "as_plot_xerr (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.assert_name"]], "bin_width (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.bin_width"]], "bounds (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.bounds"]], "center (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.center"]], "concatenate() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.concatenate"]], "coord_to_idx() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.coord_to_pix"]], "copy() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.copy"]], "downsample() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.downsample"]], "edges (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.edges"]], "edges_max (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.edges_max"]], "edges_min (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.format_plot_xaxis"]], "format_plot_yaxis() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.format_plot_yaxis"]], "from_bounds() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_bounds"]], "from_edges() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_edges"]], "from_energy_bounds() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_energy_bounds"]], "from_energy_edges() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_energy_edges"]], "from_nodes() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_nodes"]], "from_stack() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_stack"]], "from_table() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_table"]], "from_table_hdu() (gammapy.maps.mapaxis class method)": [[183, "gammapy.maps.MapAxis.from_table_hdu"]], "group_table() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.group_table"]], "interp (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.interp"]], "is_aligned() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.is_aligned"]], "is_allclose() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.is_allclose"]], "is_energy_axis (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.is_energy_axis"]], "iter_by_edges (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.iter_by_edges"]], "name (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.name"]], "nbin (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.nbin"]], "nbin_per_decade (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.nbin_per_decade"]], "node_type (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.node_type"]], "pad() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.pad"]], "pix_to_coord() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.pix_to_idx"]], "rename() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.rename"]], "round() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.round"]], "slice() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.slice"]], "squash() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.squash"]], "to_header() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.to_header"]], "to_node_type() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.to_node_type"]], "to_table() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.to_table"]], "to_table_hdu() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.to_table_hdu"]], "unit (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.unit"]], "upsample() (gammapy.maps.mapaxis method)": [[183, "gammapy.maps.MapAxis.upsample"]], "use_center_as_plot_labels (gammapy.maps.mapaxis attribute)": [[183, "gammapy.maps.MapAxis.use_center_as_plot_labels"]], "mapcoord (class in gammapy.maps)": [[184, "gammapy.maps.MapCoord"]], "apply_mask() (gammapy.maps.mapcoord method)": [[184, "gammapy.maps.MapCoord.apply_mask"]], "axis_names (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.axis_names"]], "broadcasted (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.broadcasted"]], "copy() (gammapy.maps.mapcoord method)": [[184, "gammapy.maps.MapCoord.copy"]], "create() (gammapy.maps.mapcoord class method)": [[184, "gammapy.maps.MapCoord.create"]], "flat (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.flat"]], "frame (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.frame"]], "lat (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.lat"]], "lon (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.lon"]], "match_by_name (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.match_by_name"]], "ndim (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.ndim"]], "phi (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.phi"]], "shape (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.shape"]], "size (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.size"]], "skycoord (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.skycoord"]], "theta (gammapy.maps.mapcoord attribute)": [[184, "gammapy.maps.MapCoord.theta"]], "to_frame() (gammapy.maps.mapcoord method)": [[184, "gammapy.maps.MapCoord.to_frame"]], "maps (class in gammapy.maps)": [[185, "gammapy.maps.Maps"]], "clear() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.clear"]], "from_geom() (gammapy.maps.maps class method)": [[185, "gammapy.maps.Maps.from_geom"]], "from_hdulist() (gammapy.maps.maps class method)": [[185, "gammapy.maps.Maps.from_hdulist"]], "geom (gammapy.maps.maps attribute)": [[185, "gammapy.maps.Maps.geom"]], "get() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.get"]], "items() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.items"]], "keys() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.keys"]], "pop() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.pop"]], "popitem() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.popitem"]], "read() (gammapy.maps.maps class method)": [[185, "gammapy.maps.Maps.read"]], "setdefault() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.setdefault"]], "to_hdulist() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.to_hdulist"]], "update() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.update"]], "values() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.values"]], "write() (gammapy.maps.maps method)": [[185, "gammapy.maps.Maps.write"]], "regiongeom (class in gammapy.maps)": [[186, "gammapy.maps.RegionGeom"]], "as_energy_true (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.as_energy_true"]], "axes (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.axes"]], "axes_names (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.axes_names"]], "bin_volume() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.bin_volume"]], "binsz_wcs (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.binsz_wcs"]], "center_coord (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.center_coord"]], "center_pix (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.center_pix"]], "center_skydir (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.center_skydir"]], "contains() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.contains"]], "contains_pix() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.contains_pix"]], "contains_wcs_pix() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.contains_wcs_pix"]], "coord_to_idx() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.coord_to_pix"]], "copy() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.copy"]], "create() (gammapy.maps.regiongeom class method)": [[186, "gammapy.maps.RegionGeom.create"]], "crop() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.crop"]], "data_nbytes() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.data_nbytes"]], "data_shape (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.data_shape"]], "data_shape_axes (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.data_shape_axes"]], "downsample() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.downsample"]], "drop() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.drop"]], "energy_mask() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.energy_mask"]], "frame (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.frame"]], "from_hdulist() (gammapy.maps.regiongeom class method)": [[186, "gammapy.maps.RegionGeom.from_hdulist"]], "from_regions() (gammapy.maps.regiongeom class method)": [[186, "gammapy.maps.RegionGeom.from_regions"]], "get_coord() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.get_coord"]], "get_idx() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.get_idx"]], "get_wcs_coord_and_weights() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.get_wcs_coord_and_weights"]], "has_energy_axis (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.has_energy_axis"]], "is_all_point_sky_regions (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_all_point_sky_regions"]], "is_allclose() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.is_allclose"]], "is_allsky (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_allsky"]], "is_flat (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_flat"]], "is_hpx (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_hpx"]], "is_image (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_image"]], "is_region (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_region"]], "is_regular (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.is_regular"]], "npix (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.npix"]], "pad() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.pad"]], "pix_to_coord() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.pix_to_idx"]], "plot_region() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.plot_region"]], "projection (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.projection"]], "region (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.region"]], "rename_axes() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.rename_axes"]], "replace_axis() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.replace_axis"]], "resample_axis() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.resample_axis"]], "separation() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.separation"]], "slice_by_idx() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.solid_angle"]], "squash() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.squash"]], "to_bands_hdu() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_binsz"]], "to_binsz_wcs() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_binsz_wcs"]], "to_cube() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_cube"]], "to_hdulist() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_hdulist"]], "to_image() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_image"]], "to_wcs_geom() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.to_wcs_geom"]], "union() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.union"]], "upsample() (gammapy.maps.regiongeom method)": [[186, "gammapy.maps.RegionGeom.upsample"]], "wcs (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.wcs"]], "width (gammapy.maps.regiongeom attribute)": [[186, "gammapy.maps.RegionGeom.width"]], "regionndmap (class in gammapy.maps)": [[187, "gammapy.maps.RegionNDMap"]], "coadd() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.coadd"]], "copy() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.copy"]], "create() (gammapy.maps.regionndmap class method)": [[187, "gammapy.maps.RegionNDMap.create"]], "crop() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.crop"]], "cumsum() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.cumsum"]], "cutout() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.cutout"]], "data (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.data"]], "dot() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.dot"]], "downsample() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.downsample"]], "fill_by_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.fill_events"]], "from_geom() (gammapy.maps.regionndmap static method)": [[187, "gammapy.maps.RegionNDMap.from_geom"]], "from_hdulist() (gammapy.maps.regionndmap class method)": [[187, "gammapy.maps.RegionNDMap.from_hdulist"]], "from_stack() (gammapy.maps.regionndmap class method)": [[187, "gammapy.maps.RegionNDMap.from_stack"]], "from_table() (gammapy.maps.regionndmap class method)": [[187, "gammapy.maps.RegionNDMap.from_table"]], "geom (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.geom"]], "get_by_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.get_spectrum"]], "integral() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.integral"]], "interp_by_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.is_allclose"]], "is_mask (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.iter_by_axis"]], "iter_by_axis_data() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.iter_by_axis_data"]], "iter_by_image() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.mask_nearest_position"]], "meta (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.meta"]], "normalize() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.normalize"]], "pad() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.pad"]], "plot() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot"]], "plot_grid() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot_grid"]], "plot_hist() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot_hist"]], "plot_interactive() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot_mask"]], "plot_region() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.plot_region"]], "quantity (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.quantity"]], "read() (gammapy.maps.regionndmap class method)": [[187, "gammapy.maps.RegionNDMap.read"]], "reduce() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.reproject_to_geom"]], "resample() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.resample"]], "resample_axis() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.resample_axis"]], "sample_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.split_by_axis"]], "stack() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.stack"]], "sum_over_axes() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.sum_over_axes"]], "tag (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.tag"]], "to_cube() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.to_cube"]], "to_hdulist() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.to_hdulist"]], "to_region_nd_map() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.to_region_nd_map"]], "to_table() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.to_table"]], "to_unit() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.to_unit"]], "unit (gammapy.maps.regionndmap attribute)": [[187, "gammapy.maps.RegionNDMap.unit"]], "upsample() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.upsample"]], "write() (gammapy.maps.regionndmap method)": [[187, "gammapy.maps.RegionNDMap.write"]], "timemapaxis (class in gammapy.maps)": [[188, "gammapy.maps.TimeMapAxis"]], "as_plot_center (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.as_plot_center"]], "as_plot_edges (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.as_plot_edges"]], "as_plot_labels (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.as_plot_labels"]], "as_plot_xerr (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.as_plot_xerr"]], "assert_name() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.assert_name"]], "bin_width (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.bin_width"]], "bounds (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.bounds"]], "center (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.center"]], "coord_to_idx() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.coord_to_idx"]], "coord_to_pix() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.coord_to_pix"]], "copy() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.copy"]], "downsample() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.downsample"]], "edges (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.edges"]], "edges_max (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.edges_max"]], "edges_min (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.edges_min"]], "format_plot_xaxis() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.format_plot_xaxis"]], "from_gti() (gammapy.maps.timemapaxis class method)": [[188, "gammapy.maps.TimeMapAxis.from_gti"]], "from_gti_bounds() (gammapy.maps.timemapaxis class method)": [[188, "gammapy.maps.TimeMapAxis.from_gti_bounds"]], "from_table() (gammapy.maps.timemapaxis class method)": [[188, "gammapy.maps.TimeMapAxis.from_table"]], "from_time_bounds() (gammapy.maps.timemapaxis class method)": [[188, "gammapy.maps.TimeMapAxis.from_time_bounds"]], "from_time_edges() (gammapy.maps.timemapaxis class method)": [[188, "gammapy.maps.TimeMapAxis.from_time_edges"]], "group_table() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.group_table"]], "interp (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.interp"]], "is_aligned() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.is_aligned"]], "is_allclose() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.is_allclose"]], "is_contiguous (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.is_contiguous"]], "iter_by_edges (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.iter_by_edges"]], "name (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.name"]], "nbin (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.nbin"]], "node_type (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.node_type"]], "pix_to_coord() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.pix_to_coord"]], "pix_to_idx() (gammapy.maps.timemapaxis static method)": [[188, "gammapy.maps.TimeMapAxis.pix_to_idx"]], "reference_time (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.reference_time"]], "slice() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.slice"]], "squash() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.squash"]], "time_bounds (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_bounds"]], "time_delta (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_delta"]], "time_edges (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_edges"]], "time_format (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_format"]], "time_max (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_max"]], "time_mid (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_mid"]], "time_min (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.time_min"]], "to_contiguous() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.to_contiguous"]], "to_gti() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.to_gti"]], "to_header() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.to_header"]], "unit (gammapy.maps.timemapaxis attribute)": [[188, "gammapy.maps.TimeMapAxis.unit"]], "upsample() (gammapy.maps.timemapaxis method)": [[188, "gammapy.maps.TimeMapAxis.upsample"]], "wcsgeom (class in gammapy.maps)": [[189, "gammapy.maps.WcsGeom"]], "as_energy_true (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.as_energy_true"]], "axes (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.axes"]], "axes_names (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.axes_names"]], "bin_volume() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.bin_volume"]], "binary_structure() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.binary_structure"]], "boundary_mask() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.boundary_mask"]], "center_coord (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.center_coord"]], "center_pix (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.center_pix"]], "center_skydir (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.center_skydir"]], "contains() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.contains"]], "contains_pix() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.contains_pix"]], "coord_to_idx() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.coord_to_idx"]], "coord_to_pix() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.coord_to_pix"]], "copy() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.copy"]], "create() (gammapy.maps.wcsgeom class method)": [[189, "gammapy.maps.WcsGeom.create"]], "crop() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.crop"]], "cutout() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.cutout"]], "cutout_slices() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.cutout_slices"]], "data_nbytes() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.data_nbytes"]], "data_shape (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.data_shape"]], "data_shape_axes (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.data_shape_axes"]], "data_shape_image (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.data_shape_image"]], "downsample() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.downsample"]], "drop() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.drop"]], "energy_mask() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.energy_mask"]], "footprint (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.footprint"]], "footprint_rectangle_sky_region (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.footprint_rectangle_sky_region"]], "frame (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.frame"]], "from_aligned() (gammapy.maps.wcsgeom class method)": [[189, "gammapy.maps.WcsGeom.from_aligned"]], "from_hdulist() (gammapy.maps.wcsgeom class method)": [[189, "gammapy.maps.WcsGeom.from_hdulist"]], "from_header() (gammapy.maps.wcsgeom class method)": [[189, "gammapy.maps.WcsGeom.from_header"]], "get_coord() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.get_coord"]], "get_idx() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.get_idx"]], "get_pix() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.get_pix"]], "has_energy_axis (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.has_energy_axis"]], "is_aligned() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.is_aligned"]], "is_allclose() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.is_allclose"]], "is_allsky (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_allsky"]], "is_flat (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_flat"]], "is_hpx (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_hpx"]], "is_image (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_image"]], "is_region (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_region"]], "is_regular (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.is_regular"]], "ndim (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.ndim"]], "npix (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.npix"]], "pad() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.pad"]], "pix_to_coord() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.pix_to_coord"]], "pix_to_idx() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.pix_to_idx"]], "pixel_area (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.pixel_area"]], "pixel_scales (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.pixel_scales"]], "projection (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.projection"]], "region_mask() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.region_mask"]], "region_weights() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.region_weights"]], "rename_axes() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.rename_axes"]], "replace_axis() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.replace_axis"]], "resample_axis() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.resample_axis"]], "separation() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.separation"]], "shape_axes (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.shape_axes"]], "slice_by_idx() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.slice_by_idx"]], "solid_angle() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.solid_angle"]], "squash() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.squash"]], "to_bands_hdu() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_bands_hdu"]], "to_binsz() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_binsz"]], "to_cube() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_cube"]], "to_even_npix() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_even_npix"]], "to_header() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_header"]], "to_image() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_image"]], "to_odd_npix() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.to_odd_npix"]], "upsample() (gammapy.maps.wcsgeom method)": [[189, "gammapy.maps.WcsGeom.upsample"]], "wcs (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.wcs"]], "width (gammapy.maps.wcsgeom attribute)": [[189, "gammapy.maps.WcsGeom.width"]], "wcsmap (class in gammapy.maps)": [[190, "gammapy.maps.WcsMap"]], "coadd() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.coadd"]], "copy() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.copy"]], "create() (gammapy.maps.wcsmap class method)": [[190, "gammapy.maps.WcsMap.create"]], "crop() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.crop"]], "cumsum() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.cumsum"]], "data (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.data"]], "dot() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.dot"]], "downsample() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.downsample"]], "fill_by_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.fill_by_pix"]], "fill_events() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.fill_events"]], "from_geom() (gammapy.maps.wcsmap static method)": [[190, "gammapy.maps.WcsMap.from_geom"]], "from_hdulist() (gammapy.maps.wcsmap class method)": [[190, "gammapy.maps.WcsMap.from_hdulist"]], "from_stack() (gammapy.maps.wcsmap class method)": [[190, "gammapy.maps.WcsMap.from_stack"]], "geom (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.geom"]], "get_by_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_by_coord"]], "get_by_idx() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_by_idx"]], "get_by_pix() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.get_spectrum"]], "integral() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.integral"]], "interp_by_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.interp_to_geom"]], "is_allclose() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.is_allclose"]], "is_mask (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.is_mask"]], "iter_by_axis() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.iter_by_image_index"]], "mask_nearest_position() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.mask_nearest_position"]], "meta (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.meta"]], "normalize() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.normalize"]], "pad() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.pad"]], "plot_grid() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.plot_grid"]], "plot_interactive() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.plot_interactive"]], "quantity (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.quantity"]], "read() (gammapy.maps.wcsmap static method)": [[190, "gammapy.maps.WcsMap.read"]], "reduce() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.reduce"]], "reduce_over_axes() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.rename_axes"]], "reorder_axes() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.reproject_to_geom"]], "resample() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.resample"]], "resample_axis() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.resample_axis"]], "sample_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.sample_coord"]], "set_by_coord() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.set_by_coord"]], "set_by_idx() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.set_by_idx"]], "set_by_pix() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.slice_by_idx"]], "split_by_axis() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.split_by_axis"]], "sum_over_axes() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.sum_over_axes"]], "tag (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.tag"]], "to_cube() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.to_cube"]], "to_hdu() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.to_hdu"]], "to_hdulist() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.to_hdulist"]], "to_unit() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.to_unit"]], "unit (gammapy.maps.wcsmap attribute)": [[190, "gammapy.maps.WcsMap.unit"]], "upsample() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.upsample"]], "write() (gammapy.maps.wcsmap method)": [[190, "gammapy.maps.WcsMap.write"]], "wcsndmap (class in gammapy.maps)": [[191, "gammapy.maps.WcsNDMap"]], "binary_dilate() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.binary_dilate"]], "binary_erode() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.binary_erode"]], "coadd() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.coadd"]], "convolve() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.convolve"]], "copy() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.copy"]], "create() (gammapy.maps.wcsndmap class method)": [[191, "gammapy.maps.WcsNDMap.create"]], "crop() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.crop"]], "cumsum() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.cumsum"]], "cutout() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.cutout"]], "cutout_and_mask_region() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.cutout_and_mask_region"]], "data (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.data"]], "dot() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.dot"]], "downsample() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.downsample"]], "fill_by_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.fill_by_coord"]], "fill_by_idx() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.fill_by_idx"]], "fill_by_pix() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.fill_by_pix"]], "fill_events() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.fill_events"]], "from_geom() (gammapy.maps.wcsndmap static method)": [[191, "gammapy.maps.WcsNDMap.from_geom"]], "from_hdu() (gammapy.maps.wcsndmap class method)": [[191, "gammapy.maps.WcsNDMap.from_hdu"]], "from_hdulist() (gammapy.maps.wcsndmap class method)": [[191, "gammapy.maps.WcsNDMap.from_hdulist"]], "from_stack() (gammapy.maps.wcsndmap class method)": [[191, "gammapy.maps.WcsNDMap.from_stack"]], "geom (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.geom"]], "get_by_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_by_coord"]], "get_by_idx() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_by_idx"]], "get_by_pix() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_by_pix"]], "get_image_by_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_image_by_coord"]], "get_image_by_idx() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_image_by_idx"]], "get_image_by_pix() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_image_by_pix"]], "get_spectrum() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.get_spectrum"]], "integral() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.integral"]], "interp_by_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.interp_by_coord"]], "interp_by_pix() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.interp_by_pix"]], "interp_to_geom() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.interp_to_geom"]], "is_allclose() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.is_allclose"]], "is_mask (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.is_mask"]], "iter_by_axis() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.iter_by_axis"]], "iter_by_image() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.iter_by_image"]], "iter_by_image_data() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.iter_by_image_data"]], "iter_by_image_index() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.iter_by_image_index"]], "mask_contains_region() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.mask_contains_region"]], "mask_nearest_position() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.mask_nearest_position"]], "meta (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.meta"]], "normalize() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.normalize"]], "pad() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.pad"]], "plot() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.plot"]], "plot_grid() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.plot_grid"]], "plot_interactive() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.plot_interactive"]], "plot_mask() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.plot_mask"]], "quantity (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.quantity"]], "read() (gammapy.maps.wcsndmap static method)": [[191, "gammapy.maps.WcsNDMap.read"]], "reduce() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.reduce"]], "reduce_over_axes() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.reduce_over_axes"]], "rename_axes() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.rename_axes"]], "reorder_axes() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.reorder_axes"]], "reproject_by_image() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.reproject_by_image"]], "reproject_to_geom() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.reproject_to_geom"]], "resample() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.resample"]], "resample_axis() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.resample_axis"]], "sample_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.sample_coord"]], "set_by_coord() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.set_by_coord"]], "set_by_idx() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.set_by_idx"]], "set_by_pix() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.set_by_pix"]], "slice_by_idx() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.slice_by_idx"]], "smooth() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.smooth"]], "split_by_axis() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.split_by_axis"]], "stack() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.stack"]], "sum_over_axes() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.sum_over_axes"]], "tag (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.tag"]], "to_cube() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_cube"]], "to_hdu() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_hdu"]], "to_hdulist() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_hdulist"]], "to_region_nd_map() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_region_nd_map"]], "to_region_nd_map_histogram() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_region_nd_map_histogram"]], "to_unit() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.to_unit"]], "unit (gammapy.maps.wcsndmap attribute)": [[191, "gammapy.maps.WcsNDMap.unit"]], "upsample() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.upsample"]], "write() (gammapy.maps.wcsndmap method)": [[191, "gammapy.maps.WcsNDMap.write"]], "containment_radius() (in module gammapy.maps)": [[192, "gammapy.maps.containment_radius"]], "containment_region() (in module gammapy.maps)": [[193, "gammapy.maps.containment_region"]], "covariance (class in gammapy.modeling)": [[194, "gammapy.modeling.Covariance"]], "correlation (gammapy.modeling.covariance attribute)": [[194, "gammapy.modeling.Covariance.correlation"]], "data (gammapy.modeling.covariance attribute)": [[194, "gammapy.modeling.Covariance.data"]], "from_factor_matrix() (gammapy.modeling.covariance class method)": [[194, "gammapy.modeling.Covariance.from_factor_matrix"]], "from_stack() (gammapy.modeling.covariance class method)": [[194, "gammapy.modeling.Covariance.from_stack"]], "get_subcovariance() (gammapy.modeling.covariance method)": [[194, "gammapy.modeling.Covariance.get_subcovariance"]], "plot_correlation() (gammapy.modeling.covariance method)": [[194, "gammapy.modeling.Covariance.plot_correlation"]], "scipy_mvn (gammapy.modeling.covariance attribute)": [[194, "gammapy.modeling.Covariance.scipy_mvn"]], "set_subcovariance() (gammapy.modeling.covariance method)": [[194, "gammapy.modeling.Covariance.set_subcovariance"]], "shape (gammapy.modeling.covariance attribute)": [[194, "gammapy.modeling.Covariance.shape"]], "fit (class in gammapy.modeling)": [[195, "gammapy.modeling.Fit"]], "confidence() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.confidence"]], "covariance() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.covariance"]], "optimize() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.optimize"]], "run() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.run"]], "stat_contour() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.stat_contour"]], "stat_profile() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.stat_profile"]], "stat_surface() (gammapy.modeling.fit method)": [[195, "gammapy.modeling.Fit.stat_surface"]], "parameter (class in gammapy.modeling)": [[196, "gammapy.modeling.Parameter"]], "autoscale() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.autoscale"]], "check_limits() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.check_limits"]], "conf_max (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.conf_max"]], "conf_min (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.conf_min"]], "copy() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.copy"]], "error (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.error"]], "factor (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.factor"]], "factor_max (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.factor_max"]], "factor_min (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.factor_min"]], "frozen (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.frozen"]], "is_norm (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.is_norm"]], "max (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.max"]], "min (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.min"]], "name (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.name"]], "norm_parameters (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.norm_parameters"]], "prior (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.prior"]], "prior_stat_sum() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.prior_stat_sum"]], "quantity (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.quantity"]], "scale (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scale"]], "scale_method (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scale_method"]], "scan_max (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scan_max"]], "scan_min (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scan_min"]], "scan_n_sigma (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scan_n_sigma"]], "scan_values (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.scan_values"]], "to_dict() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.to_dict"]], "type (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.type"]], "unit (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.unit"]], "update_from_dict() (gammapy.modeling.parameter method)": [[196, "gammapy.modeling.Parameter.update_from_dict"]], "value (gammapy.modeling.parameter attribute)": [[196, "gammapy.modeling.Parameter.value"]], "parameters (class in gammapy.modeling)": [[197, "gammapy.modeling.Parameters"]], "autoscale() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.autoscale"]], "check_limits() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.check_limits"]], "copy() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.copy"]], "count() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.count"]], "free_parameters (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.free_parameters"]], "freeze_all() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.freeze_all"]], "from_dict() (gammapy.modeling.parameters class method)": [[197, "gammapy.modeling.Parameters.from_dict"]], "from_stack() (gammapy.modeling.parameters class method)": [[197, "gammapy.modeling.Parameters.from_stack"]], "index() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.index"]], "max (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.max"]], "min (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.min"]], "names (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.names"]], "norm_parameters (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.norm_parameters"]], "prior (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.prior"]], "prior_stat_sum() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.prior_stat_sum"]], "restore_status() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.restore_status"]], "select() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.select"]], "set_parameter_factors() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.set_parameter_factors"]], "to_dict() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.to_dict"]], "to_table() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.to_table"]], "types (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.types"]], "unfreeze_all() (gammapy.modeling.parameters method)": [[197, "gammapy.modeling.Parameters.unfreeze_all"]], "unique_parameters (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.unique_parameters"]], "value (gammapy.modeling.parameters attribute)": [[197, "gammapy.modeling.Parameters.value"]], "priorparameter (class in gammapy.modeling)": [[198, "gammapy.modeling.PriorParameter"]], "autoscale() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.autoscale"]], "check_limits() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.check_limits"]], "conf_max (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.conf_max"]], "conf_min (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.conf_min"]], "copy() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.copy"]], "error (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.error"]], "factor (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.factor"]], "factor_max (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.factor_max"]], "factor_min (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.factor_min"]], "frozen (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.frozen"]], "is_norm (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.is_norm"]], "max (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.max"]], "min (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.min"]], "name (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.name"]], "norm_parameters (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.norm_parameters"]], "prior (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.prior"]], "prior_stat_sum() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.prior_stat_sum"]], "quantity (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.quantity"]], "scale (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scale"]], "scale_method (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scale_method"]], "scan_max (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scan_max"]], "scan_min (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scan_min"]], "scan_n_sigma (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scan_n_sigma"]], "scan_values (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.scan_values"]], "to_dict() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.to_dict"]], "type (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.type"]], "unit (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.unit"]], "update_from_dict() (gammapy.modeling.priorparameter method)": [[198, "gammapy.modeling.PriorParameter.update_from_dict"]], "value (gammapy.modeling.priorparameter attribute)": [[198, "gammapy.modeling.PriorParameter.value"]], "priorparameters (class in gammapy.modeling)": [[199, "gammapy.modeling.PriorParameters"]], "autoscale() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.autoscale"]], "check_limits() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.check_limits"]], "copy() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.copy"]], "count() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.count"]], "free_parameters (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.free_parameters"]], "freeze_all() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.freeze_all"]], "from_dict() (gammapy.modeling.priorparameters class method)": [[199, "gammapy.modeling.PriorParameters.from_dict"]], "from_stack() (gammapy.modeling.priorparameters class method)": [[199, "gammapy.modeling.PriorParameters.from_stack"]], "index() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.index"]], "max (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.max"]], "min (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.min"]], "names (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.names"]], "norm_parameters (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.norm_parameters"]], "prior (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.prior"]], "prior_stat_sum() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.prior_stat_sum"]], "restore_status() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.restore_status"]], "select() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.select"]], "set_parameter_factors() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.set_parameter_factors"]], "to_dict() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.to_dict"]], "to_table() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.to_table"]], "types (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.types"]], "unfreeze_all() (gammapy.modeling.priorparameters method)": [[199, "gammapy.modeling.PriorParameters.unfreeze_all"]], "unique_parameters (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.unique_parameters"]], "value (gammapy.modeling.priorparameters attribute)": [[199, "gammapy.modeling.PriorParameters.value"]], "brokenpowerlawspectralmodel (class in gammapy.modeling.models)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.default_parameters"]], "ebreak (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.ebreak"]], "energy_flux() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.brokenpowerlawspectralmodel static method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.brokenpowerlawspectralmodel class method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.brokenpowerlawspectralmodel class method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.frozen"]], "index1 (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.index1"]], "index2 (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.index2"]], "integral() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.brokenpowerlawspectralmodel attribute)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.brokenpowerlawspectralmodel method)": [[200, "gammapy.modeling.models.BrokenPowerLawSpectralModel.unfreeze"]], "compoundspectralmodel (class in gammapy.modeling.models)": [[201, "gammapy.modeling.models.CompoundSpectralModel"]], "__call__() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.__call__"]], "copy() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.copy"]], "covariance (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.compoundspectralmodel class method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.compoundspectralmodel class method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.frozen"]], "integral() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.to_dict"]], "type (gammapy.modeling.models.compoundspectralmodel attribute)": [[201, "gammapy.modeling.models.CompoundSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.compoundspectralmodel method)": [[201, "gammapy.modeling.models.CompoundSpectralModel.unfreeze"]], "constantfluxspatialmodel (class in gammapy.modeling.models)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel"]], "__call__() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.__call__"]], "copy() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.copy"]], "covariance (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.evaluation_region"]], "frame (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.frame"]], "freeze() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.constantfluxspatialmodel class method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.from_position"]], "frozen (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.constantfluxspatialmodel static method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.position"]], "position_error (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.reassign"]], "tag (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.to_region"]], "type (gammapy.modeling.models.constantfluxspatialmodel attribute)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.constantfluxspatialmodel method)": [[202, "gammapy.modeling.models.ConstantFluxSpatialModel.unfreeze"]], "constantspatialmodel (class in gammapy.modeling.models)": [[203, "gammapy.modeling.models.ConstantSpatialModel"]], "__call__() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.__call__"]], "copy() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.copy"]], "covariance (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constantspatialmodel static method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.evaluation_region"]], "frame (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.frame"]], "freeze() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.constantspatialmodel class method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantspatialmodel class method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.constantspatialmodel class method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.from_position"]], "frozen (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.position"]], "position_error (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.reassign"]], "tag (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.to_region"]], "type (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.constantspatialmodel method)": [[203, "gammapy.modeling.models.ConstantSpatialModel.unfreeze"]], "value (gammapy.modeling.models.constantspatialmodel attribute)": [[203, "gammapy.modeling.models.ConstantSpatialModel.value"]], "constantspectralmodel (class in gammapy.modeling.models)": [[204, "gammapy.modeling.models.ConstantSpectralModel"]], "__call__() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.__call__"]], "const (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.const"]], "copy() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.copy"]], "covariance (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.constantspectralmodel static method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.constantspectralmodel class method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constantspectralmodel class method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.frozen"]], "integral() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.to_dict"]], "type (gammapy.modeling.models.constantspectralmodel attribute)": [[204, "gammapy.modeling.models.ConstantSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.constantspectralmodel method)": [[204, "gammapy.modeling.models.ConstantSpectralModel.unfreeze"]], "constanttemporalmodel (class in gammapy.modeling.models)": [[205, "gammapy.modeling.models.ConstantTemporalModel"]], "__call__() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.__call__"]], "copy() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.copy"]], "covariance (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.constanttemporalmodel static method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.constanttemporalmodel class method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.constanttemporalmodel class method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.frozen"]], "integral() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.parameters"]], "plot() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.plot"]], "reassign() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.sample_time"]], "tag (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.constanttemporalmodel static method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.to_dict"]], "type (gammapy.modeling.models.constanttemporalmodel attribute)": [[205, "gammapy.modeling.models.ConstantTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.constanttemporalmodel method)": [[205, "gammapy.modeling.models.ConstantTemporalModel.unfreeze"]], "datasetmodels (class in gammapy.modeling.models)": [[206, "gammapy.modeling.models.DatasetModels"]], "copy() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.copy"]], "count() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.count"]], "covariance (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.covariance"]], "freeze() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.freeze"]], "from_dict() (gammapy.modeling.models.datasetmodels class method)": [[206, "gammapy.modeling.models.DatasetModels.from_dict"]], "from_yaml() (gammapy.modeling.models.datasetmodels class method)": [[206, "gammapy.modeling.models.DatasetModels.from_yaml"]], "frozen (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.frozen"]], "index() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.index"]], "names (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.names"]], "parameters (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.parameters"]], "parameters_unique_names (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.parameters_unique_names"]], "plot_positions() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.plot_positions"]], "plot_regions() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.plot_regions"]], "positions (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.positions"]], "read() (gammapy.modeling.models.datasetmodels class method)": [[206, "gammapy.modeling.models.DatasetModels.read"]], "read_covariance() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.read_covariance"]], "reassign() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.reassign"]], "restore_status() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.restore_status"]], "select() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.select"]], "select_from_geom() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.select_from_geom"]], "select_mask() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.select_mask"]], "select_region() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.select_region"]], "selection_mask() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.selection_mask"]], "set_parameters_bounds() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.set_parameters_bounds"]], "to_dict() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_dict"]], "to_parameters_table() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_parameters_table"]], "to_regions() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_regions"]], "to_template_sky_model() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_template_sky_model"]], "to_template_spectral_model() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_template_spectral_model"]], "to_yaml() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.to_yaml"]], "unfreeze() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.unfreeze"]], "update_link_label() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.update_link_label"]], "update_parameters_from_table() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.update_parameters_from_table"]], "wcs_geom (gammapy.modeling.models.datasetmodels attribute)": [[206, "gammapy.modeling.models.DatasetModels.wcs_geom"]], "write() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.write"]], "write_covariance() (gammapy.modeling.models.datasetmodels method)": [[206, "gammapy.modeling.models.DatasetModels.write_covariance"]], "diskspatialmodel (class in gammapy.modeling.models)": [[207, "gammapy.modeling.models.DiskSpatialModel"]], "__call__() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.__call__"]], "copy() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.copy"]], "covariance (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.default_parameters"]], "e (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.e"]], "edge_width (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.edge_width"]], "evaluate() (gammapy.modeling.models.diskspatialmodel static method)": [[207, "gammapy.modeling.models.DiskSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.diskspatialmodel class method)": [[207, "gammapy.modeling.models.DiskSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.diskspatialmodel class method)": [[207, "gammapy.modeling.models.DiskSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.diskspatialmodel class method)": [[207, "gammapy.modeling.models.DiskSpatialModel.from_position"]], "from_region() (gammapy.modeling.models.diskspatialmodel class method)": [[207, "gammapy.modeling.models.DiskSpatialModel.from_region"]], "frozen (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.parameters"]], "phi (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.position"]], "position_error (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.r_0"]], "reassign() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.reassign"]], "tag (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.to_region"]], "type (gammapy.modeling.models.diskspatialmodel attribute)": [[207, "gammapy.modeling.models.DiskSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.diskspatialmodel method)": [[207, "gammapy.modeling.models.DiskSpatialModel.unfreeze"]], "eblabsorptionnormspectralmodel (class in gammapy.modeling.models)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel"]], "__call__() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.__call__"]], "alpha_norm (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.alpha_norm"]], "copy() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.plot_error"]], "read() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.read"]], "read_builtin() (gammapy.modeling.models.eblabsorptionnormspectralmodel class method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.read_builtin"]], "reassign() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.reassign"]], "redshift (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.redshift"]], "reference_fluxes() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.eblabsorptionnormspectralmodel attribute)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.eblabsorptionnormspectralmodel method)": [[208, "gammapy.modeling.models.EBLAbsorptionNormSpectralModel.unfreeze"]], "ebl_data_builtin (in module gammapy.modeling.models)": [[209, "gammapy.modeling.models.EBL_DATA_BUILTIN"]], "expcutoffpowerlaw3fglspectralmodel (class in gammapy.modeling.models)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.default_parameters"]], "ecut (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.ecut"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel static method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel class method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel class method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel attribute)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlaw3fglspectralmodel method)": [[210, "gammapy.modeling.models.ExpCutoffPowerLaw3FGLSpectralModel.unfreeze"]], "expcutoffpowerlawnormspectralmodel (class in gammapy.modeling.models)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.__call__"]], "alpha (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.alpha"]], "copy() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel static method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel class method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel class method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.is_norm_spectral_model"]], "lambda_ (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.lambda_"]], "norm (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel attribute)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlawnormspectralmodel method)": [[211, "gammapy.modeling.models.ExpCutoffPowerLawNormSpectralModel.unfreeze"]], "expcutoffpowerlawspectralmodel (class in gammapy.modeling.models)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.__call__"]], "alpha (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.alpha"]], "amplitude (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.default_parameters"]], "e_peak (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.e_peak"]], "energy_flux() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.expcutoffpowerlawspectralmodel static method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.expcutoffpowerlawspectralmodel class method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expcutoffpowerlawspectralmodel class method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.frozen"]], "index (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.index"]], "integral() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.is_norm_spectral_model"]], "lambda_ (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.lambda_"]], "parameters (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.expcutoffpowerlawspectralmodel attribute)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.expcutoffpowerlawspectralmodel method)": [[212, "gammapy.modeling.models.ExpCutoffPowerLawSpectralModel.unfreeze"]], "expdecaytemporalmodel (class in gammapy.modeling.models)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel"]], "__call__() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.__call__"]], "copy() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.copy"]], "covariance (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.expdecaytemporalmodel static method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.expdecaytemporalmodel class method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.expdecaytemporalmodel class method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.frozen"]], "integral() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.parameters"]], "plot() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.plot"]], "reassign() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.sample_time"]], "t0 (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.t0"]], "t_ref (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.t_ref"]], "tag (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.expdecaytemporalmodel static method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.to_dict"]], "type (gammapy.modeling.models.expdecaytemporalmodel attribute)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.expdecaytemporalmodel method)": [[213, "gammapy.modeling.models.ExpDecayTemporalModel.unfreeze"]], "fovbackgroundmodel (class in gammapy.modeling.models)": [[214, "gammapy.modeling.models.FoVBackgroundModel"]], "contributes() (gammapy.modeling.models.fovbackgroundmodel static method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.contributes"]], "copy() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.copy"]], "covariance (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.covariance"]], "default_parameters (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.default_parameters"]], "evaluate() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.evaluate_geom"]], "freeze() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.freeze"]], "from_dict() (gammapy.modeling.models.fovbackgroundmodel class method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.from_dict"]], "from_parameters() (gammapy.modeling.models.fovbackgroundmodel class method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.from_parameters"]], "frozen (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.frozen"]], "name (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.name"]], "parameters (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.parameters"]], "reassign() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.reassign"]], "reset_to_default() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.reset_to_default"]], "spatial_model (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.spatial_model"]], "spectral_model (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.spectral_model"]], "tag (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.tag"]], "to_dict() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.to_dict"]], "type (gammapy.modeling.models.fovbackgroundmodel attribute)": [[214, "gammapy.modeling.models.FoVBackgroundModel.type"]], "unfreeze() (gammapy.modeling.models.fovbackgroundmodel method)": [[214, "gammapy.modeling.models.FoVBackgroundModel.unfreeze"]], "gaussianspatialmodel (class in gammapy.modeling.models)": [[215, "gammapy.modeling.models.GaussianSpatialModel"]], "__call__() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.__call__"]], "copy() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.copy"]], "covariance (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.default_parameters"]], "e (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.e"]], "evaluate() (gammapy.modeling.models.gaussianspatialmodel static method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussianspatialmodel class method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussianspatialmodel class method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.gaussianspatialmodel class method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.from_position"]], "frozen (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.parameters"]], "phi (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.position"]], "position_error (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.reassign"]], "sigma (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.sigma"]], "tag (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.to_region"]], "type (gammapy.modeling.models.gaussianspatialmodel attribute)": [[215, "gammapy.modeling.models.GaussianSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.gaussianspatialmodel method)": [[215, "gammapy.modeling.models.GaussianSpatialModel.unfreeze"]], "gaussianspectralmodel (class in gammapy.modeling.models)": [[216, "gammapy.modeling.models.GaussianSpectralModel"]], "__call__() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.copy"]], "covariance (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.gaussianspectralmodel static method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussianspectralmodel class method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussianspectralmodel class method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.frozen"]], "integral() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.is_norm_spectral_model"]], "mean (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.mean"]], "parameters (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.reference_fluxes"]], "sigma (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.sigma"]], "spectral_index() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.to_dict"]], "type (gammapy.modeling.models.gaussianspectralmodel attribute)": [[216, "gammapy.modeling.models.GaussianSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.gaussianspectralmodel method)": [[216, "gammapy.modeling.models.GaussianSpectralModel.unfreeze"]], "gaussiantemporalmodel (class in gammapy.modeling.models)": [[217, "gammapy.modeling.models.GaussianTemporalModel"]], "__call__() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.__call__"]], "copy() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.copy"]], "covariance (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.gaussiantemporalmodel static method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.gaussiantemporalmodel class method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.gaussiantemporalmodel class method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.frozen"]], "integral() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.parameters"]], "plot() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.plot"]], "reassign() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.sample_time"]], "sigma (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.sigma"]], "t_ref (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.t_ref"]], "tag (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.gaussiantemporalmodel static method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.to_dict"]], "type (gammapy.modeling.models.gaussiantemporalmodel attribute)": [[217, "gammapy.modeling.models.GaussianTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.gaussiantemporalmodel method)": [[217, "gammapy.modeling.models.GaussianTemporalModel.unfreeze"]], "generalizedgaussianspatialmodel (class in gammapy.modeling.models)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel"]], "__call__() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.__call__"]], "copy() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.copy"]], "covariance (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.default_parameters"]], "e (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.e"]], "eta (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.eta"]], "evaluate() (gammapy.modeling.models.generalizedgaussianspatialmodel static method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.generalizedgaussianspatialmodel class method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.from_position"]], "frozen (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.parameters"]], "phi (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.phi"]], "phi_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position"]], "position_error (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.r_0"]], "reassign() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.reassign"]], "tag (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.to_region"]], "type (gammapy.modeling.models.generalizedgaussianspatialmodel attribute)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.generalizedgaussianspatialmodel method)": [[218, "gammapy.modeling.models.GeneralizedGaussianSpatialModel.unfreeze"]], "generalizedgaussiantemporalmodel (class in gammapy.modeling.models)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel"]], "__call__() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.__call__"]], "copy() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.copy"]], "covariance (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.default_parameters"]], "eta (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.eta"]], "evaluate() (gammapy.modeling.models.generalizedgaussiantemporalmodel static method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.generalizedgaussiantemporalmodel class method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.generalizedgaussiantemporalmodel class method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.frozen"]], "integral() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.parameters"]], "plot() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.plot"]], "reassign() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.sample_time"]], "t_decay (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_decay"]], "t_ref (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_ref"]], "t_rise (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.t_rise"]], "tag (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.generalizedgaussiantemporalmodel static method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.to_dict"]], "type (gammapy.modeling.models.generalizedgaussiantemporalmodel attribute)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.generalizedgaussiantemporalmodel method)": [[219, "gammapy.modeling.models.GeneralizedGaussianTemporalModel.unfreeze"]], "lightcurvetemplatetemporalmodel (class in gammapy.modeling.models)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel"]], "__call__() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.__call__"]], "copy() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.copy"]], "covariance (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_parameters"]], "from_table() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.from_table"]], "frozen (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.frozen"]], "integral() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.parameters"]], "plot() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.plot"]], "read() (gammapy.modeling.models.lightcurvetemplatetemporalmodel class method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.read"]], "reassign() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.t_ref"]], "tag (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.lightcurvetemplatetemporalmodel static method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.to_dict"]], "to_table() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.to_table"]], "type (gammapy.modeling.models.lightcurvetemplatetemporalmodel attribute)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.unfreeze"]], "write() (gammapy.modeling.models.lightcurvetemplatetemporalmodel method)": [[220, "gammapy.modeling.models.LightCurveTemplateTemporalModel.write"]], "lineartemporalmodel (class in gammapy.modeling.models)": [[221, "gammapy.modeling.models.LinearTemporalModel"]], "__call__() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.__call__"]], "alpha (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.alpha"]], "beta (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.beta"]], "copy() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.copy"]], "covariance (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.lineartemporalmodel static method)": [[221, "gammapy.modeling.models.LinearTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.lineartemporalmodel class method)": [[221, "gammapy.modeling.models.LinearTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.lineartemporalmodel class method)": [[221, "gammapy.modeling.models.LinearTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.frozen"]], "integral() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.parameters"]], "plot() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.plot"]], "reassign() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.t_ref"]], "tag (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.lineartemporalmodel static method)": [[221, "gammapy.modeling.models.LinearTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.to_dict"]], "type (gammapy.modeling.models.lineartemporalmodel attribute)": [[221, "gammapy.modeling.models.LinearTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.lineartemporalmodel method)": [[221, "gammapy.modeling.models.LinearTemporalModel.unfreeze"]], "logparabolanormspectralmodel (class in gammapy.modeling.models)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel"]], "__call__() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.__call__"]], "alpha (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.alpha"]], "beta (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.beta"]], "copy() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.logparabolanormspectralmodel static method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_dict"]], "from_log10() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_log10"]], "from_parameters() (gammapy.modeling.models.logparabolanormspectralmodel class method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.logparabolanormspectralmodel attribute)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.logparabolanormspectralmodel method)": [[222, "gammapy.modeling.models.LogParabolaNormSpectralModel.unfreeze"]], "logparabolaspectralmodel (class in gammapy.modeling.models)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel"]], "__call__() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.__call__"]], "alpha (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.alpha"]], "amplitude (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.amplitude"]], "beta (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.beta"]], "copy() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.copy"]], "covariance (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.default_parameters"]], "e_peak (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.e_peak"]], "energy_flux() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.logparabolaspectralmodel static method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.from_dict"]], "from_log10() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.from_log10"]], "from_parameters() (gammapy.modeling.models.logparabolaspectralmodel class method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.frozen"]], "integral() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.reassign"]], "reference (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.to_dict"]], "type (gammapy.modeling.models.logparabolaspectralmodel attribute)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.logparabolaspectralmodel method)": [[223, "gammapy.modeling.models.LogParabolaSpectralModel.unfreeze"]], "model_registry (in module gammapy.modeling.models)": [[224, "gammapy.modeling.models.MODEL_REGISTRY"]], "meyercrabspectralmodel (class in gammapy.modeling.models)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel"]], "__call__() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.__call__"]], "coefficients (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.coefficients"]], "copy() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.copy"]], "covariance (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.meyercrabspectralmodel static method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.meyercrabspectralmodel class method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.meyercrabspectralmodel class method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.frozen"]], "integral() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.norm"]], "parameters (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.spectral_index_error"]], "to_dict() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.to_dict"]], "type (gammapy.modeling.models.meyercrabspectralmodel attribute)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.meyercrabspectralmodel method)": [[225, "gammapy.modeling.models.MeyerCrabSpectralModel.unfreeze"]], "model (class in gammapy.modeling.models)": [[226, "gammapy.modeling.models.Model"]], "create() (gammapy.modeling.models.model static method)": [[226, "gammapy.modeling.models.Model.create"]], "from_dict() (gammapy.modeling.models.model static method)": [[226, "gammapy.modeling.models.Model.from_dict"]], "modelbase (class in gammapy.modeling.models)": [[227, "gammapy.modeling.models.ModelBase"]], "copy() (gammapy.modeling.models.modelbase method)": [[227, "gammapy.modeling.models.ModelBase.copy"]], "covariance (gammapy.modeling.models.modelbase attribute)": [[227, "gammapy.modeling.models.ModelBase.covariance"]], "freeze() (gammapy.modeling.models.modelbase method)": [[227, "gammapy.modeling.models.ModelBase.freeze"]], "from_dict() (gammapy.modeling.models.modelbase class method)": [[227, "gammapy.modeling.models.ModelBase.from_dict"]], "from_parameters() (gammapy.modeling.models.modelbase class method)": [[227, "gammapy.modeling.models.ModelBase.from_parameters"]], "frozen (gammapy.modeling.models.modelbase attribute)": [[227, "gammapy.modeling.models.ModelBase.frozen"]], "parameters (gammapy.modeling.models.modelbase attribute)": [[227, "gammapy.modeling.models.ModelBase.parameters"]], "reassign() (gammapy.modeling.models.modelbase method)": [[227, "gammapy.modeling.models.ModelBase.reassign"]], "to_dict() (gammapy.modeling.models.modelbase method)": [[227, "gammapy.modeling.models.ModelBase.to_dict"]], "type (gammapy.modeling.models.modelbase attribute)": [[227, "gammapy.modeling.models.ModelBase.type"]], "unfreeze() (gammapy.modeling.models.modelbase method)": [[227, "gammapy.modeling.models.ModelBase.unfreeze"]], "models (class in gammapy.modeling.models)": [[228, "gammapy.modeling.models.Models"]], "append() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.append"]], "clear() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.clear"]], "copy() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.copy"]], "count() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.count"]], "covariance (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.covariance"]], "extend() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.extend"]], "freeze() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.freeze"]], "from_dict() (gammapy.modeling.models.models class method)": [[228, "gammapy.modeling.models.Models.from_dict"]], "from_yaml() (gammapy.modeling.models.models class method)": [[228, "gammapy.modeling.models.Models.from_yaml"]], "frozen (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.frozen"]], "index() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.index"]], "insert() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.insert"]], "names (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.names"]], "parameters (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.parameters"]], "parameters_unique_names (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.parameters_unique_names"]], "plot_positions() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.plot_positions"]], "plot_regions() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.plot_regions"]], "pop() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.pop"]], "positions (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.positions"]], "read() (gammapy.modeling.models.models class method)": [[228, "gammapy.modeling.models.Models.read"]], "read_covariance() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.read_covariance"]], "reassign() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.reassign"]], "remove() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.remove"]], "restore_status() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.restore_status"]], "reverse() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.reverse"]], "select() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.select"]], "select_from_geom() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.select_from_geom"]], "select_mask() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.select_mask"]], "select_region() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.select_region"]], "selection_mask() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.selection_mask"]], "set_parameters_bounds() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.set_parameters_bounds"]], "set_prior() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.set_prior"]], "to_dict() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_dict"]], "to_parameters_table() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_parameters_table"]], "to_regions() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_regions"]], "to_template_sky_model() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_template_sky_model"]], "to_template_spectral_model() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_template_spectral_model"]], "to_yaml() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.to_yaml"]], "unfreeze() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.unfreeze"]], "update_link_label() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.update_link_label"]], "update_parameters_from_table() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.update_parameters_from_table"]], "wcs_geom (gammapy.modeling.models.models attribute)": [[228, "gammapy.modeling.models.Models.wcs_geom"]], "write() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.write"]], "write_covariance() (gammapy.modeling.models.models method)": [[228, "gammapy.modeling.models.Models.write_covariance"]], "naimaspectralmodel (class in gammapy.modeling.models)": [[229, "gammapy.modeling.models.NaimaSpectralModel"]], "__call__() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.__call__"]], "copy() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.copy"]], "covariance (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.naimaspectralmodel class method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.naimaspectralmodel class method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.frozen"]], "include_ssc (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.include_ssc"]], "integral() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.parameters"]], "particle_distribution (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.particle_distribution"]], "pivot_energy (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.spectral_index_error"]], "ssc_model (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.ssc_model"]], "tag (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.to_dict"]], "type (gammapy.modeling.models.naimaspectralmodel attribute)": [[229, "gammapy.modeling.models.NaimaSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.naimaspectralmodel method)": [[229, "gammapy.modeling.models.NaimaSpectralModel.unfreeze"]], "piecewisenormspatialmodel (class in gammapy.modeling.models)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel"]], "__call__() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.__call__"]], "coords (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.coords"]], "copy() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.copy"]], "covariance (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.piecewisenormspatialmodel class method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.from_position"]], "frozen (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.is_energy_dependent"]], "norms (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.norms"]], "parameters (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.position"]], "position_error (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.reassign"]], "tag (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.to_dict"]], "type (gammapy.modeling.models.piecewisenormspatialmodel attribute)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.piecewisenormspatialmodel method)": [[230, "gammapy.modeling.models.PiecewiseNormSpatialModel.unfreeze"]], "piecewisenormspectralmodel (class in gammapy.modeling.models)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel"]], "__call__() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.__call__"]], "copy() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.default_parameters"]], "energy (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy"]], "energy_flux() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.piecewisenormspectralmodel class method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.piecewisenormspectralmodel class method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.is_norm_spectral_model"]], "norms (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.norms"]], "parameters (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.piecewisenormspectralmodel attribute)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.piecewisenormspectralmodel method)": [[231, "gammapy.modeling.models.PiecewiseNormSpectralModel.unfreeze"]], "pointspatialmodel (class in gammapy.modeling.models)": [[232, "gammapy.modeling.models.PointSpatialModel"]], "__call__() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.__call__"]], "copy() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.copy"]], "covariance (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.default_parameters"]], "evaluate_geom() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.pointspatialmodel class method)": [[232, "gammapy.modeling.models.PointSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.pointspatialmodel class method)": [[232, "gammapy.modeling.models.PointSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.pointspatialmodel class method)": [[232, "gammapy.modeling.models.PointSpatialModel.from_position"]], "frozen (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.position"]], "position_error (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.reassign"]], "tag (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.to_region"]], "type (gammapy.modeling.models.pointspatialmodel attribute)": [[232, "gammapy.modeling.models.PointSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.pointspatialmodel method)": [[232, "gammapy.modeling.models.PointSpatialModel.unfreeze"]], "powerlaw2spectralmodel (class in gammapy.modeling.models)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel"]], "__call__() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.__call__"]], "amplitude (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.amplitude"]], "copy() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.default_parameters"]], "emax (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.emax"]], "emin (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.emin"]], "energy_flux() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlaw2spectralmodel static method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlaw2spectralmodel static method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlaw2spectralmodel class method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlaw2spectralmodel class method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.frozen"]], "index (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.index"]], "integral() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.tag"]], "to_dict() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlaw2spectralmodel attribute)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlaw2spectralmodel method)": [[233, "gammapy.modeling.models.PowerLaw2SpectralModel.unfreeze"]], "powerlawnormspectralmodel (class in gammapy.modeling.models)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel"]], "__call__() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.__call__"]], "copy() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate"]], "evaluate_energy_flux() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_energy_flux"]], "evaluate_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlawnormspectralmodel static method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawnormspectralmodel class method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawnormspectralmodel class method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.frozen"]], "integral() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.norm"]], "parameters (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.reassign"]], "reference (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.tag"]], "tilt (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.tilt"]], "to_dict() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlawnormspectralmodel attribute)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawnormspectralmodel method)": [[234, "gammapy.modeling.models.PowerLawNormSpectralModel.unfreeze"]], "powerlawspectralmodel (class in gammapy.modeling.models)": [[235, "gammapy.modeling.models.PowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.powerlawspectralmodel static method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.evaluate"]], "evaluate_energy_flux() (gammapy.modeling.models.powerlawspectralmodel static method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_energy_flux"]], "evaluate_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_error"]], "evaluate_integral() (gammapy.modeling.models.powerlawspectralmodel static method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.evaluate_integral"]], "freeze() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawspectralmodel class method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawspectralmodel class method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.frozen"]], "index (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.index"]], "integral() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.powerlawspectralmodel attribute)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawspectralmodel method)": [[235, "gammapy.modeling.models.PowerLawSpectralModel.unfreeze"]], "powerlawtemporalmodel (class in gammapy.modeling.models)": [[236, "gammapy.modeling.models.PowerLawTemporalModel"]], "__call__() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.__call__"]], "alpha (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.alpha"]], "copy() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.copy"]], "covariance (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.powerlawtemporalmodel static method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.powerlawtemporalmodel class method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.powerlawtemporalmodel class method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.frozen"]], "integral() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.parameters"]], "plot() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.plot"]], "reassign() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.sample_time"]], "t0 (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.t0"]], "t_ref (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.t_ref"]], "tag (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.powerlawtemporalmodel static method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.to_dict"]], "type (gammapy.modeling.models.powerlawtemporalmodel attribute)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.powerlawtemporalmodel method)": [[236, "gammapy.modeling.models.PowerLawTemporalModel.unfreeze"]], "spatial_model_registry (in module gammapy.modeling.models)": [[237, "gammapy.modeling.models.SPATIAL_MODEL_REGISTRY"]], "spectral_model_registry (in module gammapy.modeling.models)": [[238, "gammapy.modeling.models.SPECTRAL_MODEL_REGISTRY"]], "scalespectralmodel (class in gammapy.modeling.models)": [[239, "gammapy.modeling.models.ScaleSpectralModel"]], "__call__() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.__call__"]], "copy() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.copy"]], "covariance (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.scalespectralmodel class method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.scalespectralmodel class method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.frozen"]], "integral() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.is_norm_spectral_model"]], "norm (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.norm"]], "parameters (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.to_dict"]], "type (gammapy.modeling.models.scalespectralmodel attribute)": [[239, "gammapy.modeling.models.ScaleSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.scalespectralmodel method)": [[239, "gammapy.modeling.models.ScaleSpectralModel.unfreeze"]], "shell2spatialmodel (class in gammapy.modeling.models)": [[240, "gammapy.modeling.models.Shell2SpatialModel"]], "__call__() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.__call__"]], "copy() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.copy"]], "covariance (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.default_parameters"]], "eta (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.eta"]], "evaluate() (gammapy.modeling.models.shell2spatialmodel static method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.shell2spatialmodel class method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.shell2spatialmodel class method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.shell2spatialmodel class method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.from_position"]], "frozen (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.lon_0"]], "parameters (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.phi_0"]], "plot() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.plot"]], "plot_error() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.plot_position_error"]], "position (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.position"]], "position_error (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.position_lonlat"]], "r_0 (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.r_0"]], "r_in (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.r_in"]], "reassign() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.reassign"]], "tag (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.tag"]], "to_dict() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.to_region"]], "type (gammapy.modeling.models.shell2spatialmodel attribute)": [[240, "gammapy.modeling.models.Shell2SpatialModel.type"]], "unfreeze() (gammapy.modeling.models.shell2spatialmodel method)": [[240, "gammapy.modeling.models.Shell2SpatialModel.unfreeze"]], "shellspatialmodel (class in gammapy.modeling.models)": [[241, "gammapy.modeling.models.ShellSpatialModel"]], "__call__() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.__call__"]], "copy() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.copy"]], "covariance (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.shellspatialmodel static method)": [[241, "gammapy.modeling.models.ShellSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.shellspatialmodel class method)": [[241, "gammapy.modeling.models.ShellSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.shellspatialmodel class method)": [[241, "gammapy.modeling.models.ShellSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.shellspatialmodel class method)": [[241, "gammapy.modeling.models.ShellSpatialModel.from_position"]], "frozen (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.lon_0"]], "parameters (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.position"]], "position_error (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.position_lonlat"]], "radius (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.radius"]], "reassign() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.reassign"]], "tag (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.to_region"]], "type (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.shellspatialmodel method)": [[241, "gammapy.modeling.models.ShellSpatialModel.unfreeze"]], "width (gammapy.modeling.models.shellspatialmodel attribute)": [[241, "gammapy.modeling.models.ShellSpatialModel.width"]], "sinetemporalmodel (class in gammapy.modeling.models)": [[242, "gammapy.modeling.models.SineTemporalModel"]], "__call__() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.__call__"]], "amp (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.amp"]], "copy() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.copy"]], "covariance (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.sinetemporalmodel static method)": [[242, "gammapy.modeling.models.SineTemporalModel.evaluate"]], "freeze() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.sinetemporalmodel class method)": [[242, "gammapy.modeling.models.SineTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.sinetemporalmodel class method)": [[242, "gammapy.modeling.models.SineTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.frozen"]], "integral() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.is_energy_dependent"]], "omega (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.omega"]], "parameters (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.parameters"]], "plot() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.plot"]], "reassign() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.t_ref"]], "tag (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.sinetemporalmodel static method)": [[242, "gammapy.modeling.models.SineTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.to_dict"]], "type (gammapy.modeling.models.sinetemporalmodel attribute)": [[242, "gammapy.modeling.models.SineTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.sinetemporalmodel method)": [[242, "gammapy.modeling.models.SineTemporalModel.unfreeze"]], "skymodel (class in gammapy.modeling.models)": [[243, "gammapy.modeling.models.SkyModel"]], "__call__() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.__call__"]], "contributes() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.contributes"]], "copy() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.copy"]], "covariance (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.covariance"]], "create() (gammapy.modeling.models.skymodel class method)": [[243, "gammapy.modeling.models.SkyModel.create"]], "default_parameters (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.default_parameters"]], "evaluate() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.evaluation_region"]], "frame (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.frame"]], "freeze() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.freeze"]], "from_dict() (gammapy.modeling.models.skymodel class method)": [[243, "gammapy.modeling.models.SkyModel.from_dict"]], "from_parameters() (gammapy.modeling.models.skymodel class method)": [[243, "gammapy.modeling.models.SkyModel.from_parameters"]], "frozen (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.frozen"]], "integrate_geom() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.integrate_geom"]], "name (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.name"]], "parameters (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.parameters"]], "position (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.position"]], "position_lonlat (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.position_lonlat"]], "reassign() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.reassign"]], "spatial_model (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.spatial_model"]], "spectral_model (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.spectral_model"]], "tag (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.tag"]], "temporal_model (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.temporal_model"]], "to_dict() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.to_dict"]], "type (gammapy.modeling.models.skymodel attribute)": [[243, "gammapy.modeling.models.SkyModel.type"]], "unfreeze() (gammapy.modeling.models.skymodel method)": [[243, "gammapy.modeling.models.SkyModel.unfreeze"]], "smoothbrokenpowerlawspectralmodel (class in gammapy.modeling.models)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel"]], "__call__() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.amplitude"]], "beta (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.beta"]], "copy() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.copy"]], "covariance (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.default_parameters"]], "ebreak (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.ebreak"]], "energy_flux() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel static method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel class method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel class method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.frozen"]], "index1 (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.index1"]], "index2 (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.index2"]], "integral() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reassign"]], "reference (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.to_dict"]], "type (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel attribute)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.smoothbrokenpowerlawspectralmodel method)": [[244, "gammapy.modeling.models.SmoothBrokenPowerLawSpectralModel.unfreeze"]], "spatialmodel (class in gammapy.modeling.models)": [[245, "gammapy.modeling.models.SpatialModel"]], "__call__() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.__call__"]], "copy() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.copy"]], "covariance (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.default_parameters"]], "evaluate_geom() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.spatialmodel class method)": [[245, "gammapy.modeling.models.SpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.spatialmodel class method)": [[245, "gammapy.modeling.models.SpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.spatialmodel class method)": [[245, "gammapy.modeling.models.SpatialModel.from_position"]], "frozen (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.phi_0"]], "plot() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.plot"]], "plot_error() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.plot_position_error"]], "position (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.position"]], "position_error (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.reassign"]], "to_dict() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.to_dict"]], "type (gammapy.modeling.models.spatialmodel attribute)": [[245, "gammapy.modeling.models.SpatialModel.type"]], "unfreeze() (gammapy.modeling.models.spatialmodel method)": [[245, "gammapy.modeling.models.SpatialModel.unfreeze"]], "spectralmodel (class in gammapy.modeling.models)": [[246, "gammapy.modeling.models.SpectralModel"]], "__call__() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.__call__"]], "copy() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.copy"]], "covariance (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.energy_flux_error"]], "evaluate_error() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.spectralmodel class method)": [[246, "gammapy.modeling.models.SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.spectralmodel class method)": [[246, "gammapy.modeling.models.SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.frozen"]], "integral() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.spectral_index_error"]], "to_dict() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.to_dict"]], "type (gammapy.modeling.models.spectralmodel attribute)": [[246, "gammapy.modeling.models.SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.spectralmodel method)": [[246, "gammapy.modeling.models.SpectralModel.unfreeze"]], "superexpcutoffpowerlaw3fglspectralmodel (class in gammapy.modeling.models)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.default_parameters"]], "ecut (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.ecut"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel static method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel class method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel class method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel attribute)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw3fglspectralmodel method)": [[247, "gammapy.modeling.models.SuperExpCutoffPowerLaw3FGLSpectralModel.unfreeze"]], "superexpcutoffpowerlaw4fgldr3spectralmodel (class in gammapy.modeling.models)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel static method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.evaluate_error"]], "expfactor (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.expfactor"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel class method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel class method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel attribute)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fgldr3spectralmodel method)": [[248, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLDR3SpectralModel.unfreeze"]], "superexpcutoffpowerlaw4fglspectralmodel (class in gammapy.modeling.models)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel"]], "__call__() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.__call__"]], "amplitude (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.amplitude"]], "copy() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.copy"]], "covariance (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel static method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.evaluate_error"]], "expfactor (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.expfactor"]], "freeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel class method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel class method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.frozen"]], "index_1 (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.index_1"]], "index_2 (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.index_2"]], "integral() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reassign"]], "reference (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reference"]], "reference_fluxes() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.to_dict"]], "type (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel attribute)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.superexpcutoffpowerlaw4fglspectralmodel method)": [[249, "gammapy.modeling.models.SuperExpCutoffPowerLaw4FGLSpectralModel.unfreeze"]], "temporal_model_registry (in module gammapy.modeling.models)": [[250, "gammapy.modeling.models.TEMPORAL_MODEL_REGISTRY"]], "templatendspatialmodel (class in gammapy.modeling.models)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel"]], "__call__() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.__call__"]], "copy() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.copy"]], "covariance (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.templatendspatialmodel class method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatendspatialmodel class method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.templatendspatialmodel class method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.from_position"]], "frozen (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.is_energy_dependent"]], "map (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.map"]], "parameters (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.position"]], "position_error (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.position_lonlat"]], "reassign() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.reassign"]], "tag (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.to_dict"]], "type (gammapy.modeling.models.templatendspatialmodel attribute)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.unfreeze"]], "write() (gammapy.modeling.models.templatendspatialmodel method)": [[251, "gammapy.modeling.models.TemplateNDSpatialModel.write"]], "templatendspectralmodel (class in gammapy.modeling.models)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel"]], "__call__() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.__call__"]], "copy() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.copy"]], "covariance (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.templatendspectralmodel class method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatendspectralmodel class method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.from_parameters"]], "frozen (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.frozen"]], "integral() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.is_norm_spectral_model"]], "map (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.map"]], "parameters (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.plot_error"]], "reassign() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.to_dict"]], "type (gammapy.modeling.models.templatendspectralmodel attribute)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.unfreeze"]], "write() (gammapy.modeling.models.templatendspectralmodel method)": [[252, "gammapy.modeling.models.TemplateNDSpectralModel.write"]], "templatenpredmodel (class in gammapy.modeling.models)": [[253, "gammapy.modeling.models.TemplateNPredModel"]], "copy() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.copy"]], "covariance (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.covariance"]], "cutout() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.cutout"]], "default_parameters (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.default_parameters"]], "energy_center (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.energy_center"]], "evaluate() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.evaluate"]], "evaluation_radius (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.evaluation_radius"]], "freeze() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.freeze"]], "from_dict() (gammapy.modeling.models.templatenpredmodel class method)": [[253, "gammapy.modeling.models.TemplateNPredModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatenpredmodel class method)": [[253, "gammapy.modeling.models.TemplateNPredModel.from_parameters"]], "frozen (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.frozen"]], "map (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.map"]], "name (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.name"]], "parameters (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.parameters"]], "position (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.position"]], "reassign() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.reassign"]], "slice_by_energy() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.slice_by_energy"]], "spectral_model (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.spectral_model"]], "stack() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.stack"]], "tag (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.tag"]], "to_dict() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.to_dict"]], "type (gammapy.modeling.models.templatenpredmodel attribute)": [[253, "gammapy.modeling.models.TemplateNPredModel.type"]], "unfreeze() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.unfreeze"]], "write() (gammapy.modeling.models.templatenpredmodel method)": [[253, "gammapy.modeling.models.TemplateNPredModel.write"]], "templatephasecurvetemporalmodel (class in gammapy.modeling.models)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel"]], "__call__() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.__call__"]], "copy() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.copy"]], "covariance (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.evaluate"]], "f0 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f0"]], "f1 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f1"]], "f2 (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.f2"]], "freeze() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.frozen"]], "integral() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.parameters"]], "phi_ref (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.phi_ref"]], "plot() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.plot"]], "plot_phasogram() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.plot_phasogram"]], "read() (gammapy.modeling.models.templatephasecurvetemporalmodel class method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.read"]], "reassign() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.reassign"]], "reference_time (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.sample_time"]], "t_ref (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.t_ref"]], "tag (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.tag"]], "time_sum() (gammapy.modeling.models.templatephasecurvetemporalmodel static method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.to_dict"]], "type (gammapy.modeling.models.templatephasecurvetemporalmodel attribute)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.type"]], "unfreeze() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.unfreeze"]], "write() (gammapy.modeling.models.templatephasecurvetemporalmodel method)": [[254, "gammapy.modeling.models.TemplatePhaseCurveTemporalModel.write"]], "templatespatialmodel (class in gammapy.modeling.models)": [[255, "gammapy.modeling.models.TemplateSpatialModel"]], "__call__() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.__call__"]], "copy() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.copy"]], "covariance (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.covariance"]], "default_parameters (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.default_parameters"]], "evaluate() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.evaluate"]], "evaluate_geom() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.evaluate_geom"]], "evaluation_bin_size_min (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.evaluation_bin_size_min"]], "evaluation_radius (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.evaluation_radius"]], "evaluation_region (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.evaluation_region"]], "freeze() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.freeze"]], "from_dict() (gammapy.modeling.models.templatespatialmodel class method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatespatialmodel class method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.from_parameters"]], "from_position() (gammapy.modeling.models.templatespatialmodel class method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.from_position"]], "frozen (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.frozen"]], "integrate_geom() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.integrate_geom"]], "is_energy_dependent (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.is_energy_dependent"]], "lat_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.lat_0"]], "lon_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.lon_0"]], "map (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.map"]], "map_center (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.map_center"]], "parameters (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.parameters"]], "phi_0 (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.phi_0"]], "plot() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.plot"]], "plot_error() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.plot_error"]], "plot_grid() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.plot_grid"]], "plot_interactive() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.plot_interactive"]], "plot_position_error() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.plot_position_error"]], "position (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.position"]], "position_error (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.position_error"]], "position_lonlat (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.position_lonlat"]], "read() (gammapy.modeling.models.templatespatialmodel class method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.read"]], "reassign() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.reassign"]], "tag (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.tag"]], "to_dict() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.to_dict"]], "to_region() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.to_region"]], "type (gammapy.modeling.models.templatespatialmodel attribute)": [[255, "gammapy.modeling.models.TemplateSpatialModel.type"]], "unfreeze() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.unfreeze"]], "write() (gammapy.modeling.models.templatespatialmodel method)": [[255, "gammapy.modeling.models.TemplateSpatialModel.write"]], "templatespectralmodel (class in gammapy.modeling.models)": [[256, "gammapy.modeling.models.TemplateSpectralModel"]], "__call__() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.__call__"]], "copy() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.copy"]], "covariance (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.covariance"]], "default_parameters (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.default_parameters"]], "energy_flux() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.energy_flux"]], "energy_flux_error() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.energy_flux_error"]], "evaluate() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.evaluate"]], "evaluate_error() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.evaluate_error"]], "freeze() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.freeze"]], "from_dict() (gammapy.modeling.models.templatespectralmodel class method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.from_dict"]], "from_parameters() (gammapy.modeling.models.templatespectralmodel class method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.from_parameters"]], "from_region_map() (gammapy.modeling.models.templatespectralmodel class method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.from_region_map"]], "frozen (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.frozen"]], "integral() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.integral"]], "integral_error() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.integral_error"]], "inverse() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.inverse"]], "inverse_all() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.inverse_all"]], "is_norm_spectral_model (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.is_norm_spectral_model"]], "parameters (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.parameters"]], "pivot_energy (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.pivot_energy"]], "plot() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.plot"]], "plot_error() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.plot_error"]], "read_xspec_model() (gammapy.modeling.models.templatespectralmodel class method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.read_xspec_model"]], "reassign() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.reassign"]], "reference_fluxes() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.reference_fluxes"]], "spectral_index() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.spectral_index"]], "spectral_index_error() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.spectral_index_error"]], "tag (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.tag"]], "to_dict() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.to_dict"]], "type (gammapy.modeling.models.templatespectralmodel attribute)": [[256, "gammapy.modeling.models.TemplateSpectralModel.type"]], "unfreeze() (gammapy.modeling.models.templatespectralmodel method)": [[256, "gammapy.modeling.models.TemplateSpectralModel.unfreeze"]], "temporalmodel (class in gammapy.modeling.models)": [[257, "gammapy.modeling.models.TemporalModel"]], "__call__() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.__call__"]], "copy() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.copy"]], "covariance (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.covariance"]], "default_parameters (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.default_parameters"]], "freeze() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.freeze"]], "from_dict() (gammapy.modeling.models.temporalmodel class method)": [[257, "gammapy.modeling.models.TemporalModel.from_dict"]], "from_parameters() (gammapy.modeling.models.temporalmodel class method)": [[257, "gammapy.modeling.models.TemporalModel.from_parameters"]], "frozen (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.frozen"]], "integral() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.integral"]], "is_energy_dependent (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.is_energy_dependent"]], "parameters (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.parameters"]], "plot() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.plot"]], "reassign() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.reassign"]], "reference_time (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.reference_time"]], "sample_time() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.sample_time"]], "time_sum() (gammapy.modeling.models.temporalmodel static method)": [[257, "gammapy.modeling.models.TemporalModel.time_sum"]], "to_dict() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.to_dict"]], "type (gammapy.modeling.models.temporalmodel attribute)": [[257, "gammapy.modeling.models.TemporalModel.type"]], "unfreeze() (gammapy.modeling.models.temporalmodel method)": [[257, "gammapy.modeling.models.TemporalModel.unfreeze"]], "create_cosmic_ray_spectral_model() (in module gammapy.modeling.models)": [[258, "gammapy.modeling.models.create_cosmic_ray_spectral_model"]], "create_crab_spectral_model() (in module gammapy.modeling.models)": [[259, "gammapy.modeling.models.create_crab_spectral_model"]], "create_fermi_isotropic_diffuse_model() (in module gammapy.modeling.models)": [[260, "gammapy.modeling.models.create_fermi_isotropic_diffuse_model"]], "integrate_spectrum() (in module gammapy.modeling.models)": [[261, "gammapy.modeling.models.integrate_spectrum"]], "read_hermes_cube() (in module gammapy.modeling.models)": [[262, "gammapy.modeling.models.read_hermes_cube"]], "scale_plot_flux() (in module gammapy.modeling.models)": [[263, "gammapy.modeling.models.scale_plot_flux"]], "read_hermes_cube() (in module gammapy.modeling.models.utils)": [[264, "gammapy.modeling.models.utils.read_hermes_cube"]], "select_nested_models() (in module gammapy.modeling)": [[265, "gammapy.modeling.select_nested_models"]], "stat_profile_ul_scipy() (in module gammapy.modeling)": [[266, "gammapy.modeling.stat_profile_ul_scipy"]], "cashcountsstatistic (class in gammapy.stats)": [[267, "gammapy.stats.CashCountsStatistic"]], "compute_errn() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.compute_errn"]], "compute_errp() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.compute_errp"]], "compute_upper_limit() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.compute_upper_limit"]], "error (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.error"]], "info_dict() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.info_dict"]], "n_bkg (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.n_bkg"]], "n_sig (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.n_sig"]], "n_sig_matching_significance() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.n_sig_matching_significance"]], "p_value (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.p_value"]], "sqrt_ts (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.sqrt_ts"]], "stat_max (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.stat_max"]], "stat_null (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.stat_null"]], "sum() (gammapy.stats.cashcountsstatistic method)": [[267, "gammapy.stats.CashCountsStatistic.sum"]], "ts (gammapy.stats.cashcountsstatistic attribute)": [[267, "gammapy.stats.CashCountsStatistic.ts"]], "wstatcountsstatistic (class in gammapy.stats)": [[268, "gammapy.stats.WStatCountsStatistic"]], "compute_errn() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.compute_errn"]], "compute_errp() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.compute_errp"]], "compute_upper_limit() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.compute_upper_limit"]], "error (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.error"]], "info_dict() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.info_dict"]], "n_bkg (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.n_bkg"]], "n_sig (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.n_sig"]], "n_sig_matching_significance() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.n_sig_matching_significance"]], "p_value (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.p_value"]], "sqrt_ts (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.sqrt_ts"]], "stat_max (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.stat_max"]], "stat_null (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.stat_null"]], "sum() (gammapy.stats.wstatcountsstatistic method)": [[268, "gammapy.stats.WStatCountsStatistic.sum"]], "ts (gammapy.stats.wstatcountsstatistic attribute)": [[268, "gammapy.stats.WStatCountsStatistic.ts"]], "cash() (in module gammapy.stats)": [[269, "gammapy.stats.cash"]], "cash_sum_cython() (in module gammapy.stats)": [[270, "gammapy.stats.cash_sum_cython"]], "compute_chisq() (in module gammapy.stats)": [[271, "gammapy.stats.compute_chisq"]], "compute_flux_doubling() (in module gammapy.stats)": [[272, "gammapy.stats.compute_flux_doubling"]], "compute_fpp() (in module gammapy.stats)": [[273, "gammapy.stats.compute_fpp"]], "compute_fvar() (in module gammapy.stats)": [[274, "gammapy.stats.compute_fvar"]], "cstat() (in module gammapy.stats)": [[275, "gammapy.stats.cstat"]], "f_cash_root_cython() (in module gammapy.stats)": [[276, "gammapy.stats.f_cash_root_cython"]], "get_wstat_gof_terms() (in module gammapy.stats)": [[277, "gammapy.stats.get_wstat_gof_terms"]], "get_wstat_mu_bkg() (in module gammapy.stats)": [[278, "gammapy.stats.get_wstat_mu_bkg"]], "norm_bounds_cython() (in module gammapy.stats)": [[279, "gammapy.stats.norm_bounds_cython"]], "wstat() (in module gammapy.stats)": [[280, "gammapy.stats.wstat"]], "hierarchical_clustering() (in module gammapy.utils.cluster)": [[281, "gammapy.utils.cluster.hierarchical_clustering"]], "standard_scaler() (in module gammapy.utils.cluster)": [[282, "gammapy.utils.cluster.standard_scaler"]], "d_sun_to_galactic_center (in module gammapy.utils.coordinates)": [[283, "gammapy.utils.coordinates.D_SUN_TO_GALACTIC_CENTER"]], "cartesian() (in module gammapy.utils.coordinates)": [[284, "gammapy.utils.coordinates.cartesian"]], "fov_to_sky() (in module gammapy.utils.coordinates)": [[285, "gammapy.utils.coordinates.fov_to_sky"]], "galactic() (in module gammapy.utils.coordinates)": [[286, "gammapy.utils.coordinates.galactic"]], "motion_since_birth() (in module gammapy.utils.coordinates)": [[287, "gammapy.utils.coordinates.motion_since_birth"]], "polar() (in module gammapy.utils.coordinates)": [[288, "gammapy.utils.coordinates.polar"]], "sky_to_fov() (in module gammapy.utils.coordinates)": [[289, "gammapy.utils.coordinates.sky_to_fov"]], "velocity_glon_glat() (in module gammapy.utils.coordinates)": [[290, "gammapy.utils.coordinates.velocity_glon_glat"]], "hdulocation (class in gammapy.utils.fits)": [[291, "gammapy.utils.fits.HDULocation"]], "get_hdu() (gammapy.utils.fits.hdulocation method)": [[291, "gammapy.utils.fits.HDULocation.get_hdu"]], "info() (gammapy.utils.fits.hdulocation method)": [[291, "gammapy.utils.fits.HDULocation.info"]], "load() (gammapy.utils.fits.hdulocation method)": [[291, "gammapy.utils.fits.HDULocation.load"]], "path() (gammapy.utils.fits.hdulocation method)": [[291, "gammapy.utils.fits.HDULocation.path"]], "lazyfitsdata (class in gammapy.utils.fits)": [[292, "gammapy.utils.fits.LazyFitsData"]], "earth_location_from_dict() (in module gammapy.utils.fits)": [[293, "gammapy.utils.fits.earth_location_from_dict"]], "trapz_loglog() (in module gammapy.utils.integrate)": [[294, "gammapy.utils.integrate.trapz_loglog"]], "scaledregulargridinterpolator (class in gammapy.utils.interpolation)": [[295, "gammapy.utils.interpolation.ScaledRegularGridInterpolator"]], "__call__() (gammapy.utils.interpolation.scaledregulargridinterpolator method)": [[295, "gammapy.utils.interpolation.ScaledRegularGridInterpolator.__call__"]], "interpolate_profile() (in module gammapy.utils.interpolation)": [[296, "gammapy.utils.interpolation.interpolate_profile"]], "interpolation_scale() (in module gammapy.utils.interpolation)": [[297, "gammapy.utils.interpolation.interpolation_scale"]], "backend_default (in module gammapy.utils.parallel)": [[298, "gammapy.utils.parallel.BACKEND_DEFAULT"]], "method_default (in module gammapy.utils.parallel)": [[299, "gammapy.utils.parallel.METHOD_DEFAULT"]], "method_kwargs_default (in module gammapy.utils.parallel)": [[300, "gammapy.utils.parallel.METHOD_KWARGS_DEFAULT"]], "n_jobs_default (in module gammapy.utils.parallel)": [[301, "gammapy.utils.parallel.N_JOBS_DEFAULT"]], "pool_kwargs_default (in module gammapy.utils.parallel)": [[302, "gammapy.utils.parallel.POOL_KWARGS_DEFAULT"]], "multiprocessing_manager (class in gammapy.utils.parallel)": [[303, "gammapy.utils.parallel.multiprocessing_manager"]], "run_multiprocessing() (in module gammapy.utils.parallel)": [[304, "gammapy.utils.parallel.run_multiprocessing"]], "inversecdfsampler (class in gammapy.utils.random)": [[305, "gammapy.utils.random.InverseCDFSampler"]], "sample() (gammapy.utils.random.inversecdfsampler method)": [[305, "gammapy.utils.random.InverseCDFSampler.sample"]], "sample_axis() (gammapy.utils.random.inversecdfsampler method)": [[305, "gammapy.utils.random.InverseCDFSampler.sample_axis"]], "draw() (in module gammapy.utils.random)": [[306, "gammapy.utils.random.draw"]], "get_random_state() (in module gammapy.utils.random)": [[307, "gammapy.utils.random.get_random_state"]], "normalize() (in module gammapy.utils.random)": [[308, "gammapy.utils.random.normalize"]], "pdf() (in module gammapy.utils.random)": [[309, "gammapy.utils.random.pdf"]], "sample_powerlaw() (in module gammapy.utils.random)": [[310, "gammapy.utils.random.sample_powerlaw"]], "sample_sphere() (in module gammapy.utils.random)": [[311, "gammapy.utils.random.sample_sphere"]], "sample_sphere_distance() (in module gammapy.utils.random)": [[312, "gammapy.utils.random.sample_sphere_distance"]], "sample_times() (in module gammapy.utils.random)": [[313, "gammapy.utils.random.sample_times"]], "compound_region_to_regions() (in module gammapy.utils.regions)": [[314, "gammapy.utils.regions.compound_region_to_regions"]], "make_concentric_annulus_sky_regions() (in module gammapy.utils.regions)": [[315, "gammapy.utils.regions.make_concentric_annulus_sky_regions"]], "make_orthogonal_rectangle_sky_regions() (in module gammapy.utils.regions)": [[316, "gammapy.utils.regions.make_orthogonal_rectangle_sky_regions"]], "region_to_frame() (in module gammapy.utils.regions)": [[317, "gammapy.utils.regions.region_to_frame"]], "regions_to_compound_region() (in module gammapy.utils.regions)": [[318, "gammapy.utils.regions.regions_to_compound_region"]], "get_images_paths() (in module gammapy.utils.scripts)": [[319, "gammapy.utils.scripts.get_images_paths"]], "make_path() (in module gammapy.utils.scripts)": [[320, "gammapy.utils.scripts.make_path"]], "read_yaml() (in module gammapy.utils.scripts)": [[321, "gammapy.utils.scripts.read_yaml"]], "recursive_merge_dicts() (in module gammapy.utils.scripts)": [[322, "gammapy.utils.scripts.recursive_merge_dicts"]], "write_yaml() (in module gammapy.utils.scripts)": [[323, "gammapy.utils.scripts.write_yaml"]], "hstack_columns() (in module gammapy.utils.table)": [[324, "gammapy.utils.table.hstack_columns"]], "table_row_to_dict() (in module gammapy.utils.table)": [[325, "gammapy.utils.table.table_row_to_dict"]], "table_standardise_units_copy() (in module gammapy.utils.table)": [[326, "gammapy.utils.table.table_standardise_units_copy"]], "table_standardise_units_inplace() (in module gammapy.utils.table)": [[327, "gammapy.utils.table.table_standardise_units_inplace"]], "checker (class in gammapy.utils.testing)": [[328, "gammapy.utils.testing.Checker"]], "run() (gammapy.utils.testing.checker method)": [[328, "gammapy.utils.testing.Checker.run"]], "assert_quantity_allclose() (in module gammapy.utils.testing)": [[329, "gammapy.utils.testing.assert_quantity_allclose"]], "assert_skycoord_allclose() (in module gammapy.utils.testing)": [[330, "gammapy.utils.testing.assert_skycoord_allclose"]], "assert_time_allclose() (in module gammapy.utils.testing)": [[331, "gammapy.utils.testing.assert_time_allclose"]], "mpl_plot_check() (in module gammapy.utils.testing)": [[332, "gammapy.utils.testing.mpl_plot_check"]], "requires_data() (in module gammapy.utils.testing)": [[333, "gammapy.utils.testing.requires_data"]], "requires_dependency() (in module gammapy.utils.testing)": [[334, "gammapy.utils.testing.requires_dependency"]], "absolute_time() (in module gammapy.utils.time)": [[335, "gammapy.utils.time.absolute_time"]], "time_ref_from_dict() (in module gammapy.utils.time)": [[336, "gammapy.utils.time.time_ref_from_dict"]], "time_ref_to_dict() (in module gammapy.utils.time)": [[337, "gammapy.utils.time.time_ref_to_dict"]], "time_relative_to_ref() (in module gammapy.utils.time)": [[338, "gammapy.utils.time.time_relative_to_ref"]], "standardise_unit() (in module gammapy.utils.units)": [[339, "gammapy.utils.units.standardise_unit"]], "unit_from_fits_image_hdu() (in module gammapy.utils.units)": [[340, "gammapy.utils.units.unit_from_fits_image_hdu"]], "mappanelplotter (class in gammapy.visualization)": [[341, "gammapy.visualization.MapPanelPlotter"]], "plot() (gammapy.visualization.mappanelplotter method)": [[341, "gammapy.visualization.MapPanelPlotter.plot"]], "plot_panel() (gammapy.visualization.mappanelplotter method)": [[341, "gammapy.visualization.MapPanelPlotter.plot_panel"]], "add_colorbar() (in module gammapy.visualization)": [[342, "gammapy.visualization.add_colorbar"]], "annotate_heatmap() (in module gammapy.visualization)": [[343, "gammapy.visualization.annotate_heatmap"]], "colormap_hess() (in module gammapy.visualization)": [[344, "gammapy.visualization.colormap_hess"]], "colormap_milagro() (in module gammapy.visualization)": [[345, "gammapy.visualization.colormap_milagro"]], "plot_contour_line() (in module gammapy.visualization)": [[346, "gammapy.visualization.plot_contour_line"]], "plot_distribution() (in module gammapy.visualization)": [[347, "gammapy.visualization.plot_distribution"]], "plot_heatmap() (in module gammapy.visualization)": [[348, "gammapy.visualization.plot_heatmap"]], "plot_map_rgb() (in module gammapy.visualization)": [[349, "gammapy.visualization.plot_map_rgb"]], "plot_npred_signal() (in module gammapy.visualization)": [[350, "gammapy.visualization.plot_npred_signal"]], "plot_spectrum_datasets_off_regions() (in module gammapy.visualization)": [[351, "gammapy.visualization.plot_spectrum_datasets_off_regions"]], "plot_theta_squared_table() (in module gammapy.visualization)": [[352, "gammapy.visualization.plot_theta_squared_table"]], "1d analysis": [[547, "term-1D-Analysis"]], "3d analysis": [[547, "term-3D-Analysis"]], "aeff": [[547, "term-Aeff"]], "bkg": [[547, "term-Bkg"]], "cash": [[547, "term-Cash"]], "dl3": [[547, "term-DL3"]], "dl4": [[547, "term-DL4"]], "dl5": [[547, "term-DL5"]], "dl6": [[547, "term-DL6"]], "dataset": [[547, "term-Dataset"]], "edisp": [[547, "term-EDisp"]], "estimator": [[547, "term-Estimator"]], "fov": [[547, "term-FoV"]], "fov background": [[547, "term-FoV-Background"]], "gadf": [[547, "term-GADF"]], "gti": [[547, "term-GTI"]], "hli": [[547, "term-HLI"]], "irf": [[547, "term-IRF"]], "joint analysis": [[547, "term-Joint-Analysis"]], "met": [[547, "term-MET"]], "maker": [[547, "term-Maker"]], "psf": [[547, "term-PSF"]], "reco energy": [[547, "term-Reco-Energy"]], "reflected background": [[547, "term-Reflected-Background"]], "ring background": [[547, "term-Ring-Background"]], "roi": [[547, "term-RoI"]], "stacked analysis": [[547, "term-Stacked-Analysis"]], "ts": [[547, "term-TS"]], "true energy": [[547, "term-True-Energy"]], "wstat": [[547, "term-WStat"]]}})